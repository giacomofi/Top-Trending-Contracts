['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '  /**\n', '   * @dev Returns true if `account` is a contract.\n', '   *\n', '   * [IMPORTANT]\n', '   * ====\n', '   * It is unsafe to assume that an address for which this function returns\n', '   * false is an externally-owned account (EOA) and not a contract.\n', '   *\n', '   * Among others, `isContract` will return false for the following\n', '   * types of addresses:\n', '   *\n', '   *  - an externally-owned account\n', '   *  - a contract in construction\n', '   *  - an address where a contract will be created\n', '   *  - an address where a contract lived, but was destroyed\n', '   * ====\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    // This method relies on extcodesize, which returns 0 for contracts in\n', '    // construction, since the code is only stored at the end of the\n', '    // constructor execution.\n', '\n', '    uint256 size;\n', '    // solhint-disable-next-line no-inline-assembly\n', '    assembly {\n', '      size := extcodesize(account)\n', '    }\n', '    return size > 0;\n', '  }\n', '\n', '  /**\n', "   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '   * `recipient`, forwarding all available gas and reverting on errors.\n', '   *\n', '   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '   * imposed by `transfer`, making them unable to receive funds via\n', '   * `transfer`. {sendValue} removes this limitation.\n', '   *\n', '   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '   *\n', '   * IMPORTANT: because control is transferred to `recipient`, care must be\n', '   * taken to not create reentrancy vulnerabilities. Consider using\n', '   * {ReentrancyGuard} or the\n', '   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '   */\n', '  function sendValue(address payable recipient, uint256 amount) internal {\n', '    require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '    (bool success, ) = recipient.call{ value: amount }("");\n', '    require(\n', '      success,\n', '      "Address: unable to send value, recipient may have reverted"\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Performs a Solidity function call using a low level `call`. A\n', '   * plain`call` is an unsafe replacement for a function call: use this\n', '   * function instead.\n', '   *\n', '   * If `target` reverts with a revert reason, it is bubbled up by this\n', '   * function (like regular Solidity function calls).\n', '   *\n', '   * Returns the raw returned data. To convert to the expected return value,\n', '   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `target` must be a contract.\n', '   * - calling `target` with `data` must not revert.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCall(address target, bytes memory data)\n', '    internal\n', '    returns (bytes memory)\n', '  {\n', '    return functionCall(target, data, "Address: low-level call failed");\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '   * `errorMessage` as a fallback revert reason when `target` reverts.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCall(\n', '    address target,\n', '    bytes memory data,\n', '    string memory errorMessage\n', '  ) internal returns (bytes memory) {\n', '    return functionCallWithValue(target, data, 0, errorMessage);\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '   * but also transferring `value` wei to `target`.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - the calling contract must have an ETH balance of at least `value`.\n', '   * - the called Solidity function must be `payable`.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCallWithValue(\n', '    address target,\n', '    bytes memory data,\n', '    uint256 value\n', '  ) internal returns (bytes memory) {\n', '    return\n', '      functionCallWithValue(\n', '        target,\n', '        data,\n', '        value,\n', '        "Address: low-level call with value failed"\n', '      );\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '   * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCallWithValue(\n', '    address target,\n', '    bytes memory data,\n', '    uint256 value,\n', '    string memory errorMessage\n', '  ) internal returns (bytes memory) {\n', '    require(\n', '      address(this).balance >= value,\n', '      "Address: insufficient balance for call"\n', '    );\n', '    require(isContract(target), "Address: call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '    return _verifyCallResult(success, returndata, errorMessage);\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '   * but performing a static call.\n', '   *\n', '   * _Available since v3.3._\n', '   */\n', '  function functionStaticCall(address target, bytes memory data)\n', '    internal\n', '    view\n', '    returns (bytes memory)\n', '  {\n', '    return\n', '      functionStaticCall(target, data, "Address: low-level static call failed");\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '   * but performing a static call.\n', '   *\n', '   * _Available since v3.3._\n', '   */\n', '  function functionStaticCall(\n', '    address target,\n', '    bytes memory data,\n', '    string memory errorMessage\n', '  ) internal view returns (bytes memory) {\n', '    require(isContract(target), "Address: static call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.staticcall(data);\n', '    return _verifyCallResult(success, returndata, errorMessage);\n', '  }\n', '\n', '  function _verifyCallResult(\n', '    bool success,\n', '    bytes memory returndata,\n', '    string memory errorMessage\n', '  ) private pure returns (bytes memory) {\n', '    if (success) {\n', '      return returndata;\n', '    } else {\n', '      // Look for revert reason and bubble it up if present\n', '      if (returndata.length > 0) {\n', '        // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '          let returndata_size := mload(returndata)\n', '          revert(add(32, returndata), returndata_size)\n', '        }\n', '      } else {\n', '        revert(errorMessage);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/[email\xa0protected]\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private _initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private _initializing;\n', '\n', '  /**\n', '   * @dev Modifier to protect an initializer function from being invoked twice.\n', '   */\n', '  modifier initializer() {\n', '    require(\n', '      _initializing || _isConstructor() || !_initialized,\n', '      "Initializable: contract is already initialized"\n', '    );\n', '\n', '    bool isTopLevelCall = !_initializing;\n', '    if (isTopLevelCall) {\n', '      _initializing = true;\n', '      _initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      _initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function _isConstructor() private view returns (bool) {\n', '    return !AddressUpgradeable.isContract(address(this));\n', '  }\n', '}\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '  function __Context_init() internal initializer {\n', '    __Context_init_unchained();\n', '  }\n', '\n', '  function __Context_init_unchained() internal initializer {}\n', '\n', '  function _msgSender() internal view virtual returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '\n', '  uint256[50] private __gap;\n', '}\n', '\n', '// File @openzeppelin/contracts-upgradeable/access/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  function __Ownable_init() internal initializer {\n', '    __Context_init_unchained();\n', '    __Ownable_init_unchained();\n', '  }\n', '\n', '  function __Ownable_init_unchained() internal initializer {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view virtual returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public virtual onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '\n', '  uint256[49] private __gap;\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    uint256 c = a + b;\n', '    if (c < a) return (false, 0);\n', '    return (true, c);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b > a) return (false, 0);\n', '    return (true, a - b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) return (true, 0);\n', '    uint256 c = a * b;\n', '    if (c / a != b) return (false, 0);\n', '    return (true, c);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b == 0) return (false, 0);\n', '    return (true, a / b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '    if (b == 0) return (false, 0);\n', '    return (true, a % b);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b <= a, "SafeMath: subtraction overflow");\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) return 0;\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers, reverting on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0, "SafeMath: division by zero");\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * reverting when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    require(b > 0, "SafeMath: modulo by zero");\n', '    return a % b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {trySub}.\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    return a / b;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * reverting with custom message when dividing by zero.\n', '   *\n', '   * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '   * message unnecessarily. For custom revert reasons use {tryMod}.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '  /**\n', '   * @dev Returns true if `account` is a contract.\n', '   *\n', '   * [IMPORTANT]\n', '   * ====\n', '   * It is unsafe to assume that an address for which this function returns\n', '   * false is an externally-owned account (EOA) and not a contract.\n', '   *\n', '   * Among others, `isContract` will return false for the following\n', '   * types of addresses:\n', '   *\n', '   *  - an externally-owned account\n', '   *  - a contract in construction\n', '   *  - an address where a contract will be created\n', '   *  - an address where a contract lived, but was destroyed\n', '   * ====\n', '   */\n', '  function isContract(address account) internal view returns (bool) {\n', '    // This method relies on extcodesize, which returns 0 for contracts in\n', '    // construction, since the code is only stored at the end of the\n', '    // constructor execution.\n', '\n', '    uint256 size;\n', '    // solhint-disable-next-line no-inline-assembly\n', '    assembly {\n', '      size := extcodesize(account)\n', '    }\n', '    return size > 0;\n', '  }\n', '\n', '  /**\n', "   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '   * `recipient`, forwarding all available gas and reverting on errors.\n', '   *\n', '   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '   * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '   * imposed by `transfer`, making them unable to receive funds via\n', '   * `transfer`. {sendValue} removes this limitation.\n', '   *\n', '   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '   *\n', '   * IMPORTANT: because control is transferred to `recipient`, care must be\n', '   * taken to not create reentrancy vulnerabilities. Consider using\n', '   * {ReentrancyGuard} or the\n', '   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '   */\n', '  function sendValue(address payable recipient, uint256 amount) internal {\n', '    require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '    (bool success, ) = recipient.call{ value: amount }("");\n', '    require(\n', '      success,\n', '      "Address: unable to send value, recipient may have reverted"\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Performs a Solidity function call using a low level `call`. A\n', '   * plain`call` is an unsafe replacement for a function call: use this\n', '   * function instead.\n', '   *\n', '   * If `target` reverts with a revert reason, it is bubbled up by this\n', '   * function (like regular Solidity function calls).\n', '   *\n', '   * Returns the raw returned data. To convert to the expected return value,\n', '   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - `target` must be a contract.\n', '   * - calling `target` with `data` must not revert.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCall(address target, bytes memory data)\n', '    internal\n', '    returns (bytes memory)\n', '  {\n', '    return functionCall(target, data, "Address: low-level call failed");\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '   * `errorMessage` as a fallback revert reason when `target` reverts.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCall(\n', '    address target,\n', '    bytes memory data,\n', '    string memory errorMessage\n', '  ) internal returns (bytes memory) {\n', '    return functionCallWithValue(target, data, 0, errorMessage);\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '   * but also transferring `value` wei to `target`.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - the calling contract must have an ETH balance of at least `value`.\n', '   * - the called Solidity function must be `payable`.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCallWithValue(\n', '    address target,\n', '    bytes memory data,\n', '    uint256 value\n', '  ) internal returns (bytes memory) {\n', '    return\n', '      functionCallWithValue(\n', '        target,\n', '        data,\n', '        value,\n', '        "Address: low-level call with value failed"\n', '      );\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '   * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '   *\n', '   * _Available since v3.1._\n', '   */\n', '  function functionCallWithValue(\n', '    address target,\n', '    bytes memory data,\n', '    uint256 value,\n', '    string memory errorMessage\n', '  ) internal returns (bytes memory) {\n', '    require(\n', '      address(this).balance >= value,\n', '      "Address: insufficient balance for call"\n', '    );\n', '    require(isContract(target), "Address: call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '    return _verifyCallResult(success, returndata, errorMessage);\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '   * but performing a static call.\n', '   *\n', '   * _Available since v3.3._\n', '   */\n', '  function functionStaticCall(address target, bytes memory data)\n', '    internal\n', '    view\n', '    returns (bytes memory)\n', '  {\n', '    return\n', '      functionStaticCall(target, data, "Address: low-level static call failed");\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '   * but performing a static call.\n', '   *\n', '   * _Available since v3.3._\n', '   */\n', '  function functionStaticCall(\n', '    address target,\n', '    bytes memory data,\n', '    string memory errorMessage\n', '  ) internal view returns (bytes memory) {\n', '    require(isContract(target), "Address: static call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.staticcall(data);\n', '    return _verifyCallResult(success, returndata, errorMessage);\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '   * but performing a delegate call.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function functionDelegateCall(address target, bytes memory data)\n', '    internal\n', '    returns (bytes memory)\n', '  {\n', '    return\n', '      functionDelegateCall(\n', '        target,\n', '        data,\n', '        "Address: low-level delegate call failed"\n', '      );\n', '  }\n', '\n', '  /**\n', '   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '   * but performing a delegate call.\n', '   *\n', '   * _Available since v3.4._\n', '   */\n', '  function functionDelegateCall(\n', '    address target,\n', '    bytes memory data,\n', '    string memory errorMessage\n', '  ) internal returns (bytes memory) {\n', '    require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.delegatecall(data);\n', '    return _verifyCallResult(success, returndata, errorMessage);\n', '  }\n', '\n', '  function _verifyCallResult(\n', '    bool success,\n', '    bytes memory returndata,\n', '    string memory errorMessage\n', '  ) private pure returns (bytes memory) {\n', '    if (success) {\n', '      return returndata;\n', '    } else {\n', '      // Look for revert reason and bubble it up if present\n', '      if (returndata.length > 0) {\n', '        // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '          let returndata_size := mload(returndata)\n', '          revert(add(32, returndata), returndata_size)\n', '        }\n', '      } else {\n', '        revert(errorMessage);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  function safeTransfer(\n', '    IERC20 token,\n', '    address to,\n', '    uint256 value\n', '  ) internal {\n', '    _callOptionalReturn(\n', '      token,\n', '      abi.encodeWithSelector(token.transfer.selector, to, value)\n', '    );\n', '  }\n', '\n', '  function safeTransferFrom(\n', '    IERC20 token,\n', '    address from,\n', '    address to,\n', '    uint256 value\n', '  ) internal {\n', '    _callOptionalReturn(\n', '      token,\n', '      abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Deprecated. This function has issues similar to the ones found in\n', '   * {IERC20-approve}, and its usage is discouraged.\n', '   *\n', '   * Whenever possible, use {safeIncreaseAllowance} and\n', '   * {safeDecreaseAllowance} instead.\n', '   */\n', '  function safeApprove(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  ) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    // solhint-disable-next-line max-line-length\n', '    require(\n', '      (value == 0) || (token.allowance(address(this), spender) == 0),\n', '      "SafeERC20: approve from non-zero to non-zero allowance"\n', '    );\n', '    _callOptionalReturn(\n', '      token,\n', '      abi.encodeWithSelector(token.approve.selector, spender, value)\n', '    );\n', '  }\n', '\n', '  function safeIncreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  ) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    _callOptionalReturn(\n', '      token,\n', '      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '    );\n', '  }\n', '\n', '  function safeDecreaseAllowance(\n', '    IERC20 token,\n', '    address spender,\n', '    uint256 value\n', '  ) internal {\n', '    uint256 newAllowance =\n', '      token.allowance(address(this), spender).sub(\n', '        value,\n', '        "SafeERC20: decreased allowance below zero"\n', '      );\n', '    _callOptionalReturn(\n', '      token,\n', '      abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '   * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '   * @param token The token targeted by the call.\n', '   * @param data The call data (encoded using abi.encode or one of its variants).\n', '   */\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '    // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '    bytes memory returndata =\n', '      address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '    if (returndata.length > 0) {\n', '      // Return data is optional\n', '      // solhint-disable-next-line max-line-length\n', '      require(\n', '        abi.decode(returndata, (bool)),\n', '        "SafeERC20: ERC20 operation did not succeed"\n', '      );\n', '    }\n', '  }\n', '}\n', '\n', '// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712BaseUpgradeable.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'contract EIP712BaseUpgradeable is Initializable {\n', '  struct EIP712Domain {\n', '    string name;\n', '    string version;\n', '    uint256 salt;\n', '    address verifyingContract;\n', '  }\n', '\n', '  bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n', '    keccak256(\n', '      bytes(\n', '        "EIP712Domain(string name,string version,uint256 salt,address verifyingContract)"\n', '      )\n', '    );\n', '\n', '  bytes32 internal domainSeperator;\n', '\n', '  function _initialize(string memory name, string memory version)\n', '    public\n', '    virtual\n', '    initializer\n', '  {\n', '    domainSeperator = keccak256(\n', '      abi.encode(\n', '        EIP712_DOMAIN_TYPEHASH,\n', '        keccak256(bytes(name)),\n', '        keccak256(bytes(version)),\n', '        getChainID(),\n', '        address(this)\n', '      )\n', '    );\n', '  }\n', '\n', '  function getChainID() internal pure returns (uint256 id) {\n', '    assembly {\n', '      id := chainid()\n', '    }\n', '  }\n', '\n', '  function getDomainSeperator() private view returns (bytes32) {\n', '    return domainSeperator;\n', '  }\n', '\n', '  /**\n', '   * Accept message hash and returns hash message in EIP712 compatible form\n', '   * So that it can be used to recover signer from signature signed using EIP712 formatted data\n', '   * https://eips.ethereum.org/EIPS/eip-712\n', '   * "\\\\x19" makes the encoding deterministic\n', '   * "\\\\x01" is the version byte to make it compatible to EIP-191\n', '   */\n', '  function toTypedMessageHash(bytes32 messageHash)\n', '    internal\n', '    view\n', '    returns (bytes32)\n', '  {\n', '    return\n', '      keccak256(\n', '        abi.encodePacked("\\x19\\x01", getDomainSeperator(), messageHash)\n', '      );\n', '  }\n', '}\n', '\n', '// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712MetaTransactionUpgradeable.sol\n', '\n', 'pragma solidity ^0.7.4;\n', '\n', 'contract EIP712MetaTransactionUpgradeable is\n', '  Initializable,\n', '  EIP712BaseUpgradeable\n', '{\n', '  using SafeMath for uint256;\n', '  bytes32 private constant META_TRANSACTION_TYPEHASH =\n', '    keccak256(\n', '      bytes(\n', '        "MetaTransaction(uint256 nonce,address from,bytes functionSignature)"\n', '      )\n', '    );\n', '\n', '  event MetaTransactionExecuted(\n', '    address userAddress,\n', '    address payable relayerAddress,\n', '    bytes functionSignature\n', '  );\n', '  mapping(address => uint256) private nonces;\n', '\n', '  /*\n', '   * Meta transaction structure.\n', '   * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n', '   * He should call the desired function directly in that case.\n', '   */\n', '  struct MetaTransaction {\n', '    uint256 nonce;\n', '    address from;\n', '    bytes functionSignature;\n', '  }\n', '\n', '  function _initialize(string memory _name, string memory _version)\n', '    public\n', '    override\n', '    initializer\n', '  {\n', '    EIP712BaseUpgradeable._initialize(_name, _version);\n', '  }\n', '\n', '  function convertBytesToBytes4(bytes memory inBytes)\n', '    internal\n', '    pure\n', '    returns (bytes4 outBytes4)\n', '  {\n', '    if (inBytes.length == 0) {\n', '      return 0x0;\n', '    }\n', '\n', '    assembly {\n', '      outBytes4 := mload(add(inBytes, 32))\n', '    }\n', '  }\n', '\n', '  function executeMetaTransaction(\n', '    address userAddress,\n', '    bytes memory functionSignature,\n', '    bytes32 sigR,\n', '    bytes32 sigS,\n', '    uint8 sigV\n', '  ) public payable virtual returns (bytes memory) {\n', '    bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\n', '    require(\n', '      destinationFunctionSig != msg.sig,\n', '      "functionSignature can not be of executeMetaTransaction method"\n', '    );\n', '    MetaTransaction memory metaTx =\n', '      MetaTransaction({\n', '        nonce: nonces[userAddress],\n', '        from: userAddress,\n', '        functionSignature: functionSignature\n', '      });\n', '    require(\n', '      verify(userAddress, metaTx, sigR, sigS, sigV),\n', '      "Signer and signature do not match"\n', '    );\n', '    nonces[userAddress] = nonces[userAddress].add(1);\n', '    // Append userAddress at the end to extract it from calling context\n', '    (bool success, bytes memory returnData) =\n', '      address(this).call(abi.encodePacked(functionSignature, userAddress));\n', '\n', '    require(success, "Function call not successful");\n', '    emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\n', '    return returnData;\n', '  }\n', '\n', '  function hashMetaTransaction(MetaTransaction memory metaTx)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    return\n', '      keccak256(\n', '        abi.encode(\n', '          META_TRANSACTION_TYPEHASH,\n', '          metaTx.nonce,\n', '          metaTx.from,\n', '          keccak256(metaTx.functionSignature)\n', '        )\n', '      );\n', '  }\n', '\n', '  function getNonce(address user) external view returns (uint256 nonce) {\n', '    nonce = nonces[user];\n', '  }\n', '\n', '  function verify(\n', '    address user,\n', '    MetaTransaction memory metaTx,\n', '    bytes32 sigR,\n', '    bytes32 sigS,\n', '    uint8 sigV\n', '  ) internal view returns (bool) {\n', '    address signer =\n', '      ecrecover(\n', '        toTypedMessageHash(hashMetaTransaction(metaTx)),\n', '        sigV,\n', '        sigR,\n', '        sigS\n', '      );\n', '    require(signer != address(0), "Invalid signature");\n', '    return signer == user;\n', '  }\n', '\n', '  function msgSender() internal view returns (address sender) {\n', '    if (msg.sender == address(this)) {\n', '      bytes memory array = msg.data;\n', '      uint256 index = msg.data.length;\n', '      assembly {\n', '        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n', '        sender := and(\n', '          mload(add(array, index)),\n', '          0xffffffffffffffffffffffffffffffffffffffff\n', '        )\n', '      }\n', '    } else {\n', '      sender = msg.sender;\n', '    }\n', '    return sender;\n', '  }\n', '}\n', '\n', '// File hardhat/[email\xa0protected]\n', '\n', 'pragma solidity >=0.4.22 <0.9.0;\n', '\n', 'library console {\n', '  address constant CONSOLE_ADDRESS =\n', '    address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '  function _sendLogPayload(bytes memory payload) private view {\n', '    uint256 payloadLength = payload.length;\n', '    address consoleAddress = CONSOLE_ADDRESS;\n', '    assembly {\n', '      let payloadStart := add(payload, 32)\n', '      let r := staticcall(\n', '        gas(),\n', '        consoleAddress,\n', '        payloadStart,\n', '        payloadLength,\n', '        0,\n', '        0\n', '      )\n', '    }\n', '  }\n', '\n', '  function log() internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log()"));\n', '  }\n', '\n', '  function logInt(int256 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '  }\n', '\n', '  function logUint(uint256 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '  }\n', '\n', '  function logString(string memory p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '  }\n', '\n', '  function logBool(bool p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '  }\n', '\n', '  function logAddress(address p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '  }\n', '\n', '  function logBytes(bytes memory p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '  }\n', '\n', '  function logBytes1(bytes1 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '  }\n', '\n', '  function logBytes2(bytes2 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '  }\n', '\n', '  function logBytes3(bytes3 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '  }\n', '\n', '  function logBytes4(bytes4 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '  }\n', '\n', '  function logBytes5(bytes5 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '  }\n', '\n', '  function logBytes6(bytes6 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '  }\n', '\n', '  function logBytes7(bytes7 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '  }\n', '\n', '  function logBytes8(bytes8 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '  }\n', '\n', '  function logBytes9(bytes9 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '  }\n', '\n', '  function logBytes10(bytes10 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '  }\n', '\n', '  function logBytes11(bytes11 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '  }\n', '\n', '  function logBytes12(bytes12 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '  }\n', '\n', '  function logBytes13(bytes13 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '  }\n', '\n', '  function logBytes14(bytes14 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '  }\n', '\n', '  function logBytes15(bytes15 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '  }\n', '\n', '  function logBytes16(bytes16 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '  }\n', '\n', '  function logBytes17(bytes17 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '  }\n', '\n', '  function logBytes18(bytes18 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '  }\n', '\n', '  function logBytes19(bytes19 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '  }\n', '\n', '  function logBytes20(bytes20 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '  }\n', '\n', '  function logBytes21(bytes21 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '  }\n', '\n', '  function logBytes22(bytes22 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '  }\n', '\n', '  function logBytes23(bytes23 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '  }\n', '\n', '  function logBytes24(bytes24 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '  }\n', '\n', '  function logBytes25(bytes25 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '  }\n', '\n', '  function logBytes26(bytes26 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '  }\n', '\n', '  function logBytes27(bytes27 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '  }\n', '\n', '  function logBytes28(bytes28 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '  }\n', '\n', '  function logBytes29(bytes29 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '  }\n', '\n', '  function logBytes30(bytes30 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '  }\n', '\n', '  function logBytes31(bytes31 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '  }\n', '\n', '  function logBytes32(bytes32 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '  }\n', '\n', '  function log(uint256 p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '  }\n', '\n', '  function log(string memory p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '  }\n', '\n', '  function log(bool p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '  }\n', '\n', '  function log(address p0) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '  }\n', '\n', '  function log(uint256 p0, uint256 p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '  }\n', '\n', '  function log(uint256 p0, string memory p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '  }\n', '\n', '  function log(uint256 p0, bool p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '  }\n', '\n', '  function log(uint256 p0, address p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '  }\n', '\n', '  function log(string memory p0, uint256 p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '  }\n', '\n', '  function log(string memory p0, string memory p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '  }\n', '\n', '  function log(string memory p0, bool p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '  }\n', '\n', '  function log(string memory p0, address p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '  }\n', '\n', '  function log(bool p0, uint256 p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '  }\n', '\n', '  function log(bool p0, string memory p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '  }\n', '\n', '  function log(bool p0, bool p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '  }\n', '\n', '  function log(bool p0, address p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '  }\n', '\n', '  function log(address p0, uint256 p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '  }\n', '\n', '  function log(address p0, string memory p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '  }\n', '\n', '  function log(address p0, bool p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '  }\n', '\n', '  function log(address p0, address p1) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    uint256 p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    string memory p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,string)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    bool p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    address p2\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,address)", p0, p1, p2)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    uint256 p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    string memory p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(uint,string,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    bool p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(uint,address,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(uint,address,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    uint256 p0,\n', '    address p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(uint,address,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    uint256 p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,uint,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,string,string,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,string,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,string,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    string memory p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,string,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    bool p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,bool,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,uint,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,string,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,bool,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,address,uint)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,address,bool)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    string memory p0,\n', '    address p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(string,address,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    uint256 p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    string memory p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(bool,string,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    bool p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(bool,address,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(bool,address,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    bool p0,\n', '    address p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(bool,address,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,uint,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,uint,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    uint256 p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,uint,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,uint,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,string,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,bool,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,address,uint)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,address,bool)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    string memory p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,string,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,bool,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,bool,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    bool p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,bool,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    uint256 p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    uint256 p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,uint,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    uint256 p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    uint256 p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,uint,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    string memory p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,string,uint)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    string memory p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,string,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    string memory p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,string,bool)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    string memory p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,string,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    bool p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    bool p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,bool,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    bool p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3)\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    bool p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,bool,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    address p2,\n', '    uint256 p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,address,uint)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    address p2,\n', '    string memory p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,address,string)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    address p2,\n', '    bool p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,address,bool)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '\n', '  function log(\n', '    address p0,\n', '    address p1,\n', '    address p2,\n', '    address p3\n', '  ) internal view {\n', '    _sendLogPayload(\n', '      abi.encodeWithSignature(\n', '        "log(address,address,address,address)",\n', '        p0,\n', '        p1,\n', '        p2,\n', '        p3\n', '      )\n', '    );\n', '  }\n', '}\n', '\n', '// File contracts/Coinvise.sol\n', '\n', 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IERC20Extended is IERC20 {\n', '  function decimals() external view returns (uint8);\n', '}\n', '\n', 'contract CoinviseFlattened is\n', '  Initializable,\n', '  OwnableUpgradeable,\n', '  EIP712MetaTransactionUpgradeable\n', '{\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20Extended;\n', '  using SafeERC20 for IERC20;\n', '\n', '  event CampaignCreated(uint256 indexed campaignId);\n', '  event UserRewarded(\n', '    address indexed managerAddress,\n', '    uint256 indexed campaignId,\n', '    address indexed userAddress,\n', '    address tokenAddress,\n', '    uint256 amount\n', '  );\n', '  event Multisent(\n', '    address indexed tokenAddress,\n', '    uint256 recipientsAmount,\n', '    uint256 amount\n', '  );\n', '  event Withdrawn(address indexed recipient, uint256 amount);\n', '\n', '  event Deposited(\n', '    uint256 depositId,\n', '    address indexed depositor,\n', '    address token,\n', '    uint256 amount,\n', '    uint256 price\n', '  );\n', '  event Bought(\n', '    address user,\n', '    uint256 depositId,\n', '    address owner,\n', '    address token,\n', '    uint256 amount,\n', '    uint256 price\n', '  );\n', '  event WithdrawnDepositOwnerBalance(address user, uint256 amount);\n', '\n', '  struct Campaign {\n', '    uint256 campaignId;\n', '    address manager;\n', '    address tokenAddress;\n', '    uint256 initialBalance;\n', '    uint256 remainingBalance;\n', '    uint256 linksAmount;\n', '    uint256 amountPerLink;\n', '    uint256 linksRewardedCount;\n', '  }\n', '\n', '  struct Deposit {\n', '    uint256 depositId;\n', '    address owner;\n', '    address token;\n', '    uint256 initialBalance;\n', '    uint256 remainingBalance;\n', '    uint256 price;\n', '  }\n', '\n', '  /**\n', '   * @dev Following are the state variables for this contract\n', '   *      Due to resrictions of the proxy pattern, do not change the type or order\n', '   *      of the state variables.\n', '   *      https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n', '   */\n', '\n', '  uint256 totalDepositOwnersBalanceInWei;\n', '\n', '  // Next campaign ID by manager\n', '  mapping(address => uint256) internal nextCampaignId;\n', '\n', '  // All campaigns (userAddress => campaignId => Campaign)\n', '  mapping(address => mapping(uint256 => Campaign)) internal campaigns;\n', '\n', '  // All campaign IDs of a user (userAddress => campaignIds[])\n', '  mapping(address => uint256[]) internal campaignIds;\n', '\n', '  // Rewarded addresses by a campaign (campaignId => userAddress[])\n', '  mapping(address => mapping(uint256 => mapping(address => bool)))\n', '    internal addressRewarded;\n', '\n', '  // Rewarded links by a campaign (campaignId => slug[])\n', '  mapping(uint256 => mapping(string => bool)) internal linksRewarded;\n', '\n', '  // Next deposit ID by owner\n', '  mapping(address => uint256) internal nextDepositId;\n', '\n', '  // Deposits by user (userAddress => (depositId => deposit)\n', '  mapping(address => mapping(uint256 => Deposit)) internal deposits;\n', '\n', '  // All deposits IDs of a user (userAddress => depositIds[])\n', '  mapping(address => uint256[]) internal depositIds;\n', '\n', '  // Balances by owner\n', '  mapping(address => uint256) internal depositOwnersBalancesInWei;\n', '\n', '  // This is an address whose private key lives in the coinvise backend\n', '  // Used for signature verification\n', '  address private trustedAddress;\n', '\n', '  // Premiums Charged on Various Services\n', '  uint256 public airdropPerLinkWeiCharged;\n', '  uint256 public multisendPerLinkWeiCharged;\n', '  uint256 public depositPercentageCharged;\n', '  uint256 public depositPercentageChargedDecimals;\n', '\n', '  // Add any new state variables here\n', '  // End of state variables\n', '\n', '  /**\n', '   * @dev We cannot have constructors in upgradeable contracts,\n', '   *      therefore we define an initialize function which we call\n', '   *      manually once the contract is deployed.\n', '   *      the initializer modififer ensures that this can only be called once.\n', '   *      in practice, the openzeppelin library automatically calls the intitazie\n', '   *      function once deployed.\n', '   */\n', '  function initialize(\n', '    address _trustedAddress,\n', '    uint256 _airdropPerLinkWeiCharged,\n', '    uint256 _multisendPerLinkWeiCharged,\n', '    uint256 _depositPercentageCharged,\n', '    uint256 _depositPercentageChargedDecimals\n', '  ) public initializer {\n', '    // Call intialize of Base Contracts\n', '    OwnableUpgradeable.__Ownable_init();\n', '    EIP712MetaTransactionUpgradeable._initialize("Coinvise", "1");\n', '    trustedAddress = _trustedAddress;\n', '\n', '    // Set premiums\n', '    airdropPerLinkWeiCharged = _airdropPerLinkWeiCharged;\n', '    multisendPerLinkWeiCharged = _multisendPerLinkWeiCharged;\n', '    depositPercentageCharged = _depositPercentageCharged;\n', '    depositPercentageChargedDecimals = _depositPercentageChargedDecimals;\n', '  }\n', '\n', '  function setAirdropPremiums(uint256 _airdropPerLinkWeiCharged)\n', '    external\n', '    onlyOwner\n', '  {\n', '    airdropPerLinkWeiCharged = _airdropPerLinkWeiCharged;\n', '  }\n', '\n', '  function setMultisendPremiums(uint256 _mulisendPerLinkWeiCharged)\n', '    external\n', '    onlyOwner\n', '  {\n', '    multisendPerLinkWeiCharged = _mulisendPerLinkWeiCharged;\n', '  }\n', '\n', '  function setDepositPremiums(\n', '    uint256 _depositPercentageCharged,\n', '    uint256 _depositPercentageChargedDecimals\n', '  ) external onlyOwner {\n', '    depositPercentageCharged = _depositPercentageCharged;\n', '    depositPercentageChargedDecimals = _depositPercentageChargedDecimals;\n', '  }\n', '\n', '  function setTrustedAddress(address _trustedAddress) external onlyOwner {\n', '    trustedAddress = _trustedAddress;\n', '  }\n', '\n', '  function withdraw() external onlyOwner {\n', '    uint256 totalBalance = address(this).balance;\n', '    uint256 balance = totalBalance.sub(totalDepositOwnersBalanceInWei);\n', '    msg.sender.transfer(balance);\n', '    emit Withdrawn(msg.sender, balance);\n', '  }\n', '\n', '  // Generate Links\n', '  function _createCampaign(\n', '    address _tokenAddress,\n', '    uint256 _linksAmount,\n', '    uint256 _amountPerLink\n', '  ) internal returns (uint256 _campaignId) {\n', '    require(_linksAmount > 0, "ERR__LINKS_AMOUNT_MUST_BE_GREATHER_THAN_ZERO");\n', '    require(\n', '      _amountPerLink > 0,\n', '      "ERR__AMOUNT_PER_LINK_MUST_BE_GREATHER_THAN_ZERO"\n', '    );\n', '\n', '    uint256 _initialBalance = _linksAmount.mul(_amountPerLink);\n', '    address _sender = msgSender();\n', '\n', '    IERC20(_tokenAddress).safeTransferFrom(\n', '      _sender,\n', '      address(this),\n', '      _initialBalance\n', '    );\n', '\n', '    _campaignId = getCampaignId();\n', '\n', '    Campaign memory _campaign =\n', '      Campaign({\n', '        campaignId: _campaignId,\n', '        manager: _sender,\n', '        tokenAddress: _tokenAddress,\n', '        initialBalance: _initialBalance,\n', '        remainingBalance: _initialBalance,\n', '        linksAmount: _linksAmount,\n', '        amountPerLink: _amountPerLink,\n', '        linksRewardedCount: 0\n', '      });\n', '\n', '    campaigns[_sender][_campaignId] = _campaign;\n', '    campaignIds[_sender].push(_campaignId);\n', '\n', '    emit CampaignCreated(_campaignId);\n', '\n', '    return _campaignId;\n', '  }\n', '\n', '  // Generate Links\n', '  function createCampaignMeta(\n', '    address _tokenAddress,\n', '    uint256 _linksAmount,\n', '    uint256 _amountPerLink\n', '  ) external returns (uint256) {\n', '    return _createCampaign(_tokenAddress, _linksAmount, _amountPerLink);\n', '  }\n', '\n', '  function createCampaign(\n', '    address _tokenAddress,\n', '    uint256 _linksAmount,\n', '    uint256 _amountPerLink\n', '  ) external payable returns (uint256 _campaignId) {\n', '    uint256 priceInWei = airdropPerLinkWeiCharged * _linksAmount;\n', '    require(msg.value == priceInWei, "ERR__CAMPAIGN_PRICE_MUST_BE_PAID");\n', '\n', '    return _createCampaign(_tokenAddress, _linksAmount, _amountPerLink);\n', '  }\n', '\n', '  function getCampaign(address _campaignManager, uint256 _campaignId)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      address,\n', '      address,\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    )\n', '  {\n', '    require(\n', '      campaigns[_campaignManager][_campaignId].campaignId == _campaignId,\n', '      "ERR__CAMPAIGN_DOES_NOT_EXIST"\n', '    );\n', '\n', '    Campaign memory _campaign = campaigns[_campaignManager][_campaignId];\n', '\n', '    return (\n', '      _campaign.campaignId,\n', '      _campaign.manager,\n', '      _campaign.tokenAddress,\n', '      _campaign.initialBalance,\n', '      _campaign.remainingBalance,\n', '      _campaign.linksAmount,\n', '      _campaign.amountPerLink,\n', '      _campaign.linksRewardedCount\n', '    );\n', '  }\n', '\n', '  function getCampaignIdsFromManager(address _campaignManager)\n', '    external\n', '    view\n', '    returns (uint256[] memory)\n', '  {\n', '    return campaignIds[_campaignManager];\n', '  }\n', '\n', '  function claim(\n', '    address _campaignManager,\n', '    uint256 _campaignId,\n', '    bytes32 r,\n', '    bytes32 s,\n', '    uint8 v\n', '  ) external {\n', '    require(\n', '      campaigns[_campaignManager][_campaignId].campaignId == _campaignId,\n', '      "ERR__CAMPAIGN_DOES_NOT_EXIST"\n', '    );\n', '\n', '    address _claimer = msgSender();\n', '    Campaign memory _campaign = campaigns[_campaignManager][_campaignId];\n', '\n', '    require(\n', '      addressRewarded[_campaignManager][_campaignId][_claimer] != true,\n', '      "ERR__ADDRESS_ALREADY_REWARDED"\n', '    );\n', '    // require(linksRewarded[_campaignId][_slug] != true, "ERR__LINK_ALREADY_REWARDED");\n', '\n', '    // Check if signature is correct\n', '    bytes32 messageHash =\n', '      keccak256(\n', '        abi.encodePacked(\n', '          "\\x19Ethereum Signed Message:\\n32",\n', '          keccak256(abi.encode(_campaignManager, _campaignId, _claimer))\n', '        )\n', '      );\n', '    address signer = ecrecover(messageHash, v, r, s);\n', '    require(signer == trustedAddress, "ERR__INVALID_SIGNER");\n', '\n', '    require(\n', '      _campaign.linksRewardedCount < _campaign.linksAmount,\n', '      "ERR__ALL_LINKS_USED"\n', '    );\n', '    require(\n', '      _campaign.remainingBalance >= _campaign.amountPerLink,\n', '      "ERR_NOT_ENOUGH_BALANCE_FOR_REWARDING"\n', '    );\n', '\n', '    address _token = _campaign.tokenAddress;\n', '\n', '    IERC20(_token).safeTransfer(_claimer, _campaign.amountPerLink);\n', '\n', '    // Mark as rewarded\n', '    addressRewarded[_campaignManager][_campaignId][_claimer] = true;\n', '    campaigns[_campaignManager][_campaignId].linksRewardedCount = _campaign\n', '      .linksRewardedCount\n', '      .add(1);\n', '    campaigns[_campaignManager][_campaignId].remainingBalance = _campaign\n', '      .remainingBalance\n', '      .sub(_campaign.amountPerLink);\n', '\n', '    // Emit event\n', '    emit UserRewarded(\n', '      _campaignManager,\n', '      _campaignId,\n', '      _claimer,\n', '      _token,\n', '      _campaign.amountPerLink\n', '    );\n', '  }\n', '\n', '  function _multisend(\n', '    address _token,\n', '    address[] memory _recipients,\n', '    uint256[] memory _amounts\n', '  ) internal {\n', '    uint256 recipientsLength = _recipients.length;\n', '    uint256 amountsLength = _amounts.length;\n', '\n', '    require(amountsLength == recipientsLength, "ERR__INVALID_ARGS");\n', '\n', '    address _user = msgSender();\n', '    uint256 _totalAmount = 0;\n', '\n', '    uint8 i = 0;\n', '    for (i; i < recipientsLength; i++) {\n', '      IERC20(_token).safeTransferFrom(_user, _recipients[i], _amounts[i]);\n', '      _totalAmount = _totalAmount.add(_amounts[i]);\n', '    }\n', '\n', '    // Emit event\n', '    emit Multisent(_token, recipientsLength, _totalAmount);\n', '  }\n', '\n', '  function multisend(\n', '    address _token,\n', '    address[] memory _recipients,\n', '    uint256[] memory _amounts\n', '  ) external payable {\n', '    uint256 recipientsLength = _recipients.length;\n', '\n', '    require(\n', '      msg.value == multisendPerLinkWeiCharged * recipientsLength,\n', '      "ERR__MULTISEND_PRICE_MUST_BE_PAID"\n', '    );\n', '\n', '    _multisend(_token, _recipients, _amounts);\n', '  }\n', '\n', '  function multisendMeta(\n', '    address _token,\n', '    address[] memory _recipients,\n', '    uint256[] memory _amounts\n', '  ) external {\n', '    _multisend(_token, _recipients, _amounts);\n', '  }\n', '\n', '  function getCampaignId() internal returns (uint256 _campaignId) {\n', '    address _campaignManager = msg.sender;\n', '    _campaignId = nextCampaignId[_campaignManager];\n', '\n', '    if (_campaignId <= 0) {\n', '      _campaignId = 1;\n', '    }\n', '\n', '    nextCampaignId[_campaignManager] = _campaignId.add(1);\n', '\n', '    return _campaignId;\n', '  }\n', '\n', '  function getCampaignRewardedCount(address _manager, uint256 _campaignId)\n', '    external\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return campaigns[_manager][_campaignId].linksRewardedCount;\n', '  }\n', '\n', '  function _depositToken(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _price\n', '  ) internal returns (uint256 _depositId) {\n', '    require(_amount > 0, "ERR__AMOUNT_MUST_BE_GREATHER_THAN_ZERO");\n', '    require(_price > 0, "ERR__PRICE_MUST_BE_GREATHER_THAN_ZERO");\n', '\n', '    IERC20Extended tokenContract = IERC20Extended(_token);\n', '\n', '    address _owner = msg.sender;\n', '    tokenContract.safeTransferFrom(_owner, address(this), _amount);\n', '\n', '    _depositId = getDepositId();\n', '    Deposit memory _deposit =\n', '      Deposit({\n', '        depositId: _depositId,\n', '        owner: _owner,\n', '        token: _token,\n', '        initialBalance: _amount,\n', '        remainingBalance: _amount,\n', '        price: _price\n', '      });\n', '\n', '    deposits[_owner][_depositId] = _deposit;\n', '    depositIds[_owner].push(_depositId);\n', '\n', '    emit Deposited(_depositId, _owner, _token, _amount, _price);\n', '  }\n', '\n', '  function depositToken(\n', '    address _token,\n', '    uint256 _amount,\n', '    uint256 _price\n', '  ) external payable returns (uint256 _depositId) {\n', '    IERC20Extended tokenContract = IERC20Extended(_token);\n', '    uint256 decimalsZeros = 10**tokenContract.decimals();\n', '    uint256 priceInWei =\n', '      _price\n', '        .mul(_amount.div(decimalsZeros))\n', '        .div(100)\n', '        .mul(depositPercentageCharged)\n', '        .div(10**depositPercentageChargedDecimals); // depositPercentageCharged% fee\n', '    require(msg.value == priceInWei, "ERR__PRICE_MUST_BE_PAID");\n', '\n', '    return _depositToken(_token, _amount, _price);\n', '  }\n', '\n', '  function getDepositIdsFromOwner(address _owner)\n', '    external\n', '    view\n', '    returns (uint256[] memory)\n', '  {\n', '    return depositIds[_owner];\n', '  }\n', '\n', '  function getDeposit(address _owner, uint256 _depositId)\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      address,\n', '      address,\n', '      uint256,\n', '      uint256,\n', '      uint256\n', '    )\n', '  {\n', '    require(\n', '      deposits[_owner][_depositId].depositId == _depositId,\n', '      "ERR__DEPOSIT_DOES_NOT_EXIST"\n', '    );\n', '\n', '    Deposit memory _deposit = deposits[_owner][_depositId];\n', '\n', '    return (\n', '      _deposit.depositId,\n', '      _deposit.owner,\n', '      _deposit.token,\n', '      _deposit.initialBalance,\n', '      _deposit.remainingBalance,\n', '      _deposit.price\n', '    );\n', '  }\n', '\n', '  function buyToken(\n', '    uint256 _depositId,\n', '    address payable _owner,\n', '    uint256 _amount\n', '  ) external payable {\n', '    require(\n', '      deposits[_owner][_depositId].depositId == _depositId,\n', '      "ERR__DEPOSIT_DOES_NOT_EXIST"\n', '    );\n', '    Deposit memory _deposit = deposits[_owner][_depositId];\n', '    require(_amount > 0, "ERR__AMOUNT_MUST_BE_GREATHER_THAN_ZERO");\n', '    require(\n', '      _deposit.remainingBalance >= _amount,\n', '      "ERR_NOT_ENOUGH_BALANCE_TO_BUY"\n', '    );\n', '\n', '    IERC20Extended tokenContract = IERC20Extended(_deposit.token);\n', '    uint256 decimalsZeros = 10**tokenContract.decimals();\n', '    uint256 totalPrice = _deposit.price.mul(_amount.div(decimalsZeros));\n', '    require(msg.value == totalPrice, "ERR__TOTAL_PRICE_MUST_BE_PAID");\n', '\n', '    deposits[_owner][_depositId].remainingBalance = _deposit\n', '      .remainingBalance\n', '      .sub(_amount);\n', '    IERC20(_deposit.token).safeTransfer(msg.sender, _amount);\n', '\n', '    depositOwnersBalancesInWei[_owner] = depositOwnersBalancesInWei[_owner].add(\n', '      msg.value\n', '    );\n', '    totalDepositOwnersBalanceInWei = totalDepositOwnersBalanceInWei.add(\n', '      msg.value\n', '    );\n', '\n', '    emit Bought(\n', '      msg.sender,\n', '      _depositId,\n', '      _owner,\n', '      _deposit.token,\n', '      _amount,\n', '      _deposit.price\n', '    );\n', '  }\n', '\n', '  function withdrawDepositOwnerBalance() external {\n', '    address payable owner = msg.sender;\n', '    require(\n', '      depositOwnersBalancesInWei[owner] > 0,\n', '      "ERR_NO_BALANCE_TO_WITHDRAW"\n', '    );\n', '    uint256 toWithdraw = depositOwnersBalancesInWei[owner];\n', '    depositOwnersBalancesInWei[owner] = 0;\n', '    totalDepositOwnersBalanceInWei = totalDepositOwnersBalanceInWei.sub(\n', '      toWithdraw\n', '    );\n', '    require(\n', '      totalDepositOwnersBalanceInWei >= 0,\n', '      "ERR_NO_GENERAL_BALANCE_TO_WITHDRAW"\n', '    );\n', '\n', '    owner.transfer(toWithdraw);\n', '\n', '    emit WithdrawnDepositOwnerBalance(owner, toWithdraw);\n', '  }\n', '\n', '  function getDepositOwnerBalance() external view returns (uint256) {\n', '    return depositOwnersBalancesInWei[msg.sender];\n', '  }\n', '\n', '  function getCoinviseBalance() external view returns (uint256) {\n', '    uint256 totalBalance = address(this).balance;\n', '    return totalBalance.sub(totalDepositOwnersBalanceInWei);\n', '  }\n', '\n', '  function getDepositId() internal returns (uint256 _depositId) {\n', '    _depositId = nextDepositId[msg.sender];\n', '\n', '    if (_depositId <= 0) {\n', '      _depositId = 1;\n', '    }\n', '\n', '    nextDepositId[msg.sender] = _depositId.add(1);\n', '\n', '    return _depositId;\n', '  }\n', '}']