['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract ERC20ForAssetGrouping is Ownable, ERC20 {\n', '\n', '    //using Address for address; \n', '\n', '    bool private _minted = false;\n', '    address public assetGouping;\n', '\n', '    uint256 public chainId;\n', '    \n', '    constructor(uint256 _chainId, string memory name, string memory symbol) ERC20(name, symbol) {\n', '        require(_chainId > 0, "Chain ID cannot be 0");\n', '        chainId = _chainId;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws .\n', '     */\n', '    modifier canMint() {\n', '        require(!_minted, "Cant mint more tokens");\n', '        require(assetGouping != address(0), "Asset grouping address not yet set");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Asset grouping contract address from the private chain.\n', '     */\n', '    function setAssetGrouping(address _assetGrouping) public onlyOwner {\n', '        require(_assetGrouping != address(0), "Asset grouping address already set");\n', '        assetGouping = _assetGrouping;\n', '    }\n', '\n', '    function mint(address account, uint256 amount) public onlyOwner canMint {\n', '        _minted = false;\n', '        _mint(account, amount);\n', '    }\n', '}']