['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20, IERC20Metadata {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}.\n', '     *\n', '     * The defaut value of {decimals} is 18. To select a different value for\n', '     * {decimals} you should overload it.\n', '     *\n', '     * All two of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n', '     * overridden;\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual override returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: /verified-sources/0x5b982018545ff26f0cf2e3CdA8aeD859e3072e07/sources/github/kaikendev/kaikenCoin/contracts/mock/KaikenToken.sol\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '\n', '\n', 'contract KaikenToken is ERC20 {\n', '    using SafeMath for uint;\n', '\n', '    // Addresses \n', '    address owner; // dev\n', '    address private investors = 0x456ee95063e52359530b9702C9A3d1EEB46864A7;\n', '    address private exchanges = 0xa611d21b868f2A1d9Cfb383152DC3483Ea15F81F;\n', '    address private marketing = 0x085BA6bef0b3fEACf2D4Cb3Dba5CA11520E2AD01;\n', '    address private reserve = 0xFe76451745386702e091113170b703096dC9E024;\n', '    \n', '    //structs \n', '    struct TaxRecord {\n', '        uint timestamp;\n', '        uint tax;\n', '        uint balance;\n', '    }\n', '    \n', '    struct GenesisRecord {\n', '        uint timestamp;\n', '        uint balance;\n', '    }\n', '\n', '    uint transferMode;\n', '    uint[] startingTaxes = [\n', '        5,\n', '        8,\n', '        10,\n', '        15,\n', '        20,\n', '        25,\n', '        30\n', '    ];\n', '\n', '     uint[] thresholds = [\n', '        5,\n', '        10,\n', '        20,\n', '        30,\n', '        40,\n', '        50\n', '    ];\n', '\n', '    // constants \n', '    uint private constant BPS = 100;\n', '    uint private constant ONE_YEAR = 365;\n', '    uint private constant TRANSFER = 0;\n', '    uint private constant TRANSFER_FROM = 1;\n', '    \n', '    // constants for tokenomics (%)\n', '    uint private OWNER = 20000000000;\n', '    uint private RESERVE = 30000000000;\n', '    uint private INVESTORS = 15000000000;\n', '    uint private EXCHANGES = 20000000000;\n', '    uint private MARKETING = 15000000000;\n', '\n', '    // mappings\n', '    mapping(address => bool) exempts;\n', '    mapping(address => bool) totalExempts;\n', '    mapping(address => TaxRecord[]) accountTaxMap;\n', '    mapping(address => TaxRecord[]) sandboxAccountTaxMap;\n', '    mapping(address => GenesisRecord) genesis;\n', '    \n', '\n', '    //modifiers\n', '    modifier onlyOwner {\n', "        require(msg.sender == owner, 'Only the owner can invoke this call.');\n", '        _;\n', '    }\n', '    // events\n', '    event AddedExempt(address exempted);\n', '    event RemovedExempt(address exempted);\n', '    event RemovedTotalExempt(address exempted);\n', '    event UpdatedExempt(address exempted, bool isValid);\n', '    event UpdatedTotalExempt(address exempted, bool isValid);\n', '    event UpdatedReserve(address reserve);\n', '    event TaxRecordSet(address _addr, uint timestamp, uint balance, uint tax);\n', '    event UpdatedStartingTaxes(uint[] startingTaxes);\n', '    event UpdatedThresholds(uint[] thresholds);\n', '    event InitializedExempts(uint initialized);\n', '    event InitializedTotalExempts(uint initialized);\n', '\n', '    // sandbox events\n', '    event SandboxTaxRecordSet(address addr, uint timestamp, uint balance, uint tax);\n', '\n', '    constructor(\n', '        string memory _name,\n', '        string memory _symbol\n', '    ) public ERC20(_name, _symbol) {\n', '        owner = msg.sender;\n', '        _mint(owner, OWNER * (10 ** uint256(decimals())));\n', '        _mint(reserve, RESERVE * (10 ** uint256(decimals())));\n', '        _mint(exchanges, EXCHANGES * (10 ** uint256(decimals())));\n', '        _mint(investors, INVESTORS * (10 ** uint256(decimals())));\n', '        _mint(marketing, MARKETING * (10 ** uint256(decimals())));\n', '        \n', '        _initializeExempts();\n', '        _initializeTotalExempts();\n', '    }\n', '\n', '    // Overrides\n', '    function transfer(\n', '        address to,\n', '        uint amount\n', '    ) public virtual override returns (bool){\n', '        transferMode = TRANSFER;\n', '        return _internalTransfer(msg.sender, to, amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint amount\n', '    ) public virtual override returns (bool success) {\n', '        transferMode = TRANSFER_FROM;\n', '        return _internalTransfer(from, to, amount);\n', '    }\n', '\n', '    // Reads\n', '    function getStartingTaxes() public view returns(uint[] memory) {\n', '        return startingTaxes;\n', '    }\n', '\n', '    function getThresholds() public view returns(uint[] memory){\n', '        return thresholds;\n', '    }\n', '\n', '    function getExempt(address _addr) public view returns(bool){\n', '        return exempts[_addr];\n', '    }\n', '\n', '    function getTotalExempt(address _addr) public view returns(bool){\n', '        return totalExempts[_addr];\n', '    }\n', '    \n', '    function getTaxRecord(address _addr) public view returns(TaxRecord[] memory){\n', '        return accountTaxMap[_addr];\n', '    }\n', '    \n', '    function getGenesisRecord(address _addr) public view returns(GenesisRecord memory){\n', '        return genesis[_addr];\n', '    }\n', '\n', '    function getReserve() public view returns(address) {\n', '        return reserve;\n', '    }\n', '\n', '    // Writes\n', '    function updateStartingTaxes(uint[] memory _startingTaxes) public onlyOwner {\n', '        startingTaxes = _startingTaxes;\n', '        emit UpdatedStartingTaxes(startingTaxes);\n', '    }\n', '\n', '    function updateThresholds(uint[] memory _thresholds) public onlyOwner {\n', '        thresholds = _thresholds;\n', '        emit UpdatedThresholds(thresholds);\n', '    }\n', '\n', '    function updateReserve(address _reserve) public onlyOwner {\n', '        reserve = _reserve;\n', '        emit UpdatedReserve(reserve);\n', '    }\n', '\n', '    function addExempt(address _exempted, bool totalExempt) public onlyOwner {\n', "        require(_exempted != owner, 'Cannot tax exempt the owner');\n", '        _addExempt(_exempted, totalExempt);\n', '    }\n', '\n', '    function updateExempt(address _exempted, bool isValid) public onlyOwner {\n', "        require(_exempted != owner, 'Can not update Owners tax exempt status');\n", '        exempts[_exempted] = isValid;\n', '        emit UpdatedExempt(_exempted, isValid);\n', '    }\n', '\n', '    function updateTotalExempt(address _exempted, bool isValid) public onlyOwner {\n', "        require(_exempted != owner, 'Can not update Owners tax exempt status');\n", '        totalExempts[_exempted] = isValid;\n', '        if(isValid) {\n', '            exempts[_exempted] = false;\n', '        }\n', '        emit UpdatedTotalExempt(_exempted, isValid);\n', '    }\n', '\n', '    function removeExempt(address _exempted) public onlyOwner {\n', "        require(exempts[_exempted], 'Exempt address is not existent'); \n", '\n', '        exempts[_exempted] = false;\n', '        emit RemovedExempt(_exempted);\n', '    }\n', '\n', '    function removeTotalExempt(address _exempted) public onlyOwner {\n', "        require(totalExempts[_exempted], 'Total Exempt address is not existent'); \n", '\n', '        totalExempts[_exempted] = false;\n', '        emit RemovedTotalExempt(_exempted);\n', '    }\n', '\n', '    // internal functions\n', '    function _addExempt(address _exempted, bool totalExempt) internal {\n', "        require(!exempts[_exempted] || !totalExempts[_exempted], 'Exempt address already existent'); \n", '\n', '        if(totalExempt == false) {\n', '            exempts[_exempted] = true;\n', '        } else {\n', '            totalExempts[_exempted] = true;\n', '            exempts[_exempted] = false;\n', '        }\n', '        emit AddedExempt(_exempted);    \n', '    }\n', '    \n', '    function _initializeExempts() internal {\n', '        // initialize the following exempts: \n', '        // These accounts are exempted from taxation\n', '        exempts[exchanges] = true;\n', '        exempts[investors] = true;\n', '        exempts[marketing] = true;\n', '        exempts[0xf164fC0Ec4E93095b804a4795bBe1e041497b92a] = true; // UniswapV1Router01\n', '        exempts[0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = true; // UniswapV2Router02\n', '        exempts[0xE592427A0AEce92De3Edee1F18E0157C05861564] = true; // UniswapV3Router03\n', '        exempts[0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F] = true; // Sushiswap: Router\n', '        exempts[0xdb38ae75c5F44276803345f7F02e95A0aeEF5944] = true; // 1inch\n', '        exempts[0xBA12222222228d8Ba445958a75a0704d566BF2C8] = true; // Balancer Vault\n', '\n', '        emit InitializedExempts(1);\n', '    } \n', '\n', '    function _initializeTotalExempts() internal {\n', '        // initialize the following total exempts: \n', '        // These accounts are exempt the to and from accounts that \n', '        // interact with them. This is for certain exchanges that fail \n', '        // with any forms of taxation. \n', '        totalExempts[reserve] = true;\n', '        totalExempts[0xCCE8D59AFFdd93be338FC77FA0A298C2CB65Da59] = true; // Bilaxy1\n', '        totalExempts[0xB5Ef14898928FDCE71b54Ea80350B76F9a3617a6] = true; // Bilaxy2\n', '        totalExempts[0x9BA3560231e3E0aD7dde23106F5B98C72E30b468] = true; // Bilaxy3\n', '        \n', '        emit InitializedTotalExempts(1);\n', '    } \n', '\n', '    function _getTaxPercentage(\n', '        address _from,\n', '        address _to,\n', '        uint _sentAmount\n', '    ) internal returns (uint tax) {\n', '        uint taxPercentage = 0;\n', '        uint balanceOfSenderOrFrom = balanceOf(_from);\n', '        uint noww = block.timestamp;\n', '\n', '        require(\n', '            balanceOfSenderOrFrom > 0 && _sentAmount > 0,\n', "            'Intangible balance or amount to send'\n", '        );\n', '\n', '        address accountLiable = transferMode == TRANSFER_FROM\n', '            ? _from\n', '            : msg.sender;\n', '\n', '        bool isDueForTaxExemption =\n', '            !exempts[accountLiable] &&\n', '            !totalExempts[accountLiable] &&\n', '            genesis[accountLiable].timestamp > 0 &&\n', '            genesis[accountLiable].balance > 0 &&\n', '            balanceOf(accountLiable) >= genesis[accountLiable].balance && \n', '            noww - genesis[accountLiable].timestamp >= ONE_YEAR * 1 days;\n', '\n', '        if(isDueForTaxExemption) _addExempt(accountLiable, false);\n', '        \n', '        // Do not tax any transfers associated with total exemptions\n', '        // Do not tax any transfers from exempted accounts\n', '        if (\n', '            exempts[accountLiable] || \n', '            totalExempts[accountLiable] || \n', '            totalExempts[_to]\n', '        ) return taxPercentage;\n', '\n', '        uint percentageTransferred = _sentAmount.mul(100).div(balanceOfSenderOrFrom);\n', '\n', '        if (percentageTransferred <= thresholds[0]) {\n', '            taxPercentage = startingTaxes[0];\n', '        } else if (percentageTransferred <= thresholds[1]) {\n', '            taxPercentage = startingTaxes[1];\n', '        } else if (percentageTransferred <= thresholds[2]) {\n', '            taxPercentage = startingTaxes[2];\n', '        } else if (percentageTransferred <= thresholds[3]) {\n', '            taxPercentage = startingTaxes[3];\n', '        } else if (percentageTransferred <= thresholds[4]) {\n', '            taxPercentage = startingTaxes[4];\n', '        } else if (percentageTransferred <= thresholds[5]) {\n', '            taxPercentage = startingTaxes[5];\n', '        } else {\n', '            taxPercentage = startingTaxes[6];\n', '        }\n', '        \n', '        _setTaxRecord(accountLiable, taxPercentage);\n', '        return taxPercentage;\n', '    }\n', '\n', '    function _getReceivedAmount(\n', '        address _from,\n', '        address _to,\n', '        uint _sentAmount\n', '    ) internal returns (uint receivedAmount, uint taxAmount) {\n', '        uint taxPercentage = _getTaxPercentage(_from, _to, _sentAmount);\n', '        receivedAmount = _sentAmount.sub(_sentAmount.div(BPS).mul(taxPercentage));\n', '        taxAmount = _sentAmount.sub(receivedAmount);\n', '    }\n', '\n', '    function _setTaxRecord(\n', '        address _addr, \n', '        uint _tax\n', '        ) internal {\n', '        uint timestamp = block.timestamp;\n', '        accountTaxMap[_addr].push(TaxRecord({ \n', '            timestamp: timestamp,\n', '            tax: _tax,\n', '            balance: balanceOf(_addr)\n', '        }));\n', '        emit TaxRecordSet(_addr, timestamp, balanceOf(_addr), _tax);\n', '    }\n', '\n', '    function _internalTransfer(\n', '        address _from, // `msg.sender` || `from`\n', '        address _to,\n', '        uint _amount\n', '    ) internal returns (bool success){\n', '        uint noww = block.timestamp;\n', '        \n', '        if(_from == owner && !exempts[owner]) {\n', '            // timelock owner-originated transfers for a year. \n', "            require(noww >= 1654048565, 'Owner is timelocked for 1 year');\n", '            _addExempt(owner, false);\n', '        }\n', '        \n', '        (, uint taxAmount) = _getReceivedAmount(_from, _to, _amount);\n', '        require(\n', '            balanceOf(_from) >= _amount.add(taxAmount),\n', "            'Exclusive taxation: Cannot afford to pay tax'\n", '        ); \n', '        \n', '        if(taxAmount > 0) {\n', '            _burn(_from, taxAmount);\n', '            _mint(reserve, taxAmount);\n', '        }\n', '        \n', '        transferMode == TRANSFER \n', '            ? super.transfer(_to, _amount) \n', '            : super.transferFrom(_from, _to, _amount);\n', '            \n', '        if (genesis[_to].timestamp == 0) {\n', '            genesis[_to].timestamp = noww;\n', '        }\n', '    \n', '        genesis[_to].balance = balanceOf(_to);\n', '        genesis[_from].balance = balanceOf(_from);\n', '        genesis[_from].timestamp = noww;\n', '\n', '        return true;\n', '    }\n', '\n', '    // Sandbox functions\n', '    function sandboxSetTaxRecord(\n', '        address addr, \n', '        uint _tax\n', '        ) public {\n', '        uint noww = block.timestamp;\n', '        sandboxAccountTaxMap[addr].push(TaxRecord({ \n', '            timestamp: noww,\n', '            tax: _tax,\n', '            balance: balanceOf(addr)\n', '        }));\n', '        emit SandboxTaxRecordSet(addr, noww, balanceOf(addr), _tax);\n', '    }\n', '    \n', '     function sandboxGetTaxRecord(\n', '        address addr\n', '        ) public view returns (TaxRecord[] memory tr){\n', '        tr = sandboxAccountTaxMap[addr];\n', '    }\n', '}']