['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', '/*\n', '  Copyright 2021 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.7.1;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/**\n', ' * @notice Interface of the autogenerated views of the `VaultParameters`.\n', ' */\n', 'interface IVaultParametersViewer {\n', '\n', '    function stabilityFee(address asset) external view returns (uint);\n', '\n', '    function liquidationFee(address asset) external view returns (uint);\n', '\n', '    function tokenDebtLimit(address asset) external view returns (uint);\n', '\n', '    function isOracleTypeEnabled(uint _type, address asset) external view returns (bool);\n', '\n', '\n', '    function vault() external view returns (address payable);\n', '\n', '    function foundation() external view returns (address);\n', '\n', '\n', '    function canModifyVault(address who) external view returns (bool);\n', '\n', '    function isManager(address who) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @notice Interface of the autogenerated views of the `VaultManagerParameters`.\n', ' */\n', 'interface IVaultManagerParametersViewer {\n', '\n', '    function vaultParameters() external view returns (address);\n', '\n', '\n', '    function minColPercent(address asset) external view returns (uint);\n', '\n', '    function maxColPercent(address asset) external view returns (uint);\n', '\n', '    function initialCollateralRatio(address asset) external view returns (uint);\n', '\n', '    function liquidationRatio(address asset) external view returns (uint);\n', '\n', '    function liquidationDiscount(address asset) external view returns (uint);\n', '\n', '    function devaluationPeriod(address asset) external view returns (uint);\n', '}\n', '\n', '\n', '/**\n', ' * @notice Views collaterals in one request to save node requests and speed up dapps.\n', ' *\n', ' * @dev It makes no sense to clog a node with hundreds of RPC requests and slow a client app/dapp. Since usually\n', ' *      a huge amount of gas is available to node static calls, we can aggregate asset data in a huge batch on the\n', " *      node's side and pull it to the client.\n", ' */\n', 'contract AssetParametersViewer {\n', '    IVaultParametersViewer public immutable vaultParameters;\n', '\n', '    IVaultManagerParametersViewer public immutable vaultManagerParameters;\n', '\n', '    struct AssetParameters {\n', '        // asset address\n', '        address asset;\n', '\n', '        // Percentage with 3 decimals\n', '        uint stabilityFee;\n', '\n', '        // Percentage with 0 decimals\n', '        uint liquidationFee;\n', '\n', '        // Percentage with 0 decimals\n', '        uint initialCollateralRatio;\n', '\n', '        // Percentage with 0 decimals\n', '        uint liquidationRatio;\n', '\n', '        // Percentage with 3 decimals\n', '        uint liquidationDiscount;\n', '\n', '        // Devaluation period in blocks\n', '        uint devaluationPeriod;\n', '\n', '        // USDP mint limit\n', '        uint tokenDebtLimit;\n', '\n', '        // Oracle types enabled for this asset\n', '        uint[] oracles;\n', '\n', '        // Percentage with 0 decimals\n', '        uint minColPercent;\n', '\n', '        // Percentage with 0 decimals\n', '        uint maxColPercent;\n', '    }\n', '\n', '\n', '    constructor(address _vaultManagerParameters) {\n', '        IVaultManagerParametersViewer vmp = IVaultManagerParametersViewer(_vaultManagerParameters);\n', '        vaultManagerParameters = vmp;\n', '        vaultParameters = IVaultParametersViewer(vmp.vaultParameters());\n', '    }\n', '\n', '    /**\n', '     * @notice Get parameters of one asset\n', '     * @param asset asset address\n', "     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\n", '     */\n', '    function getAssetParameters(address asset, uint maxOracleTypesToSearch)\n', '        public\n', '        view\n', '        returns (AssetParameters memory r)\n', '    {\n', '        r.asset = asset;\n', '        r.stabilityFee = vaultParameters.stabilityFee(asset);\n', '        r.liquidationFee = vaultParameters.liquidationFee(asset);\n', '\n', '        r.initialCollateralRatio = vaultManagerParameters.initialCollateralRatio(asset);\n', '        r.liquidationRatio = vaultManagerParameters.liquidationRatio(asset);\n', '        r.liquidationDiscount = vaultManagerParameters.liquidationDiscount(asset);\n', '        r.devaluationPeriod = vaultManagerParameters.devaluationPeriod(asset);\n', '\n', '        r.tokenDebtLimit = vaultParameters.tokenDebtLimit(asset);\n', '\n', '        r.minColPercent = vaultManagerParameters.minColPercent(asset);\n', '        r.maxColPercent = vaultManagerParameters.maxColPercent(asset);\n', '\n', "        // Memory arrays can't be reallocated so we'll overprovision\n", '        uint[] memory foundOracleTypes = new uint[](maxOracleTypesToSearch);\n', '        uint actualOraclesCount = 0;\n', '\n', '        for (uint _type = 0; _type < maxOracleTypesToSearch; ++_type) {\n', '            if (vaultParameters.isOracleTypeEnabled(_type, asset)) {\n', '                foundOracleTypes[actualOraclesCount++] = _type;\n', '            }\n', '        }\n', '\n', '        r.oracles = new uint[](actualOraclesCount);\n', '        for (uint i = 0; i < actualOraclesCount; ++i) {\n', '            r.oracles[i] = foundOracleTypes[i];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Get parameters of many assets\n', '     * @param assets asset addresses\n', "     * @param maxOracleTypesToSearch since complete list of oracle types is unknown, we'll check types up to this number\n", '     */\n', '    function getMultiAssetParameters(address[] calldata assets, uint maxOracleTypesToSearch)\n', '        external\n', '        view\n', '        returns (AssetParameters[] memory r)\n', '    {\n', '        uint length = assets.length;\n', '        r = new AssetParameters[](length);\n', '        for (uint i = 0; i < length; ++i) {\n', '            r[i] = getAssetParameters(assets[i], maxOracleTypesToSearch);\n', '        }\n', '    }\n', '}']