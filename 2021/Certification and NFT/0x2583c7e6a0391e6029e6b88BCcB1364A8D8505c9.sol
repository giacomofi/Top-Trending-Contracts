['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.5.16;\n', 'import "./modules/Configable.sol";\n', '\n', 'interface IONXPool {\n', '\tfunction init(address supplyToken, address collateralToken) external;\n', '\n', '\tfunction setupConfig(address config) external;\n', '}\n', '\n', 'contract ONXFactory is Configable {\n', '\tevent PoolCreated(address indexed lendToken, address indexed collateralToken, address indexed pool);\n', '\taddress[] public allPools;\n', '\tmapping(address => bool) public isPool;\n', '\tmapping(address => mapping(address => address)) public getPool;\n', '\n', '\tfunction initialize() public initializer {\n', '\t\tConfigable.__config_initialize();\n', '\t}\n', '\n', '\tfunction createPool(address pool, address _lendToken, address _collateralToken) external onlyOwner {\n', '\t\trequire(getPool[_lendToken][_collateralToken] == address(0), "ALREADY CREATED");\n', '\t\tgetPool[_lendToken][_collateralToken] = pool;\n', '\t\tallPools.push(pool);\n', '\t\tisPool[pool] = true;\n', '\t\tIConfig(config).initPoolParams(pool);\n', '\t\tIONXPool(pool).setupConfig(config);\n', '\t\tIONXPool(pool).init(_lendToken, _collateralToken);\n', '\t\temit PoolCreated(_lendToken, _collateralToken, pool);\n', '\t}\n', '\n', '\tfunction countPools() external view returns (uint256) {\n', '\t\treturn allPools.length;\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', 'interface IConfig {\n', '\t\tfunction owner() external view returns (address);\n', '    function platform() external view returns (address);\n', '    function factory() external view returns (address);\n', '    function mint() external view returns (address);\n', '    function token() external view returns (address);\n', '    function developPercent() external view returns (uint);\n', '    function share() external view returns (address);\n', '    function base() external view returns (address); \n', '    function governor() external view returns (address);\n', '    function getPoolValue(address pool, bytes32 key) external view returns (uint);\n', '    function getValue(bytes32 key) external view returns(uint);\n', '    function getParams(bytes32 key) external view returns(uint, uint, uint); \n', '    function getPoolParams(address pool, bytes32 key) external view returns(uint, uint, uint); \n', '    function wallets(bytes32 key) external view returns(address);\n', '    function setValue(bytes32 key, uint value) external;\n', '    function setPoolValue(address pool, bytes32 key, uint value) external;\n', '    function initPoolParams(address _pool) external;\n', '    function isMintToken(address _token) external returns (bool);\n', '    function prices(address _token) external returns (uint);\n', '    function convertTokenAmount(address _fromToken, address _toToken, uint _fromAmount) external view returns (uint);\n', '    function DAY() external view returns (uint);\n', '    function WETH() external view returns (address);\n', '}\n', '\n', 'contract Configable is Initializable {\n', '\taddress public config;\n', '\taddress public owner;\n', '\tevent OwnerChanged(address indexed _oldOwner, address indexed _newOwner);\n', '\n', '\tfunction __config_initialize() internal initializer {\n', '\t\towner = msg.sender;\n', '\t}\n', '\n', '\tfunction setupConfig(address _config) external onlyOwner {\n', '\t\tconfig = _config;\n', '\t\towner = IConfig(config).owner();\n', '\t}\n', '\n', '\tmodifier onlyOwner() {\n', '\t\trequire(msg.sender == owner, "OWNER FORBIDDEN");\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyPlatform() {\n', '\t\trequire(msg.sender == IConfig(config).platform(), "PLATFORM FORBIDDEN");\n', '\t\t_;\n', '\t}\n', '\n', '\tmodifier onlyFactory() {\n', "\t\t\trequire(msg.sender == IConfig(config).factory(), 'FACTORY FORBIDDEN');\n", '\t\t\t_;\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}']