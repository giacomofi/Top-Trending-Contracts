['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity 0.7.1;\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '}\n', '\n', 'contract SmartCrowdSharing {\n', '    \n', '    using SafeMath for *;\n', '    \n', '    address public system_owner;\n', '    uint public current_id = 0;\n', '    mapping(uint => uint) private BONUS_A;\n', '    mapping(uint => uint) private BONUS_B;\n', '    mapping(uint => uint) private I_PRICE;\n', '    uint private price_id = 0;\n', '\n', '    struct MemberObject {\n', '        bool is_exist;\n', '        uint member_id;\n', '        address member_address;\n', '        uint sponsor_id;\n', '        address[] downlines;\n', '        uint downline_qty;\n', '        uint create_time;\n', '    }\n', '\n', '    mapping (uint => MemberObject) public map_id_members;\n', '    mapping (address => MemberObject) public map_address_members;\n', '\n', '    event Create_new_member(address indexed _address_member, address indexed _address_sponsor, uint _time);\n', '    event Change_price_index(uint current_index, uint new_index);\n', '    event Sent_sponsor_bonus(address indexed _address_sponsor, address indexed _address_member, uint _level, uint _bonus, uint _time);\n', '    event Get_ethereum_balance(address indexed _system_owner, address indexed _address_member, uint _amount, uint _time);\n', '    event Change_owner(address indexed _current_owner, address indexed _new_owner, uint _time);\n', '\n', '\n', '    constructor() public {\n', '\n', '        BONUS_A[1] = 40;\n', '        BONUS_A[2] = 4;\n', '        BONUS_A[3] = 3;\n', '        BONUS_A[4] = 2;\n', '        BONUS_A[5] = 1;\n', '\n', '        BONUS_B[1] = 3;\n', '        BONUS_B[2] = 3;\n', '        BONUS_B[3] = 3;\n', '        BONUS_B[4] = 3;\n', '        BONUS_B[5] = 3;\n', '        BONUS_B[6] = 3;\n', '        BONUS_B[7] = 3;\n', '        BONUS_B[8] = 3;\n', '        BONUS_B[9] = 3;\n', '        BONUS_B[10] = 3;\n', '\n', '        I_PRICE[1] = 0.1 ether;\n', '        I_PRICE[2] = 0.2 ether;\n', '        I_PRICE[3] = 0.3 ether;\n', '        I_PRICE[4] = 0.4 ether;\n', '        I_PRICE[5] = 0.5 ether;\n', '        I_PRICE[6] = 0.6 ether;\n', '        I_PRICE[7] = 0.7 ether;\n', '        I_PRICE[8] = 0.8 ether;\n', '        I_PRICE[9] = 0.9 ether;\n', '        I_PRICE[10] = 1.0 ether;\n', '\n', '        price_id = 5;\n', '\n', '        system_owner = msg.sender;\n', '\n', '        current_id++;\n', '\n', '        MemberObject memory member;\n', '\n', '        member = MemberObject({\n', '            is_exist: true,\n', '            member_id: current_id,\n', '            member_address: msg.sender,\n', '            sponsor_id: 0,\n', '            downlines: new address[](0),\n', '            downline_qty: 0,\n', '            create_time: block.timestamp\n', '        });\n', '        map_id_members[current_id] = member;\n', '        map_address_members[msg.sender] = member;\n', '    }\n', '\n', '    receive() external payable {\n', '        if (msg.value != I_PRICE[price_id]) {\n', "            revert('Incorrect value send');\n", '        }\n', '\n', '        if (map_address_members[msg.sender].is_exist) {\n', "            revert('Cancel transaction, the account is already exist');\n", '        }\n', '\n', '        uint from_id = 0;\n', '\n', '        address sponsor_address = bytes_address(msg.data);\n', '\n', '        if (map_address_members[sponsor_address].is_exist) {\n', '            from_id = map_address_members[sponsor_address].sponsor_id;\n', '        } else {\n', "            revert('Incorrect sponsor');\n", '        }\n', '\n', '        new_member(from_id);\n', '    }\n', '\n', '    function new_member(uint from_id) public payable {\n', "        require(!map_address_members[msg.sender].is_exist, 'This account is already exist');\n", "        require(from_id > 0 && from_id <= current_id, 'Incorrect sponsor id');\n", "        require(msg.value == I_PRICE[price_id], 'Incorrect value send');\n", '\n', '        uint time_now = block.timestamp;\n', '\n', '        MemberObject memory member;\n', '        current_id++;\n', '\n', '        member = MemberObject({\n', '            is_exist: true,\n', '            member_id: current_id,\n', '            member_address: msg.sender,\n', '            sponsor_id: from_id,\n', '            downlines: new address[](0),\n', '            downline_qty: 0,\n', '            create_time: time_now\n', '        });\n', '        map_id_members[current_id] = member;\n', '        map_address_members[msg.sender] = member;\n', '\n', '        map_id_members[from_id].downlines.push(msg.sender);\n', '        map_id_members[from_id].downline_qty++;\n', '\n', '        uint sponsor_id = from_id;\n', '        uint level = 1;\n', '        uint not_found = 0;\n', '\n', '        uint percent = 0;\n', '        uint256 amount = I_PRICE[price_id];\n', '        uint256 bonus = 0;\n', '        uint256 bonus_paid = 0;\n', '        uint256 amount_balance = 0;\n', '\n', '        while (level <= 10 && not_found == 0) {\n', '            if (map_id_members[sponsor_id].is_exist) {\n', '\n', '                // Calculate bonus\n', '                percent = 0;\n', '                if (level <= 5) {\n', '                    percent = BONUS_A[level];\n', '                }\n', '                if (map_id_members[sponsor_id].downline_qty >= 5) {\n', '                    percent += BONUS_B[level];\n', '                } else if (map_id_members[sponsor_id].downline_qty >= 4) {\n', '                    if (level <= 8) {\n', '                        percent += BONUS_B[level];\n', '                    }\n', '                } else if (map_id_members[sponsor_id].downline_qty >= 3) {\n', '                    if (level <= 6) {\n', '                        percent += BONUS_B[level];\n', '                    }\n', '                } else if (map_id_members[sponsor_id].downline_qty >= 2) {\n', '                    if (level <= 4) {\n', '                        percent += BONUS_B[level];\n', '                    }\n', '                } else if (map_id_members[sponsor_id].downline_qty >= 1) {\n', '                    if (level <= 2) {\n', '                        percent += BONUS_B[level];\n', '                    }\n', '                }\n', '\n', '                bonus = amount.mul(percent).div(100);\n', '\n', '                if (bonus > 0) {\n', '                    bonus_paid = bonus_paid.add(bonus);\n', '                    pay_sponsor_bonus(level, bonus, map_id_members[sponsor_id].member_address);\n', '                }\n', '\n', '                // Next upline\n', '                sponsor_id = map_id_members[sponsor_id].sponsor_id;\n', '                if (sponsor_id == 0) {\n', '                    not_found = 1;\n', '                }\n', '            } else {\n', '                not_found = 1;\n', '            }\n', '            level++;\n', '        }\n', '\n', '        bool is_sent = false;\n', '        amount_balance = amount.sub(bonus_paid);\n', '        is_sent = address(uint160(system_owner)).send(amount_balance);\n', '        if (is_sent) {\n', '            emit Get_ethereum_balance(system_owner, msg.sender, amount_balance, time_now);\n', '        }\n', '        emit Create_new_member(msg.sender, map_id_members[from_id].member_address, time_now);\n', '    }\n', '\n', '    function pay_sponsor_bonus(uint _level, uint _bonus, address _sponsor_address) internal {\n', '        bool is_sent = false;\n', '        is_sent = address(uint160(_sponsor_address)).send(_bonus);\n', '        if (is_sent) {\n', '            emit Sent_sponsor_bonus(_sponsor_address, msg.sender, _level, _bonus, block.timestamp);\n', '        }\n', '    }\n', '\n', '    function bytes_address(bytes memory data) private pure returns (address sponsor_address) {\n', '        assembly {\n', '            sponsor_address := mload(add(data, 20))\n', '        }\n', '    }\n', '\n', '    function change_price_index(uint new_index) external {\n', '        require(msg.sender == system_owner, "Reserved function");\n', '        _change_price_index(new_index);\n', '    }\n', '\n', '    function _change_price_index(uint new_index) internal {\n', '        require(new_index >= 1 && new_index <= 10, "Incorrect index");\n', '        emit Change_price_index(price_id, new_index);\n', '        price_id = new_index;\n', '    }\n', '\n', '    function get_price_index() public view returns (uint) {\n', '        return price_id;\n', '    }\n', '\n', '    function get_current_price() public view returns(uint) {\n', '        return I_PRICE[price_id];\n', '    }\n', '\n', '    function transfer_owner(address new_owner) external {\n', '        require(msg.sender == system_owner,"Reserved function");\n', '        _transfer_owner(new_owner);\n', '    }\n', '\n', '    function _transfer_owner(address new_owner) internal {\n', '        require(new_owner != address(0), "New owner is not zero address");\n', '        emit Change_owner(system_owner, new_owner, block.timestamp);\n', '        system_owner = new_owner;\n', '    }\n', '}']