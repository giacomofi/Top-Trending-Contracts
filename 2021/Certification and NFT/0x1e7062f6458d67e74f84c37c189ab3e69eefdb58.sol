['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', '// contracts/HolyPool.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSetUpgradeable {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library CountersUpgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable {\n', '    function __AccessControl_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '    }\n', '\n', '    function __AccessControl_init_unchained() internal initializer {\n', '    }\n', '    using EnumerableSetUpgradeable for EnumerableSetUpgradeable.AddressSet;\n', '    using AddressUpgradeable for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSetUpgradeable.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    function __ERC20_init(string memory name_, string memory symbol_) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name_, symbol_);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that allows token holders to destroy both their own\n', ' * tokens and those that they have an allowance for, in a way that can be\n', ' * recognized off-chain (via event analysis).\n', ' */\n', 'abstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\n', '    function __ERC20Burnable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20Burnable_init_unchained();\n', '    }\n', '\n', '    function __ERC20Burnable_init_unchained() internal initializer {\n', '    }\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from the caller.\n', '     *\n', '     * See {ERC20-_burn}.\n', '     */\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n", '     * allowance.\n', '     *\n', '     * See {ERC20-_burn} and {ERC20-allowance}.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have allowance for ``accounts``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function burnFrom(address account, uint256 amount) public virtual {\n', '        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, "ERC20: burn amount exceeds allowance");\n', '\n', '        _approve(account, _msgSender(), decreasedAllowance);\n', '        _burn(account, amount);\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev ERC20 token with pausable token transfers, minting and burning.\n', ' *\n', ' * Useful for scenarios such as preventing trades until the end of an evaluation\n', ' * period, or having an emergency switch for freezing all token transfers in the\n', ' * event of a large bug.\n', ' */\n', 'abstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\n', '    function __ERC20Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20Pausable_init_unchained();\n', '    }\n', '\n', '    function __ERC20Pausable_init_unchained() internal initializer {\n', '    }\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the contract must not be paused.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        require(!paused(), "ERC20Pausable: token transfer while paused");\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev {ERC20} token, including:\n', ' *\n', ' *  - ability for holders to burn (destroy) their tokens\n', ' *  - a minter role that allows for token minting (creation)\n', ' *  - a pauser role that allows to stop all token transfers\n', ' *\n', ' * This contract uses {AccessControl} to lock permissioned functions using the\n', ' * different roles - head to its documentation for details.\n', ' *\n', ' * The account that deploys the contract will be granted the minter and pauser\n', ' * roles, as well as the default admin role, which will let it grant both minter\n', ' * and pauser roles to other accounts.\n', ' */\n', 'contract ERC20PresetMinterPauserUpgradeable is Initializable, ContextUpgradeable, AccessControlUpgradeable, ERC20BurnableUpgradeable, ERC20PausableUpgradeable {\n', '    function initialize(string memory name, string memory symbol) public virtual initializer {\n', '        __ERC20PresetMinterPauser_init(name, symbol);\n', '    }\n', '    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '\n', '    /**\n', '     * @dev Grants `DEFAULT_ADMIN_ROLE`, `MINTER_ROLE` and `PAUSER_ROLE` to the\n', '     * account that deploys the contract.\n', '     *\n', '     * See {ERC20-constructor}.\n', '     */\n', '    function __ERC20PresetMinterPauser_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '        __ERC20Burnable_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20Pausable_init_unchained();\n', '        __ERC20PresetMinterPauser_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20PresetMinterPauser_init_unchained(string memory name, string memory symbol) internal initializer {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '\n', '        _setupRole(MINTER_ROLE, _msgSender());\n', '        _setupRole(PAUSER_ROLE, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` new tokens for `to`.\n', '     *\n', '     * See {ERC20-_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MINTER_ROLE`.\n', '     */\n', '    function mint(address to, uint256 amount) public virtual {\n', '        require(hasRole(MINTER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have minter role to mint");\n', '        _mint(to, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_pause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function pause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to pause");\n', '        _pause();\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses all token transfers.\n', '     *\n', '     * See {ERC20Pausable} and {Pausable-_unpause}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function unpause() public virtual {\n', '        require(hasRole(PAUSER_ROLE, _msgSender()), "ERC20PresetMinterPauser: must have pauser role to unpause");\n', '        _unpause();\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20Upgradeable, ERC20PausableUpgradeable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' */\n', 'interface IERC20PermitUpgradeable {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '\n', '/**\n', ' * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n', ' *\n', ' * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n', ' * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n', ' * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n', ' *\n', ' * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n', ' * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n', ' * ({_hashTypedDataV4}).\n', ' *\n', ' * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n', ' * the chain id to protect against replay attacks on an eventual fork of the chain.\n', ' *\n', ' * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method\n', ' * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n', ' */\n', 'abstract contract EIP712Upgradeable is Initializable {\n', '    /* solhint-disable var-name-mixedcase */\n', '    bytes32 private _HASHED_NAME;\n', '    bytes32 private _HASHED_VERSION;\n', '    bytes32 private constant _TYPE_HASH = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '    /* solhint-enable var-name-mixedcase */\n', '\n', '    /**\n', '     * @dev Initializes the domain separator and parameter caches.\n', '     *\n', '     * The meaning of `name` and `version` is specified in\n', '     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n', '     *\n', '     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n', '     * - `version`: the current major version of the signing domain.\n', '     *\n', '     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n', '     * contract upgrade].\n', '     */\n', '    function __EIP712_init(string memory name, string memory version) internal initializer {\n', '        __EIP712_init_unchained(name, version);\n', '    }\n', '\n', '    function __EIP712_init_unchained(string memory name, string memory version) internal initializer {\n', '        bytes32 hashedName = keccak256(bytes(name));\n', '        bytes32 hashedVersion = keccak256(bytes(version));\n', '        _HASHED_NAME = hashedName;\n', '        _HASHED_VERSION = hashedVersion;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the domain separator for the current chain.\n', '     */\n', '    function _domainSeparatorV4() internal view returns (bytes32) {\n', '        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n', '    }\n', '\n', '    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n', '        return keccak256(\n', '            abi.encode(\n', '                typeHash,\n', '                name,\n', '                version,\n', '                _getChainId(),\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n', '     * function returns the hash of the fully encoded EIP712 message for this domain.\n', '     *\n', '     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n', '     *\n', '     * ```solidity\n', '     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n', '     *     keccak256("Mail(address to,string contents)"),\n', '     *     mailTo,\n', '     *     keccak256(bytes(mailContents))\n', '     * )));\n', '     * address signer = ECDSA.recover(digest, signature);\n', '     * ```\n', '     */\n', '    function _hashTypedDataV4(bytes32 structHash) internal view returns (bytes32) {\n', '        return keccak256(abi.encodePacked("\\x19\\x01", _domainSeparatorV4(), structHash));\n', '    }\n', '\n', '    function _getChainId() private view returns (uint256 chainId) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev The hash of the name parameter for the EIP712 domain.\n', '     *\n', '     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n', '     * are a concern.\n', '     */\n', '    function _EIP712NameHash() internal virtual view returns (bytes32) {\n', '        return _HASHED_NAME;\n', '    }\n', '\n', '    /**\n', '     * @dev The hash of the version parameter for the EIP712 domain.\n', '     *\n', '     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n', '     * are a concern.\n', '     */\n', '    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n', '        return _HASHED_VERSION;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' */\n', 'abstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n', '    using CountersUpgradeable for CountersUpgradeable.Counter;\n', '\n', '    mapping (address => CountersUpgradeable.Counter) private _nonces;\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    bytes32 private _PERMIT_TYPEHASH;\n', '\n', '    /**\n', '     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.\n', '     *\n', "     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n", '     */\n', '    function __ERC20Permit_init(string memory name) internal initializer {\n', '        __Context_init_unchained();\n', '        __EIP712_init_unchained(name, "1");\n', '        __ERC20Permit_init_unchained(name);\n', '    }\n', '\n', '    function __ERC20Permit_init_unchained(string memory name) internal initializer {\n', '        _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-permit}.\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp <= deadline, "ERC20Permit: expired deadline");\n', '\n', '        bytes32 structHash = keccak256(\n', '            abi.encode(\n', '                _PERMIT_TYPEHASH,\n', '                owner,\n', '                spender,\n', '                amount,\n', '                _nonces[owner].current(),\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash = _hashTypedDataV4(structHash);\n', '\n', '        address signer = _recoverSigner(hash, v, r, s);\n', '        require(signer == owner, "ERC20Permit: invalid signature");\n', '\n', '        _nonces[owner].increment();\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n', '     * `r` and `s` signature fields separately.\n', '     */\n', '    function _recoverSigner(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n Г· 2 + 1, and for v in (282): v в€€ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-nonces}.\n', '     */\n', '    function nonces(address owner) public view override returns (uint256) {\n', '        return _nonces[owner].current();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n', '        return _domainSeparatorV4();\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/*\n', '   "HH", "Holyheld", the Holyheld token contract\n', '\n', '   Properties used from OpenZeppelin:\n', '     ERC20PresetMinterPauserUpgradeable.sol -- preset for mintable, pausable, burnable ERC20 token\n', '     ERC20PermitUpgradeable.sol -- ported from drafts (test added) to implement permit()\n', '*/\n', 'contract HHToken is ERC20PresetMinterPauserUpgradeable, ERC20PermitUpgradeable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    // initializer is defined within preset\n', '    function initialize(string memory name, string memory symbol) public override initializer {\n', '        __Context_init_unchained();\n', '        __AccessControl_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '        __ERC20Burnable_init_unchained();\n', '        __Pausable_init_unchained();\n', '        __ERC20Pausable_init_unchained();\n', '        __ERC20PresetMinterPauser_init_unchained(name, symbol);\n', '        __ERC20Permit_init(name);\n', '    }\n', '\n', '    function uniqueIdentifier() public pure returns(string memory) {\n', '        return "HolyheldToken";\n', '    }\n', '\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override(ERC20PresetMinterPauserUpgradeable, ERC20Upgradeable) {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '    }\n', '\n', '    // all contracts that do not hold funds have this emergency function if someone occasionally\n', '\t// transfers ERC20 tokens directly to this contract\n', '\t// callable only by owner\n', '\tfunction emergencyTransfer(address _token, address _destination, uint256 _amount) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\tIERC20(_token).safeTransfer(_destination, _amount);\n', '\t}\n', '}\n', '\n', '// Interface to represent asset pool interactions\n', 'interface IHolyPool {\n', '    function getBaseAsset() external view returns(address);\n', '\n', '    // functions callable by HolyHand transfer proxy\n', '    function depositOnBehalf(address beneficiary, uint256 amount) external;\n', '    function withdraw(address beneficiary, uint256 amount) external;\n', '\n', '    // functions callable by HolyValor investment proxies\n', '    // pool would transfer funds to HolyValor (returns actual amount, could be less than asked)\n', '    function borrowToInvest(uint256 amount) external returns(uint256);\n', '    // return invested body portion from HolyValor (pool will claim base assets from caller Valor)\n', '    function returnInvested(uint256 amountCapitalBody) external;\n', '\n', '    // functions callable by HolyRedeemer yield distributor\n', "    function harvestYield(uint256 amount) external; // pool would transfer amount tokens from caller as it's profits\n", '}\n', '\n', '// Interface to represent middleware contract for swapping tokens\n', 'interface IHolyWing {\n', "    // returns amount of 'destination token' that 'source token' was swapped to\n", '    // NOTE: HolyWing grants allowance to arbitrary address (with call to contract that could be forged) and should not hold any funds\n', '    function executeSwap(address tokenFrom, address tokenTo, uint256 amount, bytes calldata data) external returns(uint256);\n', '}\n', '\n', '/*\n', '    HolyHand is a transfer proxy contract for ERC20 and ETH transfers through Holyheld infrastructure (deposit/withdraw to HolyPool)\n', '    - extract fees;\n', '    - call token conversion if needed;\n', '    - deposit/withdraw tokens into HolyPool;\n', '    - non-custodial, not holding any funds;\n', '\n', '    This contract is a single address that user grants allowance to on any ERC20 token.\n', '    This contract could be upgraded in the future to provide subsidized transactions.\n', '\n', '    TODO: if token supports permit, provide ability to execute without separate approve()\n', '*/\n', 'contract HolyHand is AccessControlUpgradeable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  uint256 private constant ALLOWANCE_SIZE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '\n', '  // if greater than zero, this is a percentage fee applied to all deposits\n', '  uint256 public depositFee;\n', '  // if greater than zero, this is a percentage fee applied to exchange operations with HolyWing proxy\n', '  uint256 public exchangeFee;\n', '  // if greater than zero, this is a percentage fee applied to withdraw operations\n', '  uint256 public withdrawFee;\n', '\n', '  // HolyWing exchange proxy/middleware\n', '  IHolyWing private exchangeProxyContract;\n', '\n', '  // HolyRedeemer yield distributor\n', '  // NOTE: to keep overhead for users minimal, fees are not transferred\n', '  // immediately, but left on this contract balance, yieldDistributor can reclaim them\n', '  address private yieldDistributorAddress;\n', '\n', '  event TokenSwap(address indexed tokenFrom, address indexed tokenTo, address sender, uint256 amountFrom, uint256 expectedMinimumReceived, uint256 amountReceived);\n', '\n', '  event FeeChanged(string indexed name, uint256 value);\n', '  \n', '  event EmergencyTransfer(address indexed token, address indexed destination, uint256 amount);\n', '\n', '  function initialize() public initializer {\n', '\t\t_setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '\n', '    depositFee = 0;\n', '    exchangeFee = 0;\n', '    withdrawFee = 0;\n', '  }\n', '\n', '  function setExchangeProxy(address _exchangeProxyContract) public {\n', '    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '    exchangeProxyContract = IHolyWing(_exchangeProxyContract);\n', '  }\n', '\n', '  function setYieldDistributor(address _tokenAddress, address _distributorAddress) public {\n', '    require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '    yieldDistributorAddress = _distributorAddress;\n', '    // only yield to be redistributed should be present on this contract in baseAsset (or other tokens if swap fees)\n', '    // so no access to lp tokens for the funds invested\n', '    IERC20(_tokenAddress).approve(_distributorAddress, ALLOWANCE_SIZE);\n', '  }\n', '\n', '  // if the pool baseToken matches the token deposited, then no conversion is performed \n', '  // and _expectedMininmumReceived/convertData should be zero/empty\n', '  function depositToPool(address _poolAddress, \n', '                         address _token, \n', '                         uint256 _amount,\n', '                         uint256 _expectedMinimumReceived, \n', '                         bytes memory convertData) public {\n', '    IHolyPool holyPool = IHolyPool(_poolAddress);\n', '    IERC20 poolToken = IERC20(holyPool.getBaseAsset());\n', '    if (address(poolToken) == _token) {\n', '      // no conversion is needed, allowance and balance checks performed in ERC20 token\n', '      // and not here to not waste any gas fees\n', '      IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '      // HolyPool must have sufficient allowance (one-time for pool/token pair)\n', '      if (poolToken.allowance(address(this), _poolAddress) < _amount) {\n', '        poolToken.approve(_poolAddress, ALLOWANCE_SIZE);\n', '      }\n', '\n', '      // process fees if present\n', '      if (depositFee > 0) {\n', '        // process deposit fees and deposit remainder\n', '        uint256 feeAmount = _amount.mul(depositFee).div(1e18);\n', '        //poolToken.safeTransfer(yieldDistributorAddress, feeAmount);\n', '        holyPool.depositOnBehalf(msg.sender, _amount.sub(feeAmount));\n', '      } else {\n', '        holyPool.depositOnBehalf(msg.sender, _amount);\n', '      }\n', '      return;\n', '    }\n', '\n', '    // conversion is required, perform through exhcnageProxy (HolyWing)\n', '\n', '    IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '    // HolyWing must have allowance\n', '    if (IERC20(_token).allowance(address(this), address(exchangeProxyContract)) < _amount) {\n', '      IERC20(_token).approve(address(exchangeProxyContract), ALLOWANCE_SIZE);\n', '    }\n', '    uint256 amountNew = exchangeProxyContract.executeSwap(_token, address(poolToken), _amount, convertData);\n', '    require(amountNew >= _expectedMinimumReceived, "minimum swap amount not met");\n', '\n', '    // process exchange/deposit fees if present\n', '    if (exchangeFee > 0 || depositFee > 0) {\n', '      uint256 feeAmount = amountNew.mul(exchangeFee).div(1e18);\n', '      feeAmount = feeAmount.add(feeAmount.mul(depositFee).div(1e18));\n', '      //poolToken.safeTransfer(yieldDistributorAddress, feeAmount);\n', '      amountNew = amountNew.sub(feeAmount);\n', '    } \n', '\n', '    // HolyPool must have sufficient allowance (one-time for pool/token pair)\n', '    if (poolToken.allowance(address(this), _poolAddress) < _amount) {\n', '      poolToken.approve(_poolAddress, ALLOWANCE_SIZE);\n', '    }\n', '\n', '    // perform actual deposit call\n', '    holyPool.depositOnBehalf(msg.sender, amountNew);\n', '  }\n', '\n', '  function withdrawFromPool(address _poolAddress, uint256 _amount) public {\n', '    IHolyPool holyPool = IHolyPool(_poolAddress);\n', '    IERC20 poolToken = IERC20(holyPool.getBaseAsset());\n', '    uint256 amountBefore = poolToken.balanceOf(address(this));\n', '    holyPool.withdraw(msg.sender, _amount);\n', '    uint256 withdrawnAmount = poolToken.balanceOf(address(this)).sub(amountBefore); \n', '    \n', '    // process withdraw fees if present\n', '    if (withdrawFee > 0) {\n', '      uint256 feeAmount = withdrawnAmount.mul(withdrawFee).div(1e18);\n', '      //poolToken.safeTransfer(yieldDistributorAddress, feeAmount);\n', '      poolToken.safeTransfer(msg.sender, withdrawnAmount.sub(feeAmount));\n', '    } else {\n', '      poolToken.safeTransfer(msg.sender, withdrawnAmount);\n', '    }    \n', '    //TODO: if amount is less than expected, transfer anyway\n', '  }\n', '\n', '\tfunction setDepositFee(uint256 _depositFee) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\tdepositFee = _depositFee;\n', '    emit FeeChanged("deposit", _depositFee);\n', '\t}\n', '\n', '\tfunction setExchangeFee(uint256 _exchangeFee) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\texchangeFee = _exchangeFee;\n', '    emit FeeChanged("exchange", _exchangeFee);\n', '\t}\n', '\n', '\tfunction setWithdrawFee(uint256 _withdrawFee) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\twithdrawFee = _withdrawFee;\n', '    emit FeeChanged("withdraw", _withdrawFee);\n', '\t}\n', '\n', '  // token swap function (could be with fees but also can be subsidized later)\n', '  // perform conversion through exhcnageProxy (HolyWing)\n', '  function executeSwap(address _tokenFrom, \n', '                       address _tokenTo,\n', '                       uint256 _amountFrom, \n', '                       uint256 _expectedMinimumReceived, \n', '                       bytes memory convertData) public {\n', '    require(_tokenFrom != _tokenTo, "Same tokens provided");\n', '\n', '    IERC20(_tokenFrom).safeTransferFrom(msg.sender, address(this), _amountFrom);\n', '    uint256 amountToSwap = _amountFrom;\n', '\n', '    // process exchange/deposit fees if present (in deposit we get pool tokens, so process fees after swap, here we take fees in source token)\n', '    if (exchangeFee > 0 || depositFee > 0) {\n', '      uint256 feeAmount = _amountFrom.mul(exchangeFee).div(1e18);\n', '      feeAmount = feeAmount.add(feeAmount.mul(depositFee).div(1e18));\n', '      //poolToken.safeTransfer(yieldDistributorAddress, feeAmount);\n', '      amountToSwap = amountToSwap.sub(feeAmount);\n', '    } \n', '    \n', '    // HolyWing must have allowance\n', '    if (IERC20(_tokenFrom).allowance(address(this), address(exchangeProxyContract)) < amountToSwap) {\n', '      IERC20(_tokenFrom).approve(address(exchangeProxyContract), ALLOWANCE_SIZE);\n', '    }\n', '\n', '    uint256 amountReceived = exchangeProxyContract.executeSwap(_tokenFrom, _tokenTo, amountToSwap, convertData);\n', '    require(amountReceived >= _expectedMinimumReceived, "minimum swap amount not met");\n', '\n', '    // transfer swapped tokens back to caller\n', '    IERC20(_tokenTo).safeTransfer(msg.sender, amountReceived);\n', '\n', '    emit TokenSwap(_tokenFrom, _tokenTo, msg.sender, _amountFrom, _expectedMinimumReceived, amountReceived);\n', '  }\n', '\n', '  // TODO: token send function (could be with fees but also can be subsidized)\n', '\n', '  // all contracts that do not hold funds have this emergency function if someone occasionally\n', '\t// transfers ERC20 tokens directly to this contract\n', '\t// callable only by owner\n', '\tfunction emergencyTransfer(address _token, address _destination, uint256 _amount) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\tIERC20(_token).safeTransfer(_destination, _amount);\n', '    emit EmergencyTransfer(_token, _destination, _amount);\n', '\t}\n', '\n', '  // this function is similar to emergencyTransfer, but relates to yield distribution\n', '  // fees are not transferred immediately to save gas costs for user operations\n', '  // so they accumulate on this contract address and can be claimed by HolyRedeemer\n', '  // when appropriate. Anyway, no user funds should appear on this contract, it\n', '  // only performs transfers, so such function has great power, but should be safe\n', '  // It does not include approval, so may be used by HolyRedeemer to get fees from swaps\n', '  // in different small token amounts\n', '  function claimFees(address _token, uint256 _amount) public {\n', '\t\trequire(msg.sender == yieldDistributorAddress, "yield distributor only");\n', '\t\tIERC20(_token).safeTransfer(msg.sender, _amount);\n', '\t}\n', '}\n', '\n', '/*\n', '   HolyWing is a middleware contract that acts as an abstraction layer for tokens exchange\n', '   (ERC20 tokens and ETH)\n', '\n', '   The current implementation is using 0x API for performing actual swap, as 0x is aiming for\n', "   best execution, there's no complex logic for now regarding that.\n", '   The contract is not intended to gather fees, be called by users, it is called by the HolyHand,\n', '   which is aimed to do that. This contract is attached to a HolyHand, and has permission to\n', '   create allowance for arbitrary token it would need access to.\n', '   Both of HolyWing and HolyHand contracts do not hold funds, all operations are performed within\n', '   single transaction.\n', '\n', '   Exchange occurs in the following steps:\n', '   1. This contract is provided with amount of tokens on its address directly by HolyHand\n', '      (thus does not requiring any allowance calls)\n', '   2. This contract is provided with data of how order is going to be routed (bytes swalCallData)\n', '   3. 0x order routing may require that this contract should set allowance to some address to spend\n', '      its tokens;\n', '   4. The address that performs the swap is called with swapdata set;\n', '   5. If swap is successful, this contract transfers tokens back to the HolyHand contract\n', '      (as well as remaining ETH value if any fee refunds occur, etc.)\n', '   6. Appropriate event is emitted with swap details;\n', '*/\n', 'contract HolyWing is AccessControlUpgradeable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    function initialize() public initializer {\n', '            _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '    }\n', '\n', '    uint256 private constant ALLOWANCE_SIZE = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n', '\n', '    // Payable fallback to allow this contract to receive protocol fee refunds.\n', '    receive() external payable {}\n', '\n', '    event ExecuteSwap(address indexed user, address indexed tokenFrom, address tokenTo, uint256 amount, uint256 amountReceived);\n', '\n', '    event EmergencyTransfer(address indexed token, address indexed destination, uint256 amount);\n', '\n', '    function slice(\n', '        bytes memory _bytes,\n', '        uint256 _start,\n', '        uint256 _length\n', '    )\n', '        internal\n', '        pure\n', '        returns (bytes memory)\n', '    {\n', '        require(_length + 31 >= _length, "slice_overflow");\n', '        require(_start + _length >= _start, "slice_overflow");\n', '        require(_bytes.length >= _start + _length, "slice_outOfBounds");\n', '\n', '        bytes memory tempBytes;\n', '\n', '        assembly {\n', '            switch iszero(_length)\n', '            case 0 {\n', '                // Get a location of some free memory and store it in tempBytes as\n', '                // Solidity does for memory variables.\n', '                tempBytes := mload(0x40)\n', '\n', '                // The first word of the slice result is potentially a partial\n', '                // word read from the original array. To read it, we calculate\n', '                // the length of that partial word and start copying that many\n', '                // bytes into the array. The first word we copy will start with\n', "                // data we don't care about, but the last `lengthmod` bytes will\n", '                // land at the beginning of the contents of the new array. When\n', "                // we're done copying, we overwrite the full first word with\n", '                // the actual length of the slice.\n', '                let lengthmod := and(_length, 31)\n', '\n', '                // The multiplication in the next line is necessary\n', '                // because when slicing multiples of 32 bytes (lengthmod == 0)\n', "                // the following copy loop was copying the origin's length\n", '                // and then ending prematurely not copying everything it should.\n', '                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n', '                let end := add(mc, _length)\n', '\n', '                for {\n', '                    // The multiplication in the next line has the same exact purpose\n', '                    // as the one above.\n', '                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n', '                } lt(mc, end) {\n', '                    mc := add(mc, 0x20)\n', '                    cc := add(cc, 0x20)\n', '                } {\n', '                    mstore(mc, mload(cc))\n', '                }\n', '\n', '                mstore(tempBytes, _length)\n', '\n', '                //update free-memory pointer\n', '                //allocating the array padded to 32 bytes like the compiler does now\n', '                mstore(0x40, and(add(mc, 31), not(31)))\n', '            }\n', "            //if we want a zero-length slice let's just return a zero-length array\n", '            default {\n', '                tempBytes := mload(0x40)\n', '                //zero out the 32 bytes slice we are about to return\n', '                //we need to do it because Solidity does not garbage collect\n', '                mstore(tempBytes, 0)\n', '\n', '                mstore(0x40, add(tempBytes, 0x20))\n', '            }\n', '        }\n', '\n', '        return tempBytes;\n', '    }\n', '\n', '    // data is an arbitrary construction, that can be supplied if swap request is initiated\n', '    // off-chain (it may be required or may be empty, depending on implementation)\n', "    // TODO: WE DON'T TAKE RESPONSIBILITY OF CONTRACT PASSED IN THE DATA SECTION\n", '    //      THAT IS PROVIDED BY 0x INFRASTRUCTURE\n', '    //      -- this contract would perform check for expected minimum amount\n', '    //      -- this contract performs call operation with arbitrary data:\n', '    //         -- no reentrancy;\n', '    //         -- this contract is a layer of security and does not have abilities except swap\n', '    function executeSwap(address _tokenFrom, address _tokenTo, uint256 _amount, bytes memory _data) public returns(uint256) {\n', '        // for current implementation, a 0x.org services are used to perform execution\n', '        // this contract would provice allowance by itself if needed, and tokens to be swapped\n', '        // have to be on its balance before\n', '        // data is unfolded into following structure in current implementation:\n', '        // bytes offset\n', '        // [ 0..19] address to call to perform swap\n', '        // [20..39] allowance target to perform swap\n', '        // [40..61] value of ETH to pass (if we swapping ether)\n', '         // [62...]   data section passed from swap request\n', '\n', '        address executorAddress;\n', '        address spenderAddress;\n', '        uint256 ethValue;\n', '\n', '        bytes memory callData = slice(_data, 72, _data.length - 72);\n', '        assembly {\n', '            executorAddress := mload(add(_data, add(0x14, 0)))\n', '            spenderAddress := mload(add(_data, add(0x14, 0x14)))\n', '            ethValue := mload(add(_data, add(0x20, 0x28)))\n', '        }\n', '\n', '        //allowances should be taken care of beforehand\n', "        //don't perform check to save gas        \n", '        IERC20(_tokenFrom).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        if (spenderAddress != address(0) && IERC20(_tokenFrom).allowance(address(this), address(spenderAddress)) < _amount) {\n', '            IERC20(_tokenFrom).approve(address(spenderAddress), ALLOWANCE_SIZE);\n', '        }\n', '\n', '        uint balanceBefore = IERC20(_tokenTo).balanceOf(address(this));\n', '        \n', '        //ensure no state passed, no reentrancy, etc.\n', '        (bool success,) = executorAddress.call{value: ethValue}(callData);\n', '        require(success, "SWAP_CALL_FAILED");\n', '        \n', '        uint balanceAfter = IERC20(_tokenTo).balanceOf(address(this));\n', '\n', '        //TODO: failsafe checks on swap, expected minimum amount check (that should be transferred upon swap execution)\n', '        uint256 amountReceived = balanceAfter - balanceBefore;\n', '\n', '        //TODO: emit event\n', '        emit ExecuteSwap(msg.sender, _tokenFrom, _tokenTo, _amount, amountReceived);\n', '    \n', '        //send swapped tokens to sender\n', '        IERC20(_tokenTo).safeTransfer(msg.sender, amountReceived);\n', '\n', '        return amountReceived;\n', '    }\n', '\n', '    // all contracts that do not hold funds have this emergency function if someone occasionally\n', '\t// transfers ERC20 tokens directly to this contract\n', '\t// callable only by owner\n', '\tfunction emergencyTransfer(address _token, address _destination, uint256 _amount) public {\n', '\t\trequire(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '\t\tIERC20(_token).safeTransfer(_destination, _amount);\n', '        emit EmergencyTransfer(_token, _destination, _amount);\n', '\t}\n', '}\n', '\n', '// Interface to represent HolyHand transfer proxy\n', 'interface IHolyHand {\n', '}\n', '\n', '// Interface to represent asset pool interactions\n', 'interface IHolyValor {\n', '    // safe amount of funds in base asset (USDC) that is possible to reclaim from this HolyValor without fee/penalty\n', '    function safeReclaimAmount() external view returns(uint256);\n', '    // total amount of funds in base asset (USDC) that is possible to reclaim from this HolyValor\n', '    function totalReclaimAmount() external view returns(uint256);\n', '    // callable only by a HolyPool, retrieve a portion of invested funds, return (just in case) amount transferred\n', '    function reclaimFunds(uint256 amount, bool _safeExecution) external returns(uint256);\n', '}\n', '\n', '// Interface to represent asset pool interactions\n', 'interface IHolyPoolV2 {\n', '    function getBaseAsset() external view returns(address);\n', '\n', '    // functions callable by HolyHand transfer proxy\n', '    function depositOnBehalf(address beneficiary, uint256 amount) external;\n', '    function depositOnBehalfDirect(address beneficiary, uint256 amount) external;\n', '    function withdraw(address beneficiary, uint256 amount) external;\n', '\n', '    // functions callable by HolyValor investment proxies\n', '    // pool would transfer funds to HolyValor (returns actual amount, could be less than asked)\n', '    function borrowToInvest(uint256 amount) external returns(uint256);\n', '    // return invested body portion from HolyValor (pool will claim base assets from caller Valor)\n', '    function returnInvested(uint256 amountCapitalBody) external;\n', '\n', '    // functions callable by HolyRedeemer yield distributor\n', "    function harvestYield(uint256 amount) external; // pool would transfer amount tokens from caller as it's profits\n", '}\n', '\n', '/* HolyPool is a contract that holds user assets\n', '   \n', '   It can have attached strategy (HolyValor) that performs yield generating (investing) activities.\n', '   It is non-custodiary. Any user should be able to withdraw his funds from this contract and, if needed,\n', '   from the attached HolyValor contract without any interference.\n', '   It holds a portion of actual user assets, and part of it is forming a hot reserve (is not invested)\n', '   to provide faster and cheaper withdrawals on demand.\n', '   HolyPool has a base currency (token) set, which is aimed to be USDC at the start of launching.\n', '   Base currency is set during construction (and cannot be changed later to exclude possible malicious\n', '   actions from the managing actors).\n', '\n', "   NOTE: this contract doesn't contain function emergencyTransfer as many other HH contracts do, as it is\n", '   actually holding customer funds, and no external access is allowed in any form over them except the user\n', '   himself through defined call pipelines through proxy contract.\n', '\n', '   NOTE: HolyPool does not provide any kind of LP/holder/staker token as a result of funds allocation.\n', '   It just adds the appropriate user share amount of the assets in the pool upon deposit and removes\n', '   when user withdraws using local mapping variable and total variable, this would also help to make\n', '   gas cheaper without additional token transfers.\n', '\n', '   The only functions that move funds in the pool are\n', '   - depositOnBehalf -- callable only by transfer proxy\n', '   - withdraw -- callable only by transfer proxy\n', '   - borrowToInvest -- provide a portion of funds to be allocated by invest proxy\n', '   - returnInvested -- return invested funds (could be divest or getting received yield) by invest proxy only\n', '\n', '   If no conversion is needed, the route of deposit flow\n', '     user USDC -> HolyHand -> HolyPool\n', '   should be kept very minimal to keep gas costs low (same for withdrawal if HolyPool has enough immediate liquidity).\n', '\n', '   NOTE: Pool does not perform any exchange, all operations are in baseAsset token\n', '\n', '   V2 upgrades:\n', '   - added direct deposit for cheaper gas (used only by HolyHand);\n', '*/\n', 'contract HolyPoolV2 is AccessControlUpgradeable, IHolyPoolV2 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // role that grants most of financial operations for HolyPool\n', '    bytes32 public constant FINMGMT_ROLE = keccak256("FINMGMT_ROLE");\n', '\n', '    uint256 private constant lpPrecision = 1e3; // treshold to treat quantities (baseAsset, lpTokens) as equal (USDC has 6 decimals only)\n', '\n', '    // emergency transfer (timelocked) variables and events\n', '    event EmergencyTransferSet(\n', '        address indexed token,\n', '        address indexed destination,\n', '        uint256 amount\n', '    );\n', '    event EmergencyTransferExecute(\n', '        address indexed token,\n', '        address indexed destination,\n', '        uint256 amount\n', '    );\n', '    address private emergencyTransferToken;\n', '    address private emergencyTransferDestination;\n', '    uint256 private emergencyTransferTimestamp;\n', '    uint256 private emergencyTransferAmount;\n', '\n', '    // address of ERC20 base asset (expected to be stablecoin)\n', '    address public baseAsset;\n', '\n', '    IHolyHand public transferProxy;\n', '\n', '    // IHolyValor invest proxies list and their statuses:\n', '    // 0 -- invest proxy is blocked for all operations (equal to be deleted)\n', '    // 1 -- invest proxy is active for all operations\n', '    // 2 -- invest proxy can only place funds back and can not take funds from pool\n', "    //   don't use enum for better upgradeability safety\n", '    IHolyValor[] public investProxies;\n', '    mapping(address => uint256) public investProxiesStatuses;\n', '\n', '    // total amount of assets in baseToken (baseToken balance of HolyPool + collateral valuation in baseToken)\n', '    uint256 public totalAssetAmount;\n', '\n', '    // total number of pool shares\n', '    uint256 public totalShareAmount;\n', '    // user balances (this is NOT USDC, but portion in shares)\n', '    mapping(address => uint256) public shares;\n', '\n', '    event Deposit(address indexed account, uint256 amount);\n', '    event Withdraw(\n', '        address indexed account,\n', '        uint256 amountRequested,\n', '        uint256 amountActual\n', '    );\n', '\n', '    event FundsInvested(address indexed investProxy, uint256 amount);\n', '    event FundsDivested(address indexed investProxy, uint256 amount);\n', '    event YieldRealized(uint256 amount);\n', '\n', '    event ReclaimFunds(\n', '        address indexed investProxy,\n', '        uint256 amountRequested,\n', '        uint256 amountReclaimed\n', '    );\n', '\n', '    bool depositsEnabled;\n', '\n', '    uint256 public hotReserveTarget; // target amount of baseAsset tokens held in hot reserve (not invested)\n', '\n', '    // for simple yield stats calculations\n', '    uint256 public inceptionTimestamp; // inception timestamp\n', '\n', '    function initialize(address _baseAsset) public initializer {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '        _setupRole(FINMGMT_ROLE, _msgSender());\n', '\n', '        baseAsset = _baseAsset;\n', '        // pool has virtual 1 uint of base asset to avoid\n', '        // division by zero and reasonable starting share value calculation\n', '        // USDC has 6 decimal points, so USDC pool should have totalAssetAmount 1e6 as a starting point\n', '        totalShareAmount = 1e6;\n', '        totalAssetAmount = 1e6;\n', '        depositsEnabled = true;\n', '        hotReserveTarget = 0;\n', '\n', '        inceptionTimestamp = block.timestamp;\n', '    }\n', '\n', '    function getBaseAsset() public view override returns (address) {\n', '        return baseAsset;\n', '    }\n', '\n', '    function getDepositBalance(address _beneficiary)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return shares[_beneficiary].mul(baseAssetPerShare()).div(1e18);\n', '    }\n', '\n', '    function baseAssetPerShare() public view returns (uint256) {\n', '        return totalAssetAmount.mul(1e18).div(totalShareAmount);\n', '    }\n', '\n', '    function setTransferProxy(address _transferProxy) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '        transferProxy = IHolyHand(_transferProxy);\n', '    }\n', '\n', '    function setReserveTarget(uint256 _reserveTarget) public {\n', '        require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");\n', '        hotReserveTarget = _reserveTarget;\n', '    }\n', '\n', '    // HolyValors management functions\n', '    // add new HolyValor\n', '    function addHolyValor(address _address) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '        investProxies.push(IHolyValor(_address));\n', '        investProxiesStatuses[_address] = 1;\n', '    }\n', '\n', '    // set status for HolyValor, can disable / restrict invest proxy methods\n', '    function setHolyValorStatus(address _address, uint256 _status) public {\n', '        require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");\n', '        investProxiesStatuses[_address] = _status;\n', '    }\n', '\n', '    // Deposit/withdraw functions\n', '    function setDepositsEnabled(bool _enabled) public {\n', '        require(hasRole(FINMGMT_ROLE, msg.sender), "Finmgmt only");\n', '        depositsEnabled = _enabled;\n', '    }\n', '\n', '    function depositOnBehalf(address _beneficiary, uint256 _amount)\n', '        public\n', '        override\n', '    {\n', '        // transfer base asset tokens and calculate shares deposited\n', '        IERC20(baseAsset).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        depositOnBehalfDirect(_beneficiary, _amount);\n', '    }\n', '\n', '    // deposit process when funds have already been transferred (should be in the same transaction)\n', '    function depositOnBehalfDirect(address _beneficiary, uint256 _amount)\n', '        public\n', '        override\n', '    {\n', '        require(msg.sender == address(transferProxy), "transfer proxy only");\n', '        require(depositsEnabled, "deposits disabled");\n', '\n', '        // compiler optimization should wrap these local vars automatically\n', '        uint256 assetPerShare = baseAssetPerShare();\n', '        uint256 sharesToDeposit = _amount.mul(1e18).div(assetPerShare);\n', '        totalShareAmount = totalShareAmount.add(sharesToDeposit);\n', '        totalAssetAmount = totalAssetAmount.add(_amount);\n', '        shares[_beneficiary] = shares[_beneficiary].add(sharesToDeposit);\n', '\n', '        emit Deposit(_beneficiary, _amount);\n', '    }\n', '\n', '    // withdraw funds from pool\n', '    // amount is presented in base asset quantity\n', '    // NOTE: this cannot transfer to arbitrary sender, or funds would be unsafe, only to transferProxy\n', '    //\n', '    // withdraw implementation considerations:\n', '    // - the most important factor is: no external fee if possible;\n', '    // - 2nd most important factor: lowest gas as possible\n', '    //   (smallest valor number used to reclaim funds, keep execution path short for simpler cases);\n', '    // - if external withdraw fee is applied, no other users standings should be affected;\n', '    // - if possible, reserve is restored on HolyPool up to hotReserveTarget\n', '    function withdraw(address _beneficiary, uint256 _amount) public override {\n', '        // TODO: perform funds reclamation if current amount of baseToken is insufficient\n', '        require(msg.sender == address(transferProxy), "transfer proxy only");\n', '\n', '        uint256 sharesAvailable = shares[_beneficiary];\n', '        uint256 assetPerShare = baseAssetPerShare();\n', '        uint256 assetsAvailable = sharesAvailable.mul(assetPerShare).div(1e18);\n', '        require(_amount <= assetsAvailable, "requested amount exceeds balance");\n', '\n', '        uint256 currentBalance = IERC20(baseAsset).balanceOf(address(this));\n', '\n', '        if (currentBalance >= _amount) {\n', '            // best case scenario, HolyPool has assets on reserve (current) balance\n', '            performWithdraw(msg.sender, _beneficiary, _amount, _amount);\n', '            return;\n', '        }\n', '\n', '        uint256 amountToReclaim = _amount.sub(currentBalance);\n', '        uint256 reclaimedFunds = retrieveFunds(amountToReclaim);\n', '        if (reclaimedFunds >= amountToReclaim) {\n', '            // good scenario, funds were reclaimed (and probably some reserve amount was restored too)\n', '            performWithdraw(msg.sender, _beneficiary, _amount, _amount);\n', '        } else {\n', '            // not very desireable scenario where funds were returned with fee\n', '            performWithdraw(\n', '                msg.sender,\n', '                _beneficiary,\n', '                _amount,\n', '                currentBalance.add(reclaimedFunds)\n', '            );\n', '        }\n', '    }\n', '\n', '    function performWithdraw(\n', '        address _addressProxy,\n', '        address _beneficiary,\n', '        uint256 _amountRequested,\n', '        uint256 _amountActual\n', '    ) internal {\n', '        // amount of shares to withdraw to equal _amountActual of baseAsset requested\n', '        uint256 sharesToWithdraw =\n', '            _amountRequested.mul(1e18).div(baseAssetPerShare());\n', '\n', '        // we checked this regarding base asset (USDC) amount, just in case check for share amount\n', '        require(\n', '            sharesToWithdraw <= shares[_beneficiary],\n', '            "requested pool share exceeded"\n', '        );\n', '\n', '        // transfer tokens to transfer proxy\n', '        IERC20(baseAsset).safeTransfer(_addressProxy, _amountActual);\n', '\n', '        // only perform this after all other withdraw flow complete to recalculate HolyPool state\\\n', '        // even if external fees were applied, totalShareAmount/totalAssetAmount calculated\n', '        // with requested withdrawal amount\n', '        shares[_beneficiary] = shares[_beneficiary].sub(sharesToWithdraw);\n', '        totalShareAmount = totalShareAmount.sub(sharesToWithdraw);\n', '        totalAssetAmount = totalAssetAmount.sub(_amountRequested);\n', '\n', '        emit Withdraw(_beneficiary, _amountRequested, _amountActual);\n', '    }\n', '\n', '    // used to get funds from invest proxy for withdrawal (if current amount to withdraw is insufficient)\n', '    // tries to fulfill reserve\n', '    // logic of funds retrieval:\n', '    // 1. If _amount is larger than is safe to withdraw,\n', '    //    withdraw only requested amount (calculate actully returned as fees may be implied)\n', "    //    (don't imply fees on other users)\n", '    // 2. Otherwise withdraw safe amount up to hotReserveTarget\n', '    //    to keep next withdrawals cheaper\n', '    // _amount parameter is the amount HolyPool shold have in addition to current balance for withdraw\n', '    function retrieveFunds(uint256 _amount) internal returns (uint256) {\n', '        uint256 safeAmountTotal = 0;\n', '\n', '        // it is not possible to resize memory arrays, so declare sized one\n', '        uint256 length = investProxies.length;\n', '        uint256[] memory safeAmounts = new uint256[](length);\n', '        uint256[] memory indexes = new uint256[](length);\n', '\n', '        for (uint256 i; i < length; i++) {\n', '            safeAmounts[i] = investProxies[i].safeReclaimAmount();\n', '            if (\n', '                safeAmounts[i] >= _amount &&\n', '                investProxiesStatuses[address(investProxies[i])] > 0\n', '            ) {\n', '                // great, this HolyValor can provide funds without external fee\n', '                // see if we can fulfill reserve safely\n', '                // NOTE: _amount can be larger than hotReserveTarget\n', '                uint256 amountToWithdraw = _amount.add(hotReserveTarget);\n', '                if (amountToWithdraw > safeAmounts[i]) {\n', "                    amountToWithdraw = safeAmounts[i]; // cap amountToWithdraw, don't reclaim more than safe amount\n", '                }\n', '                uint256 reclaimed =\n', '                    investProxies[i].reclaimFunds(amountToWithdraw, true);\n', '                require(\n', '                    reclaimed > amountToWithdraw.sub(lpPrecision) &&\n', '                        reclaimed.sub(lpPrecision) < amountToWithdraw,\n', '                    "reclaim amount mismatch"\n', '                );\n', '                emit ReclaimFunds(\n', '                    address(investProxies[i]),\n', '                    _amount,\n', '                    amountToWithdraw\n', '                );\n', '                return amountToWithdraw;\n', '            }\n', '            indexes[i] = i;\n', '            safeAmountTotal = safeAmountTotal.add(safeAmounts[i]);\n', '        }\n', '\n', '        // no single HolyValor has enough safe amount to get funds from, check if several have\n', '        // https://medium.com/coinmonks/sorting-in-solidity-without-comparison-4eb47e04ff0d\n', '        // as a reasonable empryric, number of active HolyValors would be less than 10, so use reverse insertion sort\n', '        for (uint256 i = length - 1; i >= 0; i--) {\n', '            uint256 picked = safeAmounts[i];\n', '            uint256 pickedIndex = indexes[i];\n', '            uint256 j = i + 1;\n', '            while ((j < length) && (safeAmounts[j] > picked)) {\n', '                safeAmounts[j - 1] = safeAmounts[j];\n', '                indexes[j - 1] = indexes[j];\n', '                j++;\n', '            }\n', '            safeAmounts[j - 1] = picked;\n', '            indexes[j - 1] = pickedIndex;\n', '            if (i == 0) {\n', "                break; // uint256 won't be negative\n", '            }\n', '        }\n', '\n', '        if (safeAmountTotal > _amount) {\n', '            uint256 totalReclaimed = 0;\n', '            // should be able to avoid external withdraw fee (even if use all HolyValors)\n', '            // reclaim funds one by one (from sorted HolyValor list)\n', '            for (uint256 i; i < length; i++) {\n', '                uint256 amountToWithdraw = safeAmounts[indexes[i]];\n', '                if (\n', '                    amountToWithdraw >\n', '                    _amount.sub(totalReclaimed).add(hotReserveTarget)\n', '                ) {\n', '                    amountToWithdraw = _amount.sub(totalReclaimed).add(\n', '                        hotReserveTarget\n', '                    );\n', '                }\n', '                uint256 reclaimed =\n', '                    investProxies[indexes[i]].reclaimFunds(\n', '                        amountToWithdraw,\n', '                        true\n', '                    );\n', '                require(\n', '                    reclaimed > amountToWithdraw.sub(lpPrecision) &&\n', '                        reclaimed.sub(lpPrecision) < amountToWithdraw,\n', '                    "reclaim amount mismatch"\n', '                );\n', '                totalReclaimed = totalReclaimed.add(amountToWithdraw);\n', '                emit ReclaimFunds(\n', '                    address(investProxies[indexes[i]]),\n', '                    _amount,\n', '                    amountToWithdraw\n', '                );\n', '                if (totalReclaimed >= _amount) {\n', '                    break;\n', '                }\n', '            }\n', '            return totalReclaimed;\n', '        }\n', '\n', '        // fee would occur, not enough safe amounts available\n', "        uint256 totalReclaimedNoFees = 0; // we don't know what fees are for any investment allocation\n", '        // so calculate theoretical quantity we expect without fees\n', '        uint256 totalActualReclaimed = 0;\n', '        // NOTE: we are not replenishing reserve balance when external fees apply\n', '        // reclaim funds one by one (from sorted HolyValor list)\n', '        // to use maximum safe amount and try to withdraw as much as is available in the particular allocation\n', '        for (uint256 i; i < length; i++) {\n', '            uint256 amountToWithdraw = _amount.sub(totalReclaimedNoFees);\n', '            // cap amount if particular HolyValor does not have this amount of funds\n', '            uint256 totalAvailableInValor =\n', '                investProxies[indexes[i]].totalReclaimAmount();\n', '            if (amountToWithdraw > totalAvailableInValor) {\n', '                amountToWithdraw = totalAvailableInValor;\n', '            }\n', '            uint256 actualReclaimed =\n', '                investProxies[indexes[i]].reclaimFunds(amountToWithdraw, false);\n', '            totalReclaimedNoFees = totalReclaimedNoFees.add(amountToWithdraw);\n', '            totalActualReclaimed = totalActualReclaimed.add(actualReclaimed);\n', '            emit ReclaimFunds(\n', '                address(investProxies[indexes[i]]),\n', '                amountToWithdraw,\n', '                actualReclaimed\n', '            );\n', '            if (totalReclaimedNoFees >= _amount) {\n', '                break;\n', '            }\n', '        }\n', '        return totalActualReclaimed;\n', '    }\n', '\n', '    // safe amount to withdraw\n', '    // this function is for application to use to confirm withdrawal it exceeds safe amount.\n', '    // takes into consideration this contract balance and invest proxies safe amounts\n', '    // (meaning that no external fees/loss should be applied when withdrawing a certain amount,\n', "    // to get cheapest (in terms of gas) withdraw amount, it's enough to query balanceOf this contract)\n", '    function getSafeWithdrawAmount() public view returns (uint256) {\n', '        uint256 safeAmount = IERC20(baseAsset).balanceOf(address(this));\n', '        uint256 length = investProxies.length;\n', '\n', '        for (uint256 i; i < length; i++) {\n', '            if (investProxiesStatuses[address(investProxies[i])] > 0) {\n', '                safeAmount = safeAmount.add(\n', '                    investProxies[i].safeReclaimAmount()\n', '                );\n', '            }\n', '        }\n', '        return safeAmount;\n', '    }\n', '\n', '    // HolyValor invest/divest methods\n', '    function borrowToInvest(uint256 _amount) public override returns (uint256) {\n', '        require(\n', '            investProxiesStatuses[msg.sender] == 1,\n', '            "active invest proxy only"\n', '        );\n', '\n', '        uint256 borrowableAmount = IERC20(baseAsset).balanceOf(address(this));\n', '        require(borrowableAmount > hotReserveTarget, "not enough funds");\n', '\n', '        borrowableAmount = borrowableAmount.sub(hotReserveTarget);\n', '        if (_amount > borrowableAmount) {\n', '            _amount = borrowableAmount;\n', '        }\n', '\n', '        IERC20(baseAsset).safeTransfer(msg.sender, _amount);\n', '\n', '        emit FundsInvested(msg.sender, _amount);\n', '\n', '        return _amount;\n', '    }\n', '\n', '    // return funds body from HolyValor (divest), yield should go through yield distributor\n', '    function returnInvested(uint256 _amountCapitalBody) public override {\n', '        require(investProxiesStatuses[msg.sender] > 0, "invest proxy only"); // statuses 1 (active) or 2 (withdraw only) are ok\n', '\n', '        IERC20(baseAsset).safeTransferFrom(\n', '            address(msg.sender),\n', '            address(this),\n', '            _amountCapitalBody\n', '        );\n', '\n', '        emit FundsDivested(msg.sender, _amountCapitalBody);\n', '    }\n', '\n', '    // Yield realization (intended to be called by HolyRedeemer)\n', '    function harvestYield(uint256 _amountYield) public override {\n', '        // check permissions\n', '        // probably not required (anyone can put yield in pool if they want)\n', '\n', '        // transfer _amountYield of baseAsset from caller\n', '        IERC20(baseAsset).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            _amountYield\n', '        );\n', '\n', '        // increase share price (indirectly, shares quantity remains same, but baseAsset quantity increases)\n', '        totalAssetAmount = totalAssetAmount.add(_amountYield);\n', '\n', '        // emit event\n', '        emit YieldRealized(_amountYield);\n', '    }\n', '\n', '    // This is oversimplified, no compounding and averaged across timespan from inception\n', '    // TODO: daily, weekly, monthly, yearly APY\n', '    // at inception pool share equals 1 (1e18) (specified in initializer)\n', '    function getDailyAPY() public view returns (uint256) {\n', '        uint256 secondsFromInception = block.timestamp.sub(inceptionTimestamp);\n', '\n', '        return\n', '            baseAssetPerShare()\n', '                .sub(1e18)\n', '                .mul(100) // substract starting share/baseAsset value 1.0 (1e18) and multiply by 100 to get percent value\n', '                .mul(86400)\n', '                .div(secondsFromInception); // fractional representation of how many days passed\n', '    }\n', '\n', '    // emergencyTransferTimelockSet is for safety (if some tokens got stuck)\n', '    // in the future it could be removed, to restrict access to user funds\n', '    // this is timelocked as contract can have user funds\n', '    function emergencyTransferTimelockSet(\n', '        address _token,\n', '        address _destination,\n', '        uint256 _amount\n', '    ) public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '        emergencyTransferTimestamp = block.timestamp;\n', '        emergencyTransferToken = _token;\n', '        emergencyTransferDestination = _destination;\n', '        emergencyTransferAmount = _amount;\n', '\n', '        emit EmergencyTransferSet(_token, _destination, _amount);\n', '    }\n', '\n', '    function emergencyTransferExecute() public {\n', '        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), "Admin only");\n', '        require(\n', '            block.timestamp > emergencyTransferTimestamp + 24 * 3600,\n', '            "timelock too early"\n', '        );\n', '        require(\n', '            block.timestamp < emergencyTransferTimestamp + 72 * 3600,\n', '            "timelock too late"\n', '        );\n', '\n', '        IERC20(emergencyTransferToken).safeTransfer(\n', '            emergencyTransferDestination,\n', '            emergencyTransferAmount\n', '        );\n', '\n', '        emit EmergencyTransferExecute(\n', '            emergencyTransferToken,\n', '            emergencyTransferDestination,\n', '            emergencyTransferAmount\n', '        );\n', '        // clear emergency transfer timelock data\n', '        emergencyTransferTimestamp = 0;\n', '        emergencyTransferToken = address(0);\n', '        emergencyTransferDestination = address(0);\n', '        emergencyTransferAmount = 0;\n', '    }\n', '}']