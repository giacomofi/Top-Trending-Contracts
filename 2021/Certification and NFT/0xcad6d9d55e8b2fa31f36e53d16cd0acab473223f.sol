['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _governance;\n', '\n', '    event GovernanceTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _governance = msgSender;\n', '        emit GovernanceTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _governance;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(_governance == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferGovernance(address newOwner) internal virtual onlyGovernance {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit GovernanceTransferred(_governance, newOwner);\n', '        _governance = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/StabilizeStrategyUSTFlashArbV2.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '// This is a strategy that takes advantage of arb opportunities for ust\n', '// Users deposit ust into the strategy and the strategy will sell into usdt when above usdt and usdt into ust when below\n', '// Selling will occur via Uniswap or Curve and buying WETH via Uniswap\n', '// Half the profit earned from the sell will be used to buy WETH and split it between the treasury, executor and staking pool\n', '// Half will remain \n', '// This strategy also uses flash loans to take advantage of opportunities in price inversions between exchanges\n', '// Strategy takes into account 0.3% slippage estimate for large sells on Uniswap\n', '\n', 'interface StabilizeStakingPool {\n', '    function notifyRewardAmount(uint256) external;\n', '}\n', '\n', 'interface UniswapRouter {\n', '    function swapExactETHForTokens(uint, address[] calldata, address, uint) external payable returns (uint[] memory);\n', '    function swapExactTokensForTokens(uint, uint, address[] calldata, address, uint) external returns (uint[] memory);\n', '    function getAmountsOut(uint, address[] calldata) external view returns (uint[] memory); // For a value in, it calculates value out\n', '}\n', '\n', 'interface CurvePool {\n', '    function get_dy_underlying(int128, int128, uint256) external view returns (uint256); // Get quantity estimate\n', '    function exchange_underlying(int128, int128, uint256, uint256) external; // Exchange tokens\n', '}\n', '\n', 'interface LendingPoolAddressesProvider {\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', 'interface LendingPool {\n', '  function flashLoan(address, address[] calldata, uint256[] calldata, uint256[] calldata, address, bytes calldata params, uint16) external;\n', '}\n', '\n', 'interface AggregatorV3Interface {\n', '  function latestRoundData() external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n', '}\n', '\n', 'contract StabilizeStrategyUSTFlashArbV2 is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    \n', '    address public treasuryAddress; // Address of the treasury\n', '    address public stakingAddress; // Address to the STBZ staking pool\n', '    address public zsTokenAddress; // The address of the controlling zs-Token\n', '    \n', '    uint256 constant DIVISION_FACTOR = 100000;\n', '    uint256 public lastTradeTime = 0;\n', '    uint256 public lastActionBalance = 0; // Balance before last deposit or withdraw\n', '    uint256 public maxPoolSize = 3000000e18; // The maximum amount of ust tokens this strategy can hold, 3 mil by default\n', '    uint256 public percentTradeTrigger = 10000; // 10% change in value will trigger a trade\n', '    uint256 public maxSlippage = 300; // 0.3% max slippage is ok\n', '    uint256 public maxPercentSell = 80000; // 80% of the tokens are sold to the cheapest token if slippage is ok on Uni\n', '    uint256 public maxAmountSell = 500000; // The maximum amount of tokens that can be sold at once\n', '    uint256 public percentDepositor = 50000; // 1000 = 1%, depositors earn 50% of all gains\n', '    uint256 public percentExecutor = 10000; // 30000 = 30% of WETH goes to executor, 15% of total profit\n', '    uint256 public percentStakers = 50000; // 50% of non-depositors WETH goes to stakers, can be changed\n', '    uint256 public minTradeSplit = 20000; // If the balance is less than or equal to this, it trades the entire balance\n', '    uint256 public maxPercentStipend = 30000; // The maximum amount of WETH profit that can be allocated to the executor for gas in percent\n', '    uint256 public gasStipend = 1000000; // This is the gas units that are covered by executing a trade taken from the WETH profit\n', '    uint256[3] private flashParams; // Global parameters guiding the flash loan setup\n', '    uint256 constant minGain = 1e16; // Minimum amount of gain (0.01 coin) before buying WETH and splitting it\n', '    \n', '    // Token information\n', '    // This strategy accepts frax and usdc\n', '    struct TokenInfo {\n', '        IERC20 token; // Reference of token\n', '        uint256 decimals; // Decimals of token\n', '    }\n', '    \n', '    TokenInfo[] private tokenList; // An array of tokens accepted as deposits\n', '\n', '    // Strategy specific variables\n', '    address constant UNISWAP_ROUTER_ADDRESS = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); //Address of Uniswap\n', '    address constant CURVE_UST_POOL = address(0x890f4e345B1dAED0367A877a1612f86A1f86985f);\n', '    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant GAS_ORACLE_ADDRESS = address(0x169E633A2D1E6c10dD91238Ba11c4A708dfEF37C); // Chainlink address for fast gas oracle\n', '    address constant LENDING_POOL_ADDRESS_PROVIDER = address(0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5); // Provider for Aave addresses\n', '\n', '    constructor(\n', '        address _treasury,\n', '        address _staking,\n', '        address _zsToken\n', '    ) public {\n', '        treasuryAddress = _treasury;\n', '        stakingAddress = _staking;\n', '        zsTokenAddress = _zsToken;\n', '        setupWithdrawTokens();\n', '    }\n', '\n', '    // Initialization functions\n', '    \n', '    function setupWithdrawTokens() internal {\n', '        // Start with UST\n', '        IERC20 _token = IERC20(address(0xa47c8bf37f92aBed4A126BDA807A7b7498661acD));\n', '        tokenList.push(\n', '            TokenInfo({\n', '                token: _token,\n', '                decimals: _token.decimals()\n', '            })\n', '        );\n', '        \n', '        // USDT\n', '        _token = IERC20(address(0xdAC17F958D2ee523a2206206994597C13D831ec7));\n', '        tokenList.push(\n', '            TokenInfo({\n', '                token: _token,\n', '                decimals: _token.decimals()\n', '            })\n', '        );\n', '    }\n', '    \n', '    // Modifier\n', '    modifier onlyZSToken() {\n', '        require(zsTokenAddress == _msgSender(), "Call not sent from the zs-Token");\n', '        _;\n', '    }\n', '    \n', '    // Read functions\n', '    \n', '    function rewardTokensCount() external view returns (uint256) {\n', '        return tokenList.length;\n', '    }\n', '    \n', '    function rewardTokenAddress(uint256 _pos) external view returns (address) {\n', '        require(_pos < tokenList.length,"No token at that position");\n', '        return address(tokenList[_pos].token);\n', '    }\n', '    \n', '    function balance() public view returns (uint256) {\n', '        return getNormalizedTotalBalance(address(this));\n', '    }\n', '    \n', '    function getNormalizedTotalBalance(address _address) public view returns (uint256) {\n', '        uint256 _balance = 0;\n', '        for(uint256 i = 0; i < tokenList.length; i++){\n', '            uint256 _bal = tokenList[i].token.balanceOf(_address);\n', '            _bal = _bal.mul(1e18).div(10**tokenList[i].decimals);\n', '            _balance = _balance.add(_bal); // This has been normalized to 1e18 decimals\n', '        }\n', '        return _balance;\n', '    }\n', '    \n', '    function withdrawTokenReserves() public view returns (address, uint256) {\n', '        // This function will return the address and amount of frax, then usdc\n', '        if(tokenList[0].token.balanceOf(address(this)) > 0){\n', '            return (address(tokenList[0].token), tokenList[0].token.balanceOf(address(this)));\n', '        }else if(tokenList[1].token.balanceOf(address(this)) > 0){\n', '            return (address(tokenList[1].token), tokenList[1].token.balanceOf(address(this)));\n', '        }else{\n', '            return (address(0), 0); // No balance\n', '        }\n', '    }\n', '    \n', '    // Write functions\n', '    \n', '    function enter() external onlyZSToken {\n', '        deposit(false);\n', '    }\n', '    \n', '    function exit() external onlyZSToken {\n', '        // The ZS token vault is removing all tokens from this strategy\n', '        withdraw(_msgSender(),1,1, false);\n', '    }\n', '    \n', '    function deposit(bool nonContract) public onlyZSToken {\n', '        // Only the ZS token can call the function\n', '        \n', '        // No trading is performed on deposit\n', '        if(nonContract == true){ }\n', '        lastActionBalance = balance();\n', '        require(lastActionBalance <= maxPoolSize,"This strategy has reached its maximum balance");\n', '    }\n', '    \n', '    function simulateExchange(address _inputToken, address _outputToken, uint256 _amount, bool _uniswap) internal view returns (uint256) {\n', '        if(_uniswap == true){\n', '            // Possible Uniswap routes, UST / USDT, USDT / ETH\n', '            UniswapRouter router = UniswapRouter(UNISWAP_ROUTER_ADDRESS);\n', '            address[] memory path;\n', '            if(_inputToken == address(tokenList[0].token) && _outputToken == WETH_ADDRESS){\n', '                // Selling UST for WETH, must go through USDT\n', '                path = new address[](3);\n', '                path[0] = _inputToken;\n', '                path[1] = address(tokenList[1].token);\n', '                path[2] = _outputToken;\n', '            }else{\n', '                path = new address[](2);\n', '                path[0] = _inputToken;\n', '                path[1] = _outputToken;                \n', '            }\n', '            uint256[] memory estimates = router.getAmountsOut(_amount, path);\n', '            _amount = estimates[estimates.length - 1]; // This is the amount of WETH returned\n', '            return _amount;            \n', '        }else{\n', '            // We are swapping via curve\n', '            CurvePool pool = CurvePool(CURVE_UST_POOL);\n', '            int128 inCurve = 0;\n', '            int128 outCurve = 0;\n', '            if(_inputToken == address(tokenList[1].token)){inCurve = 3;}\n', '            if(_outputToken == address(tokenList[1].token)){outCurve = 3;}\n', '            return pool.get_dy_underlying(inCurve, outCurve, _amount);\n', '        }\n', '    }\n', '    \n', '    function exchange(address _inputToken, address _outputToken, uint256 _amount, bool _uniswap) internal {\n', '        if(_uniswap == true){\n', '            // Possible Uniswap routes, UST / USDT, USDT / ETH\n', '            UniswapRouter router = UniswapRouter(UNISWAP_ROUTER_ADDRESS);\n', '            address[] memory path;\n', '            if(_inputToken == address(tokenList[0].token) && _outputToken == WETH_ADDRESS){\n', '                // Selling UST for WETH, must go through USDT\n', '                path = new address[](3);\n', '                path[0] = _inputToken;\n', '                path[1] = address(tokenList[1].token);\n', '                path[2] = _outputToken;\n', '            }else{\n', '                path = new address[](2);\n', '                path[0] = _inputToken;\n', '                path[1] = _outputToken;                \n', '            }\n', '            IERC20(_inputToken).safeApprove(UNISWAP_ROUTER_ADDRESS, 0);\n', '            IERC20(_inputToken).safeApprove(UNISWAP_ROUTER_ADDRESS, _amount);\n', '            router.swapExactTokensForTokens(_amount, 1, path, address(this), now.add(60)); // Get WETH from token\n', '            return;           \n', '        }else{\n', '            // We are swapping via curve\n', '            CurvePool pool = CurvePool(CURVE_UST_POOL);\n', '            int128 inCurve = 0;\n', '            int128 outCurve = 0;\n', '            if(_inputToken == address(tokenList[1].token)){inCurve = 3;}\n', '            if(_outputToken == address(tokenList[1].token)){outCurve = 3;}\n', '            IERC20(_inputToken).safeApprove(CURVE_UST_POOL, 0);\n', '            IERC20(_inputToken).safeApprove(CURVE_UST_POOL, _amount);\n', '            pool.exchange_underlying(inCurve, outCurve, _amount, 1);\n', '        }\n', '    }\n', '\n', '    function getCheaperToken() internal view returns (uint256, uint256, bool) {\n', '        // This will give us the ID of the cheapest token for both Uniswap and Curve\n', '        // We will estimate the return for trading 10000 UST\n', '        // The higher the return, the lower the price of the other token\n', '        \n', '        // It will also suggest which exchange we should use, Uniswap or Curve\n', '        uint256 targetID_1 = 0; // Our target ID is UST first\n', '        uint256 targetID_2 = 0;\n', '        bool useUni = false;\n', '        uint256 ustAmount = uint256(10000).mul(10**tokenList[0].decimals);\n', '        \n', '        // Now compare it to USDT on Uniswap\n', '        uint256 estimate = simulateExchange(address(tokenList[0].token),address(tokenList[1].token),ustAmount,true);\n', '        estimate = estimate.mul(10**tokenList[0].decimals).div(10**tokenList[1].decimals);\n', '        if(estimate > ustAmount){\n', '            // This token is worth less than the UST on Uniswap\n', '            targetID_1 = 1;\n', '        }\n', '        \n', '        // Now on Curve\n', '        uint256 estimate2 = simulateExchange(address(tokenList[0].token),address(tokenList[1].token),ustAmount,false);\n', '        estimate2 = estimate2.mul(10**tokenList[0].decimals).div(10**tokenList[1].decimals);\n', '        if(estimate2 > ustAmount){\n', '            // This token is worth less than UST on curve\n', '            targetID_2 = 1;\n', '        }\n', '        \n', '        // Now determine which exchange offers the better rate between the two\n', '        if(targetID_1 == targetID_2){\n', '            if(targetID_1 == 1){\n', '                // USDT is weaker token on both exchanges\n', '                if(estimate2 >= estimate){\n', '                    // Get more USDT from Curve\n', '                    useUni = false;\n', '                }else{\n', '                    useUni = true;\n', '                }\n', '            }else{\n', '                // UST is weaker token on both exchanges\n', '                if(estimate2 > estimate){\n', '                    // Get more UST from Uni\n', '                    useUni = true;\n', '                }else{\n', '                    useUni = false;\n', '                }\n', '            }\n', '        }else{\n', '            if(targetID_1 == 0){\n', '                // When we flash loan to increase our USDT, sell it on Uni as it is more valuable on there\n', '                useUni = true;\n', '            }else{\n', '                // When we flash loan to increase our USDT, sell it on Curve as it is more valuable there\n', '                useUni = false;\n', '            }\n', '        }\n', '        return (targetID_1, targetID_2, useUni);\n', '    }\n', '    \n', '    function estimateSellAtMaxSlippage(uint256 originID, uint256 targetID, uint256 _balance) internal view returns (uint256) {\n', '        // This will estimate the amount that can be sold at the maximum slippage\n', '        // We discover the price then compare it to the actual return\n', '        // The estimate is based on a linear curve so not 100% representative of Uniswap but close enough\n', '        \n', '        // It will use a 0.1% sell to discover the price first\n', '        uint256 minSellPercent = maxPercentSell.div(1000);\n', '        uint256 _amount = _balance.mul(minSellPercent).div(DIVISION_FACTOR);\n', "        if(_amount == 0){ return 0; } // Nothing to sell, can't calculate\n", '        uint256 _maxReturn = simulateExchange(address(tokenList[originID].token), address(tokenList[targetID].token), _amount, true);\n', '        _maxReturn = _maxReturn.mul(1000); // Without slippage, this would be our maximum return\n', '        \n', '        // Now calculate the slippage at the max percent\n', '        _amount = _balance.mul(maxPercentSell).div(DIVISION_FACTOR);\n', '        uint256 _return = simulateExchange(address(tokenList[originID].token), address(tokenList[targetID].token), _amount, true);\n', '        if(_return >= _maxReturn){\n', "            // This shouldn't be possible\n", '            return _amount; // Sell the entire amount\n', '        }\n', '        // Calculate slippage\n', '        uint256 percentSlip = uint256(_maxReturn.mul(DIVISION_FACTOR)).sub(_return.mul(DIVISION_FACTOR)).div(_maxReturn);\n', '        if(percentSlip <= maxSlippage){\n', '            return _amount; // This is less than our maximum slippage, sell it all\n', '        }\n', '        return _amount.mul(maxSlippage).div(percentSlip); // This will be the sell amount at max slip\n', '    }\n', '    \n', '    function estimateFlashLoanResult(uint256 point1, uint256 point2, uint256 _amount) internal view returns (uint256) {\n', '        // This will estimate the return of our flash loan minus the fee\n', '        uint256 fee = _amount.mul(90).div(DIVISION_FACTOR); // This is the Aave fee (0.09%)\n', '        uint256 gain = 0;\n', '        if(point2 > point1){\n', '            // USL price is lower than USDT on Uniswap, while higher on Curve\n', '            // Use the borrowed USDT to buy USL on Uniswap\n', '            gain = simulateExchange(address(tokenList[1].token), address(tokenList[0].token), _amount, true); // Receive USL\n', '            gain = simulateExchange(address(tokenList[0].token), address(tokenList[1].token), gain, false); // Receive USDT\n', '        }else{\n', '            // USL price higher than USDT on Uniswap while lower on Curve\n', '            gain = simulateExchange(address(tokenList[1].token), address(tokenList[0].token), _amount, false); // Receive USL\n', '            gain = simulateExchange(address(tokenList[0].token), address(tokenList[1].token), gain, true); // Receive USDT\n', '        }\n', '        if(gain > _amount.add(fee)){\n', '            // Positive return on the flash\n', '            gain = gain.sub(fee).sub(_amount); // Get the pure gain after returning the funds with a fee\n', '            return gain;\n', '        }else{\n', '            return 0; // Do not take out a flash loan as not enough gain\n', '        }\n', '    }\n', '    \n', '    function performFlashLoan(uint256 point1, uint256 point2, uint256 _amount) internal returns (uint256) {\n', '        // Will call Aave\n', '        uint256 flashGain = tokenList[1].token.balanceOf(address(this));\n', '        \n', '        flashParams[0] = 1; // Authorize flash loan receiving\n', '        flashParams[1] = point1; \n', '        flashParams[2] = point2;\n', '        \n', '        // Call the flash loan\n', '        LendingPool lender = LendingPool(LendingPoolAddressesProvider(LENDING_POOL_ADDRESS_PROVIDER).getLendingPool()); // Load the lending pool\n', '        \n', '        address[] memory assets = new address[](1);\n', '        assets[0] = address(tokenList[1].token);       \n', '        \n', '        uint256[] memory amounts = new uint256[](1);\n', '        amounts[0] = _amount; // The amount we want to borrow\n', '        \n', '        uint256[] memory modes = new uint256[](1);\n', '        modes[0] = 0; // Revert if fail to return funds\n', '        \n', '        bytes memory params = "";\n', '        lender.flashLoan(address(this), assets, amounts, modes, address(this), params, 0);\n', '        \n', '        flashParams[0] = 0; // Deactivate flash loan receiving\n', '        uint256 newBal = tokenList[1].token.balanceOf(address(this));\n', '        require(newBal > flashGain, "Flash loan failed to increase balance");\n', '        flashGain = newBal.sub(flashGain);\n', '        uint256 payout = flashGain.mul(uint256(100000).sub(percentDepositor)).div(DIVISION_FACTOR);\n', '        if(payout > 0){\n', '            // Convert part to WETH\n', '            exchange(address(tokenList[1].token), WETH_ADDRESS, payout, true);\n', '        }\n', '        return flashGain;\n', '    }\n', '    \n', '    function executeOperation(\n', '        address[] calldata assets,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata premiums,\n', '        address initiator,\n', '        bytes calldata params\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '        require(flashParams[0] == 1, "No flash loan authorized on this contract");\n', '        address lendingPool = LendingPoolAddressesProvider(LENDING_POOL_ADDRESS_PROVIDER).getLendingPool();\n', '        require(_msgSender() == lendingPool, "Not called from Aave");\n', '        require(initiator == address(this), "Not Authorized"); // Prevent other contracts from calling this function\n', '        if(params.length == 0){} // Removes the warning\n', '        flashParams[0] = 0; // Prevent a replay;\n', '        {\n', '            // Create inner scope to prevent stack too deep error\n', '            uint256 point1 = flashParams[1];\n', '            uint256 point2 = flashParams[2];\n', '            uint256 _bal;\n', '            \n', '            // Swap the amounts to earn more\n', '            if(point2 > point1){\n', '                // USL price is lower than USDT on Uniswap, while higher on Curve\n', '                // Use the borrowed USDT to buy USL on Uniswap\n', '                _bal = tokenList[0].token.balanceOf(address(this));\n', '                exchange(address(tokenList[1].token), address(tokenList[0].token), amounts[0], true); // Receive USL\n', '                _bal = tokenList[0].token.balanceOf(address(this)).sub(_bal);\n', '                exchange(address(tokenList[0].token), address(tokenList[1].token), _bal, false); // Receive USDT\n', '            }else{\n', '                // USL price higher than USDT on Uniswap while lower on Curve\n', '                _bal = tokenList[0].token.balanceOf(address(this));\n', '                exchange(address(tokenList[1].token), address(tokenList[0].token), amounts[0], false); // Receive USL\n', '                _bal = tokenList[0].token.balanceOf(address(this)).sub(_bal);\n', '                exchange(address(tokenList[0].token), address(tokenList[1].token), _bal, true); // Receive USDT\n', '            }\n', '        }\n', '        \n', '        // Authorize Aave to pull funds from this contract\n', '        // Approve the LendingPool contract allowance to *pull* the owed amount\n', '        for(uint256 i = 0; i < assets.length; i++) {\n', '            uint256 amountOwing = amounts[i].add(premiums[i]);\n', '            IERC20(assets[i]).safeApprove(lendingPool, 0);\n', '            IERC20(assets[i]).safeApprove(lendingPool, amountOwing);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function getFastGasPrice() internal view returns (uint256) {\n', '        AggregatorV3Interface gasOracle = AggregatorV3Interface(GAS_ORACLE_ADDRESS);\n', '        ( , int intGasPrice, , , ) = gasOracle.latestRoundData(); // We only want the answer \n', '        return uint256(intGasPrice);\n', '    }\n', '    \n', '    function checkAndSwapTokens(address _executor) internal {\n', '        lastTradeTime = now;\n', '\n', '        // Now find our target token to sell into\n', '        (uint256 targetID_1, uint256 targetID_2, bool useUniswap) = getCheaperToken(); // Normally both these values should point to the same ID\n', '        \n', '        uint256 targetID;\n', '        if(targetID_1 == targetID_2){\n', '            targetID = targetID_1;\n', '        }else{\n', '            // The fun part (flash laon)\n', '            // Since prices are inverse between the exchanges\n', '            // We will call Aave to borrow USDT, sell it for UST, sell UST on another exchange for more USDT than we original borrowed\n', '            // First determine borrow size at the max slippage\n', '            uint256 maxBorrow = uint256(1000000).mul(10**tokenList[1].decimals); // Predict based on $1million\n', '            maxBorrow = estimateSellAtMaxSlippage(1, 0, maxBorrow);\n', '            // Now estimate the return of the flash loan\n', '            if(estimateFlashLoanResult(targetID_1, targetID_2, maxBorrow) > 2){\n', '                // Flash loan will be profitable, borrow the funds\n', '                performFlashLoan(targetID_1, targetID_2, maxBorrow); // This will return USDT earned and exchange it for WETH\n', '            }\n', '            targetID = 0; // Sell whatever gains are possible for more UST\n', '        }\n', '        \n', '        uint256 length = tokenList.length;\n', '\n', '        // Now sell all the other tokens into this token\n', '        uint256 _totalBalance = balance(); // Get the token balance at this contract, should increase\n', '        bool _expectIncrease = false;\n', '        for(uint256 i = 0; i < length; i++){\n', '            if(i != targetID){\n', '                uint256 sellBalance = 0;\n', '                uint256 _minTradeTarget = minTradeSplit.mul(10**tokenList[i].decimals);\n', '                uint256 _maxTradeTarget = maxAmountSell.mul(10**tokenList[i].decimals); // Determine the maximum amount of tokens to sell at once\n', '                if(tokenList[i].token.balanceOf(address(this)) <= _minTradeTarget){\n', '                    // If balance is too small,sell all tokens at once\n', '                    sellBalance = tokenList[i].token.balanceOf(address(this));\n', '                }else{\n', '                    if(useUniswap == true){\n', '                        sellBalance = estimateSellAtMaxSlippage(i, targetID, tokenList[i].token.balanceOf(address(this))); // This will select a balance with a max slippage\n', '                    }else{\n', '                        // Curve supports larger sells\n', '                        sellBalance = tokenList[i].token.balanceOf(address(this)).mul(maxPercentSell).div(DIVISION_FACTOR);\n', '                    }\n', '                }\n', '                if(sellBalance > _maxTradeTarget){\n', '                    // If greater than the maximum trade allowed, match it\n', '                    sellBalance = _maxTradeTarget;\n', '                }\n', '                uint256 minReceiveBalance = sellBalance.mul(10**tokenList[targetID].decimals).div(10**tokenList[i].decimals); // Change to match decimals of destination\n', '                if(sellBalance > 0){\n', '                    uint256 estimate = simulateExchange(address(tokenList[i].token), address(tokenList[targetID].token), sellBalance, useUniswap);\n', '                    if(estimate > minReceiveBalance){\n', '                        _expectIncrease = true;\n', '                        exchange(address(tokenList[i].token), address(tokenList[targetID].token), sellBalance, useUniswap);\n', '                    }                        \n', '                }\n', '            }\n', '        }\n', '        uint256 _newBalance = balance();\n', '        if(_expectIncrease == true){\n', "            // There may be rare scenarios where we don't gain any by calling this function\n", '            require(_newBalance > _totalBalance, "Failed to gain in balance from selling tokens");\n', '        }\n', '        uint256 gain = _newBalance.sub(_totalBalance);\n', '        IERC20 weth = IERC20(WETH_ADDRESS);\n', '        uint256 _wethBalance = weth.balanceOf(address(this));\n', '        if(gain >= minGain || _wethBalance > 0){\n', '            // Minimum gain required to buy WETH is about 0.01 tokens\n', '            \n', '            if(gain >= minGain){\n', '            // Buy WETH from Uniswap with tokens\n', '                uint256 sellBalance = gain.mul(10**tokenList[targetID].decimals).div(1e18); // Convert to target decimals\n', '                uint256 holdBalance = sellBalance.mul(percentDepositor).div(DIVISION_FACTOR);\n', '                sellBalance = sellBalance.sub(holdBalance); // We will buy WETH with this amount\n', '                if(sellBalance <= tokenList[targetID].token.balanceOf(address(this))){\n', '                    // Sell some of our gained token for WETH\n', '                    exchange(address(tokenList[targetID].token), WETH_ADDRESS, sellBalance, true);\n', '                    _wethBalance = weth.balanceOf(address(this));\n', '                }\n', '            }\n', '            if(_wethBalance > 0){\n', '                // Split the rest between the stakers and such\n', '                // This is pure profit, figure out allocation\n', '                // Split the amount sent to the treasury, stakers and executor if one exists\n', '                if(_executor != address(0)){\n', '                    // Executors will get a gas reimbursement in WETH and a percent of the remaining\n', '                    uint256 maxGasFee = getFastGasPrice().mul(gasStipend); // This is gas stipend in wei\n', '                    uint256 gasFee = tx.gasprice.mul(gasStipend); // This is gas fee requested\n', '                    if(gasFee > maxGasFee){\n', '                        gasFee = maxGasFee; // Gas fee cannot be greater than the maximum\n', '                    }\n', '                    uint256 executorAmount = gasFee;\n', '                    if(gasFee >= _wethBalance.mul(maxPercentStipend).div(DIVISION_FACTOR)){\n', '                        executorAmount = _wethBalance.mul(maxPercentStipend).div(DIVISION_FACTOR); // The executor will get the entire amount up to point\n', '                    }else{\n', '                        // Add the executor percent on top of gas fee\n', '                        executorAmount = _wethBalance.sub(gasFee).mul(percentExecutor).div(DIVISION_FACTOR).add(gasFee);\n', '                    }\n', '                    if(executorAmount > 0){\n', '                        weth.safeTransfer(_executor, executorAmount);\n', '                        _wethBalance = weth.balanceOf(address(this)); // Recalculate WETH in contract           \n', '                    }\n', '                }\n', '                if(_wethBalance > 0){\n', '                    uint256 stakersAmount = _wethBalance.mul(percentStakers).div(DIVISION_FACTOR);\n', '                    uint256 treasuryAmount = _wethBalance.sub(stakersAmount);\n', '                    if(treasuryAmount > 0){\n', '                        weth.safeTransfer(treasuryAddress, treasuryAmount);\n', '                    }\n', '                    if(stakersAmount > 0){\n', '                        if(stakingAddress != address(0)){\n', '                            weth.safeTransfer(stakingAddress, stakersAmount);\n', '                            StabilizeStakingPool(stakingAddress).notifyRewardAmount(stakersAmount);                                \n', '                        }else{\n', '                            // No staking pool selected, just send to the treasury\n', '                            weth.safeTransfer(treasuryAddress, stakersAmount);\n', '                        }\n', '                    }\n', '                }                \n', '            }\n', '        }\n', '    }\n', '    \n', '    function expectedProfit(bool inWETHForExecutor) external view returns (uint256) {\n', '        // This view will return the amount of gain a forced swap will make on next call\n', '        \n', '        // Now find our target token to sell into\n', '        (uint256 targetID_1, uint256 targetID_2, bool useUniswap) = getCheaperToken(); // Normally both these values should point to the same ID\n', '        \n', '        uint256 targetID;\n', '        uint256 flashGain = 0;\n', '        if(targetID_1 == targetID_2){\n', '            targetID = targetID_1;\n', '        }else{\n', '            // The fun part (flash loan)\n', '            // Since prices are inverse between the exchanges\n', '            // We will call Aave to borrow USDT, sell it for UST, sell UST on another exchange for more USDT than we original borrowed\n', '            // First determine borrow size at the max slippage\n', '            uint256 maxBorrow = uint256(1000000).mul(10**tokenList[1].decimals); // Predict based on $1million\n', '            maxBorrow = estimateSellAtMaxSlippage(1, 0, maxBorrow);\n', '            // Now estimate the return of the flash loan\n', '            flashGain = estimateFlashLoanResult(targetID_1, targetID_2, maxBorrow);\n', '            if(flashGain > 0){\n', '                if(inWETHForExecutor == true){\n', '                    flashGain = simulateExchange(address(tokenList[1].token), WETH_ADDRESS, flashGain.mul(uint256(100000).sub(percentDepositor)).div(DIVISION_FACTOR), true);\n', '                }else{\n', '                    // Normalize it\n', '                    flashGain = flashGain.mul(1e18).div(10**tokenList[1].decimals);\n', '                }                \n', '            }\n', '            targetID = 0;\n', '        }\n', '        uint256 length = tokenList.length;\n', '\n', '        // Now simulate sell all the other tokens into this token\n', '        uint256 _normalizedGain = 0;\n', '        for(uint256 i = 0; i < length; i++){\n', '            if(i != targetID){\n', '                uint256 sellBalance = 0;\n', '                uint256 _minTradeTarget = minTradeSplit.mul(10**tokenList[i].decimals);\n', '                uint256 _maxTradeTarget = maxAmountSell.mul(10**tokenList[i].decimals); // Determine the maximum amount of tokens to sell at once\n', '                if(tokenList[i].token.balanceOf(address(this)) <= _minTradeTarget){\n', '                    // If balance is too small,sell all tokens at once\n', '                    sellBalance = tokenList[i].token.balanceOf(address(this));\n', '                }else{\n', '                    if(useUniswap == true){\n', '                        sellBalance = estimateSellAtMaxSlippage(i, targetID, tokenList[i].token.balanceOf(address(this))); // This will select a balance with a max slippage\n', '                    }else{\n', '                        // Curve supports larger sells\n', '                        sellBalance = tokenList[i].token.balanceOf(address(this)).mul(maxPercentSell).div(DIVISION_FACTOR);\n', '                    }\n', '                }\n', '                if(sellBalance > _maxTradeTarget){\n', '                    // If greater than the maximum trade allowed, match it\n', '                    sellBalance = _maxTradeTarget;\n', '                }\n', '                uint256 minReceiveBalance = sellBalance.mul(10**tokenList[targetID].decimals).div(10**tokenList[i].decimals); // Change to match decimals of destination\n', '                if(sellBalance > 0){\n', '                    uint256 estimate = simulateExchange(address(tokenList[i].token), address(tokenList[targetID].token), sellBalance, useUniswap);\n', '                    if(estimate > minReceiveBalance){\n', '                        uint256 _gain = estimate.sub(minReceiveBalance).mul(1e18).div(10**tokenList[targetID].decimals); // Normalized gain\n', '                        _normalizedGain = _normalizedGain.add(_gain);\n', '                    }                        \n', '                }\n', '            }\n', '        }\n', '        if(inWETHForExecutor == false){\n', '            return _normalizedGain.add(flashGain);\n', '        }else{\n', '            if(_normalizedGain.add(flashGain) == 0){\n', '                return 0;\n', '            }\n', '            // Calculate how much WETH the executor would make as profit\n', '            uint256 estimate = flashGain; // WETH earned from flashloan\n', '            if(_normalizedGain > 0){\n', '                uint256 sellBalance = _normalizedGain.mul(10**tokenList[targetID].decimals).div(1e18); // Convert to target decimals\n', '                uint256 holdBalance = sellBalance.mul(percentDepositor).div(DIVISION_FACTOR);\n', '                sellBalance = sellBalance.sub(holdBalance); // We will buy WETH with this amount\n', '                // Estimate output\n', '                estimate = estimate.add(simulateExchange(address(tokenList[targetID].token), WETH_ADDRESS, sellBalance, true));           \n', '            }\n', '            // Now calculate the amount going to the executor\n', '            uint256 gasFee = getFastGasPrice().mul(gasStipend); // This is gas stipend in wei\n', '            if(gasFee >= estimate.mul(maxPercentStipend).div(DIVISION_FACTOR)){ // Max percent of total\n', '                return estimate.mul(maxPercentStipend).div(DIVISION_FACTOR); // The executor will get max percent of total\n', '            }else{\n', '                estimate = estimate.sub(gasFee); // Subtract fee from remaining balance\n', '                return estimate.mul(percentExecutor).div(DIVISION_FACTOR).add(gasFee); // Executor amount with fee added\n', '            }\n', '        }  \n', '    }\n', '    \n', '    function withdraw(address _depositor, uint256 _share, uint256 _total, bool nonContract) public onlyZSToken returns (uint256) {\n', '        require(balance() > 0, "There are no tokens in this strategy");\n', '        if(nonContract == true){\n', '            if( _share > _total.mul(percentTradeTrigger).div(DIVISION_FACTOR)){\n', '                checkAndSwapTokens(_depositor);\n', '            }\n', '        }\n', '        \n', '        uint256 withdrawAmount = 0;\n', '        uint256 _balance = balance();\n', '        if(_share < _total){\n', '            uint256 _myBalance = _balance.mul(_share).div(_total);\n', '            withdrawPerOrder(_depositor, _myBalance, false); // This will withdraw based on token price\n', '            withdrawAmount = _myBalance;\n', '        }else{\n', '            // We are all shares, transfer all\n', '            withdrawPerOrder(_depositor, _balance, true);\n', '            withdrawAmount = _balance;\n', '        }       \n', '        lastActionBalance = balance();\n', '        \n', '        return withdrawAmount;\n', '    }\n', '    \n', '    // This will withdraw the tokens from the contract based on their order\n', '    function withdrawPerOrder(address _receiver, uint256 _withdrawAmount, bool _takeAll) internal {\n', '        uint256 length = tokenList.length;\n', '        if(_takeAll == true){\n', '            // Send the entire balance\n', '            for(uint256 i = 0; i < length; i++){\n', '                uint256 _bal = tokenList[i].token.balanceOf(address(this));\n', '                if(_bal > 0){\n', '                    tokenList[i].token.safeTransfer(_receiver, _bal);\n', '                }\n', '            }\n', '            return;\n', '        }\n', '        \n', '        for(uint256 i = 0; i < length; i++){\n', '            // Determine the balance left\n', '            uint256 _normalizedBalance = tokenList[i].token.balanceOf(address(this)).mul(1e18).div(10**tokenList[i].decimals);\n', '            if(_normalizedBalance <= _withdrawAmount){\n', '                // Withdraw the entire balance of this token\n', '                if(_normalizedBalance > 0){\n', '                    _withdrawAmount = _withdrawAmount.sub(_normalizedBalance);\n', '                    tokenList[i].token.safeTransfer(_receiver, tokenList[i].token.balanceOf(address(this)));                    \n', '                }\n', '            }else{\n', '                // Withdraw a partial amount of this token\n', '                if(_withdrawAmount > 0){\n', "                    // Convert the withdraw amount to the token's decimal amount\n", '                    uint256 _balance = _withdrawAmount.mul(10**tokenList[i].decimals).div(1e18);\n', '                    _withdrawAmount = 0;\n', '                    tokenList[i].token.safeTransfer(_receiver, _balance);\n', '                }\n', '                break; // Nothing more to withdraw\n', '            }\n', '        }\n', '    }\n', '    \n', '    function executorSwapTokens(address _executor, uint256 _minSecSinceLastTrade) external {\n', '        // Function designed to promote trading with incentive. Users get 20% of WETH from profitable trades\n', '        require(now.sub(lastTradeTime) > _minSecSinceLastTrade, "The last trade was too recent");\n', '        require(_msgSender() == tx.origin, "Contracts cannot interact with this function");\n', '        checkAndSwapTokens(_executor);\n', '        lastActionBalance = balance();\n', '    }\n', '    \n', '    // Governance functions\n', '    function governanceSwapTokens() external onlyGovernance {\n', '        // This is function that force trade tokens at anytime. It can only be called by governance\n', '        checkAndSwapTokens(governance());\n', '        lastActionBalance = balance();\n', '    }\n', '    \n', '    // Timelock variables\n', '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    address private _timelock_address;\n', '    uint256[7] private _timelock_data;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        if(balance() > 0){ // Timelock only applies when balance exists\n', '            require(now >= _timelockStart + TIMELOCK_DURATION, "Timelock time not met");\n', '        }\n', '        _;\n', '    }\n', '    \n', '    // Change the owner of the token contract\n', '    // --------------------\n', '    function startGovernanceChange(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address = _address;       \n', '    }\n', '    \n', '    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\n', '        transferGovernance(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the treasury address\n', '    // --------------------\n', '    function startChangeTreasury(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeTreasury() external onlyGovernance timelockConditionsMet(2) {\n', '        treasuryAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the staking address\n', '    // --------------------\n', '    function startChangeStakingPool(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 3;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeStakingPool() external onlyGovernance timelockConditionsMet(3) {\n', '        stakingAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the zsToken address\n', '    // --------------------\n', '    function startChangeZSToken(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 4;\n', '        _timelock_address = _address;\n', '    }\n', '    \n', '    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(4) {\n', '        zsTokenAddress = _timelock_address;\n', '    }\n', '    // --------------------\n', '   \n', '    // Change the trading conditions used by the strategy\n', '    // --------------------\n', '    \n', '    function startChangeTradingConditions(uint256 _pTradeTrigger, uint256 _pSellPercent, uint256 _mSellAmount, uint256 _minSplit, uint256 _maxStipend, uint256 _pMaxStipend, uint256 _pSlip) external onlyGovernance {\n', '        // Changes a lot of trading parameters in one call\n', '        require(_pTradeTrigger <= 100000 && _pSellPercent <= 100000 && _pMaxStipend <= 100000 && _pSlip <= 100000,"Percent cannot be greater than 100%");\n', '        _timelockStart = now;\n', '        _timelockType = 5;\n', '        _timelock_data[0] = _pTradeTrigger;\n', '        _timelock_data[1] = _pSellPercent;\n', '        _timelock_data[2] = _minSplit;\n', '        _timelock_data[3] = _maxStipend;\n', '        _timelock_data[4] = _pMaxStipend;\n', '        _timelock_data[5] = _pSlip;\n', '        _timelock_data[6] = _mSellAmount;\n', '    }\n', '    \n', '    function finishChangeTradingConditions() external onlyGovernance timelockConditionsMet(5) {\n', '        percentTradeTrigger = _timelock_data[0];\n', '        maxPercentSell = _timelock_data[1];\n', '        minTradeSplit = _timelock_data[2];\n', '        gasStipend = _timelock_data[3];\n', '        maxPercentStipend = _timelock_data[4];\n', '        maxSlippage = _timelock_data[5];\n', '        maxAmountSell = _timelock_data[6];\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the strategy allocations between the parties\n', '    // --------------------\n', '    \n', '    function startChangeStrategyAllocations(uint256 _pDepositors, uint256 _pExecutor, uint256 _pStakers, uint256 _maxPool) external onlyGovernance {\n', '        // Changes strategy allocations in one call\n', '        require(_pDepositors <= 100000 && _pExecutor <= 100000 && _pStakers <= 100000,"Percent cannot be greater than 100%");\n', '        _timelockStart = now;\n', '        _timelockType = 6;\n', '        _timelock_data[0] = _pDepositors;\n', '        _timelock_data[1] = _pExecutor;\n', '        _timelock_data[2] = _pStakers;\n', '        _timelock_data[3] = _maxPool;\n', '    }\n', '    \n', '    function finishChangeStrategyAllocations() external onlyGovernance timelockConditionsMet(6) {\n', '        percentDepositor = _timelock_data[0];\n', '        percentExecutor = _timelock_data[1];\n', '        percentStakers = _timelock_data[2];\n', '        maxPoolSize = _timelock_data[3];\n', '    }\n', '    // --------------------\n', '}']