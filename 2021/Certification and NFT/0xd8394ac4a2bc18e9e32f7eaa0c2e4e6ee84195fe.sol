['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', 'pragma solidity ^0.4.25;\n', '\n', '\n', '\n', ' contract newstart {\n', '     \n', '       struct User {\n', '        \n', '       address referer;\n', '       address referer2;\n', '       address diler;\n', '       }\n', '      \n', '       address public owner;\n', '      address public ambassador;\n', '      \n', '     event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '     event ambassadorshipTransferred(address indexed previousambassador, address indexed newambassador);\n', '      mapping(address => User) public users;\n', '      \n', '     constructor()public{\n', '        owner = msg.sender;\n', '        ambassador = 0x2F6Cf50b71d71faFE45887F89ab3EA39ac1F5145;\n', '        }\n', '        \n', '         modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', ' \n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '      function transferambassador(address newambassador) public onlyOwner {\n', '    require(newambassador != address(0));\n', '    emit ambassadorshipTransferred(ambassador, newambassador);\n', '    ambassador = newambassador;\n', '  }\n', '      \n', '     function addUser(address referer, address referer2, address diler) public payable {\n', '       \n', '       address sender = msg.sender;\n', '        uint value = msg.value*42/100;\n', '      ambassador.transfer(value);\n', '       require(referer != msg.sender);\n', '      require(referer2 != msg.sender);\n', '      require(diler != msg.sender);\n', '      require(msg.value >= 500 finney);\n', '      require(msg.value <= 550 finney);\n', '      uint referervalue = msg.value*30/100;\n', '      referer.transfer(referervalue);\n', '      uint referer2value = msg.value*20/100;\n', '      referer2.transfer(referer2value);\n', '      uint dilervalue = msg.value*5/100;\n', '      diler.transfer(dilervalue);\n', '      \n', '       User storage newUser;\n', '       \n', '       newUser.referer = referer;\n', '       newUser.referer2 = referer2;\n', '       newUser.diler = diler;\n', '        users[sender] = newUser;   \n', '       }\n', '    }']