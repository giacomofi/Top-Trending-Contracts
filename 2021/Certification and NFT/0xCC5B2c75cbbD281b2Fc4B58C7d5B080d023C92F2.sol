['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', '// SPDX-License-Identifier: Apache-2.0.\n', 'pragma solidity ^0.6.11;\n', '\n', 'import "StorageSlots.sol";\n', 'import "Common.sol";\n', '\n', '/**\n', "  CallProxy is a 'call' based proxy.\n", '  It is a facade to a real implementation,\n', '  only that unlike the Proxy pattern, it uses call and not delegatecall,\n', '  so that the state is recorded on the called contract.\n', '\n', '  This contract is expected to be placed behind the regular proxy,\n', '  thus:\n', "  1. Implementation address is stored in a hashed slot (other than proxy's one...).\n", '  2. No state variable is allowed in low address ranges.\n', '  3. Setting of implementation is done in initialize.\n', '  4. isFrozen and initialize are implemented, to be compliant with Proxy.\n', '\n', '  This implementation is intentionally minimal,\n', '  and has no management or governance.\n', '  The assumption is that if a different implementation is needed, it will be performed\n', '  in an upgradeTo a new deployed CallProxy, pointing to a new implementation.\n', '*/\n', 'contract CallProxy is StorageSlots {\n', '\n', '    using Addresses for address;\n', '\n', '    // Proxy client - initialize & isFrozen.\n', '    // NOLINTNEXTLINE: external-function.\n', '    function isFrozen() public pure returns(bool) {\n', '        return false;\n', '    }\n', '\n', '    function initialize(bytes calldata data) external {\n', '        require(data.length == 32, "INCORRECT_DATA_SIZE");\n', '        address impl = abi.decode(data, (address));\n', '        require(impl.isContract(), "ADDRESS_NOT_CONTRACT");\n', '        setCallProxyImplementation(impl);\n', '    }\n', '\n', '    /*\n', '      Returns the call proxy implementation address.\n', '    */\n', '    function callProxyImplementation() public view returns (address _implementation) {\n', '        bytes32 slot = CALL_PROXY_IMPL_SLOT;\n', '        assembly {\n', '            _implementation := sload(slot)\n', '        }\n', '    }\n', '\n', '    /*\n', '      Sets the call proxy implementation address.\n', '    */\n', '    function setCallProxyImplementation(address newImplementation) private {\n', '        bytes32 slot = CALL_PROXY_IMPL_SLOT;\n', '        assembly {\n', '            sstore(slot, newImplementation)\n', '        }\n', '    }\n', '\n', '    /*\n', "      Contract's default function. Pass execution to the implementation contract (using call).\n", '      It returns back to the external caller whatever the implementation called code returns.\n', '    */\n', '    // NOLINTNEXTLINE: locked-ether.\n', '    fallback() external payable {\n', '        address _implementation = callProxyImplementation();\n', '        require(_implementation != address(0x0), "MISSING_IMPLEMENTATION");\n', '        uint256 value = msg.value;\n', '        assembly {\n', '            // Copy msg.data. We take full control of memory in this inline assembly\n', '            // block because it will not return to Solidity code. We overwrite the\n', '            // Solidity scratch pad at memory position 0.\n', '            calldatacopy(0, 0, calldatasize())\n', '\n', '            // Call the implementation.\n', "            // out and outsize are 0 for now, as we don't know the out size yet.\n", '            let result := call(gas(), _implementation, value, 0, calldatasize(), 0, 0)\n', '\n', '            // Copy the returned data.\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '                // delegatecall returns 0 on error.\n', '                case 0 {\n', '                    revert(0, returndatasize())\n', '                }\n', '                default {\n', '                    return(0, returndatasize())\n', '                }\n', '        }\n', '    }\n', '}']