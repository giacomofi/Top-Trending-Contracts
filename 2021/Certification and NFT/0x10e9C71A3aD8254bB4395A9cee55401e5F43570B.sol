['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-04\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.15;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function decimals() external view returns (uint);\n', '    function name() external view returns (string memory);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'interface Controller {\n', '    function vaults(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '}\n', '\n', 'interface PoolTogether {\n', '    function depositTo(\n', '        address to,\n', '        uint256 amount,\n', '        address controlledToken,\n', '        address referrer\n', '    ) external;\n', '    function withdrawInstantlyFrom(\n', '        address from,\n', '        uint256 amount,\n', '        address controlledToken,\n', '        uint256 maximumExitFee\n', '    ) external returns (uint256);\n', '    function calculateEarlyExitFee(\n', '        address from,\n', '        address controlledToken,\n', '        uint256 amount\n', '    )\n', '    external\n', '    returns (\n', '        uint256 exitFee,\n', '        uint256 burnedCredit\n', '    );\n', '}\n', '\n', '\n', '\n', 'interface RewardTogether {\n', '    function claim(address user) external returns (uint256);\n', '}\n', '\n', 'interface UniswapRouter {\n', '     function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForTokens(\n', '      uint amountIn,\n', '      uint amountOutMin,\n', '      address[] calldata path,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface WETH {\n', '    function withdraw(uint wad) external;\n', '}\n', '\n', 'contract StrategyUNITogether  {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address constant public unirouter = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address constant public weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\taddress constant public bt = address(0x76c5449F4950f6338A393F53CdA8b53B0cd3Ca3a);\n', '\n', '    address constant public want = address(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);  //UNI\n', '\n', '    address constant public prizePool = address(0x0650d780292142835F6ac58dd8E2a336e87b4393);     //CompoundPrizePool\n', '    address constant public PcUNI = address(0xA92a861FC11b99b24296aF880011B47F9cAFb5ab);\n', '\n', '    address constant public claimPool = address(0xa5dddefD30e234Be2Ac6FC1a0364cFD337aa0f61);      //TokenFaucet\n', '    address constant public claimToken = address(0x0cEC1A9154Ff802e7934Fc916Ed7Ca50bDE6844e);        //POOL\n', '\n', '    address public governance;\n', '    address public controller;\n', '\n', '    uint256 public redeliverynum = 100 * 1e18;\n', '\n', '\taddress[] public swap2BTRouting;\n', '    address[] public swap2TokenRouting;\n', '\n', '    modifier onlyController {\n', '        require(msg.sender == controller, "!controller");\n', '        _;\n', '    }\n', '\n', '\tmodifier isAuthorized() {\n', '        require(msg.sender == governance || msg.sender == controller || msg.sender == address(this), "!authorized");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        governance = tx.origin;\n', '        controller = 0x03D2079c54967f463Fd6e89E76012F74EBC62615;\n', '        doApprove();\n', '\t\tswap2BTRouting = [claimToken,weth,bt];\n', '        swap2TokenRouting = [claimToken,weth,want];\n', '    }\n', '\n', '\tfunction doApprove () internal{\n', '        IERC20(claimToken).approve(unirouter, uint(-1));\n', '        IERC20(weth).approve(unirouter, uint(-1));\n', '    }\n', '\n', '    function deposit() public {\n', '\t\tuint256 _wantAmount = IERC20(want).balanceOf(address(this));\n', '\t\tif (_wantAmount > 0) {\n', '            IERC20(want).safeApprove(prizePool, 0);\n', '            IERC20(want).safeApprove(prizePool, _wantAmount);\n', '\n', '            PoolTogether(prizePool).depositTo(address(this),_wantAmount,PcUNI,address(0));\n', '        }\n', '    }\n', '\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '\tfunction withdraw(uint _amount) external onlyController\n', '\t{\n', '\t\tuint amount = _withdraw(_amount);\n', '\t\taddress _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, amount);\n', '\t}\n', '\n', '\n', '    function _withdraw(uint _amount) internal returns(uint) {\n', '\t\tuint amount = IERC20(want).balanceOf(address(this));\n', '\t\tif (amount < _amount) {\n', '            amount = _amount.sub(amount);\n', '            (uint256 exitFee, uint256 burnedCredit) = PoolTogether(prizePool).calculateEarlyExitFee(address(this),PcUNI,amount);\n', '\t\t\tPoolTogether(prizePool).withdrawInstantlyFrom(address(this),amount,PcUNI,exitFee.mul(1003).div(1000));\n', '\t\t\tamount = IERC20(want).balanceOf(address(this));\n', '            if (amount < _amount){\n', '                return amount;\n', '            }\n', '        }\n', '\t\treturn _amount;\n', '    }\n', '\n', '\tfunction withdrawAll() external onlyController returns (uint balance){\n', '\t\tbalance = _withdraw(balanceOf());\n', '\n', '\t\taddress _vault = Controller(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault");\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '\t}\n', '\n', '    function balanceOfwant() public view returns (uint256) {\n', '\t\treturn IERC20(want).balanceOf(address(this));\n', '\t}\n', '\n', '\tfunction balanceOfPcUNI() public view returns (uint256) {\n', '\t\treturn IERC20(PcUNI).balanceOf(address(this));\n', '\t}\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfwant().add(balanceOfPcUNI());\n', '    }\n', '\n', '    function getPOOLToken()public view returns(uint256) {\n', '        return IERC20(claimToken).balanceOf(address(this));\n', '    }\n', '\n', '    function harvest() public\n', '    {\n', '        RewardTogether(claimPool).claim(address(this));\n', '        redelivery();\n', '    }\n', '\n', '    function redelivery() internal {\n', '        uint256 reward = IERC20(claimToken).balanceOf(address(this));\n', '        if(reward > redeliverynum){\n', '            uint256 _2token = reward.mul(80).div(100); //80%\n', '\t\t    uint256 _2bt = reward.sub(_2token);  //20%\n', '\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2token, 0, swap2TokenRouting, address(this), now.add(1800));\n', '\t\t    UniswapRouter(unirouter).swapExactTokensForTokens(_2bt, 0, swap2BTRouting, Controller(controller).rewards(), now.add(1800));\n', '        }\n', '        deposit();\n', '    }\n', '\n', '    function setredeliverynum(uint256 value) public {\n', '        require(msg.sender == governance, "!governance");\n', '        redeliverynum = value;\n', '    }\n', '\n', '    function setGovernance(address _governance) public {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}']