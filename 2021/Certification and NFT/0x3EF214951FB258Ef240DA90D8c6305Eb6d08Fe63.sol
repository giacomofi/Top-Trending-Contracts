['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "./ERC20Mintable.sol";\n', '\n', 'import "./ISetToken.sol";\n', 'import "./IBasicIssuanceModule.sol";\n', 'import "./IUniswapV2.sol";\n', '\n', 'import "./ERC20.sol";\n', 'import "./SafeERC20.sol";\n', 'import "./SafeMath.sol";\n', '\n', 'import "./Logic.sol";\n', '\n', 'contract Migrator {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public constant dpi = IERC20(0x1494CA1F11D487c2bBe4543E90080AeBa4BA3C2b);\n', '    IERC20 public constant weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    IUniswapV2Pair public constant univ2_dpi = IUniswapV2Pair(0x4d5ef58aAc27d99935E5b6B4A6778ff292059991);\n', '\n', '    IBasicIssuanceModule public constant dpi_issuer = IBasicIssuanceModule(0xd8EF3cACe8b4907117a45B0b125c68560532F94D);\n', '\n', '    IUniswapV2Factory public constant uniswapFactory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '    IUniswapV2Factory public constant sushiswapFactory = IUniswapV2Factory(0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac);\n', '\n', '    IUniswapV2Router02 public constant sushiswapRouter = IUniswapV2Router02(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n', '    IUniswapV2Router02 public constant uniswapRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    address public governance;\n', '    address public masterchef;\n', '\n', '    // New bdpi token\n', '    Logic public bdpi;\n', '\n', '    /// @notice Migrates DPI token\n', '    /// @param  _masterchef  Address of the masterchef contract\n', '    /// @param  _bdpi Address of the basket dpi\n', '    constructor(\n', '        address _governance,\n', '        address _masterchef,\n', '        address _bdpi\n', '    ) {\n', '        masterchef = _masterchef;\n', '        governance = _governance;\n', '\n', '        bdpi = Logic(_bdpi);\n', '    }\n', '\n', '    modifier onlyMasterchef() {\n', '        require(msg.sender == masterchef, "!masterchef");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance, "!governance");\n', '        _;\n', '    }\n', '\n', '    /// @notice Rescues trapped ERC20 tokens\n', '    /// @param  _asset  Token to migrate\n', '    /// @param  _amount Amount to transfer\n', '    function rescueERC20(address _asset, uint256 _amount) external onlyGovernance {\n', '        IERC20(_asset).safeTransfer(msg.sender, _amount);\n', '    }\n', '\n', '    /// @notice Migrates DPI/LP token\n', '    /// @param  _token  Token to migrate\n', '    /// @return (address of the new token)\n', '    function migrate(address _token) external onlyMasterchef returns (address) {\n', '        if (_token == address(dpi)) {\n', '            return _migrateDPI();\n', '        }\n', '\n', '        if (_token == address(univ2_dpi)) {\n', '            return _migrateUNIV2DPI();\n', '        }\n', '\n', '        revert("!valid-token");\n', '    }\n', '\n', '    // **** Internal functions **** //\n', '\n', '    /// @notice Redeems DPI token from underlying and wraps them into bdpi\n', '    /// @param  _amount Amount of DPI to redeem\n', '    function _redeemDPIAndWrapIntoBDPI(uint256 _amount) internal {\n', '        // Redeem them from DPI Basic Issuance Module\n', '        dpi.approve(address(dpi_issuer), _amount);\n', '        dpi_issuer.redeem(address(dpi), _amount, address(this));\n', '\n', '        // Get all components\n', '        address[] memory dpi_components = ISetToken(address(dpi)).getComponents();\n', '        uint256[] memory amounts_in = new uint256[](dpi_components.length);\n', '\n', '        IERC20 currentComponent;\n', '        uint256 currentComponentBalance;\n', '\n', '        // Approve\n', '        for (uint256 i = 0; i < dpi_components.length; i++) {\n', '            currentComponent = IERC20(dpi_components[i]);\n', '            currentComponentBalance = currentComponent.balanceOf(address(this));\n', '\n', '            // Approve bdpi to take it\n', '            currentComponent.approve(address(bdpi), currentComponentBalance);\n', '\n', '            // Logs balance\n', '            amounts_in[i] = currentComponentBalance;\n', '        }\n', '\n', '        // Initial Mint\n', '        bdpi.mintExact(dpi_components, amounts_in, _amount);\n', '    }\n', '\n', '    /// @notice Migrates all DPI tokens from masterchef\n', '    function _migrateDPI() internal returns (address) {\n', '        // Balance of the token\n', '        uint256 bal = dpi.balanceOf(masterchef);\n', '\n', '        // Get tokens from master chef\n', '        dpi.safeTransferFrom(masterchef, address(this), bal);\n', '\n', '        // Unwrap underlying and convert dpi to bdpi\n', '        _redeemDPIAndWrapIntoBDPI(bal);\n', '\n', '        // Transfer to masterchef\n', '        bdpi.transfer(masterchef, bal);\n', '\n', '        return address(bdpi);\n', '    }\n', '\n', '    /// @notice Migrates all UNI-WETH lp tokens from uniswap to sushiswap\n', '    function _migrateUNIV2DPI() internal returns (address) {\n', '        // Original liquidity and tokens\n', '        uint256 lpBal = univ2_dpi.balanceOf(masterchef);\n', '\n', '        // Get tokens from master chef\n', '        IERC20(address(univ2_dpi)).safeTransferFrom(masterchef, address(this), lpBal);\n', '\n', '        // Remove liquidity from uniswap\n', '        univ2_dpi.approve(address(uniswapRouter), lpBal);\n', '        uniswapRouter.removeLiquidity(address(weth), address(dpi), lpBal, 0, 0, address(this), block.timestamp + 60);\n', '\n', '        // Get token balances\n', '        uint256 dpiBal = dpi.balanceOf(address(this));\n', '        uint256 wethBal = weth.balanceOf(address(this));\n', '\n', '        // Unwrap underlying and convert dpi to bdpi\n', '        _redeemDPIAndWrapIntoBDPI(dpiBal);\n', '\n', '        // Resupply LP to sushiswap\n', '        bdpi.approve(address(sushiswapRouter), dpiBal);\n', '        weth.approve(address(sushiswapRouter), wethBal);\n', '\n', '        if (sushiswapFactory.getPair(address(bdpi), address(weth)) == address(0)) {\n', '            sushiswapFactory.createPair(address(bdpi), address(weth));\n', '        }\n', '\n', '        // New sushiswap LP token address\n', '        address sushi_bdpi = sushiswapFactory.getPair(address(bdpi), address(weth));\n', '\n', '        sushiswapRouter.addLiquidity(\n', '            address(bdpi),\n', '            address(weth),\n', '            dpiBal,\n', '            wethBal,\n', '            dpiBal,\n', '            wethBal,\n', '            address(this),\n', '            block.timestamp + 60\n', '        );\n', '\n', '        // Transfer to masterchef\n', '        IERC20(sushi_bdpi).transfer(masterchef, lpBal);\n', '\n', '        // Return address\n', '        return sushi_bdpi;\n', '    }\n', '}']