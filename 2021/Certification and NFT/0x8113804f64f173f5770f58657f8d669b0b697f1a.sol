['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-29\n', '*/\n', '\n', '//Use compiler 0.5.11\n', '\n', '/*Automatic OTC contract that sends users tokens when they deposit ETH*/\n', 'pragma solidity >=0.4.22 <0.8.0;\n', '\n', 'contract Context {\n', '    constructor () internal {}\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function approve(address spender, uint amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    function TokensPurchased(address buyer, uint256 amount) external  returns (bool success);\n', '    function burn(uint256 _value) external returns (bool success);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract OTCcontract is Context {\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    address public governance;\n', '    \n', '    uint256 public rate;\n', '    uint256 private _weiRaised;\n', '    uint256 public totalSold;\n', '    IERC20 public tokenAddress;\n', '    \n', '    uint256 public minimumBuyAmount = 0.01 ether; \t//min buy is 0.01 ETH\n', '    uint256 public maximumBuyAmount = 500 ether;  //max buy is 500 ETH\n', '\n', '    address payable public walletAddress;\n', '    event TokensPurchased(address indexed to, uint256 amount);\n', '    \n', '    constructor () public {\n', '        governance = tx.origin;\n', '        rate = uint256(357);\t\t\t\t\t\t\t\t\t                    //this rate means the initial rate is 1 ETH = 180 Utrin Tokens\n', '        walletAddress = 0x22bAF3bF140928201962dD1a01A63EE158BcC616; \n', '        tokenAddress = IERC20(0x99f2B69ee2468C834A634FF50d930aE64e3e500f); \t\t\t//Contract Addres of ERC20 Token NOTE FORMAT\n', '\n', '    }\n', '    \n', '    function ()external payable {\n', '        buy();\n', '    }\n', '    \n', '    function changeWallet (address payable _walletAddress) public {\n', '        require(msg.sender == governance, "!governance");\n', '        walletAddress = _walletAddress;\n', '    }\n', '    \n', '    function setToken(IERC20 _tokenAddress) public {\n', '        require(msg.sender == governance, "!governance");\n', '        tokenAddress = _tokenAddress;\n', '    }\n', '    \n', '    function setRate(uint256 _rate) public {\n', '        require(msg.sender == governance, "!governance");\n', '        rate = _rate;\n', '    }\n', '    \n', '    function getRate() external view returns (uint256) {\n', '        return rate;\n', '    }\n', '    \n', '    function buy() public payable {\n', '        uint256 weiValue = msg.value;\n', '        require((weiValue >= minimumBuyAmount) &&(weiValue<= maximumBuyAmount), "Minimum amount is 0.01 eth and Maximum amount is 500 Eth");\n', '        uint256 amount = weiValue.mul(rate);\n', '        _weiRaised = _weiRaised.add(weiValue);\n', '        IERC20 token = IERC20(tokenAddress);\n', '        token.safeTransfer(msg.sender, amount);\n', '        walletAddress.transfer(weiValue);\n', '        totalSold += amount;\n', '        emit TokensPurchased(msg.sender, amount);\n', '    }\n', '    \n', '    function sendBackTokens() public {\n', '        require(msg.sender == governance, "!governance");\n', '        IERC20 token = IERC20(tokenAddress);\n', '        uint256 amount = token.balanceOf(address(this));\n', '        token.safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '    \n', '}']