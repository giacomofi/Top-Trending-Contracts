['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface ITokenGeyserManager {\n', '    /**\n', '        @dev Retrieves total rewards earned for a specific staking token\n', '        @param token - address of the ERC20 token\n', '    */\n', '    function getEarned(address token) external view returns (uint256);\n', '\n', '    /**\n', '        @dev Retrieves staked amount for a specific token address\n', '        @param token - address of the ERC20 token\n', '    */\n', '    function getStake(address token) external view returns (uint256);\n', '\n', '    /**\n', '        @dev Retrieves total rewards earned for all the staking tokens\n', '    */\n', '    function getEarnings()\n', '        external\n', '        view\n', '        returns (address[] memory, uint256[] memory);\n', '\n', '    /**\n', '        @dev Retrieves all stakes for sender\n', '     */\n', '    function getStakes()\n', '        external\n', '        view\n', '        returns (address[] memory, uint256[] memory);\n', '\n', '    /**\n', '        @dev Stakes all tokens sent\n', "        @param tokens - array of tokens' addresses you want to stake\n", '        @param amounts - stake amount you want for each token\n', '     */\n', '    function stake(\n', '        address[] calldata tokens,\n', '        uint256[] calldata amounts,\n', '        int256 nftId\n', '    ) external returns (bool);\n', '\n', '    /**\n', '        @dev Unstakes all tokens sent\n', "        @param tokens - array of tokens' addresses you want to unstake\n", '        @param amounts - unstake amount you want for each token\n', '     */\n', '    function unstake(address[] calldata tokens, uint256[] calldata amounts)\n', '        external;\n', '\n', '    /**\n', "        @dev Retrives current user's rewards amount\n", "        @param tokens - array of tokens' addresses you want to unstake\n", '        @param amounts - unstake amount you want for each token\n', '     */\n', '    function unstakeQuery(\n', '        address[] calldata tokens,\n', '        uint256[] calldata amounts\n', '    ) external returns (address[] memory, uint256[] memory);\n', '\n', '    /**\n', '        @dev Adds a new geyser in the team\n', '        @param token - address of the staking token for which the geyser was created\n', '        @param geyser - address of the geyser\n', '     */\n', '    function addGeyser(address token, address geyser) external returns (bool);\n', '\n', '    event Staked(address indexed sender, address indexed token, uint256 amount);\n', '    event Unstaked(\n', '        address indexed sender,\n', '        address indexed token,\n', '        uint256 amount\n', '    );\n', '\n', '    event GeyserAdded(\n', '        address indexed sender,\n', '        address indexed geyser,\n', '        address token\n', '    );\n', '    event GeyserManagerCreated(\n', '        address indexed sender,\n', '        address indexed geyserManager\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IStaking {\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '\n', '    function unstake(address staker, uint256 amount, bytes calldata data) external;\n', '\n', '    function totalStakedFor(address addr) external view returns (uint256);\n', '\n', '    function totalStaked() external view returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function supportsHistory() external pure returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IStakeWithNFT {\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        int256 nftId\n', '    ) external;\n', '\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        int256 nftId\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '    bool private _isTokenRescuable;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '        _isTokenRescuable = false;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function setRescuable(bool rescuable) public onlyOwner {\n', '        _isTokenRescuable = rescuable;\n', '    }\n', '\n', '    function transfer(address to, uint256 value)\n', '        external\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        return token.transfer(to, value);\n', '    }\n', '\n', '    function rescueFunds(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) external onlyOwner returns (bool) {\n', '        if (!_isTokenRescuable) {\n', '            require(\n', '                address(token) != tokenToRescue,\n', '                "TokenPool: Cannot claim token held by the contract"\n', '            );\n', '        }\n', '\n', '        return IERC20(tokenToRescue).transfer(to, amount);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Enumerable is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the total amount of tokens stored by the contract.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n', "     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n", '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    /**\n', '     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n', '     * Use along with {totalSupply} to enumerate all tokens.\n', '     */\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Library for managing an enumerable variant of Solidity's\n", ' * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n', ' * type.\n', ' *\n', ' * Maps have the following properties:\n', ' *\n', ' * - Entries are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableMap for EnumerableMap.UintToAddressMap;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableMap.UintToAddressMap private myMap;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.0.0, only maps of type `uint256 -> address` (`UintToAddressMap`) are\n', ' * supported.\n', ' */\n', 'library EnumerableMap {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Map type with\n', '    // bytes32 keys and values.\n', '    // The Map implementation uses private functions, and user-facing\n', '    // implementations (such as Uint256ToAddressMap) are just wrappers around\n', '    // the underlying Map.\n', '    // This means that we can only create new EnumerableMaps for types that fit\n', '    // in bytes32.\n', '\n', '    struct MapEntry {\n', '        bytes32 _key;\n', '        bytes32 _value;\n', '    }\n', '\n', '    struct Map {\n', '        // Storage of map keys and values\n', '        MapEntry[] _entries;\n', '\n', '        // Position of the entry defined by a key in the `entries` array, plus 1\n', '        // because index 0 means a key is not in the map.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function _set(Map storage map, bytes32 key, bytes32 value) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex == 0) { // Equivalent to !contains(map, key)\n', '            map._entries.push(MapEntry({ _key: key, _value: value }));\n', '            // The entry is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            map._indexes[key] = map._entries.length;\n', '            return true;\n', '        } else {\n', '            map._entries[keyIndex - 1]._value = value;\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a key-value pair from a map. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function _remove(Map storage map, bytes32 key) private returns (bool) {\n', "        // We read and store the key's index to prevent multiple reads from the same storage slot\n", '        uint256 keyIndex = map._indexes[key];\n', '\n', '        if (keyIndex != 0) { // Equivalent to contains(map, key)\n', '            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\n', "            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = keyIndex - 1;\n', '            uint256 lastIndex = map._entries.length - 1;\n', '\n', '            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            MapEntry storage lastEntry = map._entries[lastIndex];\n', '\n', '            // Move the last entry to the index where the entry to delete is\n', '            map._entries[toDeleteIndex] = lastEntry;\n', '            // Update the index for the moved entry\n', '            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved entry was stored\n', '            map._entries.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete map._indexes[key];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n', '        return map._indexes[key] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of key-value pairs in the map. O(1).\n', '     */\n', '    function _length(Map storage map) private view returns (uint256) {\n', '        return map._entries.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of entries inside the\n', '    * array, and it may change when more entries are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n', '        require(map._entries.length > index, "EnumerableMap: index out of bounds");\n', '\n', '        MapEntry storage entry = map._entries[index];\n', '        return (entry._key, entry._value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n', '        return _get(map, key, "EnumerableMap: nonexistent key");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function _get(Map storage map, bytes32 key, string memory errorMessage) private view returns (bytes32) {\n', '        uint256 keyIndex = map._indexes[key];\n', '        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\n', '        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\n', '    }\n', '\n', '    // UintToAddressMap\n', '\n', '    struct UintToAddressMap {\n', '        Map _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds a key-value pair to a map, or updates the value for an existing\n', '     * key. O(1).\n', '     *\n', '     * Returns true if the key was added to the map, that is if it was not\n', '     * already present.\n', '     */\n', '    function set(UintToAddressMap storage map, uint256 key, address value) internal returns (bool) {\n', '        return _set(map._inner, bytes32(key), bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the key was removed from the map, that is if it was present.\n', '     */\n', '    function remove(UintToAddressMap storage map, uint256 key) internal returns (bool) {\n', '        return _remove(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the key is in the map. O(1).\n', '     */\n', '    function contains(UintToAddressMap storage map, uint256 key) internal view returns (bool) {\n', '        return _contains(map._inner, bytes32(key));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of elements in the map. O(1).\n', '     */\n', '    function length(UintToAddressMap storage map) internal view returns (uint256) {\n', '        return _length(map._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the element stored at position `index` in the set. O(1).\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintToAddressMap storage map, uint256 index) internal view returns (uint256, address) {\n', '        (bytes32 key, bytes32 value) = _at(map._inner, index);\n', '        return (uint256(key), address(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value associated with `key`.  O(1).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `key` must be in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key))));\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n', '     */\n', '    function get(UintToAddressMap storage map, uint256 key, string memory errorMessage) internal view returns (address) {\n', '        return address(uint256(_get(map._inner, bytes32(key), errorMessage)));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        uint256 index = digits - 1;\n', '        temp = value;\n', '        while (temp != 0) {\n', '            buffer[index--] = byte(uint8(48 + temp % 10));\n', '            temp /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title ERC721 Non-Fungible Token Standard basic implementation\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Enumerable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '    using Strings for uint256;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from holder address to their (enumerable) set of owned tokens\n', '    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n', '\n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _tokenOwners;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Optional mapping for token URIs\n', '    mapping (uint256 => string) private _tokenURIs;\n', '\n', '    // Base URI\n', '    string private _baseURI;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _holderTokens[owner].length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view override returns (address) {\n', '        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    function tokenURI(uint256 tokenId) public view override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        string memory _tokenURI = _tokenURIs[tokenId];\n', '\n', '        // If there is no base URI, return the token URI.\n', '        if (bytes(_baseURI).length == 0) {\n', '            return _tokenURI;\n', '        }\n', '        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\n', '        if (bytes(_tokenURI).length > 0) {\n', '            return string(abi.encodePacked(_baseURI, _tokenURI));\n', '        }\n', '        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\n', '        return string(abi.encodePacked(_baseURI, tokenId.toString()));\n', '    }\n', '\n', '    /**\n', '    * @dev Returns the base URI set via {_setBaseURI}. This will be\n', "    * automatically added as a prefix in {tokenURI} to each token's URI, or\n", '    * to the token ID if no specific URI is set for that token ID.\n', '    */\n', '    function baseURI() public view returns (string memory) {\n', '        return _baseURI;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _holderTokens[owner].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n', '        return _tokenOwners.length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view override returns (uint256) {\n', '        (uint256 tokenId, ) = _tokenOwners.at(index);\n', '        return tokenId;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _tokenOwners.contains(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     d*\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '            delete _tokenURIs[tokenId];\n', '        }\n', '\n', '        _holderTokens[owner].remove(tokenId);\n', '\n', '        _tokenOwners.remove(tokenId);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[from].remove(tokenId);\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = _tokenURI;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the base URI for all token IDs. It is\n', '     * automatically added as a prefix to the value returned in {tokenURI},\n', '     * or to the token ID if {tokenURI} is empty.\n', '     */\n', '    function _setBaseURI(string memory baseURI_) internal virtual {\n', '        _baseURI = baseURI_;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ), "ERC721: transfer to non ERC721Receiver implementer");\n', '        bytes4 retval = abi.decode(returndata, (bytes4));\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _approve(address to, uint256 tokenId) private {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev ERC721 token with pausable token transfers, minting and burning.\n', ' *\n', ' * Useful for scenarios such as preventing trades until the end of an evaluation\n', ' * period, or having an emergency switch for freezing all token transfers in the\n', ' * event of a large bug.\n', ' */\n', 'abstract contract ERC721Pausable is ERC721, Pausable {\n', '    /**\n', '     * @dev See {ERC721-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the contract must not be paused.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, tokenId);\n', '\n', '        require(!paused(), "ERC721Pausable: token transfer while paused");\n', '    }\n', '}\n', '\n', '/*\n', '    uint256 public constant socialNftIdentifier = uint256(1);\n', '    uint256 public constant rareNftIdentifier = uint256(2);\n', '    uint256 public constant epicNftIdentifier = uint256(4);\n', '    uint256 public constant legendaryNftIdentifier = uint256(8);\n', '*/\n', 'contract WarpNFT is Ownable, ERC721Pausable {\n', '    uint256 public idTracker;\n', '\n', '    // converts id -> token type\n', '    mapping(uint256 => uint256) public tokenType;\n', '\n', '    /**\n', '    @notice the constructor function is fired only once during contract deployment\n', '    @dev assuming all NFT URI metadata is based on a URL he baseURI would be something like https://\n', '    **/\n', '    constructor() public ERC721("Warp Finance", "WNFT") {\n', '        idTracker = 0;\n', '    }\n', '\n', '    /**\n', '    @notice mintNewNFT allows the owner of this contract to mint an input address a newNFT\n', '    @param _to is the address the NFT is being minted to\n', '    **/\n', '    function mintNewNFT(\n', '        address _to,\n', '        uint256 _type,\n', '        string memory _tokenURI\n', '    ) public onlyOwner {\n', '        _safeMint(_to, idTracker);\n', '        _setTokenURI(idTracker, _tokenURI);\n', '        tokenType[idTracker] = _type;\n', '        idTracker++;\n', '    }\n', '\n', '    function burn(uint256 tokenId) public onlyOwner {\n', '        _burn(tokenId);\n', '    }\n', '\n', '    function setTokenURI(uint256 tokenId, string memory _tokenURI)\n', '        public\n', '        onlyOwner\n', '    {\n', '        _setTokenURI(tokenId, _tokenURI);\n', '    }\n', '\n', '    function setBaseURI(string memory baseURI_) public onlyOwner {\n', '        _setBaseURI(baseURI_);\n', '    }\n', '\n', '    function pause() public onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() public onlyOwner {\n', '        _unpause();\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Token Geyser\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n', ' *      Compound and Uniswap.\n', ' *\n', ' *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\n', ' *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\n', ' *      claimed by users.\n', ' *\n', ' *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\n', ' *      is a function of the number of tokens deposited as well as the length of time deposited.\n', ' *      Specifically, a user\'s share of the currently-unlocked pool equals their "deposit-seconds"\n', ' *      divided by the global "deposit-seconds". This aligns the new token distribution with long\n', ' *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\n', ' *\n', ' *      More background and motivation available at:\n', ' *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n', ' */\n', 'contract TokenGeyser is IStaking, IStakeWithNFT, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n', '    // amount: Unlocked tokens, total: Total locked tokens\n', '    event TokensUnlocked(uint256 amount, uint256 total);\n', '\n', '    TokenPool private _stakingPool;\n', '    TokenPool private _unlockedPool;\n', '    TokenPool private _lockedPool;\n', '\n', '    //\n', '    // Time-bonus params\n', '    //\n', '    uint256 public bonusDecimals = 2;\n', '    uint256 public startBonus = 0;\n', '    uint256 public bonusPeriodSec = 0;\n', '\n', '    //\n', '    // Global accounting state\n', '    //\n', '    uint256 public totalLockedShares = 0;\n', '    uint256 public totalStakingShares = 0;\n', '    uint256 private _totalStakingShareSeconds = 0;\n', '    uint256 private _lastAccountingTimestampSec = now;\n', '    uint256 private _maxUnlockSchedules = 0;\n', '    uint256 private _initialSharesPerToken = 0;\n', '\n', '    //\n', '    // User accounting state\n', '    //\n', '    // Represents a single stake for a user. A user may have multiple.\n', '    struct Stake {\n', '        uint256 stakingShares;\n', '        uint256 timestampSec;\n', '    }\n', '\n', '    // Caches aggregated values from the User->Stake[] map to save computation.\n', "    // If lastAccountingTimestampSec is 0, there's no entry for that user.\n", '    struct UserTotals {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastAccountingTimestampSec;\n', '    }\n', '\n', '    // Aggregated staking values per user\n', '    mapping(address => UserTotals) private _userTotals;\n', '\n', '    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\n', '    mapping(address => Stake[]) private _userStakes;\n', '\n', '\n', '    //\n', '    // Locked/Unlocked Accounting state\n', '    //\n', '    struct UnlockSchedule {\n', '        uint256 initialLockedShares;\n', '        uint256 unlockedShares;\n', '        uint256 lastUnlockTimestampSec;\n', '        uint256 endAtSec;\n', '        uint256 durationSec;\n', '    }\n', '\n', '    UnlockSchedule[] public unlockSchedules;\n', '\n', '    WarpNFT public _warpNFT;\n', '    address public geyserManager;\n', '    mapping(address => uint256) public originalAmounts;\n', '    mapping(address => uint256) public extraAmounts;\n', '    uint256 public totalExtra;\n', '    mapping(address => uint256) userEarnings;\n', '\n', '    /**\n', '     * @param stakingToken The token users deposit as stake.\n', '     * @param distributionToken The token users receive as they unstake.\n', '     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n', '     * @param startBonus_ Starting time bonus\n', '     *                    e.g. 25% means user gets 25% of max distribution tokens.\n', '     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '     * @param bonusDecimals_ The number of decimals for shares\n', '     */\n', '    constructor(\n', '        IERC20 stakingToken,\n', '        IERC20 distributionToken,\n', '        uint256 maxUnlockSchedules,\n', '        uint256 startBonus_,\n', '        uint256 bonusPeriodSec_,\n', '        uint256 initialSharesPerToken,\n', '        uint256 bonusDecimals_,\n', '        address warpNFT,\n', '        address managerAddress\n', '    ) public {\n', '        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n', '        require(\n', '            startBonus_ <= 10**bonusDecimals_,\n', '            "TokenGeyser: start bonus too high"\n', '        );\n', '        // If no period is desired, instead set startBonus = 100%\n', '        // and bonusPeriod to a small value like 1sec.\n', '        require(bonusPeriodSec_ != 0, "TokenGeyser: bonus period is zero");\n', '        require(\n', '            initialSharesPerToken > 0,\n', '            "TokenGeyser: initialSharesPerToken is zero"\n', '        );\n', '\n', '        require(bonusDecimals_ > 0, "TokenGeyser: bonusDecimals_ is zero");\n', '\n', '        _stakingPool = new TokenPool(stakingToken);\n', '        _unlockedPool = new TokenPool(distributionToken);\n', '        _lockedPool = new TokenPool(distributionToken);\n', '        _unlockedPool.setRescuable(true);\n', '\n', '        geyserManager = managerAddress;\n', '        startBonus = startBonus_;\n', '        bonusDecimals = bonusDecimals_;\n', '        bonusPeriodSec = bonusPeriodSec_;\n', '        _maxUnlockSchedules = maxUnlockSchedules;\n', '        _initialSharesPerToken = initialSharesPerToken;\n', '        _warpNFT = WarpNFT(warpNFT);\n', '    }\n', '\n', '    /**\n', '     * @return Total earnings for a user\n', '    */\n', '    function getEarnings(address user) public view returns (uint256) {\n', '        return userEarnings[user];\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue rewards\n', '     */\n', '    function rescueRewards(address user) external onlyOwner {\n', '        require(totalUnlocked() > 0, "TokenGeyser: Nothing to rescue");\n', '        require(\n', '            _unlockedPool.transfer(user, _unlockedPool.balance()),\n', '            "TokenGeyser: rescue rewards from rewards pool failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _stakingPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return The token users receive as they unstake.\n', '     */\n', '    function getDistributionToken() public view returns (IERC20) {\n', '        assert(_unlockedPool.token() == _lockedPool.token());\n', '        return _unlockedPool.token();\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the user.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        int256 nftId\n', '    ) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, staker, amount, nftId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n', '     * @param user User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data,\n', '        int256 nftId\n', '    ) external override onlyOwner {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, user, amount, nftId);\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieves the boost you get for a specific NFT\n', '     * @param beneficiary The address who receives the bonus\n', '     * @param amount The amount for which the bonus is calculated\n', '     * @param nftId The NFT identifier\n', '     */\n', '    function getNftBoost(\n', '        address beneficiary,\n', '        uint256 amount,\n', '        int256 nftId\n', '    ) public view returns (uint256) {\n', '        if (nftId < 0) return 0;\n', '        if (_warpNFT.ownerOf(uint256(nftId)) != beneficiary) return 0;\n', '\n', '        uint256 nftType = _warpNFT.tokenType(uint256(nftId));\n', '        if (nftType == uint256(1)) return 0;\n', '\n', '        // 1 | Social - no boost\n', '        // 2 | Rare - 15% boost\n', '        // 4 | Epic - 75% boost\n', '        // 8 | Legendary - 150% boost\n', '\n', '        uint256 bonus = 1;\n', '\n', '        if (nftType == uint256(2)) {\n', '            bonus = 15;\n', '        }\n', '        if (nftType == uint256(4)) {\n', '            bonus = 75;\n', '        }\n', '        if (nftType == uint256(8)) {\n', '            bonus = 150;\n', '        }\n', '\n', '        uint256 result = (amount * bonus) / 100;\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Private implementation of staking methods.\n', '     * @param staker User address who deposits tokens to stake.\n', '     * @param beneficiary User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     */\n', '    function _stakeFor(\n', '        address staker,\n', '        address beneficiary,\n', '        uint256 amount,\n', '        int256 nftId\n', '    ) private {\n', '        require(amount > 0, "TokenGeyser: stake amount is zero");\n', '        require(\n', '            beneficiary != address(0),\n', '            "TokenGeyser: beneficiary is zero address"\n', '        );\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do"\n', '        );\n', '        uint256 sentAmount = 0;\n', '        sentAmount += amount;\n', '\n', '        uint256 extra = getNftBoost(beneficiary, amount, nftId);\n', '        originalAmounts[beneficiary] += amount;\n', '        extraAmounts[beneficiary] += extra;\n', '        amount += extra;\n', '        uint256 mintedStakingShares =\n', '            (totalStakingShares > 0)\n', '                ? totalStakingShares.mul(amount).div(totalStaked())\n', '                : amount.mul(_initialSharesPerToken);\n', '        totalExtra += extra;\n', '\n', '        require(\n', '            mintedStakingShares > 0,\n', '            "TokenGeyser: Stake amount is too small"\n', '        );\n', '\n', '        updateAccounting(beneficiary);\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[beneficiary];\n', '        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        Stake memory newStake = Stake(mintedStakingShares, now);\n', '        _userStakes[beneficiary].push(newStake);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '        // Already set in updateAccounting()\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.token().transferFrom(\n', '                staker,\n', '                address(_stakingPool),\n', '                sentAmount\n', '            ),\n', '            "TokenGeyser: transfer into staking pool failed"\n', '        );\n', '\n', '        emit Staked(beneficiary, sentAmount, totalStakedFor(beneficiary), "");\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @param data Not used.\n', '     */\n', '    function unstake(address staker, uint256 amount, bytes calldata data) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens that would be rewarded.\n', '     */\n', '    function unstakeQuery(address staker, uint256 amount) public returns (uint256) {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        return _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens rewarded.\n', '     */\n', '    function _unstake(address user, uint256 amount) private returns (uint256) {\n', '        updateAccounting(user);\n', '\n', '        // checks\n', '        require(amount == 0, "TokenGeyser: only full unstake is allowed");\n', '\n', '        amount = originalAmounts[user] + extraAmounts[user];\n', '        uint256 stakingSharesToBurn =\n', '            totalStakingShares.mul(amount).div(totalStaked());\n', '\n', '        require(\n', '            stakingSharesToBurn > 0,\n', '            "TokenGeyser: Unable to unstake amount this small"\n', '        );\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        Stake[] storage accountStakes = _userStakes[user];\n', '\n', '        // Redeem from most recent stake and go backwards in time.\n', '        uint256 stakingShareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 rewardAmount = 0;\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n', '            uint256 newStakingShareSecondsToBurn = 0;\n', '\n', '            if (lastStake.stakingShares <= sharesLeftToBurn) {\n', '                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(\n', '                    lastStake.stakingShares\n', '                );\n', '                accountStakes.pop();\n', '            } else {\n', '                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                lastStake.stakingShares = lastStake.stakingShares.sub(\n', '                    sharesLeftToBurn\n', '                );\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // totals.lastAccountingTimestampSec = now;\n', '\n', '        // 2. Global Accounting\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.transfer(user, originalAmounts[user]),\n', '            "TokenGeyser: transfer out of staking pool failed"\n', '        );\n', '\n', '        //in case rescueRewards was called, there are no rewards to be transfered\n', '        if (totalUnlocked() >= rewardAmount) {\n', '            require(\n', '                _unlockedPool.transfer(user, rewardAmount),\n', '                "TokenGeyser: transfer out of unlocked pool failed"\n', '            );\n', '            emit TokensClaimed(user, rewardAmount);\n', '\n', '            userEarnings[user] += rewardAmount;\n', '        }\n', '        \n', '\n', '        emit Unstaked(user, amount, totalStakedFor(user), "");\n', '\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do"\n', '        );\n', '\n', '        totalExtra -= extraAmounts[user];\n', '        originalAmounts[user] = 0;\n', '        extraAmounts[user] = 0;\n', '\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\n', '     *      encourage long-term deposits instead of constant unstake/restakes.\n', '     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\n', '     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n', '     * @param currentRewardTokens The current number of distribution tokens already alotted for this\n', '     *                            unstake op. Any bonuses are already applied.\n', '     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\n', '     *                            distribution tokens.\n', '     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\n', '     *                     the time-bonus.\n', '     * @return Updated amount of distribution tokens to award, with any bonus included on the\n', '     *         newly added tokens.\n', '     */\n', '    function computeNewReward(\n', '        uint256 currentRewardTokens,\n', '        uint256 stakingShareSeconds,\n', '        uint256 stakeTimeSec\n', '    ) private view returns (uint256) {\n', '        uint256 newRewardTokens =\n', '            totalUnlocked().mul(stakingShareSeconds).div(\n', '                _totalStakingShareSeconds\n', '            );\n', '\n', '        if (stakeTimeSec >= bonusPeriodSec) {\n', '            return currentRewardTokens.add(newRewardTokens);\n', '        }\n', '\n', '        uint256 oneHundredPct = 10**bonusDecimals;\n', '        uint256 bonusedReward =\n', '            startBonus\n', '                .add(\n', '                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\n', '                    bonusPeriodSec\n', '                )\n', '            )\n', '                .mul(newRewardTokens)\n', '                .div(oneHundredPct);\n', '\n', '        return currentRewardTokens.add(bonusedReward);\n', '    }\n', '\n', '\n', '    /**\n', '     * @param addr The user to look up staking information for.\n', '     * @return The number of staking tokens deposited for addr.\n', '     */\n', '    function totalStakedFor(address addr)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        uint256 amountWithExtra =\n', '            totalStakingShares > 0\n', '                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\n', '                    totalStakingShares\n', '                )\n', '                : 0;\n', '\n', '        if (amountWithExtra == 0) return amountWithExtra;\n', '        return amountWithExtra - extraAmounts[addr];\n', '    }\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() public view override returns (uint256) {\n', '        return _stakingPool.balance() + totalExtra;\n', '    }\n', '\n', '    /**\n', '     * @dev Note that this application has a staking token as well as a distribution token, which\n', '     * may be different. This function is required by EIP-900.\n', '     * @return The deposit token used for staking.\n', '     */\n', '    function token() external view override returns (address) {\n', '        return address(getStakingToken());\n', '    }\n', '\n', '    /**\n', '     * @dev A globally callable function to update the accounting state of the system.\n', '     *      Global state and state for the caller are updated.\n', '     * @return [0] balance of the locked pool\n', '     * @return [1] balance of the unlocked pool\n', "     * @return [2] caller's staking share seconds\n", '     * @return [3] global staking share seconds\n', '     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\n', '     * @return [5] block timestamp\n', '     */\n', '    function updateAccounting(address user)\n', '        public\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        _unlockTokens();\n', '\n', '        // Global accounting\n', '        uint256 newStakingShareSeconds =\n', '            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\n', '            newStakingShareSeconds\n', '        );\n', '        _lastAccountingTimestampSec = now;\n', '\n', '        // User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        uint256 newUserStakingShareSeconds =\n', '            now.sub(totals.lastAccountingTimestampSec).mul(\n', '                totals.stakingShares\n', '            );\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\n', '            newUserStakingShareSeconds\n', '        );\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        uint256 totalUserRewards =\n', '            (_totalStakingShareSeconds > 0)\n', '                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\n', '                    _totalStakingShareSeconds\n', '                )\n', '                : 0;\n', '\n', '        return (\n', '            totalLocked(),\n', '            totalUnlocked(),\n', '            totals.stakingShareSeconds,\n', '            _totalStakingShareSeconds,\n', '            totalUserRewards,\n', '            now\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Total number of locked distribution tokens.\n', '     */\n', '    function totalLocked() public view returns (uint256) {\n', '        return _lockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Total number of unlocked distribution tokens.\n', '     */\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Number of unlock schedules.\n', '     */\n', '    function unlockScheduleCount() public view returns (uint256) {\n', '        return unlockSchedules.length;\n', '    }\n', '\n', '    /**\n', '     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\n', '     *      with the associated "unlock schedule". These locked tokens immediately begin unlocking\n', '     *      linearly over the duraction of durationSec timeframe.\n', '     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n', '     * @param durationSec Length of time to linear unlock the tokens.\n', '     */\n', '    function lockTokens(uint256 amount, uint256 durationSec)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            unlockSchedules.length < _maxUnlockSchedules,\n', '            "TokenGeyser: reached maximum unlock schedules"\n', '        );\n', '\n', '        // Update lockedTokens amount before using it in computations after.\n', '        updateAccounting(msg.sender);\n', '\n', '        uint256 lockedTokens = totalLocked();\n', '        uint256 mintedLockedShares =\n', '            (lockedTokens > 0)\n', '                ? totalLockedShares.mul(amount).div(lockedTokens)\n', '                : amount.mul(_initialSharesPerToken);\n', '\n', '        UnlockSchedule memory schedule;\n', '        schedule.initialLockedShares = mintedLockedShares;\n', '        schedule.lastUnlockTimestampSec = now;\n', '        schedule.endAtSec = now.add(durationSec);\n', '        schedule.durationSec = durationSec;\n', '        unlockSchedules.push(schedule);\n', '\n', '        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '        require(\n', '            _lockedPool.token().transferFrom(\n', '                msg.sender,\n', '                address(_lockedPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into locked pool failed"\n', '        );\n', '        emit TokensLocked(amount, durationSec, totalLocked());\n', '    }\n', '\n', '    /**\n', '     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\n', '     *      previously defined unlock schedules. Publicly callable.\n', '     * @return Number of newly unlocked distribution tokens.\n', '     */\n', '    function unlockTokens() public onlyOwner returns (uint256) {\n', '        _unlockTokens();\n', '    }\n', '\n', '    function _unlockTokens() private returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        uint256 lockedTokens = totalLocked();\n', '\n', '        if (totalLockedShares == 0) {\n', '            unlockedTokens = lockedTokens;\n', '        } else {\n', '            uint256 unlockedShares = 0;\n', '            for (uint256 s = 0; s < unlockSchedules.length; s++) {\n', '                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n', '            }\n', '            unlockedTokens = unlockedShares.mul(lockedTokens).div(\n', '                totalLockedShares\n', '            );\n', '            totalLockedShares = totalLockedShares.sub(unlockedShares);\n', '        }\n', '\n', '        if (unlockedTokens > 0) {\n', '            require(\n', '                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\n', '                "TokenGeyser: transfer out of locked pool failed"\n', '            );\n', '            emit TokensUnlocked(unlockedTokens, totalLocked());\n', '        }\n', '\n', '        return unlockedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of unlockable shares from a given schedule. The returned value\n', '     *      depends on the time since the last unlock. This function updates schedule accounting,\n', '     *      but does not actually transfer any tokens.\n', '     * @param s Index of the unlock schedule.\n', '     * @return The number of unlocked shares.\n', '     */\n', '    function unlockScheduleShares(uint256 s) private returns (uint256) {\n', '        UnlockSchedule storage schedule = unlockSchedules[s];\n', '\n', '        if (schedule.unlockedShares >= schedule.initialLockedShares) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 sharesToUnlock = 0;\n', '        // Special case to handle any leftover dust from integer division\n', '        if (now >= schedule.endAtSec) {\n', '            sharesToUnlock = (\n', '                schedule.initialLockedShares.sub(schedule.unlockedShares)\n', '            );\n', '            schedule.lastUnlockTimestampSec = schedule.endAtSec;\n', '        } else {\n', '            sharesToUnlock = now\n', '                .sub(schedule.lastUnlockTimestampSec)\n', '                .mul(schedule.initialLockedShares)\n', '                .div(schedule.durationSec);\n', '            schedule.lastUnlockTimestampSec = now;\n', '        }\n', '\n', '        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n', '        return sharesToUnlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the owner rescue funds air-dropped to the staking pool.\n', '     * @param tokenToRescue Address of the token to be rescued.\n', '     * @param to Address to which the rescued funds are to be sent.\n', '     * @param amount Amount of tokens to be rescued.\n', '     * @return Transfer success.\n', '     */\n', '    function rescueFundsFromStakingPool(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) public onlyOwner returns (bool) {\n', '        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\n', '    }\n', '\n', '    function supportsHistory() external pure override returns (bool) {\n', '        return false;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'interface IStake {\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title Non Nft Token Geyser\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n', ' *      Compound and Uniswap.\n', ' *\n', ' *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\n', ' *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\n', ' *      claimed by users.\n', ' *\n', ' *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\n', ' *      is a function of the number of tokens deposited as well as the length of time deposited.\n', ' *      Specifically, a user\'s share of the currently-unlocked pool equals their "deposit-seconds"\n', ' *      divided by the global "deposit-seconds". This aligns the new token distribution with long\n', ' *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\n', ' *\n', ' *      More background and motivation available at:\n', ' *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n', ' */\n', 'contract TokenGeyserWithoutNFT is IStaking, IStake, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event Unstaked(\n', '        address indexed user,\n', '        uint256 amount,\n', '        uint256 total,\n', '        bytes data\n', '    );\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n', '    // amount: Unlocked tokens, total: Total locked tokens\n', '    event TokensUnlocked(uint256 amount, uint256 total);\n', '\n', '    TokenPool private _stakingPool;\n', '    TokenPool private _unlockedPool;\n', '    TokenPool private _lockedPool;\n', '\n', '    //\n', '    // Time-bonus params\n', '    //\n', '    uint256 public bonusDecimals = 2;\n', '    uint256 public startBonus = 0;\n', '    uint256 public bonusPeriodSec = 0;\n', '\n', '    //\n', '    // Global accounting state\n', '    //\n', '    uint256 public totalLockedShares = 0;\n', '    uint256 public totalStakingShares = 0;\n', '    uint256 private _totalStakingShareSeconds = 0;\n', '    uint256 private _lastAccountingTimestampSec = now;\n', '    uint256 private _maxUnlockSchedules = 0;\n', '    uint256 private _initialSharesPerToken = 0;\n', '\n', '    //\n', '    // User accounting state\n', '    //\n', '    // Represents a single stake for a user. A user may have multiple.\n', '    struct Stake {\n', '        uint256 stakingShares;\n', '        uint256 timestampSec;\n', '    }\n', '\n', '    // Caches aggregated values from the User->Stake[] map to save computation.\n', "    // If lastAccountingTimestampSec is 0, there's no entry for that user.\n", '    struct UserTotals {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastAccountingTimestampSec;\n', '    }\n', '\n', '    // Aggregated staking values per user\n', '    mapping(address => UserTotals) private _userTotals;\n', '\n', '    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\n', '    mapping(address => Stake[]) private _userStakes;\n', '\n', '    mapping(address => uint256) userEarnings;\n', '\n', '    //\n', '    // Locked/Unlocked Accounting state\n', '    //\n', '    struct UnlockSchedule {\n', '        uint256 initialLockedShares;\n', '        uint256 unlockedShares;\n', '        uint256 lastUnlockTimestampSec;\n', '        uint256 endAtSec;\n', '        uint256 durationSec;\n', '    }\n', '\n', '    UnlockSchedule[] public unlockSchedules;\n', '\n', '    address public geyserManager;\n', '\n', '    /**\n', '     * @param stakingToken The token users deposit as stake.\n', '     * @param distributionToken The token users receive as they unstake.\n', '     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n', '     * @param startBonus_ Starting time bonus\n', '     *                    e.g. 25% means user gets 25% of max distribution tokens.\n', '     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '     * @param bonusDecimals_ The number of decimals for shares\n', '     */\n', '    constructor(\n', '        IERC20 stakingToken,\n', '        IERC20 distributionToken,\n', '        uint256 maxUnlockSchedules,\n', '        uint256 startBonus_,\n', '        uint256 bonusPeriodSec_,\n', '        uint256 initialSharesPerToken,\n', '        uint256 bonusDecimals_,\n', '        address managerAddress\n', '    ) public {\n', '        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n', '        require(\n', '            startBonus_ <= 10**bonusDecimals_,\n', '            "TokenGeyser: start bonus too high"\n', '        );\n', '        // If no period is desired, instead set startBonus = 100%\n', '        // and bonusPeriod to a small value like 1sec.\n', '        require(bonusPeriodSec_ != 0, "TokenGeyser: bonus period is zero");\n', '        require(\n', '            initialSharesPerToken > 0,\n', '            "TokenGeyser: initialSharesPerToken is zero"\n', '        );\n', '\n', '        require(bonusDecimals_ > 0, "TokenGeyser: bonusDecimals_ is zero");\n', '\n', '        _stakingPool = new TokenPool(stakingToken);\n', '        _unlockedPool = new TokenPool(distributionToken);\n', '        _lockedPool = new TokenPool(distributionToken);\n', '        _unlockedPool.setRescuable(true);\n', '\n', '        geyserManager = managerAddress;\n', '        startBonus = startBonus_;\n', '        bonusDecimals = bonusDecimals_;\n', '        bonusPeriodSec = bonusPeriodSec_;\n', '        _maxUnlockSchedules = maxUnlockSchedules;\n', '        _initialSharesPerToken = initialSharesPerToken;\n', '    }\n', '\n', '    /**\n', '     * @return Total earnings for a user\n', '    */\n', '    function getEarnings(address user) public view returns (uint256) {\n', '        return userEarnings[user];\n', '    }\n', '\n', '    /**\n', '     * @dev Rescue rewards\n', '     */\n', '    function rescueRewards(address user) external onlyOwner {\n', '        require(totalUnlocked() > 0, "TokenGeyser: Nothing to rescue");\n', '        require(\n', '            _unlockedPool.transfer(user, _unlockedPool.balance()),\n', '            "TokenGeyser: rescue rewards from rewards pool failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _stakingPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return The token users receive as they unstake.\n', '     */\n', '    function getDistributionToken() public view returns (IERC20) {\n', '        assert(_unlockedPool.token() == _lockedPool.token());\n', '        return _unlockedPool.token();\n', '    }\n', '\n', '    event log(string s);\n', '    event log(uint256 s);\n', '    event log(address s);\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the user.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n', '     * @param user User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stakeFor(\n', '        address staker,\n', '        address user,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override onlyOwner {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _stakeFor(staker, user, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Private implementation of staking methods.\n', '     * @param staker User address who deposits tokens to stake.\n', '     * @param beneficiary User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     */\n', '    function _stakeFor(\n', '        address staker,\n', '        address beneficiary,\n', '        uint256 amount\n', '    ) private {\n', '        require(amount > 0, "TokenGeyser: stake amount is zero");\n', '        require(\n', '            beneficiary != address(0),\n', '            "TokenGeyser: beneficiary is zero address"\n', '        );\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do"\n', '        );\n', '\n', '\n', '        uint256 mintedStakingShares =\n', '            (totalStakingShares > 0)\n', '                ? totalStakingShares.mul(amount).div(totalStaked())\n', '                : amount.mul(_initialSharesPerToken);\n', '\n', '        require(\n', '            mintedStakingShares > 0,\n', '            "TokenGeyser: Stake amount is too small"\n', '        );\n', '\n', '        updateAccounting(beneficiary);\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[beneficiary];\n', '        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        Stake memory newStake = Stake(mintedStakingShares, now);\n', '        _userStakes[beneficiary].push(newStake);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '        // Already set in updateAccounting()\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.token().transferFrom(\n', '                staker,\n', '                address(_stakingPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into staking pool failed"\n', '        );\n', '\n', '        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), "");\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @param data Not used.\n', '     */\n', '    function unstake(\n', '        address staker,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external override {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens that would be rewarded.\n', '     */\n', '    function unstakeQuery(address staker, uint256 amount)\n', '        public\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            geyserManager == msg.sender,\n', '            "This method can be called by the geyser manager only"\n', '        );\n', '        return _unstake(staker, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens rewarded.\n', '     */\n', '    function _unstake(address user, uint256 amount) private returns (uint256) {\n', '        updateAccounting(user);\n', '\n', '        uint256 stakingSharesToBurn =\n', '            totalStakingShares.mul(amount).div(totalStaked());\n', '\n', '        require(\n', '            stakingSharesToBurn > 0,\n', '            "TokenGeyser: Unable to unstake amount this small"\n', '        );\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        Stake[] storage accountStakes = _userStakes[user];\n', '\n', '        // Redeem from most recent stake and go backwards in time.\n', '        uint256 stakingShareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 rewardAmount = 0;\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n', '            uint256 newStakingShareSecondsToBurn = 0;\n', '\n', '            if (lastStake.stakingShares <= sharesLeftToBurn) {\n', '                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(\n', '                    lastStake.stakingShares\n', '                );\n', '                accountStakes.pop();\n', '            } else {\n', '                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(\n', '                    stakeTimeSec\n', '                );\n', '                rewardAmount = computeNewReward(\n', '                    rewardAmount,\n', '                    newStakingShareSecondsToBurn,\n', '                    stakeTimeSec\n', '                );\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(\n', '                    newStakingShareSecondsToBurn\n', '                );\n', '                lastStake.stakingShares = lastStake.stakingShares.sub(\n', '                    sharesLeftToBurn\n', '                );\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // totals.lastAccountingTimestampSec = now;\n', '\n', '        // 2. Global Accounting\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(\n', '            stakingShareSecondsToBurn\n', '        );\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccountingF\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(\n', '            _stakingPool.transfer(user, amount),\n', '            "TokenGeyser: transfer out of staking pool failed"\n', '        );\n', '\n', '        //in case rescueRewards was called, there are no rewards to be transfered\n', '        if (totalUnlocked() >= rewardAmount) {\n', '            require(\n', '                _unlockedPool.transfer(user, rewardAmount),\n', '                "TokenGeyser: transfer out of unlocked pool failed"\n', '            );\n', '            emit TokensClaimed(user, rewardAmount);\n', '            \n', '             userEarnings[user] += rewardAmount;\n', '        }\n', '\n', '        emit Unstaked(user, amount, totalStakedFor(user), "");\n', '\n', '        require(\n', '            totalStakingShares == 0 || totalStaked() > 0,\n', '            "TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do"\n', '        );\n', '\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\n', '     *      encourage long-term deposits instead of constant unstake/restakes.\n', '     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\n', '     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n', '     * @param currentRewardTokens The current number of distribution tokens already alotted for this\n', '     *                            unstake op. Any bonuses are already applied.\n', '     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\n', '     *                            distribution tokens.\n', '     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\n', '     *                     the time-bonus.\n', '     * @return Updated amount of distribution tokens to award, with any bonus included on the\n', '     *         newly added tokens.\n', '     */\n', '    function computeNewReward(\n', '        uint256 currentRewardTokens,\n', '        uint256 stakingShareSeconds,\n', '        uint256 stakeTimeSec\n', '    ) private view returns (uint256) {\n', '        uint256 newRewardTokens =\n', '            totalUnlocked().mul(stakingShareSeconds).div(\n', '                _totalStakingShareSeconds\n', '            );\n', '\n', '        if (stakeTimeSec >= bonusPeriodSec) {\n', '            return currentRewardTokens.add(newRewardTokens);\n', '        }\n', '\n', '        uint256 oneHundredPct = 10**bonusDecimals;\n', '        uint256 bonusedReward =\n', '            startBonus\n', '                .add(\n', '                oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(\n', '                    bonusPeriodSec\n', '                )\n', '            )\n', '                .mul(newRewardTokens)\n', '                .div(oneHundredPct);\n', '\n', '        return currentRewardTokens.add(bonusedReward);\n', '    }\n', '\n', '    /**\n', '     * @param addr The user to look up staking information for.\n', '     * @return The number of staking tokens deposited for addr.\n', '     */\n', '    function totalStakedFor(address addr)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return\n', '            totalStakingShares > 0\n', '                ? totalStaked().mul(_userTotals[addr].stakingShares).div(\n', '                    totalStakingShares\n', '                )\n', '                : 0;\n', '    }\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() public view override returns (uint256) {\n', '        return _stakingPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @dev Note that this application has a staking token as well as a distribution token, which\n', '     * may be different. This function is required by EIP-900.\n', '     * @return The deposit token used for staking.\n', '     */\n', '    function token() external view override returns (address) {\n', '        return address(getStakingToken());\n', '    }\n', '\n', '    /**\n', '     * @dev A globally callable function to update the accounting state of the system.\n', '     *      Global state and state for the caller are updated.\n', '     * @return [0] balance of the locked pool\n', '     * @return [1] balance of the unlocked pool\n', "     * @return [2] caller's staking share seconds\n", '     * @return [3] global staking share seconds\n', '     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\n', '     * @return [5] block timestamp\n', '     */\n', '    function updateAccounting(address user)\n', '        public\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        _unlockTokens();\n', '\n', '        // Global accounting\n', '        uint256 newStakingShareSeconds =\n', '            now.sub(_lastAccountingTimestampSec).mul(totalStakingShares);\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.add(\n', '            newStakingShareSeconds\n', '        );\n', '        _lastAccountingTimestampSec = now;\n', '\n', '        // User Accounting\n', '        UserTotals storage totals = _userTotals[user];\n', '        uint256 newUserStakingShareSeconds =\n', '            now.sub(totals.lastAccountingTimestampSec).mul(\n', '                totals.stakingShares\n', '            );\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.add(\n', '            newUserStakingShareSeconds\n', '        );\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        uint256 totalUserRewards =\n', '            (_totalStakingShareSeconds > 0)\n', '                ? totalUnlocked().mul(totals.stakingShareSeconds).div(\n', '                    _totalStakingShareSeconds\n', '                )\n', '                : 0;\n', '\n', '        return (\n', '            totalLocked(),\n', '            totalUnlocked(),\n', '            totals.stakingShareSeconds,\n', '            _totalStakingShareSeconds,\n', '            totalUserRewards,\n', '            now\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Total number of locked distribution tokens.\n', '     */\n', '    function totalLocked() public view returns (uint256) {\n', '        return _lockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Total number of unlocked distribution tokens.\n', '     */\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Number of unlock schedules.\n', '     */\n', '    function unlockScheduleCount() public view returns (uint256) {\n', '        return unlockSchedules.length;\n', '    }\n', '\n', '    /**\n', '     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\n', '     *      with the associated "unlock schedule". These locked tokens immediately begin unlocking\n', '     *      linearly over the duraction of durationSec timeframe.\n', '     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n', '     * @param durationSec Length of time to linear unlock the tokens.\n', '     */\n', '    function lockTokens(uint256 amount, uint256 durationSec)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(\n', '            unlockSchedules.length < _maxUnlockSchedules,\n', '            "TokenGeyser: reached maximum unlock schedules"\n', '        );\n', '\n', '        // Update lockedTokens amount before using it in computations after.\n', '        updateAccounting(msg.sender);\n', '\n', '        uint256 lockedTokens = totalLocked();\n', '        uint256 mintedLockedShares =\n', '            (lockedTokens > 0)\n', '                ? totalLockedShares.mul(amount).div(lockedTokens)\n', '                : amount.mul(_initialSharesPerToken);\n', '\n', '        UnlockSchedule memory schedule;\n', '        schedule.initialLockedShares = mintedLockedShares;\n', '        schedule.lastUnlockTimestampSec = now;\n', '        schedule.endAtSec = now.add(durationSec);\n', '        schedule.durationSec = durationSec;\n', '        unlockSchedules.push(schedule);\n', '\n', '        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '        require(\n', '            _lockedPool.token().transferFrom(\n', '                msg.sender,\n', '                address(_lockedPool),\n', '                amount\n', '            ),\n', '            "TokenGeyser: transfer into locked pool failed"\n', '        );\n', '        emit TokensLocked(amount, durationSec, totalLocked());\n', '    }\n', '\n', '    /**\n', '     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\n', '     *      previously defined unlock schedules. Publicly callable.\n', '     * @return Number of newly unlocked distribution tokens.\n', '     */\n', '    function unlockTokens() public onlyOwner returns (uint256) {\n', '        _unlockTokens();\n', '    }\n', '\n', '    function _unlockTokens() private returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        uint256 lockedTokens = totalLocked();\n', '\n', '        if (totalLockedShares == 0) {\n', '            unlockedTokens = lockedTokens;\n', '        } else {\n', '            uint256 unlockedShares = 0;\n', '            for (uint256 s = 0; s < unlockSchedules.length; s++) {\n', '                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n', '            }\n', '            unlockedTokens = unlockedShares.mul(lockedTokens).div(\n', '                totalLockedShares\n', '            );\n', '            totalLockedShares = totalLockedShares.sub(unlockedShares);\n', '        }\n', '\n', '        if (unlockedTokens > 0) {\n', '            require(\n', '                _lockedPool.transfer(address(_unlockedPool), unlockedTokens),\n', '                "TokenGeyser: transfer out of locked pool failed"\n', '            );\n', '            emit TokensUnlocked(unlockedTokens, totalLocked());\n', '        }\n', '\n', '        return unlockedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of unlockable shares from a given schedule. The returned value\n', '     *      depends on the time since the last unlock. This function updates schedule accounting,\n', '     *      but does not actually transfer any tokens.\n', '     * @param s Index of the unlock schedule.\n', '     * @return The number of unlocked shares.\n', '     */\n', '    function unlockScheduleShares(uint256 s) private returns (uint256) {\n', '        UnlockSchedule storage schedule = unlockSchedules[s];\n', '\n', '        if (schedule.unlockedShares >= schedule.initialLockedShares) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 sharesToUnlock = 0;\n', '        // Special case to handle any leftover dust from integer division\n', '        if (now >= schedule.endAtSec) {\n', '            sharesToUnlock = (\n', '                schedule.initialLockedShares.sub(schedule.unlockedShares)\n', '            );\n', '            schedule.lastUnlockTimestampSec = schedule.endAtSec;\n', '        } else {\n', '            sharesToUnlock = now\n', '                .sub(schedule.lastUnlockTimestampSec)\n', '                .mul(schedule.initialLockedShares)\n', '                .div(schedule.durationSec);\n', '            schedule.lastUnlockTimestampSec = now;\n', '        }\n', '\n', '        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n', '        return sharesToUnlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the owner rescue funds air-dropped to the staking pool.\n', '     * @param tokenToRescue Address of the token to be rescued.\n', '     * @param to Address to which the rescued funds are to be sent.\n', '     * @param amount Amount of tokens to be rescued.\n', '     * @return Transfer success.\n', '     */\n', '    function rescueFundsFromStakingPool(\n', '        address tokenToRescue,\n', '        address to,\n', '        uint256 amount\n', '    ) public onlyOwner returns (bool) {\n', '        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\n', '    }\n', '\n', '    function supportsHistory() external pure override returns (bool) {\n', '        return false;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/** @title Token Geyser Manager */\n', 'contract TokenGeyserManager is Ownable, ITokenGeyserManager {\n', '    bool public hasNFTBonus;\n', '    mapping(address => address) public geysers;\n', '    address[] public tokens;\n', '\n', '    /**\n', '       @dev Creates an empty Geyser token managers\n', '    \n', '     */\n', '    constructor(bool _hasNftBonus) public {\n', '        hasNFTBonus = _hasNftBonus;\n', '\n', '        emit GeyserManagerCreated(msg.sender, address(this));\n', '    }\n', '\n', '    /**\n', '        @dev Adds a new geyser in the team\n', '        @param token - address of the staking token for which the geyser was created\n', '        @param geyser - address of the geyser\n', '     */\n', '    function addGeyser(address token, address geyser)\n', '        public\n', '        override\n', '        onlyOwner\n', '        returns (bool)\n', '    {\n', '        require(token != address(0), "TokenGeyserManager: token is invalid");\n', '\n', '        require(geyser != address(0), "TokenGeyserManager: geyser is invalid");\n', '        tokens.push(token);\n', '        geysers[token] = geyser;\n', '\n', '        emit GeyserAdded(msg.sender, geyser, token);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Retrieves total rewards earned for a specific staking token\n', '        @param token - address of the ERC20 token\n', '    */\n', '    function getEarned(address token) public view override returns (uint256) {\n', '        if (hasNFTBonus) {\n', '            return TokenGeyser(geysers[token]).getEarnings(msg.sender);\n', '        }\n', '        return TokenGeyserWithoutNFT(geysers[token]).getEarnings(msg.sender);\n', '    }\n', '\n', '    /**\n', '        @dev Retrieves total rewards earned for all the staking tokens\n', '    */\n', '     function getEarnings() public view override returns (address[] memory, uint256[] memory){\n', '        address[] memory addresses = new address[](tokens.length);\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            addresses[i] = tokens[i];\n', '            if (hasNFTBonus) {\n', '                amounts[i] = TokenGeyser(geysers[tokens[i]]).getEarnings(\n', '                    msg.sender\n', '                );\n', '            } else {\n', '                amounts[i] = TokenGeyserWithoutNFT(geysers[tokens[i]])\n', '                    .getEarnings(msg.sender);\n', '            }\n', '        }\n', '\n', '        return (addresses, amounts);\n', '     }\n', '\n', '\n', '    /**\n', '        @dev Retrieves staked amount for a specific token address\n', '        @param token - address of the ERC20 token\n', '    */\n', '    function getStake(address token) public view override returns (uint256) {\n', '        if (hasNFTBonus) {\n', '            return TokenGeyser(geysers[token]).totalStakedFor(msg.sender);\n', '        }\n', '        return TokenGeyserWithoutNFT(geysers[token]).totalStakedFor(msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Retrieves all stakes for sender\n', '     */\n', '    function getStakes()\n', '        public\n', '        view\n', '        override\n', '        returns (address[] memory, uint256[] memory)\n', '    {\n', '        address[] memory addresses = new address[](tokens.length);\n', '        uint256[] memory amounts = new uint256[](tokens.length);\n', '\n', '        for (uint8 i = 0; i < tokens.length; i++) {\n', '            addresses[i] = tokens[i];\n', '            if (hasNFTBonus) {\n', '                amounts[i] = TokenGeyser(geysers[tokens[i]]).totalStakedFor(\n', '                    msg.sender\n', '                );\n', '            } else {\n', '                amounts[i] = TokenGeyserWithoutNFT(geysers[tokens[i]])\n', '                    .totalStakedFor(msg.sender);\n', '            }\n', '        }\n', '\n', '        return (addresses, amounts);\n', '    }\n', '\n', '\n', '    /**\n', '        @dev Stakes all tokens sent\n', "        @param _tokens - array of tokens' addresses you want to stake\n", '        @param amounts - stake amount you want for each token\n', '     */\n', '    function stake(\n', '        address[] calldata _tokens,\n', '        uint256[] calldata amounts,\n', '        int256 nftId\n', '    ) external override returns (bool) {\n', '        //validation\n', '        require(tokens.length > 0, "TokenGeyserManager: _tokens is empty");\n', '        require(amounts.length > 0, "TokenGeyserManager: amounts is empty");\n', '        require(\n', '            _tokens.length == amounts.length,\n', '            "TokenGeyserManager: tokens and amounts need to  be the same length"\n', '        );\n', '\n', '        for (uint8 i = 0; i < _tokens.length; i++) {\n', '            ERC20 currentToken = ERC20(_tokens[i]);\n', '            uint256 currentTokenBalance = currentToken.balanceOf(msg.sender);\n', '            uint256 sentAmount = amounts[i];\n', '            string memory tokenName = currentToken.name();\n', '\n', '            require(\n', '                currentTokenBalance >= sentAmount,\n', '                string(\n', '                    abi.encodePacked(\n', '                        "TokenGeyserManager: Token ",\n', '                        tokenName,\n', '                        " balance is lower than the amount sent"\n', '                    )\n', '                )\n', '            );\n', '        }\n', '        //actions\n', '        for (uint8 i = 0; i < _tokens.length; i++) {\n', '            if (hasNFTBonus) {\n', '                TokenGeyser(geysers[_tokens[i]]).stake(\n', '                    msg.sender,\n', '                    amounts[i],\n', '                    "",\n', '                    nftId\n', '                );\n', '            } else {\n', '                TokenGeyserWithoutNFT(geysers[_tokens[i]]).stake(\n', '                    msg.sender,\n', '                    amounts[i],\n', '                    ""\n', '                );\n', '            }\n', '\n', '            emit Staked(msg.sender, tokens[i], amounts[i]);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        @dev Unstakes all tokens sent\n', "        @param _tokens - array of tokens' addresses you want to unstake\n", '        @param amounts - unstake amount you want for each token\n', '     */\n', '    function unstake(address[] calldata _tokens, uint256[] calldata amounts)\n', '        external\n', '        override\n', '    {\n', '        //validation\n', '        require(tokens.length > 0, "TokenGeyserManager: _tokens is empty");\n', '        require(amounts.length > 0, "TokenGeyserManager: amounts is empty");\n', '        require(\n', '            _tokens.length == amounts.length,\n', '            "TokenGeyserManager: tokens and amounts need to  be the same length"\n', '        );\n', '\n', '        for (uint8 i = 0; i < _tokens.length; i++) {\n', '            if (hasNFTBonus) {\n', '                require(\n', '                    amounts[i] == 0,\n', '                    "TokenGeyserManager: only full unstake is allowed"\n', '                );\n', '                TokenGeyser(geysers[_tokens[i]]).unstake(\n', '                    msg.sender,\n', '                    amounts[i],\n', '                    ""\n', '                );\n', '            } else {\n', '                TokenGeyserWithoutNFT(geysers[_tokens[i]]).unstake(\n', '                    msg.sender,\n', '                    amounts[i],\n', '                    ""\n', '                );\n', '            }\n', '\n', '            emit Unstaked(msg.sender, _tokens[i], amounts[i]);\n', '        }\n', '    }\n', '\n', '\n', '        /**\n', '        @dev get current eligible rewards from all farms\n', '     */\n', '    function unstakeQuery(address[] calldata _tokens, uint256[] calldata amounts)\n', '        external\n', '        override\n', '        returns (address[] memory, uint256[] memory)\n', '    {\n', '        //validation\n', '        require(tokens.length > 0, "TokenGeyserManager: _tokens is empty");\n', '        require(amounts.length > 0, "TokenGeyserManager: amounts is empty");\n', '        require(\n', '            _tokens.length == amounts.length,\n', '            "TokenGeyserManager: tokens and amounts need to  be the same length"\n', '        );\n', '\n', '        address[] memory addresses = new address[](tokens.length);\n', '        uint256[] memory values = new uint256[](tokens.length);\n', '\n', '        for (uint8 i = 0; i < _tokens.length; i++) {\n', '            addresses[i] = _tokens[i];\n', '            if (hasNFTBonus) {\n', '                require(\n', '                    amounts[i] == 0,\n', '                    "TokenGeyserManager: only full unstake is allowed"\n', '                );\n', '                values[i] = TokenGeyser(geysers[_tokens[i]]).unstakeQuery(\n', '                    msg.sender,\n', '                    amounts[i]\n', '                );\n', '            } else {\n', '                values[i] = TokenGeyserWithoutNFT(geysers[_tokens[i]]).unstakeQuery(\n', '                    msg.sender,\n', '                    amounts[i]\n', '                );\n', '            }\n', '\n', '            emit Unstaked(msg.sender, _tokens[i], values[i]);\n', '\n', '            return (addresses, values);\n', '        }\n', '    }\n', '}']