['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library ABDKMath64x64 {\n', '  /**\n', '   * Minimum value signed 64.64-bit fixed point number may have.\n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /**\n', '   * Maximum value signed 64.64-bit fixed point number may have.\n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '  \n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '  \n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= xe;\n', '      else x <<= -xe;\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= re;\n', '      else if (re < 0) result >>= -re;\n', '\n', '      return result;\n', '    }\n', '  }\n', '}\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * Available since v3.1.\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * Available since v3.1.\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * Available since v3.1.\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * Available since v3.1.\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'contract Balancer {\n', '    constructor() public {\n', '    }\n', '}\n', '\n', 'contract SmartElevate is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    string private _name = "SmartElevate.network";\n', '    string private _symbol = "SET";\n', '    uint8 private _decimals = 18;\n', '\n', '    mapping(address => uint256) internal _reflectionBalance;\n', '    mapping(address => uint256) internal _tokenBalance;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '    mapping(address => uint256) internal initial;\n', '\n', '    uint256 public fastCount;\n', '    uint256 public fastLimit = 8;\n', '\n', '    uint256[15] public buys;\n', '    uint256[15] public sells;\n', '    uint256 movingAverageCount = 15;\n', '\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 internal _tokenTotal = 14500e18;\n', '    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\n', '\n', '    mapping(address => bool) isExcludedFromFee;\n', '    mapping(address => bool) internal _isExcluded;\n', '    address[] internal _excluded;\n', '    \n', '    uint256 public _feeDecimal = 2;\n', '    uint256 public _taxFee = 200;\n', '    uint256 public _deflationFee = 200;\n', '    uint256 public maxFee = 400;\n', '    uint256 public delayTime = 6 minutes;\n', '\n', '\n', '    \n', '    uint256 public _taxFeeTotal;\n', '    uint256 public _burnFeeTotal;\n', '    uint256 public _deflationFeeTotal;\n', '\n', '    bool public tradingEnabled = false;\n', '    bool public deflationEnabled = true;\n', '\n', '\n', '    uint256 public liquidityAddedAt;\n', '\n', '    IUniswapV2Router02 public  uniswapV2Router;\n', '    address public uniswapV2Pair;\n', '\n', '    event TradingEnabled(bool enabled);\n', '\n', '    constructor() public {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n', '            .createPair(address(this), _uniswapV2Router.WETH());\n', '            \n', '        uniswapV2Router = _uniswapV2Router;\n', '        \n', '        isExcludedFromFee[_msgSender()] = true;\n', '        isExcludedFromFee[address(this)] = true;\n', '        \n', '        _isExcluded[uniswapV2Pair] = true;\n', '        _excluded.push(uniswapV2Pair);\n', '        \n', '        _reflectionBalance[_msgSender()] = _reflectionTotal;\n', '        emit Transfer(address(0), _msgSender(), _tokenTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _tokenTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        if (_isExcluded[account]) return _tokenBalance[account];\n', '        return tokenFromReflection(_reflectionBalance[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        virtual\n', '        returns (bool)\n', '    {\n', '       _transfer(_msgSender(),recipient,amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override virtual returns (bool) {\n', '        _transfer(sender,recipient,amount);\n', '               \n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(),spender,_allowances[_msgSender()][spender].sub(subtractedValue,"ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tokenAmount, bool deductTransferFee)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(tokenAmount <= _tokenTotal, "Amount must be less than supply");\n', '        if (!deductTransferFee) {\n', '            return tokenAmount.mul(_getReflectionRate());\n', '        } else {\n', '            return\n', '                tokenAmount.sub(tokenAmount.mul(_taxFee).div(10** _feeDecimal + 2)).mul(_getReflectionRate());\n', '        }\n', '    }\n', '\n', '    function tokenFromReflection(uint256 reflectionAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            reflectionAmount <= _reflectionTotal,\n', '            "Amount must be less than total reflections"\n', '        );\n', '        uint256 currentRate = _getReflectionRate();\n', '        return reflectionAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(\n', '            account != 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D,\n', '            "SET: Uniswap router cannot be excluded."\n', '        );\n', "        require(account != address(this), 'SET: The contract it self cannot be excluded');\n", '        require(!_isExcluded[account], "SET: Account is already excluded");\n', '        if (_reflectionBalance[account] > 0) {_tokenBalance[account] = tokenFromReflection(_reflectionBalance[account]);\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "SET: Account is already included");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tokenBalance[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(tradingEnabled || sender == owner() || recipient == owner() ||\n', '                isExcludedFromFee[sender] || isExcludedFromFee[recipient], "Trading is locked before presale.");\n', '\n', '        if (fastCount < fastLimit && uniswapV2Pair == sender && sender != owner()) {\n', '            fastCount++;\n', '            initial[recipient] = block.timestamp;\n', '        }\n', '        \n', '        if (uniswapV2Pair == recipient && initial[sender] + delayTime > block.timestamp) {\n', '            revert();\n', '        }\n', '\n', '\n', '        if (liquidityAddedAt > 0) {\n', '            uint256 minute = block.timestamp.sub(liquidityAddedAt).div(60) % movingAverageCount;\n', '            \n', '            if (uniswapV2Pair == sender) {\n', '                buys[minute] += 1;\n', '            } else if (uniswapV2Pair == recipient) {\n', '                sells[minute] += 1;\n', '            }    \n', '        }\n', '        \n', '        uint256 ratio = getMovingRatio();\n', '        if (ratio >= 0x100000FF) {\n', '            _deflationFee = 0;\n', '        } else {\n', '            _deflationFee = ratio.mul(2) % maxFee;\n', '        }\n', '        _taxFee = maxFee - _deflationFee;\n', '        \n', '        uint256 transferAmount = amount;\n', '        uint256 rate = _getReflectionRate();\n', '\n', '        if(!isExcludedFromFee[sender] && !isExcludedFromFee[recipient]){\n', '            transferAmount = collectFee(amount,rate);\n', '        }\n', '\n', '        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\n', '        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\n', '\n', '        //@dev If any account belongs to the excludedAccount transfer token\n', '        if (_isExcluded[sender]) {\n', '            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\n', '        }\n', '        if (_isExcluded[recipient]) {\n', '            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\n', '        }\n', '\n', '        emit Transfer(sender, recipient, transferAmount);\n', '    }\n', '    \n', '    function getMovingRatio() public view returns(uint256) {\n', '        uint256 buySum = 0;\n', '        uint256 sellSum = 0;\n', '        \n', '        for (uint256 i = 0; i < movingAverageCount; i++) {\n', '            buySum += buys[i];\n', '            sellSum += sells[i];\n', '        }\n', '        \n', '        if (buySum == 0) {\n', '            return 0x100000FF;\n', '        }\n', '        \n', '        uint256 ratio = sellSum.mul(5).div(buySum);\n', '        int128 sharpe = ABDKMath64x64.pow(0x10000000000000000, movingAverageCount);\n', '        ratio = ratio.add(ABDKMath64x64.toUInt(sharpe));\n', '        \n', '        \n', '        return ratio % 0x100000FF;\n', '    }\n', '    \n', '    function collectFee(uint256 amount, uint256 rate) private returns (uint256) {\n', '        uint256 transferAmount = amount;\n', '        \n', '        //@dev Tax fee\n', '        if(_taxFee != 0){\n', '            uint256 taxFee = amount.mul(_taxFee).div(10**(_feeDecimal + 2));\n', '            transferAmount = transferAmount.sub(taxFee);\n', '            _reflectionTotal = _reflectionTotal.sub(taxFee.mul(rate));\n', '            _taxFeeTotal = _taxFeeTotal.add(taxFee);\n', '        }\n', '\n', '        if(_deflationFee != 0 && deflationEnabled){\n', '            uint256 defFee = amount.mul(_deflationFee).div(10**(_feeDecimal + 2));\n', '            transferAmount = transferAmount.sub(defFee);\n', '            _deflationFeeTotal = _deflationFeeTotal.add(defFee);\n', '            burnFee(defFee);\n', '        }\n', '        \n', '        return transferAmount;\n', '    }\n', '\n', '    function _getReflectionRate() private view returns (uint256) {\n', '        uint256 reflectionSupply = _reflectionTotal;\n', '        uint256 tokenSupply = _tokenTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (\n', '                _reflectionBalance[_excluded[i]] > reflectionSupply ||\n', '                _tokenBalance[_excluded[i]] > tokenSupply\n', '            ) return _reflectionTotal.div(_tokenTotal);\n', '            reflectionSupply = reflectionSupply.sub(\n', '                _reflectionBalance[_excluded[i]]\n', '            );\n', '            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\n', '        }\n', '        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\n', '            return _reflectionTotal.div(_tokenTotal);\n', '        return reflectionSupply.div(tokenSupply);\n', '    }\n', '   \n', '    function burnFee(uint256 fee) private {\n', '        uint256 rate =  _getReflectionRate();\n', '\n', '        _reflectionTotal = _reflectionTotal.sub(fee.mul(rate));\n', '        _tokenTotal = _tokenTotal.sub(fee);\n', '    }\n', '    \n', '    function setExcludedFromFee(address account, bool excluded) public onlyOwner {\n', '        isExcludedFromFee[account] = excluded;\n', '    }\n', '    \n', '    function setTaxFee(uint256 fee) public onlyOwner {\n', '        _taxFee = fee;\n', '    }\n', '    \n', '    function setDeflationFee(uint256 fee) public onlyOwner {\n', '        _deflationFee = fee;\n', '    }\n', '\n', '    function multiTransfer(address[] memory addresses, uint256 amount) public {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            transfer(addresses[i], amount);\n', '        }\n', '    }\n', '    \n', '    function enableTrading() external onlyOwner() {\n', '        tradingEnabled = true;\n', '        TradingEnabled(true);\n', '        liquidityAddedAt = now;\n', '    }\n', '    \n', '    function setDeflationEnabled(bool val) external onlyOwner() {\n', '        deflationEnabled = val;\n', '    }\n', '    \n', '    receive() external payable {}\n', '}']