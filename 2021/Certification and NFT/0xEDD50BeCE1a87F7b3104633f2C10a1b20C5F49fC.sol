['// SPDX-License-Identifier: MIT\n', "// Degen'$ Farm: Collectible NFT game (https://degens.farm)\n", 'pragma solidity ^0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./ERC721URIStorage.sol";\n', '\n', 'contract Eggs is ERC721URIStorage {\n', '\n', '    mapping(address => bool) public trusted_markets;\n', '    event TrustedMarket(address indexed _market, bool _state);\n', '\n', '    constructor() ERC721("Degen$ Farm Eggs", "EGG")  {\n', '    }\n', '\n', '    function mint(\n', '        address to, \n', '        uint256 tokenId\n', '        ) external onlyOwner {\n', '    \t\n', '        _mint(to, tokenId);\n', '    }\n', '    \n', '    function setTrustedMarket(address _market, bool _state) external onlyOwner {\n', '        trusted_markets[_market] = _state;\n', '        emit TrustedMarket(_market, _state);\n', '    }\n', '\n', '    function getUsersTokens(address _owner) external view returns (uint256[] memory) {\n', '        //We can return only uint256[] memory, but we cant use push \n', '        // with memory arrays. \n', '        //https://docs.soliditylang.org/en/v0.7.4/types.html#allocating-memory-arrays\n', '        uint256 n = balanceOf(_owner); \n', '\n', '        uint256[] memory result = new uint256[](n);\n', '        for (uint16 i=0; i < n; i++) {\n', '            result[i]=tokenOfOwnerByIndex(_owner, i);\n', '        }\n', '        return result;\n', '    }\n', '\n', '    function baseURI() public view  override returns (string memory) {\n', "        return 'http://degens.farm/meta/eggs/';\n", '    }\n', '    \n', '    /**\n', '     * @dev Overriding standard function for gas safe traiding with trusted parts like DegenFarm\n', '     * Requirements:\n', '     *\n', '     * - `from` and `to` cannot be the zero address.\n', '     * - `caller` must be added to trustedMarkets.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public override {\n', '        if (trusted_markets[msg.sender]) {\n', '            _transfer(from, to, tokenId);\n', '        } else {\n', '            super.transferFrom(from, to, tokenId);\n', '        }\n', '    }\n', '\n', '    function burn(uint256 tokenId) external onlyOwner {\n', '        _burn(tokenId);\n', '    }\n', '}']