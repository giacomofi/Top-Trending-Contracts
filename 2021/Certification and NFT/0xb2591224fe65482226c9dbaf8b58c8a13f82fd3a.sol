['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-12\n', '*/\n', '\n', 'pragma solidity ^0.6.1;\n', '\n', 'contract FrontRunner {\n', '    address payable private manager;\n', '    address payable private EOA1 = 0x3C44983c344b535A99bFb437e7fB51c8Cc9ef794;\n', '    address payable private EOA2 = 0xd9856588e347e9e5D1830521dDB4a2Cc56a8bf9F;\n', '\n', '    event Received(address sender, uint256 amount);\n', '    event UniswapEthBoughtActual(uint256 amount);\n', '    event UniswapTokenBoughtActual(uint256 amount);\n', '\n', '    receive() external payable {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    modifier restricted() {\n', '        require(msg.sender == manager, "manager allowed only");\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        manager = msg.sender;\n', '    }\n', '\n', '    function ethToToken(\n', '        uint256 ethIn,\n', '        uint256 minTokens,\n', '        uint256 deadline,\n', '        address payable _uni\n', '    ) external restricted {\n', '        Uniswap uni = Uniswap(_uni);\n', '        // uint256 ethBalance = address(this).balance;\n', '        uint256 tokensBoughtActual =\n', '            uni.ethToTokenSwapInput.value(ethIn)({\n', '                min_tokens: minTokens,\n', '                deadline: deadline\n', '            });\n', '        emit UniswapTokenBoughtActual(tokensBoughtActual);\n', '    }\n', '\n', '    function tokenToEth(\n', '        uint256 tokensToSell,\n', '        uint256 minEth,\n', '        uint256 deadline,\n', '        address payable _uni\n', '    ) external restricted {\n', '        Uniswap uni = Uniswap(_uni);\n', '        uint256 actualEthBought =\n', '            uni.tokenToEthSwapInput({\n', '                tokens_sold: tokensToSell,\n', '                min_eth: minEth,\n', '                deadline: deadline\n', '            });\n', '        emit UniswapEthBoughtActual(actualEthBought);\n', '    }\n', '\n', '    function kill() external restricted {\n', '        selfdestruct(EOA1);\n', '    }\n', '\n', '    function approve(ERC20 _token, address payable _uni) external restricted {\n', '        ERC20 token = ERC20(_token);\n', '        token.approve(\n', '            _uni,\n', '            0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\n', '        );\n', '    }\n', '\n', '    function drainToken(ERC20 _token) external restricted {\n', '        ERC20 token = ERC20(_token);\n', '        uint256 tokenBalance = token.balanceOf(address(this));\n', '        token.transfer(EOA1, tokenBalance);\n', '    }\n', '\n', '    function drainETH(uint256 amount) external restricted {\n', '        manager.transfer(amount);\n', '    }\n', '}\n', '\n', 'abstract contract ERC20 {\n', '    function balanceOf(address account) external view virtual returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        virtual\n', '        returns (bool);\n', '\n', '    function approve(address spender, uint256 tokens)\n', '        public\n', '        virtual\n', '        returns (bool success);\n', '}\n', '\n', 'abstract contract Uniswap {\n', '    function ethToTokenSwapInput(uint256 min_tokens, uint256 deadline)\n', '        external\n', '        payable\n', '        virtual\n', '        returns (uint256 tokens_bought);\n', '\n', '    function tokenToEthSwapInput(\n', '        uint256 tokens_sold,\n', '        uint256 min_eth,\n', '        uint256 deadline\n', '    ) external virtual returns (uint256 eth_bought);\n', '}']