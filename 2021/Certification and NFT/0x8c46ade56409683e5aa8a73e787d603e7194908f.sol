['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '// \n', 'interface IController {\n', '    function vaults(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function devfund() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function withdraw(address, uint256) external;\n', '    function withdraw(address, uint256, address) external;\n', '\n', '    function earn(address, uint256) external;\n', '}\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/GSN/Context.sol\n', '// \n', '// File: contracts/token/ERC20/IERC20.sol\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/utils/Address.sol\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/token/ERC20/ERC20.sol\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '// Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n', '/**\n', ' * @dev Interface of the ERC2612 standard as defined in the EIP.\n', ' *\n', " * Adds the {permit} method, which can be used to change one's\n", ' * {IERC20-allowance} without having to send a transaction, by signing a\n', ' * message. This allows users to spend tokens without having to hold Ether.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-2612.\n', ' */\n', 'interface IERC2612 {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '}\n', '\n', '// \n', '// Adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/53516bc555a454862470e7860a9b5254db4d00f5/contracts/token/ERC20/ERC20Permit.sol\n', '/**\n', ' * @author Georgios Konstantopoulos\n', ' * @dev Extension of {ERC20} that allows token holders to use their tokens\n', ' * without sending any transactions by setting {IERC20-allowance} with a\n', ' * signature using the {permit} method, and then spend them via\n', ' * {IERC20-transferFrom}.\n', ' *\n', ' * The {permit} signature mechanism conforms to the {IERC2612} interface.\n', ' */\n', 'abstract contract ERC20Permit is ERC20, IERC2612 {\n', '    mapping (address => uint256) public override nonces;\n', '\n', '    bytes32 public immutable PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public immutable DOMAIN_SEPARATOR;\n', '    constructor(string memory name_, string memory symbol_) internal ERC20(name_, symbol_) {\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256(bytes(name_)),\n', '                keccak256(bytes("1")),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC2612-permit}.\n', '     *\n', '     * In cases where the free option is not a concern, deadline can simply be\n', '     * set to uint(-1), so it should be seen as an optional parameter\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '        require(deadline >= block.timestamp, "ERC20Permit: expired deadline");\n', '\n', '        bytes32 hashStruct = keccak256(\n', '            abi.encode(\n', '                PERMIT_TYPEHASH,\n', '                owner,\n', '                spender,\n', '                amount,\n', '                nonces[owner]++,\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                hashStruct\n', '            )\n', '        );\n', '\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(\n', '            signer != address(0) && signer == owner,\n', '            "ERC20Permit: invalid signature"\n', '        );\n', '\n', '        _approve(owner, spender, amount);\n', '    }\n', '\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 constant _NOT_ENTERED = 1;\n', '    uint256 constant _ENTERED = 2;\n', '\n', '    uint256 _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'interface IChiToken {\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '}\n', '\n', '// \n', 'interface IMasterchef {\n', '    function BONUS_MULTIPLIER() external view returns (uint256);\n', '\n', '    function add(\n', '        uint256 _allocPoint,\n', '        address _lpToken,\n', '        bool _withUpdate\n', '    ) external;\n', '\n', '    function bonusEndBlock() external view returns (uint256);\n', '\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '\n', '    function dev(address _devaddr) external;\n', '\n', '    function devFundDivRate() external view returns (uint256);\n', '\n', '    function devaddr() external view returns (address);\n', '\n', '    function emergencyWithdraw(uint256 _pid) external;\n', '\n', '    function getMultiplier(uint256 _from, uint256 _to)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function massUpdatePools() external;\n', '\n', '    function owner() external view returns (address);\n', '\n', '    function pendingMM(uint256 _pid, address _user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function mm() external view returns (address);\n', '\n', '    function mmPerBlock() external view returns (uint256);\n', '\n', '    function poolInfo(uint256)\n', '        external\n', '        view\n', '        returns (\n', '            address lpToken,\n', '            uint256 allocPoint,\n', '            uint256 lastRewardBlock,\n', '            uint256 accMMPerShare\n', '        );\n', '\n', '    function poolLength() external view returns (uint256);\n', '\n', '    function renounceOwnership() external;\n', '\n', '    function set(\n', '        uint256 _pid,\n', '        uint256 _allocPoint,\n', '        bool _withUpdate\n', '    ) external;\n', '\n', '    function setBonusEndBlock(uint256 _bonusEndBlock) external;\n', '\n', '    function setDevFundDivRate(uint256 _devFundDivRate) external;\n', '\n', '    function setMMPerBlock(uint256 _mmPerBlock) external;\n', '\n', '    function startBlock() external view returns (uint256);\n', '\n', '    function totalAllocPoint() external view returns (uint256);\n', '\n', '    function transferOwnership(address newOwner) external;\n', '\n', '    function updatePool(uint256 _pid) external;\n', '\n', '    function userInfo(uint256, address)\n', '        external\n', '        view\n', '        returns (uint256 amount, uint256 rewardDebt);\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '\n', '    function notifyBuybackReward(uint256 _amount) external;\n', '}\n', '\n', 'interface IERC3156FlashBorrower {\n', '    function onFlashLoan(\n', '        address initiator,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external returns (bytes32);\n', '}\n', '\n', 'interface IERC3156FlashLender {\n', '    /**\n', '     * @dev The amount of currency available to be lent.\n', '     * @param token The loan currency.\n', '     * @return The amount of `token` that can be borrowed.\n', '     */\n', '    function maxFlashLoan(\n', '        address token\n', '    ) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev The fee to be charged for a given loan.\n', '     * @param token The loan currency.\n', '     * @param amount The amount of tokens lent.\n', '     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n', '     */\n', '    function flashFee(\n', '        address token,\n', '        uint256 amount\n', '    ) external view returns (uint256);\n', '\n', '    \n', '    function flashLoan(\n', '        IERC3156FlashBorrower receiver,\n', '        address token,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '}\n', '\n', '// https://github.com/iearn-finance/vaults/blob/master/contracts/vaults/yVault.sol\n', 'contract MMVault is ReentrancyGuard, ERC20Permit, IERC3156FlashLender  {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 public immutable token;\n', '\n', '    IChiToken public constant chi = IChiToken(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    uint256 public min = 9500;\n', '    uint256 public constant max = 10000;\n', '\n', '    uint256 public loanFee = 1;\n', '    uint256 public constant loanFeeMax = 10000;\n', '    bool public loanEnabled = true;\n', '\n', '    address public governance;\n', '    address public timelock;\n', '    address public controller;\n', '\n', '    mapping(address => bool) public keepers;\n', '    mapping(address => bool) public reentrancyWhitelist;\n', '\n', '    uint256 public constant DAY_SECONDS = 86400;\n', '    uint256 public constant lockWindowBuffer = DAY_SECONDS/4;\n', '\n', '    uint256 public lockStartTime;\n', '    uint256 public lockWindow;\n', '    uint256 public withdrawWindow;\n', '    uint256 public earnedTimestamp;\n', '    bool public lockEnabled = false;\n', '    bool public earnOnceEnabled = false;\n', '\n', '    event FlashLoan(address _initiator, address _token, address _receiver, uint256 _amount, uint256 _loanFee);\n', '\n', '    modifier discountCHI() {\n', '        uint256 gasStart = gasleft();\n', '        _;\n', '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '\n', '        if(chi.balanceOf(msg.sender) > 0) {\n', '            chi.freeFromUpTo(msg.sender, (gasSpent + 14154) / 41947);\n', '        }\n', '    }\n', '\n', '    modifier onlyKeepers {\n', '        require(\n', '            keepers[msg.sender] ||\n', '            msg.sender == governance,\n', '            "!keepers"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance(){\n', '        require(msg.sender == governance, "!governance");\n', '        _;\n', '    }\n', '\n', '    modifier canEarn {\n', '        if(lockEnabled){\n', '            require(\n', '                block.timestamp > lockStartTime,\n', '                "!earnTime"\n', '            );\n', '            if(earnOnceEnabled){\n', '                require(\n', '                    block.timestamp.sub(earnedTimestamp) > lockWindow,\n', '                     "!earnTwice");\n', '                if(earnedTimestamp != 0){\n', '                    lockStartTime = getLockCycleEndTime();\n', '                }\n', '                earnedTimestamp = block.timestamp;\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier canWithdraw(uint256 _shares) {\n', '        if(lockEnabled){\n', '            //withdraw locker not work when withdraw amount less than available balance\n', '            if(!withdrawableWithoutLock(_shares)){\n', '                uint256 withdrawStartTimestamp = lockStartTime.add(lockWindow);\n', '                require(\n', '                    block.timestamp > withdrawStartTimestamp &&\n', '                    block.timestamp < withdrawStartTimestamp.add(withdrawWindow),\n', '                    "!withdrawTime"\n', '                );\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\t\n', '    modifier nonReentrantWithWhitelist() {\n', '        // only check if NOT in whitelist\n', '        if (!reentrancyWhitelist[msg.sender]){\n', '            // On the first call to nonReentrantWithWhitelist, _notEntered will be true\n', '            require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '            // Any calls to nonReentrantWithWhitelist after this point will fail\n', '            _status = _ENTERED;\n', '        }\n', '\n', '        _;\t\n', '        \n', '        if (!reentrancyWhitelist[msg.sender]){\n', '            // By storing the original value once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200)\n', '            _status = _NOT_ENTERED;\t\n', '        }\n', '    }\n', '\n', '    constructor(address _token, address _governance, address _timelock, address _controller)\n', '        public\n', '        ERC20Permit(\n', '            string(abi.encodePacked("mushrooming ", ERC20(_token).name())),\n', '            string(abi.encodePacked("m", ERC20(_token).symbol()))\n', '        )\n', '    {\n', '        _setupDecimals(ERC20(_token).decimals());\n', '        token = IERC20(_token);\n', '        governance = _governance;\n', '        timelock = _timelock;\n', '        controller = _controller;\n', '\n', '        //time line: [lockStartTime]|----lockWindow----|----withdrawWindow----|[lockStartTime]|----lockWindow---|........\n', '        lockWindow = (14 * DAY_SECONDS) + lockWindowBuffer;\n', '        withdrawWindow = DAY_SECONDS/2;\n', '        lockStartTime = block.timestamp.add(withdrawWindow);\n', '    }\n', '\n', '    function getName() public pure returns(string memory){\n', '        return "mmVaultV2";\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this)).add(IController(controller).balanceOf(address(token)));\n', '    }\n', '\n', '    function setMin(uint256 _min) external onlyGovernance{\n', '        min = _min;\n', '    }\n', '\n', '    function setGovernance(address _governance) public onlyGovernance{\n', '        governance = _governance;\n', '    }\n', '\n', '    function setTimelock(address _timelock) public {\n', '        require(msg.sender == timelock, "!timelock");\n', '        timelock = _timelock;\n', '    }\n', '\n', '    function setController(address _controller) public {\n', '        require(msg.sender == timelock, "!timelock");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setLoanFee(uint256 _loanFee) public onlyGovernance{\n', '        loanFee = _loanFee;\n', '    }\n', '\n', '    function setLoanEnabled(bool _loanEnabled) public onlyGovernance{\n', '        loanEnabled = _loanEnabled;\n', '    }\n', '\n', '    function addKeeper(address _keeper) public onlyGovernance{\n', '        keepers[_keeper] = true;\n', '    }\n', '\n', '    function removeKeeper(address _keeper) public onlyGovernance{\n', '        keepers[_keeper] = false;\n', '    }\n', '\n', '    function addReentrancyWhitelist(address _whitelist) public onlyGovernance{\n', '        reentrancyWhitelist[_whitelist] = true;\n', '    }\n', '\n', '    function removeReentrancyWhitelist(address _whitelist) public onlyGovernance{\n', '        reentrancyWhitelist[_whitelist] = false;\n', '    }\n', '\n', '    function setLockWindow(uint256 _lockWindow) public onlyGovernance {\n', '        lockWindow = _lockWindow.add(lockWindowBuffer);\n', '    }\n', '\n', '    function setWithdrawWindow(uint256 _withdrawWindow) public onlyGovernance {\n', '        withdrawWindow = _withdrawWindow;\n', '    }\n', '\n', '    function setLockEnabled(bool _enabled) public onlyGovernance {\n', '        lockEnabled = _enabled;\n', '    }\n', '\n', '    function setEarnOnceEnabled(bool _earnOnce) public onlyGovernance {\n', '        earnOnceEnabled = _earnOnce;\n', '    }\n', '\n', '    function resetLockStartTime(uint256 _lockStartTime) public onlyGovernance{\n', '        require(lockEnabled, "!lockEnabled");\n', '\n', '        uint256 withdrawEndTime = getLockCycleEndTime();\n', '        require(block.timestamp >= withdrawEndTime, "Last lock cycle not end");\n', '        require(_lockStartTime > block.timestamp, "!_lockStartTime");\n', '        lockStartTime = _lockStartTime;\n', '    }\n', '\n', '    function getLockCycleEndTime() public view returns (uint256){\n', '        return lockStartTime.add(lockWindow).add(withdrawWindow);\n', '    }\n', '\n', '    function withdrawableWithoutLock(uint256 _shares) public view returns(bool){\n', '        uint256 _withdrawAmount = (balance().mul(_shares)).div(totalSupply());\n', '        return _withdrawAmount <= token.balanceOf(address(this));\n', '    }\n', '\n', '    // Custom logic in here for how much the vaults allows to be borrowed\n', '    // Sets minimum required on-hand to keep small withdrawals cheap\n', '    function available() public view returns (uint256) {\n', '        return token.balanceOf(address(this)).mul(min).div(max);\n', '    }\n', '\n', '    function earn() public nonReentrant onlyKeepers canEarn {\n', '        uint256 _bal = available();\n', '        token.safeTransfer(controller, _bal);\n', '        IController(controller).earn(address(token), _bal);\n', '    }\n', '\n', '    function depositAll() external {\n', '        deposit(token.balanceOf(msg.sender));\n', '    }\n', '\n', '    function deposit(uint256 _approveAmount, uint256 _amount, uint256 _deadline, uint8 v, bytes32 r, bytes32 s) public {\n', '        require(_approveAmount >= _amount, "!_approveAmount");\n', '        IERC2612(address(token)).permit(msg.sender, address(this), _approveAmount, _deadline, v, r, s);\n', '        deposit(_amount);\n', '    }\n', '\n', '    function deposit(uint256 _amount) public nonReentrant {\n', '        uint256 _pool = balance();\n', '        uint256 _before = token.balanceOf(address(this));\n', '        token.safeTransferFrom(msg.sender, address(this), _amount);\n', '        uint256 _after = token.balanceOf(address(this));\n', '        _amount = _after.sub(_before); // Additional check for deflationary tokens\n', '        uint256 shares = 0;\n', '        if (totalSupply() == 0) {\n', '            shares = _amount;\n', '        } else {\n', '            shares = (_amount.mul(totalSupply())).div(_pool);\n', '        }\n', '        _mint(msg.sender, shares);\n', '    }\n', '\n', '    function withdrawAll() external {\n', '        withdraw(balanceOf(msg.sender));\n', '    }\n', '\n', "    // Used to swap any borrowed reserve over the debt limit to liquidate to 'token'\n", '    function harvest(address reserve, uint256 amount)  external nonReentrant {\n', '        require(msg.sender == controller, "!controller");\n', '        require(reserve != address(token), "token");\n', '        IERC20(reserve).safeTransfer(controller, amount);\n', '    }\n', '\n', '    // No rebalance implementation for lower fees and faster swaps\n', '    function withdraw(uint256 _shares) public nonReentrant canWithdraw(_shares) {\n', '        uint256 r = (balance().mul(_shares)).div(totalSupply());\n', '        _burn(msg.sender, _shares);\n', '\n', '        // Check balance\n', '        uint256 b = token.balanceOf(address(this));\n', '        if (b < r) {\n', '            uint256 _withdraw = r.sub(b);\n', '            IController(controller).withdraw(address(token), _withdraw); //,address(msg.sender));\n', '            uint256 _after = token.balanceOf(address(this));\n', '            uint256 _diff = _after.sub(b);\n', '            if (_diff < _withdraw) {\n', '                r = b.add(_diff);\n', '            }\n', '        }\n', '\n', '        token.safeTransfer(msg.sender, r);\n', '    }\n', '\n', '    function getRatio() public view returns (uint256) {\n', '        return balance().mul(1e18).div(totalSupply());\n', '    }\n', '\n', '    function maxFlashLoan(\n', '        address _token\n', '    ) external override view returns (uint256){\n', '        require(address(_token) == address(token), "!_token");\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function flashFee(\n', '        address _token,\n', '        uint256 amount\n', '    ) external override view returns (uint256){\n', '        require(address(_token) == address(token), "!_token");\n', '        return loanFee.mul(amount).div(loanFeeMax);\n', '    }\n', '\n', '    function flashLoan(IERC3156FlashBorrower _receiver, address _token, uint256 _amount, bytes memory _data) public override nonReentrantWithWhitelist discountCHI returns (bool){\n', '        require(loanEnabled == true, "!loanEnabled");\n', '        require(_amount > 0, "amount too small!");\n', '        require(address(_token) == address(token), "!_token");\n', '        uint256 beforeBalance = token.balanceOf(address(this));\n', '        require(beforeBalance > _amount, "balance not enough!");\n', '\n', '        //loanFee\n', '        uint256 _fee = _amount.mul(loanFee).div(loanFeeMax);\n', '\n', '        require(_fee > 0, "fee too small");\n', '\n', '        //transfer token to _receiver\n', '        token.safeTransfer(address(_receiver), _amount);\n', '\n', "        //execute user's logic\n", '        IERC3156FlashBorrower(_receiver).onFlashLoan(address(msg.sender), address(token), _amount, _fee, _data);\n', '\n', '        uint256 afterBalance = token.balanceOf(address(this));\n', '\n', '        require(afterBalance == beforeBalance.add(_fee), "payback amount incorrect!");\n', '\n', '        emit FlashLoan(address(msg.sender), address(token), address(_receiver), _amount, _fee);\n', '        return true;\n', '    }\n', '\n', '}']