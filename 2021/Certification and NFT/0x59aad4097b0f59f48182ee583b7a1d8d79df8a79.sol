['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Pausable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '\n', '\n', '        _paused = false;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IContractRegistry.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IContractRegistry {\n', '    function addressOf(bytes32 contractName) external view returns(address);\n', '}\n', '\n', '// File: contracts/interface/IBancorGovernance.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IBancorGovernance {\n', '    function voteFor(uint256 _id) external;\n', '    function voteAgainst(uint256 _id) external;\n', '    function stake(uint256 _amount) external;\n', '    function unstake(uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/interface/IStakingRewards.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IDSToken {\n', '\n', '}\n', '\n', 'interface IStakingRewards {\n', '    // claims all rewards from providing address\n', '    function claimRewards() external returns (uint256);\n', '    // returns pending rewards from providing address\n', '    function pendingRewards(address provider) external view returns (uint256);\n', '    // returns all staked rewards and the ID of the new position\n', '    function stakeRewards(uint256 maxAmount, IDSToken poolToken) external returns (uint256, uint256);\n', '}\n', '\n', '// File: contracts/interface/ILiquidityProtection.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', 'interface IConverterAnchor {\n', '\n', '}\n', '\n', 'interface ILiquidityProtection {\n', '    function addLiquidity(\n', '        IConverterAnchor _poolAnchor,\n', '        IERC20 _reserveToken,\n', '        uint256 _amount\n', '    ) external payable returns(uint);\n', '    // returns id of deposit\n', '\n', '    function removeLiquidity(uint256 _id, uint32 _portion) external;\n', '\n', '    function removeLiquidityReturn(\n', '        uint256 _id,\n', '        uint32 _portion,\n', '        uint256 _removeTimestamp\n', '    ) external view returns (uint256, uint256, uint256);\n', '    // returns amount in the reserve token\n', '    // returns actual return amount in the reserve token\n', '    // returns compensation in the network token\n', '\n', '    // call 24 hours after removing liquidity\n', '    function claimBalance(uint256 _startIndex, uint256 _endIndex) external;\n', '}\n', '\n', '// File: contracts/interface/ILiquidityProvider.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', 'interface ILiquidityProvider {\n', '    function initializeAndAddLiquidity(\n', '        IContractRegistry _contractRegistry,\n', '        address _xbntContract,\n', '        IERC20 _bnt,\n', '        IERC20 _vbnt,\n', '        address _poolAnchor,\n', '        uint256 _amount\n', '    ) external returns(uint);\n', '    function removeLiquidity(uint256 _id) external;\n', '    function claimRewards() external returns(uint256);\n', '    function claimBalance() external;\n', '    function claimRewardsAndRemoveLiquidity() external returns(uint256);\n', '    function claimAndRestake(address _poolToken) external returns(uint256, uint256);\n', '    function pendingRewards() external view returns(uint256);\n', '}\n', '\n', '// File: contracts/interface/IMinimalProxyFactory.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IMinimalProxyFactory {\n', '    function deploy(uint256 salt, address implementation) external returns(address proxyAddress);\n', '}\n', '\n', '// File: contracts/interface/IDelegateRegistry.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'interface IDelegateRegistry {\n', '    function setDelegate(bytes32 id, address delegate) external;\n', '}\n', '\n', '// File: contracts/interface/IxBNT.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', 'interface IxBNT {\n', '    function getProxyAddressDepositIds(address proxyAddress) external view returns(uint256[] memory);\n', '}\n', '\n', '// File: contracts/helpers/LiquidityProvider.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquidityProvider {\n', '    bool private initialized;\n', '\n', '    IContractRegistry private contractRegistry;\n', '    IERC20 private bnt;\n', '    IERC20 private vbnt;\n', '\n', '    address private xbnt;\n', '    uint256 public nextDepositIndexToClaimBalance;\n', '\n', '    function initializeAndAddLiquidity(\n', '        IContractRegistry _contractRegistry,\n', '        address _xbnt,\n', '        IERC20 _bnt,\n', '        IERC20 _vbnt,\n', '        address _poolToken,\n', '        uint256 _amount\n', '    ) external returns(uint256) {\n', "        require(msg.sender == _xbnt, 'Invalid caller');\n", "        require(!initialized, 'Already initialized');\n", '        initialized = true;\n', '\n', '        contractRegistry = _contractRegistry;\n', '        xbnt = _xbnt;\n', '        bnt = _bnt;\n', '        vbnt = _vbnt;\n', '\n', '        return _addLiquidity(_poolToken, _amount);\n', '    }\n', '\n', '    function _addLiquidity(\n', '        address _poolToken,\n', '        uint256 _amount\n', '    ) private returns(uint256 id) {\n', '        ILiquidityProtection lp = getLiquidityProtectionContract();\n', '        bnt.approve(address(lp), uint(-1));\n', '\n', '        id = lp.addLiquidity(IConverterAnchor(_poolToken), bnt, _amount);\n', '\n', '        _retrieveVbntBalance();\n', '    }\n', '\n', '    /*\n', "     * @notice Restake this proxy's rewards\n", '     */\n', '    function claimAndRestake(address _poolToken) external onlyXbntContract returns(uint256 newDepositId, uint256 restakedBal){\n', '        (, newDepositId) = getStakingRewardsContract().stakeRewards(uint(-1), IDSToken(_poolToken));\n', '        restakedBal = _retrieveVbntBalance();\n', '    }\n', '\n', '    function claimRewards() external onlyXbntContract returns(uint256 rewardsAmount){\n', '        rewardsAmount = _claimRewards();\n', '    }\n', '\n', '    function _claimRewards() private returns(uint256 rewards){\n', '        rewards = getStakingRewardsContract().claimRewards();\n', '        _retrieveBntBalance();\n', '    }\n', '\n', '    function _removeLiquidity(ILiquidityProtection _lp, uint256 _id) private {\n', '        _lp.removeLiquidity(_id, 1000000); // full PPM resolution\n', '    }\n', '\n', '    /*\n', '     * @notice Initiate final exit from this proxy\n', '     */\n', '    function claimRewardsAndRemoveLiquidity() external onlyXbntContract returns(uint256 rewards) {\n', '        rewards = _claimRewards();\n', '        uint256[] memory depositIds = getDepositIds();\n', '\n', '        ILiquidityProtection lp = getLiquidityProtectionContract();\n', '        vbnt.approve(address(lp), uint(-1));\n', '\n', '        for(uint256 i = 0; i < depositIds.length; i++){\n', '            _removeLiquidity(lp, depositIds[i]);\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @notice Called 24 hours after `claimRewardsAndRemoveLiquidity`\n', '     */\n', '    function claimBalance() external onlyXbntContract {\n', '        getLiquidityProtectionContract().claimBalance(0, getDepositIds().length);\n', '        _retrieveBntBalance();\n', '    }\n', '\n', '    function _retrieveBntBalance() private {\n', '        bnt.transfer(xbnt, bnt.balanceOf(address(this)));\n', '    }\n', '\n', '    function _retrieveVbntBalance() private returns(uint256 vbntBal) {\n', '        vbntBal = vbnt.balanceOf(address(this));\n', '        vbnt.transfer(xbnt, vbntBal);\n', '    }\n', '\n', '    function pendingRewards() external view returns(uint){\n', '        return getStakingRewardsContract().pendingRewards(address(this));\n', '    }\n', '\n', '    function getStakingRewardsContract() private view returns(IStakingRewards){\n', "        return IStakingRewards(contractRegistry.addressOf('StakingRewards'));\n", '    }\n', '\n', '    function getLiquidityProtectionContract() private view returns(ILiquidityProtection){\n', "        return ILiquidityProtection(contractRegistry.addressOf('LiquidityProtection'));\n", '    }\n', '\n', '    function getDepositIds() private view returns(uint256[] memory){\n', '        return IxBNT(xbnt).getProxyAddressDepositIds(address(this));\n', '    }\n', '\n', '    modifier onlyXbntContract {\n', "        require(msg.sender == xbnt, 'Invalid caller');\n", '        _;\n', '    }\n', '}\n', '\n', '// File: contracts/xBNT.sol\n', '\n', 'pragma solidity 0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IBancorNetwork {\n', '    function convertByPath(\n', '        address[] calldata _path,\n', '        uint256 _amount,\n', '        uint256 _minReturn,\n', '        address _beneficiary,\n', '        address _affiliateAccount,\n', '        uint256 _affiliateFee\n', '    ) external payable returns (uint256);\n', '\n', '    function rateByPath(address[] calldata _path, uint256 _amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function conversionPath(IERC20 _sourceToken, IERC20 _targetToken)\n', '        external\n', '        view\n', '        returns (address[] memory);\n', '}\n', '\n', 'contract xBNT is ERC20UpgradeSafe, OwnableUpgradeSafe, PausableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 private bnt;\n', '    IERC20 private vbnt;\n', '    IContractRegistry private contractRegistry;\n', '    IBancorGovernance internal bancorGovernance;\n', '    IMinimalProxyFactory private proxyFactory;\n', '\n', "    bytes32 private constant bancorNetworkName = 'BancorNetwork';\n", "    bytes32 private constant stakingRewardsName = 'StakingRewards';\n", "    bytes32 private constant liquidityProtectionName = 'LiquidityProtection';\n", '\n', '    uint32 private constant PPM = 1000000;\n', '    uint256 private constant DEC_18 = 1e18;\n', '    uint256 private constant BUFFER_TARGET = 20; // 5%\n', '    uint256 private constant MAX_UINT = 2**256 - 1;\n', '    uint256 private constant WAITING_PERIOD = 2 days;\n', '    uint256 private constant INITIAL_SUPPLY_MULTIPLIER = 10;\n', '    uint256 private constant LIQUIDATION_TIME_PERIOD = 4 weeks;\n', '\n', '    uint256 private lpImplementationChangedTimestamp;\n', '    uint256 private governanceAddressChangedTimestamp;\n', '\n', '    uint256 public adminActiveTimestamp;\n', '\n', '    uint256 public lowestActiveProxyIndex;\n', '    uint256 public nextProxyIndex;\n', '\n', '    uint256 public totalAllocatedNav;\n', '    uint256 public pendingRewardsContributionToNav;\n', '\n', '    uint256 public withdrawableBntFees;\n', '\n', '    address private manager;\n', '    address private manager2;\n', '    address private protocolMinter;\n', '    address internal liquidityProviderImplementation;\n', '\n', '    address private queuedLiquidityProviderImplementation;\n', '    address private queuedGovernanceAddress;\n', '\n', '    address private constant ZERO_ADDRESS = address(0);\n', '\n', '    struct FeeDivisors {\n', '        uint256 mintFee;\n', '        uint256 burnFee;\n', '        uint256 claimFee;\n', '    }\n', '\n', '    FeeDivisors public feeDivisors;\n', '\n', '    struct Deposit {\n', '        address proxyAddress;\n', '        uint256 depositId;\n', '        uint256 initialContribution;\n', '        uint256 latestContributionToNav;\n', '    }\n', '\n', '    mapping(uint256 => Deposit) public depositIdToDeposit;\n', '\n', '    struct ProxyData {\n', '        uint256[] depositIds;\n', '        uint256 pendingRewardsContributionToNav;\n', '        uint256 deployedBnt;\n', '        bool balanceClaimed;\n', '    }\n', '\n', '    mapping(address => ProxyData) private proxyAddressToData;\n', '    mapping(uint256 => address) public proxyIndexToAddress;\n', '\n', '    //  BlockLock logic ; Implements locking of mint, burn, transfer and transferFrom\n', '    //  functions via a notLocked modifier\n', '    //  Functions are locked per address.\n', '\n', '    // last block for which this address is timelocked\n', '    mapping(address => uint256) public lastLockedBlock;\n', '\n', '    // how many blocks are the functions locked for\n', '    uint256 private constant BLOCK_LOCK_COUNT = 6;\n', '\n', '    modifier notLocked(address lockedAddress) {\n', '        require(\n', '            lastLockedBlock[lockedAddress] <= block.number,\n', "            'Function is locked for this address'\n", '        );\n', '        _;\n', '        lastLockedBlock[lockedAddress] = block.number + BLOCK_LOCK_COUNT;\n', '    }\n', '\n', '    event AddLiquidity(\n', '        address poolToken,\n', '        uint256 amount,\n', '        uint256 depositId,\n', '        uint256 proxyIndex,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event ClaimRestake(\n', '        uint256 proxyIndex,\n', '        uint256 amount,\n', '        uint256 depositId,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event ClaimRemove(uint256 proxyIndex, uint256 rewardsClaimed);\n', '\n', '    event ClaimRewards(uint256 proxyIndex, uint256 rewardsClaimed);\n', '\n', '    event ClaimBalance(uint256 proxyIndex);\n', '\n', '    event RewardsNavUpdated(\n', '        uint256 previousRewardsNav,\n', '        uint256 newRewardsNav,\n', '        uint256 timestamp\n', '    );\n', '\n', '    event KeyAddressChange();\n', '\n', '    function initialize(\n', '        IERC20 _bnt,\n', '        IERC20 _vbnt,\n', '        IContractRegistry _contractRegistry,\n', '        IBancorGovernance _bancorGovernance,\n', '        IMinimalProxyFactory _proxyFactory,\n', '        address _liquidityProviderImplementation,\n', '        address _protocolMinter,\n', '        uint256 _mintFeeDivisor,\n', '        uint256 _burnFeeDivisor,\n', '        uint256 _claimFeeDivisor,\n', '        uint256 _initialMint,\n', '        string memory _symbol\n', '    ) public initializer {\n', "        __ERC20_init('xBNT', _symbol);\n", '        __Ownable_init();\n', '        __Pausable_init();\n', '\n', '        bnt = _bnt;\n', '        vbnt = _vbnt;\n', '        contractRegistry = _contractRegistry;\n', '        bancorGovernance = _bancorGovernance;\n', '        proxyFactory = _proxyFactory;\n', '        liquidityProviderImplementation = _liquidityProviderImplementation;\n', '\n', '        protocolMinter = _protocolMinter;\n', '\n', '        _mint(msg.sender, _initialMint);\n', '        _setFeeDivisors(_mintFeeDivisor, _burnFeeDivisor, _claimFeeDivisor);\n', '        _updateAdminActiveTimestamp();\n', '        _pause();\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                          User-Facing                                      */\n', '    /* ========================================================================================= */\n', '\n', '    /*\n', '     * @notice Mint xBNT using ETH\n', '     * @param minReturn: BancorNetwork trade minReturn\n', '     */\n', '    function mint(uint256 minReturn)\n', '        external\n', '        payable\n', '        whenNotPaused\n', '        notLocked(msg.sender)\n', '    {\n', "        require(msg.value > 0, 'Must send ETH');\n", '\n', '        address[] memory path = new address[](3);\n', '        path[0] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '        path[1] = 0xb1CD6e4153B2a390Cf00A6556b0fC1458C4A5533; // ETH_BNT_ANCHOR\n', '        path[2] = address(bnt);\n', '\n', '        uint256 incrementalBnt =\n', '            IBancorNetwork(contractRegistry.addressOf(bancorNetworkName))\n', '                .convertByPath{value: msg.value}(\n', '                path,\n', '                msg.value,\n', '                minReturn,\n', '                ZERO_ADDRESS,\n', '                ZERO_ADDRESS,\n', '                0\n', '            );\n', '\n', '        _mintInternal(incrementalBnt, false);\n', '    }\n', '\n', '    /*\n', '     * @notice Mint xBNT using BNT\n', '     * @notice Must run approval first\n', '     * @param bntAmount: BNT amount\n', '     */\n', '    function mintWithToken(uint256 bntAmount)\n', '        external\n', '        whenNotPaused\n', '        notLocked(msg.sender)\n', '    {\n', "        require(bntAmount > 0, 'Must send BNT');\n", '\n', '        bnt.transferFrom(msg.sender, address(this), bntAmount);\n', '\n', '        _mintInternal(bntAmount, msg.sender == protocolMinter);\n', '    }\n', '\n', '    function _mintInternal(uint256 _incrementalBnt, bool _isProtocolMinter)\n', '        private\n', '    {\n', '        uint256 fee;\n', '        if (!_isProtocolMinter) {\n', '            fee = _calculateAndIncrementFee(\n', '                _incrementalBnt,\n', '                feeDivisors.mintFee\n', '            );\n', '        }\n', '\n', '        uint256 mintAmount =\n', '            calculateMintAmount(_incrementalBnt.sub(fee), totalSupply());\n', '\n', '        super._mint(msg.sender, mintAmount);\n', '    }\n', '\n', '    function calculateMintAmount(uint256 incrementalBnt, uint256 totalSupply)\n', '        public\n', '        view\n', '        returns (uint256 mintAmount)\n', '    {\n', '        if (totalSupply == 0)\n', '            return incrementalBnt.mul(INITIAL_SUPPLY_MULTIPLIER);\n', '\n', '        mintAmount = (incrementalBnt).mul(totalSupply).div(\n', '            getNav().sub(incrementalBnt)\n', '        );\n', '    }\n', '\n', '    /*\n', '     * @notice Burn xBNT\n', '     * @notice Will fail if pro rata BNT is more than buffer balance\n', '     * @param redeemAmount: xBNT to burn\n', '     * @param redeemForEth: Redeem for ETH or BNT\n', '     * @param minReturn: If redeem for ETH, BancorNetwork minReturn\n', '     */\n', '    function burn(\n', '        uint256 redeemAmount,\n', '        bool redeemForEth,\n', '        uint256 minReturn\n', '    ) public notLocked(msg.sender) {\n', "        require(redeemAmount > 0, 'Must send xBNT');\n", '\n', '        uint256 bufferBalance = getBufferBalance();\n', '        uint256 proRataBnt = getNav().mul(redeemAmount).div(totalSupply());\n', '        require(\n', '            proRataBnt <= bufferBalance,\n', "            'Burn exceeds available liquidity'\n", '        );\n', '\n', '        super._burn(msg.sender, redeemAmount);\n', '\n', '        uint256 fee;\n', '        if (msg.sender != protocolMinter) {\n', '            fee = _calculateAndIncrementFee(proRataBnt, feeDivisors.burnFee);\n', '        }\n', '\n', '        if (redeemForEth) {\n', '            address bancorNetworkAddress =\n', '                contractRegistry.addressOf(bancorNetworkName);\n', '            _approveIfNecessary(bnt, bancorNetworkAddress); // in case registry addr has changed\n', '\n', '            address[] memory path = new address[](3);\n', '            path[0] = address(bnt);\n', '            path[1] = 0xb1CD6e4153B2a390Cf00A6556b0fC1458C4A5533; // ETH_BNT_ANCHOR\n', '            path[2] = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '            IBancorNetwork(bancorNetworkAddress).convertByPath(\n', '                path,\n', '                proRataBnt.sub(fee),\n', '                minReturn,\n', '                msg.sender,\n', '                ZERO_ADDRESS,\n', '                0\n', '            );\n', '        } else {\n', '            bnt.transfer(msg.sender, proRataBnt.sub(fee));\n', '        }\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                      Liquidity Provision                                  */\n', '    /* ========================================================================================= */\n', '\n', '    /*\n', '     * @notice Makes BNT deposit on Bancor\n', '     * @notice Deploys new proxy\n', '     * @notice Allocates buffer BNT to allocated NAV\n', '     * @param _poolAnchor: Address of liquidity pool\n', '     * @param _amount: BNT amount\n', '     */\n', '    function addLiquidity(IConverterAnchor _poolAnchor, uint256 _amount)\n', '        external\n', '        onlyOwnerOrManager\n', '    {\n', '        uint256 salt =\n', '            uint256(keccak256(abi.encodePacked(nextProxyIndex, _amount)));\n', '        address liquidityProviderProxy =\n', '            proxyFactory.deploy(salt, liquidityProviderImplementation);\n', '\n', '        bnt.transfer(liquidityProviderProxy, _amount);\n', '\n', '        uint256 depositId =\n', '            ILiquidityProvider(liquidityProviderProxy)\n', '                .initializeAndAddLiquidity(\n', '                contractRegistry,\n', '                address(this),\n', '                bnt,\n', '                vbnt,\n', '                address(_poolAnchor),\n', '                _amount\n', '            );\n', '\n', '        Deposit memory newDeposit =\n', '            Deposit({\n', '                proxyAddress: liquidityProviderProxy,\n', '                depositId: depositId,\n', '                initialContribution: _amount,\n', '                latestContributionToNav: _amount\n', '            });\n', '\n', '        emit AddLiquidity(\n', '            address(_poolAnchor),\n', '            _amount,\n', '            depositId,\n', '            nextProxyIndex,\n', '            block.timestamp\n', '        );\n', '\n', '        depositIdToDeposit[depositId] = newDeposit;\n', '\n', '        ProxyData storage proxyData =\n', '            proxyAddressToData[liquidityProviderProxy];\n', '        proxyData.depositIds.push(depositId);\n', '        proxyData.deployedBnt = _amount;\n', '\n', '        proxyIndexToAddress[nextProxyIndex] = liquidityProviderProxy;\n', '        nextProxyIndex++;\n', '\n', '        totalAllocatedNav = totalAllocatedNav.add(_amount);\n', '\n', '        _stake(_amount);\n', '        _updateAdminActiveTimestamp();\n', '    }\n', '\n', '    /*\n', '     * @notice Restakes rewards from current deposit into new deposit\n', '     * @notice Deploys capital to same proxy as current deposit\n', '     * @notice Allocates from rewards NAV to allocated NAV\n', '     * @param proxyIndex: Proxy index\n', '     * @param poolToken: Pool to restake rewards to\n', '     */\n', '    function claimAndRestake(uint256 proxyIndex, address poolToken)\n', '        external\n', '        onlyOwnerOrManager\n', '    {\n', '        address proxyAddress = proxyIndexToAddress[proxyIndex];\n', '        ProxyData storage proxyData = proxyAddressToData[proxyAddress];\n', '\n', '        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\n', '\n', '        (uint256 newDepositId, uint256 restakedBal) =\n', '            lpProxy.claimAndRestake(poolToken);\n', '\n', '        // fee effectively deducted from buffer balance\n', '        // because full rewards are restaked without cycling through xBNT\n', '        _calculateAndIncrementFee(restakedBal, feeDivisors.claimFee);\n', '\n', '        proxyData.depositIds.push(newDepositId);\n', '        proxyData.deployedBnt = proxyData.deployedBnt.add(restakedBal);\n', '\n', '        // zero out restaked rewards\n', '        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\n', '            proxyData.pendingRewardsContributionToNav\n', '        );\n', '        proxyData.pendingRewardsContributionToNav = 0;\n', '\n', '        // add restaked rewards back to nav\n', '        totalAllocatedNav = totalAllocatedNav.add(restakedBal);\n', '\n', '        depositIdToDeposit[newDepositId] = Deposit({\n', '            proxyAddress: proxyAddress,\n', '            depositId: newDepositId,\n', '            initialContribution: restakedBal,\n', '            latestContributionToNav: restakedBal\n', '        });\n', '\n', '        emit ClaimRestake(\n', '            proxyIndex,\n', '            restakedBal,\n', '            newDepositId,\n', '            block.timestamp\n', '        );\n', '\n', '        _stake(restakedBal);\n', '        _updateAdminActiveTimestamp();\n', '    }\n', '\n', '    /*\n', '     * @notice Iterates through proxies to calculate current available rewards\n', '     * @notice Must be called daily or more to stay current with NAV\n', '     * @notice We specify begin/end indices in case num proxies approaches gas limit\n', '     * @param beginProxyIndexIterator: proxyIndex to begin iteration\n', '     * @param endProxyIndexIterator: proxyIndex to end iteration\n', '     */\n', '    function updatePendingRewardsContributionToNav(\n', '        uint256 beginProxyIndexIterator,\n', '        uint256 endProxyIndexIterator\n', '    ) external onlyOwnerOrManager {\n', '        require(\n', '            beginProxyIndexIterator >= lowestActiveProxyIndex,\n', "            'Invalid index'\n", '        );\n', "        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');\n", '        require(\n', '            endProxyIndexIterator > beginProxyIndexIterator,\n', "            'Invalid order'\n", '        );\n', '\n', '        IStakingRewards stakingRewards = getStakingRewardsContract();\n', '\n', '        uint256 replacedPendingRewardsContributionToNav;\n', '        uint256 updatedPendingRewardsContributionToNav;\n', '\n', '        for (uint256 i = lowestActiveProxyIndex; i < nextProxyIndex; i++) {\n', '            address proxyAddress = proxyIndexToAddress[i];\n', '            replacedPendingRewardsContributionToNav = replacedPendingRewardsContributionToNav\n', '                .add(\n', '                proxyAddressToData[proxyAddress].pendingRewardsContributionToNav\n', '            );\n', '\n', '            uint256 newContributionToRewardsNav =\n', '                stakingRewards.pendingRewards(proxyAddress);\n', '\n', '            proxyAddressToData[proxyAddress]\n', '                .pendingRewardsContributionToNav = newContributionToRewardsNav;\n', '            updatedPendingRewardsContributionToNav = updatedPendingRewardsContributionToNav\n', '                .add(newContributionToRewardsNav);\n', '        }\n', '\n', '        emit RewardsNavUpdated(\n', '            pendingRewardsContributionToNav,\n', '            updatedPendingRewardsContributionToNav,\n', '            block.timestamp\n', '        );\n', '\n', '        pendingRewardsContributionToNav = pendingRewardsContributionToNav\n', '            .add(updatedPendingRewardsContributionToNav)\n', '            .sub(replacedPendingRewardsContributionToNav);\n', '    }\n', '\n', '    /*\n', '     * @notice Updates NAV for value of deposits\n', '     * @notice Needs to be called weekly at least\n', '     * @notice Due to IL protection, allocated NAV is assumed to be the greater of value\n', '     * of initial deposit or  removeLiquidityReturn\n', '     * @notice We specify begin/end indices in case num deposits approaches gas limit\n', '     * @param beginProxyIndexIterator: proxyIndex to begin iteration\n', '     * @param endProxyIndexIterator: proxyIndex to end iteration\n', '     */\n', '    function updateTotalAllocatedNav(\n', '        uint256 beginProxyIndexIterator,\n', '        uint256 endProxyIndexIterator\n', '    ) external onlyOwnerOrManager {\n', '        require(\n', '            beginProxyIndexIterator >= lowestActiveProxyIndex,\n', "            'Invalid index'\n", '        );\n', "        require(endProxyIndexIterator <= nextProxyIndex, 'Invalid index');\n", '\n', '        ILiquidityProtection lp = getLiquidityProtectionContract();\n', '\n', '        uint256[] memory depositIds;\n', '        uint256 newContributionToAllocatedNav;\n', '\n', '        for (\n', '            uint256 i = beginProxyIndexIterator;\n', '            i < endProxyIndexIterator;\n', '            i++\n', '        ) {\n', '            depositIds = proxyAddressToData[proxyIndexToAddress[i]].depositIds;\n', '\n', '            for (uint256 j = 0; j < depositIds.length; j++) {\n', '                (newContributionToAllocatedNav, , ) = lp.removeLiquidityReturn(\n', '                    depositIds[j],\n', '                    PPM,\n', '                    block.timestamp\n', '                );\n', '\n', '                Deposit storage deposit = depositIdToDeposit[depositIds[j]];\n', '\n', '                totalAllocatedNav = totalAllocatedNav\n', '                    .sub(deposit.latestContributionToNav)\n', '                    .add(newContributionToAllocatedNav);\n', '                deposit.latestContributionToNav = newContributionToAllocatedNav;\n', '            }\n', '        }\n', '    }\n', '\n', '    /*\n', '     * @notice Removes all deposits from proxy at lowestActiveProxyIndex\n', '     */\n', '    function claimRewardsAndRemoveLiquidity() external onlyOwnerOrManager {\n', '        _claimRewardsAndRemoveLiquidity();\n', '        _updateAdminActiveTimestamp();\n', '    }\n', '\n', '    function emergencyClaimAndRemove() external liquidationTimeElapsed {\n', '        _claimRewardsAndRemoveLiquidity();\n', '    }\n', '\n', '    function _claimRewardsAndRemoveLiquidity() private {\n', '        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];\n', '        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\n', '        ProxyData storage proxyData = proxyAddressToData[proxyAddress];\n', '\n', '        // rewards nav reallocated implicitly to buffer balance\n', '        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\n', '            proxyData.pendingRewardsContributionToNav\n', '        );\n', '        proxyData.pendingRewardsContributionToNav = 0;\n', '\n', '        _unstake(proxyData.deployedBnt);\n', '        vbnt.transfer(proxyAddress, proxyData.deployedBnt);\n', '\n', '        uint256 rewardsClaimed = lpProxy.claimRewardsAndRemoveLiquidity();\n', '        _calculateAndIncrementFee(rewardsClaimed, feeDivisors.claimFee);\n', '\n', '        emit ClaimRemove(lowestActiveProxyIndex, rewardsClaimed);\n', '\n', "        // we don't deduct totalAllocatedNav yet because we need to wait\n", '        // 24 hours to `claimBalance`. Only rewards are immediately retrieved\n', '\n', '        lowestActiveProxyIndex++;\n', '        _updateAdminActiveTimestamp();\n', '    }\n', '\n', '    /*\n', '     * @notice Second step in removal process\n', '     * @notice Claims deposits balance 24 hrs after `claimRewardsAndRemoveLiquidity` called\n', '     * @param proxyIndex: proxyIndex\n', '     */\n', '    function claimBalance(uint256 proxyIndex) external onlyOwnerOrManager {\n', '        _claimBalance(proxyIndex);\n', '        _updateAdminActiveTimestamp();\n', '    }\n', '\n', '    function emergencyClaimBalance(uint256 proxyIndex)\n', '        external\n', '        liquidationTimeElapsed\n', '    {\n', '        _claimBalance(proxyIndex);\n', '    }\n', '\n', '    function _claimBalance(uint256 _proxyIndex) private {\n', '        address proxyAddress = proxyIndexToAddress[_proxyIndex];\n', '        ProxyData memory proxyData = proxyAddressToData[proxyAddress];\n', '\n', "        require(!proxyData.balanceClaimed, 'Already claimed');\n", '        proxyAddressToData[proxyAddress].balanceClaimed = true;\n', '\n', '        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\n', '        lpProxy.claimBalance();\n', '\n', '        uint256 contributionToTotalAllocatedNav;\n', '\n', '        uint256[] memory depositIds = proxyData.depositIds;\n', '        for (uint256 i = 0; i < depositIds.length; i++) {\n', '            contributionToTotalAllocatedNav = contributionToTotalAllocatedNav\n', '                .add(depositIdToDeposit[depositIds[i]].latestContributionToNav);\n', '        }\n', '\n', '        emit ClaimBalance(_proxyIndex);\n', '\n', '        // allocatedNav now becomes bnt buffer balance\n', '        totalAllocatedNav = totalAllocatedNav.sub(\n', '            contributionToTotalAllocatedNav\n', '        );\n', '    }\n', '\n', '    /*\n', '     * @notice Claims rewards from a proxy without restaking\n', '     * @notice Will reset rewards multiplier - use sparingly when buffer balance needed\n', '     */\n', '    function claimRewards(uint256 proxyIndex) external onlyOwnerOrManager {\n', '        address proxyAddress = proxyIndexToAddress[lowestActiveProxyIndex];\n', '        ILiquidityProvider lpProxy = ILiquidityProvider(proxyAddress);\n', '\n', '        uint256 proxyContributionToRewardsNav =\n', '            getProxyAddressRewardsContributionToNav(proxyAddress);\n', '        pendingRewardsContributionToNav = pendingRewardsContributionToNav.sub(\n', '            proxyContributionToRewardsNav\n', '        );\n', '        proxyAddressToData[proxyAddress].pendingRewardsContributionToNav = 0;\n', '\n', '        uint256 rewards = lpProxy.claimRewards();\n', '        _calculateAndIncrementFee(rewards, feeDivisors.claimFee);\n', '        _updateAdminActiveTimestamp();\n', '\n', '        emit ClaimRewards(proxyIndex, rewards);\n', '    }\n', '\n', '    function getLiquidityProtectionContract()\n', '        public\n', '        view\n', '        returns (ILiquidityProtection)\n', '    {\n', '        return\n', '            ILiquidityProtection(\n', '                contractRegistry.addressOf(liquidityProtectionName)\n', '            );\n', '    }\n', '\n', '    function getStakingRewardsContract() public view returns (IStakingRewards) {\n', '        return IStakingRewards(contractRegistry.addressOf(stakingRewardsName));\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                             Utils                                         */\n', '    /* ========================================================================================= */\n', '\n', '    function getProxyAddressDepositIds(address proxyAddress)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        return proxyAddressToData[proxyAddress].depositIds;\n', '    }\n', '\n', '    function getProxyAddressRewardsContributionToNav(address proxyAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return proxyAddressToData[proxyAddress].pendingRewardsContributionToNav;\n', '    }\n', '\n', '    function changeLiquidityProviderImplementation(address newImplementation)\n', '        external\n', '        onlyOwner\n', '    {\n', '        queuedLiquidityProviderImplementation = newImplementation;\n', '        lpImplementationChangedTimestamp = block.timestamp;\n', '        emit KeyAddressChange();\n', '    }\n', '\n', '    function confirmLiquidityProviderImplementationChange() external onlyOwner {\n', '        require(\n', '            block.timestamp >\n', '                lpImplementationChangedTimestamp.add(WAITING_PERIOD),\n', "            'Too soon'\n", '        );\n', '        liquidityProviderImplementation = queuedLiquidityProviderImplementation;\n', '    }\n', '\n', '    function changeGovernanceAddress(address newAddress) external onlyOwner {\n', '        queuedGovernanceAddress = newAddress;\n', '        governanceAddressChangedTimestamp = block.timestamp;\n', '        emit KeyAddressChange();\n', '    }\n', '\n', '    function confirmGovernanceAddressChange() external onlyOwner {\n', '        require(\n', '            block.timestamp >\n', '                governanceAddressChangedTimestamp.add(WAITING_PERIOD),\n', "            'Too soon'\n", '        );\n', '        bancorGovernance = IBancorGovernance(queuedGovernanceAddress);\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                           Governance                                      */\n', '    /* ========================================================================================= */\n', '\n', '    // we should probably have a setter in case bancor gov address changes\n', '    function _stake(uint256 _amount) private {\n', '        bancorGovernance.stake(_amount);\n', '    }\n', '\n', '    function _unstake(uint256 _amount) private {\n', '        bancorGovernance.unstake(_amount);\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                               NAV                                         */\n', '    /* ========================================================================================= */\n', '\n', '    function getTargetBufferBalance() public view returns (uint256) {\n', '        return getNav().div(BUFFER_TARGET);\n', '    }\n', '\n', '    function getNav() public view returns (uint256) {\n', '        return\n', '            totalAllocatedNav.add(getRewardsContributionToNav()).add(\n', '                getBufferBalance()\n', '            );\n', '    }\n', '\n', '    function getRewardsContributionToNav() public view returns (uint256) {\n', '        uint256 unassessedFees =\n', '            pendingRewardsContributionToNav.div(feeDivisors.claimFee);\n', '        return pendingRewardsContributionToNav.sub(unassessedFees);\n', '    }\n', '\n', '    function getBufferBalance() public view returns (uint256) {\n', '        uint256 bntBal = bnt.balanceOf(address(this));\n', '        if (bntBal < withdrawableBntFees) return 0;\n', '        return bntBal.sub(withdrawableBntFees);\n', '    }\n', '\n', '    function _calculateFee(uint256 _value, uint256 _feeDivisor)\n', '        internal\n', '        pure\n', '        returns (uint256 fee)\n', '    {\n', '        if (_feeDivisor > 0 && _value > 0) {\n', '            fee = _value.div(_feeDivisor);\n', '        }\n', '    }\n', '\n', '    function _incrementWithdrawableBntFees(uint256 _feeAmount) private {\n', '        withdrawableBntFees = withdrawableBntFees.add(_feeAmount);\n', '    }\n', '\n', '    function _calculateAndIncrementFee(uint256 _value, uint256 _feeDivisor)\n', '        private\n', '        returns (uint256 fee)\n', '    {\n', '        fee = _calculateFee(_value, _feeDivisor);\n', '        _incrementWithdrawableBntFees(fee);\n', '    }\n', '\n', '    function setDelegate(\n', '        address delegateRegistry,\n', '        bytes32 id,\n', '        address delegate\n', '    ) external onlyOwnerOrManager {\n', '        IDelegateRegistry(delegateRegistry).setDelegate(id, delegate);\n', '    }\n', '\n', '    /* ========================================================================================= */\n', '    /*                                              Utils                                        */\n', '    /* ========================================================================================= */\n', '\n', '    function _approveIfNecessary(IERC20 _token, address _toApprove) private {\n', '        if (_token.allowance(address(this), _toApprove) == 0) {\n', '            _token.safeApprove(_toApprove, MAX_UINT);\n', '        }\n', '    }\n', '\n', '    function getBancorNetworkContract() public view returns (IBancorNetwork) {\n', '        return IBancorNetwork(contractRegistry.addressOf(bancorNetworkName));\n', '    }\n', '\n', '    function approveVbnt() external onlyOwnerOrManager {\n', '        vbnt.approve(address(bancorGovernance), MAX_UINT);\n', '    }\n', '\n', '    function pauseContract() public onlyOwnerOrManager {\n', '        _pause();\n', '    }\n', '\n', '    function unpauseContract() external onlyOwnerOrManager {\n', '        _unpause();\n', '    }\n', '\n', '    modifier onlyOwnerOrManager {\n', '        require(\n', '            msg.sender == owner() ||\n', '                msg.sender == manager ||\n', '                msg.sender == manager2,\n', "            'Non-admin caller'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier liquidationTimeElapsed {\n', '        require(\n', '            adminActiveTimestamp.add(LIQUIDATION_TIME_PERIOD) < block.timestamp,\n', "            'Liquidation time not elapsed'\n", '        );\n', '        _;\n', '    }\n', '\n', '    /*\n', '     * @notice manager == alternative admin caller to owner\n', '     */\n', '    function setManager(address _manager) external onlyOwner {\n', '        manager = _manager;\n', '    }\n', '\n', '    /*\n', '     * @notice manager2 == alternative admin caller to owner\n', '     */\n', '    function setManager2(address _manager2) external onlyOwner {\n', '        manager2 = _manager2;\n', '    }\n', '\n', '    function setProtocolMinter(address _protocolMinter) external onlyOwner {\n', '        protocolMinter = _protocolMinter;\n', '    }\n', '\n', '    /*\n', '     * @notice Inverse of fee i.e., a fee divisor of 100 == 1%\n', '     * @notice Three fee types\n', '     * @dev Mint fee 0 or <= 2%\n', '     * @dev Burn fee 0 or <= 1%\n', '     * @dev Claim fee 0 <= 4%\n', '     */\n', '    function setFeeDivisors(\n', '        uint256 mintFeeDivisor,\n', '        uint256 burnFeeDivisor,\n', '        uint256 claimFeeDivisor\n', '    ) external onlyOwner {\n', '        _setFeeDivisors(mintFeeDivisor, burnFeeDivisor, claimFeeDivisor);\n', '    }\n', '\n', '    function _setFeeDivisors(\n', '        uint256 _mintFeeDivisor,\n', '        uint256 _burnFeeDivisor,\n', '        uint256 _claimFeeDivisor\n', '    ) private {\n', "        require(_mintFeeDivisor == 0 || _mintFeeDivisor >= 50, 'Invalid fee');\n", "        require(_burnFeeDivisor == 0 || _burnFeeDivisor >= 100, 'Invalid fee');\n", "        require(_claimFeeDivisor >= 25, 'Invalid fee');\n", '        feeDivisors.mintFee = _mintFeeDivisor;\n', '        feeDivisors.burnFee = _burnFeeDivisor;\n', '        feeDivisors.claimFee = _claimFeeDivisor;\n', '    }\n', '\n', '    /*\n', '     * @notice Records admin activity\n', '     * @notice If not certified for a period exceeding LIQUIDATION_TIME_PERIOD,\n', '     * emergencyCooldown and emergencyRedeem become available to non-admin caller\n', '     */\n', '    function _updateAdminActiveTimestamp() private {\n', '        adminActiveTimestamp = block.timestamp;\n', '    }\n', '\n', '    receive() external payable {\n', "        require(msg.sender != tx.origin, 'Errant ETH deposit');\n", '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        notLocked(msg.sender)\n', '        returns (bool)\n', '    {\n', '        return super.transfer(recipient, amount);\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override notLocked(sender) returns (bool) {\n', '        return super.transferFrom(sender, recipient, amount);\n', '    }\n', '}']