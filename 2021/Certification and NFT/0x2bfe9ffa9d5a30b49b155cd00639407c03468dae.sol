['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-08\n', '*/\n', '\n', '// SPDX-License-Identifier: BSD-3-Clause\n', '\n', 'pragma solidity 0.6.11;\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', ' \n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor () public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', 'interface token { function transfer(address receiver, uint amount) external; }\n', '\n', 'contract MassPay is Ownable{\n', '  event Message(string message);\n', '  \n', '  token tokenReward;\n', '  \n', '  address public addressOfTokenUsedAsReward;\n', '  function setTokenReward(address _addr) public onlyOwner {\n', '    tokenReward = token(_addr);\n', '    addressOfTokenUsedAsReward = _addr;\n', '  }\n', '  \n', '  constructor(address _token) public {\n', '      setTokenReward(_token);\n', '  }\n', '  \n', '  function distributeTokens(address[] memory _addrs, uint[] memory _bals,string memory message) public onlyOwner{\n', '\t\temit Message(message);\n', '\t\tfor(uint i = 0; i < _addrs.length; ++i){\n', '\t\t\ttokenReward.transfer(_addrs[i],_bals[i]);\n', '\t\t}\n', '\t}\n', '  \n', '  function distributeEth(address payable[] memory _addrs, uint[] memory _bals, string memory message) public onlyOwner {\n', '    for(uint i = 0; i < _addrs.length; ++i) {\n', '        _addrs[i].transfer(_bals[i]);\n', '    }\n', '    emit Message(message);\n', '  }\n', '  \n', '  // accept ETH\n', '  receive () payable external {}\n', '\n', '  function withdrawEth(uint _value) public onlyOwner {\n', '    msg.sender.transfer(_value);\n', '  }\n', '  \n', '  function withdrawTokens(uint _amount) public onlyOwner {\n', '\t  tokenReward.transfer(owner,_amount);\n', '  }\n', '}']