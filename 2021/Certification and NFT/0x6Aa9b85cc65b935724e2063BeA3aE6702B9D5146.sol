['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import {Address} from "@openzeppelin/contracts/utils/Address.sol";\n', 'import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', 'import "@chainlink/contracts/src/v0.6/interfaces/AggregatorV3Interface.sol";\n', 'import "./lib/FixedPoint.sol";\n', '\n', 'contract Conjure is IERC20, ReentrancyGuard {\n', '\n', '    /// @notice using Openzeppelin contracts for SafeMath and Address\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using FixedPoint for FixedPoint.uq112x112;\n', '    using FixedPoint for FixedPoint.uq144x112;\n', '\n', '    /// @notice presenting the total supply\n', '    uint256 private _totalSupply;\n', '\n', '    /// @notice representing the name of the token\n', '    string private _name;\n', '\n', '    /// @notice representing the symbol of the token\n', '    string private _symbol;\n', '\n', '    /// @notice representing the decimals of the token\n', '    uint8 private immutable _decimals = 18;\n', '\n', '    /// @notice a record of balance of a specific account by address\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /// @notice a record of allowances for a specific address by address to address mapping\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    /// @notice the owner and creator of the contract\n', '    address payable public _owner;\n', '\n', '    /// @notice the owner of the CONJURE factory\n', '    address public _factoryaddress;\n', '\n', '    /// @notice the type of the arb asset (single asset, arb asset) (0... single, 1... arb, 2... index mcap, 3 ... sqrt mcap)\n', '    uint8 public _assetType;\n', '\n', '    /// @notice the address of the collateral contract factory\n', '    address public _collateralFactory;\n', '\n', '    /// @notice the address of the collateral contract\n', '    address public _collateralContract;\n', '\n', '    /// @notice shows the init state of the contract\n', '    bool public _inited;\n', '\n', '    /// @notice struct for oracles\n', '    struct _oracleStruct {\n', '        address oracleaddress;\n', '        /// 0... chainlink, 1... uniswap twap, 2... custom\n', '        uint oracleType;\n', '        string signature;\n', '        bytes calldatas;\n', '        uint256 weight;\n', '        uint256 decimals;\n', '        uint256 values;\n', '    }\n', '\n', '    /// @notice array for oracles\n', '    _oracleStruct[] public _oracleData;\n', '\n', '    /// @notice number of aracles\n', '    uint256 public _numoracles;\n', '\n', '    /// @notice deployed uniswap v2 oracle instance\n', '    UniswapV2OracleInterface public _uniswapv2oracle;\n', '\n', '    /// @notice the latest observed price\n', '    uint256 public _latestobservedprice;\n', '\n', '    /// @notice the latest observed price timestamp\n', '    uint256 public _latestobservedtime;\n', '\n', '    /// @notice the divisor for the index\n', '    uint256 public _indexdivisor = 1;\n', '\n', '    /// @notice constant for hourly observation\n', '    uint256 HOUR = 3600;\n', '\n', '    /// @notice maximum decimal size for the used prices\n', '    uint256 public _maximumDecimals = 18;\n', '\n', '    /* The number representing 1.0. */\n', '    uint public  UNIT = 10**uint(_maximumDecimals);\n', '\n', '    /// @notice the eth usd price feed chainlink oracle address\n', '    //chainlink eth/usd mainnet: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n', '    //chainlink eth/usd rinkeby: 0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\n', '    AggregatorV3Interface public ethusdchainlinkoracle = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '\n', '    constructor (\n', '        string memory name_,\n', '        string memory symbol_,\n', '        address payable owner_,\n', '        address factoryaddress_,\n', '        address uniswapv2oracle,\n', '        address collateralfactory_\n', '    )\n', '    public {\n', '        _owner = owner_;\n', '        _factoryaddress = factoryaddress_;\n', '        _totalSupply = 0;\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '\n', '        _uniswapv2oracle = UniswapV2OracleInterface(uniswapv2oracle);\n', '        _collateralFactory = collateralfactory_;\n', '\n', '        _balances[_owner] = _totalSupply;\n', '        _inited = false;\n', '\n', '        emit Transfer(address(0), _owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @dev Public init function to set up the contract with pricing sources\n', '    *\n', '    */\n', '    function init(\n', '        uint256 mintingFee_,\n', '        uint8 assetType_,\n', '        uint256 indexdivisor_,\n', '        address[] memory oracleAddresses_,\n', '        uint8[] memory oracleTypes_,\n', '        string[] memory signatures_,\n', '        bytes[] memory calldata_,\n', '        uint256[] memory values_,\n', '        uint256[] memory weights_,\n', '        uint256[] memory decimals_\n', '    ) public\n', '    {\n', '        require(msg.sender == _owner);\n', '        require(_inited == false);\n', '        require(indexdivisor_ != 0);\n', '\n', '        _collateralContract = IEtherCollateralFactory(_collateralFactory).EtherCollateralMint(payable(address(this)), _owner, _factoryaddress, mintingFee_);\n', '        _assetType = assetType_;\n', '        _numoracles = oracleAddresses_.length;\n', '        _indexdivisor = indexdivisor_;\n', '\n', '        // push the values into the oracle struct for further processing\n', '        for (uint i = 0; i < oracleAddresses_.length; i++) {\n', '            _oracleStruct memory temp_struct;\n', '            temp_struct.oracleaddress = oracleAddresses_[i];\n', '            temp_struct.oracleType = oracleTypes_[i];\n', '            temp_struct.signature = signatures_[i];\n', '            temp_struct.calldatas = calldata_[i];\n', '            temp_struct.weight = weights_[i];\n', '            temp_struct.values = values_[i];\n', '            temp_struct.decimals = decimals_[i];\n', '            _oracleData.push(temp_struct);\n', '\n', '            require(decimals_[i] <= 18);\n', '        }\n', '\n', '        getPrice();\n', '        _inited = true;\n', '    }\n', '\n', '    function setEthUsdChainlinkOracle(address neworacle) public\n', '    {\n', '        require (msg.sender == _owner);\n', '        AggregatorV3Interface newagg = AggregatorV3Interface(neworacle);\n', '        ethusdchainlinkoracle = newagg;\n', '    }\n', '\n', '    function setUniswapOracle(address newunioracle) public\n', '    {\n', '        require (msg.sender == _owner);\n', '        UniswapV2OracleInterface newagg = UniswapV2OracleInterface(newunioracle);\n', '        _uniswapv2oracle = newagg;\n', '    }\n', '\n', '    /**\n', '    * @dev Public burn function can only be called from the collateral contract\n', '    *\n', '    */\n', '    function burn(address account, uint amount) public\n', '    {\n', '        require(msg.sender == _collateralContract);\n', '        _internalBurn(account, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Public mint function can only be called from the collateral contract\n', '    *\n', '    */\n', '    function mint(address account, uint amount) public\n', '    {\n', '        require(msg.sender == _collateralContract);\n', '        _internalIssue(account, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev internal mint function issues tokens to the given account\n', '    *\n', '    */\n', '    function _internalIssue(address account, uint amount) internal {\n', '        _balances[account] = _balances[account].add(amount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '\n', '        emit Transfer(address(0), account, amount);\n', '        emit Issued(account, amount);\n', '    }\n', '\n', '    /**\n', '    * @dev internal burn function burns tokens from the given account\n', '    *\n', '    */\n', '    function _internalBurn(address account, uint amount) internal {\n', '        _balances[account] = _balances[account].sub(amount);\n', '        _totalSupply = _totalSupply.sub(amount);\n', '\n', '        emit Transfer(account, address(0), amount);\n', '        emit Burned(account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev lets the owner change the owner\n', '     */\n', '    function changeOwner(address payable _newOwner) public {\n', '        require(msg.sender == _owner);\n', '        address oldOwner = _owner;\n', '        _owner = _newOwner;\n', '        emit NewOwner(oldOwner, _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev lets the owner collect the collected fees\n', '     */\n', '    function collectFees() public {\n', '        require(msg.sender == _owner);\n', '        uint256 contractBalalance = address(this).balance;\n', '\n', '        _owner.transfer(contractBalalance);\n', '    }\n', '\n', '    /**\n', '    * Returns the latest price of an oracle asset\n', '    */\n', '    function getLatestPrice(AggregatorV3Interface priceFeed) internal view returns (int) {\n', '        (\n', '        uint80 roundID,\n', '        int price,\n', '        uint startedAt,\n', '        uint timeStamp,\n', '        uint80 answeredInRound\n', '        ) = priceFeed.latestRoundData();\n', '        return price;\n', '    }\n', '\n', '    /**\n', '     * Gets the ETH USD price from chainlink oracle\n', '    */\n', '    function getLatestETHUSDPrice() public view returns (int) {\n', '\n', '        AggregatorV3Interface priceFeed = ethusdchainlinkoracle;\n', '\n', '        (\n', '        uint80 roundID,\n', '        int price,\n', '        uint startedAt,\n', '        uint timeStamp,\n', '        uint80 answeredInRound\n', '        ) = priceFeed.latestRoundData();\n', '\n', '        uint decimals = priceFeed.decimals();\n', '        uint tempprice = uint(price) * 10 ** (_maximumDecimals - decimals);\n', '\n', '        return int(tempprice);\n', '    }\n', '\n', '    /**\n', '    * quicksort implementation\n', '    */\n', '    function quickSort(uint[] memory arr, int left, int right) public pure {\n', '        int i = left;\n', '        int j = right;\n', '        if (i == j) return;\n', '        uint pivot = arr[uint(left + (right - left) / 2)];\n', '        while (i <= j) {\n', '            while (arr[uint(i)] < pivot) i++;\n', '            while (pivot < arr[uint(j)]) j--;\n', '            if (i <= j) {\n', '                (arr[uint(i)], arr[uint(j)]) = (arr[uint(j)], arr[uint(i)]);\n', '                i++;\n', '                j--;\n', '            }\n', '        }\n', '        if (left < j)\n', '            quickSort(arr, left, j);\n', '        if (i < right)\n', '            quickSort(arr, i, right);\n', '    }\n', '\n', '    /**\n', '    * Avg implementation\n', '    */\n', '    function getAverage(uint[] memory arr) internal view returns (uint) {\n', '        uint sum = 0;\n', '\n', '        for (uint i = 0; i < arr.length; i++) {\n', '            sum += arr[i];\n', '        }\n', '\n', '        // if we dont have any weights\n', '        if (_assetType == 0)\n', '        {\n', '            return (sum / arr.length);\n', '        }\n', '\n', '        // index pricing\n', '        if (_assetType == 2)\n', '        {\n', '            return sum / _indexdivisor;\n', '        }\n', '        if (_assetType == 3)\n', '        {\n', '            return sum / _indexdivisor;\n', '        }\n', '\n', '        // divide by total weight\n', '        return ((sum / 100) / _indexdivisor);\n', '    }\n', '\n', '    /**\n', '    * Sort Function\n', '    */\n', '    function sort(uint[] memory data) public pure returns (uint[] memory) {\n', '        quickSort(data, int(0), int(data.length - 1));\n', '        return data;\n', '    }\n', '\n', '    // sqrt function\n', '    function sqrt(uint256 y) internal view returns (uint256 z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint256 x = (y + 1) / 2;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y.mul(UNIT).div(x) + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '\n', '    function getLatestPrice() public view returns (uint) {\n', '        return _latestobservedprice;\n', '    }\n', '\n', '    /**\n', '    * Returns the price for the arb asset (median price of the 5 assets)\n', '    */\n', '    function getPrice() public returns (uint) {\n', '\n', '        // storing all in an array for further processing\n', '        uint[] memory prices = new uint[](_oracleData.length);\n', '\n', '        for (uint i = 0; i < _oracleData.length; i++) {\n', '\n', '            // chainlink oracle\n', '            if (_oracleData[i].oracleType == 0)\n', '            {\n', '                AggregatorV3Interface pricefeed = AggregatorV3Interface(_oracleData[i].oracleaddress);\n', '                uint price = uint(getLatestPrice(pricefeed));\n', '                prices[i] = price;\n', '\n', '                // norming price\n', '                if (_maximumDecimals != _oracleData[i].decimals)\n', '                {\n', '                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\n', '                }\n', '\n', '                if (_assetType == 1)\n', '                {\n', '                    prices[i] = prices[i] * _oracleData[i].weight;\n', '                }\n', '            }\n', '\n', '            // uniswap TWAP\n', '            if (_oracleData[i].oracleType == 1)\n', '            {\n', '                // check if update price needed\n', '                if (_uniswapv2oracle.canUpdatePrice(_oracleData[i].oracleaddress) == true)\n', '                {\n', '                    // update price\n', '                    _uniswapv2oracle.updatePrice(_oracleData[i].oracleaddress);\n', '                }\n', '\n', '                // since this oracle is using token / eth prices we have to norm it to usd prices\n', '                uint currentethtusdprice = uint(getLatestETHUSDPrice());\n', '\n', '                // grab latest price after update decode\n', '                FixedPoint.uq112x112 memory price = _uniswapv2oracle.computeAverageTokenPrice(_oracleData[i].oracleaddress,0, HOUR * 24 * 10);\n', '                prices[i] = price.mul(currentethtusdprice).decode144();\n', '\n', '                // get total supply for indexes\n', '                uint totalsupply = IERC20(_oracleData[i].oracleaddress).totalSupply();\n', '\n', '                // norming price\n', '                if (_maximumDecimals != _oracleData[i].decimals)\n', '                {\n', '                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\n', '                    totalsupply = totalsupply * 10 ** (_maximumDecimals - _oracleData[i].decimals);\n', '                }\n', '\n', '                if (_assetType == 1)\n', '                {\n', '                    prices[i] = prices[i] * _oracleData[i].weight;\n', '                }\n', '\n', '                // index\n', '                if (_assetType == 2)\n', '                {\n', '                    prices[i] = (prices[i].mul(totalsupply) / UNIT);\n', '                }\n', '\n', '                // sqrt mcap\n', '                if (_assetType == 3)\n', '                {\n', '                    // mcap\n', '                    prices[i] =prices[i].mul(totalsupply) / UNIT;\n', '                    // sqrt mcap\n', '                    uint256 sqrt_mcap = sqrt(prices[i]);\n', '                    prices[i] = sqrt_mcap;\n', '                }\n', '            }\n', '\n', '            // custom oracle\n', '            if (_oracleData[i].oracleType == 2)\n', '            {\n', '                address contractaddress = _oracleData[i].oracleaddress;\n', '                string memory signature = _oracleData[i].signature;\n', '                bytes memory calldatas = _oracleData[i].calldatas;\n', '                uint256 callvalue = _oracleData[i].values;\n', '\n', '                bytes memory callData;\n', '\n', '                if (bytes(signature).length == 0) {\n', '                    callData = calldatas;\n', '                } else {\n', '                    callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), calldatas);\n', '                }\n', '\n', '                (bool success, bytes memory data) = contractaddress.call{value:callvalue}(callData);\n', '                require(success);\n', '\n', '                uint  price = abi.decode(data, (uint));\n', '                prices[i] = price;\n', '\n', '                // norming price\n', '                if (_maximumDecimals != _oracleData[i].decimals)\n', '                {\n', '                    prices[i] = prices[i] * 10 ** (_maximumDecimals - _oracleData[i].decimals);\n', '                }\n', '\n', '                if (_assetType == 1)\n', '                {\n', '                    prices[i] = prices[i] * _oracleData[i].weight;\n', '                }\n', '            }\n', '        }\n', '\n', '        uint[] memory sorted = sort(prices);\n', '\n', '        /// for single assets return median\n', '        if (_assetType == 0)\n', '        {\n', '            uint modulo = sorted.length % 2;\n', '\n', '            // uneven so we can take the middle\n', '            if (modulo == 1)\n', '            {\n', '                uint sizer = (sorted.length + 1) / 2;\n', '\n', '                _latestobservedprice = sorted[sizer-1];\n', '                _latestobservedtime = block.timestamp;\n', '                return sorted[sizer-1];\n', '            }\n', '            // take average of the 2 most inner numbers\n', '            else\n', '            {\n', '                uint size1 = (sorted.length) / 2;\n', '                uint size2 = size1 + 1;\n', '\n', '                uint arrsize1 = sorted[size1-1];\n', '                uint arrsize2 = sorted[size2-1];\n', '\n', '                uint[] memory sortedmin = new uint[](2);\n', '                sortedmin[0] = arrsize1;\n', '                sortedmin[1] = arrsize2;\n', '\n', '                _latestobservedprice = getAverage(sortedmin);\n', '                _latestobservedtime = block.timestamp;\n', '                return getAverage(sortedmin);\n', '            }\n', '        }\n', '\n', '        /// else return avarage for arb assets\n', '        _latestobservedprice = getAverage(sorted);\n', '        _latestobservedtime = block.timestamp;\n', '\n', '        return getAverage(sorted);\n', '    }\n', '\n', '    ///\n', '    /// ERC20 specific functions\n', '    ///\n', '\n', '    /**\n', '    * fallback function for collection funds\n', '    */\n', '    fallback() external payable {\n', '\n', '    }\n', '\n', '    receive() external payable {\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-totalSupply}.\n', '    */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-balanceOf}. Uses burn abstraction for balance updates without gas and universally.\n', '    */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-transfer}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `recipient` cannot be the zero address.\n', '    * - the caller must have a balance of at least `amount`.\n', '    */\n', '    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\n', '        uint256 amount = rawAmount;\n', '        _transfer(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender)\n', '    public\n', '    override\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount)\n', '    public\n', '    override\n', '    returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero ress.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address src, address dst, uint256 rawAmount) external override returns (bool) {\n', '        address spender = msg.sender;\n', '        uint256 spenderAllowance = _allowances[src][spender];\n', '        uint256 amount = rawAmount;\n', '\n', '        if (spender != src && spenderAllowance != uint256(-1)) {\n', '            uint256 newAllowance = spenderAllowance.sub(amount, "CONJURE::transferFrom: transfer amount exceeds spender allowance");\n', '            _allowances[src][spender] = newAllowance;\n', '        }\n', '\n', '        _transfer(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds balance"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    // ========== EVENTS ==========\n', '    event NewOwner(address oldOwner, address newOwner);\n', '    event FeeChanged(uint8 oldFee, uint8 newFee);\n', '    event Issued(address indexed account, uint value);\n', '    event Burned(address indexed account, uint value);\n', '}\n', '\n', 'contract ConjureFactory {\n', '    event NewConjureContract(address deployed);\n', '    event FactoryOwnerChanged(address newowner);\n', '    address payable public factoryOwner;\n', '\n', '    constructor() public {\n', '        factoryOwner = msg.sender;\n', '    }\n', '\n', '    function getFactoryOwner() public view returns (address payable)\n', '    {\n', '        return factoryOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev lets anyone mint a new CONJURE contract\n', '     */\n', '    function ConjureMint(\n', '        string memory name_,\n', '        string memory symbol_,\n', '        address payable owner_,\n', '        address uniswapv2oracle_,\n', '        address collateralfactory_\n', '    ) public returns(address) {\n', '        Conjure newContract = new Conjure(\n', '            name_,\n', '            symbol_,\n', '            owner_,\n', '            address(this),\n', '            uniswapv2oracle_,\n', '            collateralfactory_\n', '        );\n', '        emit NewConjureContract(address(newContract));\n', '        return address(newContract);\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the Factory Owner change the current owner\n', '     */\n', '    function newFactoryOwner(address payable newOwner) public {\n', '        require(msg.sender == factoryOwner);\n', '        factoryOwner = newOwner;\n', '        emit FactoryOwnerChanged(factoryOwner);\n', '    }\n', '}\n', '\n', 'interface UniswapV2OracleInterface {\n', '    function computeAverageTokenPrice(\n', '        address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\n', '    ) external view returns (FixedPoint.uq112x112 memory);\n', '\n', '    function computeAverageEthPrice(\n', '        address token, uint256 minTimeElapsed, uint256 maxTimeElapsed\n', '    ) external view returns (FixedPoint.uq112x112 memory);\n', '\n', '    function updatePrice(address token) external returns (bool);\n', '\n', '    function canUpdatePrice(address token) external returns (bool);\n', '}\n', '\n', 'interface IEtherCollateralFactory {\n', '    function EtherCollateralMint(address payable asset_, address owner_, address factoryaddress_, uint256 mintingfeerate_) external returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/************************************************************************************************\n', 'From https://github.com/Uniswap/uniswap-lib/blob/master/contracts/libraries/FixedPoint.sol\n', '\n', 'Copied from the github repository at commit hash 9642a0705fdaf36b477354a4167a8cd765250860.\n', '\n', 'Modifications:\n', '- Removed `sqrt` function\n', '\n', 'Subject to the GPL-3.0 license\n', '*************************************************************************************************/\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint private constant Q112 = uint(1) << RESOLUTION;\n', '    uint private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', '        require(x != 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(\n', '            y == 0 || (z = uint(self._x) * y) / y == uint(self._x),\n', '            "FixedPoint: MULTIPLICATION_OVERFLOW"\n', '        );\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        require(self._x != 0, "FixedPoint: ZERO_RECIPROCAL");\n', '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '}']