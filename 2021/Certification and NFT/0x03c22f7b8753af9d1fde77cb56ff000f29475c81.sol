['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC721/IERC721.sol\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// File: contracts/interfaces/ILinkAccessor.sol\n', '\n', 'interface ILinkAccessor {\n', '    function requestRandomness(uint256 userProvidedSeed_) external returns(bytes32);\n', '}\n', '\n', '// File: contracts/interfaces/IUniswapV2Router01.sol\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/IUniswapV2Router02.sol\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/NFTMaster.sol\n', '\n', '// This contract is owned by Timelock.\n', 'contract NFTMaster is Ownable, IERC721Receiver {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    event CreateCollection(address _who, uint256 _collectionId);\n', '    event PublishCollection(address _who, uint256 _collectionId);\n', '    event UnpublishCollection(address _who, uint256 _collectionId);\n', '    event NFTDeposit(address _who, address _tokenAddress, uint256 _tokenId);\n', '    event NFTWithdraw(address _who, address _tokenAddress, uint256 _tokenId);\n', '    event NFTClaim(address _who, address _tokenAddress, uint256 _tokenId);\n', '\n', '    IERC20 public wETH;\n', '    IERC20 public baseToken;\n', '    IERC20 public blesToken;\n', '    IERC20 public linkToken;\n', '\n', '    uint256 public linkCost = 1e17;  // 0.1 LINK\n', '    ILinkAccessor public linkAccessor;\n', '\n', '    bool public canDrawMultiple = true;\n', '\n', '    // Platform fee.\n', '    uint256 constant FEE_BASE = 10000;\n', '    uint256 public feeRate = 500;  // 5%\n', '\n', '    address public feeTo;\n', '\n', '    // Collection creating fee.\n', '    uint256 public creatingFee = 0;  // By default, 0\n', '\n', '    IUniswapV2Router02 public router;\n', '\n', '    uint256 public nextNFTId;\n', '    uint256 public nextCollectionId;\n', '\n', '    struct NFT {\n', '        address tokenAddress;\n', '        uint256 tokenId;\n', '        address owner;\n', '        uint256 price;\n', '        uint256 paid;\n', '        uint256 collectionId;\n', '        uint256 indexInCollection;\n', '    }\n', '\n', '    // nftId => NFT\n', '    mapping(uint256 => NFT) public allNFTs;\n', '\n', '    // owner => nftId[]\n', '    mapping(address => uint256[]) public nftsByOwner;\n', '\n', '    // tokenAddress => tokenId => nftId\n', '    mapping(address => mapping(uint256 => uint256)) public nftIdMap;\n', '\n', '    struct Collection {\n', '        address owner;\n', '        string name;\n', '        uint256 size;\n', '        uint256 commissionRate;  // for curator (owner)\n', '        bool willAcceptBLES;\n', '\n', '        // The following are runtime variables before publish\n', '        uint256 totalPrice;\n', '        uint256 averagePrice;\n', '        uint256 fee;\n', '        uint256 commission;\n', '\n', '        // The following are runtime variables after publish\n', '        uint256 publishedAt;  // time that published.\n', '        uint256 timesToCall;\n', '        uint256 soldCount;\n', '    }\n', '\n', '    // collectionId => Collection\n', '    mapping(uint256 => Collection) public allCollections;\n', '\n', '    // owner => collectionId[]\n', '    mapping(address => uint256[]) public collectionsByOwner;\n', '\n', '    // collectionId => who => true/false\n', '    mapping(uint256 => mapping(address => bool)) public isCollaborator;\n', '\n', '    // collectionId => collaborators\n', '    mapping(uint256 => address[]) public collaborators;\n', '\n', '    // collectionId => nftId[]\n', '    mapping(uint256 => uint256[]) public nftsByCollectionId;\n', '\n', '    struct RequestInfo {\n', '        uint256 collectionId;\n', '    }\n', '\n', '    mapping(bytes32 => RequestInfo) public requestInfoMap;\n', '\n', '    struct Slot {\n', '        address owner;\n', '        uint256 size;\n', '    }\n', '\n', '    // collectionId => Slot[]\n', '    mapping(uint256 => Slot[]) public slotMap;\n', '\n', '    // collectionId => r[]\n', '    mapping(uint256 => uint256[]) public nftMapping;\n', '\n', '    uint256 public nftPriceFloor = 1e18;  // 1 USDC\n', '    uint256 public nftPriceCeil = 1e24;  // 1M USDC\n', '    uint256 public minimumCollectionSize = 3;  // 3 blind boxes\n', '    uint256 public maximumDuration = 14 days;  // Refund if not sold out in 14 days.\n', '\n', '    constructor() public { }\n', '\n', '    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '\n', '    function setWETH(IERC20 wETH_) external onlyOwner {\n', '        wETH = wETH_;\n', '    }\n', '\n', '    function setLinkToken(IERC20 linkToken_) external onlyOwner {\n', '        linkToken = linkToken_;\n', '    }\n', '\n', '    function setBaseToken(IERC20 baseToken_) external onlyOwner {\n', '        baseToken = baseToken_;\n', '    }\n', '\n', '    function setBlesToken(IERC20 blesToken_) external onlyOwner {\n', '        blesToken = blesToken_;\n', '    }\n', '\n', '    function setLinkAccessor(ILinkAccessor linkAccessor_) external onlyOwner {\n', '        linkAccessor = linkAccessor_;\n', '    }\n', '\n', '    function setLinkCost(uint256 linkCost_) external onlyOwner {\n', '        linkCost = linkCost_;\n', '    }\n', '\n', '    function setCanDrawMultiple(bool value_) external onlyOwner {\n', '        canDrawMultiple = value_;\n', '    }\n', '\n', '    function setFeeRate(uint256 feeRate_) external onlyOwner {\n', '        feeRate = feeRate_;\n', '    }\n', '\n', '    function setFeeTo(address feeTo_) external onlyOwner {\n', '        feeTo = feeTo_;\n', '    }\n', '\n', '    function setCreatingFee(uint256 creatingFee_) external onlyOwner {\n', '        creatingFee = creatingFee_;\n', '    }\n', '\n', '    function setUniswapV2Router(IUniswapV2Router02 router_) external onlyOwner {\n', '        router = router_;\n', '    }\n', '\n', '    function setNFTPriceFloor(uint256 value_) external onlyOwner {\n', '        require(value_ < nftPriceCeil, "should be higher than floor");\n', '        nftPriceFloor = value_;\n', '    }\n', '\n', '    function setNFTPriceCeil(uint256 value_) external onlyOwner {\n', '        require(value_ > nftPriceFloor, "should be higher than floor");\n', '        nftPriceCeil = value_;\n', '    }\n', '\n', '    function setMinimumCollectionSize(uint256 size_) external onlyOwner {\n', '        minimumCollectionSize = size_;\n', '    }\n', '\n', '    function setMaximumDuration(uint256 maximumDuration_) external onlyOwner {\n', '        maximumDuration = maximumDuration_;\n', '    }\n', '\n', '    function _generateNextNFTId() private returns(uint256) {\n', '        return ++nextNFTId;\n', '    }\n', '\n', '    function _generateNextCollectionId() private returns(uint256) {\n', '        return ++nextCollectionId;\n', '    }\n', '\n', '    function _depositNFT(address tokenAddress_, uint256 tokenId_) private returns(uint256) {\n', '        IERC721(tokenAddress_).safeTransferFrom(_msgSender(), address(this), tokenId_);\n', '\n', '        NFT memory nft;\n', '        nft.tokenAddress = tokenAddress_;\n', '        nft.tokenId = tokenId_;\n', '        nft.owner = _msgSender();\n', '        nft.collectionId = 0;\n', '        nft.indexInCollection = 0;\n', '\n', '        uint256 nftId;\n', '\n', '        if (nftIdMap[tokenAddress_][tokenId_] > 0) {\n', '            nftId = nftIdMap[tokenAddress_][tokenId_];\n', '        } else {\n', '            nftId = _generateNextNFTId();\n', '            nftIdMap[tokenAddress_][tokenId_] = nftId;\n', '        }\n', '\n', '        allNFTs[nftId] = nft;\n', '        nftsByOwner[_msgSender()].push(nftId);\n', '\n', '        emit NFTDeposit(_msgSender(), tokenAddress_, tokenId_);\n', '        return nftId;\n', '    }\n', '\n', '    function _withdrawNFT(address who_, uint256 nftId_, bool isClaim_) private {\n', '        allNFTs[nftId_].owner = address(0);\n', '        allNFTs[nftId_].collectionId = 0;\n', '\n', '        address tokenAddress = allNFTs[nftId_].tokenAddress;\n', '        uint256 tokenId = allNFTs[nftId_].tokenId;\n', '\n', '        IERC721(tokenAddress).safeTransferFrom(address(this), who_, tokenId);\n', '\n', '        if (isClaim_) {\n', '            emit NFTClaim(who_, tokenAddress, tokenId);\n', '        } else {\n', '            emit NFTWithdraw(who_, tokenAddress, tokenId);\n', '        }\n', '    }\n', '\n', '    function claimNFT(uint256 collectionId_, uint256 index_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.soldCount == collection.size, "Not finished");\n', '\n', '        address winner = getWinner(collectionId_, index_);\n', '\n', '        require(winner == _msgSender(), "Only winner can claim");\n', '\n', '        uint256 nftId = nftsByCollectionId[collectionId_][index_];\n', '\n', '        require(allNFTs[nftId].collectionId == collectionId_, "Already claimed");\n', '\n', '        if (allNFTs[nftId].paid == 0) {\n', '            if (collection.willAcceptBLES) {\n', '                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\n', '                    FEE_BASE.sub(collection.commissionRate)).div(FEE_BASE);\n', '                IERC20(blesToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\n', '            } else {\n', '                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\n', '                    FEE_BASE.sub(feeRate).sub(collection.commissionRate)).div(FEE_BASE);\n', '                IERC20(baseToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\n', '            }\n', '        }\n', '\n', '        _withdrawNFT(_msgSender(), nftId, true);\n', '    }\n', '\n', '    function claimRevenue(uint256 collectionId_, uint256 index_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.soldCount == collection.size, "Not finished");\n', '\n', '        uint256 nftId = nftsByCollectionId[collectionId_][index_];\n', '\n', '        require(allNFTs[nftId].owner == _msgSender() && allNFTs[nftId].collectionId > 0, "NFT not claimed");\n', '\n', '        if (allNFTs[nftId].paid == 0) {\n', '            if (collection.willAcceptBLES) {\n', '                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\n', '                    FEE_BASE.sub(collection.commissionRate)).div(FEE_BASE);\n', '                IERC20(blesToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\n', '            } else {\n', '                allNFTs[nftId].paid = allNFTs[nftId].price.mul(\n', '                    FEE_BASE.sub(feeRate).sub(collection.commissionRate)).div(FEE_BASE);\n', '                IERC20(baseToken).safeTransfer(allNFTs[nftId].owner, allNFTs[nftId].paid);\n', '            }\n', '        }\n', '    }\n', '\n', '    function claimCommission(uint256 collectionId_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(_msgSender() == collection.owner, "Only curator can claim");\n', '        require(collection.soldCount == collection.size, "Not finished");\n', '\n', '        if (collection.willAcceptBLES) {\n', '            IERC20(blesToken).safeTransfer(collection.owner, collection.commission);\n', '        } else {\n', '            IERC20(baseToken).safeTransfer(collection.owner, collection.commission);\n', '        }\n', '\n', '        // Mark it claimed.\n', '        collection.commission = 0;\n', '    }\n', '\n', '    function claimFee(uint256 collectionId_) external {\n', '        require(feeTo != address(0), "Please set feeTo first");\n', '\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.soldCount == collection.size, "Not finished");\n', '        require(!collection.willAcceptBLES, "No fee if the curator accepts BLES");\n', '\n', '        IERC20(baseToken).safeTransfer(feeTo, collection.fee);\n', '\n', '        // Mark it claimed.\n', '        collection.fee = 0;\n', '    }\n', '\n', '    function createCollection(\n', '        string calldata name_,\n', '        uint256 size_,\n', '        uint256 commissionRate_,\n', '        bool willAcceptBLES_,\n', '        address[] calldata collaborators_\n', '    ) external {\n', '        require(size_ >= minimumCollectionSize, "Size too small");\n', '        require(commissionRate_.add(feeRate) < FEE_BASE, "Too much commission");\n', '\n', '        if (creatingFee > 0) {\n', '            // Charges BLES for creating the collection.\n', '            IERC20(blesToken).safeTransfer(feeTo, creatingFee);\n', '        }\n', '\n', '        Collection memory collection;\n', '        collection.owner = _msgSender();\n', '        collection.name = name_;\n', '        collection.size = size_;\n', '        collection.commissionRate = commissionRate_;\n', '        collection.totalPrice = 0;\n', '        collection.averagePrice = 0;\n', '        collection.willAcceptBLES = willAcceptBLES_;\n', '        collection.publishedAt = 0;\n', '\n', '        uint256 collectionId = _generateNextCollectionId();\n', '\n', '        allCollections[collectionId] = collection;\n', '        collectionsByOwner[_msgSender()].push(collectionId);\n', '        collaborators[collectionId] = collaborators_;\n', '\n', '        for (uint256 i = 0; i < collaborators_.length; ++i) {\n', '            isCollaborator[collectionId][collaborators_[i]] = true;\n', '        }\n', '\n', '        emit CreateCollection(_msgSender(), collectionId);\n', '    }\n', '\n', '    function changeCollaborators(uint256 collectionId_, address[] calldata collaborators_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.owner == _msgSender(), "Needs collection owner");\n', '        require(!isPublished(collectionId_), "Collection already published");\n', '\n', '        uint256 i;\n', '\n', '        for (i = 0; i < collaborators_.length; ++i) {\n', '            isCollaborator[collectionId_][collaborators_[i]] = true;\n', '        }\n', '\n', '        for (i = 0; i < collaborators[collectionId_].length; ++i) {\n', '            uint256 j;\n', '            for (j = 0; j < collaborators_.length; ++j) {\n', '                if (collaborators[collectionId_][i] == collaborators_[j]) {\n', '                    break;\n', '                }\n', '            }\n', '\n', '            // If not found.\n', '            if (j == collaborators_.length) {\n', '                isCollaborator[collectionId_][collaborators[collectionId_][i]] = false;\n', '            }\n', '        }\n', '\n', '        collaborators[collectionId_] = collaborators_;\n', '    }\n', '\n', '    function isPublished(uint256 collectionId_) public view returns(bool) {\n', '        return allCollections[collectionId_].publishedAt > 0;\n', '    }\n', '\n', '    function _addNFTToCollection(uint256 nftId_, uint256 collectionId_, uint256 price_) private {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(allNFTs[nftId_].owner == _msgSender(), "Only NFT owner can add");\n', '        require(collection.owner == _msgSender() ||\n', '                isCollaborator[collectionId_][_msgSender()], "Needs collection owner or collaborator");\n', '\n', '        require(price_ >= nftPriceFloor && price_ <= nftPriceCeil, "Price not in range");\n', '\n', '        require(allNFTs[nftId_].collectionId == 0, "Already added");\n', '        require(!isPublished(collectionId_), "Collection already published");\n', '        require(nftsByCollectionId[collectionId_].length < collection.size,\n', '                "collection full");\n', '\n', '        allNFTs[nftId_].price = price_;\n', '        allNFTs[nftId_].collectionId = collectionId_;\n', '        allNFTs[nftId_].indexInCollection = nftsByCollectionId[collectionId_].length;\n', '\n', '        // Push to nftsByCollectionId.\n', '        nftsByCollectionId[collectionId_].push(nftId_);\n', '\n', '        collection.totalPrice = collection.totalPrice.add(price_);\n', '\n', '        if (!collection.willAcceptBLES) {\n', '            collection.fee = collection.fee.add(price_.mul(feeRate).div(FEE_BASE));\n', '        }\n', '\n', '        collection.commission = collection.commission.add(price_.mul(collection.commissionRate).div(FEE_BASE));\n', '    }\n', '\n', '    function addNFTToCollection(address tokenAddress_, uint256 tokenId_, uint256 collectionId_, uint256 price_) external {\n', '        uint256 nftId = _depositNFT(tokenAddress_, tokenId_);\n', '        _addNFTToCollection(nftId, collectionId_, price_);\n', '    }\n', '\n', '    function editNFTInCollection(uint256 nftId_, uint256 collectionId_, uint256 price_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.owner == _msgSender() ||\n', '                allNFTs[nftId_].owner == _msgSender(), "Needs collection owner or NFT owner");\n', '\n', '        require(price_ >= nftPriceFloor && price_ <= nftPriceCeil, "Price not in range");\n', '\n', '        require(allNFTs[nftId_].collectionId == collectionId_, "NFT not in collection");\n', '        require(!isPublished(collectionId_), "Collection already published");\n', '\n', '        collection.totalPrice = collection.totalPrice.add(price_).sub(allNFTs[nftId_].price);\n', '\n', '        if (!collection.willAcceptBLES) {\n', '            collection.fee = collection.fee.add(\n', '                price_.mul(feeRate).div(FEE_BASE)).sub(\n', '                    allNFTs[nftId_].price.mul(feeRate).div(FEE_BASE));\n', '        }\n', '\n', '        collection.commission = collection.commission.add(\n', '            price_.mul(collection.commissionRate).div(FEE_BASE)).sub(\n', '                allNFTs[nftId_].price.mul(collection.commissionRate).div(FEE_BASE));\n', '\n', '        allNFTs[nftId_].price = price_;  // Change price.\n', '    }\n', '\n', '    function _removeNFTFromCollection(uint256 nftId_, uint256 collectionId_) private {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(allNFTs[nftId_].owner == _msgSender() ||\n', '                collection.owner == _msgSender(),\n', '                "Only NFT owner or collection owner can remove");\n', '        require(allNFTs[nftId_].collectionId == collectionId_, "NFT not in collection");\n', '        require(!isPublished(collectionId_), "Collection already published");\n', '\n', '        collection.totalPrice = collection.totalPrice.sub(allNFTs[nftId_].price);\n', '\n', '        if (!collection.willAcceptBLES) {\n', '            collection.fee = collection.fee.sub(\n', '                allNFTs[nftId_].price.mul(feeRate).div(FEE_BASE));\n', '        }\n', '\n', '        collection.commission = collection.commission.sub(\n', '            allNFTs[nftId_].price.mul(collection.commissionRate).div(FEE_BASE));\n', '\n', '\n', '        allNFTs[nftId_].collectionId = 0;\n', '\n', '        // Removes from nftsByCollectionId\n', '        uint256 index = allNFTs[nftId_].indexInCollection;\n', '        uint256 lastNFTId = nftsByCollectionId[collectionId_][nftsByCollectionId[collectionId_].length - 1];\n', '\n', '        nftsByCollectionId[collectionId_][index] = lastNFTId;\n', '        allNFTs[lastNFTId].indexInCollection = index;\n', '        nftsByCollectionId[collectionId_].pop();\n', '    }\n', '\n', '    function removeNFTFromCollection(uint256 nftId_, uint256 collectionId_) external {\n', '        address nftOwner = allNFTs[nftId_].owner;\n', '        _removeNFTFromCollection(nftId_, collectionId_);\n', '        _withdrawNFT(nftOwner, nftId_, false);\n', '    }\n', '\n', '    function randomnessCount(uint256 size_) public pure returns(uint256){\n', '        uint256 i;\n', '        for (i = 0; size_** i <= type(uint256).max / size_; i++) {}\n', '        return i;\n', '    }\n', '\n', '    function publishCollection(uint256 collectionId_, address[] calldata path, uint256 amountInMax_, uint256 deadline_) external {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.owner == _msgSender(), "Only owner can publish");\n', '\n', '        uint256 actualSize = nftsByCollectionId[collectionId_].length;\n', '        require(actualSize >= minimumCollectionSize, "Not enough boxes");\n', '\n', '        collection.size = actualSize;  // Fit the size.\n', '\n', '        // Math.ceil(totalPrice / actualSize);\n', '        collection.averagePrice = collection.totalPrice.add(actualSize.sub(1)).div(actualSize);\n', '        collection.publishedAt = now;\n', '\n', '        // Now buy LINK. Here is some math for calculating the time of calls needed from ChainLink.\n', '        uint256 count = randomnessCount(actualSize);\n', '        uint256 times = actualSize.add(count).sub(1).div(count);  // Math.ceil\n', '\n', '        if (linkCost > 0 && address(linkAccessor) != address(0)) {\n', '            buyLink(times, path, amountInMax_, deadline_);\n', '        }\n', '\n', '        collection.timesToCall = times;\n', '\n', '        emit PublishCollection(_msgSender(), collectionId_);\n', '    }\n', '\n', '    function unpublishCollection(uint256 collectionId_) external {\n', '        // Anyone can call if the collection expires and not sold out.\n', '        // Owner can unpublish a collection if nothing is sold out.\n', '\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        if (_msgSender() != collection.owner || collection.soldCount > 0) {\n', '            require(now > collection.publishedAt + maximumDuration, "Not expired yet");\n', '            require(collection.soldCount < collection.size, "Sold out");\n', '        }\n', '\n', '        collection.publishedAt = 0;\n', '        collection.soldCount = 0;\n', '\n', '        // Now refund to the buyers.\n', '        uint256 length = slotMap[collectionId_].length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            Slot memory slot = slotMap[collectionId_][length.sub(i + 1)];\n', '            slotMap[collectionId_].pop();\n', '\n', '            if (collection.willAcceptBLES) {\n', '                IERC20(blesToken).transfer(slot.owner, collection.averagePrice.mul(slot.size));\n', '            } else {\n', '                IERC20(baseToken).transfer(slot.owner, collection.averagePrice.mul(slot.size));\n', '            }\n', '        }\n', '\n', '        emit UnpublishCollection(_msgSender(), collectionId_);\n', '    }\n', '\n', '    function buyLink(uint256 times_, address[] calldata path, uint256 amountInMax_, uint256 deadline_) internal virtual {\n', '        require(path[path.length.sub(1)] == address(linkToken), "Last token must be LINK");\n', '\n', '        uint256 amountToBuy = linkCost.mul(times_);\n', '\n', '        if (path.length == 1) {\n', '            // Pay with LINK.\n', '            linkToken.transferFrom(_msgSender(), address(linkAccessor), amountToBuy);\n', '        } else {\n', '            if (IERC20(path[0]).allowance(address(this), address(router)) < amountInMax_) {\n', '                IERC20(path[0]).approve(address(router), amountInMax_);\n', '            }\n', '\n', '            uint256[] memory amounts = router.getAmountsIn(amountToBuy, path);\n', '            IERC20(path[0]).transferFrom(_msgSender(), address(this), amounts[0]);\n', '\n', '            // Pay with other token.\n', '            router.swapTokensForExactTokens(\n', '                amountToBuy,\n', '                amountInMax_,\n', '                path,\n', '                address(linkAccessor),\n', '                deadline_);\n', '        }\n', '    }\n', '\n', '    function drawBoxes(uint256 collectionId_, uint256 times_) external {\n', '        if (!canDrawMultiple) {\n', '            require(times_ == 1, "Can draw only 1");\n', '        }\n', '\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        require(collection.soldCount.add(times_) <= collection.size, "Not enough left");\n', '\n', '        uint256 cost = collection.averagePrice.mul(times_);\n', '\n', '        if (collection.willAcceptBLES) {\n', '            IERC20(blesToken).safeTransferFrom(_msgSender(), address(this), cost);\n', '        } else {\n', '            IERC20(baseToken).safeTransferFrom(_msgSender(), address(this), cost);\n', '        }\n', '\n', '        Slot memory slot;\n', '        slot.owner = _msgSender();\n', '        slot.size = times_;\n', '        slotMap[collectionId_].push(slot);\n', '\n', '        collection.soldCount = collection.soldCount.add(times_);\n', '\n', '        uint256 startFromIndex = collection.size.sub(collection.timesToCall);\n', '        for (uint256 i = startFromIndex;\n', '                 i < collection.soldCount;\n', '                 ++i) {\n', '            requestRandomNumber(collectionId_, i.sub(startFromIndex));\n', '        }\n', '    }\n', '\n', '    function getWinner(uint256 collectionId_, uint256 nftIndex_) public view returns(address) {\n', '        Collection storage collection = allCollections[collectionId_];\n', '\n', '        if (collection.soldCount < collection.size) {\n', '            // Not sold all yet.\n', '            return address(0);\n', '        }\n', '\n', '        uint256 size = collection.size;\n', '        uint256 count = randomnessCount(size);\n', '\n', '        uint256 lastRandomnessIndex = nftMapping[collectionId_].length.sub(1);\n', '        uint256 lastR = nftMapping[collectionId_][lastRandomnessIndex];\n', '\n', '        // Use lastR as an offset for rotating the sequence, to make sure that\n', '        // we need to wait for all boxes being sold.\n', '        nftIndex_ = nftIndex_.add(lastR).mod(size);\n', '\n', '        uint256 randomnessIndex = nftIndex_.div(count);\n', '        randomnessIndex = randomnessIndex.add(lastR).mod(lastRandomnessIndex + 1);\n', '\n', '        uint256 r = nftMapping[collectionId_][randomnessIndex];\n', '\n', '        uint256 i;\n', '\n', '        for (i = 0; i < nftIndex_.mod(count); ++i) {\n', '          r /= size;\n', '        }\n', '\n', '        r %= size;\n', '\n', '        // Iterate through all slots.\n', '        for (i = 0; i < slotMap[collectionId_].length; ++i) {\n', '            if (r >= slotMap[collectionId_][i].size) {\n', '                r -= slotMap[collectionId_][i].size;\n', '            } else {\n', '                return slotMap[collectionId_][i].owner;\n', '            }\n', '        }\n', '\n', '        require(false, "r overflow");\n', '    }\n', '\n', '    function psuedoRandomness() public view returns(uint256) {\n', '        return uint256(keccak256(abi.encodePacked(\n', '            block.timestamp + block.difficulty +\n', '            ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (now)) +\n', '            block.gaslimit + \n', '            ((uint256(keccak256(abi.encodePacked(_msgSender())))) / (now)) +\n', '            block.number\n', '        )));\n', '    }\n', '\n', '    function requestRandomNumber(uint256 collectionId_, uint256 index_) private {\n', '        if (address(linkAccessor) != address(0)) {\n', '            bytes32 requestId = linkAccessor.requestRandomness(index_);\n', '            requestInfoMap[requestId].collectionId = collectionId_;\n', '        } else {\n', "            // Uses psuedo random number instead, and doesn't involve request / callback.\n", '            useRandomness(collectionId_, psuedoRandomness());\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Callback function used by VRF Coordinator\n', '     */\n', '    function fulfillRandomness(bytes32 requestId, uint256 randomness) public {\n', '        require(_msgSender() == address(linkAccessor), "Only linkAccessor can call");\n', '\n', '        uint256 collectionId = requestInfoMap[requestId].collectionId;\n', '        useRandomness(collectionId, randomness);\n', '    }\n', '\n', '    function useRandomness(\n', '        uint256 collectionId_,\n', '        uint256 randomness_\n', '    ) private {\n', '        uint256 size = allCollections[collectionId_].size;\n', '        bool[] memory filled = new bool[](size);\n', '\n', '        uint256 r;\n', '        uint256 i;\n', '        uint256 j;\n', '        uint256 count = randomnessCount(size);\n', '\n', '        for (i = 0; i < nftMapping[collectionId_].length; ++i) {\n', '            r = nftMapping[collectionId_][i];\n', '            for (j = 0; j < count; ++j) {\n', '                filled[r.mod(size)] = true;\n', '                r = r.div(size);\n', '            }\n', '        }\n', '\n', '        r = 0;\n', '\n', '        uint256 t;\n', '        uint256 remaining = size.sub(count.mul(nftMapping[collectionId_].length));\n', '\n', '        for (i = 0; i < count; ++i) {\n', '            if (remaining == 0) {\n', '                break;\n', '            }\n', '\n', '            t = randomness_.mod(remaining);\n', '            randomness_ = randomness_.div(remaining);\n', '\n', '            t = t.add(1);\n', '\n', '            // Skips filled mappings.\n', '            for (j = 0; j < size; ++j) {\n', '                if (!filled[j]) {\n', '                    t = t.sub(1);\n', '                }\n', '\n', '                if (t == 0) {\n', '                  break;\n', '                }\n', '            }\n', '\n', '            filled[j] = true;\n', '            r = r.mul(size).add(j);\n', '            remaining = remaining.sub(1);\n', '        }\n', '\n', '        nftMapping[collectionId_].push(r);\n', '    }\n', '}']