['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-04\n', '*/\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'abstract contract ERC20Interface {\n', '    function balanceOf(address tokenOwner) virtual view public  returns (uint balance);\n', '    function transfer(address to, uint tokens) virtual public returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) virtual public returns (bool success);\n', '}\n', '\n', '\n', 'contract WWHACKD {\n', '    string public name     = "Wrapped WHACKD";\n', '    string public symbol   = "WWACKD";\n', '    uint8  public decimals = 18;\n', '    // ERC20  public whackdContract   = ERC20(address(0xCF8335727B776d190f9D15a54E6B9B9348439eEE));\n', '    ERC20Interface public whackdContract = ERC20Interface(address(0xd9145CCE52D386f254917e481eB44e9943F39138));\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint wad);\n', '    event  Deposit(address indexed dst, uint wad);\n', '    event  Withdrawal(address indexed src, uint wad);\n', '\n', '    mapping (address => uint)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint))  public  allowance;\n', '\n', '    function deposit(uint dad) public {\n', '        // transfer, crediting our observed balance difference\n', '        uint balanceBefore = whackdContract.balanceOf(address(this));\n', '        whackdContract.transferFrom(msg.sender, address(this), dad);\n', '        uint balanceChange = whackdContract.balanceOf(address(this)) - balanceBefore;\n', '        require((dad/2) <= balanceChange && balanceChange <= dad, "saved you from getting WHACKD. retry.");\n', '        \n', '        balanceOf[msg.sender] += balanceChange;\n', '        emit Deposit(msg.sender, balanceChange);\n', '    }\n', '    function withdraw(uint wad) public {\n', '        require(balanceOf[msg.sender] >= wad);\n', '        \n', '        balanceOf[msg.sender] -= wad;\n', '        uint balanceBefore = whackdContract.balanceOf(msg.sender);\n', '        whackdContract.transfer(msg.sender, wad);\n', '        uint balanceChange = whackdContract.balanceOf(msg.sender) - balanceBefore;\n', '        require((wad/2) <= balanceChange, "saved you from getting WHACKD. retry.");\n', '        \n', '        emit Withdrawal(msg.sender, wad);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint) {\n', '        return whackdContract.balanceOf(address(this));\n', '    }\n', '\n', '    function approve(address guy, uint wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        emit Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad);\n', '\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] -= wad;\n', '        }\n', '\n', '        balanceOf[src] -= wad;\n', '        balanceOf[dst] += wad;\n', '\n', '        Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '}']