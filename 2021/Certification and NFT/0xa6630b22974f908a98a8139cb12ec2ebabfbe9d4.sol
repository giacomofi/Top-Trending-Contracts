['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', '//*****************************************************************************//\n', '//                        Coin Name : ILUS                                    //\n', '//                           Symbol : ILUS                                    //\n', '//                     Total Supply : 100,000,000                             //\n', '//                         Decimals : 18                                      //\n', '//                    Functionality : Buy, Swap, Stake, Governance            //\n', '//****************************************************************************//\n', '\n', ' /**\n', ' * @title SafeMath\n', ' * @dev   Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '  /**\n', '  * @dev Multiplies two unsigned integers, reverts on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256){\n', '    if (a == 0){\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    require(c / a == b,"Calculation error");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256){\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0,"Calculation error");\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256){\n', '    require(b <= a,"Calculation error");\n', '    uint256 c = a - b;\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Adds two unsigned integers, reverts on overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256){\n', '    uint256 c = a + b;\n', '    require(c >= a,"Calculation error");\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '   * reverts when dividing by zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256){\n', '    require(b != 0,"Calculation error");\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '  function transfer(address to, uint256 value) external returns (bool);\n', '  function approve(address spender, uint256 value) external returns (bool);\n', '  function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address who) external view returns (uint256);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', '* @title ILUS Contract For ERC20 Tokens\n', '* @dev ILUS tokens as per ERC20 Standards\n', '*/\n', 'contract StandardToken is IERC20 {\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address private _owner;                                                       // Owner of the Contract.\n', '  string  private _name;                                                        // Name of the token.\n', '  string  private _symbol;                                                      // symbol of the token.\n', '  uint8   private _decimal;                                                     // variable to maintain decimal precision of the token.\n', '  uint256 private _totalSupply = 100000000000000000000000000;                   // total supply of token.\n', '  bool    private _stopped = false;                                             // state variable to check fail-safe for contract.\n', '   uint256 public airdropcount = 0;                                              // Variable to keep track on number of airdrop\n', "  address private _tokenPoolAddress;                                            // Pool Address to manage Staking user's Token.\n", '  address public _crowdsaleAddress;                                             // crowdsale Address  \n', '  bool crowdSaleStarted = true;                                                 // Variable to know the crowdsalestatus\n', '  uint256 airdropcountOfMMM = 0;                                                // Variable to keep track on number of airdrop\n', '  uint256 tokensForMMM = 25150000000000000000000000;                            // airdrop tokens for MMM\n', '   \n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => mapping (address => uint256)) private _allowed;\n', ' \n', '  constructor (string memory Name, string memory Symbol, uint8 Decimal, address Owner, address tokenPoolAddress) {\n', '    _name = Name;\n', '    _symbol = Symbol;\n', '    _decimal = Decimal;\n', '    _balances[Owner] = _totalSupply;\n', '    _owner = Owner;\n', '    _tokenPoolAddress = tokenPoolAddress;\n', '  }\n', ' \n', '  /*\n', '  * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '  * Functions for owner\n', '  * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '  */\n', '\n', '  /**\n', '   * @dev get address of smart contract owner\n', '   * @return address of owner\n', '   */\n', '  function getowner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to check if the message sender is owner\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner(),"You are not authenticate to make this transfer");\n', '    _;\n', '  }\n', '  \n', '    /**\n', '   * @dev modifier to check if the message sender is crowdSale\n', '   */\n', '  modifier onlyCrowdsale() {\n', '    require(_crowdsaleAddress == msg.sender,"You are not authenticate to burn tokens");\n', '    _;\n', '  }\n', '  \n', '  modifier validatorForSettingCrowdsaleStatus() {\n', '      require(msg.sender == _crowdsaleAddress || msg.sender == _owner, "You are not authenticate to set status");\n', '      _;\n', '  }\n', '\n', '  /**\n', '   * @dev Internal function for modifier\n', '   */\n', '  function isOwner() internal view returns (bool) {\n', '      return msg.sender == _owner;\n', '  }\n', '\n', '  /** \n', '   * @dev Transfer ownership of the smart contract. For owner only\n', '   * @return request status\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner returns (bool){\n', '    _owner = newOwner;\n', '    return true;\n', '  }\n', '\n', '        \n', '  /** \n', '   * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '   * View only functions\n', '   * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '   */\n', '  \n', '  /**\n', '   * @return the name of the token.\n', '   */\n', '  function name() public view returns (string memory) {\n', '    return _name;\n', '  }\n', '\n', '  /** \n', '   * @return the symbol of the token.\n', '   */\n', '  function symbol() public view returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  /** \n', '   * @return the number of decimal of the token.\n', '   */\n', '  function decimals() public view returns (uint8) {\n', '    return _decimal;\n', '  }\n', '\n', '  /** \n', '   * @dev Total number of tokens in existence.\n', '   */\n', '  function totalSupply() external override view returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  /** \n', '   * @dev Gets the balance of the specified address.\n', '   * @param owner The address to query the balance of.\n', '   * @return A uint256 representing the amount owned by the passed address.\n', '   */\n', '  function balanceOf(address owner) public view override returns (uint256) {\n', '    return _balances[owner];\n', '  }\n', '\n', '  /** \n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param owner address The address which owns the funds.\n', '   * @param spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(address owner, address spender) public view override returns (uint256) {\n', '    return _allowed[owner][spender];\n', '  }\n', '\n', '  /** \n', '   * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '   * Transfer, allow and burn functions\n', '   * ----------------------------------------------------------------------------------------------------------------------------------------------\n', '   */\n', '\n', '  /**\n', '   * @dev Transfer token to a specified address.\n', '   * @param to The address to transfer to.\n', '   * @param value The amount to be transferred.\n', '   */\n', '  function transfer(address to, uint256 value) public override returns (bool) {\n', '    _transfer(msg.sender, to, value);\n', '    return true;\n', '  }\n', '\n', '  /** \n', '   * @dev Transfer tokens from one address to another.\n', '   * @param from address The address which you want to send tokens from\n', '   * @param to address The address which you want to transfer to\n', '   * @param value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(address from, address to, uint256 value) public override returns (bool) {\n', '    _transfer(from, to, value);\n', '    _approve(from, msg.sender, _allowed[from][msg.sender].sub(value));\n', '    return true;\n', '  }\n', '\n', '  /** \n', '   * @dev Transfer token for a specified addresses.\n', '   * @param from The address to transfer from.\n', '   * @param to The address to transfer to.\n', '   * @param value The amount to be transferred.\n', '   */\n', '   function _transfer(address from, address to, uint256 value) internal {\n', '    require(from != address(0),"Invalid from Address");\n', '    require(to != address(0),"Invalid to Address");\n', '    require(value > 0, "Invalid Amount");\n', '    _balances[from] = _balances[from].sub(value);\n', '    _balances[to] = _balances[to].add(value);\n', '    emit Transfer(from, to, value);\n', '  }\n', '\n', '  /** \n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param value The amount of tokens to be spent.\n', '   */\n', '  function approve(address spender, uint256 value) public override returns (bool) {\n', '    _approve(msg.sender, spender, value);\n', '    return true;\n', '  }\n', '\n', '  /** \n', "   * @dev Approve an address to spend another addresses' tokens.\n", '   * @param owner The address that owns the tokens.\n', '   * @param spender The address that will spend the tokens.\n', '   * @param value The number of tokens that can be spent.\n', '   */\n', '  function _approve(address owner, address spender, uint256 value) internal {\n', '    require(spender != address(0),"Invalid address");\n', '    require(owner != address(0),"Invalid address");\n', '    require(value > 0, "Invalid Amount");\n', '    _allowed[owner][spender] = value;\n', '    emit Approval(owner, spender, value);\n', '  }\n', '\n', '  /** \n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '    _approve(msg.sender, spender, _allowed[msg.sender][spender].add(addedValue));\n', '    return true;\n', '  }\n', '\n', '  /** \n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   * @param spender The address which will spend the funds.\n', '   * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '    _approve(msg.sender, spender, _allowed[msg.sender][spender].sub(subtractedValue));\n', '    return true;\n', '  }\n', '    \n', '  /** \n', '   * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\n', '   * @param _addresses array of address in serial order\n', '   * @param _amount amount in serial order with respect to address array\n', '   */\n', '  function airdropByOwner(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\n', '    require(_addresses.length == _amount.length,"Invalid Array");\n', '    uint256 count = _addresses.length;\n', '    for (uint256 i = 0; i < count; i++){\n', '      _transfer(msg.sender, _addresses[i], _amount[i]);\n', '      airdropcount = airdropcount + 1;\n', '      }\n', '    return true;\n', '   }\n', '\n', '   /** \n', '   * @dev Airdrop function to airdrop tokens. Best works upto 50 addresses in one time. Maximum limit is 200 addresses in one time.\n', '   * @param _addresses array of address in serial order\n', '   * @param _amount amount in serial order with respect to address array\n', '   */\n', '  function airdropByOwnerForMMM(address[] memory _addresses, uint256[] memory _amount) public onlyOwner returns (bool){\n', '    require(_addresses.length == _amount.length,"Invalid Array");\n', '    require(tokensForMMM > 0, "Tokens are zero");\n', '    uint256 count = _addresses.length;\n', '    for (uint256 i = 0; i < count; i++){\n', '      _transfer(msg.sender, _addresses[i], _amount[i]);\n', '      uint256 remainingTokens = tokensForMMM - _amount[i];\n', '      tokensForMMM = remainingTokens;\n', '      airdropcountOfMMM = airdropcountOfMMM + 1;\n', '      }\n', '    return true;\n', '   }\n', '\n', '  /** \n', '   * @dev Internal function that burns an amount of the token of a given account.\n', '   * @param account The account whose tokens will be burnt.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burn(address account, uint256 value) internal {\n', '    require(account != address(0),"Invalid account");\n', '    require(value > 0, "Invalid Amount");\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[account] = _balances[account].sub(value);\n', '    emit Transfer(account, address(0), value);\n', '  }\n', '\n', '  /** \n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public onlyOwner {\n', '    _burn(msg.sender, _value);\n', '  }\n', '  \n', '  /** \n', '   * @dev Internal function that burns an amount of the token of a given account.\n', '   * @param value The amount that will be burnt.\n', '   */\n', '  function _burnForCrowdsale(uint256 value) internal {\n', '    require(value > 0, "Invalid Amount");\n', '    _totalSupply = _totalSupply.sub(value);\n', '    _balances[_owner] = _balances[_owner].sub(value);\n', '    emit Transfer(_owner, address(0), value);\n', '  }\n', '  \n', '  /** \n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burnForCrowdsale(uint256 _value) public onlyCrowdsale {\n', '    _burnForCrowdsale(_value);\n', '  }\n', '\n', '  /** \n', '   * @dev Set crowsales status.\n', '   * @param status status of crowdsale.\n', '   */ \n', '\n', '   function setCrowdSalesStatus(bool status) public validatorForSettingCrowdsaleStatus{\n', '     crowdSaleStarted = status;\n', '  }\n', '\n', '  \n', '  // Mapping for users with id => address Staked Address\n', '  mapping (uint256 => address) private _stakerAddress;\n', '\n', '  // Mapping for users with id => Tokens \n', '  mapping (uint256 => uint256) private _usersTokens;\n', '  \n', '  // Mapping for users with id => Staking Time\n', '  mapping (uint256 => uint256) private _stakingStartTime;\n', '\n', '  // Mapping for users with id => Status\n', '  mapping (uint256 => bool) private _TokenTransactionstatus;  \n', ' \n', '  // Mapping to keep track of final withdraw value of staked token\n', '  mapping(uint256=>uint256) private _finalWithdrawlStake;\n', '  \n', '  // Reward Percentage\n', '  uint256 private _rewardPercentage= 15; \n', '  \n', '  // Count of no of staking\n', '  uint256 private _stakingCount = 0;\n', '\n', '  // Withdraw Time limit\n', '  uint256 _withdrawLimit = 2592000;\n', '\n', '\n', '   /** \n', '   * To check for the payable amount for purchasing the tokens\n', '   */\n', '  modifier payableCheck(){\n', '    require(msg.value > 0 ,\n', '      "Can not buy tokens,");\n', '    _;\n', '  }\n', '\n', '  /** \n', '   * @dev modifier to check the failsafe\n', '   */\n', '  modifier failSafe(){\n', '    require(_stopped == false, "Fail Safe check failed");\n', '    _;\n', '  }\n', '\n', ' /*\n', '  * ------------------------------------------------------------------------------------\n', '  * Owner functions of get value, set value, blacklist and withdraw ETH Functionality\n', '  * ------------------------------------------------------------------------------------\n', '  */\n', '\n', '  /**\n', '   * @dev Function to secure contract from fail by toggling _stopped variable\n', '   */\n', '  function toggleContractActive() public onlyOwner{\n', '    _stopped = !_stopped;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function to set token pool address\n', '   * @param add Address for token pool that manages supplies for stakes.\n', '   */\n', '  function setTokenPoolAddress(address add) public onlyOwner returns(bool){\n', '    require(add != address(0),"Invalid Address");\n', '    _tokenPoolAddress = add;\n', '    return true;\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to set crowdsale address\n', '   * @param add Address for crowdsale smart contract.\n', '   */\n', '  function setCrowdsaleAddress(address add) public onlyOwner returns(bool){\n', '    require(add != address(0),"Invalid Address");\n', '    _crowdsaleAddress = add;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get Token Pool addresss\n', '   */\n', '  function getTokenpoolAddress() public view returns(address){\n', '    return _tokenPoolAddress;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Function for setting rewards percentage by owner\n', '   * @param rewardsPercentage Reward percentage\n', '   */\n', '  function setRewardPercentage(uint256 rewardsPercentage) public onlyOwner returns(bool){\n', '    require(rewardsPercentage > 0, "Invalid Percentage");\n', '    _rewardPercentage = rewardsPercentage;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function for getting rewards percentage by owner\n', '   */\n', '  function getRewardPercentage() public view returns(uint256){\n', '    return _rewardPercentage;\n', '  }\n', '\n', '  \n', '  /**\n', '   * @dev Function to blacklist any stake\n', '   * @param status true/false\n', '   * @param stakingId stake id for that particular stake\n', '   */\n', '  function blacklistStake(bool status,uint256 stakingId) external onlyOwner{\n', '    _TokenTransactionstatus[stakingId] = status;\n', '  }\n', '\n', '  /**\n', '   * @dev function to get total ethers in contract\n', '   */\n', '    function getContractETHBalance() public view returns(uint256){\n', '    return(address(this).balance);\n', '    }\n', '\n', '  /** \n', '   * @dev function to withdraw total ethers from contract\n', '   */\n', '    function withdrawETH() external onlyOwner returns(bool){\n', '    msg.sender.transfer(address(this).balance);\n', '    return true;\n', '    }\n', '\n', ' \n', '/*\n', '   * -------------------------------------------------------------------------------------\n', '   * Functions for Staking Functionlaity\n', '   * -------------------------------------------------------------------------------------\n', '   */\n', '\n', '  /**\n', '   * @dev Function to get Final Withdraw Staked value\n', '   * @param id stake id for the stake\n', '   */\n', '  function getFinalWithdrawlStake(uint256 id) public view returns(uint256){\n', '    return _finalWithdrawlStake[id];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get Staking address by id\n', '   * @param id stake id for the stake\n', '   */\n', '  function getStakingAddressById(uint256 id) public view returns (address){\n', '    require(id <= _stakingCount,"Unable to reterive data on specified id, Please try again!!");\n', '    return _stakerAddress[id];\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to get Staking Starting time by id\n', '   * @param id stake id for the stake\n', '   */\n', '  function getStakingStartTimeById(uint256 id)public view returns(uint256){\n', '    require(id <= _stakingCount,"Unable to reterive data on specified id, Please try again!!");\n', '    return _stakingStartTime[id];\n', '  }\n', '  \n', '  /**\n', '   * @dev Function to get Staking tokens by id\n', '   * @param id stake id for the stake\n', '   */\n', '  function getStakingTokenById(uint256 id)public view returns(uint256){\n', '    require(id <= _stakingCount,"Unable to reterive data on specified id, Please try again!!");\n', '    return _usersTokens[id];\n', '  }\n', '  \n', ' /**\n', '   * @dev Function to get active Staking tokens by id\n', '   * @param id stake id for the stake\n', '   */\n', '  function getActiveStakesById(uint256 id)public view returns(address){\n', '    return _stakerAddress[id];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get Token lockstatus by id\n', '   * @param id stake id for the stake\n', '   */\n', '  function getTokenLockstatus(uint256 id)public view returns(bool){\n', '    return _TokenTransactionstatus[id];\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get staking count\n', '   */\n', '  function getStakingCount() public view returns(uint256){\n', '      return _stakingCount;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to get Rewards on the stake\n', '   * @param id stake id for the stake\n', '   */\n', '  function getRewardsDetailsOfUserById(uint256 id) public view returns(uint256){\n', '      return (_usersTokens[id].mul(_rewardPercentage).mul((block.timestamp - _stakingStartTime[id])/86400)).div(36500);\n', '  }\n', '\n', '  /**\n', '   * @dev Function for setting withdraw time limit by owner\n', '   * @param withdrawLimit Withdraw Limit\n', '   */\n', '  function setWithdrawLimit(uint256 withdrawLimit) public onlyOwner returns(bool){\n', '    require(withdrawLimit > 0, "Invalid Time");\n', '    _withdrawLimit = withdrawLimit;\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function for getting withdraw limit by owner\n', '   */\n', '  function getWithdrawLimit() public view returns(uint256){\n', '    return _withdrawLimit;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to performs staking for user tokens for a specific period of time\n', '   * @param tokens number of tokens\n', '   */\n', '  function performStaking(uint256 tokens) public failSafe returns(bool){\n', '    require(tokens > 0, "tokens cannot be zero");  \n', '    require(crowdSaleStarted == false, "Crowdsale not ended");\n', '    _stakingCount = _stakingCount +1 ;\n', '    _stakerAddress[_stakingCount] = msg.sender;\n', '    _stakingStartTime[_stakingCount] = block.timestamp;\n', '    _usersTokens[_stakingCount] = tokens;\n', '    _TokenTransactionstatus[_stakingCount] = false;\n', '    _transfer(msg.sender, _tokenPoolAddress, tokens);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function for withdrawing staked tokens\n', '   * @param stakingId stake id for the stake\n', '   */\n', '  function withdrawStakedTokens(uint256 stakingId) public failSafe returns(bool){\n', '    require(_stakerAddress[stakingId] == msg.sender,"No staked token found on this address and ID");\n', '    require(_TokenTransactionstatus[stakingId] != true,"Either tokens are already withdrawn or blocked by admin");\n', '    require(balanceOf(_tokenPoolAddress) >= _usersTokens[stakingId], "Pool is dry, can not perform transaction");\n', '    _TokenTransactionstatus[stakingId] = true;\n', '        if (block.timestamp > _stakingStartTime[_stakingCount].add(_withdrawLimit)){\n', '          _finalWithdrawlStake[stakingId] = _usersTokens[stakingId] +getRewardsDetailsOfUserById(stakingId);\n', '        _transfer(_tokenPoolAddress, msg.sender, _usersTokens[stakingId]);\n', '        _transfer(_owner, msg.sender, getRewardsDetailsOfUserById(stakingId));\n', '        }\n', '        else {\n', '         _transfer(_tokenPoolAddress, msg.sender, _usersTokens[stakingId]); \n', '        }\n', '    return true;\n', '  }\n', '\n', '/*\n', ' * -------------------------------------------------------------------------------------\n', ' * Functions for Governance Functionality\n', ' * -------------------------------------------------------------------------------------\n', ' */\n', '\n', '  // Map a proposal ID to a specific proposal\n', '  mapping(uint256 => Proposal) public proposals;\n', "  // Map a proposal ID to a voter's address and their vote\n", '  mapping(uint256 => mapping(address => bool)) public voted;\n', '  // Determine if the user is blocked from voting\n', '  mapping (address => uint256) public blocked;\n', '  mapping (address => bool) public isBlocked;\n', '  mapping (uint256 => mapping (address => bool)) public votes;\n', '  \n', '  uint256 public proposalIDcount = 0;\n', '  struct Proposal {\n', '    address submitter;\n', '    uint256 votingDeadline;\n', '    uint256 inFavour;\n', '    uint256 inAgainst;\n', '  }\n', '\n', 'event VotesSubmitted (uint256 _proposalID);\n', 'event ProposalSubmitted(uint256 proposalId);\n', '\n', '/** \n', ' * @dev Modifier to check if a user account is blocked\n', ' */\n', '    modifier whenNotBlocked(address _account) {\n', '      require(!isBlocked[_account]);\n', '      _;\n', '    }\n', '\n', '/** \n', ' * @dev Function to blacklist any address\n', ' * @param status true/false\n', ' * @param _account _account address for that particular user\n', ' */\n', '  function blacklistAddresses(bool status, address _account) external onlyOwner {\n', '    isBlocked[_account] = status;\n', '  }\n', '\n', '/**\n', ' * @dev Allows a token holder to submit a proposal to vote on\n', ' * @param voteLength time limit for the voting\n', ' */\n', '  function submitProposal(uint256 voteLength) public onlyOwner returns (uint256) {\n', '    _transfer(msg.sender, _owner, 10**_decimal);\n', '    uint256 proposalID = addProposal(msg.sender, voteLength);\n', '    emit ProposalSubmitted(proposalID);\n', '    return proposalID;\n', '  }\n', '\n', '\n', '/**\n', ' * @dev Adds a new proposal to the proposal mapping\n', ' * @param Submitter address of the submitter who is submitting the proposal\n', ' * @param voteLength time limit for the voting\n', ' */\n', '  function addProposal(address Submitter, uint256 voteLength) internal returns (uint256) {\n', '   \n', '    uint256 ID = proposalIDcount;\n', '    proposals[ID] = Proposal({\n', '    inFavour: 0,\n', '    inAgainst: 0,\n', '    submitter: Submitter,\n', '    votingDeadline: block.timestamp + voteLength\n', '     });\n', '    proposalIDcount = proposalIDcount.add(1);\n', '    return ID;\n', '  }\n', '\n', '/**\n', ' * @dev Allows token holders to submit their votes in favor of a specific proposalID\n', ' * @param _proposalID The proposal ID the token holder is voting on\n', ' */  \n', '  function submitVote(uint256 _proposalID, bool vote) whenNotBlocked(msg.sender) public returns (bool){\n', '    require(voted[_proposalID][msg.sender] == false, "Already voted");\n', '    Proposal memory p = proposals[_proposalID];\n', '    require(p.votingDeadline > block.timestamp, "Voting time over");\n', '    if (blocked[msg.sender] == 0) {\n', '      blocked[msg.sender] = _proposalID;\n', '    } else if (p.votingDeadline >   proposals[blocked[msg.sender]].votingDeadline) \n', '    {       \n', '      blocked[msg.sender] = _proposalID;\n', '    }\n', '  \n', '    _transfer(msg.sender, _owner, 10**_decimal);\n', '    \n', '    _burn(_owner, 10**_decimal);\n', '\n', '    voted[_proposalID][msg.sender] = true;\n', '\n', '    if (vote == true){\n', '       proposals[_proposalID].inFavour++;\n', '       votes[_proposalID][msg.sender] = true;   \n', '    }\n', '    else {\n', '    proposals[_proposalID].inAgainst ++;\n', '    votes[_proposalID][msg.sender] = false;\n', '    }\n', '\n', '     emit VotesSubmitted(\n', '        _proposalID); \n', '\n', '    return true;\n', '  }\n', '\n', '/**\n', ' * @dev Allows to get status of a proposal for a specific proposalID\n', ' * @param _proposalID The proposal ID the proposal\n', ' */  \n', 'function getProposalStatus(uint256 _proposalID) public view returns(bool){\n', 'require(proposals[_proposalID].votingDeadline < block.timestamp, "Voting time is not over");   \n', ' if (proposals[_proposalID].inFavour > proposals[_proposalID].inAgainst){\n', 'return true;\n', '}\n', '    else{\n', 'return false;\n', '        }\n', '    }\n', '}']