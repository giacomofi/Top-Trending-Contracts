['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', 'pragma solidity ^0.5.2;\n', '\n', 'import "Freezable.sol";\n', 'import "KeyGetters.sol";\n', 'import "MainGovernance.sol";\n', 'import "Operator.sol";\n', 'import "AcceptModifications.sol";\n', 'import "Escapes.sol";\n', 'import "StateRoot.sol";\n', 'import "TokenQuantization.sol";\n', 'import "UpdateState.sol";\n', 'import "IFactRegistry.sol";\n', 'import "SubContractor.sol";\n', '\n', 'contract StarkExState is\n', '    MainGovernance,\n', '    SubContractor,\n', '    Operator,\n', '    Freezable,\n', '    AcceptModifications,\n', '    TokenQuantization,\n', '    StateRoot,\n', '    Escapes,\n', '    UpdateState,\n', '    KeyGetters\n', '{\n', '    uint256 constant INITIALIZER_SIZE = 224;  // 1 x address + 6 * uint256 = 224 bytes.\n', '\n', '    /*\n', '      Initialization flow:\n', '      1. Extract initialization parameters from data.\n', '      2. Call internalInitializer with those parameters.\n', '    */\n', '    function initialize(bytes calldata data) external {\n', '\n', '        // This initializer sets roots etc. It must not be applied twice.\n', '        // I.e. it can run only when the state is still empty.\n', '        require(vaultRoot == 0, "STATE_ALREADY_INITIALIZED");\n', '        require(vaultTreeHeight == 0, "STATE_ALREADY_INITIALIZED");\n', '        require(orderRoot == 0, "STATE_ALREADY_INITIALIZED");\n', '        require(orderTreeHeight == 0, "STATE_ALREADY_INITIALIZED");\n', '\n', '        require(data.length == INITIALIZER_SIZE, "INCORRECT_INIT_DATA_SIZE_224");\n', '        IFactRegistry escapeVerifier;\n', '        uint256 initialSequenceNumber;\n', '        uint256 initialVaultRoot;\n', '        uint256 initialOrderRoot;\n', '        uint256 initialVaultTreeHeight;\n', '        uint256 initialOrderTreeHeight;\n', '        uint256 onchainDataVersionValue;\n', '        (\n', '            escapeVerifier,\n', '            initialSequenceNumber,\n', '            initialVaultRoot,\n', '            initialOrderRoot,\n', '            initialVaultTreeHeight,\n', '            initialOrderTreeHeight,\n', '            onchainDataVersionValue\n', '        ) = abi.decode(data, (IFactRegistry, uint256, uint256, uint256, uint256, uint256, uint256));\n', '\n', '        initGovernance();\n', '        Operator.initialize();\n', '        StateRoot.initialize(\n', '            initialSequenceNumber,\n', '            initialVaultRoot,\n', '            initialOrderRoot,\n', '            initialVaultTreeHeight,\n', '            initialOrderTreeHeight\n', '        );\n', '        Escapes.initialize(escapeVerifier);\n', '        // TODO(zuphit,01/01/2021): add an attributes subcontract and move this there.\n', '        onchainDataVersion = onchainDataVersionValue;\n', '    }\n', '\n', '    /*\n', '      The call to initializerSize is done from MainDispatcher using delegatecall,\n', '      thus the existing state is already accessible.\n', '    */\n', '    function initializerSize() external view returns (uint256) {\n', '        return INITIALIZER_SIZE;\n', '    }\n', '\n', '    function identify() external pure returns (string memory) {\n', '        return "StarkWare_StarkExState_2020_1";\n', '    }\n', '}']