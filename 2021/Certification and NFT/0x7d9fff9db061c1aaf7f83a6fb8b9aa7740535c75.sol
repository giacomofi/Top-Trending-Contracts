['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-05\n', '*/\n', '\n', '//"SPDX-License-Identifier: UNLICENSED"\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', '//"SPDX-License-Identifier: UNLICENSED"\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'interface UniswapV2Router{\n', '    \n', '    function addLiquidity(\n', '      address tokenA,\n', '      address tokenB,\n', '      uint amountADesired,\n', '      uint amountBDesired,\n', '      uint amountAMin,\n', '      uint amountBMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    \n', '    function addLiquidityETH(\n', '      address token,\n', '      uint amountTokenDesired,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '     \n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    \n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    \n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    \n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(address indexed sender, uint amount0In, uint amount1In, uint amount0Out, uint amount1Out, address indexed to);\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'contract Owned {\n', '    \n', '    //address of contract owner\n', '    address public owner;\n', '\n', '    //event for transfer of ownership\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the _owner as the initial owner.\n', '     */\n', '    constructor(address _owner) public {\n', '        owner = _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner {\n', "        require(msg.sender == owner, 'only owner allowed');\n", '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`_newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address _newOwner) external onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '    }\n', '}\n', '\n', 'interface Multiplier {\n', '    function updateLockupPeriod(address _user, uint _lockup) external returns(bool);\n', '    function getMultiplierCeiling() external pure returns (uint);\n', '    function balance(address user) external view returns (uint);\n', '    function approvedContract(address _user) external view returns(address);\n', '    function lockupPeriod(address user) external view returns (uint);\n', '}\n', '\n', '/* \n', ' * @dev PoolStakes contract for locking up liquidity to earn bonus rewards.\n', ' */\n', 'contract PoolStake is Owned {\n', '    //instantiate SafeMath library\n', '    using SafeMath for uint;\n', '    \n', '    IERC20 internal weth;                       //represents weth.\n', "    IERC20 internal token;                      //represents the project's token which should have a weth pair on uniswap\n", '    IERC20 internal lpToken;                    //lpToken for liquidity provisioning\n', '    \n', '    address internal uToken;                    //utility token\n', '    address internal wallet;                    //company wallet\n', '    uint internal scalar = 10**36;              //unit for scaling\n', '    uint internal cap;                          //ETH limit that can be provided\n', '    \n', '    Multiplier internal multiplier;                         //Interface of Multiplier contract\n', '    UniswapV2Router internal uniswapRouter;                 //Interface of Uniswap V2 router\n', '    IUniswapV2Factory internal iUniswapV2Factory;           //Interface of uniswap V2 factory\n', '    \n', '    //user struct\n', '    struct User {\n', '        uint start;                 //starting period\n', '        uint release;               //release period\n', '        uint tokenBonus;            //user token bonus\n', '        uint wethBonus;             //user weth bonus\n', '        uint tokenWithdrawn;        //amount of token bonus withdrawn\n', '        uint wethWithdrawn;         //amount of weth bonus withdrawn\n', '        uint liquidity;             //user liquidity gotten from uniswap\n', '        bool migrated;              //if migrated to uniswap V3\n', '    }\n', '    \n', '    //address to User mapping\n', '    mapping(address => User) internal _users;\n', '    \n', '    uint32 internal constant _012_HOURS_IN_SECONDS = 43200;\n', '    \n', '    //term periods\n', '    uint32 internal period1;\n', '    uint32 internal period2;\n', '    uint32 internal period3;\n', '    uint32 internal period4;\n', '    \n', '    //return percentages for ETH and token                          1000 = 1% \n', '    uint internal period1RPWeth; \n', '    uint internal period2RPWeth;\n', '    uint internal period3RPWeth;\n', '    uint internal period4RPWeth;\n', '    uint internal period1RPToken; \n', '    uint internal period2RPToken;\n', '    uint internal period3RPToken;\n', '    uint internal period4RPToken;\n', '    \n', '    //available bonuses rto be claimed\n', '    uint internal _pendingBonusesWeth;\n', '    uint internal _pendingBonusesToken;\n', '    \n', '    //migration contract for Uniswap V3\n', '    address public migrationContract;\n', '    \n', '    //events\n', '    event BonusAdded(address indexed sender, uint ethAmount, uint tokenAmount);\n', '    event BonusRemoved(address indexed sender, uint amount);\n', '    event CapUpdated(address indexed sender, uint amount);\n', '    event LPWithdrawn(address indexed sender, uint amount);\n', '    event LiquidityAdded(address indexed sender, uint liquidity, uint amountETH, uint amountToken);\n', '    event LiquidityWithdrawn(address indexed sender, uint liquidity, uint amountETH, uint amountToken);\n', '    event UserTokenBonusWithdrawn(address indexed sender, uint amount, uint fee);\n', '    event UserETHBonusWithdrawn(address indexed sender, uint amount, uint fee);\n', '    event VersionMigrated(address indexed sender, uint256 time, address to);\n', '    event LiquidityMigrated(address indexed sender, uint amount, address to);\n', '    \n', '    /* \n', '     * @dev initiates a new PoolStake.\n', '     * ------------------------------------------------------\n', '     * @param _token    --> token offered for staking liquidity.\n', '     * @param _Owner    --> address for the initial contract owner.\n', '     */ \n', '    constructor(address _token, address _Owner) public Owned(_Owner) {\n', '            \n', '        require(_token != address(0), "can not deploy a zero address");\n', '        token = IERC20(_token);\n', '        weth = IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); \n', '        \n', '        iUniswapV2Factory = IUniswapV2Factory(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f);\n', '        address _lpToken = iUniswapV2Factory.getPair(address(token), address(weth));\n', '        require(_lpToken != address(0), "Pair must first be created on uniswap");\n', '        lpToken = IERC20(_lpToken);\n', '        \n', '        uToken = 0x9Ed8e7C9604790F7Ec589F99b94361d8AAB64E5E;\n', '        wallet = 0xa7A4d919202DFA2f4E44FFAc422d21095bF9770a;\n', '        multiplier = Multiplier(0xbc962d7be33d8AfB4a547936D8CE6b9a1034E9EE);\n', '        uniswapRouter = UniswapV2Router(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);        \n', '    }\n', '    \n', '    /* \n', '     * @dev change the return percentage for locking up liquidity for ETH and Token (only Owner).\n', '     * ------------------------------------------------------------------------------------\n', '     * @param _period1RPETH - _period4RPToken --> the new return percentages.\n', '     * ----------------------------------------------\n', '     * returns whether successfully changed or not.\n', '     */ \n', '    function changeReturnPercentages(\n', '        uint _period1RPETH, uint _period2RPETH, uint _period3RPETH, uint _period4RPETH, \n', '        uint _period1RPToken, uint _period2RPToken, uint _period3RPToken, uint _period4RPToken\n', '    ) external onlyOwner returns(bool) {\n', '        \n', '        period1RPWeth = _period1RPETH;\n', '        period2RPWeth = _period2RPETH;\n', '        period3RPWeth = _period3RPETH;\n', '        period4RPWeth = _period4RPETH;\n', '        \n', '        period1RPToken = _period1RPToken;\n', '        period2RPToken = _period2RPToken;\n', '        period3RPToken = _period3RPToken;\n', '        period4RPToken = _period4RPToken;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev change the lockup periods (only Owner).\n', '     * ------------------------------------------------------------------------------------\n', '     * @param _firstTerm - _fourthTerm --> the new term periods.\n', '     * ----------------------------------------------\n', '     * returns whether successfully changed or not.\n', '     */ \n', '    function changeTermPeriods(\n', '        uint32 _firstTerm, uint32 _secondTerm, \n', '        uint32 _thirdTerm, uint32 _fourthTerm\n', '    ) external onlyOwner returns(bool) {\n', '        \n', '        period1 = _firstTerm;\n', '        period2 = _secondTerm;\n', '        period3 = _thirdTerm;\n', '        period4 = _fourthTerm;\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev change the maximum ETH that a user can enter with (only Owner).\n', '     * ------------------------------------------------------------------------------------\n', '     * @param _cap      --> the new cap value.\n', '     * ----------------------------------------------\n', '     * returns whether successfully changed or not.\n', '     */ \n', '    function changeCap(uint _cap) external onlyOwner returns(bool) {\n', '        \n', '        cap = _cap;\n', '        \n', '        emit CapUpdated(msg.sender, _cap);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev makes migration possible for uniswap V3 (only Owner).\n', '     * ----------------------------------------------------------\n', '     * @param _unistakeMigrationContract      --> the migration contract address.\n', '     * -------------------------------------------------------------------------\n', '     * returns whether successfully migrated or not.\n', '     */ \n', '    function allowMigration(address _unistakeMigrationContract) external onlyOwner returns (bool) {\n', '        \n', '        require(_unistakeMigrationContract != address(0x0), "cannot migrate to a null address");\n', '        migrationContract = _unistakeMigrationContract;\n', '        \n', '        emit VersionMigrated(msg.sender, now, migrationContract);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev initiates migration for a user (only when migration is allowed).\n', '     * -------------------------------------------------------------------\n', '     * @param _unistakeMigrationContract      --> the migration contract address.\n', '     * -------------------------------------------------------------------------\n', '     * returns whether successfully migrated or not.\n', '     */ \n', '    function startMigration(address _unistakeMigrationContract) external returns (bool) {\n', '        \n', '        require(_unistakeMigrationContract != address(0x0), "cannot migrate to a null address");\n', '        require(migrationContract == _unistakeMigrationContract, "must confirm endpoint");\n', '        require(!getUserMigration(msg.sender), "must not be migrated already");\n', '        \n', '        _users[msg.sender].migrated = true;\n', '        \n', '        uint256 liquidity = _users[msg.sender].liquidity;\n', '        lpToken.transfer(migrationContract, liquidity);\n', '        \n', '        emit LiquidityMigrated(msg.sender, liquidity, migrationContract);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev add more staking bonuses to the pool.\n', '     * ----------------------------------------\n', '     * @param              --> input value along with call to add ETH\n', '     * @param _tokenAmount --> the amount of token to be added.\n', '     * --------------------------------------------------------\n', '     * returns whether successfully added or not.\n', '     */ \n', '    function addBonus(uint _tokenAmount) external payable returns(bool) {\n', '        \n', '        require(_tokenAmount > 0 || msg.value > 0, "must send value");\n', '        if (_tokenAmount > 0)\n', '        require(token.transferFrom(msg.sender, address(this), _tokenAmount), "must approve smart contract");\n', '        \n', '        emit BonusAdded(msg.sender, msg.value, _tokenAmount);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev remove staking bonuses to the pool. (only owner)\n', '     * must have enough asset to be removed\n', '     * ----------------------------------------\n', '     * @param _amountETH   --> eth amount to be removed\n', '     * @param _amountToken --> token amount to be removed.\n', '     * --------------------------------------------------------\n', '     * returns whether successfully added or not.\n', '     */ \n', '    function removeETHAndTokenBouses(uint _amountETH, uint _amountToken) external onlyOwner returns (bool success) {\n', '       \n', '        require(_amountETH > 0 || _amountToken > 0, "amount must be larger than zero");\n', '    \n', '        if (_amountETH > 0) {\n', "            require(_checkForSufficientStakingBonusesForETH(_amountETH), 'cannot withdraw above current ETH bonus balance');\n", '            msg.sender.transfer(_amountETH);\n', '            emit BonusRemoved(msg.sender, _amountETH);\n', '        }\n', '        \n', '        if (_amountToken > 0) {\n', "            require(_checkForSufficientStakingBonusesForToken(_amountToken), 'cannot withdraw above current token bonus balance');\n", '            require(token.transfer(msg.sender, _amountToken), "error: token transfer failed");\n', '            emit BonusRemoved(msg.sender, _amountToken);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev add unwrapped liquidity to staking pool.\n', '     * --------------------------------------------\n', '     * @param _tokenAmount  --> must input token amount along with call\n', '     * @param _term         --> the lockup term.\n', '     * @param _multiplier   --> whether multiplier should be used or not\n', '     *                        1 means you want to use the multiplier. !1 means no multiplier\n', '     * --------------------------------------------------------------\n', '     * returns whether successfully added or not.\n', '     */\n', '    function addLiquidity(uint _term, uint _multiplier) external payable returns(bool) {\n', '        \n', '        require(!getUserMigration(msg.sender), "must not be migrated already");\n', '        require(now >= _users[msg.sender].release, "cannot override current term");\n', '        require(_isValidTerm(_term), "must select a valid term");\n', '        require(msg.value > 0, "must send ETH along with transaction");\n', '        if (cap != 0) require(msg.value <= cap, "cannot provide more than the cap");\n', '        \n', '        uint rate = _proportion(msg.value, address(weth), address(token));\n', '        require(token.transferFrom(msg.sender, address(this), rate), "must approve smart contract");\n', '        \n', '        (uint ETH_bonus, uint token_bonus) = getUserBonusPending(msg.sender);\n', '        require(ETH_bonus == 0 && token_bonus == 0, "must first withdraw available bonus");\n', '        \n', '        uint oneTenthOfRate = (rate.mul(10)).div(100);\n', '        token.approve(address(uniswapRouter), rate);\n', '\n', '        (uint amountToken, uint amountETH, uint liquidity) = \n', '        uniswapRouter.addLiquidityETH{value: msg.value}(\n', '            address(token), \n', '            rate.add(oneTenthOfRate), \n', '            0, \n', '            0, \n', '            address(this), \n', '            now.add(_012_HOURS_IN_SECONDS));\n', '        \n', '        _users[msg.sender].start = now;\n', '        _users[msg.sender].release = now.add(_term);\n', '        \n', '        uint previousLiquidity = _users[msg.sender].liquidity; \n', '        _users[msg.sender].liquidity = previousLiquidity.add(liquidity);  \n', '        \n', '        uint wethRP = _calculateReturnPercentage(weth, _term);\n', '        uint tokenRP = _calculateReturnPercentage(token, _term);\n', '               \n', '        (uint provided_ETH, uint provided_token) = getUserLiquidity(msg.sender);\n', '        \n', '        if (_multiplier == 1) \n', '        _withMultiplier(_term, provided_ETH, provided_token, wethRP,  tokenRP);\n', '        else _withoutMultiplier(provided_ETH, provided_token, wethRP, tokenRP);\n', '        \n', '        emit LiquidityAdded(msg.sender, liquidity, amountETH, amountToken);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev uses the Multiplier contract for double rewarding\n', '     * ------------------------------------------------------\n', '     * @param _term       --> the lockup term.\n', '     * @param amountETH   --> ETH amount provided in liquidity\n', '     * @param amountToken --> token amount provided in liquidity\n', '     * @param wethRP      --> return percentge for ETH based on term period\n', '     * @param tokenRP     --> return percentge for token based on term period\n', '     * --------------------------------------------------------------------\n', '     */\n', '    function _withMultiplier(\n', '        uint _term, uint amountETH, uint amountToken, uint wethRP, uint tokenRP\n', '    ) internal {\n', '        \n', '        require(multiplier.balance(msg.sender) > 0, "No Multiplier balance to use");\n', '        if (_term > multiplier.lockupPeriod(msg.sender)) multiplier.updateLockupPeriod(msg.sender, _term);\n', '        \n', '        uint multipliedETH = _proportion(multiplier.balance(msg.sender), uToken, address(weth));\n', '        uint multipliedToken = _proportion(multipliedETH, address(weth), address(token));\n', '        uint addedBonusWeth;\n', '        uint addedBonusToken;\n', '        \n', '        if (_offersBonus(weth) && _offersBonus(token)) {\n', '                    \n', '            if (multipliedETH > amountETH) {\n', '                multipliedETH = (_calculateBonus((amountETH.mul(multiplier.getMultiplierCeiling())), wethRP));\n', '                addedBonusWeth = multipliedETH;\n', '            } else {\n', '                addedBonusWeth = (_calculateBonus((amountETH.add(multipliedETH)), wethRP));\n', '            }\n', '                    \n', '            if (multipliedToken > amountToken) {\n', '                multipliedToken = (_calculateBonus((amountToken.mul(multiplier.getMultiplierCeiling())), tokenRP));\n', '                addedBonusToken = multipliedToken;\n', '            } else {\n', '                addedBonusToken = (_calculateBonus((amountToken.add(multipliedToken)), tokenRP));\n', '            }\n', '                \n', '            require(_checkForSufficientStakingBonusesForETH(addedBonusWeth)\n', '            && _checkForSufficientStakingBonusesForToken(addedBonusToken),\n', '            "must be sufficient staking bonuses available in pool");\n', '                            \n', '            _users[msg.sender].wethBonus = _users[msg.sender].wethBonus.add(addedBonusWeth);\n', '            _users[msg.sender].tokenBonus = _users[msg.sender].tokenBonus.add(addedBonusToken);\n', '            _pendingBonusesWeth = _pendingBonusesWeth.add(addedBonusWeth);\n', '            _pendingBonusesToken = _pendingBonusesToken.add(addedBonusToken);\n', '                    \n', '        } else if (_offersBonus(weth) && !_offersBonus(token)) {\n', '                    \n', '            if (multipliedETH > amountETH) {\n', '                multipliedETH = (_calculateBonus((amountETH.mul(multiplier.getMultiplierCeiling())), wethRP));\n', '                addedBonusWeth = multipliedETH;\n', '            } else {\n', '                addedBonusWeth = (_calculateBonus((amountETH.add(multipliedETH)), wethRP));\n', '            }\n', '                    \n', '            require(_checkForSufficientStakingBonusesForETH(addedBonusWeth), \n', '            "must be sufficient staking bonuses available in pool");\n', '                    \n', '            _users[msg.sender].wethBonus = _users[msg.sender].wethBonus.add(addedBonusWeth);\n', '            _pendingBonusesWeth = _pendingBonusesWeth.add(addedBonusWeth);\n', '                    \n', '        } else if (!_offersBonus(weth) && _offersBonus(token)) {\n', '        \n', '            if (multipliedToken > amountToken) {\n', '                multipliedToken = (_calculateBonus((amountToken.mul(multiplier.getMultiplierCeiling())), tokenRP));\n', '                addedBonusToken = multipliedToken;\n', '            } else {\n', '                addedBonusToken = (_calculateBonus((amountToken.add(multipliedToken)), tokenRP));\n', '            }\n', '                    \n', '            require(_checkForSufficientStakingBonusesForToken(addedBonusToken),\n', '            "must be sufficient staking bonuses available in pool");\n', '                    \n', '            _users[msg.sender].tokenBonus = _users[msg.sender].tokenBonus.add(addedBonusToken);\n', '            _pendingBonusesToken = _pendingBonusesToken.add(addedBonusToken);\n', '        }\n', '    }\n', '    \n', '    /* \n', '     * @dev distributes bonus without considering Multiplier\n', '     * ------------------------------------------------------\n', '     * @param amountETH   --> ETH amount provided in liquidity\n', '     * @param amountToken --> token amount provided in liquidity\n', '     * @param wethRP      --> return percentge for ETH based on term period\n', '     * @param tokenRP     --> return percentge for token based on term period\n', '     * --------------------------------------------------------------------\n', '     */\n', '    function _withoutMultiplier(\n', '        uint amountETH, uint amountToken, uint wethRP, uint tokenRP\n', '    ) internal {\n', '            \n', '        uint addedBonusWeth;\n', '        uint addedBonusToken;\n', '        \n', '        if (_offersBonus(weth) && _offersBonus(token)) {\n', '            \n', '            addedBonusWeth = _calculateBonus(amountETH, wethRP);\n', '            addedBonusToken = _calculateBonus(amountToken, tokenRP);\n', '                \n', '            require(_checkForSufficientStakingBonusesForETH(addedBonusWeth)\n', '            && _checkForSufficientStakingBonusesForToken(addedBonusToken),\n', '            "must be sufficient staking bonuses available in pool");\n', '                        \n', '            _users[msg.sender].wethBonus = _users[msg.sender].wethBonus.add(addedBonusWeth);\n', '            _users[msg.sender].tokenBonus = _users[msg.sender].tokenBonus.add(addedBonusToken);\n', '            _pendingBonusesWeth = _pendingBonusesWeth.add(addedBonusWeth);\n', '            _pendingBonusesToken = _pendingBonusesToken.add(addedBonusToken);\n', '                \n', '        } else if (_offersBonus(weth) && !_offersBonus(token)) {\n', '                \n', '            addedBonusWeth = _calculateBonus(amountETH, wethRP);\n', '                \n', '            require(_checkForSufficientStakingBonusesForETH(addedBonusWeth), \n', '            "must be sufficient staking bonuses available in pool");\n', '                \n', '            _users[msg.sender].wethBonus = _users[msg.sender].wethBonus.add(addedBonusWeth);\n', '            _pendingBonusesWeth = _pendingBonusesWeth.add(addedBonusWeth);\n', '                \n', '        } else if (!_offersBonus(weth) && _offersBonus(token)) {\n', '                \n', '            addedBonusToken = _calculateBonus(amountToken, tokenRP);\n', '                \n', '            require(_checkForSufficientStakingBonusesForToken(addedBonusToken),\n', '            "must be sufficient staking bonuses available in pool");\n', '                \n', '            _users[msg.sender].tokenBonus = _users[msg.sender].tokenBonus.add(addedBonusToken);\n', '            _pendingBonusesToken = _pendingBonusesToken.add(addedBonusToken);\n', '        }\n', '        \n', '    }\n', '    \n', '    /* \n', '     * @dev relocks liquidity already provided\n', '     * --------------------------------------------\n', '     * @param _term       --> the lockup term.\n', '     * @param _multiplier --> whether multiplier should be used or not\n', '     *                        1 means you want to use the multiplier. !1 means no multiplier\n', '     * --------------------------------------------------------------\n', '     * returns whether successfully relocked or not.\n', '     */\n', '    function relockLiquidity(uint _term, uint _multiplier) external returns(bool) {\n', '        \n', '        require(!getUserMigration(msg.sender), "must not be migrated already");\n', '        require(_users[msg.sender].liquidity > 0, "do not have any liquidity to lock");\n', '        require(now >= _users[msg.sender].release, "cannot override current term");\n', '        require(_isValidTerm(_term), "must select a valid term");\n', '        \n', '        (uint ETH_bonus, uint token_bonus) = getUserBonusPending(msg.sender);\n', "        require (ETH_bonus == 0 && token_bonus == 0, 'must withdraw available bonuses first');\n", '        \n', '        (uint provided_ETH, uint provided_token) = getUserLiquidity(msg.sender);\n', '        if (cap != 0) require(provided_ETH <= cap, "cannot provide more than the cap");\n', '        \n', '        uint wethRP = _calculateReturnPercentage(weth, _term);\n', '        uint tokenRP = _calculateReturnPercentage(token, _term);\n', '        \n', '        _users[msg.sender].start = now;\n', '        _users[msg.sender].release = now.add(_term);\n', '        \n', '        if (_multiplier == 1) _withMultiplier(_term, provided_ETH, provided_token, wethRP,  tokenRP);\n', '        else _withoutMultiplier(provided_ETH, provided_token, wethRP, tokenRP); \n', '        \n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev withdraw unwrapped liquidity by user if released.\n', '     * -------------------------------------------------------\n', "     * @param _lpAmount --> takes the amount of user's lp token to be withdrawn.\n", '     * -------------------------------------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function withdrawLiquidity(uint _lpAmount) external returns(bool) {\n', '        \n', '        require(!getUserMigration(msg.sender), "must not be migrated already");\n', '        \n', '        uint liquidity = _users[msg.sender].liquidity;\n', '        require(_lpAmount > 0 && _lpAmount <= liquidity, "do not have any liquidity");\n', '        require(now >= _users[msg.sender].release, "cannot override current term");\n', '        \n', '        _users[msg.sender].liquidity = liquidity.sub(_lpAmount); \n', '        \n', '        lpToken.approve(address(uniswapRouter), _lpAmount);                                         \n', '        \n', '        (uint amountToken, uint amountETH) = \n', '            uniswapRouter.removeLiquidityETH(\n', '                address(token),\n', '                _lpAmount,\n', '                1,\n', '                1,\n', '                msg.sender,\n', '                now.add(_012_HOURS_IN_SECONDS));\n', '        \n', '        emit LiquidityWithdrawn(msg.sender, _lpAmount, amountETH, amountToken);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev withdraw LP token by user if released.\n', '     * -------------------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function withdrawUserLP() external returns(bool) {\n', '        \n', '        require(!getUserMigration(msg.sender), "must not be migrated already");\n', '        \n', '        uint liquidity = _users[msg.sender].liquidity;\n', '        require(liquidity > 0, "do not have any liquidity");\n', '        require(now >= _users[msg.sender].release, "cannot override current term");\n', '        \n', '        _users[msg.sender].liquidity = 0; \n', '        \n', '        lpToken.transfer(msg.sender, liquidity);                                         \n', '        \n', '        emit LPWithdrawn(msg.sender, liquidity);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev withdraw available staking bonuses earned from locking up liquidity. \n', '     * --------------------------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */  \n', '    function withdrawUserBonus() public returns(bool) {\n', '        \n', '        (uint ETH_bonus, uint token_bonus) = getUserBonusAvailable(msg.sender);\n', '        require(ETH_bonus > 0 || token_bonus > 0, "you do not have any bonus available");\n', '        \n', '        uint releasedToken = _calculateTokenReleasedAmount(msg.sender);\n', '        uint releasedETH = _calculateETHReleasedAmount(msg.sender);\n', '        \n', '        if (releasedToken > 0 && releasedETH > 0) {\n', '            \n', '            _withdrawUserTokenBonus(msg.sender, releasedToken);\n', '            _withdrawUserETHBonus(msg.sender, releasedETH);\n', '            \n', '        } else if (releasedETH > 0 && releasedToken == 0) \n', '            _withdrawUserETHBonus(msg.sender, releasedETH);\n', '        \n', '        else if (releasedETH == 0 && releasedToken > 0)\n', '            _withdrawUserTokenBonus(msg.sender, releasedToken);\n', '        \n', '        if (_users[msg.sender].release <= now) {\n', '            \n', '            _users[msg.sender].wethWithdrawn = 0;\n', '            _users[msg.sender].tokenWithdrawn = 0;\n', '            _users[msg.sender].wethBonus = 0;\n', '            _users[msg.sender].tokenBonus = 0;\n', '        }\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev withdraw ETH bonus earned from locking up liquidity\n', '     * --------------------------------------------------------------\n', '     * @param _user          --> address of the user making withdrawal\n', '     * @param releasedAmount --> released ETH to be withdrawn\n', '     * ------------------------------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function _withdrawUserETHBonus(address payable _user, uint releasedAmount) internal returns(bool) {\n', '     \n', '        _users[_user].wethWithdrawn = _users[_user].wethWithdrawn.add(releasedAmount);\n', '        _pendingBonusesWeth = _pendingBonusesWeth.sub(releasedAmount);\n', '        \n', '        (uint fee, uint feeInETH) = _calculateETHFee(releasedAmount);\n', '        \n', '        require(IERC20(uToken).transferFrom(_user, wallet, fee), "must approve fee");\n', '        _user.transfer(releasedAmount);\n', '    \n', '        emit UserETHBonusWithdrawn(_user, releasedAmount, feeInETH);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', '     * @dev withdraw token bonus earned from locking up liquidity\n', '     * --------------------------------------------------------------\n', '     * @param _user          --> address of the user making withdrawal\n', '     * @param releasedAmount --> released token to be withdrawn\n', '     * ------------------------------------------------------------------\n', '     * returns whether successfully withdrawn or not.\n', '     */\n', '    function _withdrawUserTokenBonus(address _user, uint releasedAmount) internal returns(bool) {\n', '        \n', '        _users[_user].tokenWithdrawn = _users[_user].tokenWithdrawn.add(releasedAmount);\n', '        _pendingBonusesToken = _pendingBonusesToken.sub(releasedAmount);\n', '        \n', '        (uint fee, uint feeInToken) = _calculateTokenFee(releasedAmount);\n', '        \n', '        require(IERC20(uToken).transferFrom(_user, wallet, fee), "must approve fee");\n', '        token.transfer(_user, releasedAmount);\n', '    \n', '        emit UserTokenBonusWithdrawn(_user, releasedAmount, feeInToken);\n', '        return true;\n', '    }\n', '    \n', '    /* \n', "     * @dev gets an asset's amount in proportion of a pair asset\n", '     * ---------------------------------------------------------\n', '     * param _amount --> the amount of first asset\n', '     * param _tokenA --> the address of the first asset\n', '     * param _tokenB --> the address of the second asset\n', '     * -------------------------------------------------\n', '     * returns the propotion of the _tokenB\n', '     */ \n', '    function _proportion(uint _amount, address _tokenA, address _tokenB) internal view returns(uint tokenBAmount) {\n', '        \n', '        (uint reserveA, uint reserveB) = UniswapV2Library.getReserves(address(iUniswapV2Factory), _tokenA, _tokenB);\n', '        \n', '        return UniswapV2Library.quote(_amount, reserveA, reserveB);\n', '    }\n', '    \n', '    /* \n', '     * @dev gets the released Token value\n', '     * --------------------------------\n', '     * param _user --> the address of the user\n', '     * ------------------------------------------------------\n', '     * returns the released amount in Token\n', '     */ \n', '    function _calculateTokenReleasedAmount(address _user) internal view returns(uint) {\n', '\n', '        uint release = _users[_user].release;\n', '        uint start = _users[_user].start;\n', '        uint taken = _users[_user].tokenWithdrawn;\n', '        uint tokenBonus = _users[_user].tokenBonus;\n', '        uint releasedPct;\n', '        \n', '        if (now >= release) releasedPct = 100;\n', '        else releasedPct = ((now.sub(start)).mul(100000)).div((release.sub(start)).mul(1000));\n', '        \n', '        uint released = (((tokenBonus).mul(releasedPct)).div(100));\n', '        return released.sub(taken);\n', '    }\n', '    \n', '    /* \n', '     * @dev gets the released ETH value\n', '     * --------------------------------\n', '     * param _user --> the address of the user\n', '     * ------------------------------------------------------\n', '     * returns the released amount in ETH\n', '     */ \n', '    function _calculateETHReleasedAmount(address _user) internal view returns(uint) {\n', '        \n', '        uint release = _users[_user].release;\n', '        uint start = _users[_user].start;\n', '        uint taken = _users[_user].wethWithdrawn;\n', '        uint wethBonus = _users[_user].wethBonus;\n', '        uint releasedPct;\n', '        \n', '        if (now >= release) releasedPct = 100;\n', '        else releasedPct = ((now.sub(start)).mul(10000)).div((release.sub(start)).mul(100));\n', '        \n', '        uint released = (((wethBonus).mul(releasedPct)).div(100));\n', '        return released.sub(taken);\n', '    }\n', '    \n', '    /* \n', '     * @dev get the required fee for the released token bonus in the utility token\n', '     * -------------------------------------------------------------------------------\n', '     * param _user --> the address of the user\n', '     * ----------------------------------------------------------\n', '     * returns the fee amount in the utility token and Token\n', '     */ \n', '    function _calculateTokenFee(uint _amount) internal view returns(uint uTokenFee, uint tokenFee) {\n', '        \n', '        uint fee = (_amount.mul(10)).div(100);\n', '        uint feeInETH = _proportion(fee, address(token), address(weth));\n', '        uint feeInUtoken = _proportion(feeInETH, address(weth), address(uToken));  \n', '        \n', '        return (feeInUtoken, fee);\n', '    \n', '    }\n', '    \n', '    /* \n', '     * @dev get the required fee for the released ETH bonus in the utility token\n', '     * -------------------------------------------------------------------------------\n', '     * param _user --> the address of the user\n', '     * ----------------------------------------------------------\n', '     * returns the fee amount in the utility token and ETH\n', '     */ \n', '    function _calculateETHFee(uint _amount) internal view returns(uint uTokenFee, uint ethFee) {\n', '        \n', '        uint fee = (_amount.mul(10)).div(100);\n', '        uint feeInUtoken = _proportion(fee, address(weth), address(uToken));  \n', '        \n', '        return (feeInUtoken, fee);\n', '    }\n', '    \n', '    /* \n', '     * @dev get the required fee for the released ETH bonus   \n', '     * -------------------------------------------------------------------------------\n', '     * param _user --> the address of the user\n', '     * ----------------------------------------------------------\n', '     * returns the fee amount.\n', '     */ \n', '    function calculateETHBonusFee(address _user) external view returns(uint ETH_Fee) {\n', '        \n', '        uint wethReleased = _calculateETHReleasedAmount(_user);\n', '        \n', '        if (wethReleased > 0) {\n', '            \n', '            (uint feeForWethInUtoken,) = _calculateETHFee(wethReleased);\n', '            \n', '            return feeForWethInUtoken;\n', '            \n', '        } else return 0;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the required fee for the released token bonus   \n', '     * -------------------------------------------------------------------------------\n', '     * param _user --> the address of the user\n', '     * ----------------------------------------------------------\n', '     * returns the fee amount.\n', '     */ \n', '    function calculateTokenBonusFee(address _user) external view returns(uint token_Fee) {\n', '        \n', '        uint tokenReleased = _calculateTokenReleasedAmount(_user);\n', '        \n', '        if (tokenReleased > 0) {\n', '            \n', '            (uint feeForTokenInUtoken,) = _calculateTokenFee(tokenReleased);\n', '            \n', '            return feeForTokenInUtoken;\n', '            \n', '        } else return 0;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the bonus based on the return percentage for a particular locking term.   \n', '     * -------------------------------------------------------------------------------\n', '     * param _amount           --> the amount to calculate bonus from.\n', '     * param _returnPercentage --> the returnPercentage of the term.\n', '     * ----------------------------------------------------------\n', '     * returns the bonus amount.\n', '     */ \n', '    function _calculateBonus(uint _amount, uint _returnPercentage) internal pure returns(uint) {\n', '        \n', '        return ((_amount.mul(_returnPercentage)).div(100000)) / 2;                                  //  1% = 1000\n', '    }\n', '    \n', '    /* \n', '     * @dev get the correct return percentage based on locked term.   \n', '     * -----------------------------------------------------------\n', '     * @param _token --> associated asset.\n', '     * @param _term --> the locking term.\n', '     * ----------------------------------------------------------\n', '     * returns the return percentage.\n', '     */   \n', '    function _calculateReturnPercentage(IERC20 _token, uint _term) internal view returns(uint) {\n', '        \n', '        if (_token == weth) {\n', '            if (_term == period1) return period1RPWeth;\n', '            else if (_term == period2) return period2RPWeth;\n', '            else if (_term == period3) return period3RPWeth;\n', '            else if (_term == period4) return period4RPWeth;\n', '            else return 0;\n', '            \n', '        } else if (_token == token) {\n', '            if (_term == period1) return period1RPToken;\n', '            else if (_term == period2) return period2RPToken;\n', '            else if (_term == period3) return period3RPToken;\n', '            else if (_term == period4) return period4RPToken;\n', '            else return 0;\n', '        }\n', '    }\n', '    \n', '    /* \n', '     * @dev check whether the input locking term is one of the supported terms.  \n', '     * ----------------------------------------------------------------------\n', '     * @param _term --> the locking term.\n', '     * -------------------------------\n', '     * returns whether true or not.\n', '     */   \n', '    function _isValidTerm(uint _term) internal view returns(bool) {\n', '        \n', '        if (_term == period1\n', '            || _term == period2\n', '            || _term == period3\n', '            || _term == period4) \n', '            return true; \n', '            else return false;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the amount ETH and Token liquidity provided by the user.   \n', '     * ------------------------------------------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the amount of ETH and Token liquidity provided.\n', '     */   \n', '    function getUserLiquidity(address _user) public view returns(uint provided_ETH, uint provided_token) {\n', '        \n', '        uint total = lpToken.totalSupply();\n', '        uint ratio = ((_users[_user].liquidity).mul(scalar)).div(total);\n', '        uint tokenHeld = token.balanceOf(address(lpToken));\n', '        uint wethHeld = weth.balanceOf(address(lpToken));\n', '        \n', '        return ((ratio.mul(wethHeld)).div(scalar), (ratio.mul(tokenHeld)).div(scalar));\n', '    }\n', '    \n', '    /* \n', '     * @dev check whether the inputted user address has been migrated.  \n', '     * ----------------------------------------------------------------------\n', '     * @param _user --> ddress of the user\n', '     * ---------------------------------------\n', '     * returns whether true or not.\n', '     */  \n', '    function getUserMigration(address _user) public view returns (bool) {\n', '        \n', '        return _users[_user].migrated;\n', '    }\n', '    \n', '    /* \n', '     * @dev check whether the inputted user token has currently offers bonus  \n', '     * ----------------------------------------------------------------------\n', '     * @param _token --> associated token\n', '     * ---------------------------------------\n', '     * returns whether true or not.\n', '     */  \n', '    function _offersBonus(IERC20 _token) internal view returns (bool) {\n', '        \n', '        if (_token == weth) {\n', '            uint wethRPTotal = period1RPWeth.add(period2RPWeth).add(period3RPWeth).add(period4RPWeth);\n', '            if (wethRPTotal > 0) return true; \n', '            else return false;\n', '            \n', '        } else if (_token == token) {\n', '            uint tokenRPTotal = period1RPToken.add(period2RPToken).add(period3RPToken).add(period4RPToken);\n', '            if (tokenRPTotal > 0) return true;\n', '            else return false;\n', '        }\n', '    }\n', '    \n', '    /* \n', '     * @dev check whether the pool has sufficient amount of bonuses available for new deposits/stakes.   \n', '     * ----------------------------------------------------------------------------------------------\n', '     * @param amount --> the _amount to be evaluated against.\n', '     * ---------------------------------------------------\n', '     * returns whether true or not.\n', '     */ \n', '    function _checkForSufficientStakingBonusesForETH(uint _amount) internal view returns(bool) {\n', '        \n', '        if ((address(this).balance).sub(_pendingBonusesWeth) >= _amount) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '    \n', '    /* \n', '     * @dev check whether the pool has sufficient amount of bonuses available for new deposits/stakes.   \n', '     * ----------------------------------------------------------------------------------------------\n', '     * @param amount --> the _amount to be evaluated against.\n', '     * ---------------------------------------------------\n', '     * returns whether true or not.\n', '     */ \n', '    function _checkForSufficientStakingBonusesForToken(uint _amount) internal view returns(bool) {\n', '       \n', '        if ((token.balanceOf(address(this)).sub(_pendingBonusesToken)) >= _amount) {\n', '            \n', '            return true;\n', '            \n', '        } else {\n', '            \n', '            return false;\n', '        }\n', '    }\n', '    \n', '    /* \n', '     * @dev get the timestamp of when the user balance will be released from locked term. \n', '     * ---------------------------------------------------------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the timestamp for the release.\n', '     */     \n', '    function getUserRelease(address _user) external view returns(uint release_time) {\n', '        \n', '        uint release = _users[_user].release;\n', '        if (release > now) {\n', '            \n', '            return (release.sub(now));\n', '       \n', '        } else {\n', '            \n', '            return 0;\n', '        }\n', '        \n', '    }\n', '    \n', '    /* \n', '     * @dev get the amount of bonuses rewarded from staking to a user.   \n', '     * --------------------------------------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the amount of staking bonuses.\n', '     */  \n', '    function getUserBonusPending(address _user) public view returns(uint ETH_bonus, uint token_bonus) {\n', '        \n', '        uint takenWeth = _users[_user].wethWithdrawn;\n', '        uint takenToken = _users[_user].tokenWithdrawn;\n', '        \n', '        return (_users[_user].wethBonus.sub(takenWeth), _users[_user].tokenBonus.sub(takenToken));\n', '    }\n', '    \n', '    /* \n', '     * @dev get the amount of released bonuses rewarded from staking to a user.   \n', '     * --------------------------------------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the amount of released staking bonuses.\n', '     */  \n', '    function getUserBonusAvailable(address _user) public view returns(uint ETH_Released, uint token_Released) {\n', '        \n', '        uint ETHValue = _calculateETHReleasedAmount(_user);\n', '        uint tokenValue = _calculateTokenReleasedAmount(_user);\n', '        \n', '        return (ETHValue, tokenValue);\n', '    }   \n', '    \n', '    /* \n', '     * @dev get the amount of liquidity pool tokens staked/locked by user.   \n', '     * ------------------------------------------------------------------\n', '     * @param _user --> the address of the user.\n', '     * ---------------------------------------\n', '     * returns the amount of locked liquidity.\n', '     */   \n', '    function getUserLPTokens(address _user) external view returns(uint user_LP) {\n', '\n', '        return _users[_user].liquidity;\n', '    }\n', '    \n', '    /* \n', '     * @dev get the lp token address for the pair.  \n', '     * -----------------------------------------------------------\n', '     * returns the lp address for eth/token pair.\n', '     */ \n', '    function getLPAddress() external view returns(address) {\n', '        return address(lpToken);\n', '    }\n', '    \n', '    /* \n', '     * @dev get the amount of staking bonuses available in the pool.  \n', '     * -----------------------------------------------------------\n', '     * returns the amount of staking bounses available for ETH and Token.\n', '     */ \n', '    function getAvailableBonus() external view returns(uint available_ETH, uint available_token) {\n', '        \n', '        available_ETH = (address(this).balance).sub(_pendingBonusesWeth);\n', '        available_token = (token.balanceOf(address(this))).sub(_pendingBonusesToken);\n', '        \n', '        return (available_ETH, available_token);\n', '    }\n', '    \n', '    /* \n', '     * @dev get the maximum amount of ETH allowed for provisioning.  \n', '     * -----------------------------------------------------------\n', '     * returns the maximum ETH allowed\n', '     */ \n', '    function getCap() external view returns(uint maxETH) {\n', '        \n', '        return cap;\n', '    }\n', '    \n', '    /* \n', '     * @dev checks the term period and return percentages \n', '     * --------------------------------------------------\n', '     * returns term period and return percentages \n', '     */\n', '    function getTermPeriodAndReturnPercentages() external view returns(\n', '        uint Term_Period_1, uint Term_Period_2, uint Term_Period_3, uint Term_Period_4,\n', '        uint Period_1_Return_Percentage_Token, uint Period_2_Return_Percentage_Token,\n', '        uint Period_3_Return_Percentage_Token, uint Period_4_Return_Percentage_Token,\n', '        uint Period_1_Return_Percentage_ETH, uint Period_2_Return_Percentage_ETH,\n', '        uint Period_3_Return_Percentage_ETH, uint Period_4_Return_Percentage_ETH\n', '    ) {\n', '        \n', '        return (\n', '            period1, period2, period3, period4, period1RPToken, period2RPToken, period3RPToken, \n', '            period4RPToken,period1RPWeth, period2RPWeth, period3RPWeth, period4RPWeth);\n', '    }\n', '    \n', '}']