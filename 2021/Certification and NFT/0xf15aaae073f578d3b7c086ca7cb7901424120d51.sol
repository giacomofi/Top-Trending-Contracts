['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\introspection\\IERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155Receiver.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: contracts\\orchestrator\\IEthItemOrchestrator.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'interface IEthItemOrchestrator is IERC721Receiver, IERC1155Receiver {\n', '\n', '    function factories() external view returns(address[] memory);\n', '\n', '    function factory() external view returns(address);\n', '\n', '    function setFactory(address newFactory) external;\n', '\n', '    function knowledgeBases() external view returns(address[] memory);\n', '\n', '    function knowledgeBase() external view returns(address);\n', '\n', '    function setKnowledgeBase(address newKnowledgeBase) external;\n', '\n', '    function ENSController() external view returns (address);\n', '\n', '    function setENSController(address newEnsController) external;\n', '\n', '    function transferENS(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) external;\n', '\n', '    /**\n', '     * @dev GET - The DoubleProxy of the DFO linked to this Contract\n', '     */\n', '    function doubleProxy() external view returns (address);\n', '\n', '    /**\n', '     * @dev SET - The DoubleProxy of the DFO linked to this Contract\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     * @param newDoubleProxy the new DoubleProxy address\n', '     */\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Native EthItem model.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setNativeModel(address nativeModelAddress) external;\n', '    function addNativeModel(address nativeModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '    function addERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '    function addERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '    function addERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only through a Proposal in the Linked DFO\n', '     */\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\n', '\n', '    function createNative(address modelAddress, bytes calldata modelInitPayload, string calldata ens)\n', '        external\n', '        returns (address newNativeAddress, bytes memory modelInitCallResponse);\n', '\n', '    function createNative(bytes calldata modelInitPayload, string calldata ens)\n', '        external\n', '        returns (address newNativeAddress, bytes memory modelInitCallResponse);\n', '\n', '    function createERC20Wrapper(bytes calldata modelInitPayload)\n', '        external\n', '        returns (address newEthItemAddress, bytes memory modelInitCallResponse);\n', '}\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: contracts\\orchestrator\\IEthItemOrchestratorDependantElement.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IEthItemOrchestratorDependantElement is IERC165 {\n', '\n', '    /**\n', '     * @dev GET - The DoubleProxy of the DFO linked to this Contract\n', '     */\n', '    function doubleProxy() external view returns (address);\n', '\n', '    /**\n', '     * @dev SET - The DoubleProxy of the DFO linked to this Contract\n', '     * It can be done only by the Factory controller\n', '     * @param newDoubleProxy the new DoubleProxy address\n', '     */\n', '    function setDoubleProxy(address newDoubleProxy) external;\n', '\n', '    function isAuthorizedOrchestrator(address operator) external view returns(bool);\n', '}\n', '\n', '// File: contracts\\factory\\IEthItemFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @title IEthItemFactory\n', ' * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\n', ' */\n', 'interface IEthItemFactory is IEthItemOrchestratorDependantElement {\n', '\n', '    function isModel(address modelAddress) external returns(bool);\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     */\n', '    function ethItemInteroperableInterfaceModel() external view returns (address ethItemInteroperableInterfaceModelAddress, uint256 ethItemInteroperableInterfaceModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the EthItemERC20Wrappers (please see the eth-item-token-standard for further information).\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) external;\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Native EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function nativeModel() external view returns (address nativeModelAddress, uint256 nativeModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Native EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setNativeModel(address nativeModelAddress) external;\n', '    function addNativeModel(address nativeModelAddress) external;\n', '\n', '    event NativeModel(address indexed);\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC1155 EthItems.\n', '     * Every EthItem will have its own address, but the code will be cloned from this one.\n', '     */\n', '    function erc1155WrapperModel() external view returns (address erc1155WrapperModelAddress, uint256 erc1155WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the ERC1155 NFT-Based EthItem model.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '    function addERC1155WrapperModel(address erc1155WrapperModelAddress) external;\n', '\n', '    event ERC1155WrapperModel(address indexed);\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     */\n', '    function erc20WrapperModel() external view returns (address erc20WrapperModelAddress, uint256 erc20WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC20 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '    function addERC20WrapperModel(address erc20WrapperModelAddress) external;\n', '\n', '    event ERC20WrapperModel(address indexed);\n', '\n', '    /**\n', '     * @dev GET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     */\n', '    function erc721WrapperModel() external view returns (address erc721WrapperModelAddress, uint256 erc721WrapperModelVersion);\n', '\n', '    /**\n', '     * @dev SET - The address of the Smart Contract whose code will serve as a model for all the Wrapped ERC721 EthItems.\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '    function addERC721WrapperModel(address erc721WrapperModelAddress) external;\n', '\n', '    event ERC721WrapperModel(address indexed);\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every new Minted EthItem\n', '     */\n', '    function mintFeePercentage() external view returns (uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the minted EthItem amount.\n', '     * @param erc20WrapperAmount The amount of minted EthItem\n', '     */\n', '    function calculateMintFee(uint256 erc20WrapperAmount) external view returns (uint256 mintFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev GET - The elements (numerator and denominator) useful to calculate the percentage fee to be transfered to the DFO for every Burned EthItem\n', '     */\n', '    function burnFeePercentage() external view returns (uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator);\n', '\n', '    /**\n', '     * @dev SET - The element useful to calculate the Percentage fee\n', '     * It can be done only by the Factory controller\n', '     */\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) external;\n', '\n', '    /**\n', '     * @dev Useful utility method to calculate the percentage fee to transfer to the DFO for the burned EthItem amount.\n', '     * @param erc20WrapperAmount The amount of burned EthItem\n', '     */\n', '    function calculateBurnFee(uint256 erc20WrapperAmount) external view returns (uint256 burnFee, address dfoWalletAddress);\n', '\n', '    /**\n', '     * @dev Business Logic to create a brand-new EthItem.\n', "     * It raises the 'NewNativeCreated' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createNative(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewNativeCreated(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewNativeCreated(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC1155 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC1155Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC1155(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC1155Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC1155Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC20 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC20Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC20(bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC20Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC20Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '\n', '    /**\n', '     * @dev Business Logic to wrap already existing ERC721 Tokens to obtain a new NFT-Based EthItem.\n', "     * It raises the 'NewWrappedERC721Created' events.\n", '     * @param modelInitCallPayload The ABI-encoded input parameters to be passed to the model to phisically create the NFT.\n', '     * It changes according to the Model Version.\n', '     * @param ethItemAddress The address of the new EthItem\n', '     * @param ethItemInitResponse The ABI-encoded output response eventually received by the Model initialization procedure.\n', '     */\n', '    function createWrappedERC721(address modelAddress, bytes calldata modelInitCallPayload) external returns (address ethItemAddress, bytes memory ethItemInitResponse);\n', '\n', '    event NewWrappedERC721Created(uint256 indexed standardVersion, uint256 indexed wrappedItemModelVersion, uint256 indexed modelVersion, address tokenCreated);\n', '    event NewWrappedERC721Created(address indexed model, uint256 indexed modelVersion, address indexed tokenCreated, address creator);\n', '}\n', '\n', '// File: contracts\\knowledgeBase\\IKnowledgeBase.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @title IKnowledgeBase\n', ' * @dev This contract represents the Factory Used to deploy all the EthItems, keeping track of them.\n', ' */\n', 'interface IKnowledgeBase is IEthItemOrchestratorDependantElement {\n', '\n', '    function setERC20Wrapper(address erc20Wrapper) external;\n', '\n', '    function erc20Wrappers() external view returns(address[] memory);\n', '\n', '    function erc20Wrapper() external view returns(address);\n', '\n', '    function setEthItem(address ethItem) external;\n', '\n', '    function isEthItem(address ethItem) external view returns(bool);\n', '\n', '    function setWrapped(address wrappedAddress, address ethItem) external;\n', '\n', '    function wrapper(address wrappedAddress, uint256 version) external view returns (address ethItem);\n', '}\n', '\n', '// File: contracts\\ens-controller\\IENSController.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'interface IENSController is IEthItemOrchestratorDependantElement, IERC721Receiver {\n', '\n', '    function attachENS(address ethItem, string calldata ens) external;\n', '\n', '    function transfer(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) external;\n', '\n', '    function data() external view returns(uint256 domainId, bytes32 domainNode);\n', '\n', '    event ENSAttached(address indexed ethItem, string indexed ensIndex, string ens);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\introspection\\ERC165.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC721\\IERC721.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC1155\\IERC1155.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IERC1155Views.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @title IERC1155Views - An optional utility interface to improve the ERC-1155 Standard.\n', ' * @dev This interface introduces some additional capabilities for ERC-1155 Tokens.\n', ' */\n', 'interface IERC1155Views {\n', '\n', '    /**\n', '     * @dev Returns the total supply of the given token id\n', '     * @param objectId the id of the token whose availability you want to know \n', '     */\n', '    function totalSupply(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the name of the given token id\n', '     * @param objectId the id of the token whose name you want to know \n', '     */\n', '    function name(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the given token id\n', '     * @param objectId the id of the token whose symbol you want to know \n', '     */\n', '    function symbol(uint256 objectId) external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals of the given token id\n', '     * @param objectId the id of the token whose decimals you want to know \n', '     */\n', '    function decimals(uint256 objectId) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the uri of the given token id\n', '     * @param objectId the id of the token whose uri you want to know \n', '     */\n', '    function uri(uint256 objectId) external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IBaseTokenData.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IBaseTokenData {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IERC20Data.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'interface IERC20Data is IBaseTokenData, IERC20 {\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', '// File: node_modules\\eth-item-token-standard\\IEthItemInteroperableInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'interface IEthItemInteroperableInterface is IERC20, IERC20Data {\n', '\n', '    function init(uint256 objectId, string memory name, string memory symbol, uint256 decimals) external;\n', '\n', '    function mainInterface() external view returns (address);\n', '\n', '    function objectId() external view returns (uint256);\n', '\n', '    function mint(address owner, uint256 amount) external;\n', '\n', '    function burn(address owner, uint256 amount) external;\n', '\n', '    function permitNonce(address sender) external view returns(uint256);\n', '\n', '    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\n', '}\n', '\n', '// File: eth-item-token-standard\\IEthItemMainInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IEthItemMainInterface is IERC1155, IERC1155Views, IBaseTokenData {\n', '\n', '    function init(\n', '        address interoperableInterfaceModel,\n', '        string calldata name,\n', '        string calldata symbol\n', '    ) external;\n', '\n', '    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\n', '\n', '    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\n', '\n', '    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\n', '\n', '    function interoperableInterfaceModel() external view returns (address, uint256);\n', '\n', '    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\n', '\n', '    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\n', '\n', '    function mint(uint256 amount, string calldata partialUri)\n', '        external\n', '        returns (uint256, address);\n', '\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function burnBatch(\n', '        uint256[] calldata objectIds,\n', '        uint256[] calldata amounts\n', '    ) external;\n', '\n', '    event NewItem(uint256 indexed objectId, address indexed tokenAddress);\n', '    event Mint(uint256 objectId, address tokenAddress, uint256 amount);\n', '}\n', '\n', '// File: contracts\\models\\common\\IEthItemModelBase.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '/**\n', ' * @dev This interface contains the commonn data provided by all the EthItem models\n', ' */\n', 'interface IEthItemModelBase is IEthItemMainInterface {\n', '\n', '    /**\n', '     * @dev Contract Initialization, the caller of this method should be a Contract containing the logic to provide the EthItemERC20WrapperModel to be used to create ERC20-based objectIds\n', '     * @param name the chosen name for this NFT\n', '     * @param symbol the chosen symbol (Ticker) for this NFT\n', '     */\n', '    function init(string calldata name, string calldata symbol) external;\n', '\n', '    /**\n', '     * @return modelVersionNumber The version number of the Model, it should be progressive\n', '     */\n', '    function modelVersion() external pure returns(uint256 modelVersionNumber);\n', '\n', '    /**\n', '     * @return factoryAddress the address of the Contract which initialized this EthItem\n', '     */\n', '    function factory() external view returns(address factoryAddress);\n', '}\n', '\n', '// File: contracts\\orchestrator\\EthItemOrchestrator.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EthItemOrchestrator is IEthItemOrchestrator, ERC165 {\n', '\n', '    address private constant ENS_TOKEN_ADDRESS = 0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85;\n', '\n', '    address private _doubleProxy;\n', '    address[] private _factories;\n', '    address[] private _knowledgeBases;\n', '    address private _ensController;\n', '\n', '    constructor(\n', '        address doubleProxy,\n', '        address[] memory factoriesArray,\n', '        address[] memory knowledgeBasesArray,\n', '        address ensController\n', '    ) public {\n', '        _doubleProxy = doubleProxy;\n', '        _factories = factoriesArray;\n', '        _knowledgeBases = knowledgeBasesArray;\n', '        _ensController = ensController;\n', '    }\n', '\n', '    function factories() public view override returns(address[] memory) {\n', '        return _factories;\n', '    }\n', '\n', '    function factory() public view override returns(address) {\n', '        return _factories[_factories.length - 1];\n', '    }\n', '\n', '    function knowledgeBases() public view override returns(address[] memory) {\n', '        return _knowledgeBases;\n', '    }\n', '\n', '    function knowledgeBase() public view override returns(address) {\n', '        return _knowledgeBases[_knowledgeBases.length - 1];\n', '    }\n', '\n', '    modifier byDFO virtual {\n', '        require(_isFromDFO(msg.sender), "Unauthorized Action!");\n', '        _;\n', '    }\n', '\n', '    function _isFromDFO(address sender) private view returns(bool) {\n', '        IMVDProxy proxy = IMVDProxy(IDoubleProxy(_doubleProxy).proxy());\n', '        if(IMVDFunctionalitiesManager(proxy.getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(sender)) {\n', '            return true;\n', '        }\n', '        return proxy.getMVDWalletAddress() == sender;\n', '    }\n', '\n', '    function doubleProxy() public view override returns (address) {\n', '        return _doubleProxy;\n', '    }\n', '\n', '    function setDoubleProxy(address newDoubleProxy) public override byDFO {\n', '        _doubleProxy = newDoubleProxy;\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_factories[i]);\n', '            if(element.supportsInterface(this.setDoubleProxy.selector)) {\n', '                element.setDoubleProxy(_doubleProxy);\n', '            }\n', '        }\n', '        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\n', '            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_knowledgeBases[i]);\n', '            if(element.supportsInterface(this.setDoubleProxy.selector)) {\n', '                element.setDoubleProxy(_doubleProxy);\n', '            }\n', '        }\n', '        if(_ensController != address(0)) {\n', '            IEthItemOrchestratorDependantElement element = IEthItemOrchestratorDependantElement(_ensController);\n', '            if(element.supportsInterface(this.setDoubleProxy.selector)) {\n', '                element.setDoubleProxy(_doubleProxy);\n', '            }\n', '        }\n', '    }\n', '\n', '    function ENSController() public override view returns (address) {\n', '        return _ensController;\n', '    }\n', '\n', '    function setENSController(address newEnsController) public override byDFO {\n', '        if(newEnsController != address(0)) {\n', '            require(IEthItemOrchestratorDependantElement(newEnsController).doubleProxy() == _doubleProxy, "Wrong Double Proxy");\n', '        }\n', '        _ensController = newEnsController;\n', '    }\n', '\n', '    function transferENS(address receiver, bytes32 domainNode, uint256 domainId, bool reclaimFirst, bool safeTransferFrom, bytes memory payload) public override byDFO {\n', '        IENSController(_ensController).transfer(receiver, domainNode, domainId, reclaimFirst, safeTransferFrom, payload);\n', '    }\n', '\n', '    function setMintFeePercentage(uint256 mintFeePercentageNumerator, uint256 mintFeePercentageDenominator) public override byDFO {\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemFactory element = IEthItemFactory(_factories[i]);\n', '            if(element.supportsInterface(this.setMintFeePercentage.selector)) {\n', '                element.setMintFeePercentage(mintFeePercentageNumerator, mintFeePercentageDenominator);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setBurnFeePercentage(uint256 burnFeePercentageNumerator, uint256 burnFeePercentageDenominator) public override byDFO {\n', '        for(uint256 i = 0; i < _factories.length; i++) {\n', '            IEthItemFactory element = IEthItemFactory(_factories[i]);\n', '            if(element.supportsInterface(this.setBurnFeePercentage.selector)) {\n', '                element.setBurnFeePercentage(burnFeePercentageNumerator, burnFeePercentageDenominator);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setFactory(address newFactory) public override byDFO {\n', '        require(IEthItemOrchestratorDependantElement(newFactory).doubleProxy() == _doubleProxy, "Wrong Double Proxy");\n', '        _factories.push(newFactory);\n', '    }\n', '\n', '    function setKnowledgeBase(address newKnowledgeBase) public override byDFO {\n', '        require(IEthItemOrchestratorDependantElement(newKnowledgeBase).doubleProxy() == _doubleProxy, "Wrong Double Proxy");\n', '        _knowledgeBases.push(newKnowledgeBase);\n', '    }\n', '\n', '    function setEthItemInteroperableInterfaceModel(address ethItemInteroperableInterfaceModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setEthItemInteroperableInterfaceModel.selector)) {\n', '            element.setEthItemInteroperableInterfaceModel(ethItemInteroperableInterfaceModelAddress);\n', '        }\n', '    }\n', '\n', '    function setNativeModel(address nativeModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setNativeModel.selector)) {\n', '            element.setNativeModel(nativeModelAddress);\n', '        }\n', '    }\n', '\n', '    function addNativeModel(address nativeModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.addNativeModel.selector)) {\n', '            element.addNativeModel(nativeModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC1155WrapperModel.selector)) {\n', '            element.setERC1155WrapperModel(erc1155WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function addERC1155WrapperModel(address erc1155WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.addERC1155WrapperModel.selector)) {\n', '            element.addERC1155WrapperModel(erc1155WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC20WrapperModel.selector)) {\n', '            element.setERC20WrapperModel(erc20WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function addERC20WrapperModel(address erc20WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.addERC20WrapperModel.selector)) {\n', '            element.addERC20WrapperModel(erc20WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function setERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.setERC721WrapperModel.selector)) {\n', '            element.setERC721WrapperModel(erc721WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function addERC721WrapperModel(address erc721WrapperModelAddress) public override byDFO {\n', '        IEthItemFactory element = IEthItemFactory(factory());\n', '        if(element.supportsInterface(this.addERC721WrapperModel.selector)) {\n', '            element.addERC721WrapperModel(erc721WrapperModelAddress);\n', '        }\n', '    }\n', '\n', '    function onERC1155Received(\n', '        address,\n', '        address owner,\n', '        uint256 objectId,\n', '        uint256 amount,\n', '        bytes memory payload\n', '    ) public virtual override returns (bytes4) {\n', '        address ethItem = _getOrCreateERC1155Wrapper(msg.sender, objectId, payload);\n', '        IEthItemMainInterface(msg.sender).safeTransferFrom(address(this), ethItem, objectId, amount, "");\n', '        IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectId);\n', '        item.transfer(owner, item.balanceOf(address(this)));\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    function onERC1155BatchReceived(\n', '        address,\n', '        address owner,\n', '        uint256[] memory objectIds,\n', '        uint256[] memory amounts,\n', '        bytes memory payload\n', '    ) public virtual override returns (bytes4) {\n', '        address ethItem = _getOrCreateERC1155Wrapper(msg.sender, objectIds[0], payload);\n', '        IEthItemMainInterface(msg.sender).safeBatchTransferFrom(address(this), ethItem, objectIds, amounts, "");\n', '        for(uint256 i = 0; i < objectIds.length; i++) {\n', '            IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectIds[i]);\n', '            item.transfer(owner, item.balanceOf(address(this)));\n', '        }\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '\n', '    function _getOrCreateERC1155Wrapper(address source, uint256 objectId, bytes memory payload) private returns(address ethItem) {\n', '        address model = payload.length == 0 ? address(0) : abi.decode(payload, (address));\n', '        uint256 version = model == address(0) ? 0 : IEthItemModelBase(model).modelVersion();\n', '        IEthItemFactory currentFactory = IEthItemFactory(factory());\n', '        if(model == address(0)) {\n', '            (,version) = currentFactory.erc1155WrapperModel();\n', '        }\n', '        ethItem = _checkEthItem(msg.sender, version);\n', '        if(ethItem == address(0)) {\n', '            IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\n', '            currentKnowledgeBase.setEthItem(ethItem = _createERC1155Wrapper(currentFactory, source, objectId, model));\n', '            currentKnowledgeBase.setWrapped(source, ethItem);\n', '        }\n', '    }\n', '\n', '    function _createERC1155Wrapper(IEthItemFactory currentFactory, address source, uint256 objectId, address model) private returns(address ethItem) {\n', '        (string memory name, string memory symbol) = _extractNameAndSymbol(source);\n', '        (bool supportsSpecificName, bool supportsSpecificSymbol, bool supportsSpecificDecimals) = _extractSpecificData(source, objectId);\n', '        bytes memory modelInitPayload = abi.encodeWithSignature("init(address,string,string,bool,bool,bool)", source, name, symbol, supportsSpecificName, supportsSpecificSymbol, supportsSpecificDecimals);\n', '        (ethItem,) = currentFactory.createWrappedERC1155(model, modelInitPayload);\n', '    }\n', '\n', '    function _extractNameAndSymbol(address source) private view returns(string memory name, string memory symbol) {\n', '        IEthItemMainInterface nft = IEthItemMainInterface(source);\n', '        try nft.name() returns(string memory n) {\n', '            name = n;\n', '        } catch {\n', '        }\n', '        try nft.symbol() returns(string memory s) {\n', '            symbol = s;\n', '        } catch {\n', '        }\n', '        if(keccak256(bytes(name)) == keccak256("")) {\n', '            name = _toString(source);\n', '        }\n', '        if(keccak256(bytes(symbol)) == keccak256("")) {\n', '            symbol = _toString(source);\n', '        }\n', '    }\n', '\n', '    function _extractSpecificData(address source, uint256 objectId) private view returns(bool supportsSpecificName, bool supportsSpecificSymbol, bool supportsSpecificDecimals) {\n', '        IEthItemMainInterface nft = IEthItemMainInterface(source);\n', '        try nft.name(objectId) returns(string memory value) {\n', '            supportsSpecificName = keccak256(bytes(value)) != keccak256("");\n', '        } catch {\n', '        }\n', '        try nft.symbol(objectId) returns(string memory value) {\n', '            supportsSpecificSymbol = keccak256(bytes(value)) != keccak256("");\n', '        } catch {\n', '        }\n', '        try nft.decimals(objectId) returns(uint256 value) {\n', '            supportsSpecificDecimals = value > 1;\n', '        } catch {\n', '        }\n', '    }\n', '\n', '    function onERC721Received(\n', '        address operator,\n', '        address owner,\n', '        uint256 objectId,\n', '        bytes memory payload\n', '    ) public virtual override returns (bytes4) {\n', '        if(msg.sender == ENS_TOKEN_ADDRESS && keccak256(abi.encodePacked("transferENS")) == keccak256(payload)) {\n', '            require(_isFromDFO(operator), "Unauthorized Action");\n', '            IERC721(msg.sender).safeTransferFrom(address(this), _ensController, objectId, payload);\n', '            return this.onERC721Received.selector;\n', '        }\n', '        address model = payload.length == 0 ? address(0) : abi.decode(payload, (address));\n', '        uint256 version = model == address(0) ? 0 : IEthItemModelBase(model).modelVersion();\n', '        IEthItemFactory currentFactory = IEthItemFactory(factory());\n', '        if(model == address(0)) {\n', '            (,version) = currentFactory.erc721WrapperModel();\n', '        }\n', '        address ethItem = _checkEthItem(msg.sender, version);\n', '        if(ethItem == address(0)) {\n', '            IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\n', '            currentKnowledgeBase.setEthItem(ethItem = _createERC721Wrapper(currentFactory, msg.sender, model));\n', '            currentKnowledgeBase.setWrapped(msg.sender, ethItem);\n', '        }\n', '        IERC721(msg.sender).safeTransferFrom(address(this), ethItem, objectId, "");\n', '        IERC20 item = IEthItemMainInterface(ethItem).asInteroperable(objectId);\n', '        item.transfer(owner, item.balanceOf(address(this)));\n', '        return this.onERC721Received.selector;\n', '    }\n', '\n', '    function _checkEthItem(address source, uint256 version) private view returns(address ethItem) {\n', '        for(uint256 i = 0; i < _knowledgeBases.length; i++) {\n', '            ethItem = IKnowledgeBase(_knowledgeBases[i]).wrapper(source, version);\n', '            if(ethItem != address(0)) {\n', '                return ethItem;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _createERC721Wrapper(IEthItemFactory currentFactory, address source, address modelAddress) private returns(address ethItem) {\n', '        (string memory name, string memory symbol) = _extractNameAndSymbol(source);\n', '        bytes memory modelInitPayload = abi.encodeWithSignature("init(address,string,string)", source, name, symbol);\n', '        (ethItem,) = currentFactory.createWrappedERC721(modelAddress, modelInitPayload);\n', '    }\n', '\n', '    function createNative(address modelAddress, bytes memory modelInitCallPayload, string memory ens) public override\n', '        returns (address newNativeAddress, bytes memory modelInitCallResponse) {\n', '        (newNativeAddress, modelInitCallResponse) = IEthItemFactory(factory()).createNative(modelAddress, modelInitCallPayload);\n', '        IKnowledgeBase(knowledgeBase()).setEthItem(newNativeAddress);\n', '        if(_ensController != address(0)) {\n', '            IENSController(_ensController).attachENS(newNativeAddress, ens);\n', '        }\n', '    }\n', '\n', '    function createNative(bytes memory modelInitCallPayload, string memory ens) public override\n', '        returns (address newNativeAddress, bytes memory modelInitCallResponse) {\n', '        (newNativeAddress, modelInitCallResponse) = IEthItemFactory(factory()).createNative(address(0), modelInitCallPayload);\n', '        IKnowledgeBase(knowledgeBase()).setEthItem(newNativeAddress);\n', '        if(_ensController != address(0)) {\n', '            IENSController(_ensController).attachENS(newNativeAddress, ens);\n', '        }\n', '    }\n', '\n', '    function createERC20Wrapper(bytes memory modelInitPayload) public override byDFO\n', '        returns (address newEthItemAddress, bytes memory modelInitCallResponse) {\n', '        (newEthItemAddress, modelInitCallResponse) = IEthItemFactory(factory()).createWrappedERC20(modelInitPayload);\n', '        IKnowledgeBase currentKnowledgeBase = IKnowledgeBase(knowledgeBase());\n', '        currentKnowledgeBase.setEthItem(newEthItemAddress);\n', '        currentKnowledgeBase.setERC20Wrapper(newEthItemAddress);\n', '    }\n', '\n', '    function _toString(address _addr) internal pure returns(string memory) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '}']