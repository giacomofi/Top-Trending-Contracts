['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-13\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.7.6;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'interface BaseRewardPool {\n', '    function balanceOf(address _account) external view returns (uint);\n', '\n', '    function getReward(address _account, bool _claimExtras) external returns (bool);\n', '\n', '    function withdrawAndUnwrap(uint amount, bool claim) external returns (bool);\n', '}\n', '\n', 'interface Booster {\n', '    function poolInfo(uint _pid)\n', '        external\n', '        view\n', '        returns (\n', '            address lptoken,\n', '            address token,\n', '            address gauge,\n', '            address crvRewards,\n', '            address stash,\n', '            bool shutdown\n', '        );\n', '\n', '    function deposit(\n', '        uint _pid,\n', '        uint _amount,\n', '        bool _stake\n', '    ) external returns (bool);\n', '\n', '    function withdraw(uint _pid, uint _amount) external returns (bool);\n', '}\n', '\n', 'interface DepositZapAlUsd3Crv {\n', '    // Curve.fi Factory USD Metapool v2\n', '    function add_liquidity(\n', '        address _pool,\n', '        uint[4] calldata _amounts,\n', '        uint _min_mint_amount\n', '    ) external returns (uint);\n', '\n', '    function remove_liquidity_one_coin(\n', '        address _pool,\n', '        uint _burn_amount,\n', '        int128 _i,\n', '        uint _min_amount\n', '    ) external returns (uint);\n', '\n', '    function calc_withdraw_one_coin(\n', '        address _pool,\n', '        uint _amount,\n', '        int128 _i\n', '    ) external view returns (uint);\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'interface IFundManager {\n', '    function token() external view returns (address);\n', '\n', '    function borrow(uint amount) external returns (uint);\n', '\n', '    function repay(uint amount) external returns (uint);\n', '\n', '    function report(uint gain, uint loss) external;\n', '\n', '    function getDebt(address strategy) external view returns (uint);\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\n', '        uint c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) return 0;\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface StableSwapAlUsd3Crv {\n', '    function coins(uint _i) external view returns (address);\n', '\n', '    function get_virtual_price() external view returns (uint);\n', '}\n', '\n', 'abstract contract Strategy {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    event SetNextTimeLock(address nextTimeLock);\n', '    event AcceptTimeLock(address timeLock);\n', '    event SetAdmin(address admin);\n', '    event Authorize(address addr, bool authorized);\n', '    event SetTreasury(address treasury);\n', '    event SetFundManager(address fundManager);\n', '\n', '    event Deposit(uint amount, uint borrowed);\n', '    event Repay(uint amount, uint repaid);\n', '    event Withdraw(uint amount, uint withdrawn, uint loss);\n', '    event ClaimRewards(uint profit);\n', '    event Skim(uint total, uint debt, uint profit);\n', '    event Report(uint gain, uint loss, uint free, uint total, uint debt);\n', '\n', '    // Privilege - time lock >= admin >= authorized addresses\n', '    address public timeLock;\n', '    address public nextTimeLock;\n', '    address public admin;\n', '    address public treasury; // Profit is sent to this address\n', '\n', '    // authorization other than time lock and admin\n', '    mapping(address => bool) public authorized;\n', '\n', '    IERC20 public immutable token;\n', '    IFundManager public fundManager;\n', '\n', '    // Performance fee sent to treasury\n', '    uint public perfFee = 1000;\n', '    uint private constant PERF_FEE_CAP = 2000; // Upper limit to performance fee\n', '    uint internal constant PERF_FEE_MAX = 10000;\n', '\n', '    constructor(\n', '        address _token,\n', '        address _fundManager,\n', '        address _treasury\n', '    ) {\n', "        // Don't allow accidentally sending perf fee to 0 address\n", '        require(_treasury != address(0), "treasury = 0 address");\n', '\n', '        timeLock = msg.sender;\n', '        admin = msg.sender;\n', '        treasury = _treasury;\n', '\n', '        require(\n', '            IFundManager(_fundManager).token() == _token,\n', '            "fund manager token != token"\n', '        );\n', '\n', '        fundManager = IFundManager(_fundManager);\n', '        token = IERC20(_token);\n', '\n', '        IERC20(_token).safeApprove(_fundManager, type(uint).max);\n', '    }\n', '\n', '    modifier onlyTimeLock() {\n', '        require(msg.sender == timeLock, "!time lock");\n', '        _;\n', '    }\n', '\n', '    modifier onlyTimeLockOrAdmin() {\n', '        require(msg.sender == timeLock || msg.sender == admin, "!auth");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            msg.sender == timeLock || msg.sender == admin || authorized[msg.sender],\n', '            "!auth"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyFundManager() {\n', '        require(msg.sender == address(fundManager), "!fund manager");\n', '        _;\n', '    }\n', '\n', '    /*\n', '    @notice Set next time lock\n', '    @param _nextTimeLock Address of next time lock\n', '    @dev nextTimeLock can become timeLock by calling acceptTimeLock()\n', '    */\n', '    function setNextTimeLock(address _nextTimeLock) external onlyTimeLock {\n', '        // Allow next time lock to be zero address (cancel next time lock)\n', '        nextTimeLock = _nextTimeLock;\n', '        emit SetNextTimeLock(_nextTimeLock);\n', '    }\n', '\n', '    /*\n', '    @notice Set timeLock to msg.sender\n', '    @dev msg.sender must be nextTimeLock\n', '    */\n', '    function acceptTimeLock() external {\n', '        require(msg.sender == nextTimeLock, "!next time lock");\n', '        timeLock = msg.sender;\n', '        emit AcceptTimeLock(msg.sender);\n', '    }\n', '\n', '    /*\n', '    @notice Set admin\n', '    @param _admin Address of admin\n', '    */\n', '    function setAdmin(address _admin) external onlyTimeLockOrAdmin {\n', '        admin = _admin;\n', '        emit SetAdmin(_admin);\n', '    }\n', '\n', '    /*\n', '    @notice Set authorization\n', '    @param _addr Address to authorize\n', '    @param _authorized Boolean\n', '    */\n', '    function authorize(address _addr, bool _authorized) external onlyTimeLockOrAdmin {\n', '        authorized[_addr] = _authorized;\n', '        emit Authorize(_addr, _authorized);\n', '    }\n', '\n', '    /*\n', '    @notice Set treasury\n', '    @param _treasury Address of treasury\n', '    */\n', '    function setTreasury(address _treasury) external onlyTimeLockOrAdmin {\n', "        // Don't allow accidentally sending perf fee to 0 address\n", '        require(_treasury != address(0), "treasury = 0 address");\n', '        treasury = _treasury;\n', '        emit SetTreasury(_treasury);\n', '    }\n', '\n', '    /*\n', '    @notice Set performance fee\n', '    @param _fee Performance fee\n', '    */\n', '    function setPerfFee(uint _fee) external onlyTimeLockOrAdmin {\n', '        require(_fee <= PERF_FEE_CAP, "fee > cap");\n', '        perfFee = _fee;\n', '    }\n', '\n', '    function setFundManager(address _fundManager) external onlyTimeLock {\n', '        if (address(fundManager) != address(0)) {\n', '            token.safeApprove(address(fundManager), 0);\n', '        }\n', '\n', '        require(\n', '            IFundManager(_fundManager).token() == address(token),\n', '            "new fund manager token != token"\n', '        );\n', '\n', '        fundManager = IFundManager(_fundManager);\n', '        token.safeApprove(_fundManager, type(uint).max);\n', '\n', '        emit SetFundManager(_fundManager);\n', '    }\n', '\n', '    /*\n', '    @notice Transfer funds from `_from` address. Used for migration.\n', '    @param _from Address to transfer token from\n', '    @param _amount Amount of token to transfer\n', '    */\n', '    function transferTokenFrom(address _from, uint _amount) external onlyAuthorized {\n', '        token.safeTransferFrom(_from, address(this), _amount);\n', '    }\n', '\n', '    /*\n', '    @notice Returns approximate amount of token locked in this contract\n', '    @dev Output may vary depending on price pulled from external DeFi contracts\n', '    */\n', '    function totalAssets() external view virtual returns (uint);\n', '\n', '    /*\n', '    @notice Deposit into strategy\n', '    @param _amount Amount of token to deposit from fund manager\n', '    @param _min Minimum amount borrowed\n', '    */\n', '    function deposit(uint _amount, uint _min) external virtual;\n', '\n', '    /*\n', '    @notice Withdraw token from this contract\n', '    @dev Only callable by fund manager\n', '    @dev Returns current loss = debt to fund manager - total assets\n', '    */\n', '    function withdraw(uint _amount) external virtual returns (uint);\n', '\n', '    /*\n', '    @notice Repay fund manager\n', '    @param _amount Amount of token to repay to fund manager\n', '    @param _min Minimum amount repaid\n', '    @dev Call report after this to report any loss\n', '    */\n', '    function repay(uint _amount, uint _min) external virtual;\n', '\n', '    /*\n', '    @notice Claim any reward tokens, sell for token\n', '    @param _minProfit Minumum amount of token to gain from selling rewards\n', '    */\n', '    function claimRewards(uint _minProfit) external virtual;\n', '\n', '    /*\n', '    @notice Free up any profit over debt\n', '    */\n', '    function skim() external virtual;\n', '\n', '    /*\n', '    @notice Report gain or loss back to fund manager\n', '    @param _minTotal Minimum value of total assets.\n', '               Used to protect against price manipulation.\n', '    @param _maxTotal Maximum value of total assets Used\n', '               Used to protect against price manipulation.  \n', '    */\n', '    function report(uint _minTotal, uint _maxTotal) external virtual;\n', '\n', '    /*\n', '    @notice Claim rewards, skim and report\n', '    @param _minProfit Minumum amount of token to gain from selling rewards\n', '    @param _minTotal Minimum value of total assets.\n', '               Used to protect against price manipulation.\n', '    @param _maxTotal Maximum value of total assets Used\n', '               Used to protect against price manipulation.  \n', '    */\n', '    function harvest(\n', '        uint _minProfit,\n', '        uint _minTotal,\n', '        uint _maxTotal\n', '    ) external virtual;\n', '\n', '    /*\n', '    @notice Migrate to new version of this strategy\n', '    @param _strategy Address of new strategy\n', '    @dev Only callable by fund manager\n', '    */\n', '    function migrate(address _strategy) external virtual;\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here back to admin\n', '    @param _token Address of token to transfer\n', '    */\n', '    function sweep(address _token) external virtual;\n', '}\n', '\n', 'contract StrategyConvexAlUsd is Strategy {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    // Uniswap and Sushiswap //\n', '    // UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    // SUSHISWAP = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n', '    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    // address of DEX (uniswap or sushiswap) to use for selling reward tokens\n', '    // CRV, CVX, ALCX\n', '    address[3] public dex;\n', '\n', '    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n', '    address private constant CVX = 0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B;\n', '    address private constant ALCX = 0xdBdb4d16EdA451D0503b854CF79D55697F90c8DF;\n', '\n', '    // Solc 0.7 cannot create constant arrays\n', '    address[3] private REWARDS = [CRV, CVX, ALCX];\n', '\n', '    // Convex //\n', '    Booster private constant BOOSTER =\n', '        Booster(0xF403C135812408BFbE8713b5A23a04b3D48AAE31);\n', '    // pool id\n', '    uint private constant PID = 36;\n', '    BaseRewardPool private constant REWARD =\n', '        BaseRewardPool(0x02E2151D4F351881017ABdF2DD2b51150841d5B3);\n', '    bool public shouldClaimExtras = true;\n', '\n', '    // Curve //\n', '    // DepositZap alUSD + 3CRV\n', '    DepositZapAlUsd3Crv private constant ZAP =\n', '        DepositZapAlUsd3Crv(0xA79828DF1850E8a3A3064576f380D90aECDD3359);\n', '    // StableSwap alUSD + 3CRV (meta pool)\n', '    StableSwapAlUsd3Crv private constant CURVE_POOL =\n', '        StableSwapAlUsd3Crv(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c);\n', '    // LP token for curve pool (same contract as CURVE_POOL)\n', '    IERC20 private constant CURVE_LP =\n', '        IERC20(0x43b4FdFD4Ff969587185cDB6f0BD875c5Fc83f8c);\n', '\n', '    // prevent slippage from deposit / withdraw\n', '    uint public slip = 100;\n', '    uint private constant SLIP_MAX = 10000;\n', '\n', '    /*\n', '    0 - alUSD\n', '    1 - DAI\n', '    2 - USDC\n', '    3 - USDT\n', '    */\n', '    // multipliers to normalize token decimals to 10 ** 18\n', '    uint[4] private MULS = [1, 1, 1e12, 1e12];\n', '    uint private immutable MUL; // multiplier of token\n', '    uint private immutable INDEX; // index of token\n', '\n', '    // DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F\n', '    // USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\n', '    // USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7\n', '\n', '    constructor(\n', '        address _token,\n', '        address _fundManager,\n', '        address _treasury,\n', '        uint _index\n', '    ) Strategy(_token, _fundManager, _treasury) {\n', '        // disable alUSD\n', '        require(_index > 0, "index = 0");\n', '        INDEX = _index;\n', '        MUL = MULS[_index];\n', '\n', '        (address lptoken, , , address crvRewards, , ) = BOOSTER.poolInfo(PID);\n', '        require(address(CURVE_LP) == lptoken, "curve pool lp != pool info lp");\n', '        require(address(REWARD) == crvRewards, "reward != pool info reward");\n', '\n', '        IERC20(_token).safeApprove(address(ZAP), type(uint).max);\n', '        // deposit into BOOSTER\n', '        CURVE_LP.safeApprove(address(BOOSTER), type(uint).max);\n', '        // withdraw from ZAP\n', '        CURVE_LP.safeApprove(address(ZAP), type(uint).max);\n', '\n', '        _setDex(0, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // CRV - sushiswap\n', '        _setDex(1, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // CVX - sushiswap\n', '        _setDex(2, 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // ALCX - sushiswap\n', '    }\n', '\n', '    function _setDex(uint _i, address _dex) private {\n', '        IERC20 reward = IERC20(REWARDS[_i]);\n', '\n', '        // disallow previous dex\n', '        if (dex[_i] != address(0)) {\n', '            reward.safeApprove(dex[_i], 0);\n', '        }\n', '\n', '        dex[_i] = _dex;\n', '\n', '        // approve new dex\n', '        reward.safeApprove(_dex, type(uint).max);\n', '    }\n', '\n', '    function setDex(uint _i, address _dex) external onlyTimeLockOrAdmin {\n', '        require(_dex != address(0), "dex = 0 address");\n', '        _setDex(_i, _dex);\n', '    }\n', '\n', '    /*\n', '    @notice Set max slippage for deposit and withdraw from Curve pool\n', '    @param _slip Max amount of slippage allowed\n', '    */\n', '    function setSlip(uint _slip) external onlyAuthorized {\n', '        require(_slip <= SLIP_MAX, "slip > max");\n', '        slip = _slip;\n', '    }\n', '\n', '    // @dev Claim extra rewards (ALCX) from Convex\n', '    function setShouldClaimExtras(bool _shouldClaimExtras) external onlyAuthorized {\n', '        shouldClaimExtras = _shouldClaimExtras;\n', '    }\n', '\n', '    function _totalAssets() private view returns (uint) {\n', '        /*\n', '        s0 = shares in meta pool\n', '        p0 = price per share of meta pool\n', '        s1 = shares in base pool\n', '        p1 = price per share of base pool\n', '        a = amount of tokens (DAI, USDC, USDT)\n', '\n', '        s1 = s0 * p0\n', '        a = s1 * p1\n', '\n', '        a = s0 * p0 * p1\n', '        */\n', '        // amount of Curve LP tokens in Convex\n', '        uint lpBal = REWARD.balanceOf(address(this));\n', '        // amount of alUSD or DAI, USDC, USDT converted from Curve LP\n', '        // BASE_POOL.get_virtual_price is included in CURVE_POOL.get_virtual_price\n', '        // so CURVE_POOL.get_virtual_price = p0 * p1\n', '        uint bal = lpBal.mul(CURVE_POOL.get_virtual_price()) / (MUL * 1e18);\n', '\n', '        bal = bal.add(token.balanceOf(address(this)));\n', '\n', '        return bal;\n', '    }\n', '\n', '    function totalAssets() external view override returns (uint) {\n', '        return _totalAssets();\n', '    }\n', '\n', '    function _deposit() private {\n', '        uint bal = token.balanceOf(address(this));\n', '        if (bal > 0) {\n', '            uint[4] memory amounts;\n', '            amounts[INDEX] = bal;\n', '            /*\n', '            shares = token amount * multiplier * 1e18 / price per share\n', '            */\n', '            uint pricePerShare = CURVE_POOL.get_virtual_price();\n', '            uint shares = bal.mul(MUL).mul(1e18).div(pricePerShare);\n', '            uint min = shares.mul(SLIP_MAX - slip) / SLIP_MAX;\n', '\n', '            ZAP.add_liquidity(address(CURVE_POOL), amounts, min);\n', '        }\n', '\n', '        uint lpBal = CURVE_LP.balanceOf(address(this));\n', '        if (lpBal > 0) {\n', '            require(BOOSTER.deposit(PID, lpBal, true), "deposit failed");\n', '        }\n', '    }\n', '\n', '    function deposit(uint _amount, uint _min) external override onlyAuthorized {\n', '        require(_amount > 0, "deposit = 0");\n', '\n', '        uint borrowed = fundManager.borrow(_amount);\n', '        require(borrowed >= _min, "borrowed < min");\n', '\n', '        _deposit();\n', '        emit Deposit(_amount, borrowed);\n', '    }\n', '\n', '    function _calcSharesToWithdraw(\n', '        uint _amount,\n', '        uint _total,\n', '        uint _totalShares\n', '    ) private pure returns (uint) {\n', '        /*\n', '        calculate shares to withdraw\n', '\n', '        a = amount of token to withdraw\n', '        T = total amount of token locked in external liquidity pool\n', '        s = shares to withdraw\n', '        P = total shares deposited into external liquidity pool\n', '\n', '        a / T = s / P\n', '        s = a / T * P\n', '        */\n', '        if (_total > 0) {\n', '            // avoid rounding errors and cap shares to be <= total shares\n', '            if (_amount >= _total) {\n', '                return _totalShares;\n', '            }\n', '            return _amount.mul(_totalShares) / _total;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function _withdraw(uint _amount) private returns (uint) {\n', '        uint bal = token.balanceOf(address(this));\n', '        if (_amount <= bal) {\n', '            return _amount;\n', '        }\n', '\n', '        uint total = _totalAssets();\n', '\n', '        if (_amount >= total) {\n', '            _amount = total;\n', '        }\n', '\n', '        uint need = _amount - bal;\n', '        uint totalShares = REWARD.balanceOf(address(this));\n', '        // total assets is always >= bal\n', '        uint shares = _calcSharesToWithdraw(need, total - bal, totalShares);\n', '\n', '        // withdraw from Convex\n', '        if (shares > 0) {\n', '            // true = claim CRV and ALCX\n', '            require(REWARD.withdrawAndUnwrap(shares, false), "reward withdraw failed");\n', '        }\n', '\n', '        // withdraw from Curve\n', '        uint lpBal = CURVE_LP.balanceOf(address(this));\n', '        if (shares > lpBal) {\n', '            shares = lpBal;\n', '        }\n', '\n', '        if (shares > 0) {\n', '            uint min = need.mul(SLIP_MAX - slip) / SLIP_MAX;\n', '            ZAP.remove_liquidity_one_coin(\n', '                address(CURVE_POOL),\n', '                shares,\n', '                int128(INDEX),\n', '                min\n', '            );\n', '        }\n', '\n', '        uint balAfter = token.balanceOf(address(this));\n', '        if (balAfter < _amount) {\n', '            return balAfter;\n', '        }\n', '        // balAfter >= _amount >= total\n', '        // requested to withdraw all so return balAfter\n', '        if (_amount >= total) {\n', '            return balAfter;\n', '        }\n', '        // requested withdraw < all\n', '        return _amount;\n', '    }\n', '\n', '    function withdraw(uint _amount) external override onlyFundManager returns (uint) {\n', '        require(_amount > 0, "withdraw = 0");\n', '\n', '        // availabe <= _amount\n', '        uint available = _withdraw(_amount);\n', '\n', '        uint loss = 0;\n', '        uint debt = fundManager.getDebt(address(this));\n', '        uint total = _totalAssets();\n', '        if (debt > total) {\n', '            loss = debt - total;\n', '        }\n', '\n', '        if (available > 0) {\n', '            token.safeTransfer(msg.sender, available);\n', '        }\n', '\n', '        emit Withdraw(_amount, available, loss);\n', '\n', '        return loss;\n', '    }\n', '\n', '    function repay(uint _amount, uint _min) external override onlyAuthorized {\n', '        require(_amount > 0, "repay = 0");\n', '        // availabe <= _amount\n', '        uint available = _withdraw(_amount);\n', '        uint repaid = fundManager.repay(available);\n', '        require(repaid >= _min, "repaid < min");\n', '\n', '        emit Repay(_amount, repaid);\n', '    }\n', '\n', '    /*\n', '    @dev Uniswap fails with zero address so no check is necessary here\n', '    */\n', '    function _swap(\n', '        address _dex,\n', '        address _tokenIn,\n', '        address _tokenOut,\n', '        uint _amount\n', '    ) private {\n', '        // create dynamic array with 3 elements\n', '        address[] memory path = new address[](3);\n', '        path[0] = _tokenIn;\n', '        path[1] = WETH;\n', '        path[2] = _tokenOut;\n', '\n', '        UniswapV2Router(_dex).swapExactTokensForTokens(\n', '            _amount,\n', '            1,\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function _claimRewards(uint _minProfit) private {\n', '        // calculate profit = balance of token after - balance of token before\n', '        uint diff = token.balanceOf(address(this));\n', '\n', '        require(\n', '            REWARD.getReward(address(this), shouldClaimExtras),\n', '            "get reward failed"\n', '        );\n', '\n', '        for (uint i = 0; i < REWARDS.length; i++) {\n', '            uint rewardBal = IERC20(REWARDS[i]).balanceOf(address(this));\n', '            if (rewardBal > 0) {\n', '                _swap(dex[i], REWARDS[i], address(token), rewardBal);\n', '            }\n', '        }\n', '\n', '        diff = token.balanceOf(address(this)) - diff;\n', '        require(diff >= _minProfit, "profit < min");\n', '\n', '        // transfer performance fee to treasury\n', '        if (diff > 0) {\n', '            uint fee = diff.mul(perfFee) / PERF_FEE_MAX;\n', '            if (fee > 0) {\n', '                token.safeTransfer(treasury, fee);\n', '                diff = diff.sub(fee);\n', '            }\n', '        }\n', '\n', '        emit ClaimRewards(diff);\n', '    }\n', '\n', '    function claimRewards(uint _minProfit) external override onlyAuthorized {\n', '        _claimRewards(_minProfit);\n', '    }\n', '\n', '    function _skim() private {\n', '        uint total = _totalAssets();\n', '        uint debt = fundManager.getDebt(address(this));\n', '        require(total > debt, "total <= debt");\n', '\n', '        uint profit = total - debt;\n', '        // reassign to actual amount withdrawn\n', '        profit = _withdraw(profit);\n', '\n', '        emit Skim(total, debt, profit);\n', '    }\n', '\n', '    function skim() external override onlyAuthorized {\n', '        _skim();\n', '    }\n', '\n', '    function _report(uint _minTotal, uint _maxTotal) private {\n', '        uint total = _totalAssets();\n', '        require(total >= _minTotal, "total < min");\n', '        require(total <= _maxTotal, "total > max");\n', '\n', '        uint gain = 0;\n', '        uint loss = 0;\n', '        uint free = 0; // balance of token\n', '        uint debt = fundManager.getDebt(address(this));\n', '        if (total > debt) {\n', '            gain = total - debt;\n', '\n', '            free = token.balanceOf(address(this));\n', '            if (gain > free) {\n', '                gain = free;\n', '            }\n', '        } else {\n', '            loss = debt - total;\n', '        }\n', '\n', '        if (gain > 0 || loss > 0) {\n', '            fundManager.report(gain, loss);\n', '        }\n', '\n', '        emit Report(gain, loss, free, total, debt);\n', '    }\n', '\n', '    function report(uint _minTotal, uint _maxTotal) external override onlyAuthorized {\n', '        _report(_minTotal, _maxTotal);\n', '    }\n', '\n', '    function harvest(\n', '        uint _minProfit,\n', '        uint _minTotal,\n', '        uint _maxTotal\n', '    ) external override onlyAuthorized {\n', '        _claimRewards(_minProfit);\n', '        _skim();\n', '        _report(_minTotal, _maxTotal);\n', '    }\n', '\n', '    function migrate(address _strategy) external override onlyFundManager {\n', '        Strategy strat = Strategy(_strategy);\n', '        require(address(strat.token()) == address(token), "strategy token != token");\n', '        require(\n', '            address(strat.fundManager()) == address(fundManager),\n', '            "strategy fund manager != fund manager"\n', '        );\n', '        uint bal = _withdraw(type(uint).max);\n', '        token.safeApprove(_strategy, bal);\n', '        strat.transferTokenFrom(address(this), bal);\n', '    }\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here to admin\n', '    @param _token Address of token to transfer\n', '    */\n', '    function sweep(address _token) external override onlyAuthorized {\n', '        require(_token != address(token), "protected token");\n', '        for (uint i = 0; i < REWARDS.length; i++) {\n', '            require(_token != REWARDS[i], "protected token");\n', '        }\n', '        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', 'interface UniswapV2Router {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}\n', '\n', 'contract StrategyConvexAlUsdUsdt is StrategyConvexAlUsd {\n', '    constructor(address _fundManager, address _treasury)\n', '        StrategyConvexAlUsd(\n', '            0xdAC17F958D2ee523a2206206994597C13D831ec7,\n', '            _fundManager,\n', '            _treasury,\n', '            3\n', '        )\n', '    {}\n', '}']