['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// a library for performing overflow-safe math, updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math)\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a + b) >= b, "SafeMath: Add Overflow");}\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {require((c = a - b) <= a, "SafeMath: Underflow");}\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {require(b == 0 || (c = a * b)/b == a, "SafeMath: Mul Overflow");}\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    // EIP 2612\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'interface IMasterChef {\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '    }\n', '\n', '    struct PoolInfo {\n', '        IERC20 lpToken;           // Address of LP token contract.\n', '        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHI to distribute per block.\n', '        uint256 lastRewardBlock;  // Last block number that SUSHI distribution occurs.\n', '        uint256 accSushiPerShare; // Accumulated SUSHI per share, times 1e12. See below.\n', '    }\n', '    \n', '    function userInfo(uint256 pid, address account) external view returns (uint256, uint256);\n', '    function poolInfo(uint256 pid) external view returns (IMasterChef.PoolInfo memory);\n', '    function totalAllocPoint() external view returns (uint256);\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '}\n', '\n', 'interface IBentoBoxV1 {\n', '    function balanceOf(IERC20, address) external view returns (uint256);\n', '\n', '    function deposit(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function transfer(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 share\n', '    ) external;\n', '\n', '    function transferMultiple(\n', '        IERC20 token,\n', '        address from,\n', '        address[] calldata tos,\n', '        uint256[] calldata shares\n', '    ) external;\n', '\n', '    function toShare(\n', '        IERC20 token,\n', '        uint256 amount,\n', '        bool roundUp\n', '    ) external view returns (uint256 share);\n', '\n', '    function toAmount(\n', '        IERC20 token,\n', '        uint256 share,\n', '        bool roundUp\n', '    ) external view returns (uint256 amount);\n', '\n', '    function registerProtocol() external;\n', '}\n', '\n', 'interface ICreamRate {\n', '    function exchangeRateStored() external view returns (uint256);\n', '}\n', '\n', 'contract SUSHIPOWAH {\n', '    using SafeMath for uint256;\n', '\n', '    IMasterChef chef = IMasterChef(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n', '    IERC20 pair = IERC20(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0);\n', '    IERC20 bar = IERC20(0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272);\n', '    IERC20 sushi = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2);\n', '    IERC20 axSushi = IERC20(0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a);\n', '    IBentoBoxV1 bento = IBentoBoxV1(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966);\n', '    address crxSushi = 0x228619CCa194Fbe3Ebeb2f835eC1eA5080DaFbb2; \n', '\n', '    function name() external pure returns(string memory) { return "SUSHIPOWAH"; }\n', '    function symbol() external pure returns(string memory) { return "SUSHIPOWAH"; }\n', '    function decimals() external pure returns(uint8) { return 18; }\n', '    function allowance(address, address) external pure returns (uint256) { return 0; }\n', '    function approve(address, uint256) external pure returns (bool) { return false; }\n', '    function transfer(address, uint256) external pure returns (bool) { return false; }\n', '    function transferFrom(address, address, uint256) external pure returns (bool) { return false; }\n', '\n', '    /// @notice Returns the collective SUSHI balance for a given `account` staked among protocols with adjustments for boosts.\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        uint256 lp_totalSushi = sushi.balanceOf(address(pair));\n', '        uint256 lp_total = pair.totalSupply();\n', '        (uint256 lp_stakedBalance, ) = chef.userInfo(12, account);\n', '        uint256 lp_balance = pair.balanceOf(account).add(lp_stakedBalance);\n', '        uint256 lp_powah = lp_totalSushi.mul(lp_balance) / lp_total.mul(2); // calculate voting weight adjusted for LP staking\n', '        uint256 collective_xsushi_balance = collectBalances(account); // calculate xSushi staking balances\n', '        uint256 xsushi_powah = sushi.balanceOf(address(bar)).mul(collective_xsushi_balance) / bar.totalSupply(); // calculate xSushi voting weight\n', "        return lp_powah.add(xsushi_powah); // combine xSushi weight with adjusted LP voting weight for 'powah'\n", '    }\n', '\n', "    /// @dev Internal function to avoid stack 'too deep' errors on calculating {balanceOf}.\n", '    function collectBalances(address account) private view returns (uint256 collective_xsushi_balance) {\n', '        uint256 xsushi_balance = bar.balanceOf(account);\n', '        uint256 axsushi_balance = axSushi.balanceOf(account);\n', '        uint256 bento_balance = bento.toAmount(bar, bento.balanceOf(bar, account), false);\n', '        uint256 crxsushi_balance = IERC20(crxSushi).balanceOf(account).mul(ICreamRate(crxSushi).exchangeRateStored()) / 10**18; // calculate underlying xSushi claim\n', '        collective_xsushi_balance = xsushi_balance.add(axsushi_balance).add(bento_balance).add(crxsushi_balance);\n', '    }\n', '\n', "    /// @notice Returns the adjusted total 'powah' supply for LP & xSushi staking.\n", '    function totalSupply() external view returns (uint256) {\n', '        uint256 lp_totalSushi = sushi.balanceOf(address(pair));\n', '        uint256 xsushi_totalSushi = sushi.balanceOf(address(bar));\n', '        return lp_totalSushi.mul(2).add(xsushi_totalSushi);\n', '    }\n', '}']