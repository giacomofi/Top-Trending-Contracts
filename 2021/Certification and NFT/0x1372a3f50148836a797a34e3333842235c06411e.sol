['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Address.sol";\n', 'import "./Context.sol";\n', 'import "./SafeMath.sol";\n', '\n', '/**\n', ' * @title PaymentSplitter\n', ' * @dev This contract allows to split Ether payments among a group of accounts. The sender does not need to be aware\n', ' * that the Ether will be split in this way, since it is handled transparently by the contract.\n', ' *\n', ' * The split can be in equal parts or in any other arbitrary proportion. The way this is specified is by assigning each\n', ' * account to a number of shares. Of all the Ether that this contract receives, each account will then be able to claim\n', ' * an amount proportional to the percentage of total shares they were assigned.\n', ' *\n', ' * `PaymentSplitter` follows a _pull payment_ model. This means that payments are not automatically forwarded to the\n', ' * accounts but kept in this contract, and the actual transfer is triggered as a separate step by calling the {release}\n', ' * function.\n', ' */\n', 'contract PaymentSplitter is Context {\n', '    event PayeeAdded(address account, uint256 shares);\n', '    event PaymentReleased(address to, uint256 amount);\n', '    event PaymentReceived(address from, uint256 amount);\n', '\n', '    uint256 private _totalShares;\n', '    uint256 private _totalReleased;\n', '\n', '    mapping(address => uint256) private _shares;\n', '    mapping(address => uint256) private _released;\n', '    address[] private _payees;\n', '\n', '    /**\n', '     * @dev Creates an instance of `PaymentSplitter` where each account in `payees` is assigned the number of shares at\n', '     * the matching position in the `shares` array.\n', '     *\n', '     * All addresses in `payees` must be non-zero. Both arrays must have the same non-zero length, and there must be no\n', '     * duplicates in `payees`.\n', '     */\n', '    constructor (address[] memory payees, uint256[] memory shares_) payable {\n', '        // solhint-disable-next-line max-line-length\n', '        require(payees.length == shares_.length, "PaymentSplitter: payees and shares length mismatch");\n', '        require(payees.length > 0, "PaymentSplitter: no payees");\n', '\n', '        for (uint256 i = 0; i < payees.length; i++) {\n', '            _addPayee(payees[i], shares_[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev The Ether received will be logged with {PaymentReceived} events. Note that these events are not fully\n', "     * reliable: it's possible for a contract to receive Ether without triggering this function. This only affects the\n", '     * reliability of the events, and not the actual splitting of Ether.\n', '     *\n', '     * To learn more about this see the Solidity documentation for\n', '     * https://solidity.readthedocs.io/en/latest/contracts.html#fallback-function[fallback\n', '     * functions].\n', '     */\n', '    receive () external payable virtual {\n', '        emit PaymentReceived(_msgSender(), msg.value);\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total shares held by payees.\n', '     */\n', '    function totalShares() public view returns (uint256) {\n', '        return _totalShares;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total amount of Ether already released.\n', '     */\n', '    function totalReleased() public view returns (uint256) {\n', '        return _totalReleased;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of shares held by an account.\n', '     */\n', '    function shares(address account) public view returns (uint256) {\n', '        return _shares[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the amount of Ether already released to a payee.\n', '     */\n', '    function released(address account) public view returns (uint256) {\n', '        return _released[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the address of the payee number `index`.\n', '     */\n', '    function payee(uint256 index) public view returns (address) {\n', '        return _payees[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers a transfer to `account` of the amount of Ether they are owed, according to their percentage of the\n', '     * total shares and their previous withdrawals.\n', '     */\n', '    function release(address payable account) public virtual {\n', '        require(_shares[account] > 0, "PaymentSplitter: account has no shares");\n', '\n', '        uint256 totalReceived = address(this).balance + _totalReleased;\n', '        uint256 payment = totalReceived * _shares[account] / _totalShares - _released[account];\n', '\n', '        require(payment != 0, "PaymentSplitter: account is not due payment");\n', '\n', '        _released[account] = _released[account] + payment;\n', '        _totalReleased = _totalReleased + payment;\n', '\n', '        Address.sendValue(account, payment);\n', '        emit PaymentReleased(account, payment);\n', '    }\n', '\n', '    /**\n', '     * @dev Add a new payee to the contract.\n', '     * @param account The address of the payee to add.\n', '     * @param shares_ The number of shares owned by the payee.\n', '     */\n', '    function _addPayee(address account, uint256 shares_) private {\n', '        require(account != address(0), "PaymentSplitter: account is the zero address");\n', '        require(shares_ > 0, "PaymentSplitter: shares are 0");\n', '        require(_shares[account] == 0, "PaymentSplitter: account already has shares");\n', '\n', '        _payees.push(account);\n', '        _shares[account] = shares_;\n', '        _totalShares = _totalShares + shares_;\n', '        emit PayeeAdded(account, shares_);\n', '    }\n', '}']