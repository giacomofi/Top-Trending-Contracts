['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-30\n', '*/\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/cryptography/MerkleProof.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/interfaces/yearn/GuestlistApi.sol\n', '\n', '// pragma solidity >=0.6.0 <0.7.0;\n', '// pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface GuestListAPI {\n', '    function authorized(address guest, uint256 amount) external view returns (bool);\n', '}\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/interfaces/yearn/VaultAPI.sol\n', '\n', '// pragma solidity >=0.6.0 <0.7.0;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient) external returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function guestList() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function setDepositLimit(uint256 limit) external;\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    function setGuestList(address guestList) external;\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Root file: contracts/yearn/VipCappedGuestList.sol\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/cryptography/MerkleProof.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "/Users/starfish/code/badger-system/interfaces/yearn/GuestlistApi.sol";\n', '// import "/Users/starfish/code/badger-system/interfaces/yearn/VaultAPI.sol";\n', '\n', '/**\n', ' * @notice A basic guest list contract for testing.\n', ' * @dev For a Vyper implementation of this contract containing additional\n', ' * functionality, see https://github.com/banteg/guest-list/blob/master/contracts/GuestList.vy\n', ' * The bouncer can invite arbitrary guests\n', ' * A guest can be added permissionlessly with proof of inclusion in current merkle set\n', ' * The bouncer can change the merkle root at any time\n', ' * Merkle-based permission that has been claimed cannot be revoked permissionlessly.\n', ' * Any guests can be revoked by the bouncer at-will\n', ' * The TVL cap is based on the number of want tokens in the underlying vaults.\n', ' * This can only be made more permissive over time. If decreased, existing TVL is maintained and no deposits are possible until the TVL has gone below the threshold\n', ' * A variant of the yearn AffiliateToken that supports guest list control of deposits\n', ' * A guest list that gates access by merkle root and a TVL cap\n', ' */\n', 'contract VipCappedGuestList {\n', '    using SafeMath for uint256;\n', '\n', '    address public vault;\n', '    address public bouncer;\n', '\n', '    bytes32 public guestRoot;\n', '    uint256 public userDepositCap;\n', '\n', '    mapping(address => bool) public guests;\n', '\n', '    event ProveInvitation(address indexed account, bytes32 indexed guestRoot);\n', '    event SetGuestRoot(bytes32 indexed guestRoot);\n', '    event SetUserDepositCap(uint256 cap);\n', '\n', '    /**\n', '     * @notice Create the test guest list, setting the message sender as\n', '     * `bouncer`.\n', "     * @dev Note that since this is just for testing, you're unable to change\n", '     * `bouncer`.\n', '     */\n', '    constructor(address vault_) public {\n', '        vault = vault_;\n', '        bouncer = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @notice Invite guests or kick them from the party.\n', '     * @param _guests The guests to add or update.\n', '     * @param _invited A flag for each guest at the matching index, inviting or\n', '     * uninviting the guest.\n', '     */\n', '    function setGuests(address[] calldata _guests, bool[] calldata _invited) external {\n', '        require(msg.sender == bouncer, "onlyBouncer");\n', '        _setGuests(_guests, _invited);\n', '    }\n', '\n', '    function vaultBalance(address user) public view returns (uint256) {\n', '        return (VaultAPI(vault).balanceOf(user).mul(VaultAPI(vault).pricePerShare())).div((10**VaultAPI(vault).decimals()));\n', '    }\n', '\n', '    function remainingDepositAllowed(address user) public view returns (uint256) {\n', '        return userDepositCap - vaultBalance(user);\n', '    }\n', '\n', '    /**\n', '     * @notice Permissionly prove an address is included in the current merkle root, thereby granting access\n', '     * @notice Note that the list is designed to ONLY EXPAND in future instances\n', '     * @notice The admin does retain the ability to ban individual addresses\n', '     */\n', '    function proveInvitation(address account, bytes32[] calldata merkleProof) external {\n', '        // Verify Merkle Proof\n', '        bytes32 node = keccak256(abi.encode(account));\n', '        require(MerkleProof.verify(merkleProof, guestRoot, node), "Invalid merkle proof.");\n', '\n', '        address[] memory accounts = new address[](1);\n', '        bool[] memory invited = new bool[](1);\n', '\n', '        accounts[0] = account;\n', '        invited[0] = true;\n', '\n', '        _setGuests(accounts, invited);\n', '\n', '        emit ProveInvitation(account, guestRoot);\n', '    }\n', '\n', '    /**\n', '     * @notice Set the merkle root to verify invitation proofs against.\n', '     * @notice Note that accounts not included in the root will still be invited if their inviation was previously approved.\n', '     */\n', '    function setGuestRoot(bytes32 guestRoot_) external {\n', '        require(msg.sender == bouncer, "onlyBouncer");\n', '        guestRoot = guestRoot_;\n', '\n', '        emit SetGuestRoot(guestRoot);\n', '    }\n', '\n', '    /**\n', '     * @notice Set the merkle root to verify invitation proofs against.\n', '     * @notice Note that accounts not included in the root will still be invited if their inviation was previously approved.\n', '     */\n', '    function setUserDepositCap(uint256 cap_) external {\n', '        require(msg.sender == bouncer, "onlyBouncer");\n', '        userDepositCap = cap_;\n', '\n', '        emit SetUserDepositCap(userDepositCap);\n', '    }\n', '\n', '    /**\n', '     * @notice Check if a guest with a bag of a certain size is allowed into\n', '     * the party.\n', "     * @dev Note that `_amount` isn't checked to keep test setup simple, since\n", "     * from the vault tests' perspective this is a pass/fail call anyway.\n", "     * @param _guest The guest's address to check.\n", '     */\n', '    function authorized(address _guest, uint256 _amount) external view returns (bool) {\n', '        return guests[_guest] && (vaultBalance(_guest) + _amount <= userDepositCap);\n', '    }\n', '\n', '    function _setGuests(address[] memory _guests, bool[] memory _invited) internal {\n', '        require(_guests.length == _invited.length);\n', '        for (uint256 i = 0; i < _guests.length; i++) {\n', '            if (_guests[i] == address(0)) {\n', '                break;\n', '            }\n', '            guests[_guests[i]] = _invited[i];\n', '        }\n', '    }\n', '}']