['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface Unitroller {\n', '    function getAllMarkets() external view returns (address[] memory);\n', '}\n', '\n', 'interface CyToken {\n', '    function underlying() external view returns (address);\n', '\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'interface IOracle {\n', '    function getPriceUsdc(address tokenAddress) external view returns (uint256);\n', '}\n', '\n', 'contract CalculationsIronBank {\n', '    address public unitrollerAddress;\n', '    address public oracleAddress;\n', '\n', '    constructor(address _unitrollerAddress, address _oracleAddress) {\n', '        unitrollerAddress = _unitrollerAddress;\n', '        oracleAddress = _oracleAddress;\n', '    }\n', '\n', '    function getIronBankMarkets() public view returns (address[] memory) {\n', '        return Unitroller(unitrollerAddress).getAllMarkets();\n', '    }\n', '\n', '    function isIronBankMarket(address tokenAddress) public view returns (bool) {\n', '        address[] memory ironBankMarkets = getIronBankMarkets();\n', '        uint256 numIronBankMarkets = ironBankMarkets.length;\n', '        for (\n', '            uint256 marketIdx = 0;\n', '            marketIdx < numIronBankMarkets;\n', '            marketIdx++\n', '        ) {\n', '            address marketAddress = ironBankMarkets[marketIdx];\n', '            if (tokenAddress == marketAddress) {\n', '                return true;\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function getIronBankMarketPriceUsdc(address tokenAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        CyToken cyToken = CyToken(tokenAddress);\n', '        uint256 exchangeRateStored = cyToken.exchangeRateStored();\n', '        address underlyingTokenAddress = cyToken.underlying();\n', '        uint256 decimals = cyToken.decimals();\n', '        IERC20 underlyingToken = IERC20(underlyingTokenAddress);\n', '        uint8 underlyingTokenDecimals = underlyingToken.decimals();\n', '        IOracle oracle = IOracle(oracleAddress);\n', '        uint256 underlyingTokenPrice =\n', '            oracle.getPriceUsdc(underlyingTokenAddress);\n', '\n', '        uint256 price =\n', '            (underlyingTokenPrice * exchangeRateStored) /\n', '                10**(underlyingTokenDecimals + decimals);\n', '        return price;\n', '    }\n', '\n', '    function getPriceUsdc(address tokenAddress) public view returns (uint256) {\n', '        if (isIronBankMarket(tokenAddress)) {\n', '            return getIronBankMarketPriceUsdc(tokenAddress);\n', '        }\n', '        revert();\n', '    }\n', '}']