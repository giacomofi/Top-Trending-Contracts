['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {codehash := extcodehash(account)}\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint value) internal {\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {// Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract APIRedeem {\n', '    using Address for address;\n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "OnlyOwner methods called by non-owner.");\n', '        _;\n', '    }\n', '    function transferOwnership(address payable newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '\n', '    function withdrawFunds(address payable beneficiary, uint withdrawAmount) public onlyOwner {\n', '        require(withdrawAmount <= address(this).balance, "Withdraw amount larger than balance.");\n', '        beneficiary.transfer(withdrawAmount);\n', '    }\n', '\n', '    function withdrawAPI(address payable beneficiary, uint withdrawAmount) public onlyOwner {\n', '        API.safeTransfer(beneficiary, withdrawAmount);\n', '    }\n', '\n', '    function withdrawUSDT(address payable beneficiary, uint withdrawAmount) public onlyOwner {\n', '        USDT.safeTransfer(beneficiary, withdrawAmount);\n', '    }\n', '    \n', '    function() external payable {\n', '        if (msg.sender == owner) {\n', '        }\n', '    }\n', '\n', '    event Redeem(address indexed player, uint sentUSDT, uint getAPI);\n', '\n', '    IERC20 public API = IERC20(0x97F302E3c6096b2dE1185315b4FfC1F7d57C960b);\n', '    IERC20 public USDT = IERC20(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n', '\n', '    mapping(address => uint) public redeemLimit;\n', '\n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function setRedeemLimit(address _player, uint _limit) public onlyOwner {\n', '        redeemLimit[_player] = _limit;\n', '    }\n', '\n', '    function redeem(address _referrer, uint _amount) public payable returns (bool) {\n', "        require(_amount % 200e6 == 0, 'USDT value invalid');\n", '\n', '        uint limit = redeemLimit[msg.sender].add(200e6);\n', "        require(_amount <= limit, 'redeem value over limit');\n", '\n', '        require(_referrer != msg.sender, "referrer is this address");\n', '        require(_referrer != address(0), "referrer is the zero address");\n', '        redeemLimit[_referrer] = redeemLimit[_referrer].add(200e6);\n', '\n', '\n', '        uint sentUSDT = _amount;\n', '        uint getAPI = sentUSDT.div(1e6).div(2).mul(1e18);\n', '        USDT.safeTransferFrom(msg.sender, address(this), sentUSDT);\n', '        API.safeTransfer(msg.sender, getAPI);\n', '        emit Redeem(msg.sender, sentUSDT, getAPI);\n', '\n', '        return true;\n', '    }\n', '\n', '}']