['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-13\n', '*/\n', '\n', '// File: contracts/intf/IERC20.sol\n', '\n', '// This is a file copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MUL_ERROR");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "DIVIDING_ERROR");\n', '        return a / b;\n', '    }\n', '\n', '    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 quotient = div(a, b);\n', '        uint256 remainder = a - quotient * b;\n', '        if (remainder > 0) {\n', '            return quotient + 1;\n', '        } else {\n', '            return quotient;\n', '        }\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SUB_ERROR");\n', '        return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ADD_ERROR");\n', '        return c;\n', '    }\n', '\n', '    function sqrt(uint256 x) internal pure returns (uint256 y) {\n', '        uint256 z = x / 2 + 1;\n', '        y = x;\n', '        while (z < y) {\n', '            y = z;\n', '            z = (x / z + z) / 2;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/DecimalMath.sol\n', '\n', '/**\n', ' * @title DecimalMath\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Functions for fixed point number with 18 decimals\n', ' */\n', 'library DecimalMath {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 internal constant ONE = 10**18;\n', '    uint256 internal constant ONE2 = 10**36;\n', '\n', '    function mulFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d) / (10**18);\n', '    }\n', '\n', '    function mulCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(d).divCeil(10**18);\n', '    }\n', '\n', '    function divFloor(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).div(d);\n', '    }\n', '\n', '    function divCeil(uint256 target, uint256 d) internal pure returns (uint256) {\n', '        return target.mul(10**18).divCeil(d);\n', '    }\n', '\n', '    function reciprocalFloor(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).div(target);\n', '    }\n', '\n', '    function reciprocalCeil(uint256 target) internal pure returns (uint256) {\n', '        return uint256(10**36).divCeil(target);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "DODO_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/intf/IDODOApprove.sol\n', '\n', '\n', 'interface IDODOApprove {\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '    function getDODOProxy() external view returns (address);\n', '}\n', '\n', '// File: contracts/SmartRoute/DODOApproveProxy.sol\n', '\n', '\n', 'interface IDODOApproveProxy {\n', '    function isAllowedProxy(address _proxy) external view returns (bool);\n', '    function claimTokens(address token,address who,address dest,uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title DODOApproveProxy\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Allow different version dodoproxy to claim from DODOApprove\n', ' */\n', 'contract DODOApproveProxy is InitializableOwnable {\n', '    \n', '    // ============ Storage ============\n', '    uint256 private constant _TIMELOCK_DURATION_ = 3 days;\n', '    mapping (address => bool) public _IS_ALLOWED_PROXY_;\n', '    uint256 public _TIMELOCK_;\n', '    address public _PENDING_ADD_DODO_PROXY_;\n', '    address public immutable _DODO_APPROVE_;\n', '\n', '    // ============ Modifiers ============\n', '    modifier notLocked() {\n', '        require(\n', '            _TIMELOCK_ <= block.timestamp,\n', '            "SetProxy is timelocked"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address dodoApporve) public {\n', '        _DODO_APPROVE_ = dodoApporve;\n', '    }\n', '\n', '    function init(address owner, address[] memory proxies) external {\n', '        initOwner(owner);\n', '        for(uint i = 0; i < proxies.length; i++) \n', '            _IS_ALLOWED_PROXY_[proxies[i]] = true;\n', '    }\n', '\n', '    function unlockAddProxy(address newDodoProxy) public onlyOwner {\n', '        _TIMELOCK_ = block.timestamp + _TIMELOCK_DURATION_;\n', '        _PENDING_ADD_DODO_PROXY_ = newDodoProxy;\n', '    }\n', '\n', '    function lockAddProxy() public onlyOwner {\n', '       _PENDING_ADD_DODO_PROXY_ = address(0);\n', '       _TIMELOCK_ = 0;\n', '    }\n', '\n', '\n', '    function addDODOProxy() external onlyOwner notLocked() {\n', '        _IS_ALLOWED_PROXY_[_PENDING_ADD_DODO_PROXY_] = true;\n', '        lockAddProxy();\n', '    }\n', '\n', '    function removeDODOProxy (address oldDodoProxy) public onlyOwner {\n', '        _IS_ALLOWED_PROXY_[oldDodoProxy] = false;\n', '    }\n', '    \n', '    function claimTokens(\n', '        address token,\n', '        address who,\n', '        address dest,\n', '        uint256 amount\n', '    ) external {\n', '        require(_IS_ALLOWED_PROXY_[msg.sender], "DODOApproveProxy:Access restricted");\n', '        IDODOApprove(_DODO_APPROVE_).claimTokens(\n', '            token,\n', '            who,\n', '            dest,\n', '            amount\n', '        );\n', '    }\n', '\n', '    function isAllowedProxy(address _proxy) external view returns (bool) {\n', '        return _IS_ALLOWED_PROXY_[_proxy];\n', '    }\n', '}\n', '\n', '// File: contracts/DODOToken/vDODOToken.sol\n', '\n', '\n', '\n', 'interface IGovernance {\n', '    function getLockedvDODO(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IDODOCirculationHelper {\n', '    // Locked vDOOD not counted in circulation\n', '    function getCirculation() external view returns (uint256);\n', '\n', '    function getDodoWithdrawFeeRatio() external view returns (uint256);\n', '}\n', '\n', 'contract vDODOToken is InitializableOwnable {\n', '    using SafeMath for uint256;\n', '\n', '    // ============ Storage(ERC20) ============\n', '\n', '    string public name = "vDODO Membership Token";\n', '    string public symbol = "vDODO";\n', '    uint8 public decimals = 18;\n', '    mapping(address => mapping(address => uint256)) internal _ALLOWED_;\n', '\n', '    // ============ Storage ============\n', '\n', '    address public immutable _DODO_TOKEN_;\n', '    address public immutable _DODO_APPROVE_PROXY_;\n', '    address public immutable _DODO_TEAM_;\n', '    address public _DOOD_GOV_;\n', '    address public _DODO_CIRCULATION_HELPER_;\n', '\n', '    bool public _CAN_TRANSFER_;\n', '\n', '    // staking reward parameters\n', '    uint256 public _DODO_PER_BLOCK_;\n', '    uint256 public constant _SUPERIOR_RATIO_ = 10**17; // 0.1\n', '    uint256 public constant _DODO_RATIO_ = 100; // 100\n', '    uint256 public _DODO_FEE_BURN_RATIO_;\n', '\n', '    // accounting\n', '    uint112 public alpha = 10**18; // 1\n', '    uint112 public _TOTAL_BLOCK_DISTRIBUTION_;\n', '    uint32 public _LAST_REWARD_BLOCK_;\n', '\n', '    uint256 public _TOTAL_BLOCK_REWARD_;\n', '    uint256 public _TOTAL_STAKING_POWER_;\n', '    mapping(address => UserInfo) public userInfo;\n', '\n', '    struct UserInfo {\n', '        uint128 stakingPower;\n', '        uint128 superiorSP;\n', '        address superior;\n', '        uint256 credit;\n', '    }\n', '\n', '    // ============ Events ============\n', '\n', '    event MintVDODO(address user, address superior, uint256 mintDODO);\n', '    event RedeemVDODO(address user, uint256 receiveDODO, uint256 burnDODO, uint256 feeDODO);\n', '    event DonateDODO(address user, uint256 donateDODO);\n', '    event SetCantransfer(bool allowed);\n', '\n', '    event PreDeposit(uint256 dodoAmount);\n', '    event ChangePerReward(uint256 dodoPerBlock);\n', '    event UpdateDODOFeeBurnRatio(uint256 dodoFeeBurnRatio);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier canTransfer() {\n', '        require(_CAN_TRANSFER_, "vDODOToken: not allowed transfer");\n', '        _;\n', '    }\n', '\n', '    modifier balanceEnough(address account, uint256 amount) {\n', '        require(availableBalanceOf(account) >= amount, "vDODOToken: available amount not enough");\n', '        _;\n', '    }\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(\n', '        address dodoGov,\n', '        address dodoToken,\n', '        address dodoApproveProxy,\n', '        address dodoTeam\n', '    ) public {\n', '        _DOOD_GOV_ = dodoGov;\n', '        _DODO_TOKEN_ = dodoToken;\n', '        _DODO_APPROVE_PROXY_ = dodoApproveProxy;\n', '        _DODO_TEAM_ = dodoTeam;\n', '    }\n', '\n', '    // ============ Ownable Functions ============`\n', '\n', '    function setCantransfer(bool allowed) public onlyOwner {\n', '        _CAN_TRANSFER_ = allowed;\n', '        emit SetCantransfer(allowed);\n', '    }\n', '\n', '    function changePerReward(uint256 dodoPerBlock) public onlyOwner {\n', '        _updateAlpha();\n', '        _DODO_PER_BLOCK_ = dodoPerBlock;\n', '        emit ChangePerReward(dodoPerBlock);\n', '    }\n', '\n', '    function updateDODOFeeBurnRatio(uint256 dodoFeeBurnRatio) public onlyOwner {\n', '        _DODO_FEE_BURN_RATIO_ = dodoFeeBurnRatio;\n', '        emit UpdateDODOFeeBurnRatio(_DODO_FEE_BURN_RATIO_);\n', '    }\n', '\n', '    function updateDODOCirculationHelper(address helper) public onlyOwner {\n', '        _DODO_CIRCULATION_HELPER_ = helper;\n', '    }\n', '\n', '    function updateGovernance(address governance) public onlyOwner {\n', '        _DOOD_GOV_ = governance;\n', '    }\n', '\n', '    function emergencyWithdraw() public onlyOwner {\n', '        uint256 dodoBalance = IERC20(_DODO_TOKEN_).balanceOf(address(this));\n', '        IERC20(_DODO_TOKEN_).transfer(_OWNER_, dodoBalance);\n', '    }\n', '\n', '    // ============ Mint & Redeem & Donate ============\n', '\n', '    function mint(uint256 dodoAmount, address superiorAddress) public {\n', '        require(\n', '            superiorAddress != address(0) && superiorAddress != msg.sender,\n', '            "vDODOToken: Superior INVALID"\n', '        );\n', '        require(dodoAmount > 0, "vDODOToken: must mint greater than 0");\n', '\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        if (user.superior == address(0)) {\n', '            require(\n', '                superiorAddress == _DODO_TEAM_ || userInfo[superiorAddress].superior != address(0),\n', '                "vDODOToken: INVALID_SUPERIOR_ADDRESS"\n', '            );\n', '            user.superior = superiorAddress;\n', '        }\n', '\n', '        _updateAlpha();\n', '\n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\n', '            _DODO_TOKEN_,\n', '            msg.sender,\n', '            address(this),\n', '            dodoAmount\n', '        );\n', '\n', '        uint256 newStakingPower = DecimalMath.divFloor(dodoAmount, alpha);\n', '\n', '        _mint(user, newStakingPower);\n', '\n', '        emit MintVDODO(msg.sender, superiorAddress, dodoAmount);\n', '    }\n', '\n', '    function redeem(uint256 vdodoAmount, bool all) public balanceEnough(msg.sender, vdodoAmount) {\n', '        _updateAlpha();\n', '        UserInfo storage user = userInfo[msg.sender];\n', '\n', '        uint256 dodoAmount;\n', '        uint256 stakingPower;\n', '\n', '        if (all) {\n', '            stakingPower = uint256(user.stakingPower).sub(DecimalMath.divFloor(user.credit, alpha));\n', '            dodoAmount = DecimalMath.mulFloor(stakingPower, alpha);\n', '        } else {\n', '            dodoAmount = vdodoAmount.mul(_DODO_RATIO_);\n', '            stakingPower = DecimalMath.divFloor(dodoAmount, alpha);\n', '        }\n', '\n', '        _redeem(user, stakingPower);\n', '\n', '        (uint256 dodoReceive, uint256 burnDodoAmount, uint256 withdrawFeeDodoAmount) = getWithdrawResult(dodoAmount);\n', '\n', '        IERC20(_DODO_TOKEN_).transfer(msg.sender, dodoReceive);\n', '        \n', '        if (burnDodoAmount > 0) {\n', '            IERC20(_DODO_TOKEN_).transfer(address(0), burnDodoAmount);\n', '        }\n', '        \n', '        if (withdrawFeeDodoAmount > 0) {\n', '            alpha = uint112(\n', '                uint256(alpha).add(\n', '                    DecimalMath.divFloor(withdrawFeeDodoAmount, _TOTAL_STAKING_POWER_)\n', '                )\n', '            );\n', '        }\n', '\n', '        emit RedeemVDODO(msg.sender, dodoReceive, burnDodoAmount, withdrawFeeDodoAmount);\n', '    }\n', '\n', '    function donate(uint256 dodoAmount) public {\n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\n', '            _DODO_TOKEN_,\n', '            msg.sender,\n', '            address(this),\n', '            dodoAmount\n', '        );\n', '        alpha = uint112(\n', '            uint256(alpha).add(DecimalMath.divFloor(dodoAmount, _TOTAL_STAKING_POWER_))\n', '        );\n', '        emit DonateDODO(msg.sender, dodoAmount);\n', '    }\n', '\n', '    function preDepositedBlockReward(uint256 dodoAmount) public {\n', '        IDODOApproveProxy(_DODO_APPROVE_PROXY_).claimTokens(\n', '            _DODO_TOKEN_,\n', '            msg.sender,\n', '            address(this),\n', '            dodoAmount\n', '        );\n', '        _TOTAL_BLOCK_REWARD_ = _TOTAL_BLOCK_REWARD_.add(dodoAmount);\n', '        emit PreDeposit(dodoAmount);\n', '    }\n', '\n', '    // ============ ERC20 Functions ============\n', '\n', '    function totalSupply() public view returns (uint256 vDODOSupply) {\n', '        uint256 totalDODO = IERC20(_DODO_TOKEN_).balanceOf(address(this));\n', '        (,uint256 curDistribution) = getLatestAlpha();\n', '        uint256 actualDODO = totalDODO.sub(_TOTAL_BLOCK_REWARD_.sub(curDistribution.add(_TOTAL_BLOCK_DISTRIBUTION_)));\n', '        vDODOSupply = actualDODO / _DODO_RATIO_;\n', '    }\n', '    \n', '    function balanceOf(address account) public view returns (uint256 vDODOAmount) {\n', '        vDODOAmount = dodoBalanceOf(account) / _DODO_RATIO_;\n', '    }\n', '\n', '    function transfer(address to, uint256 vDODOAmount) public returns (bool) {\n', '        _updateAlpha();\n', '        _transfer(msg.sender, to, vDODOAmount);\n', '        return true;\n', '    }\n', '\n', '    function approve(address spender, uint256 vDODOAmount) canTransfer public returns (bool) {\n', '        _ALLOWED_[msg.sender][spender] = vDODOAmount;\n', '        emit Approval(msg.sender, spender, vDODOAmount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 vDODOAmount\n', '    ) public returns (bool) {\n', '        require(vDODOAmount <= _ALLOWED_[from][msg.sender], "ALLOWANCE_NOT_ENOUGH");\n', '        _updateAlpha();\n', '        _transfer(from, to, vDODOAmount);\n', '        _ALLOWED_[from][msg.sender] = _ALLOWED_[from][msg.sender].sub(vDODOAmount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _ALLOWED_[owner][spender];\n', '    }\n', '\n', '    // ============ Helper Functions ============\n', '\n', '    function getLatestAlpha() public view returns (uint256 newAlpha, uint256 curDistribution) {\n', '        if (_LAST_REWARD_BLOCK_ == 0) {\n', '            curDistribution = 0;\n', '        } else {\n', '            curDistribution = _DODO_PER_BLOCK_ * (block.number - _LAST_REWARD_BLOCK_);\n', '        }\n', '        if (_TOTAL_STAKING_POWER_ > 0) {\n', '            newAlpha = uint256(alpha).add(DecimalMath.divFloor(curDistribution, _TOTAL_STAKING_POWER_));\n', '        } else {\n', '            newAlpha = alpha;\n', '        }\n', '    }\n', '\n', '    function availableBalanceOf(address account) public view returns (uint256 vDODOAmount) {\n', '        if (_DOOD_GOV_ == address(0)) {\n', '            vDODOAmount = balanceOf(account);\n', '        } else {\n', '            uint256 lockedvDODOAmount = IGovernance(_DOOD_GOV_).getLockedvDODO(account);\n', '            vDODOAmount = balanceOf(account).sub(lockedvDODOAmount);\n', '        }\n', '    }\n', '\n', '    function dodoBalanceOf(address account) public view returns (uint256 dodoAmount) {\n', '        UserInfo memory user = userInfo[account];\n', '        (uint256 newAlpha,) = getLatestAlpha();\n', '        uint256 nominalDodo =  DecimalMath.mulFloor(uint256(user.stakingPower), newAlpha);\n', '        if(nominalDodo > user.credit) {\n', '            dodoAmount = nominalDodo - user.credit;\n', '        }else {\n', '            dodoAmount = 0;\n', '        }\n', '    }\n', '\n', '    function getWithdrawResult(uint256 dodoAmount)\n', '        public\n', '        view\n', '        returns (\n', '            uint256 dodoReceive,\n', '            uint256 burnDodoAmount,\n', '            uint256 withdrawFeeDodoAmount\n', '        )\n', '    {\n', '        uint256 feeRatio =\n', '            IDODOCirculationHelper(_DODO_CIRCULATION_HELPER_).getDodoWithdrawFeeRatio();\n', '\n', '        withdrawFeeDodoAmount = DecimalMath.mulFloor(dodoAmount, feeRatio);\n', '        dodoReceive = dodoAmount.sub(withdrawFeeDodoAmount);\n', '\n', '        burnDodoAmount = DecimalMath.mulFloor(withdrawFeeDodoAmount, _DODO_FEE_BURN_RATIO_);\n', '        withdrawFeeDodoAmount = withdrawFeeDodoAmount.sub(burnDodoAmount);\n', '    }\n', '\n', '    function getDODOWithdrawFeeRatio() public view returns (uint256 feeRatio) {\n', '        feeRatio = IDODOCirculationHelper(_DODO_CIRCULATION_HELPER_).getDodoWithdrawFeeRatio();\n', '    }\n', '\n', '    function getSuperior(address account) public view returns (address superior) {\n', '        return userInfo[account].superior;\n', '    }\n', '\n', '    // ============ Internal Functions ============\n', '\n', '    function _updateAlpha() internal {\n', '        (uint256 newAlpha, uint256 curDistribution) = getLatestAlpha();\n', '        uint256 newTotalDistribution = curDistribution.add(_TOTAL_BLOCK_DISTRIBUTION_);\n', '        require(newAlpha <= uint112(-1) && newTotalDistribution <= uint112(-1), "OVERFLOW");\n', '        alpha = uint112(newAlpha);\n', '        _TOTAL_BLOCK_DISTRIBUTION_ = uint112(newTotalDistribution);\n', '        _LAST_REWARD_BLOCK_ = uint32(block.number);\n', '    }\n', '\n', '    function _mint(UserInfo storage to, uint256 stakingPower) internal {\n', '        require(stakingPower <= uint128(-1), "OVERFLOW");\n', '        UserInfo storage superior = userInfo[to.superior];\n', '        uint256 superiorIncreSP = DecimalMath.mulFloor(stakingPower, _SUPERIOR_RATIO_);\n', '        uint256 superiorIncreCredit = DecimalMath.mulFloor(superiorIncreSP, alpha);\n', '\n', '        to.stakingPower = uint128(uint256(to.stakingPower).add(stakingPower));\n', '        to.superiorSP = uint128(uint256(to.superiorSP).add(superiorIncreSP));\n', '\n', '        superior.stakingPower = uint128(uint256(superior.stakingPower).add(superiorIncreSP));\n', '        superior.credit = uint128(uint256(superior.credit).add(superiorIncreCredit));\n', '\n', '        _TOTAL_STAKING_POWER_ = _TOTAL_STAKING_POWER_.add(stakingPower).add(superiorIncreSP);\n', '    }\n', '\n', '    function _redeem(UserInfo storage from, uint256 stakingPower) internal {\n', '        from.stakingPower = uint128(uint256(from.stakingPower).sub(stakingPower));\n', '\n', '        // superior decrease sp = min(stakingPower*0.1, from.superiorSP)\n', '        uint256 superiorDecreSP = DecimalMath.mulFloor(stakingPower, _SUPERIOR_RATIO_);\n', '        superiorDecreSP = from.superiorSP <= superiorDecreSP ? from.superiorSP : superiorDecreSP;\n', '        from.superiorSP = uint128(uint256(from.superiorSP).sub(superiorDecreSP));\n', '\n', '        UserInfo storage superior = userInfo[from.superior];\n', '        uint256 creditSP = DecimalMath.divFloor(superior.credit, alpha);\n', '\n', '        if (superiorDecreSP >= creditSP) {\n', '            superior.credit = 0;\n', '            superior.stakingPower = uint128(uint256(superior.stakingPower).sub(creditSP));\n', '        } else {\n', '            superior.credit = uint128(\n', '                uint256(superior.credit).sub(DecimalMath.mulFloor(superiorDecreSP, alpha))\n', '            );\n', '            superior.stakingPower = uint128(uint256(superior.stakingPower).sub(superiorDecreSP));\n', '        }\n', '\n', '        _TOTAL_STAKING_POWER_ = _TOTAL_STAKING_POWER_.sub(stakingPower).sub(superiorDecreSP);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 vDODOAmount\n', '    ) internal canTransfer balanceEnough(from, vDODOAmount) {\n', '        require(from != address(0), "transfer from the zero address");\n', '        require(to != address(0), "transfer to the zero address");\n', '        require(from != to, "transfer from same with to");\n', '\n', '        uint256 stakingPower = DecimalMath.divFloor(vDODOAmount * _DODO_RATIO_, alpha);\n', '\n', '        UserInfo storage fromUser = userInfo[from];\n', '        UserInfo storage toUser = userInfo[to];\n', '\n', '        _redeem(fromUser, stakingPower);\n', '        _mint(toUser, stakingPower);\n', '\n', '        emit Transfer(from, to, vDODOAmount);\n', '    }\n', '}']