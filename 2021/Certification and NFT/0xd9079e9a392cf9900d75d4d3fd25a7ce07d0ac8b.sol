['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', 'pragma solidity 0.5.11; /*\n', '\n', '    ___________________________________________________________________\n', '      _      _                                        ______           \n', '      |  |  /          /                                /              \n', '    --|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n', "      |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n", '    __/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n', '    \n', '    \n', '███████╗███╗░░░███╗░█████╗░██████╗░██╗░░██╗███████╗████████╗████████╗░█████╗░██╗░░██╗███████╗███╗░░██╗\n', '██╔════╝████╗░████║██╔══██╗██╔══██╗██║░██╔╝██╔════╝╚══██╔══╝╚══██╔══╝██╔══██╗██║░██╔╝██╔════╝████╗░██║\n', '█████╗░░██╔████╔██║███████║██████╔╝█████═╝░█████╗░░░░░██║░░░░░░██║░░░██║░░██║█████═╝░█████╗░░██╔██╗██║\n', '██╔══╝░░██║╚██╔╝██║██╔══██║██╔══██╗██╔═██╗░██╔══╝░░░░░██║░░░░░░██║░░░██║░░██║██╔═██╗░██╔══╝░░██║╚████║\n', '███████╗██║░╚═╝░██║██║░░██║██║░░██║██║░╚██╗███████╗░░░██║░░░░░░██║░░░╚█████╔╝██║░╚██╗███████╗██║░╚███║\n', '╚══════╝╚═╝░░░░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚═╝░░╚═╝╚══════╝░░░╚═╝░░░░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝╚══════╝╚═╝░░╚══╝\n', '\n', '                \n', '// -------------------------------------------------------------------------------\n', '// eMarket Token contract with following features:\n', '//      => ERC20 Compliance;\n', '//      => Higher degree of control by owner - safeguard functionality;\n', '//      => SafeMath implementation;\n', '//      => Burnable and minting;\n', '//      => user whitelisting;\n', '//      => air drop (active and passive);\n', '//      => built-in buy/sell functions;\n', '//      => Token swap functionality (implemented for future use).\n', '//\n', '// Name        : eMarket Token\n', '// Symbol      : EFI\n', '// Total supply: 1,000,000,000 (1 Billion)\n', '// Decimals    : 18\n', '//\n', '// Special thanks to openzeppelin for inspiration: ( https://github.com/zeppelinos )\n', '// ----------------------------------------------------------------------------------\n', '*/ \n', '\n', '//*******************************************************************//\n', '//------------------------ SafeMath Library -------------------------//\n', '//*******************************************************************//\n', '/**\n', '    * @title SafeMath\n', '    * @dev Math operations with safety checks that throw on error\n', '    */\n', 'library SafeMath {\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '    uint256 c = a * b;\n', "    require(c / a == b, 'SafeMath mul failed');\n", '    return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    require(b <= a, 'SafeMath sub failed');\n", '    return a - b;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', "    require(c >= a, 'SafeMath add failed');\n", '    return c;\n', '    }\n', '}\n', '\n', '//*******************************************************************//\n', '//------------------ Contract to Manage Ownership -------------------//\n', '//*******************************************************************//\n', '    \n', 'contract owned {\n', '    address payable public owner;\n', '    address payable internal newOwner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    //this flow is to prevent accidental transfer of ownership\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner);\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', ' \n', '//****************************************************************************//\n', '//---------------------        MAIN CODE STARTS HERE     ---------------------//\n', '//****************************************************************************//\n', '    \n', 'contract eMarketToken is owned {\n', '    \n', '    /*===============================\n', '    =         DATA STORAGE          =\n', '    ===============================*/\n', '\n', '    // Public variables of the token\n', '    using SafeMath for uint256;\n', '    string constant public name = "eMarket Token";\n', '    string constant public symbol = "EFI";\n', '    uint256 constant public decimals = 18;\n', '    uint256 public totalSupply = 1000000000 * (10**decimals);   //1 billion tokens\n', '    bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n', '    bool public tokenSwap = false;  //when tokenSwap is on then all the token transfer to contract will trigger token swap\n', '\n', '    // This creates a mapping with all data storage\n', '    mapping (address => uint256) public balanceOf;\n', '    mapping (address => mapping (address => uint256)) public allowance;\n', '    mapping (address => bool) public frozenAccount;\n', '\n', '    /*===============================\n', '    =         PUBLIC EVENTS         =\n', '    ===============================*/\n', '\n', '    // This generates a public event of token transfer\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    // This notifies clients about the amount burnt\n', '    event Burn(address indexed from, uint256 value);\n', '        \n', '    // This generates a public event for frozen (blacklisting) accounts\n', '    event FrozenAccounts(address target, bool frozen);\n', '    \n', '    // This will log approval of token Transfer\n', '    event Approval(address indexed from, address indexed spender, uint256 value);\n', '\n', '    // This is for token swap\n', '    event TokenSwap(address indexed user, uint256 value);\n', '\n', '    /*======================================\n', '    =       STANDARD ERC20 FUNCTIONS       =\n', '    ======================================*/\n', '\n', '    /* Internal transfer, can only be called by this contract */\n', '    function _transfer(address _from, address _to, uint _value) internal {\n', '        \n', '        //checking conditions\n', '        require(!safeguard);\n', '        require (_to != address(0));                      // Prevent transfer to 0x0 address. Use burn() instead\n', '        require(!frozenAccount[_from]);                     // Check if sender is frozen\n', '        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n', '        \n', '        // overflow and undeflow checked by SafeMath Library\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n', '        balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n', '        \n', '        // emit Transfer event\n', '        emit Transfer(_from, _to, _value);\n', '    }\n', '\n', '    /**\n', '        * Transfer tokens\n', '        *\n', '        * Send `_value` tokens to `_to` from your account\n', '        *\n', '        * @param _to The address of the recipient\n', '        * @param _value the amount to send\n', '        */\n', '    function transfer(address _to, uint256 _value) public returns (bool success) {\n', '        //no need to check for input validations, as that is ruled by SafeMath\n', '        _transfer(msg.sender, _to, _value);\n', '        \n', '        //code for token swap\n', '        if(tokenSwap && _to == address(this)){\n', '            //fire tokenSwap event. This event can be listed by oracle and issue tokens of ethereum or another blockchain\n', '            emit TokenSwap(msg.sender, _value);\n', '        }\n', '        \n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Transfer tokens from other address\n', '        *\n', '        * Send `_value` tokens to `_to` on behalf of `_from`\n', '        *\n', '        * @param _from The address of the sender\n', '        * @param _to The address of the recipient\n', '        * @param _value the amount to send\n', '        */\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n', '        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n', '        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n', '        _transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Set allowance for other address\n', '        *\n', '        * Allows `_spender` to spend no more than `_value` tokens on your behalf\n', '        *\n', '        * @param _spender The address authorized to spend\n', '        * @param _value the max amount they can spend\n', '        */\n', '    function approve(address _spender, uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        require(balanceOf[msg.sender] >= _value, "Balance does not have enough tokens");\n', '        allowance[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    /*=====================================\n', '    =       CUSTOM PUBLIC FUNCTIONS       =\n', '    ======================================*/\n', '    \n', '    constructor() public{\n', '        //sending all the tokens to Owner\n', '        balanceOf[owner] = totalSupply;\n', '        \n', '        //firing event which logs this transaction\n', '        emit Transfer(address(0), owner, totalSupply);\n', '    }\n', '    \n', '    function () external payable {\n', '        \n', '        buyTokens();\n', '    }\n', '\n', '    /**\n', '        * Destroy tokens\n', '        *\n', '        * Remove `_value` tokens from the system irreversibly\n', '        *\n', '        * @param _value the amount of tokens to burn\n', '        */\n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        //checking of enough token balance is done by SafeMath\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);  // Subtract from the sender\n', '        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n', '        emit Burn(msg.sender, _value);\n', '        emit Transfer(msg.sender, address(0), _value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * Destroy tokens from other account\n', '        *\n', '        * Remove `_value` tokens from the system irreversibly on behalf of `_from`\n', '        *\n', '        * @param _from the address of the sender\n', '        * @param _value the amount of tokens to burn\n', '        */\n', '    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n', '        require(!safeguard);\n', '        //checking of allowance and token value is done by SafeMath\n', '        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n', "        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value); // Subtract from the sender's allowance\n", '        totalSupply = totalSupply.sub(_value);                                   // Update totalSupply\n', '        emit  Burn(_from, _value);\n', '        emit Transfer(_from, address(0), _value);\n', '        return true;\n', '    }\n', '        \n', '    /** \n', '        * @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n', '        * @param target Address to be frozen\n', '        * @param freeze either to freeze it or not\n', '        */\n', '    function freezeAccount(address target, bool freeze) onlyOwner public {\n', '            frozenAccount[target] = freeze;\n', '        emit  FrozenAccounts(target, freeze);\n', '    }\n', '    \n', '    /** \n', '        * @notice Create `mintedAmount` tokens and send it to `target`\n', '        * @param target Address to receive the tokens\n', '        * @param mintedAmount the amount of tokens it will receive\n', '        */\n', '    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n', '        balanceOf[target] = balanceOf[target].add(mintedAmount);\n', '        totalSupply = totalSupply.add(mintedAmount);\n', '        emit Transfer(address(0), target, mintedAmount);\n', '    }\n', '\n', '    /**\n', '        * Owner can transfer tokens from contract to owner address\n', '        *\n', '        * When safeguard is true, then all the non-owner functions will stop working.\n', '        * When safeguard is false, then all the functions will resume working!\n', '        */\n', '    \n', '    function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\n', '        // no need for overflow checking as that will be done in transfer function\n', '        _transfer(address(this), owner, tokenAmount);\n', '    }\n', '    \n', '    //Just in rare case, owner wants to transfer Ether from contract to owner address\n', '    function manualWithdrawEther()onlyOwner public{\n', '        address(owner).transfer(address(this).balance);\n', '    }\n', '    \n', '    /**\n', '        * Change safeguard status on or off\n', '        *\n', '        * When safeguard is true, then all the non-owner functions will stop working.\n', '        * When safeguard is false, then all the functions will resume working!\n', '        */\n', '    function changeSafeguardStatus() onlyOwner public{\n', '        if (safeguard == false){\n', '            safeguard = true;\n', '        }\n', '        else{\n', '            safeguard = false;    \n', '        }\n', '    }\n', '    \n', '    /**\n', '     * This function allows admins to start or stop token swaps\n', '     */\n', '    function changeTokenSwapStatus() public onlyOwner{\n', '        if (tokenSwap == false){\n', '            tokenSwap = true;\n', '        }\n', '        else{\n', '            tokenSwap = false;    \n', '        }\n', '    }\n', '    \n', '    /*************************************/\n', '    /*    Section for User Airdrop      */\n', '    /*************************************/\n', '    \n', '    bool public passiveAirdropStatus;\n', '    uint256 public passiveAirdropTokensAllocation;\n', '    uint256 public airdropAmount;  //in wei\n', '    uint256 public passiveAirdropTokensSold;\n', '    mapping(uint256 => mapping(address => bool)) public airdropClaimed;\n', '    uint256 internal airdropClaimedIndex;\n', '    uint256 public airdropFee = 0.05 ether;\n', '    \n', '    /**\n', '     * This function is to start a passive airdrop by admin only\n', '     * Admin have to put airdrop amount (in wei) and total tokens allocated for it\n', '     * Admin must keep allocated tokens in the contract\n', '     */\n', '    function startNewPassiveAirDrop(uint256 passiveAirdropTokensAllocation_, uint256 airdropAmount_  ) public onlyOwner {\n', '        passiveAirdropTokensAllocation = passiveAirdropTokensAllocation_;\n', '        airdropAmount = airdropAmount_;\n', '        passiveAirdropStatus = true;\n', '    } \n', '    \n', '    /**\n', '     * This function will stop any ongoing passive airdrop\n', '     */\n', '    function stopPassiveAirDropCompletely() public onlyOwner{\n', '        passiveAirdropTokensAllocation = 0;\n', '        airdropAmount = 0;\n', '        airdropClaimedIndex++;\n', '        passiveAirdropStatus = false;\n', '    }\n', '    \n', '    /**\n', '     * This function called by user who want to claim passive airdrop\n', '     * Users can only claim airdrop once, for current airdrop. If admin stops an airdrop and starts another, then users can claim again (once only).\n', '     */\n', '    function claimPassiveAirdrop() public payable returns(bool) {\n', "        require(airdropAmount > 0, 'Token amount must not be zero');\n", "        require(passiveAirdropStatus, 'Airdrop is not active');\n", "        require(passiveAirdropTokensSold <= passiveAirdropTokensAllocation, 'Airdrop sold out');\n", "        require(!airdropClaimed[airdropClaimedIndex][msg.sender], 'user claimed airdrop already');\n", "        require(!isContract(msg.sender),  'No contract address allowed to claim airdrop');\n", "        require(msg.value >= airdropFee, 'Not enough ether to claim this airdrop');\n", '        \n', '        _transfer(address(this), msg.sender, airdropAmount);\n', '        passiveAirdropTokensSold += airdropAmount;\n', '        airdropClaimed[airdropClaimedIndex][msg.sender] = true; \n', '        return true;\n', '    }\n', '    \n', '    /**\n', '     * This function allows admin to change the amount users will be getting while claiming airdrop\n', '     */\n', '    function changePassiveAirdropAmount(uint256 newAmount) public onlyOwner{\n', '        airdropAmount = newAmount;\n', '    }\n', '    \n', '    /**\n', '     * This function checks if given address is a contract address or normal wallet\n', '     */\n', '    function isContract(address _address) public view returns (bool){\n', '        uint32 size;\n', '        assembly {\n', '            size := extcodesize(_address)\n', '        }\n', '        return (size > 0);\n', '    }\n', '    \n', '    /**\n', '     * This function allows admin to update airdrop fee. He can put zero as well if no fee to be charged\n', '     */\n', '    function updateAirdropFee(uint256 newFee) public onlyOwner{\n', '        airdropFee = newFee;\n', '    }\n', '    \n', '    /**\n', '     * Run an ACTIVE Airdrop\n', '     *\n', '     * It requires an array of all the addresses and amount of tokens to distribute\n', '     * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n', '     */\n', '    function airdropACTIVE(address[] memory recipients,uint256 tokenAmount) public onlyOwner {\n', '        require(recipients.length <= 150);\n', '        uint256 totalAddresses = recipients.length;\n', '        for(uint i = 0; i < totalAddresses; i++)\n', '        {\n', '          //This will loop through all the recipients and send them the specified tokens\n', '          //Input data validation is unncessary, as that is done by SafeMath and which also saves some gas\n', '          _transfer(address(this), recipients[i], tokenAmount);\n', '        }\n', '    }\n', '    \n', '    /*************************************/\n', '    /*  Section for User whitelisting    */\n', '    /*************************************/\n', '    bool public whitelistingStatus;\n', '    mapping (address => bool) public whitelisted;\n', '    \n', '    /**\n', '     * Change whitelisting status on or off\n', '     *\n', '     * When whitelisting is true, then crowdsale will only accept investors who are whitelisted\n', '     */\n', '    function changeWhitelistingStatus() onlyOwner public{\n', '        if (whitelistingStatus == false){\n', '            whitelistingStatus = true;\n', '        }\n', '        else{\n', '            whitelistingStatus = false;    \n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Whitelist any user address - only Owner can do this\n', '     *\n', '     * It will add user address in whitelisted mapping\n', '     */\n', '    function whitelistUser(address userAddress) onlyOwner public{\n', '        require(whitelistingStatus == true);\n', '        require(userAddress != address(0));\n', '        whitelisted[userAddress] = true;\n', '    }\n', '    \n', '    /**\n', '     * Whitelist Many user address at once - only Owner can do this\n', '     * It will require maximum of 150 addresses to prevent block gas limit max-out and DoS attack\n', '     * It will add user address in whitelisted mapping\n', '     */\n', '    function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\n', '        require(whitelistingStatus == true);\n', '        uint256 addressCount = userAddresses.length;\n', '        require(addressCount <= 150);\n', '        for(uint256 i = 0; i < addressCount; i++){\n', '            whitelisted[userAddresses[i]] = true;\n', '        }\n', '    }\n', '    \n', '    /*************************************/\n', '    /*  Section for Buy/Sell of tokens   */\n', '    /*************************************/\n', '    \n', '    uint256 public sellPrice;\n', '    uint256 public buyPrice;\n', '    \n', '    /** \n', '     * Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n', '     * newSellPrice Price the users can sell to the contract\n', '     * newBuyPrice Price users can buy from the contract\n', '     */\n', '    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n', '        sellPrice = newSellPrice;   //sellPrice is 1 Token = ?? WEI\n', '        buyPrice = newBuyPrice;     //buyPrice is 1 ETH = ?? Tokens\n', '    }\n', '\n', '    /**\n', '     * Buy tokens from contract by sending ether\n', '     * buyPrice is 1 ETH = ?? Tokens\n', '     */\n', '    \n', '    function buyTokens() payable public {\n', '        uint amount = msg.value * buyPrice;                 // calculates the amount\n', '        _transfer(address(this), msg.sender, amount);       // makes the transfers\n', '    }\n', '\n', '    /**\n', '     * Sell `amount` tokens to contract\n', '     * amount of tokens to be sold\n', '     */\n', '    function sellTokens(uint256 amount) public {\n', '        uint256 etherAmount = amount * sellPrice/(10**decimals);\n', '        require(address(this).balance >= etherAmount);   // checks if the contract has enough ether to buy\n', '        _transfer(msg.sender, address(this), amount);           // makes the transfers\n', "        msg.sender.transfer(etherAmount);                // sends ether to the seller. It's important to do this last to avoid recursion attacks\n", '    }\n', '}']