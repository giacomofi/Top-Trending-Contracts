['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-13\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.5 https://hardhat.org\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File interfaces/curve/ICurveGauge.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICurveGauge {\n', '    function deposit(uint256 _value) external;\n', '\n', '    function deposit(uint256 _value, address addr) external;\n', '\n', '    function balanceOf(address arg0) external view returns (uint256);\n', '\n', '    function withdraw(uint256 _value) external;\n', '\n', '    function withdraw(uint256 _value, bool claim_rewards) external;\n', '\n', '    function claim_rewards() external;\n', '\n', '    function claim_rewards(address addr) external;\n', '\n', '    function claimable_tokens(address addr) external view returns (uint256);\n', '\n', '    function claimable_reward(address addr) external view returns (uint256);\n', '\n', '    function integrate_fraction(address arg0) external view returns (uint256);\n', '}\n', '\n', '\n', '// File interfaces/curve/ICurveMintr.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICurveMintr {\n', '    function mint(address) external;\n', '\n', '    function minted(address arg0, address arg1) external view returns (uint256);\n', '}\n', '\n', '\n', '// File interfaces/curve/ICurveFi.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICurveFi {\n', '    function get_virtual_price() external view returns (uint256 out);\n', '\n', '    function add_liquidity(\n', '        // renbtc/tbtc pool\n', '        uint256[2] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // sBTC pool\n', '        uint256[3] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // bUSD pool\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '\n', '    function get_dy(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external returns (uint256 out);\n', '\n', '    function get_dy_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external returns (uint256 out);\n', '\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external;\n', '\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function exchange_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external;\n', '\n', '    function exchange_underlying(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function remove_liquidity(\n', '        uint256 _amount,\n', '        uint256 deadline,\n', '        uint256[2] calldata min_amounts\n', '    ) external;\n', '\n', '    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 deadline) external;\n', '\n', '    function remove_liquidity_imbalance(uint256[3] calldata amounts, uint256 max_burn_amount) external;\n', '\n', '    function remove_liquidity(uint256 _amount, uint256[3] calldata amounts) external;\n', '\n', '    function remove_liquidity_imbalance(uint256[4] calldata amounts, uint256 max_burn_amount) external;\n', '\n', '    function remove_liquidity(uint256 _amount, uint256[4] calldata amounts) external;\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amount,\n', '        int128 i,\n', '        uint256 _min_amount\n', '    ) external;\n', '\n', '    function commit_new_parameters(\n', '        int128 amplification,\n', '        int128 new_fee,\n', '        int128 new_admin_fee\n', '    ) external;\n', '\n', '    function apply_new_parameters() external;\n', '\n', '    function revert_new_parameters() external;\n', '\n', '    function commit_transfer_ownership(address _owner) external;\n', '\n', '    function apply_transfer_ownership() external;\n', '\n', '    function revert_transfer_ownership() external;\n', '\n', '    function withdraw_admin_fees() external;\n', '\n', '    function coins(int128 arg0) external returns (address out);\n', '\n', '    function underlying_coins(int128 arg0) external returns (address out);\n', '\n', '    function balances(int128 arg0) external returns (uint256 out);\n', '\n', '    function A() external returns (int128 out);\n', '\n', '    function fee() external returns (int128 out);\n', '\n', '    function admin_fee() external returns (int128 out);\n', '\n', '    function owner() external returns (address out);\n', '\n', '    function admin_actions_deadline() external returns (uint256 out);\n', '\n', '    function transfer_ownership_deadline() external returns (uint256 out);\n', '\n', '    function future_A() external returns (int128 out);\n', '\n', '    function future_fee() external returns (int128 out);\n', '\n', '    function future_admin_fee() external returns (int128 out);\n', '\n', '    function future_owner() external returns (address out);\n', '\n', '    function calc_withdraw_one_coin(uint256 _token_amount, int128 _i) external view returns (uint256 out);\n', '}\n', '\n', '\n', '// File interfaces/curve/ICurveExchange.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface ICurveExchange {\n', '    function exchange(\n', '        int128 i,\n', '        int128 j,\n', '        uint256 dx,\n', '        uint256 min_dy\n', '    ) external;\n', '\n', '    function get_dy(\n', '        int128,\n', '        int128 j,\n', '        uint256 dx\n', '    ) external view returns (uint256);\n', '\n', '    function calc_token_amount(uint256[2] calldata amounts, bool deposit) external view returns (uint256 amount);\n', '\n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount) external;\n', '\n', '    function remove_liquidity(uint256 _amount, uint256[2] calldata min_amounts) external;\n', '\n', '    function remove_liquidity_imbalance(uint256[2] calldata amounts, uint256 max_burn_amount) external;\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amounts,\n', '        int128 i,\n', '        uint256 min_amount\n', '    ) external;\n', '}\n', '\n', 'interface ICurveRegistryAddressProvider {\n', '    function get_address(uint256 id) external returns (address);\n', '}\n', '\n', 'interface ICurveRegistryExchange {\n', '    function get_best_rate(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) external view returns (address, uint256);\n', '\n', '    function exchange(\n', '        address pool,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 expected,\n', '        address receiver\n', '    ) external payable returns (uint256);\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/math/MathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library MathUpgradeable {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File interfaces/uniswap/IUniswapRouterV2.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IUniswapRouterV2 {\n', '    function factory() external view returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', '\n', '// File interfaces/badger/IController.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '\n', '    function strategies(address) external view returns (address);\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function earn(address, uint256) external;\n', '\n', '    function want(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function vaults(address) external view returns (address);\n', '}\n', '\n', '\n', '// File interfaces/badger/IStrategy.sol\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IStrategy {\n', '    function want() external view returns (address);\n', '\n', '    function deposit() external;\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address) external returns (uint256 balance);\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdraw(uint256) external;\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdrawAll() external returns (uint256);\n', '\n', '    function balanceOf() external view returns (uint256);\n', '\n', '    function getName() external pure returns (string memory);\n', '\n', '    function setStrategist(address _strategist) external;\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external;\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\n', '\n', '    function setGovernance(address _governance) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function tend() external;\n', '\n', '    function harvest() external;\n', '}\n', '\n', '\n', '// File contracts/badger-sett/SettAccessControl.sol\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', '\n', '/*\n', '    Common base for permissioned roles throughout Sett ecosystem\n', '*/\n', 'contract SettAccessControl is Initializable {\n', '    address public governance;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    // ===== MODIFIERS =====\n', '    function _onlyGovernance() internal view {\n', '        require(msg.sender == governance, "onlyGovernance");\n', '    }\n', '\n', '    function _onlyGovernanceOrStrategist() internal view {\n', '        require(msg.sender == strategist || msg.sender == governance, "onlyGovernanceOrStrategist");\n', '    }\n', '\n', '    function _onlyAuthorizedActors() internal view {\n', '        require(msg.sender == keeper || msg.sender == governance, "onlyAuthorizedActors");\n', '    }\n', '\n', '    // ===== PERMISSIONED ACTIONS =====\n', '\n', '    /// @notice Change strategist address\n', '    /// @notice Can only be changed by governance itself\n', '    function setStrategist(address _strategist) external {\n', '        _onlyGovernance();\n', '        strategist = _strategist;\n', '    }\n', '\n', '    /// @notice Change keeper address\n', '    /// @notice Can only be changed by governance itself\n', '    function setKeeper(address _keeper) external {\n', '        _onlyGovernance();\n', '        keeper = _keeper;\n', '    }\n', '\n', '    /// @notice Change governance address\n', '    /// @notice Can only be changed by governance itself\n', '    function setGovernance(address _governance) public {\n', '        _onlyGovernance();\n', '        governance = _governance;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/badger-sett/strategies/BaseStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/*\n', '    ===== Badger Base Strategy =====\n', '    Common base class for all Sett strategies\n', '\n', '    Changelog\n', '    V1.1\n', '    - Verify amount unrolled from strategy positions on withdraw() is within a threshold relative to the requested amount as a sanity check\n', '    - Add version number which is displayed with baseStrategyVersion(). If a strategy does not implement this function, it can be assumed to be 1.0\n', '\n', '    V1.2\n', '    - Remove idle want handling from base withdraw() function. This should be handled as the strategy sees fit in _withdrawSome()\n', '*/\n', 'abstract contract BaseStrategy is PausableUpgradeable, SettAccessControl {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    event Withdraw(uint256 amount);\n', '    event WithdrawAll(uint256 balance);\n', '    event WithdrawOther(address token, uint256 amount);\n', '    event SetStrategist(address strategist);\n', '    event SetGovernance(address governance);\n', '    event SetController(address controller);\n', '    event SetWithdrawalFee(uint256 withdrawalFee);\n', '    event SetPerformanceFeeStrategist(uint256 performanceFeeStrategist);\n', '    event SetPerformanceFeeGovernance(uint256 performanceFeeGovernance);\n', '    event Harvest(uint256 harvested, uint256 indexed blockNumber);\n', '    event Tend(uint256 tended);\n', '\n', '    address public want; // Want: Curve.fi renBTC/wBTC (crvRenWBTC) LP token\n', '\n', '    uint256 public performanceFeeGovernance;\n', '    uint256 public performanceFeeStrategist;\n', '    uint256 public withdrawalFee;\n', '\n', '    uint256 public constant MAX_FEE = 10000;\n', '    address public constant uniswap = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D; // Uniswap Dex\n', '\n', '    address public controller;\n', '    address public guardian;\n', '\n', '    uint256 public withdrawalMaxDeviationThreshold;\n', '\n', '    function __BaseStrategy_init(\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _keeper,\n', '        address _guardian\n', '    ) public initializer whenNotPaused {\n', '        __Pausable_init();\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        keeper = _keeper;\n', '        controller = _controller;\n', '        guardian = _guardian;\n', '        withdrawalMaxDeviationThreshold = 50;\n', '    }\n', '\n', '    // ===== Modifiers =====\n', '\n', '    function _onlyController() internal view {\n', '        require(msg.sender == controller, "onlyController");\n', '    }\n', '\n', '    function _onlyAuthorizedActorsOrController() internal view {\n', '        require(msg.sender == keeper || msg.sender == governance || msg.sender == controller, "onlyAuthorizedActorsOrController");\n', '    }\n', '\n', '    function _onlyAuthorizedPausers() internal view {\n', '        require(msg.sender == guardian || msg.sender == governance, "onlyPausers");\n', '    }\n', '\n', '    /// ===== View Functions =====\n', '    function baseStrategyVersion() public view returns (string memory) {\n', '        return "1.2";\n', '    }\n', '\n', '    /// @notice Get the balance of want held idle in the Strategy\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20Upgradeable(want).balanceOf(address(this));\n', '    }\n', '\n', '    /// @notice Get the total balance of want realized in the strategy, whether idle or active in Strategy positions.\n', '    function balanceOf() public virtual view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    function isTendable() public virtual view returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Governance =====\n', '\n', '    function setGuardian(address _guardian) external {\n', '        _onlyGovernance();\n', '        guardian = _guardian;\n', '    }\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external {\n', '        _onlyGovernance();\n', '        require(_withdrawalFee <= MAX_FEE, "base-strategy/excessive-withdrawal-fee");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external {\n', '        _onlyGovernance();\n', '        require(_performanceFeeStrategist <= MAX_FEE, "base-strategy/excessive-strategist-performance-fee");\n', '        performanceFeeStrategist = _performanceFeeStrategist;\n', '    }\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external {\n', '        _onlyGovernance();\n', '        require(_performanceFeeGovernance <= MAX_FEE, "base-strategy/excessive-governance-performance-fee");\n', '        performanceFeeGovernance = _performanceFeeGovernance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        _onlyGovernance();\n', '        controller = _controller;\n', '    }\n', '\n', '    function setWithdrawalMaxDeviationThreshold(uint256 _threshold) external {\n', '        _onlyGovernance();\n', '        require(_threshold <= MAX_FEE, "base-strategy/excessive-max-deviation-threshold");\n', '        withdrawalMaxDeviationThreshold = _threshold;\n', '    }\n', '\n', '    function deposit() public virtual whenNotPaused {\n', '        _onlyAuthorizedActorsOrController();\n', '        uint256 _want = IERC20Upgradeable(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            _deposit(_want);\n', '        }\n', '        _postDeposit();\n', '    }\n', '\n', '    // ===== Permissioned Actions: Controller =====\n', '\n', '    /// @notice Controller-only function to Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdrawAll() external virtual whenNotPaused returns (uint256 balance) {\n', '        _onlyController();\n', '\n', '        _withdrawAll();\n', '\n', '        _transferToVault(IERC20Upgradeable(want).balanceOf(address(this)));\n', '    }\n', '\n', '    /// @notice Withdraw partial funds from the strategy, unrolling from strategy positions as necessary\n', '    /// @notice Processes withdrawal fee if present\n', '    /// @dev If it fails to recover sufficient funds (defined by withdrawalMaxDeviationThreshold), the withdrawal should fail so that this unexpected behavior can be investigated\n', '    function withdraw(uint256 _amount) external virtual whenNotPaused {\n', '        _onlyController();\n', '\n', '        // Withdraw from strategy positions, typically taking from any idle want first.\n', '        _withdrawSome(_amount);\n', '        uint256 _postWithdraw = IERC20Upgradeable(want).balanceOf(address(this));\n', '\n', '        // Sanity check: Ensure we were able to retrieve sufficent want from strategy positions\n', '        // If we end up with less than the amount requested, make sure it does not deviate beyond a maximum threshold\n', '        if (_postWithdraw < _amount) {\n', '            uint256 diff = _diff(_amount, _postWithdraw);\n', '\n', '            // Require that difference between expected and actual values is less than the deviation threshold percentage\n', '            require(diff <= _amount.mul(withdrawalMaxDeviationThreshold).div(MAX_FEE), "base-strategy/withdraw-exceed-max-deviation-threshold");\n', '        }\n', '\n', '        // Return the amount actually withdrawn if less than amount requested\n', '        uint256 _toWithdraw = MathUpgradeable.min(_postWithdraw, _amount);\n', '\n', '        // Process withdrawal fee\n', '        uint256 _fee = _processWithdrawalFee(_toWithdraw);\n', '\n', '        // Transfer remaining to Vault to handle withdrawal\n', '        _transferToVault(_toWithdraw.sub(_fee));\n', '    }\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address _asset) external virtual whenNotPaused returns (uint256 balance) {\n', '        _onlyController();\n', '        _onlyNotProtectedTokens(_asset);\n', '\n', '        balance = IERC20Upgradeable(_asset).balanceOf(address(this));\n', '        IERC20Upgradeable(_asset).safeTransfer(controller, balance);\n', '    }\n', '\n', '    /// ===== Permissioned Actions: Authoized Contract Pausers =====\n', '\n', '    function pause() external {\n', '        _onlyAuthorizedPausers();\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external {\n', '        _onlyGovernance();\n', '        _unpause();\n', '    }\n', '\n', '    /// ===== Internal Helper Functions =====\n', '\n', '    /// @notice If withdrawal fee is active, take the appropriate amount from the given value and transfer to rewards recipient\n', '    /// @return The withdrawal fee that was taken\n', '    function _processWithdrawalFee(uint256 _amount) internal returns (uint256) {\n', '        if (withdrawalFee == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 fee = _amount.mul(withdrawalFee).div(MAX_FEE);\n', '        IERC20Upgradeable(want).safeTransfer(IController(controller).rewards(), fee);\n', '        return fee;\n', '    }\n', '\n', '    /// @dev Helper function to process an arbitrary fee\n', '    /// @dev If the fee is active, transfers a given portion in basis points of the specified value to the recipient\n', '    /// @return The fee that was taken\n', '    function _processFee(\n', '        address token,\n', '        uint256 amount,\n', '        uint256 feeBps,\n', '        address recipient\n', '    ) internal returns (uint256) {\n', '        if (feeBps == 0) {\n', '            return 0;\n', '        }\n', '        uint256 fee = amount.mul(feeBps).div(MAX_FEE);\n', '        IERC20Upgradeable(token).safeTransfer(recipient, fee);\n', '        return fee;\n', '    }\n', '\n', '    /// @dev Reset approval and approve exact amount\n', '    function _safeApproveHelper(\n', '        address token,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        IERC20Upgradeable(token).safeApprove(recipient, 0);\n', '        IERC20Upgradeable(token).safeApprove(recipient, amount);\n', '    }\n', '\n', '    function _transferToVault(uint256 _amount) internal {\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20Upgradeable(want).safeTransfer(_vault, _amount);\n', '    }\n', '\n', '    /// @notice Swap specified balance of given token on Uniswap with given path\n', '    function _swap(\n', '        address startToken,\n', '        uint256 balance,\n', '        address[] memory path\n', '    ) internal {\n', '        _safeApproveHelper(startToken, uniswap, balance);\n', '        IUniswapRouterV2(uniswap).swapExactTokensForTokens(balance, 0, path, address(this), now);\n', '    }\n', '\n', '    function _swapEthIn(uint256 balance, address[] memory path) internal {\n', '        IUniswapRouterV2(uniswap).swapExactETHForTokens{value: balance}(0, path, address(this), now);\n', '    }\n', '\n', '    function _swapEthOut(\n', '        address startToken,\n', '        uint256 balance,\n', '        address[] memory path\n', '    ) internal {\n', '        _safeApproveHelper(startToken, uniswap, balance);\n', '        IUniswapRouterV2(uniswap).swapExactTokensForETH(balance, 0, path, address(this), now);\n', '    }\n', '\n', '    /// @notice Add liquidity to uniswap for specified token pair, utilizing the maximum balance possible\n', '    function _add_max_liquidity_uniswap(address token0, address token1) internal virtual {\n', '        uint256 _token0Balance = IERC20Upgradeable(token0).balanceOf(address(this));\n', '        uint256 _token1Balance = IERC20Upgradeable(token1).balanceOf(address(this));\n', '\n', '        _safeApproveHelper(token0, uniswap, _token0Balance);\n', '        _safeApproveHelper(token1, uniswap, _token1Balance);\n', '\n', '        IUniswapRouterV2(uniswap).addLiquidity(token0, token1, _token0Balance, _token1Balance, 0, 0, address(this), block.timestamp);\n', '    }\n', '\n', '    /// @notice Utility function to diff two numbers, expects higher value in first position\n', '    function _diff(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(a >= b, "diff/expected-higher-number-in-first-position");\n', '        return a.sub(b);\n', '    }\n', '\n', '    // ===== Abstract Functions: To be implemented by specific Strategies =====\n', '\n', '    /// @dev Internal deposit logic to be implemented by Stratgies\n', '    function _deposit(uint256 _want) internal virtual;\n', '\n', '    function _postDeposit() internal virtual {\n', '        //no-op by default\n', '    }\n', '\n', '    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\n', '    function _onlyNotProtectedTokens(address _asset) internal virtual;\n', '\n', '    function getProtectedTokens() external virtual view returns (address[] memory);\n', '\n', '    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\n', '    function _withdrawAll() internal virtual;\n', '\n', '    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\n', '    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\n', '    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\n', '\n', '    /// @dev Realize returns from positions\n', '    /// @dev Returns can be reinvested into positions, or distributed in another fashion\n', '    /// @dev Performance fees should also be implemented in this function\n', "    /// @dev Override function stub is removed as each strategy can have it's own return signature for STATICCALL\n", '    // function harvest() external virtual;\n', '\n', '    /// @dev User-friendly name for this strategy for purposes of convenient reading\n', '    function getName() external virtual pure returns (string memory);\n', '\n', '    /// @dev Balance of want currently held in strategy positions\n', '    function balanceOfPool() public virtual view returns (uint256);\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File interfaces/unitprotocol/IUnitProtocol.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IUnitVaultParameters {\n', '    function tokenDebtLimit(address asset) external view returns (uint256);\n', '}\n', '\n', 'interface IUnitVault {\n', '    function calculateFee(\n', '        address asset,\n', '        address user,\n', '        uint256 amount\n', '    ) external view returns (uint256);\n', '\n', '    function getTotalDebt(address asset, address user) external view returns (uint256);\n', '\n', '    function debts(address asset, address user) external view returns (uint256);\n', '\n', '    function collaterals(address asset, address user) external view returns (uint256);\n', '\n', '    function tokenDebts(address asset) external view returns (uint256);\n', '}\n', '\n', 'interface IUnitCDPManager {\n', '    function exit(\n', '        address asset,\n', '        uint256 assetAmount,\n', '        uint256 usdpAmount\n', '    ) external returns (uint256);\n', '\n', '    function join(\n', '        address asset,\n', '        uint256 assetAmount,\n', '        uint256 usdpAmount\n', '    ) external;\n', '\t\n', '    function oracleRegistry() external view returns (address);\n', '}\n', '\n', 'interface IUnitUsdOracle {\n', '    // returns Q112-encoded value\n', '    // returned value 10**18 * 2**112 is $1\n', '    function assetToUsd(address asset, uint amount) external view returns (uint);\n', '}\n', '\n', 'interface IUnitOracleRegistry {\n', '    function oracleByAsset(address asset) external view returns (address);\n', '}\n', '\n', '\n', '// File interfaces/chainlink/IChainlink.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IChainlinkAggregator {\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound\n', '        );\n', '\n', '    function getRoundData(uint80 _roundId)\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer,\n', '            uint256 startedAt,\n', '            uint256 updatedAt,\n', '            uint80 answeredInRound\n', '        );\n', '}\n', '\n', '\n', '// File contracts/badger-sett/strategies/unitprotocol/StrategyUnitProtocolMeta.sol\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'abstract contract StrategyUnitProtocolMeta is BaseStrategy {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    // Unit Protocol module: https://github.com/unitprotocol/core/blob/master/CONTRACTS.md\n', '    address public constant cdpMgr01 = 0x0e13ab042eC5AB9Fc6F43979406088B9028F66fA;\n', '    address public constant unitVault = 0xb1cFF81b9305166ff1EFc49A129ad2AfCd7BCf19;\n', '    address public constant unitVaultParameters = 0xB46F8CF42e504Efe8BEf895f848741daA55e9f1D;\n', '    address public constant debtToken = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\n', '    address public constant eth_usd = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n', '    bool public useUnitUsdOracle = true;\n', '\n', '    // sub-strategy related constants\n', '    address public collateral;\n', '    uint256 public collateralDecimal = 1e18;\n', '    address public unitOracle;\n', '    uint256 public collateralPriceDecimal = 1;\n', '    bool public collateralPriceEth = false;\n', '\n', '    // configurable minimum collateralization percent this strategy would hold for CDP\n', '    uint256 public minRatio = 200;\n', '    // collateralization percent buffer in CDP debt actions\n', '    uint256 public ratioBuff = 200;\n', '    uint256 public constant ratioBuffMax = 10000;\n', '    // used as dust to avoid closing out a debt repayment\n', '    uint256 public dustMinDebt = 10000;\n', '    uint256 public constant Q112 = 2**112;\n', '\n', '    // **** Modifiers **** //\n', '\n', '    function _onlyCDPInUse() internal view {\n', '        uint256 collateralAmt = getCollateralBalance();\n', '        require(collateralAmt > 0, "!zeroCollateral");\n', '\n', '        uint256 debtAmt = getDebtBalance();\n', '        require(debtAmt > 0, "!zeroDebt");\n', '    }\n', '\n', '    // **** Getters ****\n', '\n', '    function getCollateralBalance() public view returns (uint256) {\n', '        return IUnitVault(unitVault).collaterals(collateral, address(this));\n', '    }\n', '\n', '    function getDebtBalance() public view returns (uint256) {\n', '        return IUnitVault(unitVault).getTotalDebt(collateral, address(this));\n', '    }\n', '\n', '    function getDebtWithoutFee() public view returns (uint256) {\n', '        return IUnitVault(unitVault).debts(collateral, address(this));\n', '    }\n', '\n', '    function debtLimit() public view returns (uint256) {\n', '        return IUnitVaultParameters(unitVaultParameters).tokenDebtLimit(collateral);\n', '    }\n', '\n', '    function debtUsed() public view returns (uint256) {\n', '        return IUnitVault(unitVault).tokenDebts(collateral);\n', '    }\n', '\n', '    /// @dev Balance of want currently held in strategy positions\n', '    function balanceOfPool() public override view returns (uint256) {\n', '        return getCollateralBalance();\n', '    }\n', '\n', '    function collateralValue(uint256 collateralAmt) public view returns (uint256) {\n', '        uint256 collateralPrice = getLatestCollateralPrice();\n', '        return collateralAmt.mul(collateralPrice).mul(1e18).div(collateralDecimal).div(collateralPriceDecimal); // debtToken in 1e18 decimal\n', '    }\n', '\n', '    function currentRatio() public view returns (uint256) {\n', '        _onlyCDPInUse();\n', '        uint256 collateralAmt = collateralValue(getCollateralBalance()).mul(100);\n', '        uint256 debtAmt = getDebtBalance();\n', '        return collateralAmt.div(debtAmt);\n', '    }\n', '\n', '    // if borrow is true (for addCollateralAndBorrow): return (maxDebt - currentDebt) if positive value, otherwise return 0\n', '    // if borrow is false (for repayAndRedeemCollateral): return (currentDebt - maxDebt) if positive value, otherwise return 0\n', '    function calculateDebtFor(uint256 collateralAmt, bool borrow) public view returns (uint256) {\n', '        uint256 maxDebt = collateralAmt > 0? collateralValue(collateralAmt).mul(ratioBuffMax).div(_getBufferedMinRatio(ratioBuffMax)) : 0;\n', '\n', '        uint256 debtAmt = getDebtBalance();\n', '\n', '        uint256 debt = 0;\n', '\n', '        if (borrow && maxDebt >= debtAmt) {\n', '            debt = maxDebt.sub(debtAmt);\n', '        } else if (!borrow && debtAmt >= maxDebt) {\n', '            debt = debtAmt.sub(maxDebt);\n', '        }\n', '\n', '        return (debt > 0) ? debt : 0;\n', '    }\n', '\n', '    function _getBufferedMinRatio(uint256 _multiplier) internal view returns (uint256) {\n', '        require(ratioBuffMax > 0, "!ratioBufferMax");\n', '        require(minRatio > 0, "!minRatio");\n', '        return minRatio.mul(_multiplier).mul(ratioBuffMax.add(ratioBuff)).div(ratioBuffMax).div(100);\n', '    }\n', '\n', '    function borrowableDebt() public view returns (uint256) {\n', '        uint256 collateralAmt = getCollateralBalance();\n', '        return calculateDebtFor(collateralAmt, true);\n', '    }\n', '\n', '    function requiredPaidDebt(uint256 _redeemCollateralAmt) public view returns (uint256) {\n', '        uint256 totalCollateral = getCollateralBalance();\n', '        uint256 collateralAmt = _redeemCollateralAmt >= totalCollateral? 0 : totalCollateral.sub(_redeemCollateralAmt);\n', '        return calculateDebtFor(collateralAmt, false);\n', '    }\n', '\n', '    // **** sub-strategy implementation ****\n', '    function _depositUSDP(uint256 _usdpAmt) internal virtual;\n', '\n', '    function _withdrawUSDP(uint256 _usdpAmt) internal virtual;\n', '\n', '    // **** Oracle (using chainlink) ****\n', '\n', '    function getLatestCollateralPrice() public view returns (uint256) {\n', '        if (useUnitUsdOracle){\n', '            address unitOracleRegistry = IUnitCDPManager(cdpMgr01).oracleRegistry();\n', '            address unitUsdOracle = IUnitOracleRegistry(unitOracleRegistry).oracleByAsset(collateral);\n', '            uint usdPriceInQ122 = IUnitUsdOracle(unitUsdOracle).assetToUsd(collateral, collateralDecimal);\n', '            return uint256(usdPriceInQ122 / Q112).mul(collateralPriceDecimal).div(1e18);// usd price from unit protocol oracle in 1e18 decimal\t\t\n', '        }\n', '\t\n', '        require(unitOracle != address(0), "!_collateralOracle");\n', '\n', '        (, int256 price, , , ) = IChainlinkAggregator(unitOracle).latestRoundData();\n', '\n', '        if (price > 0) {\n', '            if (collateralPriceEth) {\n', '                (, int256 ethPrice, , , ) = IChainlinkAggregator(eth_usd).latestRoundData(); // eth price from chainlink in 1e8 decimal\n', '                return uint256(price).mul(collateralPriceDecimal).mul(uint256(ethPrice)).div(1e8).div(collateralPriceEth ? 1e18 : 1);\n', '            } else{\n', '                return uint256(price).mul(collateralPriceDecimal).div(1e8);\n', '            }\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    // **** Setters ****\n', '\n', '    function setMinRatio(uint256 _minRatio) external {\n', '        _onlyGovernance();\n', '        minRatio = _minRatio;\n', '    }\n', '\n', '    function setRatioBuff(uint256 _ratioBuff) external {\n', '        _onlyGovernance();\n', '        ratioBuff = _ratioBuff;\n', '    }\n', '\n', '    function setDustMinDebt(uint256 _dustDebt) external {\n', '        _onlyGovernance();\n', '        dustMinDebt = _dustDebt;\n', '    }\n', '\n', '    function setUseUnitUsdOracle(bool _useUnitUsdOracle) external {\n', '        _onlyGovernance();\n', '        useUnitUsdOracle = _useUnitUsdOracle;\n', '    }\n', '\n', '    // **** Unit Protocol CDP actions ****\n', '\n', '    function addCollateralAndBorrow(uint256 _collateralAmt, uint256 _usdpAmt) internal {\n', '        require(_usdpAmt.add(debtUsed()) < debtLimit(), "!exceedLimit");\n', '        _safeApproveHelper(collateral, unitVault, _collateralAmt);\n', '        IUnitCDPManager(cdpMgr01).join(collateral, _collateralAmt, _usdpAmt);\n', '    }\n', '\n', '    function repayAndRedeemCollateral(uint256 _collateralAmt, uint256 _usdpAmt) internal {\n', '        _safeApproveHelper(debtToken, unitVault, _usdpAmt);\n', '        IUnitCDPManager(cdpMgr01).exit(collateral, _collateralAmt, _usdpAmt);\n', '    }\n', '\n', '    // **** State Mutation functions ****\n', '\n', '    function keepMinRatio() external {\n', '        _onlyCDPInUse();\n', '        _onlyAuthorizedActorsOrController();\n', '\n', '        uint256 requiredPaidback = requiredPaidDebt(0);\n', '        if (requiredPaidback > 0) {\n', '            _withdrawUSDP(requiredPaidback);\n', '\n', '            uint256 _currentDebtVal = IERC20Upgradeable(debtToken).balanceOf(address(this));\n', '            uint256 _actualPaidDebt = _currentDebtVal;\n', '            uint256 _totalDebtWithoutFee = getDebtWithoutFee();\n', '            uint256 _fee = getDebtBalance().sub(_totalDebtWithoutFee);\n', '\n', '            require(_actualPaidDebt > _fee, "!notEnoughForFee");\n', '            _actualPaidDebt = _actualPaidDebt.sub(_fee); // unit protocol will charge fee first\n', '            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt, _totalDebtWithoutFee);\n', '\n', '            require(_currentDebtVal >= _actualPaidDebt.add(_fee), "!notEnoughRepayment");\n', '            repayAndRedeemCollateral(0, _actualPaidDebt);\n', '        }\n', '    }\n', '\n', '    /// @dev Internal deposit logic to be implemented by Strategies\n', '    function _deposit(uint256 _want) internal override {\n', '        if (_want > 0) {\n', '            uint256 _newDebt = calculateDebtFor(_want.add(getCollateralBalance()), true);\n', '            if (_newDebt > 0) {\n', '                addCollateralAndBorrow(_want, _newDebt);\n', '                uint256 wad = IERC20Upgradeable(debtToken).balanceOf(address(this));\n', '                _depositUSDP(_newDebt > wad ? wad : _newDebt);\n', '            }\n', '        }\n', '    }\n', '\n', '    // to avoid repay all debt resulting to close the CDP unexpectedly\n', '    function _capMaxDebtPaid(uint256 _actualPaidDebt, uint256 _totalDebtWithoutFee) internal view returns (uint256) {\n', '        uint256 _maxDebtToRepay = _totalDebtWithoutFee.sub(dustMinDebt);\n', '        return _actualPaidDebt >= _maxDebtToRepay ? _maxDebtToRepay : _actualPaidDebt;\n', '    }\n', '\n', '    /// @dev Internal logic for partial withdrawals. Should exit positions as efficiently as possible.\n', '    /// @dev The withdraw() function shell automatically uses idle want in the strategy before attempting to withdraw more using this\n', '    function _withdrawSome(uint256 _amount) internal override returns (uint256) {\n', '        if (_amount == 0) {\n', '            return _amount;\n', '        }\n', '\n', '        uint256 requiredPaidback = requiredPaidDebt(_amount);\n', '        if (requiredPaidback > 0) {\n', '            _withdrawUSDP(requiredPaidback);\n', '        }\n', '\n', '        bool _fullWithdraw = _amount >= balanceOfPool();\n', '        uint256 _wantBefore = IERC20Upgradeable(want).balanceOf(address(this));\n', '        if (!_fullWithdraw) {\n', '            uint256 _currentDebtVal = IERC20Upgradeable(debtToken).balanceOf(address(this));\n', '            uint256 _actualPaidDebt = _currentDebtVal;\n', '            uint256 _totalDebtWithoutFee = getDebtWithoutFee();\n', '            uint256 _fee = getDebtBalance().sub(_totalDebtWithoutFee);\n', '\n', '            require(_actualPaidDebt > _fee, "!notEnoughForFee");\n', '            _actualPaidDebt = _actualPaidDebt.sub(_fee); // unit protocol will charge fee first\n', '            _actualPaidDebt = _capMaxDebtPaid(_actualPaidDebt, _totalDebtWithoutFee);\n', '\n', '            require(_currentDebtVal >= _actualPaidDebt.add(_fee), "!notEnoughRepayment");\n', '            repayAndRedeemCollateral(_amount, _actualPaidDebt);\n', '        } else {\n', '            require(IERC20Upgradeable(debtToken).balanceOf(address(this)) >= getDebtBalance(), "!notEnoughFullRepayment");\n', '            repayAndRedeemCollateral(_amount, getDebtBalance());\n', '            require(getDebtBalance() == 0, "!leftDebt");\n', '            require(getCollateralBalance() == 0, "!leftCollateral");\n', '        }\n', '\n', '        uint256 _wantAfter = IERC20Upgradeable(want).balanceOf(address(this));\n', '        return _wantAfter.sub(_wantBefore);\n', '    }\n', '\n', '    /// @dev Internal logic for strategy migration. Should exit positions as efficiently as possible\n', '    function _withdrawAll() internal override {\n', '        _withdrawSome(balanceOfPool());\n', '    }\n', '}\n', '\n', '\n', '// File contracts/badger-sett/strategies/unitprotocol/StrategyUnitProtocolRenbtc.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract StrategyUnitProtocolRenbtc is StrategyUnitProtocolMeta {\n', '    using SafeERC20Upgradeable for IERC20Upgradeable;\n', '    using AddressUpgradeable for address;\n', '    using SafeMathUpgradeable for uint256;\n', '\n', '    // strategy specific\n', '    address public constant renbtc_collateral = 0xEB4C2781e4ebA804CE9a9803C67d0893436bB27D;\n', '    uint256 public constant renbtc_collateral_decimal = 1e8;\n', '    address public constant renbtc_oracle = 0xF4030086522a5bEEa4988F8cA5B36dbC97BeE88c;\n', '    uint256 public constant renbtc_price_decimal = 1;\n', '    bool public constant renbtc_price_eth = false;\n', '\n', '    // yield-farming in usdp-3crv pool\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant crv = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n', '    address public constant usdp3crv = 0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6;\n', '    address public constant usdp = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\n', '    address public constant usdp_gauge = 0x055be5DDB7A925BfEF3417FC157f53CA77cA7222;\n', '    address public constant curvePool = 0x42d7025938bEc20B69cBae5A77421082407f053A;\n', '    address public constant mintr = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n', '\n', '    // slippage protection for one-sided ape in/out\n', '    uint256 public slippageProtectionIn = 50; // max 0.5%\n', '    uint256 public slippageProtectionOut = 50; // max 0.5%\n', '    uint256 public keepCRV;\n', '\n', '    event RenBTCStratHarvest(\n', '        uint256 crvHarvested,\n', '        uint256 keepCrv,\n', '        uint256 crvRecycled,\n', '        uint256 wantProcessed,\n', '        uint256 wantDeposited,\n', '        uint256 governancePerformanceFee,\n', '        uint256 strategistPerformanceFee\n', '    );\n', '\n', '    struct HarvestData {\n', '        uint256 crvHarvested;\n', '        uint256 keepCrv;\n', '        uint256 crvRecycled;\n', '        uint256 wantProcessed;\n', '        uint256 wantDeposited;\n', '        uint256 governancePerformanceFee;\n', '        uint256 strategistPerformanceFee;\n', '    }\n', '\n', '    function initialize(\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _keeper,\n', '        address _guardian,\n', '        address[1] memory _wantConfig,\n', '        uint256[4] memory _feeConfig\n', '    ) public initializer {\n', '        __BaseStrategy_init(_governance, _strategist, _controller, _keeper, _guardian);\n', '\n', '        require(_wantConfig[0] == renbtc_collateral, "!want");\n', '        want = _wantConfig[0];\n', '        collateral = renbtc_collateral;\n', '        collateralDecimal = renbtc_collateral_decimal;\n', '        unitOracle = renbtc_oracle;\n', '        collateralPriceDecimal = renbtc_price_decimal;\n', '        collateralPriceEth = renbtc_price_eth;\n', '\n', '        performanceFeeGovernance = _feeConfig[0];\n', '        performanceFeeStrategist = _feeConfig[1];\n', '        withdrawalFee = _feeConfig[2];\n', '        keepCRV = _feeConfig[3];\n', '\n', '        minRatio = 200;\n', '        ratioBuff = 200;\n', '    }\n', '\n', '    // **** Setters ****\n', '\n', '    function setSlippageProtectionIn(uint256 _slippage) external {\n', '        _onlyGovernance();\n', '        slippageProtectionIn = _slippage;\n', '    }\n', '\n', '    function setSlippageProtectionOut(uint256 _slippage) external {\n', '        _onlyGovernance();\n', '        slippageProtectionOut = _slippage;\n', '    }\n', '\n', '    function setKeepCRV(uint256 _keepCRV) external {\n', '        _onlyGovernance();\n', '        keepCRV = _keepCRV;\n', '    }\n', '\n', '    // **** State Mutation functions ****\n', '\n', '    function getHarvestable() external view returns (uint256) {\n', '        return ICurveGauge(usdp_gauge).claimable_tokens(address(this));\n', '    }\n', '\n', '    function harvest() external whenNotPaused returns (HarvestData memory) {\n', '        _onlyAuthorizedActors();\n', '\n', '        HarvestData memory harvestData;\n', '\n', '        uint256 _before = IERC20Upgradeable(want).balanceOf(address(this));\n', '        uint256 _beforeCrv = IERC20Upgradeable(crv).balanceOf(address(this));\n', '\n', '        // Harvest from Gauge\n', '        ICurveMintr(mintr).mint(usdp_gauge);\n', '        uint256 _afterCrv = IERC20Upgradeable(crv).balanceOf(address(this));\n', '\n', '        harvestData.crvHarvested = _afterCrv.sub(_beforeCrv);\n', '        uint256 _crv = _afterCrv;\n', '\n', '        // Transfer CRV to keep to Rewards\n', '        harvestData.keepCrv = _crv.mul(keepCRV).div(MAX_FEE);\n', '        IERC20Upgradeable(crv).safeTransfer(IController(controller).rewards(), harvestData.keepCrv);\n', '\n', '        harvestData.crvRecycled = _crv.sub(harvestData.keepCrv);\n', '\n', '        if (harvestData.crvRecycled > 0) {\n', '            address[] memory path = new address[](3);\n', '            path[0] = crv;\n', '            path[1] = weth;\n', '            path[2] = want;\n', '            _swap(crv, harvestData.crvRecycled, path);\n', '        }\n', '\n', '        // Take fees from want increase, and deposit remaining into Gauge\n', '        harvestData.wantProcessed = IERC20Upgradeable(want).balanceOf(address(this));\n', '        if (harvestData.wantProcessed > 0) {\n', '            (harvestData.governancePerformanceFee, harvestData.strategistPerformanceFee) = _processPerformanceFees(harvestData.wantProcessed);\n', '\n', '            // Reinvest remaining want\n', '            harvestData.wantDeposited = IERC20Upgradeable(want).balanceOf(address(this));\n', '\n', '            if (harvestData.wantDeposited > 0) {\n', '                _deposit(harvestData.wantDeposited);\n', '            }\n', '        }\n', '\n', '        emit RenBTCStratHarvest(\n', '            harvestData.crvHarvested,\n', '            harvestData.keepCrv,\n', '            harvestData.crvRecycled,\n', '            harvestData.wantProcessed,\n', '            harvestData.wantDeposited,\n', '            harvestData.governancePerformanceFee,\n', '            harvestData.strategistPerformanceFee\n', '        );\n', '\n', '        emit Harvest(harvestData.wantProcessed.sub(_before), block.number);\n', '\n', '        return harvestData;\n', '    }\n', '\n', '    function _processPerformanceFees(uint256 _amount) internal returns (uint256 governancePerformanceFee, uint256 strategistPerformanceFee) {\n', '        governancePerformanceFee = _processFee(want, _amount, performanceFeeGovernance, IController(controller).rewards());\n', '        strategistPerformanceFee = _processFee(want, _amount, performanceFeeStrategist, strategist);\n', '    }\n', '\n', '    function _depositUSDP(uint256 _usdpAmt) internal override {\n', '        uint256 _expectedOut = _usdpAmt.mul(1e18).div(virtualPriceToWant());\n', '        uint256 _maxSlip = _expectedOut.mul(MAX_FEE.sub(slippageProtectionIn)).div(MAX_FEE);\n', '        if (_usdpAmt > 0 && checkSlip(_usdpAmt, _maxSlip)) {\n', '            _safeApproveHelper(usdp, curvePool, _usdpAmt);\n', '            uint256[2] memory amounts = [_usdpAmt, 0];\n', '            ICurveFi(curvePool).add_liquidity(amounts, _maxSlip);\n', '        }\n', '\n', '        uint256 _usdp3crv = IERC20Upgradeable(usdp3crv).balanceOf(address(this));\n', '        if (_usdp3crv > 0) {\n', '            _safeApproveHelper(usdp3crv, usdp_gauge, _usdp3crv);\n', '            ICurveGauge(usdp_gauge).deposit(_usdp3crv);\n', '        }\n', '    }\n', '\n', '    function _withdrawUSDP(uint256 _usdpAmt) internal override {\n', '        uint256 _requiredUsdp3crv = estimateRequiredUsdp3crv(_usdpAmt);\n', '        _requiredUsdp3crv = _requiredUsdp3crv.mul(MAX_FEE.add(slippageProtectionOut)).div(MAX_FEE); // try to remove bit more\n', '\n', '        uint256 _usdp3crv = IERC20Upgradeable(usdp3crv).balanceOf(address(this));\n', '        uint256 _withdrawFromGauge = _usdp3crv < _requiredUsdp3crv ? _requiredUsdp3crv.sub(_usdp3crv) : 0;\n', '\n', '        if (_withdrawFromGauge > 0) {\n', '            uint256 maxInGauge = ICurveGauge(usdp_gauge).balanceOf(address(this));\n', '            ICurveGauge(usdp_gauge).withdraw(maxInGauge < _withdrawFromGauge ? maxInGauge : _withdrawFromGauge);\n', '        }\n', '\n', '        _usdp3crv = IERC20Upgradeable(usdp3crv).balanceOf(address(this));\n', '        if (_usdp3crv > 0) {\n', '            _requiredUsdp3crv = _requiredUsdp3crv > _usdp3crv ? _usdp3crv : _requiredUsdp3crv;\n', '            uint256 maxSlippage = _requiredUsdp3crv.mul(MAX_FEE.sub(slippageProtectionOut)).div(MAX_FEE);\n', '            _safeApproveHelper(usdp3crv, curvePool, _requiredUsdp3crv);\n', '            ICurveFi(curvePool).remove_liquidity_one_coin(_requiredUsdp3crv, 0, maxSlippage);\n', '        }\n', '    }\n', '\n', '    // **** Views ****\n', '\n', '    function virtualPriceToWant() public view returns (uint256) {\n', '        uint256 p = ICurveFi(curvePool).get_virtual_price();\n', '        require(p > 0, "!p");\n', '        return p;\n', '    }\n', '\n', '    function estimateRequiredUsdp3crv(uint256 _usdpAmt) public view returns (uint256) {\n', '        return _usdpAmt.mul(1e18).div(virtualPriceToWant());\n', '    }\n', '\n', '    function checkSlip(uint256 _usdpAmt, uint256 _maxSlip) public view returns (bool) {\n', '        uint256[2] memory amounts = [_usdpAmt, 0];\n', '        return ICurveExchange(curvePool).calc_token_amount(amounts, true) >= _maxSlip;\n', '    }\n', '\n', '    function usdpOfPool() public view returns (uint256) {\n', '        uint256 _usdp3crv = IERC20Upgradeable(usdp3crv).balanceOf(address(this));\n', '        _usdp3crv = _usdp3crv.add(ICurveGauge(usdp_gauge).balanceOf(address(this)));\n', '        return usdp3crvToUsdp(_usdp3crv);\n', '    }\n', '\n', '    function usdp3crvToUsdp(uint256 _usdp3crv) public view returns (uint256) {\n', '        if (_usdp3crv == 0) {\n', '            return 0;\n', '        }\n', '        // use underestimate of current assets.\n', '        uint256 virtualOut = virtualPriceToWant().mul(_usdp3crv).div(1e18);\n', '        // uint256 realOut = ICurveFi(curvePool).calc_withdraw_one_coin(_usdp3crv, 0);\n', '        return virtualOut; // virtualOut > realOut? realOut : virtualOut;\n', '    }\n', '\n', '    /// @notice Specify tokens used in yield process, should not be available to withdraw via withdrawOther()\n', '    function _onlyNotProtectedTokens(address _asset) internal override {\n', '        require(usdp3crv != _asset, "!usdp3crv");\n', '        require(usdp != _asset, "!usdp");\n', '        require(renbtc_collateral != _asset, "!usdp");\n', '    }\n', '\n', '    function getProtectedTokens() external override view returns (address[] memory) {\n', '        address[] memory protectedTokens = new address[](3);\n', '        protectedTokens[0] = renbtc_collateral;\n', '        protectedTokens[1] = usdp;\n', '        protectedTokens[2] = usdp3crv;\n', '        return protectedTokens;\n', '    }\n', '\n', '    /// @dev User-friendly name for this strategy for purposes of convenient reading\n', '    function getName() external override pure returns (string memory) {\n', '        return "StrategyUnitProtocolRenbtc";\n', '    }\n', '}']