['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract PETH {\n', '    using SafeMath for uint256;\n', '    string public name     = "PairX ETH";\n', '    string public symbol   = "PETH";\n', '    uint8  public decimals = 18;\n', '\n', '    uint256 public totalPETH = 0;\n', '    uint256 public usedETH = 0;\n', '    address public investAddr;\n', '    address public managerAddr;\n', '\n', '    bool public reEntrancyMutex = false;//Mutexes that prevent reentrant attacks\n', '    bool public canDeposit = true;//Allow to deposit.\n', '\n', '    event  Approval(address indexed src, address indexed guy, uint256 wad);\n', '    event  Transfer(address indexed src, address indexed dst, uint256 wad);\n', '    event  Deposit(address indexed dst, uint256 wad);\n', '    event  Withdrawal(address indexed src, uint256 wad);\n', '    event  Invest(address indexed src, uint256 wad);\n', '    event  ChangeIvAddr(address indexed src, address indexed newAddr);\n', '    event  ChangeMngAddr(address indexed src, address indexed newAddr);\n', '    event  ChangeDeposit(address indexed src, bool canDeposit);\n', '\n', '    mapping (address => uint256)                       public  balanceOf;\n', '    mapping (address => mapping (address => uint256))  public  allowance;\n', '\n', '    constructor(address _investAddr, address _managerAddr) public {\n', '        investAddr = _investAddr;\n', '        managerAddr = _managerAddr;\n', '    }\n', '\n', '    fallback() external payable {}\n', '    receive() external payable {\n', '        deposit();\n', '    }\n', '\n', '    function deposit() public payable {\n', '        if (msg.sender == investAddr) {\n', '            usedETH = usedETH.sub(msg.value);\n', '        } else {\n', '            require(canDeposit);\n', '            balanceOf[msg.sender] = msg.value.add(balanceOf[msg.sender]);\n', '            totalPETH = msg.value.add(totalPETH);\n', '            emit Transfer(address(0), msg.sender, msg.value);\n', '        }\n', '        emit Deposit(msg.sender, msg.value);\n', '    }\n', '    function withdraw(uint256 wad) public {\n', '        require(!reEntrancyMutex);\n', '        balanceOf[msg.sender] = balanceOf[msg.sender].sub(wad);\n', '        totalPETH = totalPETH.sub(wad);\n', '\n', '        reEntrancyMutex = true;\n', '        msg.sender.transfer(wad);\n', '        emit Transfer(msg.sender, address(0), wad);\n', '        emit Withdrawal(msg.sender, wad);\n', '        reEntrancyMutex = false;\n', '    }\n', '    function invest(uint256 wad) public {\n', '        usedETH = usedETH.add(wad);\n', '        address(uint160(investAddr)).transfer(wad);\n', '        emit Invest(msg.sender, wad);\n', '    }\n', '    function changeIvAddr(address newAddr) public {\n', '        require(msg.sender == investAddr, "Only investAddr can change Invest Address.");\n', '        investAddr = newAddr;\n', '        emit ChangeIvAddr(msg.sender, newAddr);\n', '    }\n', '    function changeMngAddr(address newAddr) public {\n', '        require(msg.sender == managerAddr, "Only managerAddr can change Interest Address.");\n', '        managerAddr = newAddr;\n', '        emit ChangeMngAddr(msg.sender, newAddr);\n', '    }\n', '    function changeDeposit(bool _canDeposit) public {\n', '        require(msg.sender == managerAddr, "Only managerAddr can change Deposit State.");\n', '        canDeposit = _canDeposit;\n', '        emit ChangeDeposit(msg.sender, _canDeposit);\n', '    }\n', '\n', '    function totalSupply() public view returns (uint256) {\n', '        return totalPETH;\n', '    }\n', '\n', '    function approve(address guy, uint256 wad) public returns (bool) {\n', '        allowance[msg.sender][guy] = wad;\n', '        emit Approval(msg.sender, guy, wad);\n', '        return true;\n', '    }\n', '\n', '    function transfer(address dst, uint256 wad) public returns (bool) {\n', '        return transferFrom(msg.sender, dst, wad);\n', '    }\n', '\n', '    function transferFrom(address src, address dst, uint256 wad)\n', '        public\n', '        returns (bool)\n', '    {\n', '        require(balanceOf[src] >= wad);\n', '\n', '        if (src != msg.sender && allowance[src][msg.sender] != uint(-1)) {\n', '            require(allowance[src][msg.sender] >= wad);\n', '            allowance[src][msg.sender] = allowance[src][msg.sender].sub(wad);\n', '        }\n', '\n', '        balanceOf[src] = balanceOf[src].sub(wad);\n', '        balanceOf[dst] = balanceOf[dst].add(wad);\n', '\n', '        emit Transfer(src, dst, wad);\n', '\n', '        return true;\n', '    }\n', '}']