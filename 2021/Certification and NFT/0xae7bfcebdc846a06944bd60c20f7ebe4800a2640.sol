['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT \n', '\n', '\n', 'pragma solidity 0.8.4;\n', '\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    // Solidity only automatically asserts when dividing by 0\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', 'contract FolkitoPresale{\n', '    using SafeMath for uint256;\n', '\n', '\n', '\n', '    enum TypeOfMember{ NORMAL,WHITELISTED, PRIVATEMEMBER }\n', '    \n', '\n', '\n', '    address public owner;\n', '    IERC20 public token;\n', '    uint256 public _price = 0.00001 ether;\n', '    uint256 public _privatePrice = 0.000001 ether;\n', '    uint256 public _whiteListPrice = 0.000001 ether;\n', '\n', '    uint256 private ONE_TOKEN = 1 ether;\n', '    uint256 public presaleTimeEnds = block.timestamp.add(10 days);\n', '    uint256 public totalTokenSold;\n', '\n', '\n', '    uint8 TYPE_NORMAL = 0;\n', '    uint8 TYPE_WHITELIST = 1;\n', '    uint8 TYPE_PRIVATEMEMBER = 2;\n', '\n', '    \n', '\n', '    uint256 public WHITELISTING_SHARE = 6000000*10**18;\n', '    uint256 public whitelistingSold = 0;\n', '\n', '\n', '    uint256 public NORMAL_SALE_SHARE = 5000000*10**18;\n', '    uint256 public normalSaleSold = 0;\n', '\n', '\n', '\n', '    uint256 public PRIVATE_SALE_SHARE = 5000000*10**18;\n', '    uint256 public privateSaleSold = 0;\n', '\n', '\n', '    mapping (address => bool) public whitelist;\n', '\n', '    mapping (address => bool) public privateMembersList;\n', '\n', '\n', '    constructor(address _token ){\n', '        owner = msg.sender;\n', '        token = IERC20(_token);\n', '       \n', '    }\n', '    \n', '    \n', '    modifier IsOwner{\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', ' \n', '    \n', '    \n', '    \n', '    function addOrRemoveUserFromWhitelist(address user,bool isAdd) public{\n', '     require(msg.sender == owner,"You are not authorized");\n', '     \n', '     whitelist[user] = isAdd;\n', '    }\n', '    \n', '    \n', '\n', '\n', '    function addOrRemoveUserFromPrivateSale(address user,bool isAdd) public{\n', '     require(msg.sender == owner,"You are not authorized");\n', '     \n', '     privateMembersList[user] = isAdd;\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    // user will send the amount when they will buy the tokens adn contract will automatically calcluitate  the number of tokens accordign to the amount user will send\n', '    \n', '    \n', '    \n', '    function buyToken() external payable\n', '    {\n', '        require(presaleTimeEnds> block.timestamp,"Presale Finished");\n', '        \n', '        uint8 memberType = getMemberType(msg.sender);\n', '        uint256 noOfTokens = calculateTokens(msg.value,memberType);\n', '        \n', '        if(memberType == TYPE_WHITELIST){\n', '            \n', '            if(whitelistingSold.add(noOfTokens)<= WHITELISTING_SHARE){\n', '                whitelistingSold = whitelistingSold.add(noOfTokens);\n', '            }else{\n', '                revert("Whitelist Sale Quota has finished");\n', '            }\n', '            \n', '        }if(memberType == TYPE_PRIVATEMEMBER){\n', '            if(privateSaleSold.add(noOfTokens)<= PRIVATE_SALE_SHARE){\n', '                privateSaleSold = privateSaleSold.add(noOfTokens);\n', '            }else{\n', '                revert("PRIVATE Sale Quota has finished");\n', '            }\n', '            \n', '        }else{\n', '\n', '            if(normalSaleSold.add(noOfTokens)<= NORMAL_SALE_SHARE){\n', '                normalSaleSold = normalSaleSold.add(noOfTokens);\n', '            }else{\n', '                revert("Normal Sale Quota has finished");\n', '            }\n', '            \n', '\n', '        }\n', '        \n', '        require(getTokenBalance()>= noOfTokens,"Contract has no balance");\n', '\n', '        token.transfer(msg.sender,noOfTokens);\n', '        totalTokenSold = totalTokenSold.add(noOfTokens);\n', '        \n', '    }\n', '    \n', '    \n', '\n', '    function getTotalPresaleAmount()  public view returns(uint256){\n', '        return NORMAL_SALE_SHARE.add(WHITELISTING_SHARE).add(PRIVATE_SALE_SHARE);\n', '    }\n', '    \n', '    \n', '    function calculateTokens (uint256 amount,uint8 userType ) public view returns(uint256){\n', '        if(userType == TYPE_WHITELIST){\n', '            \n', '            return amount.div(_whiteListPrice).mul(10**18);\n', '\n', '        }else if(userType == TYPE_PRIVATEMEMBER){\n', '            \n', '            return amount.div(_privatePrice).mul(10**18);\n', '\n', '        } else{\n', '            return amount.div(_price).mul(10**18);\n', '\n', '        }\n', '    }\n', '\n', '\n', '\n', '    function getMemberType(address user) public view returns (uint8) {\n', '      \n', '        uint8 userType = TYPE_NORMAL;\n', '\n', '        if(whitelist[user] ==true){\n', '            userType = TYPE_WHITELIST;\n', '        }else if(privateMembersList[user] ==true){\n', '            userType = TYPE_PRIVATEMEMBER;\n', '        }\n', '        return userType;\n', '\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    // this fucntion is used to check how many fokitos are remaining in the contract\n', '    function getTokenBalance() public view returns(uint256){\n', '        return  token.balanceOf(address(this));\n', '    }\n', '    \n', '    \n', '        // this fucntion is used to check how many ethers are there in the contract\n', '\n', '    function getContractBalance() public view returns(uint256){\n', '        return address(this).balance;\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    // use this fuction for withdrawing all the unsold tokens\n', '\n', '    function withdrawTokens( ) public{\n', '        require(msg.sender == owner,"You are not the owner");\n', '        token.transfer(owner,getTokenBalance());\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    // use this fuction for withdrawing all the ethers\n', '    function withdrawBalance( ) public{\n', '        require(msg.sender == owner,"You are not the owner");\n', '        payable(msg.sender).transfer(getContractBalance());\n', '    }\n', '    \n', '    \n', '    // you can extend or shrink the presale time \n', '\n', '    function changePresaleEndTime(uint256 time) public{\n', '        require(msg.sender == owner,"You are not the owner");\n', '        presaleTimeEnds = time;\n', '        \n', '    }\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}']