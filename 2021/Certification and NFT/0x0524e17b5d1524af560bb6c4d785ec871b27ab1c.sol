['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', '// Dependency file: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n', '\n', '// pragma solidity >=0.6.2;\n', '\n', "// import '/Users/alexsoong/Source/set-protocol/index-coop-contracts/node_modules/@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol';\n", '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ISetToken.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       Position ENUM. Default is 0; External is 1\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's cash position details and external positions\n", "     * This data structure allows O(1) access to a component's cash position units and \n", '     * virtual units.\n', '     *\n', "     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n", '     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n', '     *                                  by dividing a "real" value by the "positionMultiplier"\n', '     * @param componentIndex            \n', '     * @param externalPositionModules   List of external modules attached to each external position. Each module\n', '     *                                  maps to an external position\n', '     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n', '     */\n', '    struct ComponentPosition {\n', '      int256 virtualUnit;\n', '      address[] externalPositionModules;\n', '      mapping(address => ExternalPosition) externalPositions;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's external position details including virtual unit and any\n", '     * auxiliary data.\n', '     *\n', "     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n", '     * @param data              Arbitrary data\n', '     */\n', '    struct ExternalPosition {\n', '      int256 virtualUnit;\n', '      bytes data;\n', '    }\n', '\n', '\n', '    /* ============ Functions ============ */\n', '    \n', '    function addComponent(address _component) external;\n', '    function removeComponent(address _component) external;\n', '    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n', '    function addExternalPositionModule(address _component, address _positionModule) external;\n', '    function removeExternalPositionModule(address _component, address _positionModule) external;\n', '    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n', '    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n', '    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n', '    function getComponents() external view returns(address[] memory);\n', '    function getExternalPositionModules(address _component) external view returns(address[] memory);\n', '    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n', '    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n', '    function isComponent(address _component) external view returns(bool);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getPositions() external view returns (Position[] memory);\n', '    function getTotalComponentRealUnits(address _component) external view returns(int256);\n', '\n', '    function isInitializedModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IBasicIssuanceModule.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '// pragma solidity >=0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', 'interface IBasicIssuanceModule {\n', '    function getRequiredComponentUnitsForIssue(\n', '        ISetToken _setToken,\n', '        uint256 _quantity\n', '    ) external returns(address[] memory, uint256[] memory);\n', '    function issue(ISetToken _setToken, uint256 _quantity, address _to) external;\n', '    function redeem(ISetToken _token, uint256 _quantity, address _to) external;\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addSet(address _setToken) external;\n', '    function feeRecipient() external view returns(address);\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isSet(address _setToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function resourceId(uint256 _id) external view returns(address);\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IWETH.sol\n', '\n', '// pragma solidity >=0.6.10;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Set Protocol\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '}\n', '\n', '// Dependency file: @uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// Dependency file: external/contracts/UniSushiV2Library.sol\n', '\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', "// import '/Users/alexsoong/Source/set-protocol/index-coop-contracts/node_modules/@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol';\n", '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', 'library UniSushiV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address pair, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pair).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// Root file: contracts/exchangeIssuance/ExchangeIssuance.sol\n', '\n', '/*\n', '    Copyright 2021 Index Cooperative\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', 'pragma solidity 0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import { Address } from "@openzeppelin/contracts/utils/Address.sol";\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { IUniswapV2Factory } from "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol";\n', '// import { IUniswapV2Router02 } from "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol";\n', '// import { Math } from "@openzeppelin/contracts/math/Math.sol";\n', '// import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '\n', '// import { IBasicIssuanceModule } from "contracts/interfaces/IBasicIssuanceModule.sol";\n', '// import { IController } from "contracts/interfaces/IController.sol";\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { IWETH } from "contracts/interfaces/IWETH.sol";\n', '// import { PreciseUnitMath } from "contracts/lib/PreciseUnitMath.sol";\n', '// import { UniSushiV2Library } from "external/contracts/UniSushiV2Library.sol";\n', '\n', '\n', '/**\n', ' * @title ExchangeIssuance\n', ' * @author Index Coop\n', ' *\n', ' * Contract for issuing and redeeming any SetToken using ETH or an ERC20 as the paying/receiving currency.\n', ' * All swaps are done using the best price found on Uniswap or Sushiswap.\n', ' *\n', ' */\n', 'contract ExchangeIssuance is ReentrancyGuard {\n', '    \n', '    using Address for address payable;\n', '    using SafeMath for uint256;\n', '    using PreciseUnitMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for ISetToken;\n', '    \n', '    /* ============ Enums ============ */\n', '    \n', '    enum Exchange { Uniswap, Sushiswap, None }\n', '\n', '    /* ============ Constants ============= */\n', '\n', '    uint256 constant private MAX_UINT96 = 2**96 - 1;\n', '    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    \n', '    /* ============ State Variables ============ */\n', '\n', '    address public WETH;\n', '    IUniswapV2Router02 public uniRouter;\n', '    IUniswapV2Router02 public sushiRouter;\n', '    \n', '    address public immutable uniFactory;\n', '    address public immutable sushiFactory;\n', '    \n', '    IController public immutable setController;\n', '    IBasicIssuanceModule public immutable basicIssuanceModule;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event ExchangeIssue(\n', '        address indexed _recipient,     // The recipient address of the issued SetTokens\n', '        ISetToken indexed _setToken,    // The issued SetToken\n', '        IERC20 indexed _inputToken,     // The address of the input asset(ERC20/ETH) used to issue the SetTokens\n', '        uint256 _amountInputToken,      // The amount of input tokens used for issuance\n', '        uint256 _amountSetIssued        // The amount of SetTokens received by the recipient\n', '    );\n', '\n', '    event ExchangeRedeem(\n', '        address indexed _recipient,     // The recipient address which redeemed the SetTokens\n', '        ISetToken indexed _setToken,    // The redeemed SetToken\n', '        IERC20 indexed _outputToken,    // The addres of output asset(ERC20/ETH) received by the recipient\n', '        uint256 _amountSetRedeemed,     // The amount of SetTokens redeemed for output tokens\n', '        uint256 _amountOutputToken      // The amount of output tokens received by the recipient\n', '    );\n', '\n', '    event Refund(\n', '        address indexed _recipient,     // The recipient address which redeemed the SetTokens\n', '        uint256 _refundAmount           // The amount of ETH redunder by this transaction\n', '    );\n', '    \n', '    /* ============ Modifiers ============ */\n', '    \n', '    modifier isSetToken(ISetToken _setToken) {\n', '         require(setController.isSet(address(_setToken)), "ExchangeIssuance: INVALID SET");\n', '         _;\n', '    }\n', '    \n', '    /* ============ Constructor ============ */\n', '\n', '    constructor(\n', '        address _weth,\n', '        address _uniFactory,\n', '        IUniswapV2Router02 _uniRouter, \n', '        address _sushiFactory, \n', '        IUniswapV2Router02 _sushiRouter, \n', '        IController _setController,\n', '        IBasicIssuanceModule _basicIssuanceModule\n', '    )\n', '        public\n', '    {\n', '        uniFactory = _uniFactory;\n', '        uniRouter = _uniRouter;\n', '\n', '        sushiFactory = _sushiFactory;\n', '        sushiRouter = _sushiRouter;\n', '        \n', '        setController = _setController;\n', '        basicIssuanceModule = _basicIssuanceModule;\n', '        \n', '        WETH = _weth;\n', '        IERC20(WETH).safeApprove(address(uniRouter), PreciseUnitMath.maxUint256());\n', '        IERC20(WETH).safeApprove(address(sushiRouter), PreciseUnitMath.maxUint256());\n', '    }\n', '    \n', '    /* ============ Public Functions ============ */\n', '    \n', '    /**\n', '     * Runs all the necessary approval functions required for a given ERC20 token.\n', '     * This function can be called when a new token is added to a SetToken during a \n', '     * rebalance.\n', '     *\n', '     * @param _token    Address of the token which needs approval\n', '     */\n', '    function approveToken(IERC20 _token) public {\n', '        _safeApprove(_token, address(uniRouter), MAX_UINT96);\n', '        _safeApprove(_token, address(sushiRouter), MAX_UINT96);\n', '        _safeApprove(_token, address(basicIssuanceModule), MAX_UINT96);\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '    \n', '    receive() external payable {\n', '        // required for weth.withdraw() to work properly\n', '        require(msg.sender == WETH, "ExchangeIssuance: Direct deposits not allowed");\n', '    }\n', '    \n', '    /**\n', '     * Runs all the necessary approval functions required for a list of ERC20 tokens.\n', '     *\n', '     * @param _tokens    Addresses of the tokens which need approval\n', '     */\n', '    function approveTokens(IERC20[] calldata _tokens) external {\n', '        for (uint256 i = 0; i < _tokens.length; i++) {\n', '            approveToken(_tokens[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Runs all the necessary approval functions required before issuing\n', '     * or redeeming a SetToken. This function need to be called only once before the first time\n', '     * this smart contract is used on any particular SetToken.\n', '     *\n', '     * @param _setToken    Address of the SetToken being initialized\n', '     */\n', '    function approveSetToken(ISetToken _setToken) isSetToken(_setToken) external {\n', '        address[] memory components = _setToken.getComponents();\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            // Check that the component does not have external positions\n', '            require(\n', '                _setToken.getExternalPositionModules(components[i]).length == 0,\n', '                "ExchangeIssuance: EXTERNAL_POSITIONS_NOT_ALLOWED"\n', '            );\n', '            approveToken(IERC20(components[i]));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Issues SetTokens for an exact amount of input ERC20 tokens.\n', '     * The ERC20 token must be approved by the sender to this contract. \n', '     *\n', '     * @param _setToken         Address of the SetToken being issued\n', '     * @param _inputToken       Address of input token\n', '     * @param _amountInput      Amount of the input token / ether to spend\n', '     * @param _minSetReceive    Minimum amount of SetTokens to receive. Prevents unnecessary slippage.\n', '     *\n', '     * @return setTokenAmount   Amount of SetTokens issued to the caller\n', '     */\n', '    function issueSetForExactToken(\n', '        ISetToken _setToken,\n', '        IERC20 _inputToken,\n', '        uint256 _amountInput,\n', '        uint256 _minSetReceive\n', '    )   \n', '        isSetToken(_setToken)\n', '        external\n', '        nonReentrant\n', '        returns (uint256)\n', '    {   \n', '        require(_amountInput > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        _inputToken.safeTransferFrom(msg.sender, address(this), _amountInput);\n', '        \n', '        uint256 amountEth = address(_inputToken) == WETH\n', '            ? _amountInput\n', '            : _swapTokenForWETH(_inputToken, _amountInput);\n', '\n', '        uint256 setTokenAmount = _issueSetForExactWETH(_setToken, _minSetReceive, amountEth);\n', '        \n', '        emit ExchangeIssue(msg.sender, _setToken, _inputToken, _amountInput, setTokenAmount);\n', '        return setTokenAmount;\n', '    }\n', '    \n', '    /**\n', '     * Issues SetTokens for an exact amount of input ether.\n', '     * \n', '     * @param _setToken         Address of the SetToken to be issued\n', '     * @param _minSetReceive    Minimum amount of SetTokens to receive. Prevents unnecessary slippage.\n', '     *\n', '     * @return setTokenAmount   Amount of SetTokens issued to the caller\n', '     */\n', '    function issueSetForExactETH(\n', '        ISetToken _setToken,\n', '        uint256 _minSetReceive\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        payable\n', '        nonReentrant\n', '        returns(uint256)\n', '    {\n', '        require(msg.value > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        IWETH(WETH).deposit{value: msg.value}();\n', '        \n', '        uint256 setTokenAmount = _issueSetForExactWETH(_setToken, _minSetReceive, msg.value);\n', '        \n', '        emit ExchangeIssue(msg.sender, _setToken, IERC20(ETH_ADDRESS), msg.value, setTokenAmount);\n', '        return setTokenAmount;\n', '    }\n', '    \n', '    /**\n', '    * Issues an exact amount of SetTokens for given amount of input ERC20 tokens.\n', '    * The excess amount of tokens is returned in an equivalent amount of ether.\n', '    *\n', '    * @param _setToken              Address of the SetToken to be issued\n', '    * @param _inputToken            Address of the input token\n', '    * @param _amountSetToken        Amount of SetTokens to issue\n', '    * @param _maxAmountInputToken   Maximum amount of input tokens to be used to issue SetTokens. The unused \n', '    *                               input tokens are returned as ether.\n', '    *\n', '    * @return amountEthReturn       Amount of ether returned to the caller\n', '    */\n', '    function issueExactSetFromToken(\n', '        ISetToken _setToken,\n', '        IERC20 _inputToken,\n', '        uint256 _amountSetToken,\n', '        uint256 _maxAmountInputToken\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        require(_amountSetToken > 0 && _maxAmountInputToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        _inputToken.safeTransferFrom(msg.sender, address(this), _maxAmountInputToken);\n', '        \n', '        uint256 initETHAmount = address(_inputToken) == WETH\n', '            ? _maxAmountInputToken\n', '            : _swapTokenForWETH(_inputToken, _maxAmountInputToken);\n', '        \n', '        uint256 amountEthSpent = _issueExactSetFromWETH(_setToken, _amountSetToken, initETHAmount);\n', '        \n', '        uint256 amountEthReturn = initETHAmount.sub(amountEthSpent);\n', '        if (amountEthReturn > 0) {\n', '            IWETH(WETH).withdraw(amountEthReturn);\n', '            (payable(msg.sender)).sendValue(amountEthReturn);\n', '        }\n', '        \n', '        emit Refund(msg.sender, amountEthReturn);\n', '        emit ExchangeIssue(msg.sender, _setToken, _inputToken, _maxAmountInputToken, _amountSetToken);\n', '        return amountEthReturn;\n', '    }\n', '    \n', '    /**\n', '    * Issues an exact amount of SetTokens using a given amount of ether.\n', '    * The excess ether is returned back.\n', '    * \n', '    * @param _setToken          Address of the SetToken being issued\n', '    * @param _amountSetToken    Amount of SetTokens to issue\n', '    *\n', '    * @return amountEthReturn   Amount of ether returned to the caller\n', '    */\n', '    function issueExactSetFromETH(\n', '        ISetToken _setToken,\n', '        uint256 _amountSetToken\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        payable\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        require(msg.value > 0 && _amountSetToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        IWETH(WETH).deposit{value: msg.value}();\n', '        \n', '        uint256 amountEth = _issueExactSetFromWETH(_setToken, _amountSetToken, msg.value);\n', '        \n', '        uint256 amountEthReturn = msg.value.sub(amountEth);\n', '        \n', '        if (amountEthReturn > 0) {\n', '            IWETH(WETH).withdraw(amountEthReturn);\n', '            (payable(msg.sender)).sendValue(amountEthReturn);\n', '        }\n', '        \n', '        emit Refund(msg.sender, amountEthReturn);\n', '        emit ExchangeIssue(msg.sender, _setToken, IERC20(ETH_ADDRESS), amountEth, _amountSetToken);\n', '        return amountEthReturn;\n', '    }\n', '    \n', '    /**\n', '     * Redeems an exact amount of SetTokens for an ERC20 token.\n', '     * The SetToken must be approved by the sender to this contract.\n', '     *\n', '     * @param _setToken             Address of the SetToken being redeemed\n', '     * @param _outputToken          Address of output token\n', '     * @param _amountSetToken       Amount SetTokens to redeem\n', '     * @param _minOutputReceive     Minimum amount of output token to receive\n', '     *\n', '     * @return outputAmount         Amount of output tokens sent to the caller\n', '     */\n', '    function redeemExactSetForToken(\n', '        ISetToken _setToken,\n', '        IERC20 _outputToken,\n', '        uint256 _amountSetToken,\n', '        uint256 _minOutputReceive\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        require(_amountSetToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (\n', '            uint256 totalEth, \n', '            uint256[] memory amountComponents, \n', '            Exchange[] memory exchanges\n', '        ) =  _getAmountETHForRedemption(_setToken, components, _amountSetToken);\n', '        \n', '        uint256 outputAmount;\n', '        if (address(_outputToken) == WETH) {\n', '            require(totalEth > _minOutputReceive, "ExchangeIssuance: INSUFFICIENT_OUTPUT_AMOUNT");\n', '            _redeemExactSet(_setToken, _amountSetToken);\n', '            outputAmount = _liquidateComponentsForWETH(components, amountComponents, exchanges);\n', '        } else {\n', '            (uint256 totalOutput, Exchange outTokenExchange) = _getMaxTokenForExactToken(totalEth, address(WETH), address(_outputToken));\n', '            require(totalOutput > _minOutputReceive, "ExchangeIssuance: INSUFFICIENT_OUTPUT_AMOUNT");\n', '            _redeemExactSet(_setToken, _amountSetToken);\n', '            uint256 outputEth = _liquidateComponentsForWETH(components, amountComponents, exchanges);\n', '            outputAmount = _swapExactTokensForTokens(outTokenExchange, WETH, address(_outputToken), outputEth);\n', '        }\n', '        \n', '        _outputToken.safeTransfer(msg.sender, outputAmount);\n', '        emit ExchangeRedeem(msg.sender, _setToken, _outputToken, _amountSetToken, outputAmount);\n', '        return outputAmount;\n', '    }\n', '    \n', '    /**\n', '     * Redeems an exact amount of SetTokens for ETH.\n', '     * The SetToken must be approved by the sender to this contract.\n', '     *\n', '     * @param _setToken             Address of the SetToken to be redeemed\n', '     * @param _amountSetToken       Amount of SetTokens to redeem\n', '     * @param _minEthOut            Minimum amount of ETH to receive\n', '     *\n', '     * @return amountEthOut         Amount of ether sent to the caller\n', '     */\n', '    function redeemExactSetForETH(\n', '        ISetToken _setToken,\n', '        uint256 _amountSetToken,\n', '        uint256 _minEthOut\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        nonReentrant\n', '        returns (uint256)\n', '    {\n', '        require(_amountSetToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (\n', '            uint256 totalEth, \n', '            uint256[] memory amountComponents, \n', '            Exchange[] memory exchanges\n', '        ) =  _getAmountETHForRedemption(_setToken, components, _amountSetToken);\n', '        \n', '        require(totalEth > _minEthOut, "ExchangeIssuance: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        \n', '        _redeemExactSet(_setToken, _amountSetToken);\n', '        \n', '        uint256 amountEthOut = _liquidateComponentsForWETH(components, amountComponents, exchanges);\n', '        \n', '        IWETH(WETH).withdraw(amountEthOut);\n', '        (payable(msg.sender)).sendValue(amountEthOut);\n', '\n', '        emit ExchangeRedeem(msg.sender, _setToken, IERC20(ETH_ADDRESS), _amountSetToken, amountEthOut);\n', '        return amountEthOut;\n', '    }\n', '\n', '    /**\n', '     * Returns an estimated quantity of the specified SetToken given a specified amount of input ERC20 token.\n', '     * Estimating pulls the best price of each component using Uniswap or Sushiswap\n', '     *\n', '     * @param _setToken         Address of the SetToken being issued\n', '     * @param _amountInput      Amount of the input token to spend\n', '     * @param _inputToken       Address of input token.\n', '     *\n', '     * @return                  Estimated amount of SetTokens that will be received\n', '     */\n', '    function getEstimatedIssueSetAmount(\n', '        ISetToken _setToken,\n', '        IERC20 _inputToken,\n', '        uint256 _amountInput\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_amountInput > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        uint256 amountEth;\n', '        if (address(_inputToken) != WETH) {\n', '            // get max amount of WETH for the `_amountInput` amount of input tokens\n', '            (amountEth, ) = _getMaxTokenForExactToken(_amountInput, address(_inputToken), WETH);\n', '        } else {\n', '            amountEth = _amountInput;\n', '        }\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (\n', '            uint256 sumEth, \n', '            uint256[] memory amountEthIn, \n', '            Exchange[] memory exchanges, \n', '            uint256[] memory amountComponents\n', '        ) = _getAmountETHForIssuance(_setToken, components, PreciseUnitMath.preciseUnit());\n', '        \n', '        uint256 maxIndexAmount = PreciseUnitMath.maxUint256();\n', '        \n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            uint256 scaledAmountEth = amountEthIn[i].mul(amountEth).div(sumEth);\n', '            \n', '            // if exchange[i] is Exchange.None then amountTokenOut remains equal to scaledAmountEth\n', '            uint256 amountTokenOut = scaledAmountEth;\n', '            if (exchanges[i] == Exchange.Uniswap) {\n', '                address uniswapPair = _getPair(uniFactory, WETH, components[i]);\n', '                (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(uniswapPair, WETH, components[i]);\n', '                amountTokenOut = UniSushiV2Library.getAmountOut(scaledAmountEth, reserveIn, reserveOut);\n', '            } else if (exchanges[i] == Exchange.Sushiswap) {\n', '                address sushiswapPair = _getPair(sushiFactory, WETH, components[i]);\n', '                (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(sushiswapPair, WETH, components[i]);\n', '                amountTokenOut = UniSushiV2Library.getAmountOut(scaledAmountEth, reserveIn, reserveOut);\n', '            }\n', '            \n', '            maxIndexAmount = Math.min(amountTokenOut.preciseDiv(amountComponents[i]), maxIndexAmount);\n', '        }\n', '        return maxIndexAmount;\n', '    }\n', '    \n', '    /**\n', '    * Returns the amount of input ERC20 tokens required to issue an exact amount of SetTokens.\n', '    *\n', '    * @param _setToken          Address of the SetToken being issued\n', '    * @param _amountSetToken    Amount of SetTokens to issue\n', '    *\n', '    * @return                   Amount of tokens needed to issue specified amount of SetTokens\n', '    */\n', '    function getAmountInToIssueExactSet(\n', '        ISetToken _setToken,\n', '        IERC20 _inputToken,\n', '        uint256 _amountSetToken\n', '    )\n', '        isSetToken(_setToken)\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        require(_amountSetToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (uint256 totalEth, , , ) = _getAmountETHForIssuance(_setToken, components, _amountSetToken);\n', '        \n', '        if (address(_inputToken) == WETH) {\n', '            return totalEth;\n', '        }\n', '        \n', '        (uint256 tokenAmount, ) = _getMinTokenForExactToken(totalEth, address(_inputToken), address(WETH));\n', '        return tokenAmount;\n', '    }\n', '    \n', '    /**\n', '     * Returns amount of output ERC20 tokens received upon redeeming a given amount of SetToken.\n', '     *\n', '     * @param _setToken             Address of SetToken to be redeemed\n', '     * @param _amountSetToken       Amount of SetToken to be redeemed\n', '     * @param _outputToken          Address of output token\n', '     *\n', '     * @return                      Estimated amount of ether/erc20 that will be received\n', '     */\n', '    function getAmountOutOnRedeemSet(\n', '        ISetToken _setToken,\n', '        address _outputToken,\n', '        uint256 _amountSetToken\n', '    ) \n', '        isSetToken(_setToken)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_amountSetToken > 0, "ExchangeIssuance: INVALID INPUTS");\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (uint256 totalEth, , ) = _getAmountETHForRedemption(_setToken, components, _amountSetToken);\n', '        \n', '        if (_outputToken == WETH) {\n', '            return totalEth;\n', '        }\n', '        \n', '        // get maximum amount of tokens for totalEth amount of ETH\n', '        (uint256 tokenAmount, ) = _getMaxTokenForExactToken(totalEth, WETH, _outputToken);\n', '        return tokenAmount;\n', '    }\n', '    \n', '    \n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Sets a max aproval limit for an ERC20 token, provided the current allowance \n', '     * is less than the required allownce. \n', '     * \n', '     * @param _token    Token to approve\n', '     * @param _spender  Spender address to approve\n', '     */\n', '    function _safeApprove(IERC20 _token, address _spender, uint256 _requiredAllowance) internal {\n', '        uint256 allowance = _token.allowance(address(this), _spender);\n', '        if (allowance < _requiredAllowance) {\n', '            _token.safeIncreaseAllowance(_spender, MAX_UINT96 - allowance);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * Issues SetTokens for an exact amount of input WETH. \n', '     * Acquires SetToken components at the best price accross uniswap and sushiswap.\n', '     * Uses the acquired components to issue the SetTokens.\n', '     * \n', '     * @param _setToken         Address of the SetToken being issued\n', '     * @param _minSetReceive    Minimum amount of index to receive\n', '     * @param _totalEthAmount   Total amount of WETH to be used to purchase the SetToken components\n', '     *\n', '     * @return setTokenAmount   Amount of SetTokens issued\n', '     */\n', '    function _issueSetForExactWETH(ISetToken _setToken, uint256 _minSetReceive, uint256 _totalEthAmount) internal returns (uint256) {\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (\n', '            uint256 sumEth, \n', '            uint256[] memory amountEthIn, \n', '            Exchange[] memory exchanges, \n', '            uint256[] memory amountComponents\n', '        ) = _getAmountETHForIssuance(_setToken, components, PreciseUnitMath.preciseUnit());\n', '        \n', '        // Acquire the SetToken components from exchanges\n', '        uint256 setTokenAmount = PreciseUnitMath.maxUint256();\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            uint256 scaledAmountEth = amountEthIn[i].mul(_totalEthAmount).div(sumEth);\n', '            uint256 amountTokenOut = _swapExactTokensForTokens(exchanges[i], WETH, components[i], scaledAmountEth);\n', '            setTokenAmount = Math.min(amountTokenOut.preciseDiv(amountComponents[i]), setTokenAmount);\n', '        }\n', '        \n', '        require(setTokenAmount >= _minSetReceive, "ExchangeIssuance: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        \n', '        basicIssuanceModule.issue(_setToken, setTokenAmount, msg.sender);\n', '        return setTokenAmount;\n', '    }\n', '    \n', '    /**\n', '     * Issues an exact amount of SetTokens using WETH. \n', '     * Acquires SetToken components at the best price accross uniswap and sushiswap.\n', '     * Uses the acquired components to issue the SetTokens.\n', '     * \n', '     * @param _setToken          Address of the SetToken being issued\n', '     * @param _amountSetToken    Amount of SetTokens to be issued\n', '     * @param _maxEther          Max amount of ether that can be used to acquire the SetToken components\n', '     *\n', '     * @return totalEth          Total amount of ether used to acquire the SetToken components\n', '     */\n', '    function _issueExactSetFromWETH(ISetToken _setToken, uint256 _amountSetToken, uint256 _maxEther) internal returns (uint256) {\n', '        \n', '        address[] memory components = _setToken.getComponents();\n', '        (\n', '            uint256 sumEth,\n', '            , \n', '            Exchange[] memory exchanges, \n', '            uint256[] memory amountComponents\n', '        ) = _getAmountETHForIssuance(_setToken, components, _amountSetToken);\n', '        \n', '        require(sumEth <= _maxEther, "ExchangeIssuance: INSUFFICIENT_INPUT_AMOUNT");\n', '        \n', '        uint256 totalEth = 0;\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            uint256 amountEth = _swapTokensForExactTokens(exchanges[i], WETH, components[i], amountComponents[i]);\n', '            totalEth = totalEth.add(amountEth);\n', '        }\n', '        basicIssuanceModule.issue(_setToken, _amountSetToken, msg.sender);\n', '        return totalEth;\n', '    }\n', '    \n', '    /**\n', '     * Redeems a given amount of SetToken.\n', '     * \n', '     * @param _setToken     Address of the SetToken to be redeemed\n', '     * @param _amount       Amount of SetToken to be redeemed\n', '     */\n', '    function _redeemExactSet(ISetToken _setToken, uint256 _amount) internal returns (uint256) {\n', '        _setToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '        basicIssuanceModule.redeem(_setToken, _amount, address(this));\n', '    }\n', '    \n', '    /**\n', '     * Liquidates a given list of SetToken components for WETH.\n', '     * \n', '     * @param _components           An array containing the address of SetToken components\n', '     * @param _amountComponents     An array containing the amount of each SetToken component\n', '     * @param _exchanges            An array containing the exchange on which to liquidate the SetToken component\n', '     *\n', '     * @return                      Total amount of WETH received after liquidating all SetToken components\n', '     */\n', '    function _liquidateComponentsForWETH(address[] memory _components, uint256[] memory _amountComponents, Exchange[] memory _exchanges)\n', '        internal\n', '        returns (uint256)\n', '    {\n', '        uint256 sumEth = 0;\n', '        for (uint256 i = 0; i < _components.length; i++) {\n', '            sumEth = _exchanges[i] == Exchange.None\n', '                ? sumEth.add(_amountComponents[i]) \n', '                : sumEth.add(_swapExactTokensForTokens(_exchanges[i], _components[i], WETH, _amountComponents[i]));\n', '        }\n', '        return sumEth;\n', '    }\n', '    \n', '    /**\n', '     * Gets the total amount of ether required for purchasing each component in a SetToken,\n', '     * to enable the issuance of a given amount of SetTokens.\n', '     * \n', '     * @param _setToken             Address of the SetToken to be issued\n', '     * @param _components           An array containing the addresses of the SetToken components\n', '     * @param _amountSetToken       Amount of SetToken to be issued\n', '     *\n', '     * @return sumEth               The total amount of Ether reuired to issue the set\n', '     * @return amountEthIn          An array containing the amount of ether to purchase each component of the SetToken\n', '     * @return exchanges            An array containing the exchange on which to perform the purchase\n', '     * @return amountComponents     An array containing the amount of each SetToken component required for issuing the given\n', '     *                              amount of SetToken\n', '     */\n', '    function _getAmountETHForIssuance(ISetToken _setToken, address[] memory _components, uint256 _amountSetToken)\n', '        internal\n', '        view\n', '        returns (uint256, uint256[] memory, Exchange[] memory, uint256[] memory)\n', '    {\n', '        uint256 sumEth = 0;\n', '        uint256[] memory amountEthIn = new uint256[](_components.length);\n', '        uint256[] memory amountComponents = new uint256[](_components.length);\n', '        Exchange[] memory exchanges = new Exchange[](_components.length);\n', '        \n', '        for (uint256 i = 0; i < _components.length; i++) {\n', '\n', '            // Check that the component does not have external positions\n', '            require(\n', '                _setToken.getExternalPositionModules(_components[i]).length == 0,\n', '                "ExchangeIssuance: EXTERNAL_POSITIONS_NOT_ALLOWED"\n', '            );\n', '\n', '            // Get minimum amount of ETH to be spent to acquire the required amount of SetToken component\n', '            uint256 unit = uint256(_setToken.getDefaultPositionRealUnit(_components[i]));\n', '            amountComponents[i] = uint256(unit).preciseMul(_amountSetToken);\n', '            \n', '            (amountEthIn[i], exchanges[i]) = _getMinTokenForExactToken(amountComponents[i], WETH, _components[i]);\n', '            sumEth = sumEth.add(amountEthIn[i]);\n', '        }\n', '        return (sumEth, amountEthIn, exchanges, amountComponents);\n', '    }\n', '    \n', '    /**\n', '     * Gets the total amount of ether returned from liquidating each component in a SetToken.\n', '     * \n', '     * @param _setToken             Address of the SetToken to be redeemed\n', '     * @param _components           An array containing the addresses of the SetToken components\n', '     * @param _amountSetToken       Amount of SetToken to be redeemed\n', '     *\n', '     * @return sumEth               The total amount of Ether that would be obtained from liquidating the SetTokens\n', '     * @return amountComponents     An array containing the amount of SetToken component to be liquidated\n', '     * @return exchanges            An array containing the exchange on which to liquidate the SetToken components\n', '     */\n', '    function _getAmountETHForRedemption(ISetToken _setToken, address[] memory _components, uint256 _amountSetToken)\n', '        internal\n', '        view\n', '        returns (uint256, uint256[] memory, Exchange[] memory)\n', '    {\n', '        uint256 sumEth = 0;\n', '        uint256 amountEth = 0;\n', '        \n', '        uint256[] memory amountComponents = new uint256[](_components.length);\n', '        Exchange[] memory exchanges = new Exchange[](_components.length);\n', '        \n', '        for (uint256 i = 0; i < _components.length; i++) {\n', '            \n', '            // Check that the component does not have external positions\n', '            require(\n', '                _setToken.getExternalPositionModules(_components[i]).length == 0,\n', '                "ExchangeIssuance: EXTERNAL_POSITIONS_NOT_ALLOWED"\n', '            );\n', '            \n', '            uint256 unit = uint256(_setToken.getDefaultPositionRealUnit(_components[i]));\n', '            amountComponents[i] = unit.preciseMul(_amountSetToken);\n', '            \n', '            // get maximum amount of ETH received for a given amount of SetToken component\n', '            (amountEth, exchanges[i]) = _getMaxTokenForExactToken(amountComponents[i], _components[i], WETH);\n', '            sumEth = sumEth.add(amountEth);\n', '        }\n', '        return (sumEth, amountComponents, exchanges);\n', '    }\n', '    \n', '    /**\n', '     * Swaps a given amount of an ERC20 token for WETH for the best price on Uniswap/Sushiswap.\n', '     * \n', '     * @param _token    Address of the ERC20 token to be swapped for WETH\n', '     * @param _amount   Amount of ERC20 token to be swapped\n', '     *\n', '     * @return          Amount of WETH received after the swap\n', '     */\n', '    function _swapTokenForWETH(IERC20 _token, uint256 _amount) internal returns (uint256) {\n', '        (, Exchange exchange) = _getMaxTokenForExactToken(_amount, address(_token), WETH);\n', '        IUniswapV2Router02 router = _getRouter(exchange);\n', '        _safeApprove(_token, address(router), _amount);\n', '        return _swapExactTokensForTokens(exchange, address(_token), WETH, _amount);\n', '    }\n', '    \n', '    /**\n', '     * Swap exact tokens for another token on a given DEX.\n', '     *\n', '     * @param _exchange     The exchange on which to peform the swap\n', '     * @param _tokenIn      The address of the input token\n', '     * @param _tokenOut     The address of the output token\n', '     * @param _amountIn     The amount of input token to be spent\n', '     *\n', '     * @return              The amount of output tokens\n', '     */\n', '    function _swapExactTokensForTokens(Exchange _exchange, address _tokenIn, address _tokenOut, uint256 _amountIn) internal returns (uint256) {\n', '        if (_tokenIn == _tokenOut) {\n', '            return _amountIn;\n', '        }\n', '        address[] memory path = new address[](2);\n', '        path[0] = _tokenIn;\n', '        path[1] = _tokenOut;\n', '        return _getRouter(_exchange).swapExactTokensForTokens(_amountIn, 0, path, address(this), block.timestamp)[1];\n', '    }\n', '    \n', '    /**\n', '     * Swap tokens for exact amount of output tokens on a given DEX.\n', '     *\n', '     * @param _exchange     The exchange on which to peform the swap\n', '     * @param _tokenIn      The address of the input token\n', '     * @param _tokenOut     The address of the output token\n', '     * @param _amountOut    The amount of output token required\n', '     *\n', '     * @return              The amount of input tokens spent\n', '     */\n', '    function _swapTokensForExactTokens(Exchange _exchange, address _tokenIn, address _tokenOut, uint256 _amountOut) internal returns (uint256) {\n', '        if (_tokenIn == _tokenOut) {\n', '            return _amountOut;\n', '        }\n', '        address[] memory path = new address[](2);\n', '        path[0] = _tokenIn;\n', '        path[1] = _tokenOut;\n', '        return _getRouter(_exchange).swapTokensForExactTokens(_amountOut, PreciseUnitMath.maxUint256(), path, address(this), block.timestamp)[0];\n', '    }\n', ' \n', '    /**\n', '     * Compares the amount of token required for an exact amount of another token across both exchanges,\n', '     * and returns the min amount.\n', '     *\n', '     * @param _amountOut    The amount of output token\n', '     * @param _tokenA       The address of tokenA\n', '     * @param _tokenB       The address of tokenB\n', '     *\n', '     * @return              The min amount of tokenA required across both exchanges\n', '     * @return              The Exchange on which minimum amount of tokenA is required\n', '     */\n', '    function _getMinTokenForExactToken(uint256 _amountOut, address _tokenA, address _tokenB) internal view returns (uint256, Exchange) {\n', '        if (_tokenA == _tokenB) {\n', '            return (_amountOut, Exchange.None);\n', '        }\n', '        \n', '        uint256 maxIn = PreciseUnitMath.maxUint256() ; \n', '        uint256 uniTokenIn = maxIn;\n', '        uint256 sushiTokenIn = maxIn;\n', '        \n', '        address uniswapPair = _getPair(uniFactory, _tokenA, _tokenB);\n', '        if (uniswapPair != address(0)) {\n', '            (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(uniswapPair, _tokenA, _tokenB);\n', '            // Prevent subtraction overflow by making sure pool reserves are greater than swap amount\n', '            if (reserveOut > _amountOut) {\n', '                uniTokenIn = UniSushiV2Library.getAmountIn(_amountOut, reserveIn, reserveOut);\n', '            }\n', '        }\n', '        \n', '        address sushiswapPair = _getPair(sushiFactory, _tokenA, _tokenB);\n', '        if (sushiswapPair != address(0)) {\n', '            (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(sushiswapPair, _tokenA, _tokenB);\n', '            // Prevent subtraction overflow by making sure pool reserves are greater than swap amount\n', '            if (reserveOut > _amountOut) {\n', '                sushiTokenIn = UniSushiV2Library.getAmountIn(_amountOut, reserveIn, reserveOut);\n', '            }\n', '        }\n', '        \n', '        // Fails if both the values are maxIn\n', '        require(!(uniTokenIn == maxIn && sushiTokenIn == maxIn), "ExchangeIssuance: ILLIQUID_SET_COMPONENT");\n', '        return (uniTokenIn <= sushiTokenIn) ? (uniTokenIn, Exchange.Uniswap) : (sushiTokenIn, Exchange.Sushiswap);\n', '    }\n', '    \n', '    /**\n', '     * Compares the amount of token received for an exact amount of another token across both exchanges,\n', '     * and returns the max amount.\n', '     *\n', '     * @param _amountIn     The amount of input token\n', '     * @param _tokenA       The address of tokenA\n', '     * @param _tokenB       The address of tokenB\n', '     *\n', '     * @return              The max amount of tokens that can be received across both exchanges\n', '     * @return              The Exchange on which maximum amount of token can be received\n', '     */\n', '    function _getMaxTokenForExactToken(uint256 _amountIn, address _tokenA, address _tokenB) internal view returns (uint256, Exchange) {\n', '        if (_tokenA == _tokenB) {\n', '            return (_amountIn, Exchange.None);\n', '        }\n', '        \n', '        uint256 uniTokenOut = 0;\n', '        uint256 sushiTokenOut = 0;\n', '        \n', '        address uniswapPair = _getPair(uniFactory, _tokenA, _tokenB);\n', '        if(uniswapPair != address(0)) {\n', '            (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(uniswapPair, _tokenA, _tokenB);\n', '            uniTokenOut = UniSushiV2Library.getAmountOut(_amountIn, reserveIn, reserveOut);\n', '        }\n', '        \n', '        address sushiswapPair = _getPair(sushiFactory, _tokenA, _tokenB);\n', '        if(sushiswapPair != address(0)) {\n', '            (uint256 reserveIn, uint256 reserveOut) = UniSushiV2Library.getReserves(sushiswapPair, _tokenA, _tokenB);\n', '            sushiTokenOut = UniSushiV2Library.getAmountOut(_amountIn, reserveIn, reserveOut);\n', '        }\n', '        \n', '        // Fails if both the values are 0\n', '        require(!(uniTokenOut == 0 && sushiTokenOut == 0), "ExchangeIssuance: ILLIQUID_SET_COMPONENT");\n', '        return (uniTokenOut >= sushiTokenOut) ? (uniTokenOut, Exchange.Uniswap) : (sushiTokenOut, Exchange.Sushiswap); \n', '    }\n', '    \n', '    /**\n', '     * Returns the pair address for on a given DEX.\n', '     *\n', '     * @param _factory   The factory to address\n', '     * @param _tokenA    The address of tokenA\n', '     * @param _tokenB    The address of tokenB\n', '     *\n', '     * @return           The pair address (Note: address(0) is returned by default if the pair is not available on that DEX)\n', '     */\n', '    function _getPair(address _factory, address _tokenA, address _tokenB) internal view returns (address) {\n', '        return IUniswapV2Factory(_factory).getPair(_tokenA, _tokenB);\n', '    }\n', '    \n', '    /**\n', '     * Returns the router address of a given exchange.\n', '     * \n', '     * @param _exchange     The Exchange whose router address is needed\n', '     *\n', '     * @return              IUniswapV2Router02 router of the given exchange\n', '     */\n', '     function _getRouter(Exchange _exchange) internal view returns(IUniswapV2Router02) {\n', '         return (_exchange == Exchange.Uniswap) ? uniRouter : sushiRouter;\n', '     }\n', '    \n', '}']