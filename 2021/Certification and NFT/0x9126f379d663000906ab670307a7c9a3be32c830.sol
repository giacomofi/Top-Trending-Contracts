['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// File: https://github.com/OpenZeppelin/openzeppelin-contracts/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: browser/Registry.sol\n', '\n', 'pragma solidity ^0.6.7;\n', '\n', '\n', 'contract Proxiable {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '\n', '    function updateCodeAddress(address newAddress) internal {\n', '        require(\n', '            bytes32(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7) == Proxiable(newAddress).proxiableUUID(),\n', '            "Not compatible"\n', '        );\n', '        assembly { // solium-disable-line\n', '            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, newAddress)\n', '        }\n', '    }\n', '    function proxiableUUID() public pure returns (bytes32) {\n', '        return 0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7;\n', '    }\n', '}\n', '\n', 'contract LibraryLockDataLayout {\n', '  bool public initialized = false;\n', '}\n', '\n', 'contract LibraryLock is LibraryLockDataLayout {\n', '    // Ensures no one can manipulate the Logic Contract once it is deployed.\n', '    // PARITY WALLET HACK PREVENTION\n', '\n', '    modifier delegatedOnly() {\n', '        require(initialized == true, "The library is locked. No direct \'call\' is allowed");\n', '        _;\n', '    }\n', '    function initialize() internal {\n', '        initialized = true;\n', '    }\n', '}\n', '\n', 'contract RegistryDataLayout is LibraryLock {\n', '    address public owner;\n', '    \n', '    struct whitelistVotes {\n', '        uint32 yesVotes;\n', '        uint32 noVotes;\n', '        address[] managers;\n', '    }\n', '    mapping(address => whitelistVotes) public whitelistContract;\n', '    \n', '    mapping(address => bool) public whitelist;\n', '    \n', '    struct queuedContract {\n', '        uint256 finalizationBlock;\n', '        bool result;\n', '    }\n', '    mapping(address => queuedContract) public queuedContracts;\n', '    address[] public queueList;\n', '    \n', '    using SafeMath for uint32;\n', '    using SafeMath for uint256;\n', '    \n', '    address public fundContract = 0x2c9728ad35C1CfB16E3C1B5045bC9BA30F37FAc5;\n', '    address public connector = 0x60d70dF1c783b1E5489721c443465684e2756555;\n', '    address public devFund = 0xd66A9D2B706e225204F475c9e70A4c09eEa62199;\n', '    address public rewardsContract = 0x868f7622F57b62330Db8b282044d7EAf067fAcfe;\n', '    address public contractManager;\n', '    address public nyanManager;\n', '    address public selfManager;\n', '    address public nyanVoting;\n', '}\n', '\n', 'interface usedContract {\n', '    function getManagerLimit() external returns(uint32);\n', '    function sendFundETH(address _manager) external payable;\n', '    function getFundETH(uint256 amount) external;\n', '    function returnFundETH() external payable;\n', '    function fundLog(address manager, string calldata reason, address recipient) external payable;\n', '    function isFundManager(address manager) view external returns(bool);\n', '    function checkFundManagerAllowance(address _manager, uint256 ETH) external returns(bool);\n', '    function checkManagerAllowance(address _manager, uint256 ETH) external returns(bool);\n', '    function adjustFundManagerAllowance(address _manager, uint256 ETH, uint256 profit) external;\n', '    function adjustManagerAllowance(address _manager, uint256 ETH, uint256 profit) external;\n', '}\n', '\n', 'contract Registry is RegistryDataLayout, Proxiable {\n', '    constructor() public {\n', '        \n', '    }\n', '    \n', '    function initRegistry(address _nyanManager) public {\n', '        require(!initialized);\n', '        owner = msg.sender;\n', '        initialize();\n', '    }\n', '    \n', '    function updateCode(address newCode) public delegatedOnly  {\n', '        if (owner == address(0)) {\n', '            require(msg.sender == contractManager);\n', '        } else {\n', '            require(msg.sender == owner);\n', '        }\n', '        updateCodeAddress(newCode);\n', '    }\n', '    \n', '    function setContracts(address _contractManager, \n', '                          address _nyanManager, \n', '                          address _selfManager,\n', '                          address _nyanVoting) public {\n', '                              require(msg.sender == owner);\n', '                              contractManager = _contractManager;\n', '                              nyanManager = _nyanManager;\n', '                              selfManager = _selfManager;\n', '                              nyanVoting = _nyanVoting;\n', '    }\n', '    \n', '    function useFundETH(address manager, uint256 ETH, address recipient) public delegatedOnly payable {\n', '        require(whitelist[msg.sender]);\n', '        bool canSpend = usedContract(nyanManager).checkFundManagerAllowance(manager, ETH);\n', '        require(canSpend);\n', '        usedContract(connector).getFundETH(ETH);\n', '        usedContract(connector).fundLog(manager, "used ETH for an investment", recipient);\n', '        require(whitelist[recipient]);\n', '        usedContract(recipient).sendFundETH{value: ETH}(manager);\n', '    }\n', '    \n', '    function returnFundETH(address manager, uint256 profit) public delegatedOnly payable {\n', '        require(whitelist[msg.sender]);\n', '        if (profit > 100) {\n', '            rewardsContract.call{value: profit.mul(40).div(100).sub(10)}("");\n', '            manager.call{value: profit.mul(20).div(100)}("");\n', '            devFund.call{value: profit.mul(10).div(100)}("");\n', '            usedContract(connector).returnFundETH{value: msg.value.sub(profit.mul(70).div(100))}();\n', '        } else {\n', '            usedContract(connector).returnFundETH{value: msg.value}();\n', '        }\n', '        usedContract(connector).fundLog(manager, "returned ETH from an investment", fundContract);\n', '        usedContract(nyanManager).adjustFundManagerAllowance(manager, msg.value, profit);\n', '    }\n', '    \n', '    function useManagerETH(address manager, uint256 ETH, address recipient) public delegatedOnly payable {\n', '        require(whitelist[msg.sender]);\n', '        bool canSpend = usedContract(selfManager).checkManagerAllowance(manager, ETH);\n', '        require(canSpend);\n', '        usedContract(connector).getFundETH(ETH);\n', '        usedContract(connector).fundLog(manager, "used ETH for an investment", recipient);\n', '        require(whitelist[recipient]);\n', '        usedContract(recipient).sendFundETH{value: ETH}(manager);\n', '    }\n', '    \n', '    function returnManagerETH(address manager, uint256 profit) public delegatedOnly payable {\n', '        require(whitelist[msg.sender]);\n', '        if (profit > 100) {\n', '            rewardsContract.call{value: profit.mul(10).div(100).sub(10)}("");\n', '            manager.call{value: profit.mul(20).div(100)}("");\n', '            usedContract(connector).returnFundETH{value: msg.value.sub(profit.mul(30).div(100))}();\n', '            profit = profit.sub(profit.mul(30).div(100));\n', '        } else {\n', '            usedContract(connector).returnFundETH{value: msg.value}();\n', '        }\n', '        usedContract(connector).fundLog(manager, "returned ETH from an investment", fundContract);\n', '        usedContract(selfManager).adjustManagerAllowance(manager, msg.value, profit);\n', '    }\n', '    \n', '    //function to vote on contract to whitelist or blacklist\n', '    function manageContract(address _contract, address _manager, bool vote) public delegatedOnly {\n', '        require(msg.sender == nyanVoting);\n', '        require(usedContract(nyanManager).isFundManager(_manager));\n', '        //check if manager has already voted on contract this round\n', '        bool hasVoted;\n', '        for(uint32 i; i < whitelistContract[_contract].managers.length; i++) {\n', '            if (whitelistContract[_contract].managers[i] == msg.sender) {\n', '                hasVoted = true;\n', '            }\n', '        }\n', '        require(!hasVoted, "You\'ve already voted");\n', "        //add manager's vote to contract\n", '        if (vote) {\n', '            whitelistContract[_contract].yesVotes = uint32(whitelistContract[_contract].yesVotes.add(1));\n', '        } else {\n', '            whitelistContract[_contract].noVotes = uint32(whitelistContract[_contract].noVotes.add(1));\n', '        }\n', '        whitelistContract[_contract].managers.push(msg.sender);\n', '        \n', '        //if all have voted in a direction, contract is whitelisted or blacklisted\n', '        if (whitelistContract[_contract].yesVotes.add(whitelistContract[_contract].noVotes) == usedContract(nyanManager).getManagerLimit()) {\n', '            if (whitelistContract[_contract].yesVotes > whitelistContract[_contract].noVotes) {\n', '                queueList.push(_contract);\n', '                queuedContracts[_contract].finalizationBlock = block.number.add(45500);\n', '                queuedContracts[_contract].result = true;\n', '            }\n', '            if (whitelistContract[_contract].yesVotes < whitelistContract[_contract].noVotes) {\n', '                queueList.push(_contract);\n', '                queuedContracts[_contract].finalizationBlock = block.number.add(45500);\n', '                queuedContracts[_contract].result = false;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function finalizeWhitelist(address _contract) public {\n', '        bool isInQueue;\n', '        for (uint32 i; i < queueList.length; i++) {\n', '            if (queueList[i] == _contract) {\n', '                if (queuedContracts[queueList[i]].finalizationBlock < block.number) {\n', '                    whitelist[_contract] = queuedContracts[queueList[i]].result;\n', '                    removeFromQueue(i);\n', '                    return;\n', '                }\n', '            }\n', '        }\n', '    }\n', '    \n', '    function removeFromQueue(uint index) internal {\n', '        queueList[index] = queueList[queueList.length-1];\n', '        delete queueList[queueList.length-1];\n', '        queueList.pop();\n', '    }\n', '    \n', '    function createWhitelist(address _contract) public {\n', '        require(msg.sender == owner);\n', '        whitelist[_contract] = true;\n', '    }\n', '    \n', '    function checkRegistry(address _contract) public view returns(bool) {\n', '        return whitelist[_contract];\n', '    }\n', '    \n', '    receive() external payable {\n', '        \n', '    }\n', '\n', '}']