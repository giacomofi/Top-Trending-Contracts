['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.0 https://hardhat.org\n', '\n', '// File openzeppelin-solidity/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/GSN/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/ownership/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/IStaking.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '/**\n', ' * @title Staking interface, as defined by EIP-900.\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-900.md\n', ' */\n', 'contract IStaking {\n', '    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '\n', '    function stake(uint256 amount, bytes calldata data) external;\n', '    function stakeFor(address user, uint256 amount, bytes calldata data) external;\n', '    function unstake(uint256 amount, bytes calldata data) external;\n', '    function totalStakedFor(address addr) public view returns (uint256);\n', '    function totalStaked() public view returns (uint256);\n', '    function token() external view returns (address);\n', '\n', '    /**\n', '     * @return False. This application does not support staking history.\n', '     */\n', '    function supportsHistory() external pure returns (bool) {\n', '        return false;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/IERC20Permit.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', 'interface IERC20Permit {\n', '  function permit(address holder, address spender, uint256 nonce, uint256 expiry,\n', '                  bool allowed, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '  function permit(address holder, address spender, uint256 value, uint256 expiry,\n', '                  uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', '// File contracts/TokenPool.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '/**\n', ' * @title A simple holder of tokens.\n', " * This is a simple contract to hold tokens. It's useful in the case where a separate contract\n", ' * needs to hold multiple distinct pools of the same token.\n', ' */\n', 'contract TokenPool is Ownable {\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _token) public {\n', '        token = _token;\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function transfer(address to, uint256 value) external onlyOwner returns (bool) {\n', '        return token.transfer(to, value);\n', '    }\n', '\n', '    function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {\n', "        require(address(token) != tokenToRescue, 'TokenPool: Cannot claim token held by the contract');\n", '\n', '        return IERC20(tokenToRescue).transfer(to, amount);\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20Mintable}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See {_burn} and {_approve}.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, "ERC20: burn amount exceeds allowance"));\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract ERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol, uint8 decimals) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/MasterChefTokenizer.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IMasterChef {\n', '  function deposit(uint256 _pid, uint256 _amount) external;\n', '  function withdraw(uint256 _pid, uint256 _amount) external;\n', '}\n', '\n', 'contract MasterChefTokenizer is Ownable, ERC20, ERC20Detailed {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  address public token; // sushi LP share\n', '  address public masterChef;\n', '  uint256 public pid;\n', '  address private _geyser;\n', '\n', '  constructor(\n', '    string memory _name, // eg. IdleDAI\n', '    string memory _symbol, // eg. IDLEDAI\n', '    address _token,\n', '    uint256 _pid\n', '  ) public ERC20Detailed(_name, _symbol, uint8(18)) {\n', '    token = _token;\n', '    pid = _pid;\n', '    masterChef = address(0xc2EdaD668740f1aA35E4D8f227fB8E17dcA888Cd);\n', '    Ownable(msg.sender);\n', '    IERC20(_token).approve(masterChef, uint256(-1));\n', '  }\n', '\n', '  modifier onlyGeyser() {\n', '    require(msg.sender == _geyser, "Tokenizer: Not Geyser");\n', '    _;\n', '  }\n', '\n', '  function geyser() public view returns (address) {\n', '    return _geyser;\n', '  }\n', '\n', '  function wrap(uint256 _amount) external {\n', '    IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n', '    IMasterChef(masterChef).deposit(pid, _amount);\n', '    _mint(msg.sender, _amount);\n', '  }\n', '\n', '  function unwrap(uint256 _amount, address _account) external {\n', '    IMasterChef(masterChef).withdraw(pid, _amount);\n', '    _burn(msg.sender, _amount);\n', '    IERC20(token).safeTransfer(_account, _amount);\n', '  }\n', '\n', '  function unwrapFor(uint256 _amount, address _account) external onlyGeyser {\n', '    IMasterChef(masterChef).withdraw(pid, _amount);\n', '    _burn(_account, _amount);\n', '    IERC20(token).safeTransfer(_account, _amount);\n', '  }\n', '\n', '  function transferGeyser(address geyser_) external onlyOwner {\n', '    _geyser = geyser_;\n', '  }\n', '\n', '  // used both to rescue SUSHI rewards and eventually other tokens\n', '  function rescueFunds(address tokenToRescue, address to, uint256 amount) external onlyOwner returns (bool) {\n', '    return IERC20(tokenToRescue).transfer(to, amount);\n', '  }\n', '\n', '  function emergencyShutdown(uint256 _amount) external onlyOwner () {\n', '    address _idleFeeTreasury = address(0x69a62C24F16d4914a48919613e8eE330641Bcb94);\n', '\n', '    IMasterChef(masterChef).withdraw(pid, _amount);\n', '    IERC20(token).safeTransfer(_idleFeeTreasury, _amount);\n', '  }\n', '}\n', '\n', '\n', '// File contracts/TokenGeyser.sol\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Token Geyser\n', ' * @dev A smart-contract based mechanism to distribute tokens over time, inspired loosely by\n', ' *      Compound and Uniswap.\n', ' *\n', ' *      Distribution tokens are added to a locked pool in the contract and become unlocked over time\n', ' *      according to a once-configurable unlock schedule. Once unlocked, they are available to be\n', ' *      claimed by users.\n', ' *\n', ' *      A user may deposit tokens to accrue ownership share over the unlocked pool. This owner share\n', ' *      is a function of the number of tokens deposited as well as the length of time deposited.\n', ' *      Specifically, a user\'s share of the currently-unlocked pool equals their "deposit-seconds"\n', ' *      divided by the global "deposit-seconds". This aligns the new token distribution with long\n', ' *      term supporters of the project, addressing one of the major drawbacks of simple airdrops.\n', ' *\n', ' *      More background and motivation available at:\n', ' *      https://github.com/ampleforth/RFCs/blob/master/RFCs/rfc-1.md\n', ' */\n', 'contract TokenGeyser is IStaking, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    event Staked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    event Unstaked(address indexed user, uint256 amount, uint256 total, bytes data);\n', '    event TokensClaimed(address indexed user, uint256 amount);\n', '    event TokensLocked(uint256 amount, uint256 durationSec, uint256 total);\n', '    // amount: Unlocked tokens, total: Total locked tokens\n', '    event TokensUnlocked(uint256 amount, uint256 total);\n', '\n', '    TokenPool private _stakingPool;\n', '    TokenPool private _unlockedPool;\n', '    TokenPool private _lockedPool;\n', '\n', '    MasterChefTokenizer private _tokenizer;\n', '    IERC20 private _unwrappedStakingToken;\n', '    //\n', '    // Time-bonus params\n', '    //\n', '    uint256 public constant BONUS_DECIMALS = 2;\n', '    uint256 public startBonus = 0;\n', '    uint256 public bonusPeriodSec = 0;\n', '\n', '    //\n', '    // Global accounting state\n', '    //\n', '    uint256 public totalLockedShares = 0;\n', '    uint256 public totalStakingShares = 0;\n', '    uint256 private _totalStakingShareSeconds = 0;\n', '    uint256 private _lastAccountingTimestampSec = now;\n', '    uint256 private _maxUnlockSchedules = 0;\n', '    uint256 private _initialSharesPerToken = 0;\n', '\n', '    //\n', '    // User accounting state\n', '    //\n', '    // Represents a single stake for a user. A user may have multiple.\n', '    struct Stake {\n', '        uint256 stakingShares;\n', '        uint256 timestampSec;\n', '    }\n', '\n', '    // Caches aggregated values from the User->Stake[] map to save computation.\n', "    // If lastAccountingTimestampSec is 0, there's no entry for that user.\n", '    struct UserTotals {\n', '        uint256 stakingShares;\n', '        uint256 stakingShareSeconds;\n', '        uint256 lastAccountingTimestampSec;\n', '    }\n', '\n', '    // Aggregated staking values per user\n', '    mapping(address => UserTotals) private _userTotals;\n', '\n', '    // The collection of stakes for each user. Ordered by timestamp, earliest to latest.\n', '    mapping(address => Stake[]) private _userStakes;\n', '\n', '    //\n', '    // Locked/Unlocked Accounting state\n', '    //\n', '    struct UnlockSchedule {\n', '        uint256 initialLockedShares;\n', '        uint256 unlockedShares;\n', '        uint256 lastUnlockTimestampSec;\n', '        uint256 endAtSec;\n', '        uint256 durationSec;\n', '    }\n', '\n', '    UnlockSchedule[] public unlockSchedules;\n', '\n', '    /**\n', '     * @param stakingToken The token users deposit as stake.\n', '     * @param distributionToken The token users receive as they unstake.\n', '     * @param maxUnlockSchedules Max number of unlock stages, to guard against hitting gas limit.\n', '     * @param startBonus_ Starting time bonus, BONUS_DECIMALS fixed point.\n', '     *                    e.g. 25% means user gets 25% of max distribution tokens.\n', '     * @param bonusPeriodSec_ Length of time for bonus to increase linearly to max.\n', '     * @param initialSharesPerToken Number of shares to mint per staking token on first stake.\n', '     */\n', '    constructor(IERC20 stakingToken, IERC20 distributionToken, uint256 maxUnlockSchedules,\n', '                uint256 startBonus_, uint256 bonusPeriodSec_, uint256 initialSharesPerToken,\n', '                IERC20 unwrappedStakingToken_) public {\n', '        // The start bonus must be some fraction of the max. (i.e. <= 100%)\n', "        require(startBonus_ <= 10**BONUS_DECIMALS, 'TokenGeyser: start bonus too high');\n", '        // If no period is desired, instead set startBonus = 100%\n', '        // and bonusPeriod to a small value like 1sec.\n', "        require(bonusPeriodSec_ != 0, 'TokenGeyser: bonus period is zero');\n", "        require(initialSharesPerToken > 0, 'TokenGeyser: initialSharesPerToken is zero');\n", '\n', '        _stakingPool = new TokenPool(stakingToken);\n', '        _unlockedPool = new TokenPool(distributionToken);\n', '        _lockedPool = new TokenPool(distributionToken);\n', '        startBonus = startBonus_;\n', '        bonusPeriodSec = bonusPeriodSec_;\n', '        _maxUnlockSchedules = maxUnlockSchedules;\n', '        _initialSharesPerToken = initialSharesPerToken;\n', '\n', '        _tokenizer = MasterChefTokenizer(address(stakingToken)); // staking token will be the tokenizer\n', '        _unwrappedStakingToken = unwrappedStakingToken_;\n', '\n', '        _unwrappedStakingToken.approve(address(_tokenizer), uint256(-1)); // approve unwrapped LP token to be wrapped\n', '        stakingToken.approve(address(this), uint256(-1)); // approve this address to get staked token from this contract and avoid to change _stakeFor\n', '    }\n', '\n', '    /**\n', '     * @return The token users deposit as stake.\n', '     */\n', '    function getStakingToken() public view returns (IERC20) {\n', '        return _stakingPool.token();\n', '    }\n', '\n', '    /**\n', '     * @return The token users receive as they unstake.\n', '     */\n', '    function getDistributionToken() public view returns (IERC20) {\n', '        assert(_unlockedPool.token() == _lockedPool.token());\n', '        return _unlockedPool.token();\n', '    }\n', '\n', '\n', '    function permitWrapAndStake(uint256 amount, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external {\n', '        IERC20Permit(address(_unwrappedStakingToken)).permit(msg.sender, address(this), amount, expiry, v, r, s);\n', '        wrapAndStake(amount);\n', '    }\n', '\n', '    function permitWrapAndStakeUnlimited(uint256 amount, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external {\n', '        IERC20Permit(address(_unwrappedStakingToken)).permit(msg.sender, address(this), uint256(-1), expiry, v, r, s);\n', '        wrapAndStake(amount);\n', '    }\n', '\n', '    function wrapAndStake(uint256 amount) public {\n', '        _unwrappedStakingToken.transferFrom(msg.sender, address(this), amount);\n', '        _tokenizer.wrap(amount); // tokeniser will wrap tokens and send to geyser contract\n', '        _stakeFor(address(this), msg.sender, amount); // msg.sender is the beneficiary\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the user.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stake(uint256 amount, bytes calldata data) external {\n', '        _stakeFor(msg.sender, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers amount of deposit tokens from the caller on behalf of user.\n', '     * @param user User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     * @param data Not used.\n', '     */\n', '    function stakeFor(address user, uint256 amount, bytes calldata data) external onlyOwner {\n', '        _stakeFor(msg.sender, user, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Private implementation of staking methods.\n', '     * @param staker User address who deposits tokens to stake.\n', '     * @param beneficiary User address who gains credit for this stake operation.\n', '     * @param amount Number of deposit tokens to stake.\n', '     */\n', '    function _stakeFor(address staker, address beneficiary, uint256 amount) private {\n', "        require(amount > 0, 'TokenGeyser: stake amount is zero');\n", "        require(beneficiary != address(0), 'TokenGeyser: beneficiary is zero address');\n", '        require(totalStakingShares == 0 || totalStaked() > 0,\n', "                'TokenGeyser: Invalid state. Staking shares exist, but no staking tokens do');\n", '\n', '        uint256 mintedStakingShares = (totalStakingShares > 0)\n', '            ? totalStakingShares.mul(amount).div(totalStaked())\n', '            : amount.mul(_initialSharesPerToken);\n', "        require(mintedStakingShares > 0, 'TokenGeyser: Stake amount is too small');\n", '\n', '        updateAccounting();\n', '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[beneficiary];\n', '        totals.stakingShares = totals.stakingShares.add(mintedStakingShares);\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        Stake memory newStake = Stake(mintedStakingShares, now);\n', '        _userStakes[beneficiary].push(newStake);\n', '\n', '        // 2. Global Accounting\n', '        totalStakingShares = totalStakingShares.add(mintedStakingShares);\n', '        // Already set in updateAccounting()\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(_stakingPool.token().transferFrom(staker, address(_stakingPool), amount),\n', "            'TokenGeyser: transfer into staking pool failed');\n", '\n', '        emit Staked(beneficiary, amount, totalStakedFor(beneficiary), "");\n', '    }\n', '\n', '    function unstakeAndUnwrap(uint256 amount) external {\n', '        // this sends the rewards + wrapped stake to msg.sender\n', '        _unstake(amount);\n', '        // wLP are burned from msg.sender\n', '        _tokenizer.unwrapFor(amount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @param data Not used.\n', '     */\n', '    function unstake(uint256 amount, bytes calldata data) external {\n', '        _unstake(amount);\n', '    }\n', '\n', '    /**\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens that would be rewarded.\n', '     */\n', '    function unstakeQuery(uint256 amount) public returns (uint256) {\n', '        return _unstake(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstakes a certain amount of previously deposited tokens. User also receives their\n', '     * alotted number of distribution tokens.\n', '     * @param amount Number of deposit tokens to unstake / withdraw.\n', '     * @return The total number of distribution tokens rewarded.\n', '     */\n', '    function _unstake(uint256 amount) private returns (uint256) {\n', '        updateAccounting();\n', '\n', '        // checks\n', "        require(amount > 0, 'TokenGeyser: unstake amount is zero');\n", '        require(totalStakedFor(msg.sender) >= amount,\n', "            'TokenGeyser: unstake amount is greater than total user stakes');\n", '        uint256 stakingSharesToBurn = totalStakingShares.mul(amount).div(totalStaked());\n', "        require(stakingSharesToBurn > 0, 'TokenGeyser: Unable to unstake amount this small');\n", '\n', '        // 1. User Accounting\n', '        UserTotals storage totals = _userTotals[msg.sender];\n', '        Stake[] storage accountStakes = _userStakes[msg.sender];\n', '\n', '        // Redeem from most recent stake and go backwards in time.\n', '        uint256 stakingShareSecondsToBurn = 0;\n', '        uint256 sharesLeftToBurn = stakingSharesToBurn;\n', '        uint256 rewardAmount = 0;\n', '        while (sharesLeftToBurn > 0) {\n', '            Stake storage lastStake = accountStakes[accountStakes.length - 1];\n', '            uint256 stakeTimeSec = now.sub(lastStake.timestampSec);\n', '            uint256 newStakingShareSecondsToBurn = 0;\n', '            if (lastStake.stakingShares <= sharesLeftToBurn) {\n', '                // fully redeem a past stake\n', '                newStakingShareSecondsToBurn = lastStake.stakingShares.mul(stakeTimeSec);\n', '                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '                sharesLeftToBurn = sharesLeftToBurn.sub(lastStake.stakingShares);\n', '                accountStakes.length--;\n', '            } else {\n', '                // partially redeem a past stake\n', '                newStakingShareSecondsToBurn = sharesLeftToBurn.mul(stakeTimeSec);\n', '                rewardAmount = computeNewReward(rewardAmount, newStakingShareSecondsToBurn, stakeTimeSec);\n', '                stakingShareSecondsToBurn = stakingShareSecondsToBurn.add(newStakingShareSecondsToBurn);\n', '                lastStake.stakingShares = lastStake.stakingShares.sub(sharesLeftToBurn);\n', '                sharesLeftToBurn = 0;\n', '            }\n', '        }\n', '        totals.stakingShareSeconds = totals.stakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '        totals.stakingShares = totals.stakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // totals.lastAccountingTimestampSec = now;\n', '\n', '        // 2. Global Accounting\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.sub(stakingShareSecondsToBurn);\n', '        totalStakingShares = totalStakingShares.sub(stakingSharesToBurn);\n', '        // Already set in updateAccounting\n', '        // _lastAccountingTimestampSec = now;\n', '\n', '        // interactions\n', '        require(_stakingPool.transfer(msg.sender, amount),\n', "            'TokenGeyser: transfer out of staking pool failed');\n", '        require(_unlockedPool.transfer(msg.sender, rewardAmount),\n', "            'TokenGeyser: transfer out of unlocked pool failed');\n", '\n', '        emit Unstaked(msg.sender, amount, totalStakedFor(msg.sender), "");\n', '        emit TokensClaimed(msg.sender, rewardAmount);\n', '\n', '        require(totalStakingShares == 0 || totalStaked() > 0,\n', '                "TokenGeyser: Error unstaking. Staking shares exist, but no staking tokens do");\n', '        return rewardAmount;\n', '    }\n', '\n', '    /**\n', '     * @dev Applies an additional time-bonus to a distribution amount. This is necessary to\n', '     *      encourage long-term deposits instead of constant unstake/restakes.\n', '     *      The bonus-multiplier is the result of a linear function that starts at startBonus and\n', '     *      ends at 100% over bonusPeriodSec, then stays at 100% thereafter.\n', '     * @param currentRewardTokens The current number of distribution tokens already alotted for this\n', '     *                            unstake op. Any bonuses are already applied.\n', '     * @param stakingShareSeconds The stakingShare-seconds that are being burned for new\n', '     *                            distribution tokens.\n', '     * @param stakeTimeSec Length of time for which the tokens were staked. Needed to calculate\n', '     *                     the time-bonus.\n', '     * @return Updated amount of distribution tokens to award, with any bonus included on the\n', '     *         newly added tokens.\n', '     */\n', '    function computeNewReward(uint256 currentRewardTokens,\n', '                                uint256 stakingShareSeconds,\n', '                                uint256 stakeTimeSec) private view returns (uint256) {\n', '\n', '        uint256 newRewardTokens =\n', '            totalUnlocked()\n', '            .mul(stakingShareSeconds)\n', '            .div(_totalStakingShareSeconds);\n', '\n', '        if (stakeTimeSec >= bonusPeriodSec) {\n', '            return currentRewardTokens.add(newRewardTokens);\n', '        }\n', '\n', '        uint256 oneHundredPct = 10**BONUS_DECIMALS;\n', '        uint256 bonusedReward =\n', '            startBonus\n', '            .add(oneHundredPct.sub(startBonus).mul(stakeTimeSec).div(bonusPeriodSec))\n', '            .mul(newRewardTokens)\n', '            .div(oneHundredPct);\n', '        return currentRewardTokens.add(bonusedReward);\n', '    }\n', '\n', '    /**\n', '     * @param addr The user to look up staking information for.\n', '     * @return The number of staking tokens deposited for addr.\n', '     */\n', '    function totalStakedFor(address addr) public view returns (uint256) {\n', '        return totalStakingShares > 0 ?\n', '            totalStaked().mul(_userTotals[addr].stakingShares).div(totalStakingShares) : 0;\n', '    }\n', '\n', '    /**\n', '     * @return The total number of deposit tokens staked globally, by all users.\n', '     */\n', '    function totalStaked() public view returns (uint256) {\n', '        return _stakingPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @dev Note that this application has a staking token as well as a distribution token, which\n', '     * may be different. This function is required by EIP-900.\n', '     * @return The deposit token used for staking.\n', '     */\n', '    function token() external view returns (address) {\n', '        return address(getStakingToken());\n', '    }\n', '\n', '    /**\n', '     * @dev A globally callable function to update the accounting state of the system.\n', '     *      Global state and state for the caller are updated.\n', '     * @return [0] balance of the locked pool\n', '     * @return [1] balance of the unlocked pool\n', "     * @return [2] caller's staking share seconds\n", '     * @return [3] global staking share seconds\n', '     * @return [4] Rewards caller has accumulated, optimistically assumes max time-bonus.\n', '     * @return [5] block timestamp\n', '     */\n', '    function updateAccounting() public returns (\n', '        uint256, uint256, uint256, uint256, uint256, uint256) {\n', '\n', '        unlockTokens();\n', '\n', '        // Global accounting\n', '        uint256 newStakingShareSeconds =\n', '            now\n', '            .sub(_lastAccountingTimestampSec)\n', '            .mul(totalStakingShares);\n', '        _totalStakingShareSeconds = _totalStakingShareSeconds.add(newStakingShareSeconds);\n', '        _lastAccountingTimestampSec = now;\n', '\n', '        // User Accounting\n', '        UserTotals storage totals = _userTotals[msg.sender];\n', '        uint256 newUserStakingShareSeconds =\n', '            now\n', '            .sub(totals.lastAccountingTimestampSec)\n', '            .mul(totals.stakingShares);\n', '        totals.stakingShareSeconds =\n', '            totals.stakingShareSeconds\n', '            .add(newUserStakingShareSeconds);\n', '        totals.lastAccountingTimestampSec = now;\n', '\n', '        uint256 totalUserRewards = (_totalStakingShareSeconds > 0)\n', '            ? totalUnlocked().mul(totals.stakingShareSeconds).div(_totalStakingShareSeconds)\n', '            : 0;\n', '\n', '        return (\n', '            totalLocked(),\n', '            totalUnlocked(),\n', '            totals.stakingShareSeconds,\n', '            _totalStakingShareSeconds,\n', '            totalUserRewards,\n', '            now\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Total number of locked distribution tokens.\n', '     */\n', '    function totalLocked() public view returns (uint256) {\n', '        return _lockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Total number of unlocked distribution tokens.\n', '     */\n', '    function totalUnlocked() public view returns (uint256) {\n', '        return _unlockedPool.balance();\n', '    }\n', '\n', '    /**\n', '     * @return Number of unlock schedules.\n', '     */\n', '    function unlockScheduleCount() public view returns (uint256) {\n', '        return unlockSchedules.length;\n', '    }\n', '\n', '    /**\n', '     * @dev This funcion allows the contract owner to add more locked distribution tokens, along\n', '     *      with the associated "unlock schedule". These locked tokens immediately begin unlocking\n', '     *      linearly over the duraction of durationSec timeframe.\n', '     * @param amount Number of distribution tokens to lock. These are transferred from the caller.\n', '     * @param durationSec Length of time to linear unlock the tokens.\n', '     */\n', '    function lockTokens(uint256 amount, uint256 durationSec) external onlyOwner {\n', '        require(unlockSchedules.length < _maxUnlockSchedules,\n', "            'TokenGeyser: reached maximum unlock schedules');\n", '\n', '        // Update lockedTokens amount before using it in computations after.\n', '        updateAccounting();\n', '\n', '        uint256 lockedTokens = totalLocked();\n', '        uint256 mintedLockedShares = (lockedTokens > 0)\n', '            ? totalLockedShares.mul(amount).div(lockedTokens)\n', '            : amount.mul(_initialSharesPerToken);\n', '\n', '        UnlockSchedule memory schedule;\n', '        schedule.initialLockedShares = mintedLockedShares;\n', '        schedule.lastUnlockTimestampSec = now;\n', '        schedule.endAtSec = now.add(durationSec);\n', '        schedule.durationSec = durationSec;\n', '        unlockSchedules.push(schedule);\n', '\n', '        totalLockedShares = totalLockedShares.add(mintedLockedShares);\n', '\n', '        require(_lockedPool.token().transferFrom(msg.sender, address(_lockedPool), amount),\n', "            'TokenGeyser: transfer into locked pool failed');\n", '        emit TokensLocked(amount, durationSec, totalLocked());\n', '    }\n', '\n', '    /**\n', '     * @dev Moves distribution tokens from the locked pool to the unlocked pool, according to the\n', '     *      previously defined unlock schedules. Publicly callable.\n', '     * @return Number of newly unlocked distribution tokens.\n', '     */\n', '    function unlockTokens() public returns (uint256) {\n', '        uint256 unlockedTokens = 0;\n', '        uint256 lockedTokens = totalLocked();\n', '\n', '        if (totalLockedShares == 0) {\n', '            unlockedTokens = lockedTokens;\n', '        } else {\n', '            uint256 unlockedShares = 0;\n', '            for (uint256 s = 0; s < unlockSchedules.length; s++) {\n', '                unlockedShares = unlockedShares.add(unlockScheduleShares(s));\n', '            }\n', '            unlockedTokens = unlockedShares.mul(lockedTokens).div(totalLockedShares);\n', '            totalLockedShares = totalLockedShares.sub(unlockedShares);\n', '        }\n', '\n', '        if (unlockedTokens > 0) {\n', '            require(_lockedPool.transfer(address(_unlockedPool), unlockedTokens),\n', "                'TokenGeyser: transfer out of locked pool failed');\n", '            emit TokensUnlocked(unlockedTokens, totalLocked());\n', '        }\n', '\n', '        return unlockedTokens;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of unlockable shares from a given schedule. The returned value\n', '     *      depends on the time since the last unlock. This function updates schedule accounting,\n', '     *      but does not actually transfer any tokens.\n', '     * @param s Index of the unlock schedule.\n', '     * @return The number of unlocked shares.\n', '     */\n', '    function unlockScheduleShares(uint256 s) private returns (uint256) {\n', '        UnlockSchedule storage schedule = unlockSchedules[s];\n', '\n', '        if(schedule.unlockedShares >= schedule.initialLockedShares) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 sharesToUnlock = 0;\n', '        // Special case to handle any leftover dust from integer division\n', '        if (now >= schedule.endAtSec) {\n', '            sharesToUnlock = (schedule.initialLockedShares.sub(schedule.unlockedShares));\n', '            schedule.lastUnlockTimestampSec = schedule.endAtSec;\n', '        } else {\n', '            sharesToUnlock = now.sub(schedule.lastUnlockTimestampSec)\n', '                .mul(schedule.initialLockedShares)\n', '                .div(schedule.durationSec);\n', '            schedule.lastUnlockTimestampSec = now;\n', '        }\n', '\n', '        schedule.unlockedShares = schedule.unlockedShares.add(sharesToUnlock);\n', '        return sharesToUnlock;\n', '    }\n', '\n', '    /**\n', '     * @dev Lets the owner rescue funds air-dropped to the staking pool.\n', '     * @param tokenToRescue Address of the token to be rescued.\n', '     * @param to Address to which the rescued funds are to be sent.\n', '     * @param amount Amount of tokens to be rescued.\n', '     * @return Transfer success.\n', '     */\n', '    function rescueFundsFromStakingPool(address tokenToRescue, address to, uint256 amount)\n', '        public onlyOwner returns (bool) {\n', '\n', '        return _stakingPool.rescueFunds(tokenToRescue, to, amount);\n', '    }\n', '\n', '    /**\n', "     * @dev Let's the owner emergency shutdown the geyser. Funds from each TokenPool as sent to the idleFeeTreausry\n", '     */\n', '    function emergencyShutdown() external onlyOwner {\n', '        address _idleFeeTreasury = address(0x69a62C24F16d4914a48919613e8eE330641Bcb94);\n', '\n', '        _stakingPool.transfer(_idleFeeTreasury, _stakingPool.balance()); // send the wLP token to fee treasury, a subsequent unwrap will need to be called\n', '        _unlockedPool.transfer(_idleFeeTreasury, _unlockedPool.balance());\n', '        _lockedPool.transfer(_idleFeeTreasury, _lockedPool.balance());\n', '    }\n', '}']