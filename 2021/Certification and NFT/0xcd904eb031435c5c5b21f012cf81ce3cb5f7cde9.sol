['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface ICirculatingMarketCapOracle {\n', '  function getCirculatingMarketCap(address) external view returns (uint256);\n', '\n', '  function getCirculatingMarketCaps(address[] calldata) external view returns (uint256[] memory);\n', '\n', '  function updateCirculatingMarketCaps(address[] calldata) external;\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IScoringStrategy {\n', '  function getTokenScores(address[] calldata tokens) external view returns (uint256[] memory scores);\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.6.0;\n', '\n', '/* ========== External Interfaces ========== */\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '/* ========== External Libraries ========== */\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/* ========== Internal Interfaces ========== */\n', 'import "../interfaces/IScoringStrategy.sol";\n', 'import "../interfaces/ICirculatingMarketCapOracle.sol";\n', '\n', '\n', 'contract ScoreByCMCPegged20 is Ownable, IScoringStrategy {\n', '  using SafeMath for uint256;\n', '\n', '  // Chainlink or other circulating market cap oracle\n', '  address public circulatingMarketCapOracle;\n', '\n', '  constructor(address circulatingMarketCapOracle_) public Ownable() {\n', '    circulatingMarketCapOracle = circulatingMarketCapOracle_;\n', '  }\n', '\n', '  function getTokenScores(address[] calldata tokens)\n', '    external\n', '    view\n', '    override\n', '    returns (uint256[] memory scores)\n', '  {\n', '    require(tokens.length >= 5, "Not enough tokens");\n', '    uint256[] memory marketCaps = ICirculatingMarketCapOracle(circulatingMarketCapOracle).getCirculatingMarketCaps(tokens);\n', '    uint256[] memory positions = sortAndReturnPositions(marketCaps);\n', '    uint256 subscore = calculateIndexSum(marketCaps, positions);\n', '    uint256 len = positions.length;\n', '    scores = new uint256[](len);\n', '    scores[positions[0]] = peggedScore(subscore);\n', '    scores[positions[1]] = peggedScore(subscore);\n', '    for (uint i = 2; i < 5; i++) {\n', '      scores[positions[i]] = downscaledScore(marketCaps[i]);\n', '    }\n', '    for (uint256 j = 5; j < len; j++) {\n', '      scores[positions[j]] = 0;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Sort a list of market caps and return an array with the index each\n', '   * sorted market cap occupied in the unsorted list.\n', '   *\n', '   * Example: [1, 2, 3] => [2, 1, 0]\n', '   *\n', '   * Note: This modifies the original list.\n', '   */\n', '  function sortAndReturnPositions(uint256[] memory marketCaps) internal pure returns(uint256[] memory positions) {\n', '    uint256 len = marketCaps.length;\n', '    positions = new uint256[](len);\n', '    for (uint256 i = 0; i < len; i++) positions[i] = i;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 marketCap = marketCaps[i];\n', '      uint256 position = positions[i];\n', '      uint256 j = i - 1;\n', '      while (int(j) >= 0 && marketCaps[j] < marketCap) {\n', '        marketCaps[j + 1] = marketCaps[j];\n', '        positions[j+1] = positions[j];\n', '        j--;\n', '      }\n', '      marketCaps[j+1] = marketCap;\n', '      positions[j+1] = position;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Update the address of the circulating market cap oracle.\n', '   */\n', '  function setCirculatingMarketCapOracle(address circulatingMarketCapOracle_) external onlyOwner {\n', '    circulatingMarketCapOracle = circulatingMarketCapOracle_;\n', '  }\n', '  \n', '  /**\n', '   * @dev Returns the sum of the third, fourth and fifth highest market caps.\n', "   * If WETH and WBTC are included, they're always going to be the top two, and we only want three others.\n", '   * Require statement unnecessary: already included in caller function getTokenScores\n', '   **/\n', '  function calculateIndexSum(uint256[] memory marketCaps, uint256[] memory positions) internal pure returns(uint256 subtotal) {\n', '    for (uint256 i = 2; i < 5; i++) {\n', '      subtotal += marketCaps[positions[i]];\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Given a sum score corresponding to the total CMC of the top three non-WETH/WBTC elements (the three other\n', '   * elements that we want to include), returns a value corresponding to 20% of said sum for pegged weights.\n', '   **/\n', '  function peggedScore(uint256 subscore) internal pure returns(uint256) {\n', '    return (subscore.mul(20)).div(100e18);\n', '  }\n', '  \n', '  /**\n', '   * @dev Given a circulating market cap retrieved via oracle (a component of the result of calculateIndexSum),\n', '   * scale the value down by 60% (the remnant after pegging WETH and WBTC to 20% each).\n', '   **/\n', '  function downscaledScore(uint256 oldScore) internal pure returns(uint256) {\n', '    return (oldScore.mul(60)).div(100e18);\n', '  }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "metadata": {\n', '    "useLiteralContent": false\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']