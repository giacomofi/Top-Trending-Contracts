['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.3;\n', "import { ITokenManager, ISafeMath } from './Interfaces.sol';\n", "import { ERC20 } from './ERC20.sol';\n", '\n', '// ----------------------------------------------------------------------------\n', '// Klade Omega Tokens-Difficulty Derivative\n', '// ----------------------------------------------------------------------------\n', 'contract KladeOmegaTokenQ32021 is ERC20 {\n', '    uint public constant expiration = 1632960000;\n', '    uint public constant required_collateral = 127000;\n', '\n', '    uint public omega_token_payout;\n', '    bool public payout_set;\n', '\n', '    address immutable public KladeAddress1;\n', '    address immutable public KladeAddress2;\n', '    address immutable public ChainlinkReceiverAddress;\n', '    address immutable public TokenManagerAddress;\n', '\n', '    constructor(address klade_address1, address klade_address2, ISafeMath safemath_contract, address receiver_address, address manager_address)\n', '        ERC20("KOTQ32021", "KOmegaQ32021", 18, 0, safemath_contract) public {\n', '        KladeAddress1 = klade_address1;\n', '        KladeAddress2 = klade_address2;\n', '\n', '        ChainlinkReceiverAddress = receiver_address;\n', '        TokenManagerAddress = manager_address;\n', '    }\n', '\n', '    /**\n', '     * Mints Klade Omega tokens\n', '     * @param omega_token_recipient address - The owner of the newly minted alpha token(s)\n', '     * @param numToMint uint256 - The number of alpha tokens minted in this transactions in base units(_decimals)\n', '     */\n', '    function mint_tokens(address omega_token_recipient, uint256 numToMint) external returns (bool success) {\n', '        require(msg.sender == TokenManagerAddress, "Only the tokenmanager contract can mint Klade tokens");\n', '        _totalSupply = safemath.add(numToMint, _totalSupply);\n', '        balances[omega_token_recipient] = safemath.add(balances[omega_token_recipient], numToMint);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * If an address owns omega tokens, after expiry that address can\n', '     * call this function to claim the WBTC payout it is entitled to for these tokens.\n', '     * The omega tokens for which payout is claimed are burned afterward.\n', '     * @param payout_recipient address - The recipient of the WBTC payout\n', '     * @param num uint - Number of tokens to burn and get payout for\n', '     */\n', '    function payout(address payout_recipient, uint num) external {\n', '        require(block.timestamp > expiration, "Tokens have not reached expiration, please wait until after expiration for payouts");\n', '        require(payout_set, "Payouts have not been set");\n', '\n', '        balances[msg.sender] = safemath.sub(balances[msg.sender], num); // reverts if msg.sender does not own at least num tokens\n', '        _totalSupply = safemath.sub(_totalSupply, num);\n', '\n', '        emit Transfer(msg.sender, address(0), num); //Burn tokens after payout\n', '        uint payout_amount = safemath.div(safemath.mul(num, omega_token_payout), 10**18);\n', '        require(ITokenManager(TokenManagerAddress).payout("Q32021", payout_recipient, payout_amount));\n', '    }\n', '\n', '\n', '    /**\n', '     * set_payout should be called by the ChainlinkReceiver\n', '     * when the quarter is over and the payout has been calculated\n', '     * @param payout_amount uint - The payout amount in WBTC base units for a single alpha token\n', '     */\n', '    function set_payout(uint payout_amount) external {\n', '        require(msg.sender == ChainlinkReceiverAddress, "Only the ChainlinkReceiver can set the payouts");\n', '        require(!payout_set, "Payouts have already been set");\n', '        require(required_collateral >= payout_amount, "1 token\'s payout is higher than 1 token pair\'s required collateral");\n', '        require(block.timestamp > expiration, "Tokens have not reached expiration, please wait until after expiration to set payouts");\n', '        \n', '        omega_token_payout = payout_amount;\n', '        payout_set = true;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Don't accept ETH\n", '    // ------------------------------------------------------------------------\n', '    fallback () external payable {\n', '        revert();\n', '    }\n', '}']