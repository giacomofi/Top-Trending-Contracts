['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '// File: contracts\\farming\\util\\DFOHub.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: contracts\\farming\\dfo\\DFOBasedFarmExtensionFactory.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'contract DFOBasedFarmExtensionFactory {\n', '\n', '    address public doubleProxy;\n', '\n', '    address public model;\n', '\n', '    event ExtensionCloned(address indexed extensionAddress, address indexed sender);\n', '\n', '    constructor(address doubleProxyAddress, address modelAddress) {\n', '        doubleProxy = doubleProxyAddress;\n', '        model = modelAddress;\n', '    }\n', '\n', '    function setDoubleProxy(address doubleProxyAddress) public onlyDFO {\n', '        doubleProxy = doubleProxyAddress;\n', '    }\n', '\n', '    function setModel(address modelAddress) public onlyDFO {\n', '        model = modelAddress;\n', '    }\n', '\n', '    function cloneModel() public returns(address clonedExtension) {\n', '        emit ExtensionCloned(clonedExtension = _clone(model), msg.sender);\n', '    }\n', '\n', '    function _clone(address original) private returns (address copy) {\n', '        assembly {\n', '            mstore(\n', '                0,\n', '                or(\n', '                    0x5880730000000000000000000000000000000000000000803b80938091923cF3,\n', '                    mul(original, 0x1000000000000000000)\n', '                )\n', '            )\n', '            copy := create(0, 0, 32)\n', '            switch extcodesize(copy)\n', '                case 0 {\n', '                    invalid()\n', '                }\n', '        }\n', '    }\n', '\n', '    modifier onlyDFO() {\n', '        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized.");\n', '        _;\n', '    }\n', '}']