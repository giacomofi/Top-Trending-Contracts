['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface IERC165 {\n', '\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '    */\n', '\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', '*/\n', '\n', 'interface IERC721 is IERC165 {\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of NFTs in `owner`'s account.\n", '    */\n', '\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '    \n', '    \n', '\n', '    function royaltyFee(uint256 tokenId) external view returns(uint256);\n', '    function getCreator(uint256 tokenId) external view returns(address);\n', '\n', '    /**\n', '     * @dev Returns the owner of the NFT specified by `tokenId`.\n', '     */\n', '\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     *\n', '     *\n', '     * Requirements:\n', '     * - `from`, `to` cannot be zero.\n', '     * - `tokenId` must be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this\n', '     * NFT by either {approve} or {setApprovalForAll}.\n', '     */\n', '\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers a specific NFT (`tokenId`) from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Requirements:\n', '     * - If the caller is not `from`, it must be approved to move this NFT by\n', '     * either {approve} or {setApprovalForAll}.\n', '     */\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '    function approve(address to, uint256 tokenId) external;\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', 'interface IERC1155 is IERC165 {\n', '\n', '    event TransferSingle(address indexed _operator, address indexed _from, address indexed _to, uint256 _id, uint256 _value);\n', '    event TransferBatch(address indexed _operator, address indexed _from, address indexed _to, uint256[] _ids, uint256[] _values);\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '    event URI(string _value, uint256 indexed _id);\n', '\n', '    /**\n', '        @notice Transfers `_value` amount of an `_id` from the `_from` address to the `_to` address specified (with safety call).\n', '        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n', '        MUST revert if `_to` is the zero address.\n', '        MUST revert if balance of holder for token `_id` is lower than the `_value` sent.\n', '        MUST revert on any other error.\n', '        MUST emit the `TransferSingle` event to reflect the balance change (see "Safe Transfer Rules" section of the standard).\n', '        After the above conditions are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call `onERC1155Received` on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).\n', '        @param _from    Source address\n', '        @param _to      Target address\n', '        @param _id      ID of the token type\n', '        @param _value   Transfer amount\n', '        @param _data    Additional data with no specified format, MUST be sent unaltered in call to `onERC1155Received` on `_to`\n', '    */\n', '\n', '    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _value, bytes calldata _data) external;\n', '\n', '    /**\n', '        @notice Transfers `_values` amount(s) of `_ids` from the `_from` address to the `_to` address specified (with safety call).\n', '        @dev Caller must be approved to manage the tokens being transferred out of the `_from` account (see "Approval" section of the standard).\n', '        MUST revert if `_to` is the zero address.\n', '        MUST revert if length of `_ids` is not the same as length of `_values`.\n', '        MUST revert if any of the balance(s) of the holder(s) for token(s) in `_ids` is lower than the respective amount(s) in `_values` sent to the recipient.\n', '        MUST revert on any other error.\n', '        MUST emit `TransferSingle` or `TransferBatch` event(s) such that all the balance changes are reflected (see "Safe Transfer Rules" section of the standard).\n', '        Balance changes and events MUST follow the ordering of the arrays (_ids[0]/_values[0] before _ids[1]/_values[1], etc).\n', '        After the above conditions for the transfer(s) in the batch are met, this function MUST check if `_to` is a smart contract (e.g. code size > 0). If so, it MUST call the relevant `ERC1155TokenReceiver` hook(s) on `_to` and act appropriately (see "Safe Transfer Rules" section of the standard).\n', '        @param _from    Source address\n', '        @param _to      Target address\n', '        @param _ids     IDs of each token type (order and length must match _values array)\n', '        @param _values  Transfer amounts per token type (order and length must match _ids array)\n', '        @param _data    Additional data with no specified format, MUST be sent unaltered in call to the `ERC1155TokenReceiver` hook(s) on `_to`\n', '    */\n', '\n', '    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _values, bytes calldata _data) external;\n', '\n', '    /**\n', "        @notice Get the balance of an account's Tokens.\n", '        @param _owner  The address of the token holder\n', '        @param _id     ID of the Token\n', "        @return        The _owner's balance of the Token type requested\n", '    */\n', '\n', '    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n', '    function royaltyFee(uint256 tokenId) external view returns(uint256);\n', '    function getCreator(uint256 tokenId) external view returns(address);\n', '\n', '    /**\n', '        @notice Get the balance of multiple account/token pairs\n', '        @param _owners The addresses of the token holders\n', '        @param _ids    ID of the Tokens\n', "        @return        The _owner's balance of the Token types requested (i.e. balance for each (owner, id) pair)\n", '    */\n', '\n', '    function balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids) external view returns (uint256[] memory);\n', '\n', '\n', '    /**\n', '        @notice Enable or disable approval for a third party ("operator") to manage all of the caller\'s tokens.\n', '        @dev MUST emit the ApprovalForAll event on success.\n', '        @param _operator  Address to add to the set of authorized operators\n', '        @param _approved  True if the operator is approved, false to revoke approval\n', '    */\n', '\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '    /**\n', '        @notice Queries the approval status of an operator for a given owner.\n', '        @param _owner     The owner of the Tokens\n', '        @param _operator  Address of authorized operator\n', '        @return           True if the operator is approved, false if not\n', '    */\n', '\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', '*/\n', '\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '    */\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '    */\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '    */\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '    */\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '    */\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '    */ \n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', '\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */    \n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */    \n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */    \n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */    \n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */    \n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}    \n', '\n', '    \n', 'contract TransferProxy {\n', '\n', '    function erc721safeTransferFrom(IERC721 token, address from, address to, uint256 tokenId) external  {\n', '        token.safeTransferFrom(from, to, tokenId);\n', '    }\n', '\n', '    function erc1155safeTransferFrom(IERC1155 token, address from, address to, uint256 id, uint256 value, bytes calldata data) external  {\n', '        token.safeTransferFrom(from, to, id, value, data);\n', '    }\n', '    \n', '    function erc20safeTransferFrom(IERC20 token, address from, address to, uint256 value) external  {\n', '        require(token.transferFrom(from, to, value), "failure while transferring");\n', '    }   \n', '}\n', '\n', 'contract Trade {\n', '    using SafeMath for uint256;\n', '\n', '    enum BuyingAssetType {ERC1155, ERC721}\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event SellerFee(uint8 sellerFee);\n', '    event BuyerFee(uint8 buyerFee);\n', '    event BuyAsset(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\n', '    event ExecuteBid(address indexed assetOwner , uint256 indexed tokenId, uint256 quantity, address indexed buyer);\n', '\n', '    uint8 private buyerFeePermille;\n', '    uint8 private sellerFeePermille;\n', '    TransferProxy public transferProxy;\n', '    address public owner;\n', '\n', '    struct Fee {\n', '        uint platformFee;\n', '        uint assetFee;\n', '        uint royaltyFee;\n', '        uint price;\n', '        address tokenCreator;\n', '    }\n', '\n', '    /* An ECDSA signature. */\n', '    struct Sign {\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    struct Order {\n', '        address seller;\n', '        address buyer;\n', '        address erc20Address;\n', '        address nftAddress;\n', '        BuyingAssetType nftType;\n', '        uint unitPrice;\n', '        uint amount;\n', '        uint tokenId;\n', '        uint qty;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    constructor (uint8 _buyerFee, uint8 _sellerFee, TransferProxy _transferProxy) {\n', '        buyerFeePermille = _buyerFee;\n', '        sellerFeePermille = _sellerFee;\n', '        transferProxy = _transferProxy;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function buyerServiceFee() public view virtual returns (uint8) {\n', '        return buyerFeePermille;\n', '    }\n', '\n', '    function sellerServiceFee() public view virtual returns (uint8) {\n', '        return sellerFeePermille;\n', '    }\n', '\n', '    function setBuyerServiceFee(uint8 _buyerFee) public onlyOwner returns(bool) {\n', '        buyerFeePermille = _buyerFee;\n', '        emit BuyerFee(buyerFeePermille);\n', '        return true;\n', '    }\n', '\n', '    function setSellerServiceFee(uint8 _sellerFee) public onlyOwner returns(bool) {\n', '        sellerFeePermille = _sellerFee;\n', '        emit SellerFee(sellerFeePermille);\n', '        return true;\n', '    }\n', '\n', '    function ownerTransfership(address newOwner) public onlyOwner returns(bool){\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '        return true;\n', '    }\n', '\n', '    function getSigner(bytes32 hash, Sign memory sign) internal pure returns(address) {\n', '        return ecrecover(keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash)), sign.v, sign.r, sign.s);\n', '    }\n', '\n', '    function verifySellerSign(address seller, uint256 tokenId, uint amount, address paymentAssetAddress, address assetAddress, Sign memory sign) internal pure {\n', '        bytes32 hash = keccak256(abi.encodePacked(assetAddress,tokenId,paymentAssetAddress,amount));\n', '        require(seller == getSigner(hash, sign), "seller sign verification failed");\n', '    }\n', '\n', '    function verifyBuyerSign(address buyer, uint256 tokenId, uint amount, address paymentAssetAddress, address assetAddress, uint qty, Sign memory sign) internal pure {\n', '        bytes32 hash = keccak256(abi.encodePacked(assetAddress,tokenId,paymentAssetAddress,amount,qty));\n', '        require(buyer == getSigner(hash, sign), "buyer sign verification failed");\n', '    }\n', '\n', '    function getFees(uint paymentAmt, BuyingAssetType buyingAssetType, address buyingAssetAddress, uint tokenId) internal view returns(Fee memory){\n', '        address tokenCreator;\n', '        uint platformFee;\n', '        uint royaltyFee;\n', '        uint assetFee;\n', '        uint royaltyPermille;\n', '        uint price = paymentAmt.mul(1000).div((1000+buyerFeePermille));\n', '        uint buyerFee = paymentAmt.sub(price);\n', '        uint sellerFee = price.mul(sellerFeePermille).div(1000);\n', '        platformFee = buyerFee.add(sellerFee);\n', '        if(buyingAssetType == BuyingAssetType.ERC721) {\n', '            royaltyPermille = ((IERC721(buyingAssetAddress).royaltyFee(tokenId)));\n', '            tokenCreator = ((IERC721(buyingAssetAddress).getCreator(tokenId)));\n', '        }\n', '        if(buyingAssetType == BuyingAssetType.ERC1155)  {\n', '            royaltyPermille = ((IERC1155(buyingAssetAddress).royaltyFee(tokenId)));\n', '            tokenCreator = ((IERC1155(buyingAssetAddress).getCreator(tokenId)));\n', '        }\n', '        royaltyFee = price.mul(royaltyPermille).div(1000);\n', '        assetFee = price.sub(royaltyFee).sub(sellerFee);\n', '        return Fee(platformFee, assetFee, royaltyFee, price, tokenCreator);\n', '    }\n', '\n', '    function tradeAsset(Order memory order, Fee memory fee) internal virtual {\n', '        if(order.nftType == BuyingAssetType.ERC721) {\n', '            transferProxy.erc721safeTransferFrom(IERC721(order.nftAddress), order.seller, order.buyer, order.tokenId);\n', '        }\n', '        if(order.nftType == BuyingAssetType.ERC1155)  {\n', '            transferProxy.erc1155safeTransferFrom(IERC1155(order.nftAddress), order.seller, order.buyer, order.tokenId, order.qty, ""); \n', '        }\n', '        if(fee.platformFee > 0) {\n', '            transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), order.buyer, owner, fee.platformFee);\n', '        }\n', '        if(fee.royaltyFee > 0) {\n', '            transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), order.buyer, fee.tokenCreator, fee.royaltyFee);\n', '        }\n', '        transferProxy.erc20safeTransferFrom(IERC20(order.erc20Address), order.buyer, order.seller, fee.assetFee);\n', '    }\n', '\n', '    function buyAsset(Order memory order, Sign memory sign) public returns(bool) {\n', '        Fee memory fee = getFees(order.amount, order.nftType, order.nftAddress, order.tokenId);\n', '        require((fee.price >= order.unitPrice * order.qty), "Paid invalid amount");\n', '        verifySellerSign(order.seller, order.tokenId, order.unitPrice, order.erc20Address, order.nftAddress, sign);\n', '        order.buyer = msg.sender;\n', '        tradeAsset(order, fee);\n', '        emit BuyAsset(order.seller , order.tokenId, order.qty, msg.sender);\n', '        return true;\n', '    }\n', '\n', '    function executeBid(Order memory order, Sign memory sign) public returns(bool) {\n', '        Fee memory fee = getFees(order.amount, order.nftType, order.nftAddress, order.tokenId);\n', '        verifyBuyerSign(order.buyer, order.tokenId, order.amount, order.erc20Address, order.nftAddress, order.qty, sign);\n', '        order.seller = msg.sender;\n', '        tradeAsset(order, fee);\n', '        emit ExecuteBid(msg.sender , order.tokenId, order.qty, order.buyer);\n', '        return true;\n', '    }\n', '}']