['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * Babylonian square root, courtesy of dapp-bin, RJ Catalona (https://github.com/VoR0220), and Uniswap.\n', ' * dapp-bin PR: https://github.com/ethereum/dapp-bin/pull/50/files\n', " * RJ Catalona's branch of dapp-bin: https://github.com/VoR0220/dapp-bin/blob/VoR0220-patch-1/library/math.sol\n", ' * Uniswap: https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/libraries/Math.sol\n', ' */\n', '\n', 'library Sqrt {\n', '\t// babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '\tfunction sqrt(uint256 y) internal pure returns (uint256 z) {\n', '\t\tif (y > 3) {\n', '\t\t\tz = y;\n', '\t\t\tuint256 x = y / 2 + 1;\n', '\t\t\twhile (x < z) {\n', '\t\t\t\tz = x;\n', '\t\t\t\tx = (y / x + x) / 2;\n', '\t\t\t}\n', '\t\t} else if (y != 0) {\n', '\t\t\tz = 1;\n', '\t\t}\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '\n', '/**\n', ' * Copyright 2021 weiWard LLC\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' *   http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', 'import "./interfaces/IValuePerToken.sol";\n', 'import "../libraries/Sqrt.sol";\n', '\n', 'interface IUniswapV2Factory {\n', '\tfunction feeTo() external view returns (address);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '\tfunction factory() external view returns (address);\n', '\n', '\tfunction getReserves()\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint112 reserve0,\n', '\t\t\tuint112 reserve1,\n', '\t\t\tuint32 blockTimestampLast\n', '\t\t);\n', '\n', '\tfunction kLast() external view returns (uint256);\n', '\n', '\tfunction token0() external view returns (address);\n', '\n', '\tfunction token1() external view returns (address);\n', '\n', '\tfunction totalSupply() external view returns (uint256);\n', '}\n', '\n', 'contract ValuePerUNIV2 is IValuePerToken {\n', '\tusing SafeMath for uint256;\n', '\n', '\t/* Immutable Public State */\n', '\n', '\taddress public immutable override token;\n', '\taddress public immutable valueToken;\n', '\n', '\t/* Constructor */\n', '\n', '\tconstructor(address _token, address _valueToken) {\n', '\t\tIUniswapV2Pair tokenHandle = IUniswapV2Pair(_token);\n', '\t\taddress token0 = tokenHandle.token0();\n', '\t\taddress token1 = tokenHandle.token1();\n', '\n', '\t\trequire(\n', '\t\t\t_valueToken == token0 || _valueToken == token1,\n', '\t\t\t"ValuePerUNIV2: pool lacks token"\n', '\t\t);\n', '\n', '\t\ttoken = _token;\n', '\t\tvalueToken = _valueToken;\n', '\t}\n', '\n', '\t/* External Views */\n', '\n', '\tfunction valuePerToken()\n', '\t\texternal\n', '\t\tview\n', '\t\toverride\n', '\t\treturns (uint256 numerator, uint256 denominator)\n', '\t{\n', '\t\tIUniswapV2Pair tokenHandle = IUniswapV2Pair(token);\n', '\t\tuint256 totalSupply = tokenHandle.totalSupply();\n', '\t\t(uint112 reserve0, uint112 reserve1, ) = tokenHandle.getReserves();\n', '\n', '\t\t// Adjust totalSupply when feeOn\n', '\t\t// Minted fee liquidity is equivalent to 1/6th of the growth in sqrt(k)\n', '\t\tif (feeOn()) {\n', '\t\t\tuint256 kLast = tokenHandle.kLast();\n', '\t\t\tif (kLast > 0) {\n', '\t\t\t\tuint256 rootK = Sqrt.sqrt(uint256(reserve0).mul(reserve1));\n', '\t\t\t\tuint256 rootKLast = Sqrt.sqrt(kLast);\n', '\t\t\t\tif (rootK > rootKLast) {\n', '\t\t\t\t\tuint256 n = totalSupply.mul(rootK - rootKLast);\n', '\t\t\t\t\tuint256 d = rootK.mul(5).add(rootKLast);\n', '\t\t\t\t\tuint256 feeLiquidity = n / d;\n', '\t\t\t\t\ttotalSupply = totalSupply.add(feeLiquidity);\n', '\t\t\t\t}\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\taddress token0 = tokenHandle.token0();\n', '\n', '\t\t// Use correct reserve\n', '\t\tnumerator = valueToken == token0 ? reserve0 : reserve1;\n', '\t\tdenominator = totalSupply;\n', '\t}\n', '\n', '\t/* Public Views */\n', '\n', '\tfunction feeOn() public view returns (bool) {\n', '\t\taddress factory = IUniswapV2Pair(token).factory();\n', '\t\taddress feeTo = IUniswapV2Factory(factory).feeTo();\n', '\t\treturn feeTo != address(0);\n', '\t}\n', '}\n', '\n', '// SPDX-License-Identifier: Apache-2.0\n', '\n', '/**\n', ' * Copyright 2021 weiWard LLC\n', ' *\n', ' * Licensed under the Apache License, Version 2.0 (the "License");\n', ' * you may not use this file except in compliance with the License.\n', ' * You may obtain a copy of the License at\n', ' *\n', ' *   http://www.apache.org/licenses/LICENSE-2.0\n', ' *\n', ' * Unless required by applicable law or agreed to in writing, software\n', ' * distributed under the License is distributed on an "AS IS" BASIS,\n', ' * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', ' * See the License for the specific language governing permissions and\n', ' * limitations under the License.\n', ' */\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IValuePerToken {\n', '\t/* Views */\n', '\n', '\tfunction token() external view returns (address);\n', '\n', '\tfunction valuePerToken()\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256 numerator, uint256 denominator);\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999999\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']