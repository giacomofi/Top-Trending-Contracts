['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../../math/SafeMath.sol";\n', 'import "../../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface Balancer {\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        address tokenOut,\n', '        uint minAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint maxAmountIn,\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint poolAmountIn,\n', '        uint minAmountOut\n', '    ) external returns (uint tokenAmountOut);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface Gauge {\n', '    function deposit(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function withdraw(uint) external;\n', '    function claimable_tokens(address) external view returns (uint);\n', '}\n', '\n', 'interface Mintr {\n', '    function mint(address) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IController {\n', '    function balanceOf(address) external view returns (uint256);\n', '    function earn(address, uint256) external;\n', '    function investEnabled() external view returns (bool);\n', '    function harvestStrategy(address) external;\n', '    function strategyTokens(address) external returns (address);\n', '    function vaults(address) external view returns (address);\n', '    function want(address) external view returns (address);\n', '    function withdraw(address, uint256) external;\n', '    function withdrawFee(address, uint256) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '// solhint-disable func-name-mixedcase\n', '// solhint-disable var-name-mixedcase\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IStableSwap3Pool {\n', '    function get_virtual_price() external view returns (uint);\n', '    function balances(uint) external view returns (uint);\n', '    function get_dy(int128 i, int128 j, uint dx) external view returns (uint dy);\n', '    function exchange(int128 i, int128 j, uint dx, uint min_dy) external;\n', '    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n', '    function remove_liquidity(uint _amount, uint[3] calldata amounts) external;\n', '    function remove_liquidity_one_coin(uint _token_amount, int128 i, uint min_amount) external;\n', '    function calc_token_amount(uint[3] calldata amounts, bool deposit) external view returns (uint);\n', '    function calc_withdraw_one_coin(uint _token_amount, int128 i) external view returns (uint);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IStrategy {\n', '    function balanceOf() external view returns (uint256);\n', '    function balanceOfPool() external view returns (uint256);\n', '    function balanceOfWant() external view returns (uint256);\n', '    function deposit() external;\n', '    function harvest() external;\n', '    function name() external view returns (string memory);\n', '    function skim() external;\n', '    function want() external view returns (address);\n', '    function withdraw(address) external;\n', '    function withdraw(uint256) external;\n', '    function withdrawAll() external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface ISwap {\n', '    function swapExactTokensForTokens(uint256, uint256, address[] calldata, address, uint256) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IVaultManager {\n', '    function controllers(address) external view returns (bool);\n', '    function getHarvestFeeInfo() external view returns (address, address, uint256, address, uint256, address, uint256);\n', '    function governance() external view returns (address);\n', '    function harvester() external view returns (address);\n', '    function insuranceFee() external view returns (uint256);\n', '    function insurancePool() external view returns (address);\n', '    function insurancePoolFee() external view returns (uint256);\n', '    function stakingPool() external view returns (address);\n', '    function stakingPoolShareFee() external view returns (uint256);\n', '    function strategist() external view returns (address);\n', '    function treasury() external view returns (address);\n', '    function treasuryBalance() external view returns (uint256);\n', '    function treasuryFee() external view returns (uint256);\n', '    function vaults(address) external view returns (bool);\n', '    function withdrawalProtectionFee() external view returns (uint256);\n', '    function yax() external view returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/utils/Address.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', 'import "../IStableSwap3Pool.sol";\n', 'import "../ISwap.sol";\n', 'import "../IVaultManager.sol";\n', 'import "../IStrategy.sol";\n', 'import "../IController.sol";\n', '\n', '/**\n', ' * @title BaseStrategy\n', ' * @notice The BaseStrategy is an abstract contract which all\n', ' * yAxis strategies should inherit functionality from. It gives\n', ' * specific security properties which make it hard to write an\n', ' * insecure strategy.\n', ' * @notice All state-changing functions implemented in the strategy\n', ' * should be internal, since any public or externally-facing functions\n', ' * are already handled in the BaseStrategy.\n', ' * @notice The following functions must be implemented by a strategy:\n', ' * - function _deposit() internal virtual;\n', ' * - function _harvest() internal virtual;\n', ' * - function _withdraw(uint256 _amount) internal virtual;\n', ' * - function _withdrawAll() internal virtual;\n', ' * - function balanceOfPool() public view override virtual returns (uint256);\n', ' */\n', 'abstract contract BaseStrategy is IStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public constant ONE_HUNDRED_PERCENT = 10000;\n', '\n', '    address public immutable override want;\n', '    address public immutable weth;\n', '    address public immutable controller;\n', '    IVaultManager public immutable vaultManager;\n', '\n', '    string public override name;\n', '    ISwap public router;\n', '\n', '    event ApproveForSpender(address token, address spender, uint256 amount);\n', '    event SetController(address controller);\n', '    event SetRouter(address router);\n', '    event Skim();\n', '    event Withdraw(address vault, uint256 amount);\n', '\n', '    /**\n', '     * @param _controller The address of the controller\n', '     * @param _vaultManager The address of the vaultManager\n', '     * @param _want The desired token of the strategy\n', '     * @param _weth The address of WETH\n', '     * @param _router The address of the router for swapping tokens\n', '     */\n', '    constructor(\n', '        string memory _name,\n', '        address _controller,\n', '        address _vaultManager,\n', '        address _want,\n', '        address _weth,\n', '        address _router\n', '    ) public {\n', '        require(_controller != address(0), "!_controller");\n', '        require(_vaultManager != address(0), "!_vaultManager");\n', '        require(_want != address(0), "!_want");\n', '        require(_weth != address(0), "!_weth");\n', '        require(_router != address(0), "!_router");\n', '        name = _name;\n', '        want = _want;\n', '        controller = _controller;\n', '        vaultManager = IVaultManager(_vaultManager);\n', '        weth = _weth;\n', '        router = ISwap(_router);\n', '        IERC20(_weth).safeApprove(address(_router), type(uint256).max);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE-ONLY FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @notice Approves a token address to be spent by an address\n', '     * @param _token The address of the token\n', '     * @param _spender The address of the spender\n', '     * @param _amount The amount to spend\n', '     */\n', '    function approveForSpender(IERC20 _token, address _spender, uint256 _amount) external {\n', '        require(msg.sender == vaultManager.governance(), "!governance");\n', '        _token.safeApprove(_spender, _amount);\n', '        emit ApproveForSpender(address(_token), _spender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the address of the ISwap-compatible router\n', '     * @param _router The address of the router\n', '     */\n', '    function setRouter(address _router) external {\n', '        require(msg.sender == vaultManager.governance(), "!governance");\n', '        router = ISwap(_router);\n', '        IERC20(weth).safeApprove(address(_router), 0);\n', '        IERC20(weth).safeApprove(address(_router), type(uint256).max);\n', '        emit SetRouter(_router);\n', '    }\n', '\n', '    /**\n', '     * AUTHORIZED-ONLY FUNCTIONS\n', '     */\n', '\n', '    /**\n', "     * @notice Deposits funds to the strategy's pool\n", '     */\n', '    function deposit() external override onlyAuthorized {\n', '        _deposit();\n', '    }\n', '\n', '    /**\n', "     * @notice Harvest funds in the strategy's pool\n", '     */\n', '    function harvest() external override onlyAuthorized {\n', '        _harvest();\n', '    }\n', '\n', '    /**\n', '     * @notice Sends stuck want tokens in the strategy to the controller\n', '     */\n', '    function skim() external override onlyAuthorized {\n', '        IERC20(want).safeTransfer(controller, balanceOfWant());\n', '        emit Skim();\n', '    }\n', '\n', '    /**\n', '     * @notice Sends stuck tokens in the strategy to the controller\n', '     * @param _asset The address of the token to withdraw\n', '     */\n', '    function withdraw(address _asset) external override onlyAuthorized {\n', '        require(want != _asset, "want");\n', '\n', '        IERC20 _assetToken = IERC20(_asset);\n', '        uint256 _balance = _assetToken.balanceOf(address(this));\n', '        _assetToken.safeTransfer(controller, _balance);\n', '    }\n', '\n', '    /**\n', '     * @notice Initiated from a vault, withdraws funds from the pool\n', '     * @param _amount The amount of the want token to withdraw\n', '     */\n', '    function withdraw(uint256 _amount) external override onlyAuthorized {\n', '        uint256 _balance = balanceOfWant();\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        address _token = _vaultWant();\n', '        address _vault = IController(controller).vaults(_token);\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(_token).safeTransfer(_vault, _amount);\n', '        emit Withdraw(_vault, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraws all funds from the strategy\n', '     */\n', '    function withdrawAll() external override onlyAuthorized {\n', '        _withdrawAll();\n', '\n', '        address _token = _vaultWant();\n', '        uint256 _balance = IERC20(_token).balanceOf(address(this));\n', '\n', '        address _vault = IController(controller).vaults(_token);\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(_token).safeTransfer(_vault, _balance);\n', '        emit Withdraw(_vault, _balance);\n', '    }\n', '\n', '    /**\n', '     * EXTERNAL VIEW FUNCTIONS\n', '     */\n', '\n', '    /**\n', "     * @notice Returns the strategy's balance of the want token plus the balance of pool\n", '     */\n', '    function balanceOf() external override view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    /**\n', '     * PUBLIC VIEW FUNCTIONS\n', '     */\n', '\n', '    /**\n', '     * @notice Returns the balance of the pool\n', '     * @dev Must be implemented by the strategy\n', '     */\n', '    function balanceOfPool() public view override virtual returns (uint256);\n', '\n', '    /**\n', '     * @notice Returns the balance of the want token on the strategy\n', '     */\n', '    function balanceOfWant() public view override returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * INTERNAL FUNCTIONS\n', '     */\n', '\n', '    function _deposit() internal virtual;\n', '\n', '    function _harvest() internal virtual;\n', '\n', '    function _payHarvestFees(\n', '        address _poolToken\n', '    ) internal returns (uint256 _wethBal) {\n', '        uint256 _amount = IERC20(_poolToken).balanceOf(address(this));\n', '        _swapTokens(_poolToken, weth, _amount);\n', '        _wethBal = IERC20(weth).balanceOf(address(this));\n', '\n', '        if (_wethBal > 0) {\n', '            // get all the necessary variables in a single call\n', '            (\n', '                address yax,\n', '                address stakingPool,\n', '                uint256 stakingPoolShareFee,\n', '                address treasury,\n', '                uint256 treasuryFee,\n', '                address insurance,\n', '                uint256 insurancePoolFee\n', '            ) = vaultManager.getHarvestFeeInfo();\n', '\n', '            uint256 _fee;\n', '\n', '            // pay the staking pool with YAX\n', '            if (stakingPoolShareFee > 0 && stakingPool != address(0)) {\n', '                _fee = _wethBal.mul(stakingPoolShareFee).div(ONE_HUNDRED_PERCENT);\n', '                _swapTokens(weth, yax, _fee);\n', '                IERC20(yax).safeTransfer(stakingPool, IERC20(yax).balanceOf(address(this)));\n', '            }\n', '\n', '            // pay the treasury with YAX\n', '            if (treasuryFee > 0 && treasury != address(0)) {\n', '                _fee = _wethBal.mul(treasuryFee).div(ONE_HUNDRED_PERCENT);\n', '                _swapTokens(weth, yax, _fee);\n', '                IERC20(yax).safeTransfer(treasury, IERC20(yax).balanceOf(address(this)));\n', '            }\n', '\n', '            // pay the insurance pool with YAX\n', '            if (insurancePoolFee > 0 && insurance != address(0)) {\n', '                _fee = _wethBal.mul(insurancePoolFee).div(ONE_HUNDRED_PERCENT);\n', '                _swapTokens(weth, yax, _fee);\n', '                IERC20(yax).safeTransfer(insurance, IERC20(yax).balanceOf(address(this)));\n', '            }\n', '\n', '            // return the remaining WETH balance\n', '            _wethBal = IERC20(weth).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function _swapTokens(address _input, address _output, uint256 _amount) internal {\n', '        address[] memory path = new address[](2);\n', '        path[0] = _input;\n', '        path[1] = _output;\n', '        router.swapExactTokensForTokens(\n', '            _amount,\n', '            1,\n', '            path,\n', '            address(this),\n', '            // solhint-disable-next-line not-rely-on-time\n', '            block.timestamp.add(1800)\n', '        );\n', '    }\n', '\n', '    function _vaultWant() internal returns (address) {\n', '        return IController(controller).strategyTokens(address(this));\n', '    }\n', '\n', '    function _withdraw(uint256 _amount) internal virtual;\n', '\n', '    function _withdrawAll() internal virtual;\n', '\n', '    function _withdrawSome(uint256 _amount) internal returns (uint256) {\n', '        address _token = _vaultWant();\n', '        uint256 _before = IERC20(_token).balanceOf(address(this));\n', '        _withdraw(_amount);\n', '        uint256 _after = IERC20(_token).balanceOf(address(this));\n', '        _amount = _after.sub(_before);\n', '\n', '        return _amount;\n', '    }\n', '\n', '    /**\n', '     * MODIFIERS\n', '     */\n', '\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == controller\n', '             || msg.sender == vaultManager.strategist()\n', '             || msg.sender == vaultManager.governance(),\n', '             "!authorized"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "../../interfaces/Gauge.sol";\n', 'import "../../interfaces/Balancer.sol";\n', '\n', 'import "./BaseStrategy.sol";\n', '\n', 'contract StrategyCurve3Crv is BaseStrategy {\n', '    // used for Crv -> weth -> [dai/usdc/usdt] -> 3crv route\n', '    address public immutable crv;\n', '\n', '    // for add_liquidity via curve.fi to get back 3CRV (use getMostPremium() for the best stable coin used in the route)\n', '    address public immutable dai;\n', '    address public immutable usdc;\n', '    address public immutable usdt;\n', '\n', '    Mintr public immutable crvMintr;\n', '    IStableSwap3Pool public immutable stableSwap3Pool;\n', '    Gauge public immutable gauge; // 3Crv Gauge\n', '\n', '    constructor(\n', '        string memory _name,\n', '        address _want,\n', '        address _crv,\n', '        address _weth,\n', '        address _dai,\n', '        address _usdc,\n', '        address _usdt,\n', '        Gauge _gauge,\n', '        Mintr _crvMintr,\n', '        IStableSwap3Pool _stableSwap3Pool,\n', '        address _controller,\n', '        address _vaultManager,\n', '        address _router\n', '    )\n', '        public\n', '        BaseStrategy(_name, _controller, _vaultManager, _want, _weth, _router)\n', '    {\n', '        require(_crv != address(0), "!_crv");\n', '        require(_dai != address(0), "!_dai");\n', '        require(_usdc != address(0), "!_usdc");\n', '        require(_usdt != address(0), "!_usdt");\n', '        require(address(_gauge) != address(0), "!_gauge");\n', '        require(address(_crvMintr) != address(0), "!_crvMintr");\n', '        require(address(_stableSwap3Pool) != address(0), "!_stableSwap3Pool");\n', '        crv = _crv;\n', '        dai = _dai;\n', '        usdc = _usdc;\n', '        usdt = _usdt;\n', '        stableSwap3Pool = _stableSwap3Pool;\n', '        gauge = _gauge;\n', '        crvMintr = _crvMintr;\n', '        IERC20(_want).safeApprove(address(_gauge), type(uint256).max);\n', '        IERC20(_crv).safeApprove(address(_router), type(uint256).max);\n', '        IERC20(_dai).safeApprove(address(_stableSwap3Pool), type(uint256).max);\n', '        IERC20(_usdc).safeApprove(address(_stableSwap3Pool), type(uint256).max);\n', '        IERC20(_usdt).safeApprove(address(_stableSwap3Pool), type(uint256).max);\n', '        IERC20(_want).safeApprove(address(_stableSwap3Pool), type(uint256).max);\n', '    }\n', '\n', '    function _deposit() internal override {\n', '        uint256 _wantBal = balanceOfWant();\n', '        if (_wantBal > 0) {\n', '            // deposit [want] to Gauge\n', '            gauge.deposit(_wantBal);\n', '        }\n', '    }\n', '\n', '    function _claimReward() internal {\n', '        crvMintr.mint(address(gauge));\n', '    }\n', '\n', '    function _addLiquidity() internal {\n', '        uint256[3] memory amounts;\n', '        amounts[0] = IERC20(dai).balanceOf(address(this));\n', '        amounts[1] = IERC20(usdc).balanceOf(address(this));\n', '        amounts[2] = IERC20(usdt).balanceOf(address(this));\n', '        stableSwap3Pool.add_liquidity(amounts, 1);\n', '    }\n', '\n', '    function getMostPremium() public view returns (address, uint256) {\n', '        uint256[] memory balances = new uint256[](3);\n', '        balances[0] = stableSwap3Pool.balances(0); // DAI\n', '        balances[1] = stableSwap3Pool.balances(1).mul(10**12); // USDC\n', '        balances[2] = stableSwap3Pool.balances(2).mul(10**12); // USDT\n', '\n', '        if (balances[0] < balances[1] && balances[0] < balances[2]) { // DAI\n', '            return (dai, 0);\n', '        }\n', '\n', '        if (balances[1] < balances[0] && balances[1] < balances[2]) { // USDC\n', '            return (usdc, 1);\n', '        }\n', '\n', '        if (balances[2] < balances[0] && balances[2] < balances[1]) { // USDT\n', '            return (usdt, 2);\n', '        }\n', '\n', "        return (dai, 0); // If they're somehow equal, we just want DAI\n", '    }\n', '\n', '    function _harvest() internal override {\n', '        _claimReward();\n', '        uint256 _remainingWeth = _payHarvestFees(crv);\n', '\n', '        if (_remainingWeth > 0) {\n', '            (address _stableCoin,) = getMostPremium(); // stablecoin we want to convert to\n', '            _swapTokens(weth, _stableCoin, _remainingWeth);\n', '            _addLiquidity();\n', '\n', '            if (balanceOfWant() > 0) {\n', '                _deposit();\n', '            }\n', '        }\n', '    }\n', '\n', '    function _withdrawAll() internal override {\n', '        uint256 _bal = gauge.balanceOf(address(this));\n', '        _withdraw(_bal);\n', '    }\n', '\n', '    function _withdraw(uint256 _amount) internal override {\n', '        gauge.withdraw(_amount);\n', '    }\n', '\n', '    function balanceOfPool() public view override returns (uint) {\n', '        return gauge.balanceOf(address(this));\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']