['// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IBridge {\n', '    function deposit(\n', '        uint8 destinationChainID,\n', '        bytes32 resourceID,\n', '        bytes calldata data\n', '    ) external payable;\n', '}\n', '\n', 'interface IPolicy {\n', '    function globalAmpleforthEpochAndAMPLSupply() external view returns (uint256, uint256);\n', '}\n', '\n', '/**\n', ' * @title ChainBridgeBatchRebaseReport\n', " * @notice Utility that executes rebase report 'deposit' transactions in batch.\n", ' */\n', 'contract ChainBridgeBatchRebaseReport {\n', '    function execute(\n', '        address policy,\n', '        address bridge,\n', '        uint8[] memory destinationChainIDs,\n', '        bytes32 resourceID,\n', '        uint128 bridgeFee\n', '    ) external payable {\n', '        for (uint256 i = 0; i < destinationChainIDs.length; i++) {\n', '            uint8 destinationChainID = destinationChainIDs[i];\n', '\n', '            uint256 epoch;\n', '            uint256 totalSupply;\n', '            (epoch, totalSupply) = IPolicy(policy).globalAmpleforthEpochAndAMPLSupply();\n', '\n', '            uint256 dataLen = 64;\n', '            IBridge(bridge).deposit{value:bridgeFee}(\n', '                destinationChainID,\n', '                resourceID,\n', '                abi.encode(dataLen, epoch, totalSupply)\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']