['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity ^0.8.2;\n', '\n', 'interface ManagementList {\n', '    function isManager(address accountAddress) external returns (bool);\n', '}\n', '\n', 'contract Manageable {\n', '    ManagementList public managementList;\n', '\n', '    constructor(address _managementListAddress) {\n', '        managementList = ManagementList(_managementListAddress);\n', '    }\n', '\n', '    modifier onlyManagers() {\n', '        bool isManager = managementList.isManager(msg.sender);\n', '        require(isManager, "ManagementList: caller is not a manager");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract Helper is Manageable {\n', '    address[] public _helpers;\n', '\n', '    constructor(address _managementListAddress)\n', '        Manageable(_managementListAddress)\n', '    {}\n', '\n', '    function setHelpers(address[] memory helperAddresses)\n', '        external\n', '        onlyManagers\n', '    {\n', '        _helpers = helperAddresses;\n', '    }\n', '\n', '    function helpers() external view returns (address[] memory) {\n', '        return (_helpers);\n', '    }\n', '\n', '    fallback() external {\n', '        for (uint256 i = 0; i < _helpers.length; i++) {\n', '            address helper = _helpers[i];\n', '            assembly {\n', '                calldatacopy(0, 0, calldatasize())\n', '                let success := staticcall(\n', '                    gas(),\n', '                    helper,\n', '                    0,\n', '                    calldatasize(),\n', '                    0,\n', '                    0\n', '                )\n', '                returndatacopy(0, 0, returndatasize())\n', '                if success {\n', '                    return(0, returndatasize())\n', '                }\n', '            }\n', '        }\n', '        revert("Helper: Fallback proxy failed to return data");\n', '    }\n', '}']