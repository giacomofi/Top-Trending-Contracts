['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/IOracle.sol\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface IOracle {\n', '\t// returns a fraction num/den\n', '\tfunction getPrice(string memory base, string memory quote) external view returns (uint num, uint den);\n', '}\n', '\n', '// File: contracts/Oracle.sol\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', '\n', '\n', 'contract Oracle is IOracle, Ownable {\n', '\tstruct Fraction {\n', '\t\tuint num;\n', '\t\tuint den;\n', '\t}\n', '\t\n', '\tmapping(string => mapping(string => Fraction)) public prices;\n', '\n', '\tfunction getPrice(string memory base, string memory quote) public override view returns (uint num, uint den) {\n', '\t\tif (keccak256(abi.encodePacked(base)) == keccak256(abi.encodePacked(quote)))\n', '\t\t\treturn (1, 1);\n', '\t\tFraction storage price = prices[base][quote];\n', '\t\tif (price.num > 0)\n', '\t\t\treturn (price.num, price.den);\n', '\t\t// try a reverse fraction\n', '\t\tprice = prices[quote][base];\n', '\t\tif (price.num > 0)\n', '\t\t\treturn (price.den, price.num);\n', '\t\treturn (0, 0);\n', '\t}\n', '\n', '\t// zero den is ok - infinite price\n', '\t// both zeros: stopped trading, no price\n', '\tfunction setPrice(string memory base, string memory quote, uint num, uint den) onlyOwner public {\n', '\t\tFraction storage reverse_price = prices[quote][base];\n', '\t\tbool reverse_price_exists = (reverse_price.num > 0 || reverse_price.den > 0);\n', '\t\tif (!reverse_price_exists)\n', '\t\t\tprices[base][quote] = Fraction({num: num, den: den});\n', '\t\telse\n', '\t\t\tprices[quote][base] = Fraction({num: den, den: num});\n', '\t}\n', '\n', '}']