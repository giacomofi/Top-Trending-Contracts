['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-04\n', '*/\n', '\n', '//SPDX-License-Identifier: SourceLibre\n', '\n', '/**\n', ' * Elysium\n', ' * Powered by Diemlibre.\n', ' * A SourceLibre Product.\n', ' * DApp for buying Diemlibre $DLB.\n', ' * \n', ' * This file includes:\n', ' * 1) interface IERC20.\n', ' * 2) library SafeMath.\n', ' * 3) contract BuyDiemlibre.\n', ' * \n', ' * Note: Token is in its smallet unit with respect to its decimal value.\n', ' */\n', 'pragma solidity 0.8.1;\n', '\n', '\n', '/**\n', ' * ERC Interface for Diemlibre Token.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function decimals() external view returns (uint8);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * Safe Math Library.\n', ' */\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * BuyDiemlibre Contract.\n', ' * \n', ' * Default Attribues:\n', ' * - `owner` -> The owner of the contract.\n', ' * - `rate` -> The rate of the exchange in WEI, to be set by the `owner`.\n', ' * - `token` -> The ERC20 token handle.\n', ' * - `holder` -> The address of the holder of coins which this contract will be spending on its behave.\n', ' * - `self` -> The address of this contract. To be set by the owner after deployment.\n', ' * - `fees` -> The fees per transaction to be set by the owner.\n', ' */\n', 'contract BuyDiemlibre {\n', '    \n', '    using SafeMath for uint256;\n', '    address owner;\n', '    uint256 rate; // Rate is in WEI per Diemlibre\n', '    IERC20 token;\n', '    uint256 tokenDecimalsValue;\n', '    address holder;\n', '    address self;\n', '    uint256 fees;\n', '    \n', '    /**\n', '     * \n', '     * Method Name: constructor\n', '     * Initialises the contract.\n', '     * Set most of the default attribues.\n', '     *\n', '     * Parameters:\n', '     * - `address _tokenAddress` -> non zero address of the token contract.\n', '     * - `address _holderAddress` -> non zero address of the holder of the tokens which has tokens.\n', '     * - the caller is recommeded to be the owner or has some admin control of the token contract.\n', '     * \n', '     */\n', '    constructor(address _tokenAddress, address _holderAddress) {\n', '        require(_tokenAddress != address(0), "Error! Invalid Token Address.");\n', '        require(_holderAddress != address(0), "Error! Invalid Holder Address.");\n', '        require(_tokenAddress != _holderAddress, "Token Address and Spender Address cann\'t be the same.");\n', '        \n', '        token = IERC20(_tokenAddress);\n', '        holder = _holderAddress;\n', '        owner = msg.sender;\n', '        rate = 1000000000000000000; // in WEI\n', '        fees = 0;\n', '        tokenDecimalsValue = 10**token.decimals();\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * Method Name: withdrawETHToOwner, private\n', '     * Withdraw ETH to the owner.\n', '     *\n', '     * Parameters:\n', '     * - `uint256 _amount` -> non zero amount of ETH to be sent to the owner.\n', '     * \n', '     * Returns:\n', '     * Boolean if the transaction was successfull or not.\n', '     * \n', '     */\n', '    function withdrawETHToOwner(uint256 _amount) private returns(bool) {\n', '         payable(owner).transfer(_amount);\n', '         return true;\n', '    }\n', '    \n', '    function getRate() external view returns(uint256) {\n', '        return rate;\n', '    }\n', '    \n', '    function getSelf() external view returns(address) {\n', '        return self;\n', '    }\n', '    \n', '    function getFees() external view returns(uint256) {\n', '        return fees;\n', '    }\n', '    \n', '    \n', '    /**\n', '     * \n', '     * Method Name: currentETHValue, external view\n', '     * Gets the current ETH value of 1 Token.\n', '     *\n', '     * Parameters:\n', '     * - `uint256 _tokenAmount` -> non zero amount of tokens to get its equivilence in ETH.\n', '     * \n', '     * Returns:\n', '     * The amount in ETH.\n', '     * \n', '     */\n', '    function currentETHValue(uint256 _tokenAmount) external view returns(uint256) {\n', '        return _tokenAmount.mul(rate).div(tokenDecimalsValue);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * \n', '     * Method Name: currentTokenValue, external view\n', '     * Gets the current token value of 1 ETH.\n', '     *\n', '     * Parameters:\n', '     * - `uint256 _WEIETHAmount` -> non zero amount of ETH in WEI to get its equivilence in token.\n', '     * \n', '     * Returns:\n', '     * The amount in token.\n', '     * \n', '     */\n', '    function currentTokenValue(uint256 _WEIETHAmount) external view returns(uint256) {\n', '        return _WEIETHAmount.mul(tokenDecimalsValue).div(rate);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * \n', '     * Method Name: _buy, private\n', '     * Payable the sends equivilent tokens calculated based on the rate to the msg.sender.\n', '     *\n', '     * Parameters:\n', '     * - `address _msgSender` -> non zero address of the Message sender.\n', '     * - `uint256 _msgValue` -> non zero amount of ETH in WEI the sender sent.\n', '     * \n', '     * Returns:\n', '     * The total amount of tokens the sender has.\n', '     * \n', '     */\n', '    function _buy(address _msgSender, uint256 _msgValue) private returns(uint256) {\n', '        require(_msgValue > 0, "Error! Invalid or Insufficient Amount.");\n', '        require(self != address(0), "Error! Uninitialized self.");\n', '        \n', '        uint256 tokenAmount = _msgValue.mul(tokenDecimalsValue).div(rate);\n', '        uint256 tokenAllowance = token.allowance(holder, self);\n', '        \n', '        require(tokenAmount > 0 && tokenAmount <= tokenAllowance, "Insufficient Liquidity");\n', '        \n', '        withdrawETHToOwner(_msgValue);\n', '        require(token.transferFrom(holder, _msgSender, tokenAmount), "Oops... Could not complete Transaction. Please try again later.");\n', '        return token.balanceOf(_msgSender);\n', '    }\n', '    \n', '    \n', '     /**\n', '     * \n', '     * Method: _buyFor, private\n', '     * Payable the sends equivilent tokens calculated based on the rate to the _receiver set by msg.sender.\n', '     *\n', '     * Parameters:\n', '     * - `address _receiver` -> non zero address of the receiver of the tokens.\n', '     * - `uint256 _msgValue` -> non zero amount of ETH in WEI the sender sent.\n', '     * \n', '     * Returns:\n', '     * The total amount of tokens the _receiver has.\n', '     * \n', '     */\n', '    function _buyFor(address _receiver, uint256 _msgValue) private returns(uint256) {\n', '        require(_msgValue > 0, "Error! Invalid or Insufficient Amount.");\n', '        require(self != address(0), "Error! Uninitialized self.");\n', '        \n', '        uint256 tokenAmount = _msgValue.mul(tokenDecimalsValue).div(rate);\n', '        uint256 tokenAllowance = token.allowance(holder, self);\n', '        \n', '        require(tokenAmount > 0 && tokenAmount <= tokenAllowance, "Insufficient Liquidity");\n', '        \n', '        withdrawETHToOwner(_msgValue);\n', '        require(token.transferFrom(holder, _receiver, tokenAmount), "Oops... Could not complete Transaction. Please try again later.");\n', '        return token.balanceOf(_receiver);\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * Method: buy, external payable\n', '     * External implementation of _buy()\n', '     * \n', '     */\n', '    function buy() external payable returns(uint256) {\n', '        return _buy(msg.sender, msg.value);\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * Method: buyFor, external payable\n', '     * External implementation of _buyFor()\n', '     * \n', '     */\n', '    function buyFor(address _receiver) external payable returns(uint256) {\n', '        return _buyFor(_receiver,  msg.value);\n', '    }\n', '    \n', '    /**\n', '     * \n', '     * Fancy names for Web3.js Providers to read method names.\n', '     * \n', '     */\n', '    \n', '    // Buy\n', '    function buyDLB() external payable returns(uint256) {\n', '        return _buy(msg.sender, msg.value);\n', '    }\n', '    \n', '    function buyDlb() external payable returns(uint256) {\n', '        return _buy(msg.sender, msg.value);\n', '    }\n', '    \n', '    function buyDiemlibre() external payable returns(uint256) {\n', '        return _buy(msg.sender, msg.value);\n', '    }\n', '    \n', '    // BuyFor\n', '    function buyDLBFor(address _receiver) external payable returns(uint256) {\n', '        return _buyFor(_receiver,  msg.value);\n', '    }\n', '    \n', '    function buyDlbFor(address _receiver) external payable returns(uint256) {\n', '        return _buyFor(_receiver,  msg.value);\n', '    }\n', '    \n', '    function buyDiemlibreFor(address _receiver) external payable returns(uint256) {\n', '        return _buyFor(_receiver,  msg.value);\n', '    }\n', '    \n', '    \n', '    \n', '    /**\n', '     * \n', '     * Methods to be ran only by the owner\n', '     * \n', '     */\n', '    function getHolder() external view returns(address) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        return holder;\n', '    }\n', '    \n', '    function setHolder(address _newHolder) external returns(address) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        require(_newHolder != address(0), "Error! Invalid New Holder Address.");\n', '        \n', '        holder = _newHolder;\n', '        return holder;\n', '    }\n', '    \n', '    function withdrawETH(address _receiver, uint256 _amount) external returns(bool) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        require(_receiver != address(0), "Error! Invalid Receiver Address.");\n', '        \n', '        payable(_receiver).transfer(_amount);\n', '        return true;\n', '    }\n', '    \n', '    function setRate(uint256 _newRate) external returns(uint256) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        rate = _newRate;\n', '        return rate;\n', '    }\n', '    \n', '    function setFees(uint256 _newFees) external returns(uint256) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        fees = _newFees;\n', '        return fees;\n', '    }\n', '    \n', '    function setSelf(address _selfAddress) external returns(address) {\n', '        require(msg.sender == owner, "Error! Unauthorized access.");\n', '        require(_selfAddress != address(0), "Error! Invalid Self Address.");\n', '        \n', '        self = _selfAddress;\n', '        return self;\n', '    }\n', '}']