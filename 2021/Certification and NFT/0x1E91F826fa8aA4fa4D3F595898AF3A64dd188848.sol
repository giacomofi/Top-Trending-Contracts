['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', 'pragma solidity 0.8.0;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IPlatformIntegration {\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool isTokenFeeCharged\n', '    ) external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from the cache\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'interface MassetStructs {\n', '    struct BassetPersonal {\n', '        // Address of the bAsset\n', '        address addr;\n', '        // Address of the bAsset\n', '        address integrator;\n', '        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n', '        bool hasTxFee; // takes a byte in storage\n', '        // Status of the bAsset\n', '        BassetStatus status;\n', '    }\n', '\n', '    struct BassetData {\n', '        // 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '        // If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '        // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '        uint128 ratio;\n', '        // Amount of the Basset that is held in Collateral\n', '        uint128 vaultBalance;\n', '    }\n', '\n', '    // Status of the Basset - has it broken its peg?\n', '    enum BassetStatus {\n', '        Default,\n', '        Normal,\n', '        BrokenBelowPeg,\n', '        BrokenAbovePeg,\n', '        Blacklisted,\n', '        Liquidating,\n', '        Liquidated,\n', '        Failed\n', '    }\n', '\n', '    struct BasketState {\n', '        bool undergoingRecol;\n', '        bool failed;\n', '    }\n', '\n', '    struct InvariantConfig {\n', '        uint256 a;\n', '        WeightLimits limits;\n', '    }\n', '\n', '    struct WeightLimits {\n', '        uint128 min;\n', '        uint128 max;\n', '    }\n', '\n', '    struct AmpData {\n', '        uint64 initialA;\n', '        uint64 targetA;\n', '        uint64 rampStartTime;\n', '        uint64 rampEndTime;\n', '    }\n', '}\n', '\n', 'abstract contract IInvariantValidator is MassetStructs {\n', '    // Mint\n', '    function computeMint(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint256 _rawInput,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    function computeMintMulti(\n', '        BassetData[] calldata _bAssets,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _rawInputs,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    // Swap\n', '    function computeSwap(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint8 _o,\n', '        uint256 _rawInput,\n', '        uint256 _feeRate,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256, uint256);\n', '\n', '    // Redeem\n', '    function computeRedeem(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint256 _mAssetQuantity,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    function computeRedeemExact(\n', '        BassetData[] calldata _bAssets,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _rawOutputs,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '}\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', 'library SafeCast {\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) - value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @dev Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x) internal pure returns (uint256) {\n', '        return x * FULL_SCALE;\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 scale\n', '    ) internal pure returns (uint256) {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        // return 9e38 / 1e18 = 9e18\n', '        return (x * y) / scale;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x * y;\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled + FULL_SCALE - 1;\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil / FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return (x * FULL_SCALE) / y;\n', '    }\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x * ratio;\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled + RATIO_SCALE - 1;\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil / RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        // return 1e22 / 1e12 = 1e10\n', '        return (x * RATIO_SCALE) / ratio;\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferReturnBalance(\n', '        address _sender,\n', '        address _recipient,\n', '        address _bAsset,\n', '        uint256 _qty\n', '    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\n', '        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\n', '        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\n', '        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\n', '        receivedQty = recipientBalance - balBefore;\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender) internal {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '// External\n', '// Internal\n', '// Libs\n', '/**\n', ' * @title   Manager\n', ' * @author  mStable\n', ' * @notice  Simply contains logic to perform Basket Manager duties for an mAsset.\n', ' *          Allowing logic can be abstracted here to avoid bytecode inflation.\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2021-01-22\n', ' */\n', 'library Manager {\n', '    using SafeERC20 for IERC20;\n', '    using StableMath for uint256;\n', '\n', '    event BassetsMigrated(address[] bAssets, address newIntegrator);\n', '    event TransferFeeEnabled(address indexed bAsset, bool enabled);\n', '    event BassetAdded(address indexed bAsset, address integrator);\n', '    event BassetStatusChanged(address indexed bAsset, MassetStructs.BassetStatus status);\n', '    event BasketStatusChanged();\n', '    event StartRampA(uint256 currentA, uint256 targetA, uint256 startTime, uint256 rampEndTime);\n', '    event StopRampA(uint256 currentA, uint256 time);\n', '\n', '    uint256 private constant MIN_RAMP_TIME = 1 days;\n', '    uint256 private constant MAX_A = 1e6;\n', '\n', '    /**\n', '     * @notice Adds a bAsset to the given personal, data and mapping, provided it is valid\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetData       Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _maxBassets       Max size of the basket\n', '     * @param _bAsset           Address of the ERC20 token to add to the Basket\n', '     * @param _integration      Address of the Platform Integration\n', '     * @param _mm               Base 1e8 var to determine measurement ratio\n', '     * @param _hasTxFee         Are transfer fees charged on this bAsset (e.g. USDT)\n', '     */\n', '    function addBasset(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        MassetStructs.BassetData[] storage _bAssetData,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        uint8 _maxBassets,\n', '        address _bAsset,\n', '        address _integration,\n', '        uint256 _mm,\n', '        bool _hasTxFee\n', '    ) external {\n', '        require(_bAsset != address(0), "bAsset address must be valid");\n', '        uint8 bAssetCount = uint8(_bAssetPersonal.length);\n', '        require(bAssetCount < _maxBassets, "Max bAssets in Basket");\n', '\n', '        uint8 idx = _bAssetIndexes[_bAsset];\n', '        require(\n', '            bAssetCount == 0 || _bAssetPersonal[idx].addr != _bAsset,\n', '            "bAsset already exists in Basket"\n', '        );\n', '\n', '        // Should fail if bAsset is not added to integration\n', '        // Programmatic enforcement of bAsset validity should service through decentralised feed\n', '        if (_integration != address(0)) {\n', '            IPlatformIntegration(_integration).checkBalance(_bAsset);\n', '        }\n', '\n', '        uint256 bAssetDecimals = IBasicToken(_bAsset).decimals();\n', '        require(\n', '            bAssetDecimals >= 4 && bAssetDecimals <= 18,\n', '            "Token must have sufficient decimal places"\n', '        );\n', '\n', '        uint256 delta = uint256(18) - bAssetDecimals;\n', '        uint256 ratio = _mm * (10**delta);\n', '\n', '        _bAssetIndexes[_bAsset] = bAssetCount;\n', '\n', '        _bAssetPersonal.push(\n', '            MassetStructs.BassetPersonal({\n', '                addr: _bAsset,\n', '                integrator: _integration,\n', '                hasTxFee: _hasTxFee,\n', '                status: MassetStructs.BassetStatus.Normal\n', '            })\n', '        );\n', '        _bAssetData.push(\n', '            MassetStructs.BassetData({ ratio: SafeCast.toUint128(ratio), vaultBalance: 0 })\n', '        );\n', '\n', '        emit BassetAdded(_bAsset, _integration);\n', '    }\n', '\n', '    /**\n', '     * @dev Collects the interest generated from the Basket, minting a relative\n', '     *      amount of mAsset and sending it over to the SavingsManager.\n', '     * @param _bAssetPersonal   Basset personal storage array\n', '     * @param _bAssetData       Basset data storage array\n', '     * @param _forgeValidator   Link to the current InvariantValidator\n', '     * @return mintAmount       Lending market interest collected\n', '     * @return rawGains         Raw increases in vault Balance\n', '     */\n', '    function collectPlatformInterest(\n', '        MassetStructs.BassetPersonal[] memory _bAssetPersonal,\n', '        MassetStructs.BassetData[] storage _bAssetData,\n', '        IInvariantValidator _forgeValidator,\n', '        MassetStructs.InvariantConfig memory _config\n', '    ) external returns (uint256 mintAmount, uint256[] memory rawGains) {\n', '        // Get basket details\n', '        MassetStructs.BassetData[] memory bAssetData_ = _bAssetData;\n', '        uint256 count = bAssetData_.length;\n', '        uint8[] memory indices = new uint8[](count);\n', '        rawGains = new uint256[](count);\n', '        // 1. Calculate rawGains in each bAsset, in comparison to current vault balance\n', '        for (uint256 i = 0; i < count; i++) {\n', '            indices[i] = uint8(i);\n', '            MassetStructs.BassetPersonal memory bPersonal = _bAssetPersonal[i];\n', '            MassetStructs.BassetData memory bData = bAssetData_[i];\n', '            // If there is no integration, then nothing can have accrued\n', '            if (bPersonal.integrator == address(0)) continue;\n', '            uint256 lending =\n', '                IPlatformIntegration(bPersonal.integrator).checkBalance(bPersonal.addr);\n', '            uint256 cache = 0;\n', '            if (!bPersonal.hasTxFee) {\n', '                cache = IERC20(bPersonal.addr).balanceOf(bPersonal.integrator);\n', '            }\n', '            uint256 balance = lending + cache;\n', '            uint256 oldVaultBalance = bData.vaultBalance;\n', '            if (\n', '                balance > oldVaultBalance && bPersonal.status == MassetStructs.BassetStatus.Normal\n', '            ) {\n', '                _bAssetData[i].vaultBalance = SafeCast.toUint128(balance);\n', '                uint256 interestDelta = balance - oldVaultBalance;\n', '                rawGains[i] = interestDelta;\n', '            } else {\n', '                rawGains[i] = 0;\n', '            }\n', '        }\n', '        mintAmount = _forgeValidator.computeMintMulti(bAssetData_, indices, rawGains, _config);\n', '    }\n', '\n', '    /**\n', '     * @dev Update transfer fee flag for a given bAsset, should it change its fee practice\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAsset   bAsset address\n', "     * @param _flag         Charge transfer fee when its set to 'true', otherwise 'false'\n", '     */\n', '    function setTransferFeesFlag(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset,\n', '        bool _flag\n', '    ) external {\n', '        uint256 index = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '        _bAssetPersonal[index].hasTxFee = _flag;\n', '\n', '        if (_flag) {\n', '            // if token has tx fees, it can no longer operate with a cache\n', '            address integration = _bAssetPersonal[index].integrator;\n', '            if (integration != address(0)) {\n', '                uint256 bal = IERC20(_bAsset).balanceOf(integration);\n', '                if (bal > 0) {\n', '                    IPlatformIntegration(integration).deposit(_bAsset, bal, true);\n', '                }\n', '            }\n', '        }\n', '\n', '        emit TransferFeeEnabled(_bAsset, _flag);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers all collateral from one lending market to another - used initially\n', '     *      to handle the migration between Aave V1 and Aave V2. Note - only supports non\n', '     *      tx fee enabled assets. Supports going from no integration to integration, but\n', '     *      not the other way around.\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAssets          Array of basket assets to migrate\n', '     * @param _newIntegration   Address of the new platform integration\n', '     */\n', '    function migrateBassets(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address[] calldata _bAssets,\n', '        address _newIntegration\n', '    ) external {\n', '        uint256 len = _bAssets.length;\n', '        require(len > 0, "Must migrate some bAssets");\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            // 1. Check that the bAsset is in the basket\n', '            address bAsset = _bAssets[i];\n', '            uint256 index = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, bAsset);\n', '            require(!_bAssetPersonal[index].hasTxFee, "A bAsset has a transfer fee");\n', '\n', '            // 2. Withdraw everything from the old platform integration\n', '            address oldAddress = _bAssetPersonal[index].integrator;\n', '            require(oldAddress != _newIntegration, "Must transfer to new integrator");\n', '            (uint256 cache, uint256 lendingBal) = (0, 0);\n', '            if (oldAddress == address(0)) {\n', '                cache = IERC20(bAsset).balanceOf(address(this));\n', '            } else {\n', '                IPlatformIntegration oldIntegration = IPlatformIntegration(oldAddress);\n', '                cache = IERC20(bAsset).balanceOf(address(oldIntegration));\n', '                // 2.1. Withdraw from the lending market\n', '                lendingBal = oldIntegration.checkBalance(bAsset);\n', '                if (lendingBal > 0) {\n', '                    oldIntegration.withdraw(address(this), bAsset, lendingBal, false);\n', '                }\n', '                // 2.2. Withdraw from the cache, if any\n', '                if (cache > 0) {\n', '                    oldIntegration.withdrawRaw(address(this), bAsset, cache);\n', '                }\n', '            }\n', '            uint256 sum = lendingBal + cache;\n', '\n', '            // 3. Update the integration address for this bAsset\n', '            _bAssetPersonal[index].integrator = _newIntegration;\n', '\n', '            // 4. Deposit everything into the new\n', '            //    This should fail if we did not receive the full amount from the platform withdrawal\n', '            // 4.1. Deposit all bAsset\n', '            IERC20(bAsset).safeTransfer(_newIntegration, sum);\n', '            IPlatformIntegration newIntegration = IPlatformIntegration(_newIntegration);\n', '            if (lendingBal > 0) {\n', '                newIntegration.deposit(bAsset, lendingBal, false);\n', '            }\n', '            // 4.2. Check balances\n', '            uint256 newLendingBal = newIntegration.checkBalance(bAsset);\n', '            uint256 newCache = IERC20(bAsset).balanceOf(address(newIntegration));\n', '            uint256 upperMargin = 10001e14;\n', '            uint256 lowerMargin = 9999e14;\n', '\n', '            require(\n', '                newLendingBal >= lendingBal.mulTruncate(lowerMargin) &&\n', '                    newLendingBal <= lendingBal.mulTruncate(upperMargin),\n', '                "Must transfer full amount"\n', '            );\n', '            require(\n', '                newCache >= cache.mulTruncate(lowerMargin) &&\n', '                    newCache <= cache.mulTruncate(upperMargin),\n', '                "Must transfer full amount"\n', '            );\n', '        }\n', '\n', '        emit BassetsMigrated(_bAssets, _newIntegration);\n', '    }\n', '\n', '    /**\n', '     * @dev Executes the Auto Redistribution event by isolating the bAsset from the Basket\n', '     * @param _basket          Struct containing core basket info\n', '     * @param _bAssetPersonal  Basset data storage array\n', '     * @param _bAsset          Address of the ERC20 token to isolate\n', '     * @param _belowPeg        Bool to describe whether the bAsset deviated below peg (t)\n', '     *                         or above (f)\n', '     */\n', '    function handlePegLoss(\n', '        MassetStructs.BasketState storage _basket,\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset,\n', '        bool _belowPeg\n', '    ) external {\n', '        require(!_basket.failed, "Basket must be alive");\n', '\n', '        uint256 i = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '\n', '        MassetStructs.BassetStatus newStatus =\n', '            _belowPeg\n', '                ? MassetStructs.BassetStatus.BrokenBelowPeg\n', '                : MassetStructs.BassetStatus.BrokenAbovePeg;\n', '        _bAssetPersonal[i].status = newStatus;\n', '\n', '        _basket.undergoingRecol = true;\n', '\n', '        emit BassetStatusChanged(_bAsset, newStatus);\n', '    }\n', '\n', '    /**\n', '     * @dev Negates the isolation of a given bAsset\n', '     * @param _basket          Struct containing core basket info\n', '     * @param _bAssetPersonal  Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAsset Address of the bAsset\n', '     */\n', '    function negateIsolation(\n', '        MassetStructs.BasketState storage _basket,\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset\n', '    ) external {\n', '        uint256 i = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '\n', '        _bAssetPersonal[i].status = MassetStructs.BassetStatus.Normal;\n', '\n', '        bool undergoingRecol = false;\n', '        for (uint256 j = 0; j < _bAssetPersonal.length; j++) {\n', '            if (_bAssetPersonal[j].status != MassetStructs.BassetStatus.Normal) {\n', '                undergoingRecol = true;\n', '                break;\n', '            }\n', '        }\n', '        _basket.undergoingRecol = undergoingRecol;\n', '\n', '        emit BassetStatusChanged(_bAsset, MassetStructs.BassetStatus.Normal);\n', '    }\n', '\n', '    /**\n', '     * @dev Starts changing of the amplification var A\n', '     * @param _targetA      Target A value\n', '     * @param _rampEndTime  Time at which A will arrive at _targetA\n', '     */\n', '    function startRampA(\n', '        MassetStructs.AmpData storage _ampData,\n', '        uint256 _targetA,\n', '        uint256 _rampEndTime,\n', '        uint256 _currentA,\n', '        uint256 _precision\n', '    ) external {\n', '        require(\n', '            block.timestamp >= (_ampData.rampStartTime + MIN_RAMP_TIME),\n', '            "Sufficient period of previous ramp has not elapsed"\n', '        );\n', '        require(_rampEndTime >= (block.timestamp + MIN_RAMP_TIME), "Ramp time too short");\n', '        require(_targetA > 0 && _targetA < MAX_A, "A target out of bounds");\n', '\n', '        uint256 preciseTargetA = _targetA * _precision;\n', '\n', '        if (preciseTargetA > _currentA) {\n', '            require(preciseTargetA <= _currentA * 10, "A target increase too big");\n', '        } else {\n', '            require(preciseTargetA >= _currentA / 10, "A target decrease too big");\n', '        }\n', '\n', '        _ampData.initialA = SafeCast.toUint64(_currentA);\n', '        _ampData.targetA = SafeCast.toUint64(preciseTargetA);\n', '        _ampData.rampStartTime = SafeCast.toUint64(block.timestamp);\n', '        _ampData.rampEndTime = SafeCast.toUint64(_rampEndTime);\n', '\n', '        emit StartRampA(_currentA, preciseTargetA, block.timestamp, _rampEndTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Stops the changing of the amplification var A, setting\n', '     * it to whatever the current value is.\n', '     */\n', '    function stopRampA(MassetStructs.AmpData storage _ampData, uint256 _currentA) external {\n', '        require(block.timestamp < _ampData.rampEndTime, "Amplification not changing");\n', '\n', '        _ampData.initialA = SafeCast.toUint64(_currentA);\n', '        _ampData.targetA = SafeCast.toUint64(_currentA);\n', '        _ampData.rampStartTime = SafeCast.toUint64(block.timestamp);\n', '        _ampData.rampEndTime = SafeCast.toUint64(block.timestamp);\n', '\n', '        emit StopRampA(_currentA, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a bAsset index from storage\n', '     * @param _asset      Address of the asset\n', '     * @return idx        Index of the asset\n', '     */\n', '    function _getAssetIndex(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _asset\n', '    ) internal view returns (uint8 idx) {\n', '        idx = _bAssetIndexes[_asset];\n', '        require(_bAssetPersonal[idx].addr == _asset, "Invalid asset input");\n', '    }\n', '\n', '    /***************************************\n', '                    FORGING\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Deposits a given asset to the system. If there is sufficient room for the asset\n', '     * in the cache, then just transfer, otherwise reset the cache to the desired mid level by\n', '     * depositing the delta in the platform\n', '     */\n', '    function depositTokens(\n', '        MassetStructs.BassetPersonal memory _bAsset,\n', '        uint256 _bAssetRatio,\n', '        uint256 _quantity,\n', '        uint256 _maxCache\n', '    ) external returns (uint256 quantityDeposited) {\n', '        // 0. If integration is 0, short circuit\n', '        if (_bAsset.integrator == address(0)) {\n', '            (uint256 received, ) =\n', '                MassetHelpers.transferReturnBalance(\n', '                    msg.sender,\n', '                    address(this),\n', '                    _bAsset.addr,\n', '                    _quantity\n', '                );\n', '            return received;\n', '        }\n', '\n', '        // 1 - Send all to PI, using the opportunity to get the cache balance and net amount transferred\n', '        uint256 cacheBal;\n', '        (quantityDeposited, cacheBal) = MassetHelpers.transferReturnBalance(\n', '            msg.sender,\n', '            _bAsset.integrator,\n', '            _bAsset.addr,\n', '            _quantity\n', '        );\n', '\n', '        // 2 - Deposit X if necessary\n', '        // 2.1 - Deposit if xfer fees\n', '        if (_bAsset.hasTxFee) {\n', '            uint256 deposited =\n', '                IPlatformIntegration(_bAsset.integrator).deposit(\n', '                    _bAsset.addr,\n', '                    quantityDeposited,\n', '                    true\n', '                );\n', '\n', '            return StableMath.min(deposited, quantityDeposited);\n', '        }\n', '        // 2.2 - Else Deposit X if Cache > %\n', '        // This check is in place to ensure that any token with a txFee is rejected\n', '        require(quantityDeposited == _quantity, "Asset not fully transferred");\n', '\n', '        uint256 relativeMaxCache = _maxCache.divRatioPrecisely(_bAssetRatio);\n', '\n', '        if (cacheBal > relativeMaxCache) {\n', '            uint256 delta = cacheBal - (relativeMaxCache / 2);\n', '            IPlatformIntegration(_bAsset.integrator).deposit(_bAsset.addr, delta, false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given asset from its platformIntegration. If there is sufficient liquidity\n', '     * in the cache, then withdraw from there, otherwise withdraw from the lending market and reset the\n', '     * cache to the mid level.\n', '     */\n', '    function withdrawTokens(\n', '        uint256 _quantity,\n', '        MassetStructs.BassetPersonal memory _personal,\n', '        MassetStructs.BassetData memory _data,\n', '        address _recipient,\n', '        uint256 _maxCache\n', '    ) external {\n', '        if (_quantity == 0) return;\n', '\n', '        // 1.0 If there is no integrator, send from here\n', '        if (_personal.integrator == address(0)) {\n', '            IERC20(_personal.addr).safeTransfer(_recipient, _quantity);\n', '        }\n', '        // 1.1 If txFee then short circuit - there is no cache\n', '        else if (_personal.hasTxFee) {\n', '            IPlatformIntegration(_personal.integrator).withdraw(\n', '                _recipient,\n', '                _personal.addr,\n', '                _quantity,\n', '                _quantity,\n', '                true\n', '            );\n', '        }\n', '        // 1.2. Else, withdraw from either cache or main vault\n', '        else {\n', '            uint256 cacheBal = IERC20(_personal.addr).balanceOf(_personal.integrator);\n', '            // 2.1 - If balance b in cache, simply withdraw\n', '            if (cacheBal >= _quantity) {\n', '                IPlatformIntegration(_personal.integrator).withdrawRaw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity\n', '                );\n', '            }\n', '            // 2.2 - Else reset the cache to X, or as far as possible\n', '            //       - Withdraw X+b from platform\n', '            //       - Send b to user\n', '            else {\n', '                uint256 relativeMidCache = _maxCache.divRatioPrecisely(_data.ratio) / 2;\n', '                uint256 totalWithdrawal =\n', '                    StableMath.min(\n', '                        relativeMidCache + _quantity - cacheBal,\n', '                        _data.vaultBalance - SafeCast.toUint128(cacheBal)\n', '                    );\n', '\n', '                IPlatformIntegration(_personal.integrator).withdraw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity,\n', '                    totalWithdrawal,\n', '                    false\n', '                );\n', '            }\n', '        }\n', '    }\n', '}']