['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-11\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IProxy.sol\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IProxy {\n', '    function batchExec(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\n', '    function execs(address[] calldata tos, bytes32[] calldata configs, bytes[] memory datas) external payable;\n', '}\n', '\n', '// File: contracts/interface/IERC20Usdt.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20Usdt {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external;\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external;\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/Config.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Config {\n', '    // function signature of "postProcess()"\n', '    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\n', '\n', '    // The base amount of percentage function\n', '    uint256 public constant PERCENTAGE_BASE = 1 ether;\n', '\n', '    // Handler post-process type. Others should not happen now.\n', '    enum HandlerType {Token, Custom, Others}\n', '}\n', '\n', '// File: contracts/lib/LibCache.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library LibCache {\n', '    function set(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        bytes32 _value\n', '    ) internal {\n', '        _cache[_key] = _value;\n', '    }\n', '\n', '    function setAddress(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        address _value\n', '    ) internal {\n', '        _cache[_key] = bytes32(uint256(uint160(_value)));\n', '    }\n', '\n', '    function setUint256(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        uint256 _value\n', '    ) internal {\n', '        _cache[_key] = bytes32(_value);\n', '    }\n', '\n', '    function getAddress(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key\n', '    ) internal view returns (address ret) {\n', '        ret = address(uint160(uint256(_cache[_key])));\n', '    }\n', '\n', '    function getUint256(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key\n', '    ) internal view returns (uint256 ret) {\n', '        ret = uint256(_cache[_key]);\n', '    }\n', '\n', '    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\n', '        internal\n', '        view\n', '        returns (bytes32 ret)\n', '    {\n', '        ret = _cache[_key];\n', '    }\n', '}\n', '\n', '// File: contracts/lib/LibStack.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'library LibStack {\n', '    function setAddress(bytes32[] storage _stack, address _input) internal {\n', '        _stack.push(bytes32(uint256(uint160(_input))));\n', '    }\n', '\n', '    function set(bytes32[] storage _stack, bytes32 _input) internal {\n', '        _stack.push(_input);\n', '    }\n', '\n', '    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\n', '        internal\n', '    {\n', '        _stack.push(bytes12(uint96(_input)));\n', '    }\n', '\n', '    function getAddress(bytes32[] storage _stack)\n', '        internal\n', '        returns (address ret)\n', '    {\n', '        ret = address(uint160(uint256(peek(_stack))));\n', '        _stack.pop();\n', '    }\n', '\n', '    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\n', '        ret = bytes4(peek(_stack));\n', '        _stack.pop();\n', '    }\n', '\n', '    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\n', '        ret = peek(_stack);\n', '        _stack.pop();\n', '    }\n', '\n', '    function peek(bytes32[] storage _stack)\n', '        internal\n', '        view\n', '        returns (bytes32 ret)\n', '    {\n', '        require(_stack.length > 0, "stack empty");\n', '        ret = _stack[_stack.length - 1];\n', '    }\n', '}\n', '\n', '// File: contracts/Storage.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/// @notice A cache structure composed by a bytes32 array\n', 'contract Storage {\n', '    using LibCache for mapping(bytes32 => bytes32);\n', '    using LibStack for bytes32[];\n', '\n', '    bytes32[] public stack;\n', '    mapping(bytes32 => bytes32) public cache;\n', '\n', '    // keccak256 hash of "msg.sender"\n', '    // prettier-ignore\n', '    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\n', '\n', '    // keccak256 hash of "cube.counter"\n', '    // prettier-ignore\n', '    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\n', '\n', '    modifier isStackEmpty() {\n', '        require(stack.length == 0, "Stack not empty");\n', '        _;\n', '    }\n', '\n', '    modifier isCubeCounterZero() {\n', '        require(_getCubeCounter() == 0, "Cube counter not zero");\n', '        _;\n', '    }\n', '\n', '    modifier isInitialized() {\n', '        require(_getSender() != address(0), "Sender is not initialized");\n', '        _;\n', '    }\n', '\n', '    modifier isNotInitialized() {\n', '        require(_getSender() == address(0), "Sender is initialized");\n', '        _;\n', '    }\n', '\n', '    function _setSender() internal isNotInitialized {\n', '        cache.setAddress(MSG_SENDER_KEY, msg.sender);\n', '    }\n', '\n', '    function _resetSender() internal {\n', '        cache.setAddress(MSG_SENDER_KEY, address(0));\n', '    }\n', '\n', '    function _getSender() internal view returns (address) {\n', '        return cache.getAddress(MSG_SENDER_KEY);\n', '    }\n', '\n', '    function _addCubeCounter() internal {\n', '        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\n', '    }\n', '\n', '    function _resetCubeCounter() internal {\n', '        cache.setUint256(CUBE_COUNTER_KEY, 0);\n', '    }\n', '\n', '    function _getCubeCounter() internal view returns (uint256) {\n', '        return cache.getUint256(CUBE_COUNTER_KEY);\n', '    }\n', '}\n', '\n', '// File: contracts/handlers/HandlerBase.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract HandlerBase is Storage, Config {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function postProcess() external payable virtual {\n', '        revert("Invalid post process");\n', '        /* Implementation template\n', '        bytes4 sig = stack.getSig();\n', '        if (sig == bytes4(keccak256(bytes("handlerFunction_1()")))) {\n', '            // Do something\n', '        } else if (sig == bytes4(keccak256(bytes("handlerFunction_2()")))) {\n', '            bytes32 temp = stack.get();\n', '            // Do something\n', '        } else revert("Invalid post process");\n', '        */\n', '    }\n', '\n', '    function _updateToken(address token) internal {\n', '        stack.setAddress(token);\n', '        // Ignore token type to fit old handlers\n', '        // stack.setHandlerType(uint256(HandlerType.Token));\n', '    }\n', '\n', '    function _updatePostProcess(bytes32[] memory params) internal {\n', '        for (uint256 i = params.length; i > 0; i--) {\n', '            stack.set(params[i - 1]);\n', '        }\n', '        stack.set(msg.sig);\n', '        stack.setHandlerType(HandlerType.Custom);\n', '    }\n', '\n', '    function getContractName() public pure virtual returns (string memory);\n', '\n', '    function _revertMsg(string memory functionName, string memory reason)\n', '        internal\n', '        view\n', '    {\n', '        revert(\n', '            string(\n', '                abi.encodePacked(\n', '                    _uint2String(_getCubeCounter()),\n', '                    "_",\n', '                    getContractName(),\n', '                    "_",\n', '                    functionName,\n', '                    ": ",\n', '                    reason\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    function _revertMsg(string memory functionName) internal view {\n', '        _revertMsg(functionName, "Unspecified");\n', '    }\n', '\n', '    function _uint2String(uint256 n) internal pure returns (string memory) {\n', '        if (n == 0) {\n', '            return "0";\n', '        } else {\n', '            uint256 len = 0;\n', '            for (uint256 temp = n; temp > 0; temp /= 10) {\n', '                len++;\n', '            }\n', '            bytes memory str = new bytes(len);\n', '            for (uint256 i = len; i > 0; i--) {\n', '                str[i - 1] = bytes1(uint8(48 + (n % 10)));\n', '                n /= 10;\n', '            }\n', '            return string(str);\n', '        }\n', '    }\n', '\n', '    function _getBalance(address token, uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (amount != uint256(-1)) {\n', '            return amount;\n', '        }\n', '\n', '        // ETH case\n', '        if (\n', '            token == address(0) ||\n', '            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '        ) {\n', '            return address(this).balance;\n', '        }\n', '        // ERC20 token case\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '\n', '    function _tokenApprove(\n', '        address token,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        try IERC20Usdt(token).approve(spender, amount) {} catch {\n', '            IERC20(token).safeApprove(spender, 0);\n', '            IERC20(token).safeApprove(spender, amount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/handlers/weth/IWETH9.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IWETH9 {\n', '    fallback() external payable;\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/handlers/aavev2/ILendingPoolAddressesProviderV2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @title LendingPoolAddressesProvider contract\n', ' * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n', ' * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n', ' * - Owned by the Aave Governance\n', ' * @author Aave\n', ' **/\n', 'interface ILendingPoolAddressesProviderV2 {\n', '  event MarketIdSet(string newMarketId);\n', '  event LendingPoolUpdated(address indexed newAddress);\n', '  event ConfigurationAdminUpdated(address indexed newAddress);\n', '  event EmergencyAdminUpdated(address indexed newAddress);\n', '  event LendingPoolConfiguratorUpdated(address indexed newAddress);\n', '  event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n', '  event PriceOracleUpdated(address indexed newAddress);\n', '  event LendingRateOracleUpdated(address indexed newAddress);\n', '  event ProxyCreated(bytes32 id, address indexed newAddress);\n', '  event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n', '\n', '  function getMarketId() external view returns (string memory);\n', '\n', '  function setMarketId(string calldata marketId) external;\n', '\n', '  function setAddress(bytes32 id, address newAddress) external;\n', '\n', '  function setAddressAsProxy(bytes32 id, address impl) external;\n', '\n', '  function getAddress(bytes32 id) external view returns (address);\n', '\n', '  function getLendingPool() external view returns (address);\n', '\n', '  function setLendingPoolImpl(address pool) external;\n', '\n', '  function getLendingPoolConfigurator() external view returns (address);\n', '\n', '  function setLendingPoolConfiguratorImpl(address configurator) external;\n', '\n', '  function getLendingPoolCollateralManager() external view returns (address);\n', '\n', '  function setLendingPoolCollateralManager(address manager) external;\n', '\n', '  function getPoolAdmin() external view returns (address);\n', '\n', '  function setPoolAdmin(address admin) external;\n', '\n', '  function getEmergencyAdmin() external view returns (address);\n', '\n', '  function setEmergencyAdmin(address admin) external;\n', '\n', '  function getPriceOracle() external view returns (address);\n', '\n', '  function setPriceOracle(address priceOracle) external;\n', '\n', '  function getLendingRateOracle() external view returns (address);\n', '\n', '  function setLendingRateOracle(address lendingRateOracle) external;\n', '}\n', '\n', '// File: contracts/handlers/aavev2/libraries/DataTypes.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library DataTypes {\n', '    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n', '    struct ReserveData {\n', '        //stores the reserve configuration\n', '        ReserveConfigurationMap configuration;\n', '        //the liquidity index. Expressed in ray\n', '        uint128 liquidityIndex;\n', '        //variable borrow index. Expressed in ray\n', '        uint128 variableBorrowIndex;\n', '        //the current supply rate. Expressed in ray\n', '        uint128 currentLiquidityRate;\n', '        //the current variable borrow rate. Expressed in ray\n', '        uint128 currentVariableBorrowRate;\n', '        //the current stable borrow rate. Expressed in ray\n', '        uint128 currentStableBorrowRate;\n', '        uint40 lastUpdateTimestamp;\n', '        //tokens addresses\n', '        address aTokenAddress;\n', '        address stableDebtTokenAddress;\n', '        address variableDebtTokenAddress;\n', '        //address of the interest rate strategy\n', '        address interestRateStrategyAddress;\n', '        //the id of the reserve. Represents the position in the list of the active reserves\n', '        uint8 id;\n', '    }\n', '\n', '    struct ReserveConfigurationMap {\n', '        //bit 0-15: LTV\n', '        //bit 16-31: Liq. threshold\n', '        //bit 32-47: Liq. bonus\n', '        //bit 48-55: Decimals\n', '        //bit 56: Reserve is active\n', '        //bit 57: reserve is frozen\n', '        //bit 58: borrowing is enabled\n', '        //bit 59: stable rate borrowing enabled\n', '        //bit 60-63: reserved\n', '        //bit 64-79: reserve factor\n', '        uint256 data;\n', '    }\n', '\n', '    struct UserConfigurationMap {\n', '        uint256 data;\n', '    }\n', '\n', '    enum InterestRateMode {NONE, STABLE, VARIABLE}\n', '}\n', '\n', '// File: contracts/handlers/aavev2/ILendingPoolV2.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'interface ILendingPoolV2 {\n', '  /**\n', '   * @dev Emitted on deposit()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The address initiating the deposit\n', '   * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n', '   * @param amount The amount deposited\n', '   * @param referral The referral code used\n', '   **/\n', '  event Deposit(\n', '    address indexed reserve,\n', '    address user,\n', '    address indexed onBehalfOf,\n', '    uint256 amount,\n', '    uint16 indexed referral\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted on withdraw()\n', '   * @param reserve The address of the underlyng asset being withdrawn\n', '   * @param user The address initiating the withdrawal, owner of aTokens\n', '   * @param to Address that will receive the underlying\n', '   * @param amount The amount to be withdrawn\n', '   **/\n', '  event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n', '\n', '  /**\n', '   * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n', '   * @param reserve The address of the underlying asset being borrowed\n', '   * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n', '   * initiator of the transaction on flashLoan()\n', '   * @param onBehalfOf The address that will be getting the debt\n', '   * @param amount The amount borrowed out\n', '   * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n', '   * @param borrowRate The numeric rate at which the user has borrowed\n', '   * @param referral The referral code used\n', '   **/\n', '  event Borrow(\n', '    address indexed reserve,\n', '    address user,\n', '    address indexed onBehalfOf,\n', '    uint256 amount,\n', '    uint256 borrowRateMode,\n', '    uint256 borrowRate,\n', '    uint16 indexed referral\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted on repay()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The beneficiary of the repayment, getting his debt reduced\n', '   * @param repayer The address of the user initiating the repay(), providing the funds\n', '   * @param amount The amount repaid\n', '   **/\n', '  event Repay(\n', '    address indexed reserve,\n', '    address indexed user,\n', '    address indexed repayer,\n', '    uint256 amount\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted on swapBorrowRateMode()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The address of the user swapping his rate mode\n', '   * @param rateMode The rate mode that the user wants to swap to\n', '   **/\n', '  event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n', '\n', '  /**\n', '   * @dev Emitted on setUserUseReserveAsCollateral()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The address of the user enabling the usage as collateral\n', '   **/\n', '  event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n', '\n', '  /**\n', '   * @dev Emitted on setUserUseReserveAsCollateral()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The address of the user enabling the usage as collateral\n', '   **/\n', '  event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n', '\n', '  /**\n', '   * @dev Emitted on rebalanceStableBorrowRate()\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param user The address of the user for which the rebalance has been executed\n', '   **/\n', '  event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n', '\n', '  /**\n', '   * @dev Emitted on flashLoan()\n', '   * @param target The address of the flash loan receiver contract\n', '   * @param initiator The address initiating the flash loan\n', '   * @param asset The address of the asset being flash borrowed\n', '   * @param amount The amount flash borrowed\n', '   * @param premium The fee flash borrowed\n', '   * @param referralCode The referral code used\n', '   **/\n', '  event FlashLoan(\n', '    address indexed target,\n', '    address indexed initiator,\n', '    address indexed asset,\n', '    uint256 amount,\n', '    uint256 premium,\n', '    uint16 referralCode\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted when the pause is triggered.\n', '   */\n', '  event Paused();\n', '\n', '  /**\n', '   * @dev Emitted when the pause is lifted.\n', '   */\n', '  event Unpaused();\n', '\n', '  /**\n', '   * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n', '   * LendingPoolCollateral manager using a DELEGATECALL\n', '   * This allows to have the events in the generated ABI for LendingPool.\n', '   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '   * @param user The address of the borrower getting liquidated\n', '   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '   * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n', '   * @param liquidator The address of the liquidator\n', '   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '   * to receive the underlying collateral asset directly\n', '   **/\n', '  event LiquidationCall(\n', '    address indexed collateralAsset,\n', '    address indexed debtAsset,\n', '    address indexed user,\n', '    uint256 debtToCover,\n', '    uint256 liquidatedCollateralAmount,\n', '    address liquidator,\n', '    bool receiveAToken\n', '  );\n', '\n', '  /**\n', '   * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n', '   * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n', '   * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n', '   * gets added to the LendingPool ABI\n', '   * @param reserve The address of the underlying asset of the reserve\n', '   * @param liquidityRate The new liquidity rate\n', '   * @param stableBorrowRate The new stable borrow rate\n', '   * @param variableBorrowRate The new variable borrow rate\n', '   * @param liquidityIndex The new liquidity index\n', '   * @param variableBorrowIndex The new variable borrow index\n', '   **/\n', '  event ReserveDataUpdated(\n', '    address indexed reserve,\n', '    uint256 liquidityRate,\n', '    uint256 stableBorrowRate,\n', '    uint256 variableBorrowRate,\n', '    uint256 liquidityIndex,\n', '    uint256 variableBorrowIndex\n', '  );\n', '\n', '  /**\n', '   * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n', '   * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n', '   * @param asset The address of the underlying asset to deposit\n', '   * @param amount The amount to be deposited\n', '   * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n', '   *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n', '   *   is a different wallet\n', '   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '   *   0 if the action is executed directly by the user, without any middle-man\n', '   **/\n', '  function deposit(\n', '    address asset,\n', '    uint256 amount,\n', '    address onBehalfOf,\n', '    uint16 referralCode\n', '  ) external;\n', '\n', '  /**\n', '   * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n', '   * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n', '   * @param asset The address of the underlying asset to withdraw\n', '   * @param amount The underlying amount to be withdrawn\n', '   *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n', '   * @param to Address that will receive the underlying, same as msg.sender if the user\n', '   *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n', '   *   different wallet\n', '   * @return The final amount withdrawn\n', '   **/\n', '  function withdraw(\n', '    address asset,\n', '    uint256 amount,\n', '    address to\n', '  ) external returns (uint256);\n', '\n', '  /**\n', '   * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n', '   * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n', '   * corresponding debt token (StableDebtToken or VariableDebtToken)\n', '   * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n', '   *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n', '   * @param asset The address of the underlying asset to borrow\n', '   * @param amount The amount to be borrowed\n', '   * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n', '   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '   *   0 if the action is executed directly by the user, without any middle-man\n', '   * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n', '   * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n', '   * if he has been given credit delegation allowance\n', '   **/\n', '  function borrow(\n', '    address asset,\n', '    uint256 amount,\n', '    uint256 interestRateMode,\n', '    uint16 referralCode,\n', '    address onBehalfOf\n', '  ) external;\n', '\n', '  /**\n', '   * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n', '   * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n', '   * @param asset The address of the borrowed underlying asset previously borrowed\n', '   * @param amount The amount to repay\n', '   * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n', '   * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n', '   * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n', '   * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n', '   * other borrower whose debt should be removed\n', '   * @return The final amount repaid\n', '   **/\n', '  function repay(\n', '    address asset,\n', '    uint256 amount,\n', '    uint256 rateMode,\n', '    address onBehalfOf\n', '  ) external returns (uint256);\n', '\n', '  /**\n', '   * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n', '   * @param asset The address of the underlying asset borrowed\n', '   * @param rateMode The rate mode that the user wants to swap to\n', '   **/\n', '  function swapBorrowRateMode(address asset, uint256 rateMode) external;\n', '\n', '  /**\n', '   * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n', '   * - Users can be rebalanced if the following conditions are satisfied:\n', '   *     1. Usage ratio is above 95%\n', '   *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n', '   *        borrowed at a stable rate and depositors are not earning enough\n', '   * @param asset The address of the underlying asset borrowed\n', '   * @param user The address of the user to be rebalanced\n', '   **/\n', '  function rebalanceStableBorrowRate(address asset, address user) external;\n', '\n', '  /**\n', '   * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n', '   * @param asset The address of the underlying asset deposited\n', '   * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n', '   **/\n', '  function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n', '\n', '  /**\n', '   * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n', '   * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n', '   *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n', '   * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '   * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '   * @param user The address of the borrower getting liquidated\n', '   * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '   * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '   * to receive the underlying collateral asset directly\n', '   **/\n', '  function liquidationCall(\n', '    address collateralAsset,\n', '    address debtAsset,\n', '    address user,\n', '    uint256 debtToCover,\n', '    bool receiveAToken\n', '  ) external;\n', '\n', '  /**\n', '   * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n', '   * as long as the amount taken plus a fee is returned.\n', '   * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n', '   * For further details please visit https://developers.aave.com\n', '   * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n', '   * @param assets The addresses of the assets being flash-borrowed\n', '   * @param amounts The amounts amounts being flash-borrowed\n', '   * @param modes Types of the debt to open if the flash loan is not returned:\n', "   *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n", '   *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '   *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '   * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n', '   * @param params Variadic packed params to pass to the receiver as extra information\n', '   * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '   *   0 if the action is executed directly by the user, without any middle-man\n', '   **/\n', '  function flashLoan(\n', '    address receiverAddress,\n', '    address[] calldata assets,\n', '    uint256[] calldata amounts,\n', '    uint256[] calldata modes,\n', '    address onBehalfOf,\n', '    bytes calldata params,\n', '    uint16 referralCode\n', '  ) external;\n', '\n', '  /**\n', '   * @dev Returns the user account data across all the reserves\n', '   * @param user The address of the user\n', '   * @return totalCollateralETH the total collateral in ETH of the user\n', '   * @return totalDebtETH the total debt in ETH of the user\n', '   * @return availableBorrowsETH the borrowing power left of the user\n', '   * @return currentLiquidationThreshold the liquidation threshold of the user\n', '   * @return ltv the loan to value of the user\n', '   * @return healthFactor the current health factor of the user\n', '   **/\n', '  function getUserAccountData(address user)\n', '    external\n', '    view\n', '    returns (\n', '      uint256 totalCollateralETH,\n', '      uint256 totalDebtETH,\n', '      uint256 availableBorrowsETH,\n', '      uint256 currentLiquidationThreshold,\n', '      uint256 ltv,\n', '      uint256 healthFactor\n', '    );\n', '\n', '  function initReserve(\n', '    address reserve,\n', '    address aTokenAddress,\n', '    address stableDebtAddress,\n', '    address variableDebtAddress,\n', '    address interestRateStrategyAddress\n', '  ) external;\n', '\n', '  function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress)\n', '    external;\n', '\n', '  function setConfiguration(address reserve, uint256 configuration) external;\n', '\n', '  /**\n', '   * @dev Returns the configuration of the reserve\n', '   * @param asset The address of the underlying asset of the reserve\n', '   * @return The configuration of the reserve\n', '   **/\n', '  function getConfiguration(address asset)\n', '    external\n', '    view\n', '    returns (DataTypes.ReserveConfigurationMap memory);\n', '\n', '  /**\n', '   * @dev Returns the configuration of the user across all the reserves\n', '   * @param user The user address\n', '   * @return The configuration of the user\n', '   **/\n', '  function getUserConfiguration(address user)\n', '    external\n', '    view\n', '    returns (DataTypes.UserConfigurationMap memory);\n', '\n', '  /**\n', '   * @dev Returns the normalized income normalized income of the reserve\n', '   * @param asset The address of the underlying asset of the reserve\n', "   * @return The reserve's normalized income\n", '   */\n', '  function getReserveNormalizedIncome(address asset) external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the normalized variable debt per unit of asset\n', '   * @param asset The address of the underlying asset of the reserve\n', '   * @return The reserve normalized variable debt\n', '   */\n', '  function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the state and configuration of the reserve\n', '   * @param asset The address of the underlying asset of the reserve\n', '   * @return The state of the reserve\n', '   **/\n', '  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n', '\n', '  function finalizeTransfer(\n', '    address asset,\n', '    address from,\n', '    address to,\n', '    uint256 amount,\n', '    uint256 balanceFromAfter,\n', '    uint256 balanceToBefore\n', '  ) external;\n', '\n', '  function getReservesList() external view returns (address[] memory);\n', '\n', '  function getAddressesProvider() external view returns (ILendingPoolAddressesProviderV2);\n', '\n', '  function setPause(bool val) external;\n', '\n', '  function paused() external view returns (bool);\n', '}\n', '\n', '// File: contracts/handlers/aavev2/IFlashLoanReceiver.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IFlashLoanReceiver {\n', '  function executeOperation(\n', '    address[] calldata assets,\n', '    uint256[] calldata amounts,\n', '    uint256[] calldata premiums,\n', '    address initiator,\n', '    bytes calldata params\n', '  ) external returns (bool);\n', '}\n', '\n', '// File: contracts/handlers/aavev2/HAaveProtocolV2.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract HAaveProtocolV2 is HandlerBase, IFlashLoanReceiver {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    // prettier-ignore\n', '    address public constant PROVIDER = 0xB53C1a33016B2DC2fF3653530bfF1848a515c8c5;\n', '    // prettier-ignore\n', '    address payable public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    // prettier-ignore\n', '    address payable public constant ETHER = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    uint16 public constant REFERRAL_CODE = 56;\n', '\n', '    function getContractName() public pure override returns (string memory) {\n', '        return "HAaveProtocolV2";\n', '    }\n', '\n', '    function deposit(address asset, uint256 amount) external payable {\n', '        amount = _getBalance(asset, amount);\n', '        _deposit(asset, amount);\n', '    }\n', '\n', '    function depositETH(uint256 amount) external payable {\n', '        amount = _getBalance(ETHER, amount);\n', '        IWETH9(WETH).deposit{value: amount}();\n', '        _deposit(WETH, amount);\n', '\n', '        _updateToken(WETH);\n', '    }\n', '\n', '    function withdraw(address asset, uint256 amount)\n', '        external\n', '        payable\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        withdrawAmount = _withdraw(asset, amount);\n', '\n', '        _updateToken(asset);\n', '    }\n', '\n', '    function withdrawETH(uint256 amount)\n', '        external\n', '        payable\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        withdrawAmount = _withdraw(WETH, amount);\n', '        IWETH9(WETH).withdraw(withdrawAmount);\n', '    }\n', '\n', '    function repay(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) external payable returns (uint256 remainDebt) {\n', '        remainDebt = _repay(asset, amount, rateMode, onBehalfOf);\n', '    }\n', '\n', '    function repayETH(\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) external payable returns (uint256 remainDebt) {\n', '        IWETH9(WETH).deposit{value: amount}();\n', '        remainDebt = _repay(WETH, amount, rateMode, onBehalfOf);\n', '\n', '        _updateToken(WETH);\n', '    }\n', '\n', '    function borrow(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode\n', '    ) external payable {\n', '        address onBehalfOf = _getSender();\n', '        _borrow(asset, amount, rateMode, onBehalfOf);\n', '        _updateToken(asset);\n', '    }\n', '\n', '    function borrowETH(uint256 amount, uint256 rateMode) external payable {\n', '        address onBehalfOf = _getSender();\n', '        _borrow(WETH, amount, rateMode, onBehalfOf);\n', '        IWETH9(WETH).withdraw(amount);\n', '    }\n', '\n', '    function flashLoan(\n', '        address[] calldata assets,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata modes,\n', '        bytes calldata params\n', '    ) external payable {\n', '        if (assets.length != amounts.length) {\n', '            _revertMsg("flashLoan", "assets and amounts do not match");\n', '        }\n', '\n', '        if (assets.length != modes.length) {\n', '            _revertMsg("flashLoan", "assets and modes do not match");\n', '        }\n', '\n', '        address onBehalfOf = _getSender();\n', '        address pool =\n', '            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\n', '\n', '        try\n', '            ILendingPoolV2(pool).flashLoan(\n', '                address(this),\n', '                assets,\n', '                amounts,\n', '                modes,\n', '                onBehalfOf,\n', '                params,\n', '                REFERRAL_CODE\n', '            )\n', '        {} catch Error(string memory reason) {\n', '            _revertMsg("flashLoan", reason);\n', '        } catch {\n', '            _revertMsg("flashLoan");\n', '        }\n', '\n', '        // approve lending pool zero\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            IERC20(assets[i]).safeApprove(pool, 0);\n', '            if (modes[i] != 0) _updateToken(assets[i]);\n', '        }\n', '    }\n', '\n', '    function executeOperation(\n', '        address[] memory assets,\n', '        uint256[] memory amounts,\n', '        uint256[] memory premiums,\n', '        address initiator,\n', '        bytes memory params\n', '    ) external override returns (bool) {\n', '        if (\n', '            msg.sender !=\n', '            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool()\n', '        ) {\n', '            _revertMsg("executeOperation", "invalid caller");\n', '        }\n', '\n', '        if (initiator != address(this)) {\n', '            _revertMsg("executeOperation", "not initiated by the proxy");\n', '        }\n', '\n', '        (address[] memory tos, bytes32[] memory configs, bytes[] memory datas) =\n', '            abi.decode(params, (address[], bytes32[], bytes[]));\n', '        IProxy(address(this)).execs(tos, configs, datas);\n', '\n', '        address pool =\n', '            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            uint256 amountOwing = amounts[i].add(premiums[i]);\n', '            IERC20(assets[i]).safeApprove(pool, amountOwing);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /* ========== INTERNAL FUNCTIONS ========== */\n', '\n', '    function _deposit(address asset, uint256 amount) internal {\n', '        (address pool, address aToken) = _getLendingPoolAndAToken(asset);\n', '        IERC20(asset).safeApprove(pool, amount);\n', '\n', '        try\n', '            ILendingPoolV2(pool).deposit(\n', '                asset,\n', '                amount,\n', '                address(this),\n', '                REFERRAL_CODE\n', '            )\n', '        {} catch Error(string memory reason) {\n', '            _revertMsg("deposit", reason);\n', '        } catch {\n', '            _revertMsg("deposit");\n', '        }\n', '\n', '        IERC20(asset).safeApprove(pool, 0);\n', '        _updateToken(aToken);\n', '    }\n', '\n', '    function _withdraw(address asset, uint256 amount)\n', '        internal\n', '        returns (uint256 withdrawAmount)\n', '    {\n', '        (address pool, address aToken) = _getLendingPoolAndAToken(asset);\n', '        amount = _getBalance(aToken, amount);\n', '\n', '        try\n', '            ILendingPoolV2(pool).withdraw(asset, amount, address(this))\n', '        returns (uint256 ret) {\n', '            withdrawAmount = ret;\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("withdraw", reason);\n', '        } catch {\n', '            _revertMsg("withdraw");\n', '        }\n', '    }\n', '\n', '    function _repay(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) internal returns (uint256 remainDebt) {\n', '        address pool =\n', '            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\n', '        IERC20(asset).safeApprove(pool, amount);\n', '\n', '        try\n', '            ILendingPoolV2(pool).repay(asset, amount, rateMode, onBehalfOf)\n', '        {} catch Error(string memory reason) {\n', '            _revertMsg("repay", reason);\n', '        } catch {\n', '            _revertMsg("repay");\n', '        }\n', '\n', '        IERC20(asset).safeApprove(pool, 0);\n', '\n', '        DataTypes.ReserveData memory reserve =\n', '            ILendingPoolV2(pool).getReserveData(asset);\n', '        remainDebt = DataTypes.InterestRateMode(rateMode) ==\n', '            DataTypes.InterestRateMode.STABLE\n', '            ? IERC20(reserve.stableDebtTokenAddress).balanceOf(onBehalfOf)\n', '            : IERC20(reserve.variableDebtTokenAddress).balanceOf(onBehalfOf);\n', '    }\n', '\n', '    function _borrow(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) internal {\n', '        address pool =\n', '            ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\n', '\n', '        try\n', '            ILendingPoolV2(pool).borrow(\n', '                asset,\n', '                amount,\n', '                rateMode,\n', '                REFERRAL_CODE,\n', '                onBehalfOf\n', '            )\n', '        {} catch Error(string memory reason) {\n', '            _revertMsg("borrow", reason);\n', '        } catch {\n', '            _revertMsg("borrow");\n', '        }\n', '    }\n', '\n', '    function _getLendingPoolAndAToken(address underlying)\n', '        internal\n', '        view\n', '        returns (address pool, address aToken)\n', '    {\n', '        pool = ILendingPoolAddressesProviderV2(PROVIDER).getLendingPool();\n', '        try ILendingPoolV2(pool).getReserveData(underlying) returns (\n', '            DataTypes.ReserveData memory data\n', '        ) {\n', '            aToken = data.aTokenAddress;\n', '            if (aToken == address(0))\n', '                _revertMsg("General", "aToken should not be zero address");\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("General", reason);\n', '        } catch {\n', '            _revertMsg("General");\n', '        }\n', '    }\n', '}']