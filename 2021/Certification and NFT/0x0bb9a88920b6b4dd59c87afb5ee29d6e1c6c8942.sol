['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, basic interface\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-20\n', ' * Note: The ERC-165 identifier for this interface is 0x36372b07.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Emitted when tokens are transferred, including zero value transfers.\n', '     * @param _from The account where the transferred tokens are withdrawn from.\n', '     * @param _to The account where the transferred tokens are deposited to.\n', '     * @param _value The amount of tokens being transferred.\n', '     */\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '\n', '    /**\n', '     * @dev Emitted when a successful call to {IERC20-approve(address,uint256)} is made.\n', '     * @param _owner The account granting an allowance to `_spender`.\n', '     * @param _spender The account being granted an allowance from `_owner`.\n', '     * @param _value The allowance amount being granted.\n', '     */\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '\n', '    /**\n', '     * @notice Returns the total token supply.\n', '     * @return The total token supply.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Returns the account balance of another account with address `owner`.\n', '     * @param owner The account whose balance will be returned.\n', '     * @return The account balance of another account with address `owner`.\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Transfers `value` amount of tokens to address `to`.\n', "     * @dev Reverts if the message caller's account balance does not have enough tokens to spend.\n", '     * @dev Emits an {IERC20-Transfer} event.\n', '     * @dev Transfers of 0 values are treated as normal transfers and fire the {IERC20-Transfer} event.\n', '     * @param to The account where the transferred tokens will be deposited to.\n', '     * @param value The amount of tokens to transfer.\n', '     * @return True if the transfer succeeds, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @notice Transfers `value` amount of tokens from address `from` to address `to` via the approval mechanism.\n', '     * @dev Reverts if the caller has not been approved by `from` for at least `value`.\n', '     * @dev Reverts if `from` does not have at least `value` of balance.\n', '     * @dev Emits an {IERC20-Transfer} event.\n', '     * @dev Transfers of 0 values are treated as normal transfers and fire the {IERC20-Transfer} event.\n', '     * @param from The account where the transferred tokens will be withdrawn from.\n', '     * @param to The account where the transferred tokens will be deposited to.\n', '     * @param value The amount of tokens to transfer.\n', '     * @return True if the transfer succeeds, false otherwise.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * Sets `value` as the allowance from the caller to `spender`.\n', '     *  IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     *  that someone may use both the old and the new allowance by unfortunate\n', '     *  transaction ordering. One possible solution to mitigate this race\n', "     *  condition is to first reduce the spender's allowance to 0 and set the\n", '     *  desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     * @dev Reverts if `spender` is the zero address.\n', '     * @dev Emits the {IERC20-Approval} event.\n', '     * @param spender The account being granted the allowance by the message caller.\n', '     * @param value The allowance amount to grant.\n', '     * @return True if the approval succeeds, false otherwise.\n', '     */\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * Returns the amount which `spender` is allowed to spend on behalf of `owner`.\n', '     * @param owner The account that has granted an allowance to `spender`.\n', '     * @param spender The account that was granted an allowance by `owner`.\n', '     * @return The amount which `spender` is allowed to spend on behalf of `owner`.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, optional extension: Detailed\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' * Note: the ERC-165 identifier for this interface is 0xa219a025.\n', ' */\n', 'interface IERC20Detailed {\n', '    /**\n', '     * Returns the name of the token. E.g. "My Token".\n', '     * Note: the ERC-165 identifier for this interface is 0x06fdde03.\n', '     * @return The name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * Returns the symbol of the token. E.g. "HIX".\n', '     * Note: the ERC-165 identifier for this interface is 0x95d89b41.\n', '     * @return The symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * Returns the number of decimals used to display the balances.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract.\n', '     * Note: the ERC-165 identifier for this interface is 0x313ce567.\n', '     * @return The number of decimals used to display the balances.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, optional extension: Allowance\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' * Note: the ERC-165 identifier for this interface is 0xd5b86388.\n', ' */\n', 'interface IERC20Allowance {\n', '    /**\n', '     * Increases the allowance granted by the sender to `spender` by `value`.\n', '     *  This is an alternative to {approve} that can be used as a mitigation for\n', '     *  problems described in {IERC20-approve}.\n', '     * @dev Reverts if `spender` is the zero address.\n', "     * @dev Reverts if `spender`'s allowance overflows.\n", '     * @dev Emits an {IERC20-Approval} event with an updated allowance for `spender`.\n', '     * @param spender The account whose allowance is being increased by the message caller.\n', '     * @param value The allowance amount increase.\n', '     * @return True if the allowance increase succeeds, false otherwise.\n', '     */\n', '    function increaseAllowance(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * Decreases the allowance granted by the sender to `spender` by `value`.\n', '     *  This is an alternative to {approve} that can be used as a mitigation for\n', '     *  problems described in {IERC20-approve}.\n', '     * @dev Reverts if `spender` is the zero address.\n', '     * @dev Reverts if `spender` has an allowance with the message caller for less than `value`.\n', '     * @dev Emits an {IERC20-Approval} event with an updated allowance for `spender`.\n', '     * @param spender The account whose allowance is being decreased by the message caller.\n', '     * @param value The allowance amount decrease.\n', '     * @return True if the allowance decrease succeeds, false otherwise.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 value) external returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, optional extension: Safe Transfers\n', ' * Note: the ERC-165 identifier for this interface is 0x53f41a97.\n', ' */\n', 'interface IERC20SafeTransfers {\n', '    /**\n', '     * Transfers tokens from the caller to `to`. If this address is a contract, then calls `onERC20Received(address,address,uint256,bytes)` on it.\n', '     * @dev Reverts if `to` is the zero address.\n', "     * @dev Reverts if `value` is greater than the sender's balance.\n", '     * @dev Reverts if `to` is a contract which does not implement `onERC20Received(address,address,uint256,bytes)`.\n', '     * @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` returns a wrong value.\n', '     * @dev Emits an {IERC20-Transfer} event.\n', '     * @param to The address for the tokens to be transferred to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @param data Optional additional data with no specified format, to be passed to the receiver contract.\n', '     * @return true.\n', '     */\n', '    function safeTransfer(\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * Transfers tokens from `from` to another address, using the allowance mechanism.\n', '     *  If this address is a contract, then calls `onERC20Received(address,address,uint256,bytes)` on it.\n', '     * @dev Reverts if `to` is the zero address.\n', "     * @dev Reverts if `value` is greater than `from`'s balance.\n", '     * @dev Reverts if the sender does not have at least `value` allowance by `from`.\n', '     * @dev Reverts if `to` is a contract which does not implement `onERC20Received(address,address,uint256,bytes)`.\n', '     * @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` returns a wrong value.\n', '     * @dev Emits an {IERC20-Transfer} event.\n', '     * @param from The address which owns the tokens to be transferred.\n', '     * @param to The address for the tokens to be transferred to.\n', '     * @param amount The amount of tokens to be transferred.\n', '     * @param data Optional additional data with no specified format, to be passed to the receiver contract.\n', '     * @return true.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, optional extension: Multi Transfers\n', ' * Note: the ERC-165 identifier for this interface is 0xd5b86388.\n', ' */\n', 'interface IERC20MultiTransfers {\n', '    /**\n', "     * Moves multiple `amounts` tokens from the caller's account to each of `recipients`.\n", '     * @dev Reverts if `recipients` and `amounts` have different lengths.\n', '     * @dev Reverts if one of `recipients` is the zero address.\n', '     * @dev Reverts if the caller has an insufficient balance.\n', '     * @dev Emits an {IERC20-Transfer} event for each individual transfer.\n', '     * @param recipients the list of recipients to transfer the tokens to.\n', '     * @param amounts the amounts of tokens to transfer to each of `recipients`.\n', '     * @return a boolean value indicating whether the operation succeeded.\n', '     */\n', '    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external returns (bool);\n', '\n', '    /**\n', '     * Moves multiple `amounts` tokens from an account to each of `recipients`, using the approval mechanism.\n', '     * @dev Reverts if `recipients` and `amounts` have different lengths.\n', '     * @dev Reverts if one of `recipients` is the zero address.\n', '     * @dev Reverts if `from` has an insufficient balance.\n', '     * @dev Reverts if the sender does not have at least the sum of all `amounts` as allowance by `from`.\n', '     * @dev Emits an {IERC20-Transfer} event for each individual transfer.\n', '     * @dev Emits an {IERC20-Approval} event.\n', '     * @param from The address which owns the tokens to be transferred.\n', '     * @param recipients the list of recipients to transfer the tokens to.\n', '     * @param amounts the amounts of tokens to transfer to each of `recipients`.\n', '     * @return a boolean value indicating whether the operation succeeded.\n', '     */\n', '    function multiTransferFrom(\n', '        address from,\n', '        address[] calldata recipients,\n', '        uint256[] calldata amounts\n', '    ) external returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, ERC1046 optional extension: Metadata\n', ' * See https://eips.ethereum.org/EIPS/eip-1046\n', ' * Note: the ERC-165 identifier for this interface is 0x3c130d90.\n', ' */\n', 'interface IERC20Metadata {\n', '    /**\n', '     * Returns a distinct Uniform Resource Identifier (URI) for the token metadata.\n', '     * @return a distinct Uniform Resource Identifier (URI) for the token metadata.\n', '     */\n', '    function tokenURI() external view returns (string memory);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, ERC2612 optional extension: permit – 712-signed approvals\n', ' * @dev Interface for allowing ERC20 approvals to be made via ECDSA `secp256k1` signatures.\n', ' * See https://eips.ethereum.org/EIPS/eip-2612\n', ' * Note: the ERC-165 identifier for this interface is 0x9d8ff7da.\n', ' */\n', 'interface IERC20Permit {\n', '    /**\n', "     * Sets `value` as the allowance of `spender` over the tokens of `owner`, given `owner` account's signed permit.\n", '     * @dev WARNING: The standard ERC-20 race condition for approvals applies to `permit()` as well: https://swcregistry.io/docs/SWC-114\n', '     * @dev Reverts if `owner` is the zero address.\n', '     * @dev Reverts if the current blocktime is > `deadline`.\n', '     * @dev Reverts if `r`, `s`, and `v` is not a valid `secp256k1` signature from `owner`.\n', '     * @dev Emits an {IERC20-Approval} event.\n', '     * @param owner The token owner granting the allowance to `spender`.\n', '     * @param spender The token spender being granted the allowance by `owner`.\n', '     * @param value The token amount of the allowance.\n', '     * @param deadline The deadline from which the permit signature is no longer valid.\n', '     * @param v Permit signature v parameter\n', '     * @param r Permit signature r parameter.\n', '     * @param s Permis signature s parameter.\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '\n', '    /**\n', '     * Returns the current permit nonce of `owner`.\n', '     * @param owner the address to check the nonce of.\n', '     * @return the current permit nonce of `owner`.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * Returns the EIP-712 encoded hash struct of the domain-specific information for permits.\n', '     *\n', '     * @dev A common ERC-20 permit implementation choice for the `DOMAIN_SEPARATOR` is:\n', '     *\n', '     *  keccak256(\n', '     *      abi.encode(\n', '     *          keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '     *          keccak256(bytes(name)),\n', '     *          keccak256(bytes(version)),\n', '     *          chainId,\n', '     *          address(this)))\n', '     *\n', '     *  where\n', '     *   - `name` (string) is the ERC-20 token name.\n', '     *   - `version` (string) refers to the ERC-20 token contract version.\n', '     *   - `chainId` (uint256) is the chain ID to which the ERC-20 token contract is deployed to.\n', '     *   - `verifyingContract` (address) is the ERC-20 token contract address.\n', '     *\n', '     * @return the EIP-712 encoded hash struct of the domain-specific information for permits.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, Receiver\n', ' * See https://eips.ethereum.org/EIPS/eip-20\n', ' * Note: the ERC-165 identifier for this interface is 0x4fc35859.\n', ' */\n', 'interface IERC20Receiver {\n', '    /**\n', '     * Handles the receipt of ERC20 tokens.\n', '     * @param sender The initiator of the transfer.\n', '     * @param from The address which transferred the tokens.\n', '     * @param value The amount of tokens transferred.\n', '     * @param data Optional additional data with no specified format.\n', '     * @return bytes4 `bytes4(keccak256("onERC20Received(address,address,uint256,bytes)"))`\n', '     */\n', '    function onERC20Received(\n', '        address sender,\n', '        address from,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' */\n', 'contract ERC20 is IERC165, Context, IERC20, IERC20Detailed, IERC20Metadata, IERC20Allowance, IERC20MultiTransfers, IERC20SafeTransfers, IERC20Permit {\n', '    using Address for address;\n', '\n', '    // bytes4(keccak256("onERC20Received(address,address,uint256,bytes)"))\n', '    bytes4 internal constant _ERC20_RECEIVED = 0x4fc35859;\n', '\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)")\n', '    bytes32 internal constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    bytes32 public immutable override DOMAIN_SEPARATOR;\n', '\n', '    mapping(address => uint256) public override nonces;\n', '\n', '    string internal _name;\n', '    string internal _symbol;\n', '    uint8 internal immutable _decimals;\n', '    string internal _tokenURI;\n', '\n', '    mapping(address => uint256) internal _balances;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '    uint256 internal _totalSupply;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        string memory version,\n', '        string memory tokenURI\n', '    ) internal {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _tokenURI = tokenURI;\n', '\n', '        uint256 chainId;\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '\n', '        DOMAIN_SEPARATOR = keccak256(\n', '            abi.encode(\n', '                keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)"),\n', '                keccak256(bytes(name)),\n', '                keccak256(bytes(version)),\n', '                chainId,\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC165 ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC165-supportsInterface}.\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return\n', '            interfaceId == type(IERC165).interfaceId ||\n', '            interfaceId == type(IERC20).interfaceId ||\n', '            interfaceId == type(IERC20Detailed).interfaceId ||\n', '            interfaceId == 0x06fdde03 || // bytes4(keccak256("name()"))\n', '            interfaceId == 0x95d89b41 || // bytes4(keccak256("symbol()"))\n', '            interfaceId == 0x313ce567 || // bytes4(keccak256("decimals()"))\n', '            interfaceId == type(IERC20Metadata).interfaceId ||\n', '            interfaceId == type(IERC20Allowance).interfaceId ||\n', '            interfaceId == type(IERC20MultiTransfers).interfaceId ||\n', '            interfaceId == type(IERC20SafeTransfers).interfaceId ||\n', '            interfaceId == type(IERC20Permit).interfaceId;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20Detailed ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20Detailed-name}.\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /// @dev See {IERC20Detailed-symbol}.\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /// @dev See {IERC20Detailed-decimals}.\n', '    function decimals() public view override returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20Metadata ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20Metadata-tokenURI}.\n', '    function tokenURI() public view override returns (string memory) {\n', '        return _tokenURI;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20 ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20-totalSupply}.\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @dev See {IERC20-balanceOf}.\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /// @dev See {IERC20-allowance}.\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        if (owner == spender) {\n', '            return type(uint256).max;\n', '        }\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /// @dev See {IERC20-approve}.\n', '    function approve(address spender, uint256 value) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, value);\n', '        return true;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20 Allowance ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20Allowance-increaseAllowance}.\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual override returns (bool) {\n', '        require(spender != address(0), "ERC20: zero address");\n', '        address owner = _msgSender();\n', '        uint256 allowance_ = _allowances[owner][spender];\n', '        uint256 newAllowance = allowance_ + addedValue;\n', '        require(newAllowance >= allowance_, "ERC20: allowance overflow");\n', '        _allowances[owner][spender] = newAllowance;\n', '        emit Approval(owner, spender, newAllowance);\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20Allowance-decreaseAllowance}.\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual override returns (bool) {\n', '        require(spender != address(0), "ERC20: zero address");\n', '        _decreaseAllowance(_msgSender(), spender, subtractedValue);\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20-transfer}.\n', '    function transfer(address to, uint256 value) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), to, value);\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20-transferFrom}.\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public virtual override returns (bool) {\n', '        _transferFrom(_msgSender(), from, to, value);\n', '        return true;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20MultiTransfer ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20MultiTransfer-multiTransfer(address[],uint256[])}.\n', '    function multiTransfer(address[] calldata recipients, uint256[] calldata amounts) external virtual override returns (bool) {\n', '        uint256 length = recipients.length;\n', '        require(length == amounts.length, "ERC20: inconsistent arrays");\n', '        address sender = _msgSender();\n', '        for (uint256 i = 0; i != length; ++i) {\n', '            _transfer(sender, recipients[i], amounts[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20MultiTransfer-multiTransferFrom(address,address[],uint256[])}.\n', '    function multiTransferFrom(\n', '        address from,\n', '        address[] calldata recipients,\n', '        uint256[] calldata values\n', '    ) external virtual override returns (bool) {\n', '        uint256 length = recipients.length;\n', '        require(length == values.length, "ERC20: inconsistent arrays");\n', '        uint256 total;\n', '        for (uint256 i = 0; i != length; ++i) {\n', '            uint256 value = values[i];\n', '            _transfer(from, recipients[i], value);\n', "            total += value; // cannot overflow, else it would mean thann from's balance underflowed first\n", '        }\n', '\n', '        _decreaseAllowance(from, _msgSender(), total);\n', '\n', '        return true;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20SafeTransfers ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC20Safe-safeTransfer(address,uint256,bytes)}.\n', '    function safeTransfer(\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external virtual override returns (bool) {\n', '        address sender = _msgSender();\n', '        _transfer(sender, to, amount);\n', '        if (to.isContract()) {\n', '            require(IERC20Receiver(to).onERC20Received(sender, sender, amount, data) == _ERC20_RECEIVED, "ERC20: transfer refused");\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20Safe-safeTransferFrom(address,address,uint256,bytes)}.\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external virtual override returns (bool) {\n', '        address sender = _msgSender();\n', '        _transferFrom(sender, from, to, amount);\n', '        if (to.isContract()) {\n', '            require(IERC20Receiver(to).onERC20Received(sender, from, amount, data) == _ERC20_RECEIVED, "ERC20: transfer refused");\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /////////////////////////////////////////// ERC20Permit ///////////////////////////////////////\n', '\n', '    /// @dev See {IERC2612-permit(address,address,uint256,uint256,uint8,bytes32,bytes32)}.\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external virtual override {\n', '        require(owner != address(0), "ERC20: zero address owner");\n', '        require(block.timestamp <= deadline, "ERC20: expired permit");\n', '        bytes32 hashStruct = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline));\n', '        bytes32 hash = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, hashStruct));\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0) && signer == owner, "ERC20: invalid permit");\n', '        _approve(owner, spender, value);\n', '    }\n', '\n', '    /////////////////////////////////////////// Internal Functions ///////////////////////////////////////\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        require(spender != address(0), "ERC20: zero address");\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    function _decreaseAllowance(\n', '        address owner,\n', '        address spender,\n', '        uint256 subtractedValue\n', '    ) internal {\n', '        if (owner == spender) return;\n', '\n', '        uint256 allowance_ = _allowances[owner][spender];\n', '        if (allowance_ != type(uint256).max && subtractedValue != 0) {\n', '            // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n', '            uint256 newAllowance = allowance_ - subtractedValue;\n', '            require(newAllowance <= allowance_, "ERC20: insufficient allowance");\n', '            _allowances[owner][spender] = newAllowance;\n', '            allowance_ = newAllowance;\n', '        }\n', '        emit Approval(owner, spender, allowance_);\n', '    }\n', '\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal virtual {\n', '        require(to != address(0), "ERC20: zero address");\n', '        uint256 balance = _balances[from];\n', '        require(balance >= value, "ERC20: insufficient balance");\n', '        _balances[from] = balance - value;\n', '        _balances[to] += value;\n', '        emit Transfer(from, to, value);\n', '    }\n', '\n', '    function _transferFrom(\n', '        address sender,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _decreaseAllowance(from, sender, value);\n', '        _transfer(from, to, value);\n', '    }\n', '\n', '    function _mint(address to, uint256 value) internal virtual {\n', '        require(to != address(0), "ERC20: zero address");\n', '        uint256 supply = _totalSupply;\n', '        uint256 newSupply = supply + value;\n', '        require(newSupply >= supply, "ERC20: supply overflow");\n', '        _totalSupply = newSupply;\n', '        _balances[to] += value; // balance cannot overflow if supply does not\n', '        emit Transfer(address(0), to, value);\n', '    }\n', '\n', '    function _batchMint(address[] memory recipients, uint256[] memory values) internal virtual {\n', '        uint256 length = recipients.length;\n', '        require(length == values.length, "ERC20: inconsistent arrays");\n', '        uint256 supply = _totalSupply;\n', '        for (uint256 i = 0; i != length; ++i) {\n', '            address to = recipients[i];\n', '            require(to != address(0), "ERC20: zero address");\n', '            uint256 value = values[i];\n', '            uint256 newSupply = supply + value;\n', '            require(newSupply >= supply, "ERC20: supply overflow");\n', '            supply = newSupply;\n', '            _balances[to] += value; // balance cannot overflow if supply does not\n', '            emit Transfer(address(0), to, value);\n', '        }\n', '        _totalSupply = supply;\n', '    }\n', '\n', '    function _burn(address from, uint256 value) internal virtual {\n', '        uint256 balance = _balances[from];\n', '        require(balance >= value, "ERC20: insufficient balance");\n', '        _balances[from] = balance - value;\n', '        _totalSupply -= value; // will not underflow if balance does not\n', '        emit Transfer(from, address(0), value);\n', '    }\n', '\n', '    function _burnFrom(address from, uint256 value) internal virtual {\n', '        _decreaseAllowance(from, _msgSender(), value);\n', '        _burn(from, value);\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC20 Token Standard, optional extension: Burnable\n', ' * Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\n', ' */\n', 'interface IERC20Burnable {\n', '    /**\n', '     * Burns `value` tokens from the message sender, decreasing the total supply.\n', '     * @dev Reverts if the sender owns less than `value` tokens.\n', '     * @dev Emits a {IERC20-Transfer} event with `_to` set to the zero address.\n', '     * @param value the amount of tokens to burn.\n', '     * @return a boolean value indicating whether the operation succeeded.\n', '     */\n', '    function burn(uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * Burns `value` tokens from `from`, using the allowance mechanism and decreasing the total supply.\n', '     * @dev Reverts if `from` owns less than `value` tokens.\n', '     * @dev Reverts if the message sender is not approved by `from` for at least `value` tokens.\n', '     * @dev Emits a {IERC20-Transfer} event with `_to` set to the zero address.\n', '     * @dev Emits a {IERC20-Approval} event (non-standard).\n', '     * @param from the account to burn the tokens from.\n', '     * @param value the amount of tokens to burn.\n', '     * @return a boolean value indicating whether the operation succeeded.\n', '     */\n', '    function burnFrom(address from, uint256 value) external returns (bool);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-erc20_base-5.1.0/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '/**\n', ' * @title ERC20 Fungible Token Contract, burnable version.\n', ' */\n', 'contract ERC20Burnable is ERC20, IERC20Burnable {\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        string memory version,\n', '        string memory tokenURI\n', '    ) public ERC20(name, symbol, decimals, version, tokenURI) {}\n', '\n', '    /// @dev See {IERC165-supportsInterface}.\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC20Burnable).interfaceId || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /// @dev See {IERC20Burnable-burn(uint256)}.\n', '    function burn(uint256 amount) public virtual override returns (bool) {\n', '        _burn(_msgSender(), amount);\n', '        return true;\n', '    }\n', '\n', '    /// @dev See {IERC20Burnable-burnFrom(address,uint256)}.\n', '    function burnFrom(address from, uint256 value) public virtual override returns (bool) {\n', '        _burnFrom(from, value);\n', '        return true;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solc-0.6/token/ERC20/TOWERChest.sol\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', '/**\n', ' * @title TOWERChest\n', ' * A burnable ERC-20 token contract for Crazy Defense Heroes (CDH). TOWER Chests are tokens that can be burned to obtain CDH NFTs.\n', ' * @dev TWR.BRNZ for Bronze chests.\n', ' * @dev TWR.SLVR for Silver chests.\n', ' * @dev TWR.GOLD for Gold chests.\n', ' */\n', 'contract TOWERChest is ERC20Burnable, Ownable {\n', '    /**\n', '     * Constructor.\n', '     * @param name Name of the token.\n', '     * @param symbol Symbol of the token.\n', '     * @param decimals Number of decimals the token uses.\n', '     * @param version Signing domain version used for IERC2612 permit signatures.\n', '     * @param tokenURI The URI for the token metadata.\n', '     * @param holder Account to mint the initial total supply to.\n', '     * @param totalSupply Total supply amount to mint to the message caller.\n', '     */\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        uint8 decimals,\n', '        string memory version,\n', '        string memory tokenURI,\n', '        address holder,\n', '        uint256 totalSupply\n', '    ) public ERC20Burnable(name, symbol, decimals, version, tokenURI) {\n', '        _mint(holder, totalSupply);\n', '    }\n', '\n', '    /**\n', '     * Updates the token metadata URI.\n', '     * @dev Reverts if the sender is not the contract owner.\n', '     * @param tokenURI_ the new token metdata URI.\n', '     */\n', '    function updateTokenURI(string calldata tokenURI_) external {\n', '        require(_msgSender() == owner(), "TOWERChest: not the owner");\n', '        _tokenURI = tokenURI_;\n', '    }\n', '}']