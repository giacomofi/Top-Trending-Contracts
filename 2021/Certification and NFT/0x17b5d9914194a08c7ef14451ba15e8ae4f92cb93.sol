['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/// GebProxyActions.sol\n', '\n', '// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract CollateralLike {\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public;\n', '    function transferFrom(address, address, uint) virtual public;\n', '    function deposit() virtual public payable;\n', '    function withdraw(uint) virtual public;\n', '}\n', '\n', 'abstract contract ManagerLike {\n', '    function safeCan(address, uint, address) virtual public view returns (uint);\n', '    function collateralTypes(uint) virtual public view returns (bytes32);\n', '    function ownsSAFE(uint) virtual public view returns (address);\n', '    function safes(uint) virtual public view returns (address);\n', '    function safeEngine() virtual public view returns (address);\n', '    function openSAFE(bytes32, address) virtual public returns (uint);\n', '    function transferSAFEOwnership(uint, address) virtual public;\n', '    function allowSAFE(uint, address, uint) virtual public;\n', '    function allowHandler(address, uint) virtual public;\n', '    function modifySAFECollateralization(uint, int, int) virtual public;\n', '    function transferCollateral(uint, address, uint) virtual public;\n', '    function transferInternalCoins(uint, address, uint) virtual public;\n', '    function quitSystem(uint, address) virtual public;\n', '    function enterSystem(address, uint) virtual public;\n', '    function moveSAFE(uint, uint) virtual public;\n', '    function protectSAFE(uint, address, address) virtual public;\n', '}\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function canModifySAFE(address, address) virtual public view returns (uint);\n', '    function collateralTypes(bytes32) virtual public view returns (uint, uint, uint, uint, uint);\n', '    function coinBalance(address) virtual public view returns (uint);\n', '    function safes(bytes32, address) virtual public view returns (uint, uint);\n', '    function modifySAFECollateralization(bytes32, address, address, address, int, int) virtual public;\n', '    function approveSAFEModification(address) virtual public;\n', '    function transferInternalCoins(address, address, uint) virtual public;\n', '}\n', '\n', 'abstract contract CollateralJoinLike {\n', '    function decimals() virtual public returns (uint);\n', '    function collateral() virtual public returns (CollateralLike);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '}\n', '\n', 'abstract contract DSTokenLike {\n', '    function balanceOf(address) virtual public view returns (uint);\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public returns (bool);\n', '    function transferFrom(address, address, uint) virtual public returns (bool);\n', '}\n', '\n', 'abstract contract WethLike {\n', '    function balanceOf(address) virtual public view returns (uint);\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public;\n', '    function transferFrom(address, address, uint) virtual public;\n', '    function deposit() virtual public payable;\n', '    function withdraw(uint) virtual public;\n', '}\n', '\n', 'abstract contract CoinJoinLike {\n', '    function safeEngine() virtual public returns (SAFEEngineLike);\n', '    function systemCoin() virtual public returns (DSTokenLike);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '}\n', '\n', 'abstract contract ApproveSAFEModificationLike {\n', '    function approveSAFEModification(address) virtual public;\n', '    function denySAFEModification(address) virtual public;\n', '}\n', '\n', 'abstract contract GlobalSettlementLike {\n', '    function collateralCashPrice(bytes32) virtual public view returns (uint);\n', '    function redeemCollateral(bytes32, uint) virtual public;\n', '    function freeCollateral(bytes32) virtual public;\n', '    function prepareCoinsForRedeeming(uint) virtual public;\n', '    function processSAFE(bytes32, address) virtual public;\n', '}\n', '\n', 'abstract contract ProxyRegistryLike {\n', '    function proxies(address) virtual public view returns (address);\n', '    function build(address) virtual public returns (address);\n', '}\n', '\n', 'abstract contract ProxyLike {\n', '    function owner() virtual public view returns (address);\n', '}\n', '\n', '// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '// WARNING: These functions meant to be used as a a library for a DSProxy. Some are unsafe if you call them directly.\n', '// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n', '\n', 'contract Common {\n', '    uint256 constant RAY = 10 ** 27;\n', '\n', '    // Internal functions\n', '    function multiply(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "mul-overflow");\n', '    }\n', '\n', '    function _coinJoin_join(address apt, address safeHandler, uint wad) internal {\n', '        // Approves adapter to take the COIN amount\n', '        CoinJoinLike(apt).systemCoin().approve(apt, wad);\n', '        // Joins COIN into the safeEngine\n', '        CoinJoinLike(apt).join(safeHandler, wad);\n', '    }\n', '\n', '    // Public functions\n', '    function coinJoin_join(address apt, address safeHandler, uint wad) public {\n', "        // Gets COIN from the user's wallet\n", '        CoinJoinLike(apt).systemCoin().transferFrom(msg.sender, address(this), wad);\n', '\n', '        _coinJoin_join(apt, safeHandler, wad);\n', '    }\n', '}\n', '\n', 'contract GebProxyActionsGlobalSettlement is Common {\n', '\n', '    // Internal functions\n', '    function _freeCollateral(\n', '        address manager,\n', '        address globalSettlement,\n', '        uint safe\n', '    ) internal returns (uint lockedCollateral) {\n', '        bytes32 collateralType = ManagerLike(manager).collateralTypes(safe);\n', '        address safeHandler = ManagerLike(manager).safes(safe);\n', '        SAFEEngineLike safeEngine = SAFEEngineLike(ManagerLike(manager).safeEngine());\n', '        uint generatedDebt;\n', '        (lockedCollateral, generatedDebt) = safeEngine.safes(collateralType, safeHandler);\n', '\n', '        // If SAFE still has debt, it needs to be paid\n', '        if (generatedDebt > 0) {\n', '            GlobalSettlementLike(globalSettlement).processSAFE(collateralType, safeHandler);\n', '            (lockedCollateral,) = safeEngine.safes(collateralType, safeHandler);\n', '        }\n', "        // Approves the manager to transfer the position to proxy's address in the safeEngine\n", '        if (safeEngine.canModifySAFE(address(this), address(manager)) == 0) {\n', '            safeEngine.approveSAFEModification(manager);\n', '        }\n', '        // Transfers position from SAFE to the proxy address\n', '        ManagerLike(manager).quitSystem(safe, address(this));\n', '        // Frees the position and recovers the collateral in the safeEngine registry\n', '        GlobalSettlementLike(globalSettlement).freeCollateral(collateralType);\n', '    }\n', '\n', '    // Public functions\n', '    function freeETH(\n', '        address manager,\n', '        address ethJoin,\n', '        address globalSettlement,\n', '        uint safe\n', '    ) external {\n', '        uint wad = _freeCollateral(manager, globalSettlement, safe);\n', '        // Exits WETH amount to proxy address as a token\n', '        CollateralJoinLike(ethJoin).exit(address(this), wad);\n', '        // Converts WETH to ETH\n', '        CollateralJoinLike(ethJoin).collateral().withdraw(wad);\n', "        // Sends ETH back to the user's wallet\n", '        msg.sender.transfer(wad);\n', '    }\n', '\n', '    function freeTokenCollateral(\n', '        address manager,\n', '        address collateralJoin,\n', '        address globalSettlement,\n', '        uint safe\n', '    ) public {\n', '        uint amt = _freeCollateral(manager, globalSettlement, safe) / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\n', "        // Exits token amount to the user's wallet as a token\n", '        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n', '    }\n', '\n', '    function prepareCoinsForRedeeming(\n', '        address coinJoin,\n', '        address globalSettlement,\n', '        uint wad\n', '    ) public {\n', '        coinJoin_join(coinJoin, address(this), wad);\n', '        SAFEEngineLike safeEngine = CoinJoinLike(coinJoin).safeEngine();\n', "        // Approves the globalSettlement to take out COIN from the proxy's balance in the safeEngine\n", '        if (safeEngine.canModifySAFE(address(this), address(globalSettlement)) == 0) {\n', '            safeEngine.approveSAFEModification(globalSettlement);\n', '        }\n', '        GlobalSettlementLike(globalSettlement).prepareCoinsForRedeeming(wad);\n', '    }\n', '\n', '    function redeemETH(\n', '        address ethJoin,\n', '        address globalSettlement,\n', '        bytes32 collateralType,\n', '        uint wad\n', '    ) public {\n', '        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\n', '        uint collateralWad = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY;\n', '        // Exits WETH amount to proxy address as a token\n', '        CollateralJoinLike(ethJoin).exit(address(this), collateralWad);\n', '        // Converts WETH to ETH\n', '        CollateralJoinLike(ethJoin).collateral().withdraw(collateralWad);\n', "        // Sends ETH back to the user's wallet\n", '        msg.sender.transfer(collateralWad);\n', '    }\n', '\n', '    function redeemTokenCollateral(\n', '        address collateralJoin,\n', '        address globalSettlement,\n', '        bytes32 collateralType,\n', '        uint wad\n', '    ) public {\n', '        GlobalSettlementLike(globalSettlement).redeemCollateral(collateralType, wad);\n', "        // Exits token amount to the user's wallet as a token\n", '        uint amt = multiply(wad, GlobalSettlementLike(globalSettlement).collateralCashPrice(collateralType)) / RAY / 10 ** (18 - CollateralJoinLike(collateralJoin).decimals());\n', '        CollateralJoinLike(collateralJoin).exit(msg.sender, amt);\n', '    }\n', '}']