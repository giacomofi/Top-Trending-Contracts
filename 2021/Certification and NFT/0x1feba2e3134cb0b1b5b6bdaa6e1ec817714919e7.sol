['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-26\n', '*/\n', '\n', 'pragma solidity 0.6.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'library EthAddressLib {\n', '    /**\n', '     * @dev returns the address used within the protocol to identify ETH\n', '     * @return the address assigned to ETH\n', '     */\n', '    function ethAddress() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IPriceOracles {\n', '    function get(address token) external view returns (uint256, bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a < b) {\n', '            return b - a;\n', '        }\n', '        return a - b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '// chainlink 价格合约接口\n', 'interface AggregatorInterface {\n', '    function latestAnswer() external view returns (int256);\n', '    function latestRoundData()\n', '        external\n', '        view\n', '        returns (\n', '            uint80 roundId,\n', '            int256 answer, //\n', '            uint256 startedAt,\n', '            uint256 updatedAt, //\n', '            uint80 answeredInRound\n', '        );\n', '}\n', '\n', 'contract ChainlinkWrapper is Initializable, IPriceOracles {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    address public multiSig;\n', '    address public admin;\n', '    \n', '    // ETH网络：存储 ETH/USD 交易对合约地址, 其他xxx_ETH合约通过ETH/USD进行中转计算\n', '    address public ethToUsdPriceOracle;\n', '    // 维护需要从chainlink取价格的token 地址 => chainlink 价格合约地址的映射\n', '    mapping(address => address) public tokenChainlinkMap;\n', '\n', '    struct Price {\n', '        uint price;\n', '        uint expiration;\n', '    }\n', '\n', '    mapping (address => Price) public prices;\n', '\n', '    mapping (address => bool) public directTokenMap;//直接调用 token=> true, other false\n', '    \n', '    //BNB网络：存储BNB/USD 交易对合约地址, 其他xxx_BNB合约通过BNB/USD进行中转计算\n', '    address public bnbToUsdPriceOracle;\n', '\n', '    event SetTokenChainlinkMap(address token, address chainlink);\n', '    event SetTokenChainlinkMaps(address[] tokens, address[] chainlinks);\n', '\n', '    event SetDirectTokenMap(address token, bool direct);\n', '    event SetDirectTokenMaps(address[] tokens, bool direct);\n', '\n', '\n', '    function initialize(address _multiSig)\n', '        public\n', '        initializer\n', '    {\n', '        multiSig = _multiSig;\n', '        admin = msg.sender;\n', '    }\n', '\n', '    // constructor(address _multiSig) public\n', '    // {\n', '    //     multiSig = _multiSig;\n', '    //     admin = msg.sender;\n', '    // }\n', '\n', '    receive() external payable {}\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "require admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyMultiSig {\n', '        require(msg.sender == multiSig, "require multiSig");\n', '        _;\n', '    }\n', '\n', '    function setMultiSig(address _multiSig) external onlyMultiSig {\n', '        multiSig = _multiSig;\n', '    }\n', '\n', '    function setAdmin(address _admin) external onlyMultiSig {\n', '        admin = _admin;\n', '    }\n', '\n', '    function isEthOrBnB(address token) public view returns (bool) {\n', '        if (token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '             || token == address(0)\n', '             || token == address(0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB)) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function get(address token) external override view returns (uint256, bool) {\n', '        if (tokenChainlinkMap[token] != address(0)) {\n', '            return getChainLinkPrice(token);\n', '        }\n', '        \n', '        return (0, false);\n', '    }\n', '\n', '    function setEthToUsdPriceOracle(address _ethToUsdPriceOracle) external onlyAdmin {\n', '        ethToUsdPriceOracle = _ethToUsdPriceOracle;\n', '    }\n', '\n', '    function setBnbToUsdPriceOracle(address _bnbToUsdPriceOracle) external onlyAdmin {\n', '        bnbToUsdPriceOracle = _bnbToUsdPriceOracle;\n', '    }\n', '\n', '    function setTokenChainlinkMap(address token, address chainlink)\n', '        public\n', '        onlyAdmin\n', '    {\n', '        tokenChainlinkMap[token] = chainlink;\n', '        emit SetTokenChainlinkMap(token, chainlink);\n', '    }\n', '\n', '    function setTokenChainlinkMaps(address[] calldata tokens, address[] calldata chainlinks)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        require(tokens.length == chainlinks.length, "inconsistent length");\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            setTokenChainlinkMap(tokens[i], chainlinks[i]);\n', '        }\n', '        emit SetTokenChainlinkMaps(tokens, chainlinks);\n', '    }\n', '\n', '    function setDirectTokenMap(address token, bool direct) external onlyAdmin {\n', '        directTokenMap[token] = direct;\n', '\n', '        emit SetDirectTokenMap(token, direct);\n', '    }\n', '\n', '    function setDirectTokenMaps(address[] calldata tokens, bool direct) external onlyAdmin {\n', '        for (uint i = 0; i < tokens.length; i++) {\n', '            directTokenMap[tokens[i]] = direct;\n', '        }\n', '\n', '        emit SetDirectTokenMaps(tokens, direct);\n', '    }\n', '\n', '    function getChainLinkPrice(address token)\n', '        public\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        // 未设置中转，返回无效价格\n', '        if (ethToUsdPriceOracle == address(0) && bnbToUsdPriceOracle == address(0)) {\n', '            return (0, false);\n', '        }\n', '\n', '        // 同时设置，返回失败\n', '        if (ethToUsdPriceOracle != address(0) && bnbToUsdPriceOracle != address(0)) {\n', '            return (0, false);\n', '        }\n', '\n', '        address referenceOracle = address(0);\n', '        \n', '        if (ethToUsdPriceOracle != address(0) && bnbToUsdPriceOracle == address(0)) {\n', '            referenceOracle = ethToUsdPriceOracle;\n', '        }\n', '\n', '        if (ethToUsdPriceOracle == address(0) && bnbToUsdPriceOracle != address(0)) {\n', '            referenceOracle = bnbToUsdPriceOracle;\n', '        }\n', '\n', '        // 构造 chainlink 合约实例\n', '        AggregatorInterface chainlinkContract = AggregatorInterface(\n', '            referenceOracle\n', '        );\n', '        // 获取 ETH/USD 交易对的价格，单位是 1e8\n', '        int256 basePrice = chainlinkContract.latestAnswer();\n', '        // 若要获取 ETH 的价格，则返回 1e8 * 1e10 = 1e18\n', '        // ETH上的ETH，BSC的BNB，直接调用chainlink，或者设置的直接调用的token，直接调用chainlink\n', '        if (isEthOrBnB(token)) {\n', '            return (uint256(basePrice).mul(1e10), true);\n', '        }\n', '\n', '        if (directTokenMap[token]) {\n', '            // 构造 chainlink 合约实例\n', '            chainlinkContract = AggregatorInterface(tokenChainlinkMap[token]);\n', '            // 获取 XXX/USD 交易对的价格，单位是 1e8\n', '            basePrice = chainlinkContract.latestAnswer();\n', '            return (uint256(basePrice).mul(1e10), true);\n', '        }\n', '\n', '        // // 获取 token/ETH 交易对的价格（目前是 USDT 和 USDC ），单位是 1e18\n', '        chainlinkContract = AggregatorInterface(tokenChainlinkMap[token]);\n', '        int256 tokenPrice = chainlinkContract.latestAnswer();\n', '        return (uint256(basePrice).mul(uint256(tokenPrice)).div(1e8), true);\n', '    }\n', '\n', '    function getLatestRoundData(address token)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        // 未设置中转，返回无效价格\n', '        if (ethToUsdPriceOracle == address(0) && bnbToUsdPriceOracle == address(0)) {\n', '            return (0, 0);\n', '        }\n', '\n', '        // 同时设置，返回失败\n', '        if (ethToUsdPriceOracle != address(0) && bnbToUsdPriceOracle != address(0)) {\n', '            return (0, 0);\n', '        }\n', '\n', '        address referenceOracle = address(0);\n', '        \n', '        if (ethToUsdPriceOracle != address(0) && bnbToUsdPriceOracle == address(0)) {\n', '            referenceOracle = ethToUsdPriceOracle;\n', '        }\n', '\n', '        if (ethToUsdPriceOracle == address(0) && bnbToUsdPriceOracle != address(0)) {\n', '            referenceOracle = bnbToUsdPriceOracle;\n', '        }\n', '\n', '        // 构造 chainlink 合约实例\n', '        AggregatorInterface chainlinkContract = AggregatorInterface(\n', '            referenceOracle\n', '        );\n', '        // 获取 ETH/USD 交易对的价格，单位是 1e8\n', '        int256 basePrice = chainlinkContract.latestAnswer();\n', '\n', '        (,,, uint256 updatedAt,) = chainlinkContract.latestRoundData();\n', '\n', '\n', '        // 若要获取 ETH 的价格，则返回 1e8 * 1e10 = 1e18\n', '        // ETH上的ETH，BSC的BNB，直接调用chainlink，或者设置的直接调用的token，直接调用chainlink\n', '        if (isEthOrBnB(token)) {\n', '            return (uint256(basePrice).mul(1e10), updatedAt);\n', '        }\n', '\n', '        if (directTokenMap[token]) {\n', '            // 构造 chainlink 合约实例\n', '            chainlinkContract = AggregatorInterface(tokenChainlinkMap[token]);\n', '    \n', '            (,,,updatedAt,) = chainlinkContract.latestRoundData();\n', '\n', '            // 获取 XXX/USD 交易对的价格，单位是 1e8\n', '            basePrice = chainlinkContract.latestAnswer();\n', '            return (uint256(basePrice).mul(1e10), updatedAt);\n', '        }\n', '\n', '        // // 获取 token/ETH 交易对的价格（目前是 USDT 和 USDC ），单位是 1e18\n', '        chainlinkContract = AggregatorInterface(tokenChainlinkMap[token]);\n', '        int256 tokenPrice = chainlinkContract.latestAnswer();\n', '\n', '        (,,, uint256 updatedAt1,) = chainlinkContract.latestRoundData();\n', '        \n', '        uint256 latest = updatedAt1 > updatedAt ? updatedAt1 : updatedAt;\n', '\n', '        return (uint256(basePrice).mul(uint256(tokenPrice)).div(1e8), latest);\n', '    }\n', '\n', '    struct ChainlinkPrice {\n', '        uint256 px;\n', '        uint256 updatedAt;\n', '    }\n', '\n', '    function gets(address[] calldata tokens) external view returns (ChainlinkPrice[] memory) {\n', '        uint n = tokens.length;\n', '        ChainlinkPrice[] memory res = new ChainlinkPrice[](n);\n', '        for (uint i = 0; i < n; i++) {\n', '            (res[i].px, res[i].updatedAt) = getLatestRoundData(tokens[i]);\n', '        }\n', '\n', '        return res;\n', '    }\n', '}']