['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.3 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '/**\n', ' * @title ERC-1155 Multi Token Standard, token receiver\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Interface for any contract that wants to support transfers from ERC1155 asset contracts.\n', ' * Note: The ERC-165 identifier for this interface is 0x4e2312e0.\n', ' */\n', 'interface IERC1155TokenReceiver {\n', '\n', '    /**\n', '     * @notice Handle the receipt of a single ERC1155 token type.\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated.\n', '     * This function MUST return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` (i.e. 0xf23a6e61) if it accepts the transfer.\n', '     * This function MUST revert if it rejects the transfer.\n', '     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n', '     * @param operator  The address which initiated the transfer (i.e. msg.sender)\n', '     * @param from      The address which previously owned the token\n', '     * @param id        The ID of the token being transferred\n', '     * @param value     The amount of tokens being transferred\n', '     * @param data      Additional data with no specified format\n', '     * @return bytes4   `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '\n', '    /**\n', '     * @notice Handle the receipt of multiple ERC1155 token types.\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated.\n', '     * This function MUST return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` (i.e. 0xbc197c81) if it accepts the transfer(s).\n', '     * This function MUST revert if it rejects the transfer(s).\n', '     * Return of any other value than the prescribed keccak256 generated value MUST result in the transaction being reverted by the caller.\n', '     * @param operator  The address which initiated the batch transfer (i.e. msg.sender)\n', '     * @param from      The address which previously owned the token\n', '     * @param ids       An array containing ids of each token being transferred (order and length must match _values array)\n', '     * @param values    An array containing amounts of each token being transferred (order and length must match _ids array)\n', '     * @param data      Additional data with no specified format\n', '     * @return          `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '\n', '// File @animoca/ethereum-contracts-assets_inventory/contracts/token/ERC1155/[email\xa0protected]\n', '\n', 'pragma solidity 0.6.8;\n', '\n', '\n', 'abstract contract ERC1155TokenReceiver is IERC1155TokenReceiver, ERC165 {\n', '\n', '    // bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))\n', '    bytes4 internal constant _ERC1155_RECEIVED = 0xf23a6e61;\n', '\n', '    // bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))\n', '    bytes4 internal constant _ERC1155_BATCH_RECEIVED = 0xbc197c81;\n', '\n', '    bytes4 internal constant _ERC1155_REJECTED = 0xffffffff;\n', '\n', '    constructor() internal {\n', '        _registerInterface(type(IERC1155TokenReceiver).interfaceId);\n', '    }\n', '}\n', '\n', '\n', '// File hardhat/[email\xa0protected]\n', 'pragma solidity >= 0.4.22 <0.8.0;\n', '\n', 'library console {\n', '\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '\tfunction _sendLogPayload(bytes memory payload) private view {\n', '\t\tuint256 payloadLength = payload.length;\n', '\t\taddress consoleAddress = CONSOLE_ADDRESS;\n', '\t\tassembly {\n', '\t\t\tlet payloadStart := add(payload, 32)\n', '\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n', '\t\t}\n', '\t}\n', '\n', '\tfunction log() internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log()"));\n', '\t}\n', '\n', '\tfunction logInt(int p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '\t}\n', '\n', '\tfunction logUint(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction logString(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction logBool(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction logAddress(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction logBytes(bytes memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '\t}\n', '\n', '\tfunction logByte(byte p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(byte)", p0));\n', '\t}\n', '\n', '\tfunction logBytes1(bytes1 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '\t}\n', '\n', '\tfunction logBytes2(bytes2 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '\t}\n', '\n', '\tfunction logBytes3(bytes3 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '\t}\n', '\n', '\tfunction logBytes4(bytes4 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '\t}\n', '\n', '\tfunction logBytes5(bytes5 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '\t}\n', '\n', '\tfunction logBytes6(bytes6 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '\t}\n', '\n', '\tfunction logBytes7(bytes7 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '\t}\n', '\n', '\tfunction logBytes8(bytes8 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '\t}\n', '\n', '\tfunction logBytes9(bytes9 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '\t}\n', '\n', '\tfunction logBytes10(bytes10 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '\t}\n', '\n', '\tfunction logBytes11(bytes11 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '\t}\n', '\n', '\tfunction logBytes12(bytes12 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '\t}\n', '\n', '\tfunction logBytes13(bytes13 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '\t}\n', '\n', '\tfunction logBytes14(bytes14 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '\t}\n', '\n', '\tfunction logBytes15(bytes15 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '\t}\n', '\n', '\tfunction logBytes16(bytes16 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '\t}\n', '\n', '\tfunction logBytes17(bytes17 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '\t}\n', '\n', '\tfunction logBytes18(bytes18 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '\t}\n', '\n', '\tfunction logBytes19(bytes19 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '\t}\n', '\n', '\tfunction logBytes20(bytes20 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '\t}\n', '\n', '\tfunction logBytes21(bytes21 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '\t}\n', '\n', '\tfunction logBytes22(bytes22 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '\t}\n', '\n', '\tfunction logBytes23(bytes23 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '\t}\n', '\n', '\tfunction logBytes24(bytes24 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '\t}\n', '\n', '\tfunction logBytes25(bytes25 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '\t}\n', '\n', '\tfunction logBytes26(bytes26 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '\t}\n', '\n', '\tfunction logBytes27(bytes27 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '\t}\n', '\n', '\tfunction logBytes28(bytes28 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '\t}\n', '\n', '\tfunction logBytes29(bytes29 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '\t}\n', '\n', '\tfunction logBytes30(bytes30 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '\t}\n', '\n', '\tfunction logBytes31(bytes31 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '\t}\n', '\n', '\tfunction logBytes32(bytes32 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction log(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction log(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction log(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File contracts/solc-0.6/token/ERC1155/GameeVouchersRedeemer.sol\n', '\n', 'pragma solidity ^0.6.8;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title GameeVouchersRedeemer\n', ' * This contract is used to receive a voucher and provide an amount of GAMEE token.\n', ' * As part of the process, it is also used to burn the voucher up after a successful GAMEE transfer.\n', ' */\n', 'contract GameeVouchersRedeemer is ERC1155TokenReceiver, Ownable, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    event VoucherRedeemedSingle(address _from, uint256 _id, uint256 _value, uint256 _gameeAmount);\n', '    event VoucherRedeemedBatch(address _from, uint256[] _ids, uint256[] _values, uint256 _gameeAmount);\n', '\n', '    IERC1155InventoryBurnable private gameeVouchersContract;\n', '    IERC20Transferrable private gameeContract;\n', '\n', '    /**\n', '     * Constructor\n', '     * @dev Reverts if one of the argument addresses is zero.\n', '     * @param gameeVouchersContract_ IERC1155InventoryBurnable the address of GameeVoucher contract\n', '     * @param gameeContract_ IERC20Transferrable the address of GAMEE contract\n', '     */\n', '    constructor(address gameeVouchersContract_, address gameeContract_) public {\n', '        require(gameeVouchersContract_ != address(0) && gameeContract_ != address(0), "Redeemer: zero address");\n', '        gameeVouchersContract = IERC1155InventoryBurnable(gameeVouchersContract_);\n', '        gameeContract = IERC20Transferrable(gameeContract_);\n', '    }\n', '\n', '    /**\n', '     * @notice ERC1155 single transfer receiver which redeem a voucher.\n', '     * @dev Reverts if the transfer was not operated through `gameeVouchersContract`.\n', '     * @dev Reverts if the `id` is zero.\n', '     * @dev Reverts if the `value` is zero.\n', '     * @dev Emits an ERC1155 TransferSingle event for the redeemed voucher.\n', '     * @dev Emits an ERC20 Transfer event for the GAMME transfer operation.\n', '     * @dev Emits a VoucherRedeemedSingle event.\n', '     * @param /operator the address which initiated the transfer (i.e. msg.sender).\n', '     * @param from the address which previously owned the voucher.\n', '     * @param id the voucher id.\n', '     * @param value the voucher value.\n', '     * @param /data additional data with no specified format.\n', '     * @return bytes4 `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`.\n', '     */\n', '    function onERC1155Received(\n', '        address, /*operator*/\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata /*data*/\n', '    ) external virtual override whenNotPaused returns (bytes4) {\n', '        require(msg.sender == address(gameeVouchersContract), "Redeemer: wrong inventory");\n', '        require(id != 0, "Redeemer: invalid voucher id");\n', '        \n', '        gameeVouchersContract.burnFrom(address(this), id, value);\n', '        uint256 gameeAmount = id.mul(value);\n', '        gameeContract.transfer(from, gameeAmount);\n', '\n', '        emit VoucherRedeemedSingle(from, id, value, gameeAmount);\n', '\n', '        return _ERC1155_RECEIVED;\n', '    }\n', '\n', '    /**\n', '     * @notice ERC1155 batch transfer receiver which redeem a batch of vouchers.\n', '     * @dev Reverts if the transfer was not operated through `gameeVouchersContract`.\n', '     * @dev Reverts if `ids` is an empty array.\n', '     * @dev Reverts if `values` is an empty array.\n', '     * @dev Reverts if `ids` and `values` have different lengths.\n', '     * @dev Emits an ERC1155 TransferBatch event for the redeemed vouchers.\n', '     * @dev Emits an ERC20 Transfer event for the GAMME transfer operation.\n', '     * @dev Emits a VoucherRedeemedBatch event.\n', '     * @param /operator the address which initiated the transfer (i.e. msg.sender).\n', '     * @param from the address which previously owned the voucher.\n', '     * @param ids the vouchers ids.\n', '     * @param values the vouchers values.\n', '     * @param /data additional data with no specified format.\n', '     * @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`.\n', '     */\n', '    function onERC1155BatchReceived(\n', '        address, /*operator*/\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata /*data*/\n', '    ) external virtual override whenNotPaused returns (bytes4) {\n', '        require(msg.sender == address(gameeVouchersContract), "Redeemer: wrong inventory");\n', '        \n', '        uint256 gameeAmount = 0;\n', '        for (uint256 i = 0; i < ids.length; i++) {\n', '            gameeAmount = gameeAmount.add(ids[i].mul(values[i]));\n', '        }\n', '        gameeVouchersContract.batchBurnFrom(address(this), ids, values);\n', '        gameeContract.transfer(from, gameeAmount);\n', '\n', '        emit VoucherRedeemedBatch(from, ids, values, gameeAmount);\n', '\n', '        return _ERC1155_BATCH_RECEIVED;\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraw fungible token GAMEE allocated on this contract.\n', '     * @dev Reverts if called by any account other than the owner.\n', '     * @dev Reverts if amount is zero.\n', '     * @dev Emits an ERC20 Transfer event for the GAMME transfer operation.\n', '     * @param amount the total amount to withdraw.\n', '     */\n', '    function withdraw(uint256 amount) external onlyOwner {\n', '        require(amount != 0, "Redeemer: invalid amount");\n', '        gameeContract.transfer(msg.sender, amount);\n', '    }\n', '}\n', '\n', 'interface IERC20Transferrable {\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface IERC1155InventoryBurnable {\n', '    /**\n', '     * @dev Burns a voucher\n', '     */\n', '    function burnFrom(\n', '        address from,\n', '        uint256 id,\n', '        uint256 value\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Burns multiple vouchers\n', '     */\n', '    function batchBurnFrom(\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values\n', '    ) external;\n', '}']