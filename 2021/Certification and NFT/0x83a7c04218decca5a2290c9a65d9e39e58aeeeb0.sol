['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/proxy/Initializable.sol\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !Address.isContract(address(this));\n', '    }\n', '}\n', '\n', '// File: contracts/governance/Governable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/// @title Governable\n', "/// @dev Governable is contract for governance role. Why don't use an AccessControl? Because the only one member exists\n", 'contract Governable {\n', '\n', '    /// @notice The government address getter\n', '    address public governance;\n', '\n', '    /// @notice Simple contstructor that initialize the governance address\n', '    constructor() public {\n', '        governance = msg.sender;\n', '    }\n', '\n', '    /// @dev Prevents other msg.sender than governance address\n', '    modifier onlyGovernance {\n', '        require(msg.sender == governance, "!governance");\n', '        _;\n', '    }\n', '\n', '    /// @notice Setter for governance address\n', '    /// @param _newGovernance New value\n', '    function setGovernance(address _newGovernance) public onlyGovernance {\n', '        governance = _newGovernance;\n', '    }\n', '\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/governance/LPTokenWrapper.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/// @title LPTokenWrapper\n', '/// @notice Used as utility to simplify governance token operations in Governance contract\n', 'contract LPTokenWrapper {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /// @notice Wrapped governance token\n', '    IERC20 public governanceToken;\n', '\n', '    /// @notice Current balances\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /// @notice Current total supply\n', '    uint256 private _totalSupply;\n', '\n', '    /// @notice Standard totalSupply method\n', '    function totalSupply() public view returns(uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /// @notice Standard balanceOf method\n', '    /// @param _account User address\n', '    function balanceOf(address _account) public view returns(uint256) {\n', '        return _balances[_account];\n', '    }\n', '\n', '    /// @notice Standard deposit (stake) method\n', '    /// @param _amount Amount governance tokens to stake (deposit)\n', '    function stake(uint256 _amount) public virtual {\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(_amount);\n', '        governanceToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    /// @notice Standard withdraw method\n', '    /// @param _amount Amount governance tokens to withdraw\n', '    function withdraw(uint256 _amount) public virtual {\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n', '        governanceToken.transfer(msg.sender, _amount);\n', '    }\n', '\n', '    /// @notice Simple governance setter\n', '    /// @param _newGovernanceToken New value\n', '    function _setGovernanceToken(address _newGovernanceToken) internal {\n', '        governanceToken = IERC20(_newGovernanceToken);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IRewardDistributionRecipient.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'abstract contract IRewardDistributionRecipient is Ownable {\n', '\n', '    address public rewardDistribution;\n', '\n', '    function notifyRewardAmount(uint256 reward) external virtual;\n', '\n', '    modifier onlyRewardDistribution {\n', '        require(msg.sender == rewardDistribution, "!rewardDistribution");\n', '        _;\n', '    }\n', '\n', '    function setRewardDistribution(address _rewardDistribution)\n', '        public\n', '        onlyOwner\n', '    {\n', '        rewardDistribution = _rewardDistribution;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IExecutor.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IExecutor {\n', '    function execute(uint256 _id, uint256 _for, uint256 _against, uint256 _quorum) external;\n', '}\n', '\n', '// File: contracts/governance/Governance.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Governance\n', '/// @notice\n', '/// @dev\n', 'contract Governance is Governable, IRewardDistributionRecipient, LPTokenWrapper, Initializable {\n', '\n', '    /// @notice The Proposal struct used to represent vote process.\n', '    struct Proposal {\n', '        uint256 id; // Unique ID of the proposal (here Counter lib can be used)\n', '        address proposer; // An address who created the proposal\n', "        mapping(address => uint256) forVotes; // Percentage (in base points) of governance token (votes) of 'for' side\n", "        mapping(address => uint256) againstVotes; // Percentage (in base points) of governance token (votes) of 'against' side\n", "        uint256 totalForVotes; // Total amount of governance token (votes) in side 'for'\n", "        uint256 totalAgainstVotes; // Total amount of governance token (votes) in side 'against'\n", '        uint256 start; // Block start\n', '        uint256 end; // Start + period\n', '        address executor; // Custom contract which can execute changes regarding to voting process end\n', '        string hash; // An IPFS hash of the proposal document\n', '        uint256 totalVotesAvailable; // Total amount votes that are not in voting process\n', '        uint256 quorum; // Current quorum (in base points)\n', '        uint256 quorumRequired; // Quorum to end the voting process\n', '        bool open; // Proposal status\n', '    }\n', '\n', '    /// @notice Emits when new proposal is created\n', '    /// @param _id ID of the proposal\n', '    /// @param _creator Address of proposal creator\n', '    /// @param _start Voting process start timestamp\n', '    /// @param _duration Seconds during which the voting process occurs\n', '    /// @param _executor Address of the the executor contract\n', '    event NewProposal(uint256 _id, address _creator, uint256 _start, uint256 _duration, address _executor);\n', '\n', '    /// @notice Emits when someone votes in proposal\n', '    /// @param _id ID of the proposal\n', '    /// @param _voter Voter address\n', "    /// @param _vote 'For' or 'Against' vote type\n", '    /// @param _weight Vote weight in percents (in base points)\n', '    event Vote(uint256 indexed _id, address indexed _voter, bool _vote, uint256 _weight);\n', '\n', '    /// @notice Emits when voting process finished\n', '    /// @param _id ID of the proposal\n', "    /// @param _for 'For' votes percentage in base points\n", "    /// @param _against 'Against' votes percentage in base points\n", '    /// @param _quorumReached Is quorum percents are above or equal to required quorum? (bool)\n', '    event ProposalFinished(uint256 indexed _id, uint256 _for, uint256 _against, bool _quorumReached);\n', '\n', '    /// @notice Emits when voter invoke registration method\n', '    /// @param _voter Voter address\n', '    /// @param _votes Governance tokens number to be placed as votes\n', '    /// @param _totalVotes Total governance token placed as votes for all users\n', '    event RegisterVoter(address _voter, uint256 _votes, uint256 _totalVotes);\n', '\n', '    /// @notice Emits when voter invoke revoke method\n', '    /// @param _voter Voter address\n', '    /// @param _votes Governance tokens number to be removed as votes\n', '    /// @param _totalVotes Total governance token removed as votes for all users\n', '    event RevokeVoter(address _voter, uint256 _votes, uint256 _totalVotes);\n', '\n', '    /// @notice Emits when reward for participation in voting processes is sent to governance contract\n', '    /// @param _reward Amount of staking reward tokens\n', '    event RewardAdded(uint256 _reward);\n', '\n', '    /// @notice Emits when sum of governance token staked to governance contract\n', '    /// @param _user User who stakes\n', '    /// @param _amount Amount of governance token to stake\n', '    event Staked(address indexed _user, uint256 _amount);\n', '\n', '    /// @notice Emits when sum of governance token withdrawn from governance contract\n', '    /// @param _user User who withdraw\n', '    /// @param _amount Amount of governance token to withdraw\n', '    event Withdrawn(address indexed _user, uint256 _amount);\n', '\n', '    /// @notice Emits when reward for participation in voting processes is sent to user.\n', '    /// @param _user Voter who receive rewards\n', '    /// @param _reward Amount of staking reward tokens\n', '    event RewardPaid(address indexed _user, uint256 _reward);\n', '\n', '    /// @notice Period that your sake is locked to keep it for voting\n', '    /// @dev voter => lock period\n', '    mapping(address => uint256) public voteLock;\n', '\n', '    /// @notice Exists to store proposals\n', '    /// @dev id => proposal struct\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    /// @notice Amount of governance tokens staked as votes for each voter\n', '    /// @dev voter => token amount\n', '    mapping(address => uint256) public votes;\n', '\n', '    /// @notice Exists to check if voter registered\n', '    /// @dev user => is voter?\n', '    mapping(address => bool) public voters;\n', '\n', '    /// @notice Exists to keep history of rewards paid\n', '    /// @dev voter => reward paid\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '\n', '    /// @notice Exists to track amounts of reward to be paid\n', '    /// @dev voter => reward to pay\n', '    mapping(address => uint256) public rewards;\n', '\n', '    /// @notice Allow users to claim rewards instantly regardless of any voting process\n', '    /// @dev Link (https://gov.yearn.finance/t/yip-47-release-fee-rewards/6013)\n', '    bool public breaker = false;\n', '\n', '    /// @notice Exists to generate ids for new proposals\n', '    uint256 public proposalCount;\n', '\n', '    /// @notice Voting period in blocks ~ 17280 3 days for 15s/block\n', '    uint256 public period = 17280;\n', '\n', '    /// @notice Vote lock in blocks ~ 17280 3 days for 15s/block\n', '    uint256 public lock = 17280;\n', '\n', '    /// @notice Minimal amount of governance token to allow proposal creation\n', '    uint256 public minimum = 1e18;\n', '\n', '    /// @notice Default quorum required in base points\n', '    uint256 public quorum = 2000;\n', '\n', '    /// @notice Total amount of governance tokens staked\n', '    uint256 public totalVotes;\n', '\n', '    /// @notice Token in which reward for voting will be paid\n', '    IERC20 public rewardsToken;\n', '\n', '    /// @notice Default duration of the voting process in seconds\n', '    uint256 public constant DURATION = 7 days;\n', '\n', '    /// @notice Time period in seconds during which rewards are paid\n', '    uint256 public periodFinish = 0;\n', '\n', '    /// @notice This variable regulates amount of staking reward token to be paid, it depends from period finish. The last claims the lowest reward\n', '    uint256 public rewardRate = 0;\n', '\n', '    /// @notice Amount of staking reward token per governance token staked\n', '    uint256 public rewardPerTokenStored = 0;\n', '\n', '    /// @notice Last time when rewards was added and recalculated\n', '    uint256 public lastUpdateTime;\n', '\n', '    /// @notice Default initialize method for solving migration linearization problem\n', '    /// @dev Called once only by deployer\n', '    /// @param _startId Starting ID (default 0)\n', '    /// @param _rewardsTokenAddress Token in which rewards are paid\n', '    /// @param _governance Governance address\n', '    /// @param _governanceToken Governance token address\n', '    function configure(\n', '            uint256 _startId,\n', '            address _rewardsTokenAddress,\n', '            address _governance,\n', '            address _governanceToken,\n', '            address _rewardDistribution\n', '    ) external initializer {\n', '        proposalCount = _startId;\n', '        rewardsToken = IERC20(_rewardsTokenAddress);\n', '        _setGovernanceToken(_governanceToken);\n', '        setGovernance(_governance);\n', '        setRewardDistribution(_rewardDistribution);\n', '    }\n', '\n', '    /// @dev This methods evacuates given funds to governance address\n', '    /// @param _token Exact token to evacuate\n', '    /// @param _amount Amount of token to evacuate\n', '    function seize(IERC20 _token, uint256 _amount) external onlyGovernance {\n', '        require(_token != rewardsToken, "!rewardsToken");\n', '        require(_token != governanceToken, "!governanceToken");\n', '        _token.safeTransfer(governance, _amount);\n', '    }\n', '\n', '    /// @notice Usual setter\n', '    /// @param _breaker New value\n', '    function setBreaker(bool _breaker) external onlyGovernance {\n', '        breaker = _breaker;\n', '    }\n', '\n', '    /// @notice Usual setter\n', '    /// @param _quorum New value\n', '    function setQuorum(uint256 _quorum) external onlyGovernance {\n', '        quorum = _quorum;\n', '    }\n', '\n', '    /// @notice Usual setter\n', '    /// @param _minimum New value\n', '    function setMinimum(uint256 _minimum) external onlyGovernance {\n', '        minimum = _minimum;\n', '    }\n', '\n', '    /// @notice Usual setter\n', '    /// @param _period New value\n', '    function setPeriod(uint256 _period) external onlyGovernance {\n', '        period = _period;\n', '    }\n', '\n', '    /// @notice Usual setter\n', '    /// @param _lock New value\n', '    function setLock(uint256 _lock) external onlyGovernance {\n', '        lock = _lock;\n', '    }\n', '\n', '    /// @notice Allows msg.sender exit from the whole governance process and withdraw all his rewards and governance tokens\n', '    function exit() external {\n', '        withdraw(balanceOf(_msgSender()));\n', '        getReward();\n', '    }\n', '\n', '    /// @notice Adds to governance contract staking reward tokens to be sent to vote process participants.\n', '    /// @param _reward Amount of staking rewards token in wei\n', '    function notifyRewardAmount(uint256 _reward)\n', '        external\n', '        onlyRewardDistribution\n', '        override\n', '        updateReward(address(0))\n', '    {\n', '        IERC20(rewardsToken).safeTransferFrom(_msgSender(), address(this), _reward);\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = _reward.div(DURATION);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = _reward.add(leftover).div(DURATION);\n', '        }\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(DURATION);\n', '        emit RewardAdded(_reward);\n', '    }\n', '\n', '    /// @notice Creates a proposal to vote\n', '    /// @param _executor Executor contract address\n', '    /// @param _hash IPFS hash of the proposal document\n', '    function propose(address _executor, string memory _hash) public {\n', '        require(votesOf(_msgSender()) > minimum, "<minimum");\n', '        proposals[proposalCount] = Proposal({\n', '            id: proposalCount,\n', '            proposer: _msgSender(),\n', '            totalForVotes: 0,\n', '            totalAgainstVotes: 0,\n', '            start: block.number,\n', '            end: period.add(block.number),\n', '            executor: _executor,\n', '            hash: _hash,\n', '            totalVotesAvailable: totalVotes,\n', '            quorum: 0,\n', '            quorumRequired: quorum,\n', '            open: true\n', '        });\n', '        emit NewProposal(\n', '            proposalCount,\n', '            _msgSender(),\n', '            block.number,\n', '            period,\n', '            _executor\n', '        );\n', '        proposalCount++;\n', '        voteLock[_msgSender()] = lock.add(block.number);\n', '    }\n', '\n', '    /// @notice Called by third party to execute the proposal conditions\n', '    /// @param _id ID of the proposal\n', '    function execute(uint256 _id) public {\n', '        (uint256 _for, uint256 _against, uint256 _quorum) = getStats(_id);\n', '        require(proposals[_id].quorumRequired < _quorum, "!quorum");\n', '        require(proposals[_id].end < block.number , "!end");\n', '        if (proposals[_id].open) {\n', '            tallyVotes(_id);\n', '        }\n', '        IExecutor(proposals[_id].executor).execute(_id, _for, _against, _quorum);\n', '    }\n', '\n', '    /// @notice Called by anyone to obtain the voting process statistics for specific proposal\n', '    /// @param _id ID of the proposal\n', "    /// @return _for 'For' percentage in base points\n", "    /// @return _against 'Against' percentage in base points\n", '    /// @return _quorum Current quorum percentage in base points\n', '    function getStats(uint256 _id)\n', '        public\n', '        view\n', '        returns(\n', '            uint256 _for,\n', '            uint256 _against,\n', '            uint256 _quorum\n', '        )\n', '    {\n', '        _for = proposals[_id].totalForVotes;\n', '        _against = proposals[_id].totalAgainstVotes;\n', '        uint256 _total = _for.add(_against);\n', '        if (_total == 0) {\n', '          _quorum = 0;\n', '        } else {\n', '          _for = _for.mul(10000).div(_total);\n', '          _against = _against.mul(10000).div(_total);\n', '          _quorum = _total.mul(10000).div(proposals[_id].totalVotesAvailable);\n', '        }\n', '    }\n', '\n', '    /// @notice Synonimus name countVotes, called to stop voting process\n', '    /// @param _id ID of the proposal to be closed\n', '    function tallyVotes(uint256 _id) public {\n', '        require(proposals[_id].open, "!open");\n', '        require(proposals[_id].end < block.number, "!end");\n', '        (uint256 _for, uint256 _against,) = getStats(_id);\n', '        proposals[_id].open = false;\n', '        emit ProposalFinished(\n', '            _id,\n', '            _for,\n', '            _against,\n', '            proposals[_id].quorum >= proposals[_id].quorumRequired\n', '        );\n', '    }\n', '\n', '    /// @notice Called to obtain votes count for specific voter\n', '    /// @param _voter To whom votes related\n', '    /// @return Governance token staked to governance contract as votes\n', '    function votesOf(address _voter) public view returns(uint256) {\n', '        return votes[_voter];\n', '    }\n', '\n', '    /// @notice Registers new user as voter and adds his votes\n', '    function register() public {\n', '        require(!voters[_msgSender()], "voter");\n', '        voters[_msgSender()] = true;\n', '        votes[_msgSender()] = balanceOf(_msgSender());\n', '        totalVotes = totalVotes.add(votes[_msgSender()]);\n', '        emit RegisterVoter(_msgSender(), votes[_msgSender()], totalVotes);\n', '    }\n', '\n', '    /// @notice Nullify (revoke) all the votes staked by msg.sender\n', '    function revoke() public {\n', '        require(voters[_msgSender()], "!voter");\n', '        voters[_msgSender()] = false;\n', '\n', '        /// @notice Edge case dealt with in openzeppelin trySub methods.\n', '        /// The case should be impossible, but this is defi.\n', '        (,totalVotes) = totalVotes.trySub(votes[_msgSender()]);\n', '\n', '        emit RevokeVoter(_msgSender(), votes[_msgSender()], totalVotes);\n', '        votes[_msgSender()] = 0;\n', '    }\n', '\n', "    /// @notice Allow registered voter to vote 'for' proposal\n", '    /// @param _id Proposal id\n', '    function voteFor(uint256 _id) public {\n', '        require(proposals[_id].start < block.number, "<start");\n', '        require(proposals[_id].end > block.number, ">end");\n', '\n', '        uint256 _against = proposals[_id].againstVotes[_msgSender()];\n', '        if (_against > 0) {\n', '            proposals[_id].totalAgainstVotes = proposals[_id].totalAgainstVotes.sub(_against);\n', '            proposals[_id].againstVotes[_msgSender()] = 0;\n', '        }\n', '\n', '        uint256 vote = votesOf(_msgSender()).sub(proposals[_id].forVotes[_msgSender()]);\n', '        proposals[_id].totalForVotes = proposals[_id].totalForVotes.add(vote);\n', '        proposals[_id].forVotes[_msgSender()] = votesOf(_msgSender());\n', '\n', '        proposals[_id].totalVotesAvailable = totalVotes;\n', '        uint256 _votes = proposals[_id].totalForVotes.add(proposals[_id].totalAgainstVotes);\n', '        proposals[_id].quorum = _votes.mul(10000).div(totalVotes);\n', '\n', '        voteLock[_msgSender()] = lock.add(block.number);\n', '\n', '        emit Vote(_id, _msgSender(), true, vote);\n', '    }\n', '\n', "    /// @notice Allow registered voter to vote 'against' proposal\n", '    /// @param _id Proposal id\n', '    function voteAgainst(uint256 _id) public {\n', '        require(proposals[_id].start < block.number, "<start");\n', '        require(proposals[_id].end > block.number, ">end");\n', '\n', '        uint256 _for = proposals[_id].forVotes[_msgSender()];\n', '        if (_for > 0) {\n', '            proposals[_id].totalForVotes = proposals[_id].totalForVotes.sub(_for);\n', '            proposals[_id].forVotes[_msgSender()] = 0;\n', '        }\n', '\n', '        uint256 vote = votesOf(_msgSender()).sub(proposals[_id].againstVotes[_msgSender()]);\n', '        proposals[_id].totalAgainstVotes = proposals[_id].totalAgainstVotes.add(vote);\n', '        proposals[_id].againstVotes[_msgSender()] = votesOf(_msgSender());\n', '\n', '        proposals[_id].totalVotesAvailable = totalVotes;\n', '        uint256 _votes = proposals[_id].totalForVotes.add(proposals[_id].totalAgainstVotes);\n', '        proposals[_id].quorum = _votes.mul(10000).div(totalVotes);\n', '\n', '        voteLock[_msgSender()] = lock.add(block.number);\n', '\n', '        emit Vote(_id, _msgSender(), false, vote);\n', '    }\n', '\n', '    /// @dev Modifier to update stats when reward either sent to governance contract or to voter\n', '    modifier updateReward(address _account) {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (_account != address(0)) {\n', '            rewards[_account] = earned(_account);\n', '            userRewardPerTokenPaid[_account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /// @notice Dynamic finish time getter\n', '    /// @return Recalculated time when voting process needs to be finished\n', '    function lastTimeRewardApplicable() public view returns(uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    /// @notice Dynamic reward per token amount getter\n', '    /// @return Recalculated amount of staking reward tokens per governance token\n', '    function rewardPerToken() public view returns(uint256) {\n', '        if (totalSupply() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(lastUpdateTime)\n', '                    .mul(rewardRate)\n', '                    .mul(1e18)\n', '                    .div(totalSupply())\n', '            );\n', '    }\n', '\n', '    /// @notice Calculate the size of reward for voter\n', '    /// @param _account Voter address\n', '    /// @return Amount of exact staking reward tokens to be paid\n', '    function earned(address _account) public view returns(uint256) {\n', '        return\n', '            balanceOf(_account)\n', '                .mul(rewardPerToken().sub(userRewardPerTokenPaid[_account]))\n', '                .div(1e18)\n', '                .add(rewards[_account]);\n', '    }\n', '\n', '    /// @notice Allow to add new governance tokens to voter weight, simultaneosly it recalculates reward size according to new weight\n', '    /// @param _amount Amount of governance token to stake\n', '    function stake(uint256 _amount) public override updateReward(_msgSender()) {\n', '        require(_amount > 0, "!stake 0");\n', '        if (voters[_msgSender()]) {\n', '            votes[_msgSender()] = votes[_msgSender()].add(_amount);\n', '            totalVotes = totalVotes.add(_amount);\n', '        }\n', '        super.stake(_amount);\n', '        emit Staked(_msgSender(), _amount);\n', '    }\n', '\n', '\n', '    /// @notice Allow to remove old governance tokens from voter weight, simultaneosly it recalculates reward size according to new weight\n', '    /// @param _amount Amount of governance token to withdraw\n', '    function withdraw(uint256 _amount) public override updateReward(_msgSender()) {\n', '        require(_amount > 0, "!withdraw 0");\n', '        if (voters[_msgSender()]) {\n', '            votes[_msgSender()] = votes[_msgSender()].sub(_amount);\n', '            totalVotes = totalVotes.sub(_amount);\n', '        }\n', '        if (!breaker) {\n', '            require(voteLock[_msgSender()] < block.number, "!locked");\n', '        }\n', '        super.withdraw(_amount);\n', '        emit Withdrawn(_msgSender(), _amount);\n', '    }\n', '\n', '    /// @notice Transfer staking reward tokens to voter (msg.sender), simultaneosly it recalculates reward size according to new weight and rewards remaining\n', '    function getReward() public updateReward(_msgSender()) {\n', '        if (!breaker) {\n', '            require(voteLock[_msgSender()] > block.number, "!voted");\n', '        }\n', '        uint256 reward = earned(_msgSender());\n', '        if (reward > 0) {\n', '            rewards[_msgSender()] = 0;\n', '            rewardsToken.transfer(_msgSender(), reward);\n', '            emit RewardPaid(_msgSender(), reward);\n', '        }\n', '    }\n', '}']