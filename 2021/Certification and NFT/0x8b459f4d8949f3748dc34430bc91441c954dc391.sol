['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// Sources flattened with hardhat v2.4.1 https://hardhat.org\n', '\n', '// File interfaces/badger/ISett.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ISett {\n', '    function token() external view returns (address);\n', '\n', '    function keeper() external view returns (address);\n', '\n', '    function deposit(uint256) external;\n', '\n', '    function depositFor(address, uint256) external;\n', '\n', '    function depositAll() external;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function withdrawAll() external;\n', '\n', '    function earn() external;\n', '\n', '    function balance() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function claimInsurance() external; // NOTE: Only yDelegatedVault implements this\n', '\n', '    function getPricePerFullShare() external view returns (uint256);\n', '}\n', '\n', '\n', '// File interfaces/badger/IStrategy.sol\n', '\n', '\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IStrategy {\n', '    function want() external view returns (address);\n', '\n', '    function deposit() external;\n', '\n', '    // NOTE: must exclude any tokens used in the yield\n', '    // Controller role - withdraw should return to Controller\n', '    function withdrawOther(address) external returns (uint256 balance);\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdraw(uint256) external;\n', '\n', '    // Controller | Vault role - withdraw should always return to Vault\n', '    function withdrawAll() external returns (uint256);\n', '\n', '    function balanceOf() external view returns (uint256);\n', '    function balanceOfPool() external view returns (uint256);\n', '    function balanceOfWant() external view returns (uint256);\n', '\n', '    function getName() external pure returns (string memory);\n', '\n', '    function setStrategist(address _strategist) external;\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external;\n', '\n', '    function setPerformanceFeeStrategist(uint256 _performanceFeeStrategist) external;\n', '\n', '    function setPerformanceFeeGovernance(uint256 _performanceFeeGovernance) external;\n', '\n', '    function setGovernance(address _governance) external;\n', '\n', '    function setController(address _controller) external;\n', '\n', '    function controller() external returns (address);\n', '\n', '    function governance() external returns (address);\n', '\n', '    function tend() external;\n', '\n', '    function harvest() external;\n', '}\n', '\n', '\n', '// File interfaces/badger/IController.sol\n', '\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '\n', '    function withdrawAll(address) external;\n', '\n', '    function strategies(address) external view returns (address);\n', '\n', '    function approvedStrategies(address, address) external view returns (address);\n', '\n', '    function balanceOf(address) external view returns (uint256);\n', '\n', '    function earn(address, uint256) external;\n', '\n', '    function approveStrategy(address, address) external;\n', '\n', '    function setStrategy(address, address) external;\n', '\n', '    function setVault(address, address) external;\n', '\n', '    function want(address) external view returns (address);\n', '\n', '    function rewards() external view returns (address);\n', '\n', '    function vaults(address) external view returns (address);\n', '}\n', '\n', '\n', '// File interfaces/convex/IBaseRewardsPool.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IBaseRewardsPool {\n', '    //balance\n', '    function balanceOf(address _account) external view returns (uint256);\n', '\n', '    //withdraw to a convex tokenized deposit\n', '    function withdraw(uint256 _amount, bool _claim) external returns (bool);\n', '\n', '    //withdraw directly to curve LP token\n', '    function withdrawAndUnwrap(uint256 _amount, bool _claim) external returns (bool);\n', '\n', '    //claim rewards\n', '    function getReward() external returns (bool);\n', '\n', '    //stake a convex tokenized deposit\n', '    function stake(uint256 _amount) external returns (bool);\n', '\n', '    //stake a convex tokenized deposit for another address(transfering ownership)\n', '    function stakeFor(address _account, uint256 _amount) external returns (bool);\n', '\n', '    function getReward(address _account, bool _claimExtras) external returns (bool);\n', '\n', '    function rewards(address _account) external view returns (uint256);\n', '\n', '    function earned(address _account) external view returns (uint256);\n', '\n', '    function stakingToken() external view returns (address);\n', '}\n', '\n', '\n', '// File contracts/badger-sett/MigrationAssistant.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.11;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', 'contract MigrationAssistant {\n', '    event Debug(uint256 value);\n', '    event DebugAddress(address value);\n', '\n', '    struct MigrationParams {\n', '        address want;\n', '        address beforeStrategy;\n', '        address afterStrategy;\n', '    }\n', '\n', '    function migrate(IController controller, MigrationParams[] memory migrations) public {\n', '        for (uint256 i = 0; i < migrations.length; i++) {\n', '            MigrationParams memory params = migrations[i];\n', '\n', '            ISett sett = ISett(controller.vaults(params.want));\n', '            IStrategy beforeStrategy = IStrategy(params.beforeStrategy);\n', '            IStrategy afterStrategy = IStrategy(params.afterStrategy);\n', '\n', '            // ===== Pre Verification =====\n', '            // Strategies must have same want\n', '            require(beforeStrategy.want() == afterStrategy.want(), "strategy-want-mismatch");\n', '            require(afterStrategy.want() == sett.token(), "strategy-sett-want-mismatch");\n', '            require(params.want == sett.token(), "want-param-mismatch");\n', '            require(beforeStrategy.controller() == afterStrategy.controller(), "strategy-controller-mismatch");\n', '            // require(beforeStrategy.governance() == afterStrategy.governance(), "strategy-governance-mismatch");\n', '\n', '            require(beforeStrategy.controller() == address(controller), "before-strategy-controller-mismatch");\n', '            require(afterStrategy.controller() == address(controller), "after-strategy-controller-mismatch");\n', '\n', '            uint256 beforeBalance = sett.balance();\n', '            uint256 beforePpfs = sett.getPricePerFullShare();\n', '\n', '            // ===== Run Migration =====\n', '            controller.setStrategy(params.want, params.afterStrategy);\n', '\n', '            uint256 afterBalance = sett.balance();\n', '            uint256 afterPpfs = sett.getPricePerFullShare();\n', '\n', '            // ===== Post Verification =====\n', '            // Strategy must report same total balance\n', '            require(afterBalance == beforeBalance, "sett-balance-mismatch");\n', '\n', '            // PPFS must not change\n', '            require(beforePpfs == afterPpfs, "ppfs-mismatch");\n', '        }\n', '    }\n', '}']