['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.6;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', ' /* @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Router02 {\n', '    function WETH() external pure returns (address);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'contract PolkazeckStake is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 constant DECIMALS = 10 ** 18;\n', '    uint256 constant DIVISOR = 10 ** 10;\n', '    uint256 constant STAKE_DURATION = 31540000;\n', '    \n', '    uint256 public allocation = 40000000 * DECIMALS;\n', '    uint256 public maxStake = 500000 * DECIMALS;\n', '    uint256 public minStake = 10000 * DECIMALS;\n', '    uint256 public roiPerSeconds = 17361; // 0.15 / 1 day * DIVISOR;\n', '    uint256 public totalStaked;\n', '    uint256 public totalStakers;\n', '    uint private unlocked = 1;\n', '\n', '    IERC20 public stakeToken;\n', '    IERC20[] public rewardToken;\n', '    IUniswapV2Router02 public router;\n', '\n', '    struct Stake {\n', '        uint256 createdAt;\n', '        uint256 amount;\n', '        IERC20 rewardMode;\n', '        uint256 lastWithdrawal;\n', '    }\n', '    \n', '    mapping(address => Stake) stakes;\n', '    \n', '    \n', '    modifier lock() {\n', '        require(unlocked == 1, "PolkazeckStake: LOCKED");\n', '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    constructor() {\n', '        stakeToken = IERC20(0xeDB7b7842F7986a7f211d791e8F306C4Ce82Ba32);\n', '        router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    }\n', '    \n', '    receive() payable external {\n', '        revert();\n', '    }\n', '    \n', '    function created(address _staker) external view returns(uint256) {\n', '        return stakes[_staker].createdAt;\n', '    }\n', '    \n', '    function staked(address _staker) external view returns(uint256) {\n', '        return stakes[_staker].amount;\n', '    }\n', '    \n', '    function rewardMode(address _staker) external view returns(IERC20) {\n', '        return stakes[_staker].rewardMode;\n', '    }\n', '    \n', '    function lastWithdrawal(address _staker) external view returns(uint256) {\n', '        return stakes[_staker].lastWithdrawal;\n', '    }\n', '    \n', '    function newStake(uint256 _amount, IERC20 selectedRewardToken) public lock {\n', '        require(stakes[_msgSender()].amount == 0, "newStake: Staking");\n', '        require(totalStaked.add(_amount) <= allocation, "newStake: Filled!");\n', '        require(_amount <= maxStake, "newStake: Above maximum");\n', '        require(_amount >= minStake, "newStake: Below minimum");\n', '        require(isRewardToken(selectedRewardToken), "newStake: Reward not available");\n', '        \n', '        uint256 initialBalance = stakeToken.balanceOf(address(this));\n', '        \n', '        require(stakeToken.transferFrom(_msgSender(), address(this), _amount), "newStake: Transfer failed");\n', '        \n', '        uint256 latestBalance = stakeToken.balanceOf(address(this));\n', '        uint256 amount = latestBalance.sub(initialBalance);\n', '        \n', '        stakes[_msgSender()] = Stake({createdAt: block.timestamp, amount: amount, rewardMode: selectedRewardToken, lastWithdrawal: block.timestamp});\n', '        \n', '        totalStakers = totalStakers.add(1);\n', '        totalStaked = totalStaked.add(amount);\n', '        \n', '        emit NewStake(_msgSender(), address(selectedRewardToken), amount);\n', '    }\n', '    \n', '    function _withdraw() internal {\n', '        Stake storage stake = stakes[_msgSender()];\n', '        if (stake.amount > 0 && stake.createdAt.add(STAKE_DURATION) > stake.lastWithdrawal) {\n', '            uint256 thisReward = _roi(stake);\n', '            // thisReward to rewardMode\n', '            uint256[] memory toReward = toRewardMode(thisReward, address(stake.rewardMode));\n', '            uint256 currentReward = toReward[toReward.length - 1];\n', '            require(stake.rewardMode.transfer(_msgSender(), currentReward), "Withdraw: Transfer failed");\n', '            stake.lastWithdrawal = block.timestamp;\n', '\n', '            emit Withdraw(_msgSender(), address(stake.rewardMode), currentReward);   \n', '        }\n', '    }\n', '    \n', '    function _exit() internal {\n', '        Stake storage stake = stakes[_msgSender()];\n', '        require(stake.amount > 0, "_exit: !Staking");\n', '        require(stakeToken.transfer(_msgSender(), stake.amount), "_exit: Transfer failed");\n', '        totalStaked = totalStaked.sub(stake.amount);\n', '        totalStakers = totalStakers.sub(1);\n', '        stake.amount = 0;\n', '        emit Exit(_msgSender());\n', '    }\n', '    \n', '    function withdraw() public lock {\n', '        _withdraw();\n', '    }\n', '    \n', '    function exit() public lock {\n', '        _withdraw();\n', '        _exit();\n', '    }\n', '    \n', '    function emergencyExit() public lock {\n', '        /*\n', '        * Exit without rewards\n', '        */\n', '        _exit();\n', '    }\n', '    \n', '    function roi(address _staker) public view returns(uint256) {\n', '        Stake memory stake = stakes[_staker];\n', '        return _roi(stake);\n', '    }\n', '    \n', '    function _roi(Stake memory _stake) internal view returns(uint256) {\n', '        uint256 periodBoundary = Math.min(block.timestamp, _stake.createdAt.add(STAKE_DURATION));\n', '        uint256 thisRewardPeriod = periodBoundary.sub(_stake.lastWithdrawal);\n', '        return _stake.amount.mul(thisRewardPeriod).mul(roiPerSeconds).div(DIVISOR);\n', '    }\n', '    \n', '    function toRewardMode(uint256 _amount, address _token) public view returns(uint256[] memory amounts) {\n', '        address weth = router.WETH();\n', '        address[] memory path1 = new address [](2);\n', '        address[] memory path2 = new address [](3);\n', '        \n', '        if (_token == weth) {\n', '            path1[0] = address(stakeToken);\n', '            path1[1] = weth;\n', '            amounts = toRewardToken(_amount, path1);\n', '        } else {\n', '            path2[0] = address(stakeToken);\n', '            path2[1] = weth;\n', '            path2[2] = _token;\n', '            amounts = toRewardToken(_amount, path2);\n', '        }\n', '    }\n', '    \n', '    function toRewardToken(uint256 _amount, address[] memory path) public view returns(uint256[] memory amounts) {\n', '        amounts = router.getAmountsOut(_amount, path);\n', '    }\n', '    \n', '    function estimateReward(uint256 _amount) public view returns(uint256) {\n', '        return _amount.mul(STAKE_DURATION).mul(roiPerSeconds).div(DIVISOR);\n', '    }\n', '    \n', '    function isRewardToken(IERC20 _token) public view returns(bool valid) {\n', '        valid = false;\n', '        for (uint i = 0; i < rewardToken.length; i++) {\n', '            if (rewardToken[i] == _token) {\n', '                valid = true;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    \n', '    function getAsset(IERC20 _tokenAddress, uint256 _amount) public onlyOwner {\n', '        require(_tokenAddress != stakeToken, "getAsset: Not allowed!");\n', '        require(_tokenAddress.balanceOf(address(this)) >= _amount, "getAsset: Not enough balance");\n', '        _tokenAddress.transfer(owner(), _amount);\n', '        \n', '        emit Withdraw(_msgSender(), address(_tokenAddress), _amount);   \n', '        \n', '    }\n', '    \n', '    function setMaxStake(uint256 _max) external onlyOwner {\n', '        maxStake = _max;\n', '    }\n', '    \n', '    function setMinStake(uint256 _min) external onlyOwner {\n', '        minStake = _min;\n', '    }\n', '    \n', '    function setRoiPerSeconds(uint256 _roiPerSeconds) external onlyOwner {\n', '        roiPerSeconds = _roiPerSeconds;\n', '    }\n', '\n', '    function setAllocation(uint256 _allocation) external onlyOwner {\n', '        allocation = _allocation;\n', '    }\n', '\n', '    function addRewardToken(IERC20 _token) external onlyOwner {\n', '        rewardToken.push(_token);\n', '    } \n', '    \n', '    event NewStake(address indexed staker, address indexed selectedRewardToken, uint256 amount);\n', '    event Withdraw(address indexed staker, address indexed rewardToken, uint256 reward);\n', '    event Exit(address indexed staker);\n', '}']