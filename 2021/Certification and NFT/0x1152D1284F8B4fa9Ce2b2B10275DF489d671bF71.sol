['pragma solidity ^0.7.6;\n', '\n', '/**\n', '  * @title Careful Math\n', '  * @author DeFiPie\n', "  * @notice Derived from OpenZeppelin's SafeMath library\n", '  *         https://github.com/OpenZeppelin/openzeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n', '  */\n', 'contract CarefulMath {\n', '\n', '    /**\n', '     * @dev Possible error codes that we can return\n', '     */\n', '    enum MathError {\n', '        NO_ERROR,\n', '        DIVISION_BY_ZERO,\n', '        INTEGER_OVERFLOW,\n', '        INTEGER_UNDERFLOW\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, returns an error on overflow.\n', '    */\n', '    function mulUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (a == 0) {\n', '            return (MathError.NO_ERROR, 0);\n', '        }\n', '\n', '        uint c = a * b;\n', '\n', '        if (c / a != b) {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        } else {\n', '            return (MathError.NO_ERROR, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers, truncating the quotient.\n', '    */\n', '    function divUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b == 0) {\n', '            return (MathError.DIVISION_BY_ZERO, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, a / b);\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, returns an error on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function subUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        if (b <= a) {\n', '            return (MathError.NO_ERROR, a - b);\n', '        } else {\n', '            return (MathError.INTEGER_UNDERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, returns an error on overflow.\n', '    */\n', '    function addUInt(uint a, uint b) internal pure returns (MathError, uint) {\n', '        uint c = a + b;\n', '\n', '        if (c >= a) {\n', '            return (MathError.NO_ERROR, c);\n', '        } else {\n', '            return (MathError.INTEGER_OVERFLOW, 0);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev add a and b and then subtract c\n', '    */\n', '    function addThenSubUInt(uint a, uint b, uint c) internal pure returns (MathError, uint) {\n', '        (MathError err0, uint sum) = addUInt(a, b);\n', '\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, 0);\n', '        }\n', '\n', '        return subUInt(sum, c);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./ErrorReporter.sol";\n', 'import "./Exponential.sol";\n', 'import "./PriceOracle.sol";\n', 'import "./ControllerInterface.sol";\n', 'import "./ControllerStorage.sol";\n', 'import "./PTokenInterfaces.sol";\n', 'import "./EIP20Interface.sol";\n', 'import "./Unitroller.sol";\n', '\n', '/**\n', " * @title DeFiPie's Controller Contract\n", ' * @author DeFiPie\n', ' */\n', 'contract Controller is ControllerStorage, ControllerInterface, ControllerErrorReporter, Exponential {\n', '    /// @notice Emitted when an admin supports a market\n', '    event MarketListed(address pToken);\n', '\n', '    /// @notice Emitted when an account enters a market\n', '    event MarketEntered(address pToken, address account);\n', '\n', '    /// @notice Emitted when an account exits a market\n', '    event MarketExited(address pToken, address account);\n', '\n', '    /// @notice Emitted when close factor is changed by admin\n', '    event NewCloseFactor(uint oldCloseFactorMantissa, uint newCloseFactorMantissa);\n', '\n', '    /// @notice Emitted when a collateral factor is changed by admin\n', '    event NewCollateralFactor(address pToken, uint oldCollateralFactorMantissa, uint newCollateralFactorMantissa);\n', '\n', '    /// @notice Emitted when liquidation incentive is changed by admin\n', '    event NewLiquidationIncentive(uint oldLiquidationIncentiveMantissa, uint newLiquidationIncentiveMantissa);\n', '\n', '    /// @notice Emitted when maxAssets is changed by admin\n', '    event NewMaxAssets(uint oldMaxAssets, uint newMaxAssets);\n', '\n', '    /// @notice Emitted when price oracle is changed\n', '    event NewPriceOracle(PriceOracle oldPriceOracle, PriceOracle newPriceOracle);\n', '\n', '    /// @notice Emitted when pause guardian is changed\n', '    event NewPauseGuardian(address oldPauseGuardian, address newPauseGuardian);\n', '\n', '    /// @notice Emitted when an action is paused globally\n', '    event ActionPaused(string action, bool pauseState);\n', '\n', '    /// @notice Emitted when an action is paused on a market\n', '    event ActionPaused(address pToken, string action, bool pauseState);\n', '\n', '    /// @notice Emitted when a new PIE speed is calculated for a market\n', '    event PieSpeedUpdated(address indexed pToken, uint newSpeed);\n', '\n', '    /// @notice Emitted when PIE is distributed to a supplier\n', '    event DistributedSupplierPie(address indexed pToken, address indexed supplier, uint pieDelta, uint pieSupplyIndex);\n', '\n', '    /// @notice Emitted when PIE is distributed to a borrower\n', '    event DistributedBorrowerPie(address indexed pToken, address indexed borrower, uint pieDelta, uint pieBorrowIndex);\n', '\n', '    /// @notice The threshold above which the flywheel transfers PIE, in wei\n', '    uint public constant pieClaimThreshold = 0.001e18;\n', '\n', '    /// @notice The initial PIE index for a market\n', '    uint224 public constant pieInitialIndex = 1e36;\n', '\n', '    // closeFactorMantissa must be strictly greater than this value\n', '    uint internal constant closeFactorMinMantissa = 0.05e18; // 0.05\n', '\n', '    // closeFactorMantissa must not exceed this value\n', '    uint internal constant closeFactorMaxMantissa = 0.9e18; // 0.9\n', '\n', '    // No collateralFactorMantissa may exceed this value\n', '    uint internal constant collateralFactorMaxMantissa = 0.9e18; // 0.9\n', '\n', '    // liquidationIncentiveMantissa must be no less than this value\n', '    uint internal constant liquidationIncentiveMinMantissa = 1.0e18; // 1.0\n', '\n', '    // liquidationIncentiveMantissa must be no greater than this value\n', '    uint internal constant liquidationIncentiveMaxMantissa = 1.5e18; // 1.5\n', '\n', '    constructor() {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /*** Assets You Are In ***/\n', '\n', '    /**\n', '     * @notice Returns the assets an account has entered\n', '     * @param account The address of the account to pull assets for\n', '     * @return A dynamic list with the assets the account has entered\n', '     */\n', '    function getAssetsIn(address account) external view returns (address[] memory) {\n', '        address[] memory assetsIn = accountAssets[account];\n', '\n', '        return assetsIn;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns whether the given account is entered in the given asset\n', '     * @param account The address of the account to check\n', '     * @param pToken The pToken to check\n', '     * @return True if the account is in the asset, otherwise false.\n', '     */\n', '    function checkMembership(address account, address pToken) external view returns (bool) {\n', '        return markets[pToken].accountMembership[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Add assets to be included in account liquidity calculation\n', '     * @param pTokens The list of addresses of the pToken markets to be enabled\n', '     * @return Success indicator for whether each corresponding market was entered\n', '     */\n', '    function enterMarkets(address[] memory pTokens) public override returns (uint[] memory) {\n', '        uint len = pTokens.length;\n', '\n', '        uint[] memory results = new uint[](len);\n', '        for (uint i = 0; i < len; i++) {\n', '            address pToken = pTokens[i];\n', '\n', '            results[i] = uint(addToMarketInternal(pToken, msg.sender));\n', '        }\n', '\n', '        return results;\n', '    }\n', '\n', '    /**\n', '     * @notice Add the market to the borrower\'s "assets in" for liquidity calculations\n', '     * @param pToken The market to enter\n', '     * @param borrower The address of the account to modify\n', '     * @return Success indicator for whether the market was entered\n', '     */\n', '    function addToMarketInternal(address pToken, address borrower) internal returns (Error) {\n', '        Market storage marketToJoin = markets[pToken];\n', '\n', '        if (!marketToJoin.isListed) {\n', '            // market is not listed, cannot join\n', '            return Error.MARKET_NOT_LISTED;\n', '        }\n', '\n', '        if (marketToJoin.accountMembership[borrower] == true) {\n', '            // already joined\n', '            return Error.NO_ERROR;\n', '        }\n', '\n', '        if (accountAssets[borrower].length >= maxAssets)  {\n', '            // no space, cannot join\n', '            return Error.TOO_MANY_ASSETS;\n', '        }\n', '\n', '        // survived the gauntlet, add to list\n', '        // NOTE: we store these somewhat redundantly as a significant optimization\n', '        //  this avoids having to iterate through the list for the most common use cases\n', '        //  that is, only when we need to perform liquidity checks\n', '        //  and not whenever we want to check if an account is in a particular market\n', '        marketToJoin.accountMembership[borrower] = true;\n', '        accountAssets[borrower].push(pToken);\n', '\n', '        emit MarketEntered(pToken, borrower);\n', '\n', '        return Error.NO_ERROR;\n', '    }\n', '\n', '    /**\n', "     * @notice Removes asset from sender's account liquidity calculation\n", '     * @dev Sender must not have an outstanding borrow balance in the asset,\n', '     *  or be providing neccessary collateral for an outstanding borrow.\n', '     * @param pTokenAddress The address of the asset to be removed\n', '     * @return Whether or not the account successfully exited the market\n', '     */\n', '    function exitMarket(address pTokenAddress) external override returns (uint) {\n', '        address pToken = pTokenAddress;\n', '        /* Get sender tokensHeld and amountOwed underlying from the pToken */\n', '        (uint oErr, uint tokensHeld, uint amountOwed, ) = PTokenInterface(pToken).getAccountSnapshot(msg.sender);\n', '        require(oErr == 0, "exitMarket: getAccountSnapshot failed"); // semi-opaque error code\n', '\n', '        /* Fail if the sender has a borrow balance */\n', '        if (amountOwed != 0) {\n', '            return fail(Error.NONZERO_BORROW_BALANCE, FailureInfo.EXIT_MARKET_BALANCE_OWED);\n', '        }\n', '\n', '        /* Fail if the sender is not permitted to redeem all of their tokens */\n', '        uint allowed = redeemAllowedInternal(pTokenAddress, msg.sender, tokensHeld);\n', '        if (allowed != 0) {\n', '            return failOpaque(Error.REJECTION, FailureInfo.EXIT_MARKET_REJECTION, allowed);\n', '        }\n', '\n', '        Market storage marketToExit = markets[pToken];\n', '\n', '        /* Return true if the sender is not already ‘in’ the market */\n', '        if (!marketToExit.accountMembership[msg.sender]) {\n', '            return uint(Error.NO_ERROR);\n', '        }\n', '\n', '        /* Set pToken account membership to false */\n', '        delete marketToExit.accountMembership[msg.sender];\n', '\n', '        /* Delete pToken from the account’s list of assets */\n', '        // load into memory for faster iteration\n', '        address[] memory userAssetList = accountAssets[msg.sender];\n', '        uint len = userAssetList.length;\n', '        uint assetIndex = len;\n', '        for (uint i = 0; i < len; i++) {\n', '            if (userAssetList[i] == pToken) {\n', '                assetIndex = i;\n', '                break;\n', '            }\n', '        }\n', '\n', '        // We *must* have found the asset in the list or our redundant data structure is broken\n', '        assert(assetIndex < len);\n', '\n', '        // copy last item in list to location of item to be removed, reduce length by 1\n', '        address[] storage storedList = accountAssets[msg.sender];\n', '        storedList[assetIndex] = storedList[storedList.length - 1];\n', '        storedList.pop(); //storedList.length--;\n', '\n', '        emit MarketExited(pToken, msg.sender);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /*** Policy Hooks ***/\n', '\n', '    /**\n', '     * @notice Checks if the account should be allowed to mint tokens in the given market\n', '     * @param pToken The market to verify the mint against\n', '     * @param minter The account which would get the minted tokens\n', '     * @param mintAmount The amount of underlying being supplied to the market in exchange for tokens\n', '     * @return 0 if the mint is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n', '     */\n', '    function mintAllowed(address pToken, address minter, uint mintAmount) external override returns (uint) {\n', '        // Pausing is a very serious situation - we revert to sound the alarms\n', '        require(!mintGuardianPaused[pToken], "mint is paused");\n', '\n', '        // Shh - currently unused\n', '        minter;\n', '        mintAmount;\n', '\n', '        if (!markets[pToken].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        updatePieSupplyIndex(pToken);\n', '        distributeSupplierPie(pToken, minter, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the account should be allowed to redeem tokens in the given market\n', '     * @param pToken The market to verify the redeem against\n', '     * @param redeemer The account which would redeem the tokens\n', '     * @param redeemTokens The number of pTokens to exchange for the underlying asset in the market\n', '     * @return 0 if the redeem is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n', '     */\n', '    function redeemAllowed(address pToken, address redeemer, uint redeemTokens) external override returns (uint) {\n', '        uint allowed = redeemAllowedInternal(pToken, redeemer, redeemTokens);\n', '        if (allowed != uint(Error.NO_ERROR)) {\n', '            return allowed;\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        updatePieSupplyIndex(pToken);\n', '        distributeSupplierPie(pToken, redeemer, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    function redeemAllowedInternal(address pToken, address redeemer, uint redeemTokens) internal view returns (uint) {\n', '        if (!markets[pToken].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', "        /* If the redeemer is not 'in' the market, then we can bypass the liquidity check */\n", '        if (!markets[pToken].accountMembership[redeemer]) {\n', '            return uint(Error.NO_ERROR);\n', '        }\n', '\n', '        /* Otherwise, perform a hypothetical liquidity check to guard against shortfall */\n', '        (Error err, , uint shortfall) = getHypotheticalAccountLiquidityInternal(redeemer, pToken, redeemTokens, 0);\n', '        if (err != Error.NO_ERROR) {\n', '            return uint(err);\n', '        }\n', '        if (shortfall > 0) {\n', '            return uint(Error.INSUFFICIENT_LIQUIDITY);\n', '        }\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Validates redeem and reverts on rejection. May emit logs.\n', '     * @param pToken Asset being redeemed\n', '     * @param redeemer The address redeeming the tokens\n', '     * @param redeemAmount The amount of the underlying asset being redeemed\n', '     * @param redeemTokens The number of tokens being redeemed\n', '     */\n', '    function redeemVerify(address pToken, address redeemer, uint redeemAmount, uint redeemTokens) external override {\n', '        // Shh - currently unused\n', '        pToken;\n', '        redeemer;\n', '\n', '        // Require tokens is zero or amount is also zero\n', '        if (redeemTokens == 0 && redeemAmount > 0) {\n', '            revert("redeemTokens zero");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the account should be allowed to borrow the underlying asset of the given market\n', '     * @param pToken The market to verify the borrow against\n', '     * @param borrower The account which would borrow the asset\n', '     * @param borrowAmount The amount of underlying the account would borrow\n', '     * @return 0 if the borrow is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n', '     */\n', '    function borrowAllowed(address pToken, address borrower, uint borrowAmount) external override returns (uint) {\n', '        // Pausing is a very serious situation - we revert to sound the alarms\n', '        require(!borrowGuardianPaused[pToken], "borrow is paused");\n', '\n', '        if (!markets[pToken].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', '        Error err;\n', '\n', '        if (!markets[pToken].accountMembership[borrower]) {\n', '            // only pTokens may call borrowAllowed if borrower not in market\n', '            require(msg.sender == pToken, "sender must be pToken");\n', '\n', '            // attempt to add borrower to the market\n', '            err = addToMarketInternal(msg.sender, borrower);\n', '            if (err != Error.NO_ERROR) {\n', '                return uint(err);\n', '            }\n', '\n', '            // it should be impossible to break the important invariant\n', '            assert(markets[pToken].accountMembership[borrower]);\n', '        }\n', '\n', '        if (oracle.getUnderlyingPrice(pToken) == 0) {\n', '            return uint(Error.PRICE_ERROR);\n', '        }\n', '\n', '        uint shortfall;\n', '\n', '        (err, , shortfall) = getHypotheticalAccountLiquidityInternal(borrower, pToken, 0, borrowAmount);\n', '        if (err != Error.NO_ERROR) {\n', '            return uint(err);\n', '        }\n', '        if (shortfall > 0) {\n', '            return uint(Error.INSUFFICIENT_LIQUIDITY);\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        Exp memory borrowIndex = Exp({mantissa: PTokenInterface(pToken).borrowIndex()});\n', '        updatePieBorrowIndex(pToken, borrowIndex);\n', '        distributeBorrowerPie(pToken, borrower, borrowIndex, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the account should be allowed to repay a borrow in the given market\n', '     * @param pToken The market to verify the repay against\n', '     * @param payer The account which would repay the asset\n', '     * @param borrower The account which would borrowed the asset\n', '     * @param repayAmount The amount of the underlying asset the account would repay\n', '     * @return 0 if the repay is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n', '     */\n', '    function repayBorrowAllowed(\n', '        address pToken,\n', '        address payer,\n', '        address borrower,\n', '        uint repayAmount\n', '    ) external override returns (uint) {\n', '        // Shh - currently unused\n', '        payer;\n', '        borrower;\n', '        repayAmount;\n', '\n', '        if (!markets[pToken].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        Exp memory borrowIndex = Exp({mantissa: PTokenInterface(pToken).borrowIndex()});\n', '        updatePieBorrowIndex(pToken, borrowIndex);\n', '        distributeBorrowerPie(pToken, borrower, borrowIndex, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the liquidation should be allowed to occur\n', '     * @param pTokenBorrowed Asset which was borrowed by the borrower\n', '     * @param pTokenCollateral Asset which was used as collateral and will be seized\n', '     * @param liquidator The address repaying the borrow and seizing the collateral\n', '     * @param borrower The address of the borrower\n', '     * @param repayAmount The amount of underlying being repaid\n', '     */\n', '    function liquidateBorrowAllowed(\n', '        address pTokenBorrowed,\n', '        address pTokenCollateral,\n', '        address liquidator,\n', '        address borrower,\n', '        uint repayAmount\n', '    ) external override returns (uint) {\n', '        // Shh - currently unused\n', '        liquidator;\n', '\n', '        if (!markets[pTokenBorrowed].isListed || !markets[pTokenCollateral].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', '        /* The borrower must have shortfall in order to be liquidatable */\n', '        (Error err, , uint shortfall) = getAccountLiquidityInternal(borrower);\n', '        if (err != Error.NO_ERROR) {\n', '            return uint(err);\n', '        }\n', '        if (shortfall == 0) {\n', '            return uint(Error.INSUFFICIENT_SHORTFALL);\n', '        }\n', '\n', '        /* The liquidator may not repay more than what is allowed by the closeFactor */\n', '        uint borrowBalance = PTokenInterface(pTokenBorrowed).borrowBalanceStored(borrower);\n', '        (MathError mathErr, uint maxClose) = mulScalarTruncate(Exp({mantissa: closeFactorMantissa}), borrowBalance);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return uint(Error.MATH_ERROR);\n', '        }\n', '        if (repayAmount > maxClose) {\n', '            return uint(Error.TOO_MUCH_REPAY);\n', '        }\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the seizing of assets should be allowed to occur\n', '     * @param pTokenCollateral Asset which was used as collateral and will be seized\n', '     * @param pTokenBorrowed Asset which was borrowed by the borrower\n', '     * @param liquidator The address repaying the borrow and seizing the collateral\n', '     * @param borrower The address of the borrower\n', '     * @param seizeTokens The number of collateral tokens to seize\n', '     */\n', '    function seizeAllowed(\n', '        address pTokenCollateral,\n', '        address pTokenBorrowed,\n', '        address liquidator,\n', '        address borrower,\n', '        uint seizeTokens\n', '    ) external override returns (uint) {\n', '        // Pausing is a very serious situation - we revert to sound the alarms\n', '        require(!seizeGuardianPaused, "seize is paused");\n', '\n', '        // Shh - currently unused\n', '        seizeTokens;\n', '\n', '        if (!markets[pTokenCollateral].isListed || !markets[pTokenBorrowed].isListed) {\n', '            return uint(Error.MARKET_NOT_LISTED);\n', '        }\n', '\n', '        if (PTokenInterface(pTokenCollateral).controller() != PTokenInterface(pTokenBorrowed).controller()) {\n', '            return uint(Error.CONTROLLER_MISMATCH);\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        updatePieSupplyIndex(pTokenCollateral);\n', '        distributeSupplierPie(pTokenCollateral, borrower, false);\n', '        distributeSupplierPie(pTokenCollateral, liquidator, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @notice Checks if the account should be allowed to transfer tokens in the given market\n', '     * @param pToken The market to verify the transfer against\n', '     * @param src The account which sources the tokens\n', '     * @param dst The account which receives the tokens\n', '     * @param transferTokens The number of pTokens to transfer\n', '     * @return 0 if the transfer is allowed, otherwise a semi-opaque error code (See ErrorReporter.sol)\n', '     */\n', '    function transferAllowed(\n', '        address pToken,\n', '        address src,\n', '        address dst,\n', '        uint transferTokens\n', '    ) external override returns (uint) {\n', '        // Pausing is a very serious situation - we revert to sound the alarms\n', '        require(!transferGuardianPaused, "transfer is paused");\n', '\n', '        // Currently the only consideration is whether or not\n', '        //  the src is allowed to redeem this many tokens\n', '        uint allowed = redeemAllowedInternal(pToken, src, transferTokens);\n', '        if (allowed != uint(Error.NO_ERROR)) {\n', '            return allowed;\n', '        }\n', '\n', '        // Keep the flywheel moving\n', '        updatePieSupplyIndex(pToken);\n', '        distributeSupplierPie(pToken, src, false);\n', '        distributeSupplierPie(pToken, dst, false);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /*** Liquidity/Liquidation Calculations ***/\n', '\n', '    /**\n', '     * @dev Local vars for avoiding stack-depth limits in calculating account liquidity.\n', '     *  Note that `pTokenBalance` is the number of pTokens the account owns in the market,\n', '     *  whereas `borrowBalance` is the amount of underlying that the account has borrowed.\n', '     */\n', '    struct AccountLiquidityLocalVars {\n', '        uint sumCollateral;\n', '        uint sumBorrowPlusEffects;\n', '        uint pTokenBalance;\n', '        uint borrowBalance;\n', '        uint exchangeRateMantissa;\n', '        uint oraclePriceMantissa;\n', '        Exp collateralFactor;\n', '        Exp exchangeRate;\n', '        Exp oraclePrice;\n', '        Exp tokensToDenom;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the current account liquidity wrt collateral requirements\n', '     * @return (possible error code (semi-opaque),\n', '                account liquidity in excess of collateral requirements,\n', '     *          account shortfall below collateral requirements)\n', '     */\n', '    function getAccountLiquidity(address account) public view returns (uint, uint, uint) {\n', '        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, address(0), 0, 0);\n', '\n', '        return (uint(err), liquidity, shortfall);\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the current account liquidity wrt collateral requirements\n', '     * @return (possible error code,\n', '                account liquidity in excess of collateral requirements,\n', '     *          account shortfall below collateral requirements)\n', '     */\n', '    function getAccountLiquidityInternal(address account) internal view returns (Error, uint, uint) {\n', '        return getHypotheticalAccountLiquidityInternal(account, address(0), 0, 0);\n', '    }\n', '\n', '    /**\n', '     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n', '     * @param pTokenModify The market to hypothetically redeem/borrow in\n', '     * @param account The account to determine liquidity for\n', '     * @param redeemTokens The number of tokens to hypothetically redeem\n', '     * @param borrowAmount The amount of underlying to hypothetically borrow\n', '     * @return (possible error code (semi-opaque),\n', '                hypothetical account liquidity in excess of collateral requirements,\n', '     *          hypothetical account shortfall below collateral requirements)\n', '     */\n', '    function getHypotheticalAccountLiquidity(\n', '        address account,\n', '        address pTokenModify,\n', '        uint redeemTokens,\n', '        uint borrowAmount\n', '    ) public view virtual returns (uint, uint, uint) {\n', '        (Error err, uint liquidity, uint shortfall) = getHypotheticalAccountLiquidityInternal(account, pTokenModify, redeemTokens, borrowAmount);\n', '        return (uint(err), liquidity, shortfall);\n', '    }\n', '\n', '    /**\n', '     * @notice Determine what the account liquidity would be if the given amounts were redeemed/borrowed\n', '     * @param pTokenModify The market to hypothetically redeem/borrow in\n', '     * @param account The account to determine liquidity for\n', '     * @param redeemTokens The number of tokens to hypothetically redeem\n', '     * @param borrowAmount The amount of underlying to hypothetically borrow\n', '     * @dev Note that we calculate the exchangeRateStored for each collateral pToken using stored data,\n', '     *  without calculating accumulated interest.\n', '     * @return (possible error code,\n', '                hypothetical account liquidity in excess of collateral requirements,\n', '     *          hypothetical account shortfall below collateral requirements)\n', '     */\n', '    function getHypotheticalAccountLiquidityInternal(\n', '        address account,\n', '        address pTokenModify,\n', '        uint redeemTokens,\n', '        uint borrowAmount\n', '    ) internal view returns (Error, uint, uint) {\n', '\n', '        AccountLiquidityLocalVars memory vars; // Holds all our calculation results\n', '        uint oErr;\n', '        MathError mErr;\n', '\n', '        // For each asset the account is in\n', '        address[] memory assets = accountAssets[account];\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            address asset = assets[i];\n', '\n', '            // Read the balances and exchange rate from the pToken\n', '            (oErr, vars.pTokenBalance, vars.borrowBalance, vars.exchangeRateMantissa) = PTokenInterface(asset).getAccountSnapshot(account);\n', '            if (oErr != 0) { // semi-opaque error code, we assume NO_ERROR == 0 is invariant between upgrades\n', '                return (Error.SNAPSHOT_ERROR, 0, 0);\n', '            }\n', '            vars.collateralFactor = Exp({mantissa: markets[address(asset)].collateralFactorMantissa});\n', '            vars.exchangeRate = Exp({mantissa: vars.exchangeRateMantissa});\n', '\n', '            // Get the normalized price of the asset\n', '            vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset);\n', '            if (vars.oraclePriceMantissa == 0) {\n', '                return (Error.PRICE_ERROR, 0, 0);\n', '            }\n', '            vars.oraclePrice = Exp({mantissa: vars.oraclePriceMantissa});\n', '\n', '            // Pre-compute a conversion factor from tokens -> ether (normalized price value)\n', '            (mErr, vars.tokensToDenom) = mulExp3(vars.collateralFactor, vars.exchangeRate, vars.oraclePrice);\n', '            if (mErr != MathError.NO_ERROR) {\n', '                return (Error.MATH_ERROR, 0, 0);\n', '            }\n', '\n', '            // sumCollateral += tokensToDenom * pTokenBalance\n', '            (mErr, vars.sumCollateral) = mulScalarTruncateAddUInt(vars.tokensToDenom, vars.pTokenBalance, vars.sumCollateral);\n', '            if (mErr != MathError.NO_ERROR) {\n', '                return (Error.MATH_ERROR, 0, 0);\n', '            }\n', '\n', '            // sumBorrowPlusEffects += oraclePrice * borrowBalance\n', '            (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, vars.borrowBalance, vars.sumBorrowPlusEffects);\n', '            if (mErr != MathError.NO_ERROR) {\n', '                return (Error.MATH_ERROR, 0, 0);\n', '            }\n', '\n', '            // Calculate effects of interacting with pTokenModify\n', '            if (asset == pTokenModify) {\n', '                // redeem effect\n', '                // sumBorrowPlusEffects += tokensToDenom * redeemTokens\n', '                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.tokensToDenom, redeemTokens, vars.sumBorrowPlusEffects);\n', '                if (mErr != MathError.NO_ERROR) {\n', '                    return (Error.MATH_ERROR, 0, 0);\n', '                }\n', '\n', '                // borrow effect\n', '                // sumBorrowPlusEffects += oraclePrice * borrowAmount\n', '                (mErr, vars.sumBorrowPlusEffects) = mulScalarTruncateAddUInt(vars.oraclePrice, borrowAmount, vars.sumBorrowPlusEffects);\n', '                if (mErr != MathError.NO_ERROR) {\n', '                    return (Error.MATH_ERROR, 0, 0);\n', '                }\n', '            }\n', '        }\n', '\n', '        // These are safe, as the underflow condition is checked first\n', '        if (vars.sumCollateral > vars.sumBorrowPlusEffects) {\n', '            return (Error.NO_ERROR, vars.sumCollateral - vars.sumBorrowPlusEffects, 0);\n', '        } else {\n', '            return (Error.NO_ERROR, 0, vars.sumBorrowPlusEffects - vars.sumCollateral);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate number of tokens of collateral asset to seize given an underlying amount\n', '     * @dev Used in liquidation (called in pToken.liquidateBorrowFresh)\n', '     * @param pTokenBorrowed The address of the borrowed pToken\n', '     * @param pTokenCollateral The address of the collateral pToken\n', '     * @param actualRepayAmount The amount of pTokenBorrowed underlying to convert into pTokenCollateral tokens\n', '     * @return (errorCode, number of pTokenCollateral tokens to be seized in a liquidation)\n', '     */\n', '    function liquidateCalculateSeizeTokens(\n', '        address pTokenBorrowed,\n', '        address pTokenCollateral,\n', '        uint actualRepayAmount\n', '    ) external view override returns (uint, uint) {\n', '        /* Read oracle prices for borrowed and collateral markets */\n', '        uint priceBorrowedMantissa = oracle.getUnderlyingPrice(pTokenBorrowed);\n', '        uint priceCollateralMantissa = oracle.getUnderlyingPrice(pTokenCollateral);\n', '        if (priceBorrowedMantissa == 0 || priceCollateralMantissa == 0) {\n', '            return (uint(Error.PRICE_ERROR), 0);\n', '        }\n', '\n', '        /*\n', '         * Get the exchange rate and calculate the number of collateral tokens to seize:\n', '         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n', '         *  seizeTokens = seizeAmount / exchangeRate\n', '         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n', '         */\n', '        uint exchangeRateMantissa = PTokenInterface(pTokenCollateral).exchangeRateStored(); // Note: reverts on error\n', '        uint seizeTokens;\n', '        Exp memory numerator;\n', '        Exp memory denominator;\n', '        Exp memory ratio;\n', '        MathError mathErr;\n', '\n', '        (mathErr, numerator) = mulExp(liquidationIncentiveMantissa, priceBorrowedMantissa);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0);\n', '        }\n', '\n', '        (mathErr, denominator) = mulExp(priceCollateralMantissa, exchangeRateMantissa);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0);\n', '        }\n', '\n', '        (mathErr, ratio) = divExp(numerator, denominator);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0);\n', '        }\n', '\n', '        (mathErr, seizeTokens) = mulScalarTruncate(ratio, actualRepayAmount);\n', '        if (mathErr != MathError.NO_ERROR) {\n', '            return (uint(Error.MATH_ERROR), 0);\n', '        }\n', '\n', '        return (uint(Error.NO_ERROR), seizeTokens);\n', '    }\n', '\n', '    /*** Admin Functions ***/\n', '\n', '    /**\n', '      * @notice Sets a new price oracle for the controller\n', '      * @dev Admin function to set a new price oracle\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setPriceOracle(PriceOracle newOracle) public returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PRICE_ORACLE_OWNER_CHECK);\n', '        }\n', '\n', '        // Track the old oracle for the controller\n', '        PriceOracle oldOracle = oracle;\n', '\n', "        // Set controller's oracle to newOracle\n", '        oracle = newOracle;\n', '\n', '        // Emit NewPriceOracle(oldOracle, newOracle)\n', '        emit NewPriceOracle(oldOracle, newOracle);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets a PIE address for the controller\n', '      * @return uint 0=success\n', '      */\n', '    function _setPieAddress(address pieAddress_) public returns (uint) {\n', '        require(msg.sender == admin && pieAddress == address(0),"pie address may only be initialized once");\n', '\n', '        pieAddress = pieAddress_;\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets the closeFactor used when liquidating borrows\n', '      * @dev Admin function to set closeFactor\n', '      * @param newCloseFactorMantissa New close factor, scaled by 1e18\n', '      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n', '      */\n', '    function _setCloseFactor(uint newCloseFactorMantissa) external returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_CLOSE_FACTOR_OWNER_CHECK);\n', '        }\n', '\n', '        Exp memory newCloseFactorExp = Exp({mantissa: newCloseFactorMantissa});\n', '        Exp memory lowLimit = Exp({mantissa: closeFactorMinMantissa});\n', '        if (lessThanOrEqualExp(newCloseFactorExp, lowLimit)) {\n', '            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n', '        }\n', '\n', '        Exp memory highLimit = Exp({mantissa: closeFactorMaxMantissa});\n', '        if (lessThanExp(highLimit, newCloseFactorExp)) {\n', '            return fail(Error.INVALID_CLOSE_FACTOR, FailureInfo.SET_CLOSE_FACTOR_VALIDATION);\n', '        }\n', '\n', '        uint oldCloseFactorMantissa = closeFactorMantissa;\n', '        closeFactorMantissa = newCloseFactorMantissa;\n', '        emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets the collateralFactor for a market\n', '      * @dev Admin function to set per-market collateralFactor\n', '      * @param pToken The market to set the factor on\n', '      * @param newCollateralFactorMantissa The new collateral factor, scaled by 1e18\n', '      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n', '      */\n', '    function _setCollateralFactor(address pToken, uint newCollateralFactorMantissa) external returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_COLLATERAL_FACTOR_OWNER_CHECK);\n', '        }\n', '\n', '        // Verify market is listed\n', '        Market storage market = markets[pToken];\n', '        if (!market.isListed) {\n', '            return fail(Error.MARKET_NOT_LISTED, FailureInfo.SET_COLLATERAL_FACTOR_NO_EXISTS);\n', '        }\n', '\n', '        Exp memory newCollateralFactorExp = Exp({mantissa: newCollateralFactorMantissa});\n', '\n', '        // Check collateral factor <= 0.9\n', '        Exp memory highLimit = Exp({mantissa: collateralFactorMaxMantissa});\n', '        if (lessThanExp(highLimit, newCollateralFactorExp)) {\n', '            return fail(Error.INVALID_COLLATERAL_FACTOR, FailureInfo.SET_COLLATERAL_FACTOR_VALIDATION);\n', '        }\n', '\n', '        oracle.updateUnderlyingPrice(pToken);\n', '        // If collateral factor != 0, fail if price == 0\n', '        if (newCollateralFactorMantissa != 0 && oracle.getUnderlyingPrice(pToken) == 0) {\n', '            return fail(Error.PRICE_ERROR, FailureInfo.SET_COLLATERAL_FACTOR_WITHOUT_PRICE);\n', '        }\n', '\n', "        // Set market's collateral factor to new collateral factor, remember old value\n", '        uint oldCollateralFactorMantissa = market.collateralFactorMantissa;\n', '        market.collateralFactorMantissa = newCollateralFactorMantissa;\n', '\n', '        // Emit event with asset, old collateral factor, and new collateral factor\n', '        emit NewCollateralFactor(pToken, oldCollateralFactorMantissa, newCollateralFactorMantissa);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets maxAssets which controls how many markets can be entered\n', '      * @dev Admin function to set maxAssets\n', '      * @param newMaxAssets New max assets\n', '      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n', '      */\n', '    function _setMaxAssets(uint newMaxAssets) external returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_MAX_ASSETS_OWNER_CHECK);\n', '        }\n', '\n', '        uint oldMaxAssets = maxAssets;\n', '        maxAssets = newMaxAssets;\n', '        emit NewMaxAssets(oldMaxAssets, newMaxAssets);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Sets liquidationIncentive\n', '      * @dev Admin function to set liquidationIncentive\n', '      * @param newLiquidationIncentiveMantissa New liquidationIncentive scaled by 1e18\n', '      * @return uint 0=success, otherwise a failure. (See ErrorReporter for details)\n', '      */\n', '    function _setLiquidationIncentive(uint newLiquidationIncentiveMantissa) external returns (uint) {\n', '        // Check caller is admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_LIQUIDATION_INCENTIVE_OWNER_CHECK);\n', '        }\n', '\n', '        // Check de-scaled min <= newLiquidationIncentive <= max\n', '        Exp memory newLiquidationIncentive = Exp({mantissa: newLiquidationIncentiveMantissa});\n', '        Exp memory minLiquidationIncentive = Exp({mantissa: liquidationIncentiveMinMantissa});\n', '        if (lessThanExp(newLiquidationIncentive, minLiquidationIncentive)) {\n', '            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n', '        }\n', '\n', '        Exp memory maxLiquidationIncentive = Exp({mantissa: liquidationIncentiveMaxMantissa});\n', '        if (lessThanExp(maxLiquidationIncentive, newLiquidationIncentive)) {\n', '            return fail(Error.INVALID_LIQUIDATION_INCENTIVE, FailureInfo.SET_LIQUIDATION_INCENTIVE_VALIDATION);\n', '        }\n', '\n', '        // Save current value for use in log\n', '        uint oldLiquidationIncentiveMantissa = liquidationIncentiveMantissa;\n', '\n', '        // Set liquidation incentive to new incentive\n', '        liquidationIncentiveMantissa = newLiquidationIncentiveMantissa;\n', '\n', '        // Emit event with old incentive, new incentive\n', '        emit NewLiquidationIncentive(oldLiquidationIncentiveMantissa, newLiquidationIncentiveMantissa);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Add the market to the markets mapping and set it as listed\n', '      * @dev Admin function to set isListed and add support for the market\n', '      * @param pToken The address of the market (token) to list\n', '      * @return uint 0=success, otherwise a failure. (See enum Error for details)\n', '      */\n', '    function _supportMarket(address pToken) external returns (uint) {\n', '        if (msg.sender != admin && msg.sender != factory) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SUPPORT_MARKET_OWNER_CHECK);\n', '        }\n', '\n', '        if (markets[pToken].isListed) {\n', '            return fail(Error.MARKET_ALREADY_LISTED, FailureInfo.SUPPORT_MARKET_EXISTS);\n', '        }\n', '\n', '        PTokenInterface(pToken).isPToken(); // Sanity check to make sure its really a PToken\n', '\n', '        _addMarketInternal(pToken);\n', '\n', '        Market storage newMarket = markets[pToken];\n', '        newMarket.isListed = true;\n', '\n', '        emit MarketListed(pToken);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    function _addMarketInternal(address pToken) internal {\n', '        require(markets[pToken].isListed == false, "market already added");\n', '        allMarkets.push(pToken);\n', '    }\n', '\n', '    /**\n', '     * @notice Admin function to change the Pause Guardian\n', '     * @param newPauseGuardian The address of the new Pause Guardian\n', '     * @return uint 0=success, otherwise a failure. (See enum Error for details)\n', '     */\n', '    function _setPauseGuardian(address newPauseGuardian) public returns (uint) {\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PAUSE_GUARDIAN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value for inclusion in log\n', '        address oldPauseGuardian = pauseGuardian;\n', '\n', '        // Store pauseGuardian with value newPauseGuardian\n', '        pauseGuardian = newPauseGuardian;\n', '\n', '        // Emit NewPauseGuardian(OldPauseGuardian, NewPauseGuardian)\n', '        emit NewPauseGuardian(oldPauseGuardian, pauseGuardian);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    function _setMintPaused(address pToken, bool state) public returns (bool) {\n', '        require(markets[pToken].isListed, "cannot pause a market that is not listed");\n', '        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");\n', '        require(msg.sender == admin || state == true, "only admin can unpause");\n', '\n', '        mintGuardianPaused[pToken] = state;\n', '        emit ActionPaused(pToken, "Mint", state);\n', '        return state;\n', '    }\n', '\n', '    function _setBorrowPaused(address pToken, bool state) public returns (bool) {\n', '        require(markets[pToken].isListed, "cannot pause a market that is not listed");\n', '        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");\n', '        require(msg.sender == admin || state == true, "only admin can unpause");\n', '\n', '        borrowGuardianPaused[pToken] = state;\n', '        emit ActionPaused(pToken, "Borrow", state);\n', '        return state;\n', '    }\n', '\n', '    function _setTransferPaused(bool state) public returns (bool) {\n', '        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");\n', '        require(msg.sender == admin || state == true, "only admin can unpause");\n', '\n', '        transferGuardianPaused = state;\n', '        emit ActionPaused("Transfer", state);\n', '        return state;\n', '    }\n', '\n', '    function _setSeizePaused(bool state) public returns (bool) {\n', '        require(msg.sender == pauseGuardian || msg.sender == admin, "only pause guardian and admin can pause");\n', '        require(msg.sender == admin || state == true, "only admin can unpause");\n', '\n', '        seizeGuardianPaused = state;\n', '        emit ActionPaused("Seize", state);\n', '        return state;\n', '    }\n', '\n', '    function _setFactoryContract(address _factory) external returns (uint) {\n', '        if (msg.sender != admin) {\n', '            return uint(Error.UNAUTHORIZED);\n', '        }\n', '\n', '        factory = _factory;\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    function _become(address payable unitroller) public {\n', '        require(msg.sender == Unitroller(unitroller).admin(), "only unitroller admin can change brains");\n', '        require(Unitroller(unitroller)._acceptImplementation() == 0, "change not authorized");\n', '    }\n', '\n', '    /*** Pie Distribution ***/\n', '\n', '    /**\n', '     * @notice Set PIE speed for a single market\n', '     * @param pToken The market whose PIE speed to update\n', '     * @param pieSpeed New PIE speed for market\n', '     */\n', '    function setPieSpeedInternal(address pToken, uint pieSpeed) internal {\n', '        uint currentPieSpeed = pieSpeeds[pToken];\n', '        if (currentPieSpeed != 0) {\n', '            // note that PIE speed could be set to 0 to halt liquidity rewards for a market\n', '            Exp memory borrowIndex = Exp({mantissa: PTokenInterface(pToken).borrowIndex()});\n', '            updatePieSupplyIndex(pToken);\n', '            updatePieBorrowIndex(pToken, borrowIndex);\n', '        } else if (pieSpeed != 0) {\n', '            // Add the PIE market\n', '            Market storage market = markets[pToken];\n', '            require(market.isListed == true, "pie market is not listed");\n', '\n', '            if (pieSupplyState[pToken].index == 0) {\n', '                pieSupplyState[pToken] = PieMarketState({\n', '                    index: pieInitialIndex,\n', '                    block: safe32(getBlockNumber(), "block number exceeds 32 bits")\n', '                });\n', '            } else {\n', '                pieSupplyState[pToken].block = safe32(getBlockNumber(), "block number exceeds 32 bits");\n', '            }\n', '\n', '            if (pieBorrowState[pToken].index == 0) {\n', '                pieBorrowState[pToken] = PieMarketState({\n', '                    index: pieInitialIndex,\n', '                    block: safe32(getBlockNumber(), "block number exceeds 32 bits")\n', '                });\n', '            } else {\n', '                pieBorrowState[pToken].block = safe32(getBlockNumber(), "block number exceeds 32 bits");\n', '            }\n', '        }\n', '\n', '        if (currentPieSpeed != pieSpeed) {\n', '            pieSpeeds[pToken] = pieSpeed;\n', '            emit PieSpeedUpdated(pToken, pieSpeed);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Accrue PIE to the market by updating the supply index\n', '     * @param pToken The market whose supply index to update\n', '     */\n', '    function updatePieSupplyIndex(address pToken) internal {\n', '        PieMarketState storage supplyState = pieSupplyState[pToken];\n', '        uint supplySpeed = pieSpeeds[pToken];\n', '        uint blockNumber = getBlockNumber();\n', '        uint deltaBlocks = sub_(blockNumber, uint(supplyState.block));\n', '        if (deltaBlocks > 0 && supplySpeed > 0) {\n', '            uint supplyTokens = PTokenInterface(pToken).totalSupply();\n', '            uint pieAccrued = mul_(deltaBlocks, supplySpeed);\n', '            Double memory ratio = supplyTokens > 0 ? fraction(pieAccrued, supplyTokens) : Double({mantissa: 0});\n', '            Double memory index = add_(Double({mantissa: supplyState.index}), ratio);\n', '            pieSupplyState[pToken] = PieMarketState({\n', '                index: safe224(index.mantissa, "new index exceeds 224 bits"),\n', '                block: safe32(blockNumber, "block number exceeds 32 bits")\n', '            });\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Accrue PIE to the market by updating the borrow index\n', '     * @param pToken The market whose borrow index to update\n', '     */\n', '    function updatePieBorrowIndex(address pToken, Exp memory marketBorrowIndex) internal {\n', '        PieMarketState storage borrowState = pieBorrowState[pToken];\n', '        uint borrowSpeed = pieSpeeds[pToken];\n', '        uint blockNumber = getBlockNumber();\n', '        uint deltaBlocks = sub_(blockNumber, uint(borrowState.block));\n', '        if (deltaBlocks > 0 && borrowSpeed > 0) {\n', '            uint borrowAmount = div_(PTokenInterface(pToken).totalBorrows(), marketBorrowIndex);\n', '            uint pieAccrued = mul_(deltaBlocks, borrowSpeed);\n', '            Double memory ratio = borrowAmount > 0 ? fraction(pieAccrued, borrowAmount) : Double({mantissa: 0});\n', '            Double memory index = add_(Double({mantissa: borrowState.index}), ratio);\n', '            pieBorrowState[pToken] = PieMarketState({\n', '                index: safe224(index.mantissa, "new index exceeds 224 bits"),\n', '                block: safe32(blockNumber, "block number exceeds 32 bits")\n', '            });\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate PIE accrued by a supplier and possibly transfer it to them\n', '     * @param pToken The market in which the supplier is interacting\n', '     * @param supplier The address of the supplier to distribute PIE to\n', '     */\n', '    function distributeSupplierPie(address pToken, address supplier, bool distributeAll) internal {\n', '        PieMarketState storage supplyState = pieSupplyState[pToken];\n', '        Double memory supplyIndex = Double({mantissa: supplyState.index});\n', '        Double memory supplierIndex = Double({mantissa: pieSupplierIndex[pToken][supplier]});\n', '        pieSupplierIndex[pToken][supplier] = supplyIndex.mantissa;\n', '\n', '        if (supplierIndex.mantissa == 0 && supplyIndex.mantissa > 0) {\n', '            supplierIndex.mantissa = pieInitialIndex;\n', '        }\n', '\n', '        Double memory deltaIndex = sub_(supplyIndex, supplierIndex);\n', '        uint supplierTokens = PTokenInterface(pToken).balanceOf(supplier);\n', '        uint supplierDelta = mul_(supplierTokens, deltaIndex);\n', '        uint supplierAccrued = add_(pieAccrued[supplier], supplierDelta);\n', '        pieAccrued[supplier] = transferPie(supplier, supplierAccrued, distributeAll ? 0 : pieClaimThreshold);\n', '        emit DistributedSupplierPie(pToken, supplier, supplierDelta, supplyIndex.mantissa);\n', '    }\n', '\n', '    /**\n', '     * @notice Calculate PIE accrued by a borrower and possibly transfer it to them\n', '     * @dev Borrowers will not begin to accrue until after the first interaction with the protocol.\n', '     * @param pToken The market in which the borrower is interacting\n', '     * @param borrower The address of the borrower to distribute PIE to\n', '     */\n', '    function distributeBorrowerPie(\n', '        address pToken,\n', '        address borrower,\n', '        Exp memory marketBorrowIndex,\n', '        bool distributeAll\n', '    ) internal {\n', '        PieMarketState storage borrowState = pieBorrowState[pToken];\n', '        Double memory borrowIndex = Double({mantissa: borrowState.index});\n', '        Double memory borrowerIndex = Double({mantissa: pieBorrowerIndex[pToken][borrower]});\n', '        pieBorrowerIndex[pToken][borrower] = borrowIndex.mantissa;\n', '\n', '        if (borrowerIndex.mantissa > 0) {\n', '            Double memory deltaIndex = sub_(borrowIndex, borrowerIndex);\n', '            uint borrowerAmount = div_(PTokenInterface(pToken).borrowBalanceStored(borrower), marketBorrowIndex);\n', '            uint borrowerDelta = mul_(borrowerAmount, deltaIndex);\n', '            uint borrowerAccrued = add_(pieAccrued[borrower], borrowerDelta);\n', '            pieAccrued[borrower] = transferPie(borrower, borrowerAccrued, distributeAll ? 0 : pieClaimThreshold);\n', '            emit DistributedBorrowerPie(pToken, borrower, borrowerDelta, borrowIndex.mantissa);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Claim all the pie accrued by holder in all markets\n', '     * @param holder The address to claim PIE for\n', '     */\n', '    function claimPie(address holder) public {\n', '        claimPie(holder, allMarkets);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim all the pie accrued by holder in the specified markets\n', '     * @param holder The address to claim PIE for\n', '     * @param pTokens The list of markets to claim PIE in\n', '     */\n', '    function claimPie(address holder, address[] memory pTokens) public {\n', '        address[] memory holders = new address[](1);\n', '        holders[0] = holder;\n', '        claimPie(holders, pTokens, true, true);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim all pie accrued by the holders\n', '     * @param holders The addresses to claim PIE for\n', '     * @param pTokens The list of markets to claim PIE in\n', '     * @param borrowers Whether or not to claim PIE earned by borrowing\n', '     * @param suppliers Whether or not to claim PIE earned by supplying\n', '     */\n', '    function claimPie(address[] memory holders, address[] memory pTokens, bool borrowers, bool suppliers) public {\n', '        for (uint i = 0; i < pTokens.length; i++) {\n', '            address pToken = pTokens[i];\n', '            require(markets[pToken].isListed, "market must be listed");\n', '            if (borrowers == true) {\n', '                Exp memory borrowIndex = Exp({mantissa: PTokenInterface(pToken).borrowIndex()});\n', '                updatePieBorrowIndex(pToken, borrowIndex);\n', '                for (uint j = 0; j < holders.length; j++) {\n', '                    distributeBorrowerPie(pToken, holders[j], borrowIndex, true);\n', '                }\n', '            }\n', '            if (suppliers == true) {\n', '                updatePieSupplyIndex(pToken);\n', '                for (uint j = 0; j < holders.length; j++) {\n', '                    distributeSupplierPie(pToken, holders[j], true);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer PIE to the user\n', '     * @dev Note: If there is not enough PIE, we do not perform the transfer all.\n', '     * @param user The address of the user to transfer PIE to\n', '     * @param userAccrued The amount of PIE to (possibly) transfer\n', '     * @return The userAccrued of PIE which was NOT transferred to the user\n', '     */\n', '    function transferPie(address user, uint userAccrued, uint threshold) internal returns (uint) {\n', '        if (userAccrued >= threshold && userAccrued > 0) {\n', '            address pie = getPieAddress();\n', '            uint pieRemaining = EIP20Interface(pie).balanceOf(address(this));\n', '            if (userAccrued <= pieRemaining) {\n', '                EIP20Interface(pie).transfer(user, userAccrued);\n', '                return 0;\n', '            }\n', '        }\n', '        return userAccrued;\n', '    }\n', '\n', '    /*** Pie Distribution Admin ***/\n', '\n', '    /**\n', '    * @notice Set PIE speed for a single market\n', '    * @param pToken The market whose PIE speed to update\n', '    * @param pieSpeed New PIE speed for market\n', '    */\n', '    function _setPieSpeed(address pToken, uint pieSpeed) public {\n', '        require(msg.sender == admin, "only admin can set pie speed");\n', '        setPieSpeedInternal(pToken, pieSpeed);\n', '    }\n', '\n', '    /**\n', '     * @notice Return all of the markets\n', '     * @dev The automatic getter may be used to access an individual market.\n', '     * @return The list of market addresses\n', '     */\n', '    function getAllMarkets() public view returns (address[] memory) {\n', '        return allMarkets;\n', '    }\n', '\n', '    function getBlockNumber() public view virtual returns (uint) {\n', '        return block.number;\n', '    }\n', '\n', '    /**\n', '     * @notice Return the address of the PIE token\n', '     * @return The address of PIE\n', '     */\n', '    function getPieAddress() public view virtual returns (address) {\n', '        return pieAddress;\n', '    }\n', '\n', '    function getOracle() public view override returns (PriceOracle) {\n', '        return oracle;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./PriceOracle.sol";\n', '\n', 'abstract contract ControllerInterface {\n', '    /// @notice Indicator that this is a Controller contract (for inspection)\n', '    bool public constant isController = true;\n', '\n', '    /*** Assets You Are In ***/\n', '\n', '    function enterMarkets(address[] calldata pTokens) external virtual returns (uint[] memory);\n', '    function exitMarket(address pToken) external virtual returns (uint);\n', '\n', '    /*** Policy Hooks ***/\n', '\n', '    function mintAllowed(address pToken, address minter, uint mintAmount) external virtual returns (uint);\n', '    function redeemAllowed(address pToken, address redeemer, uint redeemTokens) external virtual returns (uint);\n', '    function redeemVerify(address pToken, address redeemer, uint redeemAmount, uint redeemTokens) external virtual;\n', '    function borrowAllowed(address pToken, address borrower, uint borrowAmount) external virtual returns (uint);\n', '\n', '    function repayBorrowAllowed(\n', '        address pToken,\n', '        address payer,\n', '        address borrower,\n', '        uint repayAmount) external virtual returns (uint);\n', '\n', '    function liquidateBorrowAllowed(\n', '        address pTokenBorrowed,\n', '        address pTokenCollateral,\n', '        address liquidator,\n', '        address borrower,\n', '        uint repayAmount) external virtual returns (uint);\n', '\n', '    function seizeAllowed(\n', '        address pTokenCollateral,\n', '        address pTokenBorrowed,\n', '        address liquidator,\n', '        address borrower,\n', '        uint seizeTokens) external virtual returns (uint);\n', '\n', '    function transferAllowed(address pToken, address src, address dst, uint transferTokens) external virtual returns (uint);\n', '\n', '    /*** Liquidity/Liquidation Calculations ***/\n', '\n', '    function liquidateCalculateSeizeTokens(\n', '        address pTokenBorrowed,\n', '        address pTokenCollateral,\n', '        uint repayAmount) external view virtual returns (uint, uint);\n', '\n', '    function getOracle() external view virtual returns (PriceOracle);\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./PriceOracle.sol";\n', '\n', 'contract UnitrollerAdminStorage {\n', '    /**\n', '    * @notice Administrator for this contract\n', '    */\n', '    address public admin;\n', '\n', '    /**\n', '    * @notice Pending administrator for this contract\n', '    */\n', '    address public pendingAdmin;\n', '\n', '    /**\n', '    * @notice Active brains of Unitroller\n', '    */\n', '    address public controllerImplementation;\n', '\n', '    /**\n', '    * @notice Pending brains of Unitroller\n', '    */\n', '    address public pendingControllerImplementation;\n', '}\n', '\n', 'contract ControllerStorage is UnitrollerAdminStorage {\n', '    /**\n', '     * @notice Oracle which gives the price of any given asset\n', '     */\n', '    PriceOracle public oracle;\n', '\n', '    /**\n', '     * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n', '     */\n', '    uint public closeFactorMantissa;\n', '\n', '    /**\n', '     * @notice Multiplier representing the discount on collateral that a liquidator receives\n', '     */\n', '    uint public liquidationIncentiveMantissa;\n', '\n', '    /**\n', '     * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n', '     */\n', '    uint public maxAssets;\n', '\n', '    /**\n', '     * @notice Per-account mapping of "assets you are in", capped by maxAssets\n', '     */\n', '    mapping(address => address[]) public accountAssets;\n', '\n', '    /// @notice isListed Whether or not this market is listed\n', '    /**\n', '     * @notice collateralFactorMantissa Multiplier representing the most one can borrow against their collateral in this market.\n', '     *  For instance, 0.9 to allow borrowing 90% of collateral value.\n', '     *  Must be between 0 and 1, and stored as a mantissa.\n', '     */\n', '    /// @notice accountMembership Per-market mapping of "accounts in this asset"\n', '    /// @notice isPied Whether or not this market receives PIE\n', '    struct Market {\n', '        bool isListed;\n', '        uint collateralFactorMantissa;\n', '        mapping(address => bool) accountMembership;\n', '        bool isPied;\n', '    }\n', '\n', '    /**\n', '     * @notice Official mapping of pTokens -> Market metadata\n', '     * @dev Used e.g. to determine if a market is supported\n', '     */\n', '    mapping(address => Market) public markets;\n', '\n', '    /**\n', '     * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n', '     *  Actions which allow users to remove their own assets cannot be paused.\n', '     *  Liquidation / seizing / transfer can only be paused globally, not by market.\n', '     */\n', '    address public pauseGuardian;\n', '    bool public _mintGuardianPaused;\n', '    bool public _borrowGuardianPaused;\n', '    bool public transferGuardianPaused;\n', '    bool public seizeGuardianPaused;\n', '    mapping(address => bool) public mintGuardianPaused;\n', '    mapping(address => bool) public borrowGuardianPaused;\n', '\n', "    /// @notice index The market's last updated pieBorrowIndex or pieSupplyIndex\n", '    /// @notice block The block number the index was last updated at\n', '    struct PieMarketState {\n', '        uint224 index;\n', '        uint32 block;\n', '    }\n', '\n', '    /// @notice A list of all markets\n', '    address[] public allMarkets;\n', '\n', '    /// @notice The rate at which the flywheel distributes PIE, per block\n', '    uint public pieRate;\n', '\n', '    /// @notice Address of the PIE token\n', '    address public pieAddress;\n', '\n', '    // @notice Address of the factory\n', '    address public factory;\n', '\n', '    /// @notice The portion of pieRate that each market currently receives\n', '    mapping(address => uint) public pieSpeeds;\n', '\n', '    /// @notice The PIE market supply state for each market\n', '    mapping(address => PieMarketState) public pieSupplyState;\n', '\n', '    /// @notice The PIE market borrow state for each market\n', '    mapping(address => PieMarketState) public pieBorrowState;\n', '\n', '    /// @notice The PIE borrow index for each market for each supplier as of the last time they accrued PIE\n', '    mapping(address => mapping(address => uint)) public pieSupplierIndex;\n', '\n', '    /// @notice The PIE borrow index for each market for each borrower as of the last time they accrued PIE\n', '    mapping(address => mapping(address => uint)) public pieBorrowerIndex;\n', '\n', '    /// @notice The PIE accrued but not yet transferred to each user\n', '    mapping(address => uint) public pieAccrued;\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @title ERC 20 Token Standard Interface\n', ' *  https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface EIP20Interface {\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '      * @notice Get the total number of tokens in circulation\n', '      * @return The supply of tokens\n', '      */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @notice Gets the balance of the specified address\n', '     * @param owner The address from which the balance will be retrieved\n', '     * @return The balance\n', '     */\n', '    function balanceOf(address owner) external view returns (uint256);\n', '\n', '    /**\n', '      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '      * @param dst The address of the destination account\n', '      * @param amount The number of tokens to transfer\n', '      * @return Whether or not the transfer succeeded\n', '      */\n', '    function transfer(address dst, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '      * @notice Transfer `amount` tokens from `src` to `dst`\n', '      * @param src The address of the source account\n', '      * @param dst The address of the destination account\n', '      * @param amount The number of tokens to transfer\n', '      * @return Whether or not the transfer succeeded\n', '      */\n', '    function transferFrom(address src, address dst, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '      * @notice Approve `spender` to transfer up to `amount` from `src`\n', '      * @dev This will overwrite the approval amount for `spender`\n', '      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '      * @param spender The address of the account which may transfer tokens\n', '      * @param amount The number of tokens that are approved (-1 means infinite)\n', '      * @return Whether or not the approval succeeded\n', '      */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '      * @notice Get the current allowance from `owner` for `spender`\n', '      * @param owner The address of the account which owns the tokens to be spent\n', '      * @param spender The address of the account which may transfer tokens\n', '      * @return The number of tokens allowed to be spent (-1 means infinite)\n', '      */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract ControllerErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED,\n', '        CONTROLLER_MISMATCH,\n', '        INSUFFICIENT_SHORTFALL,\n', '        INSUFFICIENT_LIQUIDITY,\n', '        INVALID_CLOSE_FACTOR,\n', '        INVALID_COLLATERAL_FACTOR,\n', '        INVALID_LIQUIDATION_INCENTIVE,\n', '        MARKET_NOT_ENTERED, // no longer possible\n', '        MARKET_NOT_LISTED,\n', '        MARKET_ALREADY_LISTED,\n', '        MATH_ERROR,\n', '        NONZERO_BORROW_BALANCE,\n', '        PRICE_ERROR,\n', '        PRICE_UPDATE_ERROR,\n', '        REJECTION,\n', '        SNAPSHOT_ERROR,\n', '        TOO_MANY_ASSETS,\n', '        TOO_MUCH_REPAY\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK,\n', '        EXIT_MARKET_BALANCE_OWED,\n', '        EXIT_MARKET_REJECTION,\n', '        SET_CLOSE_FACTOR_OWNER_CHECK,\n', '        SET_CLOSE_FACTOR_VALIDATION,\n', '        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n', '        SET_COLLATERAL_FACTOR_NO_EXISTS,\n', '        SET_COLLATERAL_FACTOR_VALIDATION,\n', '        SET_COLLATERAL_FACTOR_WITHOUT_PRICE,\n', '        SET_IMPLEMENTATION_OWNER_CHECK,\n', '        SET_LIQUIDATION_INCENTIVE_OWNER_CHECK,\n', '        SET_LIQUIDATION_INCENTIVE_VALIDATION,\n', '        SET_MAX_ASSETS_OWNER_CHECK,\n', '        SET_PAUSE_GUARDIAN_OWNER_CHECK,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_PENDING_IMPLEMENTATION_OWNER_CHECK,\n', '        SET_PRICE_ORACLE_OWNER_CHECK,\n', '        SUPPORT_MARKET_EXISTS,\n', '        SUPPORT_MARKET_OWNER_CHECK\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    /**\n', '      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n', '      */\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract TokenErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED,\n', '        BAD_INPUT,\n', '        CONTROLLER_REJECTION,\n', '        CONTROLLER_CALCULATION_ERROR,\n', '        INTEREST_RATE_MODEL_ERROR,\n', '        INVALID_ACCOUNT_PAIR,\n', '        INVALID_CLOSE_AMOUNT_REQUESTED,\n', '        INVALID_COLLATERAL_FACTOR,\n', '        MATH_ERROR,\n', '        MARKET_NOT_FRESH,\n', '        MARKET_NOT_LISTED,\n', '        TOKEN_INSUFFICIENT_ALLOWANCE,\n', '        TOKEN_INSUFFICIENT_BALANCE,\n', '        TOKEN_INSUFFICIENT_CASH,\n', '        TOKEN_TRANSFER_IN_FAILED,\n', '        TOKEN_TRANSFER_OUT_FAILED\n', '    }\n', '\n', '    /*\n', '     * Note: FailureInfo (but not Error) is kept in alphabetical order\n', '     *       This is because FailureInfo grows significantly faster, and\n', '     *       the order of Error has some meaning, while the order of FailureInfo\n', '     *       is entirely arbitrary.\n', '     */\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        ACCRUE_INTEREST_ACCUMULATED_INTEREST_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_BORROW_RATE_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_BORROW_INDEX_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_TOTAL_BORROWS_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_NEW_TOTAL_RESERVES_CALCULATION_FAILED,\n', '        ACCRUE_INTEREST_SIMPLE_INTEREST_FACTOR_CALCULATION_FAILED,\n', '        BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n', '        BORROW_ACCRUE_INTEREST_FAILED,\n', '        BORROW_CASH_NOT_AVAILABLE,\n', '        BORROW_FRESHNESS_CHECK,\n', '        BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n', '        BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n', '        BORROW_MARKET_NOT_LISTED,\n', '        BORROW_CONTROLLER_REJECTION,\n', '        LIQUIDATE_ACCRUE_BORROW_INTEREST_FAILED,\n', '        LIQUIDATE_ACCRUE_COLLATERAL_INTEREST_FAILED,\n', '        LIQUIDATE_COLLATERAL_FRESHNESS_CHECK,\n', '        LIQUIDATE_CONTROLLER_REJECTION,\n', '        LIQUIDATE_CONTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED,\n', '        LIQUIDATE_CLOSE_AMOUNT_IS_UINT_MAX,\n', '        LIQUIDATE_CLOSE_AMOUNT_IS_ZERO,\n', '        LIQUIDATE_FRESHNESS_CHECK,\n', '        LIQUIDATE_LIQUIDATOR_IS_BORROWER,\n', '        LIQUIDATE_REPAY_BORROW_FRESH_FAILED,\n', '        LIQUIDATE_SEIZE_BALANCE_INCREMENT_FAILED,\n', '        LIQUIDATE_SEIZE_BALANCE_DECREMENT_FAILED,\n', '        LIQUIDATE_SEIZE_CONTROLLER_REJECTION,\n', '        LIQUIDATE_SEIZE_LIQUIDATOR_IS_BORROWER,\n', '        LIQUIDATE_SEIZE_TOO_MUCH,\n', '        MINT_ACCRUE_INTEREST_FAILED,\n', '        MINT_CONTROLLER_REJECTION,\n', '        MINT_EXCHANGE_CALCULATION_FAILED,\n', '        MINT_EXCHANGE_RATE_READ_FAILED,\n', '        MINT_FRESHNESS_CHECK,\n', '        MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n', '        MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n', '        MINT_TRANSFER_IN_FAILED,\n', '        MINT_TRANSFER_IN_NOT_POSSIBLE,\n', '        REDEEM_ACCRUE_INTEREST_FAILED,\n', '        REDEEM_CONTROLLER_REJECTION,\n', '        REDEEM_EXCHANGE_TOKENS_CALCULATION_FAILED,\n', '        REDEEM_EXCHANGE_AMOUNT_CALCULATION_FAILED,\n', '        REDEEM_EXCHANGE_RATE_READ_FAILED,\n', '        REDEEM_FRESHNESS_CHECK,\n', '        REDEEM_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED,\n', '        REDEEM_NEW_TOTAL_SUPPLY_CALCULATION_FAILED,\n', '        REDEEM_TRANSFER_OUT_NOT_POSSIBLE,\n', '        REDUCE_RESERVES_ACCRUE_INTEREST_FAILED,\n', '        REDUCE_RESERVES_ADMIN_CHECK,\n', '        REDUCE_RESERVES_CASH_NOT_AVAILABLE,\n', '        REDUCE_RESERVES_FRESH_CHECK,\n', '        REDUCE_RESERVES_VALIDATION,\n', '        REPAY_BEHALF_ACCRUE_INTEREST_FAILED,\n', '        REPAY_BORROW_ACCRUE_INTEREST_FAILED,\n', '        REPAY_BORROW_ACCUMULATED_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_CONTROLLER_REJECTION,\n', '        REPAY_BORROW_FRESHNESS_CHECK,\n', '        REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED,\n', '        REPAY_BORROW_TRANSFER_IN_NOT_POSSIBLE,\n', '        SET_COLLATERAL_FACTOR_OWNER_CHECK,\n', '        SET_COLLATERAL_FACTOR_VALIDATION,\n', '        SET_CONTROLLER_OWNER_CHECK,\n', '        SET_INTEREST_RATE_MODEL_ACCRUE_INTEREST_FAILED,\n', '        SET_INTEREST_RATE_MODEL_FRESH_CHECK,\n', '        SET_INTEREST_RATE_MODEL_OWNER_CHECK,\n', '        SET_MAX_ASSETS_OWNER_CHECK,\n', '        SET_ORACLE_MARKET_NOT_LISTED,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_RESERVE_FACTOR_ACCRUE_INTEREST_FAILED,\n', '        SET_RESERVE_FACTOR_ADMIN_CHECK,\n', '        SET_RESERVE_FACTOR_FRESH_CHECK,\n', '        SET_RESERVE_FACTOR_BOUNDS_CHECK,\n', '        TRANSFER_CONTROLLER_REJECTION,\n', '        TRANSFER_NOT_ALLOWED,\n', '        TRANSFER_NOT_ENOUGH,\n', '        TRANSFER_TOO_MUCH,\n', '        ADD_RESERVES_ACCRUE_INTEREST_FAILED,\n', '        ADD_RESERVES_FRESH_CHECK,\n', '        ADD_RESERVES_TRANSFER_IN_NOT_POSSIBLE,\n', '        SET_NEW_IMPLEMENTATION\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '\n', '    /**\n', '      * @dev use this when reporting an opaque error from an upgradeable collaborator contract\n', '      */\n', '    function failOpaque(Error err, FailureInfo info, uint opaqueError) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), opaqueError);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract OracleErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        POOL_OR_COIN_EXIST,\n', '        UNAUTHORIZED,\n', '        UPDATE_PRICE\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ADD_POOL_OR_COIN,\n', '        NO_PAIR,\n', '        NO_RESERVES,\n', '        PERIOD_NOT_ELAPSED,\n', '        SET_NEW_IMPLEMENTATION,\n', '        UPDATE_DATA\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract FactoryErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        INVALID_POOL,\n', '        MARKET_NOT_LISTED,\n', '        UNAUTHORIZED\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        CREATE_PETH_POOL,\n', '        CREATE_PPIE_POOL,\n', '        DEFICIENCY_LIQUIDITY_IN_POOL_OR_PAIR_IS_NOT_EXIST,\n', '        SET_MIN_LIQUIDITY_OWNER_CHECK,\n', '        SET_NEW_CONTROLLER,\n', '        SET_NEW_DECIMALS,\n', '        SET_NEW_EXCHANGE_RATE,\n', '        SET_NEW_IMPLEMENTATION,\n', '        SET_NEW_INTEREST_RATE_MODEL,\n', '        SET_NEW_ORACLE,\n', '        SET_NEW_RESERVE_FACTOR,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SUPPORT_MARKET_BAD_RESULT\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'contract RegistryErrorReporter {\n', '    enum Error {\n', '        NO_ERROR,\n', '        UNAUTHORIZED\n', '    }\n', '\n', '    enum FailureInfo {\n', '        ACCEPT_ADMIN_PENDING_ADMIN_CHECK,\n', '        SET_NEW_IMPLEMENTATION,\n', '        SET_PENDING_ADMIN_OWNER_CHECK,\n', '        SET_NEW_FACTORY\n', '    }\n', '\n', '    /**\n', '      * @dev `error` corresponds to enum Error; `info` corresponds to enum FailureInfo, and `detail` is an arbitrary\n', '      * contract-specific code that enables us to report opaque error codes from upgradeable contracts.\n', '      **/\n', '    event Failure(uint error, uint info, uint detail);\n', '\n', '    /**\n', '      * @dev use this when reporting a known error from the money market or a non-upgradeable collaborator\n', '      */\n', '    function fail(Error err, FailureInfo info) internal returns (uint) {\n', '        emit Failure(uint(err), uint(info), 0);\n', '\n', '        return uint(err);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./CarefulMath.sol";\n', '\n', '/**\n', ' * @title Exponential module for storing fixed-precision decimals\n', ' * @author DeFiPie\n', ' * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\n', ' *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\n', ' *         `Exp({mantissa: 5100000000000000000})`.\n', ' */\n', 'contract Exponential is CarefulMath {\n', '    uint constant expScale = 1e18;\n', '    uint constant doubleScale = 1e36;\n', '    uint constant halfExpScale = expScale/2;\n', '    uint constant mantissaOne = expScale;\n', '\n', '    struct Exp {\n', '        uint mantissa;\n', '    }\n', '\n', '    struct Double {\n', '        uint mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates an exponential from numerator and denominator values.\n', '     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\n', '     *            or if `denom` is zero.\n', '     */\n', '    function getExp(uint num, uint denom) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledNumerator) = mulUInt(num, expScale);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err1, uint rational) = divUInt(scaledNumerator, denom);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: rational}));\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two exponentials, returning a new exponential.\n', '     */\n', '    function addExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = addUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two exponentials, returning a new exponential.\n', '     */\n', '    function subExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        (MathError error, uint result) = subUInt(a.mantissa, b.mantissa);\n', '\n', '        return (error, Exp({mantissa: result}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, returning a new Exp.\n', '     */\n', '    function mulScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint scaledMantissa) = mulUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: scaledMantissa}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\n', '     */\n', '    function mulScalarTruncate(Exp memory a, uint scalar) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(product));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\n', '     */\n', '    function mulScalarTruncateAddUInt(Exp memory a, uint scalar, uint addend) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory product) = mulScalar(a, scalar);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return addUInt(truncate(product), addend);\n', '    }\n', '\n', '    /**\n', '     * @dev Divide an Exp by a scalar, returning a new Exp.\n', '     */\n', '    function divScalar(Exp memory a, uint scalar) pure internal returns (MathError, Exp memory) {\n', '        (MathError err0, uint descaledMantissa) = divUInt(a.mantissa, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: descaledMantissa}));\n', '    }\n', '\n', '    /**\n', '     * @dev Divide a scalar by an Exp, returning a new Exp.\n', '     */\n', '    function divScalarByExp(uint scalar, Exp memory divisor) pure internal returns (MathError, Exp memory) {\n', '        /*\n', '          We are doing this as:\n', '          getExp(mulUInt(expScale, scalar), divisor.mantissa)\n', '\n', '          How it works:\n', '          Exp = a / b;\n', '          Scalar = s;\n', '          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\n', '        */\n', '        (MathError err0, uint numerator) = mulUInt(expScale, scalar);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '        return getExp(numerator, divisor.mantissa);\n', '    }\n', '\n', '    /**\n', '     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\n', '     */\n', '    function divScalarByExpTruncate(uint scalar, Exp memory divisor) pure internal returns (MathError, uint) {\n', '        (MathError err, Exp memory fraction_) = divScalarByExp(scalar, divisor);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, 0);\n', '        }\n', '\n', '        return (MathError.NO_ERROR, truncate(fraction_));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two exponentials, returning a new exponential.\n', '     */\n', '    function mulExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '\n', '        (MathError err0, uint doubleScaledProduct) = mulUInt(a.mantissa, b.mantissa);\n', '        if (err0 != MathError.NO_ERROR) {\n', '            return (err0, Exp({mantissa: 0}));\n', '        }\n', '\n', '        // We add half the scale before dividing so that we get rounding instead of truncation.\n', '        //  See "Listing 6" and text above it at https://accu.org/index.php/journals/1717\n', '        // Without this change, a result like 6.6...e-19 will be truncated to 0 instead of being rounded to 1e-18.\n', '        (MathError err1, uint doubleScaledProductWithHalfScale) = addUInt(halfExpScale, doubleScaledProduct);\n', '        if (err1 != MathError.NO_ERROR) {\n', '            return (err1, Exp({mantissa: 0}));\n', '        }\n', '\n', '        (MathError err2, uint product) = divUInt(doubleScaledProductWithHalfScale, expScale);\n', '        // The only error `div` can return is MathError.DIVISION_BY_ZERO but we control `expScale` and it is not zero.\n', '        assert(err2 == MathError.NO_ERROR);\n', '\n', '        return (MathError.NO_ERROR, Exp({mantissa: product}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two exponentials given their mantissas, returning a new exponential.\n', '     */\n', '    function mulExp(uint a, uint b) pure internal returns (MathError, Exp memory) {\n', '        return mulExp(Exp({mantissa: a}), Exp({mantissa: b}));\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies three exponentials, returning a new exponential.\n', '     */\n', '    function mulExp3(Exp memory a, Exp memory b, Exp memory c) pure internal returns (MathError, Exp memory) {\n', '        (MathError err, Exp memory ab) = mulExp(a, b);\n', '        if (err != MathError.NO_ERROR) {\n', '            return (err, ab);\n', '        }\n', '        return mulExp(ab, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two exponentials, returning a new exponential.\n', '     *     (a/scale) / (b/scale) = (a/scale) * (scale/b) = a/b,\n', '     *  which we can scale as an Exp by calling getExp(a.mantissa, b.mantissa)\n', '     */\n', '    function divExp(Exp memory a, Exp memory b) pure internal returns (MathError, Exp memory) {\n', '        return getExp(a.mantissa, b.mantissa);\n', '    }\n', '\n', '    /**\n', '     * @dev Truncates the given exp to a whole number value.\n', '     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\n', '     */\n', '    function truncate(Exp memory exp) pure internal returns (uint) {\n', "        // Note: We are not using careful math here as we're performing a division that cannot fail\n", '        return exp.mantissa / expScale;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if first Exp is less than second Exp.\n', '     */\n', '    function lessThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa < right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if left Exp <= right Exp.\n', '     */\n', '    function lessThanOrEqualExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa <= right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if left Exp > right Exp.\n', '     */\n', '    function greaterThanExp(Exp memory left, Exp memory right) pure internal returns (bool) {\n', '        return left.mantissa > right.mantissa;\n', '    }\n', '\n', '    /**\n', '     * @dev returns true if Exp is exactly zero\n', '     */\n', '    function isZeroExp(Exp memory value) pure internal returns (bool) {\n', '        return value.mantissa == 0;\n', '    }\n', '\n', '    function safe224(uint n, string memory errorMessage) pure internal returns (uint224) {\n', '        require(n < 2**224, errorMessage);\n', '        return uint224(n);\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) pure internal returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    function add_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: add_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function add_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: add_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function add_(uint a, uint b) pure internal returns (uint) {\n', '        return add_(a, b, "addition overflow");\n', '    }\n', '\n', '    function add_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    function sub_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: sub_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function sub_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: sub_(a.mantissa, b.mantissa)});\n', '    }\n', '\n', '    function sub_(uint a, uint b) pure internal returns (uint) {\n', '        return sub_(a, b, "subtraction underflow");\n', '    }\n', '\n', '    function sub_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function mul_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: mul_(a.mantissa, b.mantissa) / expScale});\n', '    }\n', '\n', '    function mul_(Exp memory a, uint b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: mul_(a.mantissa, b)});\n', '    }\n', '\n', '    function mul_(uint a, Exp memory b) pure internal returns (uint) {\n', '        return mul_(a, b.mantissa) / expScale;\n', '    }\n', '\n', '    function mul_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: mul_(a.mantissa, b.mantissa) / doubleScale});\n', '    }\n', '\n', '    function mul_(Double memory a, uint b) pure internal returns (Double memory) {\n', '        return Double({mantissa: mul_(a.mantissa, b)});\n', '    }\n', '\n', '    function mul_(uint a, Double memory b) pure internal returns (uint) {\n', '        return mul_(a, b.mantissa) / doubleScale;\n', '    }\n', '\n', '    function mul_(uint a, uint b) pure internal returns (uint) {\n', '        return mul_(a, b, "multiplication overflow");\n', '    }\n', '\n', '    function mul_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        uint c = a * b;\n', '        require(c / a == b, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    function div_(Exp memory a, Exp memory b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: div_(mul_(a.mantissa, expScale), b.mantissa)});\n', '    }\n', '\n', '    function div_(Exp memory a, uint b) pure internal returns (Exp memory) {\n', '        return Exp({mantissa: div_(a.mantissa, b)});\n', '    }\n', '\n', '    function div_(uint a, Exp memory b) pure internal returns (uint) {\n', '        return div_(mul_(a, expScale), b.mantissa);\n', '    }\n', '\n', '    function div_(Double memory a, Double memory b) pure internal returns (Double memory) {\n', '        return Double({mantissa: div_(mul_(a.mantissa, doubleScale), b.mantissa)});\n', '    }\n', '\n', '    function div_(Double memory a, uint b) pure internal returns (Double memory) {\n', '        return Double({mantissa: div_(a.mantissa, b)});\n', '    }\n', '\n', '    function div_(uint a, Double memory b) pure internal returns (uint) {\n', '        return div_(mul_(a, doubleScale), b.mantissa);\n', '    }\n', '\n', '    function div_(uint a, uint b) pure internal returns (uint) {\n', '        return div_(a, b, "divide by zero");\n', '    }\n', '\n', '    function div_(uint a, uint b, string memory errorMessage) pure internal returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    function fraction(uint a, uint b) pure internal returns (Double memory) {\n', '        return Double({mantissa: div_(mul_(a, doubleScale), b)});\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', "  * @title DeFiPie's InterestRateModel Interface\n", '  * @author DeFiPie\n', '  */\n', 'abstract contract InterestRateModel {\n', '    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\n', '    bool public constant isInterestRateModel = true;\n', '\n', '    /**\n', '      * @notice Calculates the current borrow interest rate per block\n', '      * @param cash The total amount of cash the market has\n', '      * @param borrows The total amount of borrows the market has outstanding\n', '      * @param reserves The total amount of reserves the market has\n', '      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n', '      */\n', '    function getBorrowRate(uint cash, uint borrows, uint reserves) external view virtual returns (uint);\n', '\n', '    /**\n', '      * @notice Calculates the current supply interest rate per block\n', '      * @param cash The total amount of cash the market has\n', '      * @param borrows The total amount of borrows the market has outstanding\n', '      * @param reserves The total amount of reserves the market has\n', '      * @param reserveFactorMantissa The current reserve factor the market has\n', '      * @return The supply rate per block (as a percentage, and scaled by 1e18)\n', '      */\n', '    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) external view virtual returns (uint);\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./ControllerInterface.sol";\n', 'import "./InterestRateModel.sol";\n', 'import "./ProxyWithRegistry.sol";\n', '\n', 'contract PTokenStorage is ProxyWithRegistryStorage {\n', '    /**\n', '     * @dev Guard variable for re-entrancy checks\n', '     */\n', '    bool internal _notEntered;\n', '\n', '    /**\n', '     * @notice EIP-20 token name for this token\n', '     */\n', '    string public name;\n', '\n', '    /**\n', '     * @notice EIP-20 token symbol for this token\n', '     */\n', '    string public symbol;\n', '\n', '    /**\n', '     * @notice EIP-20 token decimals for this token\n', '     */\n', '    uint8 public decimals;\n', '\n', '    /**\n', '     * @dev Maximum borrow rate that can ever be applied (.0005% / block)\n', '     */\n', '\n', '    uint internal constant borrowRateMaxMantissa = 0.0005e16;\n', '\n', '    /**\n', '     * @dev Maximum fraction of interest that can be set aside for reserves\n', '     */\n', '    uint internal constant reserveFactorMaxMantissa = 1e18;\n', '\n', '    /**\n', '     * @notice Contract which oversees inter-pToken operations\n', '     */\n', '    ControllerInterface public controller;\n', '\n', '    /**\n', '     * @notice Model which tells what the current interest rate should be\n', '     */\n', '    InterestRateModel public interestRateModel;\n', '\n', '    /**\n', '     * @dev Initial exchange rate used when minting the first PTokens (used when totalSupply = 0)\n', '     */\n', '    uint internal initialExchangeRateMantissa;\n', '\n', '    /**\n', '     * @notice Fraction of interest currently set aside for reserves\n', '     */\n', '    uint public reserveFactorMantissa;\n', '\n', '    /**\n', '     * @notice Block number that interest was last accrued at\n', '     */\n', '    uint public accrualBlockNumber;\n', '\n', '    /**\n', '     * @notice Accumulator of the total earned interest rate since the opening of the market\n', '     */\n', '    uint public borrowIndex;\n', '\n', '    /**\n', '     * @notice Total amount of outstanding borrows of the underlying in this market\n', '     */\n', '    uint public totalBorrows;\n', '\n', '    /**\n', '     * @notice Total amount of reserves of the underlying held in this market\n', '     */\n', '    uint public totalReserves;\n', '\n', '    /**\n', '     * @notice Total number of tokens in circulation\n', '     */\n', '    uint public totalSupply;\n', '\n', '    /**\n', '     * @dev Official record of token balances for each account\n', '     */\n', '    mapping (address => uint) internal accountTokens;\n', '\n', '    /**\n', '     * @dev Approved token transfer amounts on behalf of others\n', '     */\n', '    mapping (address => mapping (address => uint)) internal transferAllowances;\n', '\n', '    /**\n', '     * @notice Container for borrow balance information\n', '     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n', '     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n', '     */\n', '    struct BorrowSnapshot {\n', '        uint principal;\n', '        uint interestIndex;\n', '    }\n', '\n', '    /**\n', '     * @dev Mapping of account addresses to outstanding borrow balances\n', '     */\n', '    mapping(address => BorrowSnapshot) internal accountBorrows;\n', '}\n', '\n', 'abstract contract PTokenInterface is PTokenStorage {\n', '    /**\n', '     * @notice Indicator that this is a PToken contract (for inspection)\n', '     */\n', '    bool public constant isPToken = true;\n', '\n', '\n', '    /*** Market Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when interest is accrued\n', '     */\n', '    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows, uint totalReserves);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are minted\n', '     */\n', '    event Mint(address minter, uint mintAmount, uint mintTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when tokens are redeemed\n', '     */\n', '    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\n', '\n', '    /**\n', '     * @notice Event emitted when underlying is borrowed\n', '     */\n', '    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is repaid\n', '     */\n', '    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\n', '\n', '    /**\n', '     * @notice Event emitted when a borrow is liquidated\n', '     */\n', '    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address pTokenCollateral, uint seizeTokens);\n', '\n', '\n', '    /*** Admin Events ***/\n', '\n', '    /**\n', '     * @notice Event emitted when controller is changed\n', '     */\n', '    event NewController(ControllerInterface oldController, ControllerInterface newController);\n', '\n', '    /**\n', '     * @notice Event emitted when interestRateModel is changed\n', '     */\n', '    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserve factor is changed\n', '     */\n', '    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserves are added\n', '     */\n', '    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\n', '\n', '    /**\n', '     * @notice Event emitted when the reserves are reduced\n', '     */\n', '    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\n', '\n', '    /**\n', '     * @notice EIP20 Transfer event\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint amount);\n', '\n', '    /**\n', '     * @notice EIP20 Approval event\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint amount);\n', '\n', '    /*** User Interface ***/\n', '\n', '    function transfer(address dst, uint amount) external virtual returns (bool);\n', '    function transferFrom(address src, address dst, uint amount) external virtual returns (bool);\n', '    function approve(address spender, uint amount) external virtual returns (bool);\n', '    function allowance(address owner, address spender) external view virtual returns (uint);\n', '    function balanceOf(address owner) external view virtual returns (uint);\n', '    function balanceOfUnderlying(address owner) external virtual returns (uint);\n', '    function getAccountSnapshot(address account) external view virtual returns (uint, uint, uint, uint);\n', '    function borrowRatePerBlock() external view virtual returns (uint);\n', '    function supplyRatePerBlock() external view virtual returns (uint);\n', '    function totalBorrowsCurrent() external virtual returns (uint);\n', '    function borrowBalanceCurrent(address account) external virtual returns (uint);\n', '    function borrowBalanceStored(address account) public view virtual returns (uint);\n', '    function exchangeRateCurrent() public virtual returns (uint);\n', '    function exchangeRateStored() public view virtual returns (uint);\n', '    function getCash() external view virtual returns (uint);\n', '    function accrueInterest() public virtual returns (uint);\n', '    function seize(address liquidator, address borrower, uint seizeTokens) external virtual returns (uint);\n', '\n', '    /*** Admin Functions ***/\n', '\n', '    function _setController(ControllerInterface newController) public virtual returns (uint);\n', '    function _setReserveFactor(uint newReserveFactorMantissa) external virtual returns (uint);\n', '    function _reduceReserves(uint reduceAmount) external virtual returns (uint);\n', '    function _setInterestRateModel(InterestRateModel newInterestRateModel) public virtual returns (uint);\n', '}\n', '\n', 'contract PErc20Storage {\n', '    /**\n', '     * @notice Underlying asset for this PToken\n', '     */\n', '    address public underlying;\n', '}\n', '\n', 'abstract contract PErc20Interface is PErc20Storage {\n', '\n', '    /*** User Interface ***/\n', '\n', '    function mint(uint mintAmount) external virtual returns (uint);\n', '    function redeem(uint redeemTokens) external virtual returns (uint);\n', '    function redeemUnderlying(uint redeemAmount) external virtual returns (uint);\n', '    function borrow(uint borrowAmount) external virtual returns (uint);\n', '    function repayBorrow(uint repayAmount) external virtual returns (uint);\n', '    function repayBorrowBehalf(address borrower, uint repayAmount) external virtual returns (uint);\n', '    function liquidateBorrow(address borrower, uint repayAmount, PTokenInterface pTokenCollateral) external virtual returns (uint);\n', '\n', '    /*** Admin Functions ***/\n', '\n', '    function _addReserves(uint addAmount) external virtual returns (uint);\n', '}\n', '\n', 'contract PPIEStorage {\n', '    /// @notice A record of each accounts delegate\n', '    mapping (address => address) public delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH = keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '}\n', '\n', 'abstract contract PPIEInterface is PPIEStorage {\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    function delegate(address delegatee) external virtual;\n', '    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) external virtual;\n', '    function getCurrentVotes(address account) external view virtual returns (uint96);\n', '    function getPriorVotes(address account, uint blockNumber) external view virtual returns (uint96);\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract PriceOracle {\n', '    /// @notice Indicator that this is a PriceOracle contract (for inspection)\n', '    bool public constant isPriceOracle = true;\n', '\n', '    event PriceUpdated(address asset, uint price);\n', '\n', '    /**\n', '      * @notice Get the underlying price of a pToken asset\n', '      * @param pToken The pToken to get the underlying price of\n', '      * @return The underlying asset price mantissa (scaled by 1e18).\n', '      *  Zero means the price is unavailable.\n', '      */\n', '    function getUnderlyingPrice(address pToken) external view virtual returns (uint);\n', '\n', '    function updateUnderlyingPrice(address pToken) external virtual returns (uint);\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./RegistryInterface.sol";\n', '\n', 'contract ProxyWithRegistryStorage {\n', '\n', '    /**\n', '     * @notice Address of the registry contract\n', '     */\n', '    address public registry;\n', '}\n', '\n', 'abstract contract ProxyWithRegistryInterface is ProxyWithRegistryStorage {\n', '    function _setRegistry(address _registry) internal virtual;\n', '    function _pTokenImplementation() internal view virtual returns (address);\n', '}\n', '\n', 'contract ProxyWithRegistry is ProxyWithRegistryInterface {\n', '    /**\n', '     *  Returns actual address of the implementation contract from current registry\n', '     *  @return registry Address of the registry\n', '     */\n', '    function _pTokenImplementation() internal view override returns (address) {\n', '        return RegistryInterface(registry).pTokenImplementation();\n', '    }\n', '\n', '    function _setRegistry(address _registry) internal override {\n', '        registry = _registry;\n', '    }\n', '}\n', '\n', 'contract ImplementationStorage {\n', '\n', '    address public implementation;\n', '\n', '    function _setImplementation(address implementation_) internal {\n', '        implementation = implementation_;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface RegistryInterface {\n', '\n', '    /**\n', '     *  Returns admin address for cToken contracts\n', '     *  @return admin address\n', '     */\n', '    function admin() external view returns (address payable);\n', '\n', '    /**\n', '     *  Returns address of actual PToken implementation contract\n', '     *  @return Address of contract\n', '     */\n', '    function pTokenImplementation() external view returns (address);\n', '\n', '    function addPToken(address underlying, address pToken) external returns(uint);\n', '    function addPETH(address pETH_) external returns(uint);\n', '    function addPPIE(address pPIE_) external returns(uint);\n', '}\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./ErrorReporter.sol";\n', 'import "./ControllerStorage.sol";\n', '/**\n', ' * @title ControllerCore\n', ' * @dev Storage for the controller is at this address, while execution is delegated to the `controllerImplementation`.\n', ' * PTokens should reference this contract as their controller.\n', ' */\n', 'contract Unitroller is UnitrollerAdminStorage, ControllerErrorReporter {\n', '\n', '    /**\n', '      * @notice Emitted when pendingControllerImplementation is changed\n', '      */\n', '    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingControllerImplementation is accepted, which means controller implementation is updated\n', '      */\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is changed\n', '      */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n', '      */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    constructor() {\n', '        // Set admin to caller\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /*** Admin Functions ***/\n', '    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n', '\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n', '        }\n', '\n', '        address oldPendingImplementation = pendingControllerImplementation;\n', '\n', '        pendingControllerImplementation = newPendingImplementation;\n', '\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingControllerImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '    * @notice Accepts new implementation of controller. msg.sender must be pendingImplementation\n', "    * @dev Admin function for new implementation to accept it's role as implementation\n", '    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '    */\n', '    function _acceptImplementation() public returns (uint) {\n', '        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n', '        if (msg.sender != pendingControllerImplementation || pendingControllerImplementation == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldImplementation = controllerImplementation;\n', '        address oldPendingImplementation = pendingControllerImplementation;\n', '\n', '        controllerImplementation = pendingControllerImplementation;\n', '\n', '        pendingControllerImplementation = address(0);\n', '\n', '        emit NewImplementation(oldImplementation, controllerImplementation);\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingControllerImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '\n', '    /**\n', '      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @param newPendingAdmin New pending admin.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n', '        // Check caller = admin\n', '        if (msg.sender != admin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value, if any, for inclusion in log\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n', '      * @dev Admin function for pending admin to accept role and update admin\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _acceptAdmin() public returns (uint) {\n', '        // Check caller is pendingAdmin\n', '        if (msg.sender != pendingAdmin) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates execution to an implementation contract.\n', '     * It returns to the external caller whatever the implementation returns\n', '     * or forwards reverts.\n', '     */\n', '    fallback() payable external {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = controllerImplementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '        let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize()) }\n', '            default { return(free_mem_ptr, returndatasize()) }\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']