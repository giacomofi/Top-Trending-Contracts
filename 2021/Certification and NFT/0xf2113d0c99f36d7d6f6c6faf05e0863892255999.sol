['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import { TokenInterface, AccountInterface } from "../common/interfaces.sol";\n', 'import { CTokenInterface } from "./interfaces.sol";\n', 'import { Helpers } from "./helpers.sol";\n', 'import { Events } from "./events.sol";\n', '\n', 'contract CompoundResolver is Helpers, Events {\n', '    function _borrow(CTokenInterface[] memory ctokenContracts, uint[] memory amts, uint _length) internal {\n', '        for (uint i = 0; i < _length; i++) {\n', '            if (amts[i] > 0) {\n', '                require(ctokenContracts[i].borrow(amts[i]) == 0, "borrow-failed-collateral?");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _paybackOnBehalf(\n', '        address userAddress,\n', '        CTokenInterface[] memory ctokenContracts,\n', '        uint[] memory amts,\n', '        uint _length\n', '    ) internal {\n', '        for (uint i = 0; i < _length; i++) {\n', '            if (amts[i] > 0) {\n', '                if (address(ctokenContracts[i]) == address(ceth)) {\n', '                    ceth.repayBorrowBehalf{value: amts[i]}(userAddress);\n', '                } else {\n', '                    require(ctokenContracts[i].repayBorrowBehalf(userAddress, amts[i]) == 0, "repayOnBehalf-failed");\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function _transferCtokens(\n', '        address userAccount,\n', '        CTokenInterface[] memory ctokenContracts,\n', '        uint[] memory amts,\n', '        uint _length\n', '    ) internal {\n', '        for (uint i = 0; i < _length; i++) {\n', '            if (amts[i] > 0) {\n', '                require(ctokenContracts[i].transferFrom(userAccount, address(this), amts[i]), "ctoken-transfer-failed-allowance?");\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract CompoundImportResolver is CompoundResolver {\n', '\n', '    struct ImportData {\n', '        uint[] supplyAmts;\n', '        uint[] borrowAmts;\n', '        address[] ctokens;\n', '        CTokenInterface[] supplyCtokens;\n', '        CTokenInterface[] borrowCtokens;\n', '    }\n', '\n', '    function importCompound(\n', '        address userAccount,\n', '        string[] calldata supplyIds,\n', '        string[] calldata borrowIds\n', '    ) external payable returns (string memory _eventName, bytes memory _eventParam) {\n', '        require(AccountInterface(address(this)).isAuth(userAccount), "user-account-not-auth");\n', '\n', '        require(supplyIds.length > 0, "0-length-not-allowed");\n', '\n', '        ImportData memory data;\n', '\n', '        uint _length = add(supplyIds.length, borrowIds.length);\n', '        data.ctokens = new address[](_length);\n', '        data.supplyAmts = new uint[](supplyIds.length);\n', '        data.supplyCtokens = new CTokenInterface[](supplyIds.length);\n', '\n', '        if (borrowIds.length > 0) {\n', '            data.borrowAmts = new uint[](borrowIds.length);\n', '            data.borrowCtokens = new CTokenInterface[](borrowIds.length);\n', '\n', '            for (uint i = 0; i < borrowIds.length; i++) {\n', '                (address _token, address _ctoken) = compMapping.getMapping(borrowIds[i]);\n', '                require(_token != address(0) && _ctoken != address(0), "ctoken mapping not found");\n', '\n', '                data.ctokens[i] = _ctoken;\n', '\n', '                data.borrowCtokens[i] = CTokenInterface(_ctoken);\n', '                data.borrowAmts[i] = data.borrowCtokens[i].borrowBalanceCurrent(userAccount);\n', '\n', '                if (_token != ethAddr && data.borrowAmts[i] > 0) {\n', '                    TokenInterface(_token).approve(_ctoken, data.borrowAmts[i]);\n', '                }\n', '            }\n', '        }\n', '\n', '        for (uint i = 0; i < supplyIds.length; i++) {\n', '            (address _token, address _ctoken) = compMapping.getMapping(supplyIds[i]);\n', '            require(_token != address(0) && _ctoken != address(0), "ctoken mapping not found");\n', '\n', '            uint index = add(i, borrowIds.length);\n', '\n', '            data.ctokens[index] = _ctoken;\n', '\n', '            data.supplyCtokens[i] = CTokenInterface(_ctoken);\n', '            data.supplyAmts[i] = data.supplyCtokens[i].balanceOf(userAccount);\n', '        }\n', '\n', '        enterMarkets(data.ctokens);\n', '        _borrow(data.borrowCtokens, data.borrowAmts, borrowIds.length);\n', '        _paybackOnBehalf(userAccount, data.borrowCtokens, data.borrowAmts, borrowIds.length);\n', '        _transferCtokens(userAccount, data.supplyCtokens, data.supplyAmts, supplyIds.length);\n', '\n', '        _eventName = "LogCompoundImport(address,address[],string[],string[],uint256[],uint256[])";\n', '        _eventParam = abi.encode(userAccount, data.ctokens, supplyIds, borrowIds, data.supplyAmts, data.borrowAmts);\n', '    }\n', '}\n', '\n', 'contract ConnectV2CompoundImport is CompoundImportResolver {\n', '    string public constant name = "V2-Compound-Import-v1";\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TokenInterface {\n', '    function approve(address, uint256) external;\n', '    function transfer(address, uint) external;\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint id) external returns (uint num);\n', '    function setUint(uint id, uint val) external;\n', '}\n', '\n', 'interface InstaMapping {\n', '    function cTokenMapping(address) external view returns (address);\n', '    function gemJoinMapping(bytes32) external view returns (address);\n', '}\n', '\n', 'interface AccountInterface {\n', '    function enable(address) external;\n', '    function disable(address) external;\n', '    function isAuth(address) external view returns (bool);\n', '    function cast(\n', '        string[] calldata _targets,\n', '        bytes[] calldata _datas,\n', '        address _origin\n', '    ) external payable returns (bytes32);\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address) external view returns (uint);\n', '    function allowance(address, address) external view returns (uint);\n', '    function approve(address, uint) external;\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '}\n', '\n', 'interface CTokenInterface {\n', '    function mint(uint mintAmount) external returns (uint);\n', '    function redeem(uint redeemTokens) external returns (uint);\n', '    function borrow(uint borrowAmount) external returns (uint);\n', '    function repayBorrow(uint repayAmount) external returns (uint);\n', '    function repayBorrowBehalf(address borrower, uint repayAmount) external returns (uint); // For ERC20\n', '    function liquidateBorrow(address borrower, uint repayAmount, address cTokenCollateral) external returns (uint);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint);\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '    function exchangeRateCurrent() external returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '}\n', '\n', 'interface CETHInterface {\n', '    function mint() external payable;\n', '    function repayBorrow() external payable;\n', '    function repayBorrowBehalf(address borrower) external payable;\n', '    function liquidateBorrow(address borrower, address cTokenCollateral) external payable;\n', '}\n', '\n', 'interface ComptrollerInterface {\n', '    function enterMarkets(address[] calldata cTokens) external returns (uint[] memory);\n', '    function exitMarket(address cTokenAddress) external returns (uint);\n', '    function getAssetsIn(address account) external view returns (address[] memory);\n', '    function getAccountLiquidity(address account) external view returns (uint, uint, uint);\n', '}\n', '\n', 'interface CompoundMappingInterface {\n', '    function cTokenMapping(string calldata tokenId) external view returns (address);\n', '    function getMapping(string calldata tokenId) external view returns (address, address);\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { DSMath } from "../common/math.sol";\n', 'import { Stores } from "../common/stores.sol";\n', 'import { ComptrollerInterface, CETHInterface, CompoundMappingInterface } from "./interfaces.sol";\n', '\n', 'abstract contract Helpers is DSMath, Stores {\n', '    /**\n', '     * @dev CETH Interface\n', '     */\n', '    CETHInterface constant internal ceth = CETHInterface(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\n', '\n', '    /**\n', '     * @dev Compound Comptroller\n', '     */\n', '    ComptrollerInterface constant internal troller = ComptrollerInterface(0x3d9819210A31b4961b30EF54bE2aeD79B9c9Cd3B);\n', '\n', '    /**\n', '     * @dev Compound Mapping\n', '     */\n', '    CompoundMappingInterface internal constant compMapping = CompoundMappingInterface(0xA8F9D4aA7319C54C04404765117ddBf9448E2082); // Update the address\n', '\n', '    /**\n', '     * @dev enter compound market\n', '     */\n', '    function enterMarkets(address[] memory cErc20) internal {\n', '        troller.enterMarkets(cErc20);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Events {\n', '    event LogCompoundImport(\n', '        address indexed user,\n', '        address[] ctokens,\n', '        string[] supplyIds,\n', '        string[] borrowIds,\n', '        uint[] supplyAmts,\n', '        uint[] borrowAmts\n', '    );\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', 'contract DSMath {\n', '  uint constant WAD = 10 ** 18;\n', '  uint constant RAY = 10 ** 27;\n', '\n', '  function add(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(x, y);\n', '  }\n', '\n', '  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n', '    z = SafeMath.sub(x, y);\n', '  }\n', '\n', '  function mul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.mul(x, y);\n', '  }\n', '\n', '  function div(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.div(x, y);\n', '  }\n', '\n', '  function wmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n', '  }\n', '\n', '  function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n', '  }\n', '\n', '  function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n', '  }\n', '\n', '  function rmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n', '  }\n', '\n', '  function toInt(uint x) internal pure returns (int y) {\n', '    y = int(x);\n', '    require(y >= 0, "int-overflow");\n', '  }\n', '\n', '  function toRad(uint wad) internal pure returns (uint rad) {\n', '    rad = mul(wad, 10 ** 27);\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { MemoryInterface, InstaMapping } from "./interfaces.sol";\n', '\n', '\n', 'abstract contract Stores {\n', '\n', '  /**\n', '   * @dev Return ethereum address\n', '   */\n', '  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '  /**\n', '   * @dev Return Wrapped ETH address\n', '   */\n', '  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '  /**\n', '   * @dev Return memory variable address\n', '   */\n', '  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\n', '\n', '  /**\n', '   * @dev Return InstaDApp Mapping Addresses\n', '   */\n', '  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\n', '\n', '  /**\n', '   * @dev Get Uint value from InstaMemory Contract.\n', '   */\n', '  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\n', '  }\n', '\n', '  /**\n', '  * @dev Set Uint value in InstaMemory Contract.\n', '  */\n', '  function setUint(uint setId, uint val) virtual internal {\n', '    if (setId != 0) instaMemory.setUint(setId, val);\n', '  }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']