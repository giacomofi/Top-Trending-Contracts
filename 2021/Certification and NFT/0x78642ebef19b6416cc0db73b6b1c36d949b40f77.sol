['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-12\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/drafts/IERC20Permit.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' */\n', 'interface IERC20Permit {\n', '    /**\n', "     * @dev Sets `value` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '// File: @openzeppelin/contracts/cryptography/ECDSA.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        return recover(hash, v, r, s);\n', '    }\n', '\n', '    /**\n', '     * @dev Overload of {ECDSA-recover-bytes32-bytes-} that receives the `v`,\n', '     * `r` and `s` signature fields separately.\n', '     */\n', '    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Counters.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/drafts/EIP712.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n', ' *\n', ' * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n', ' * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n', ' * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n', ' *\n', ' * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n', ' * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n', ' * ({_hashTypedDataV4}).\n', ' *\n', ' * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n', ' * the chain id to protect against replay attacks on an eventual fork of the chain.\n', ' *\n', ' * NOTE: This contract implements the version of the encoding known as "v4", as implemented by the JSON RPC method\n', ' * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n', ' *\n', ' * _Available since v3.4._\n', ' */\n', 'abstract contract EIP712 {\n', '    /* solhint-disable var-name-mixedcase */\n', '    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n', '    // invalidate the cached domain separator if the chain id changes.\n', '    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n', '    uint256 private immutable _CACHED_CHAIN_ID;\n', '\n', '    bytes32 private immutable _HASHED_NAME;\n', '    bytes32 private immutable _HASHED_VERSION;\n', '    bytes32 private immutable _TYPE_HASH;\n', '    /* solhint-enable var-name-mixedcase */\n', '\n', '    /**\n', '     * @dev Initializes the domain separator and parameter caches.\n', '     *\n', '     * The meaning of `name` and `version` is specified in\n', '     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n', '     *\n', '     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n', '     * - `version`: the current major version of the signing domain.\n', '     *\n', '     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n', '     * contract upgrade].\n', '     */\n', '    constructor(string memory name, string memory version) internal {\n', '        bytes32 hashedName = keccak256(bytes(name));\n', '        bytes32 hashedVersion = keccak256(bytes(version));\n', '        bytes32 typeHash = keccak256("EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)");\n', '        _HASHED_NAME = hashedName;\n', '        _HASHED_VERSION = hashedVersion;\n', '        _CACHED_CHAIN_ID = _getChainId();\n', '        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n', '        _TYPE_HASH = typeHash;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the domain separator for the current chain.\n', '     */\n', '    function _domainSeparatorV4() internal view virtual returns (bytes32) {\n', '        if (_getChainId() == _CACHED_CHAIN_ID) {\n', '            return _CACHED_DOMAIN_SEPARATOR;\n', '        } else {\n', '            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n', '        }\n', '    }\n', '\n', '    function _buildDomainSeparator(bytes32 typeHash, bytes32 name, bytes32 version) private view returns (bytes32) {\n', '        return keccak256(\n', '            abi.encode(\n', '                typeHash,\n', '                name,\n', '                version,\n', '                _getChainId(),\n', '                address(this)\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n', '     * function returns the hash of the fully encoded EIP712 message for this domain.\n', '     *\n', '     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n', '     *\n', '     * ```solidity\n', '     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n', '     *     keccak256("Mail(address to,string contents)"),\n', '     *     mailTo,\n', '     *     keccak256(bytes(mailContents))\n', '     * )));\n', '     * address signer = ECDSA.recover(digest, signature);\n', '     * ```\n', '     */\n', '    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n', '        return keccak256(abi.encodePacked("\\x19\\x01", _domainSeparatorV4(), structHash));\n', '    }\n', '\n', '    function _getChainId() private view returns (uint256 chainId) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/drafts/ERC20Permit.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.5 <0.8.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' *\n', ' * _Available since v3.4._\n', ' */\n', 'abstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n', '    using Counters for Counters.Counter;\n', '\n', '    mapping (address => Counters.Counter) private _nonces;\n', '\n', '    // solhint-disable-next-line var-name-mixedcase\n', '    bytes32 private immutable _PERMIT_TYPEHASH = keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '\n', '    /**\n', '     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `"1"`.\n', '     *\n', "     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n", '     */\n', '    constructor(string memory name) internal EIP712(name, "1") {\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-permit}.\n', '     */\n', '    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual override {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(block.timestamp <= deadline, "ERC20Permit: expired deadline");\n', '\n', '        bytes32 structHash = keccak256(\n', '            abi.encode(\n', '                _PERMIT_TYPEHASH,\n', '                owner,\n', '                spender,\n', '                value,\n', '                _nonces[owner].current(),\n', '                deadline\n', '            )\n', '        );\n', '\n', '        bytes32 hash = _hashTypedDataV4(structHash);\n', '\n', '        address signer = ECDSA.recover(hash, v, r, s);\n', '        require(signer == owner, "ERC20Permit: invalid signature");\n', '\n', '        _nonces[owner].increment();\n', '        _approve(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-nonces}.\n', '     */\n', '    function nonces(address owner) public view override returns (uint256) {\n', '        return _nonces[owner].current();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n', '        return _domainSeparatorV4();\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IBentoBox.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IFlashBorrower {\n', '    /// @notice The flashloan callback. `amount` + `fee` needs to repayed to msg.sender before this call returns.\n', '    /// @param sender The address of the invoker of this flashloan.\n', '    /// @param token The address of the token that is loaned.\n', '    /// @param amount of the `token` that is loaned.\n', '    /// @param fee The fee that needs to be paid on top for this loan. Needs to be the same as `token`.\n', '    /// @param data Additional data that was passed to the flashloan function.\n', '    function onFlashLoan(\n', '        address sender,\n', '        IERC20 token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', 'interface IBentoBoxV1 {\n', '\n', '    function balanceOf(IERC20, address) external view returns (uint256);\n', '\n', '    function deposit(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function flashLoan(\n', '        IFlashBorrower borrower,\n', '        address receiver,\n', '        IERC20 token,\n', '        uint256 amount,\n', '        bytes calldata data\n', '    ) external;\n', '\n', '\n', '    function toAmount(\n', '        IERC20 token,\n', '        uint256 share,\n', '        bool roundUp\n', '    ) external view returns (uint256 amount);\n', '\n', '    function toShare(\n', '        IERC20 token,\n', '        uint256 amount,\n', '        bool roundUp\n', '    ) external view returns (uint256 share);\n', '\n', '    function transfer(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 share\n', '    ) external;\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '}\n', '\n', '// File: contracts/interfaces/ICauldron.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '\n', '    function to128(uint256 a) internal pure returns (uint128 c) {\n', '        require(a <= uint128(-1), "BoringMath: uint128 Overflow");\n', '        c = uint128(a);\n', '    }\n', '\n', '    function to64(uint256 a) internal pure returns (uint64 c) {\n', '        require(a <= uint64(-1), "BoringMath: uint64 Overflow");\n', '        c = uint64(a);\n', '    }\n', '\n', '    function to32(uint256 a) internal pure returns (uint32 c) {\n', '        require(a <= uint32(-1), "BoringMath: uint32 Overflow");\n', '        c = uint32(a);\n', '    }\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe addition and subtraction on uint128.\n', 'library BoringMath128 {\n', '    function add(uint128 a, uint128 b) internal pure returns (uint128 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint128 a, uint128 b) internal pure returns (uint128 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '}\n', '\n', 'struct Rebase {\n', '    uint128 elastic;\n', '    uint128 base;\n', '}\n', '\n', '/// @notice A rebasing library using overflow-/underflow-safe math.\n', 'library RebaseLibrary {\n', '    using BoringMath for uint256;\n', '    using BoringMath128 for uint128;\n', '\n', '    /// @notice Calculates the base value in relationship to `elastic` and `total`.\n', '    function toBase(\n', '        Rebase memory total,\n', '        uint256 elastic,\n', '        bool roundUp\n', '    ) internal pure returns (uint256 base) {\n', '        if (total.elastic == 0) {\n', '            base = elastic;\n', '        } else {\n', '            base = elastic.mul(total.base) / total.elastic;\n', '            if (roundUp && base.mul(total.elastic) / total.base < elastic) {\n', '                base = base.add(1);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Calculates the elastic value in relationship to `base` and `total`.\n', '    function toElastic(\n', '        Rebase memory total,\n', '        uint256 base,\n', '        bool roundUp\n', '    ) internal pure returns (uint256 elastic) {\n', '        if (total.base == 0) {\n', '            elastic = base;\n', '        } else {\n', '            elastic = base.mul(total.elastic) / total.base;\n', '            if (roundUp && elastic.mul(total.base) / total.elastic < base) {\n', '                elastic = elastic.add(1);\n', '            }\n', '        }\n', '    }\n', '\n', '    /// @notice Add `elastic` to `total` and doubles `total.base`.\n', '    /// @return (Rebase) The new total.\n', '    /// @return base in relationship to `elastic`.\n', '    function add(\n', '        Rebase memory total,\n', '        uint256 elastic,\n', '        bool roundUp\n', '    ) internal pure returns (Rebase memory, uint256 base) {\n', '        base = toBase(total, elastic, roundUp);\n', '        total.elastic = total.elastic.add(elastic.to128());\n', '        total.base = total.base.add(base.to128());\n', '        return (total, base);\n', '    }\n', '\n', '    /// @notice Sub `base` from `total` and update `total.elastic`.\n', '    /// @return (Rebase) The new total.\n', '    /// @return elastic in relationship to `base`.\n', '    function sub(\n', '        Rebase memory total,\n', '        uint256 base,\n', '        bool roundUp\n', '    ) internal pure returns (Rebase memory, uint256 elastic) {\n', '        elastic = toElastic(total, base, roundUp);\n', '        total.elastic = total.elastic.sub(elastic.to128());\n', '        total.base = total.base.sub(base.to128());\n', '        return (total, elastic);\n', '    }\n', '\n', '    /// @notice Add `elastic` and `base` to `total`.\n', '    function add(\n', '        Rebase memory total,\n', '        uint256 elastic,\n', '        uint256 base\n', '    ) internal pure returns (Rebase memory) {\n', '        total.elastic = total.elastic.add(elastic.to128());\n', '        total.base = total.base.add(base.to128());\n', '        return total;\n', '    }\n', '\n', '    /// @notice Subtract `elastic` and `base` to `total`.\n', '    function sub(\n', '        Rebase memory total,\n', '        uint256 elastic,\n', '        uint256 base\n', '    ) internal pure returns (Rebase memory) {\n', '        total.elastic = total.elastic.sub(elastic.to128());\n', '        total.base = total.base.sub(base.to128());\n', '        return total;\n', '    }\n', '\n', '    /// @notice Add `elastic` to `total` and update storage.\n', '    /// @return newElastic Returns updated `elastic`.\n', '    function addElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n', '        newElastic = total.elastic = total.elastic.add(elastic.to128());\n', '    }\n', '\n', '    /// @notice Subtract `elastic` from `total` and update storage.\n', '    /// @return newElastic Returns updated `elastic`.\n', '    function subElastic(Rebase storage total, uint256 elastic) internal returns (uint256 newElastic) {\n', '        newElastic = total.elastic = total.elastic.sub(elastic.to128());\n', '    }\n', '}\n', '\n', 'interface ICauldron {\n', '    /// @notice Executes a set of actions and allows composability (contract calls) to other contracts.\n', '    /// @param actions An array with a sequence of actions to execute (see ACTION_ declarations).\n', '    /// @param values A one-to-one mapped array to `actions`. ETH amounts to send along with the actions.\n', '    /// Only applicable to `ACTION_CALL`, `ACTION_BENTO_DEPOSIT`.\n', '    /// @param datas A one-to-one mapped array to `actions`. Contains abi encoded data of function arguments.\n', '    /// @return value1 May contain the first positioned return value of the last executed action (if applicable).\n', '    /// @return value2 May contain the second positioned return value of the last executed action which returns 2 values (if applicable).\n', '    function cook(\n', '        uint8[] calldata actions,\n', '        uint256[] calldata values,\n', '        bytes[] calldata datas\n', '    ) external payable returns (uint256 value1, uint256 value2);\n', '\n', '    /// @notice Repays a loan.\n', '    /// @param to Address of the user this payment should go.\n', '    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.\n', '    /// False if tokens from msg.sender in `bentoBox` should be transferred.\n', '    /// @param part The amount to repay. See `userBorrowPart`.\n', '    /// @return amount The total amount repayed.\n', '    function repay(\n', '        address to,\n', '        bool skim,\n', '        uint256 part\n', '    ) external returns (uint256 amount);\n', '\n', '    /// @notice Sender borrows `amount` and transfers it to `to`.\n', '    /// @return part Total part of the debt held by borrowers.\n', '    /// @return share Total amount in shares borrowed.\n', '    function borrow(address to, uint256 amount) external returns (uint256 part, uint256 share);    \n', '\n', '    /// @notice Removes `share` amount of collateral and transfers it to `to`.\n', '    /// @param to The receiver of the shares.\n', '    /// @param share Amount of shares to remove.\n', '    function removeCollateral(address to, uint256 share) external;\n', '\n', '    /// @notice Adds `collateral` from msg.sender to the account `to`.\n', '    /// @param to The receiver of the tokens.\n', '    /// @param skim True if the amount should be skimmed from the deposit balance of msg.sender.x\n', '    /// False if tokens from msg.sender in `bentoBox` should be transferred.\n', '    /// @param share The amount of shares to add for `to`.\n', '    function addCollateral(\n', '        address to,\n', '        bool skim,\n', '        uint256 share\n', '    ) external;\n', '\n', '    /// @notice Gets the exchange rate. I.e how much collateral to buy 1e18 asset.\n', '    /// This function is supposed to be invoked if needed because Oracle queries can be expensive.\n', '    /// @return updated True if `exchangeRate` was updated.\n', '    /// @return rate The new exchange rate.\n', '    function updateExchangeRate() external returns (bool updated, uint256 rate);     \n', '\n', '    /// @notice Accrues the interest on the borrowed tokens and handles the accumulation of fees.\n', '    function accrue() external;\n', '\n', '\n', '    function userCollateralShare(address) external view returns(uint256);\n', '    function userBorrowPart(address) external view returns(uint256);\n', '\n', '\n', '    function bentoBox() external view returns (IBentoBoxV1);\n', '\n', '    function magicInternetMoney() external view returns (IERC20);\n', '\n', '    function totalBorrow() external view returns (Rebase memory); // elastic = Total token amount to be repayed by borrowers, base = Total parts of the debt held by borrowers\n', '\n', '}\n', '\n', '// File: contracts/interfaces/IYearnVault.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IYearnVault {\n', '    function pricePerShare() external view returns (uint256 price);\n', '    function deposit() external returns (uint256 shares);\n', '    function withdraw(uint256 shares) external returns (uint256 amount);\n', '    function decimals() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/ILendingPoolAddressProvider.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ILendingPoolAddressesProvider {\n', '  function getAddress(bytes32 id) external view returns (address);\n', '\n', '  function getLendingPool() external view returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/ILendingPool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ILendingPool {\n', '\n', '  function flashLoan(\n', '    address receiverAddress,\n', '    address[] calldata assets,\n', '    uint256[] calldata amounts,\n', '    uint256[] calldata modes,\n', '    address onBehalfOf,\n', '    bytes calldata params,\n', '    uint16 referralCode\n', '  ) external;\n', '\n', '}\n', '\n', '// File: contracts/interfaces/ICurvePool.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface ICurvePool {\n', '    \n', '    function get_dy_underlying(int128 i, int128 j, uint256 dx) external view returns (uint256);\n', '\n', '    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy) external returns(uint256);\n', '    \n', '}\n', '\n', '// File: contracts/Patronus.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface ITERC20{\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external;\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '}\n', '\n', 'contract Patronus is ERC20Permit, Ownable, IFlashBorrower {\n', '\n', '    using RebaseLibrary for Rebase;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    uint256 public WITHDRAWAL_FEES = 50; // 0.5%\n', '    uint256 public COLLATERAL_RATIO = 8950; // 89.5%\n', '    uint256 public BASIS_POINT = 10000; \n', '    uint256 public AAVE_FLASHLOAN_FEE = 9; // 0.09%\n', '\n', '    address public asset; // USDC\n', '\n', '    address public collateral; // yvUSDC\n', '\n', '    address public mim;\n', '\n', '    ICauldron public cauldron;\n', '\n', '    ILendingPoolAddressesProvider public addressesProvider;\n', '\n', '    ICurvePool public metapool;\n', '\n', '    IBentoBoxV1 public bentoBox;\n', '\n', '    constructor(\n', '        address asset_, \n', '        address collateral_, \n', '        address cauldron_,\n', '        address addressesProvider_,\n', '        address metapool_\n', '        ) public \n', '            ERC20Permit("pUSDT")\n', '            ERC20("Patronus USDT", "pUSDT")\n', '        {\n', '        asset = asset_;\n', '        collateral = collateral_;\n', '        cauldron = ICauldron(cauldron_);\n', '        addressesProvider = ILendingPoolAddressesProvider(addressesProvider_);\n', '        metapool = ICurvePool(metapool_);\n', '        bentoBox = cauldron.bentoBox();\n', '        mim = address(cauldron.magicInternetMoney());\n', '        IERC20(mim).approve(metapool_, uint256(-1));\n', '        ITERC20(asset).approve(metapool_, uint256(-1));\n', '        IERC20(mim).approve(address(bentoBox), uint256(-1));\n', '        IERC20(collateral).approve(address(bentoBox), uint256(-1));\n', '        ITERC20(asset).approve(collateral, uint256(-1));\n', '    }\n', '\n', '    /// @notice Used to deposit token amount into bentobox\n', '    /// @return share of bentobox in terms of token\n', '    function depositToBentobox(address token, uint256 amount, address to) internal returns (uint256 share) {\n', '\n', '\n', '        (, share) = bentoBox.deposit(IERC20(token), address(this), to, amount, 0);\n', '\n', '    }\n', '\n', '    /// @notice Used to withdraw token amount from bentobox\n', '    /// @return share on bentobox token removed\n', '    function withdrawFromBentobox(address token, uint256 amount) internal returns (uint256 share) {\n', '\n', '        share = bentoBox.toShare(IERC20(token), amount, false);\n', '\n', '        bentoBox.withdraw(IERC20(token), address(this), address(this), amount, share);        \n', '    }\n', '\n', '    /// @notice Add to exisiting position on deposit\n', '    /// @param amount amount of USDC being added after leveraging\n', '    function _addToPosition(uint256 amount) internal {\n', '\n', '\n', '        uint256 yShare = IYearnVault(collateral).deposit();\n', '        // require(false, "!test");\n', '\n', '\n', '        depositToBentobox(collateral, yShare, address(cauldron));\n', '\n', '        cauldron.addCollateral(address(this), true, yShare);\n', '\n', '        uint256 borrowAmount = amount.mul(1e12).mul(COLLATERAL_RATIO).div(BASIS_POINT);\n', '\n', '        (, uint256 share) = cauldron.borrow(address(this), borrowAmount);\n', '\n', '        // withdrawFromBentobox(mim, borrowAmount);\n', '        bentoBox.withdraw(IERC20(mim), address(this), address(this), borrowAmount, share);\n', '\n', '    }\n', '\n', '\n', '    function getSharesToMint(uint256 diff) internal view returns (uint256) {\n', '\n', '        if(totalSupply() == 0){\n', '            return diff;\n', '        }\n', '\n', '        return diff.mul(totalSupply()).div(totalBalance().sub(diff));\n', '    }\n', '\n', '    /// @notice Flashloan callback used to deposit and create leveraged position\n', '    function executeOperation(\n', '        address[] calldata assets,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata premiums,\n', '        address initiator,\n', '        bytes calldata params\n', '    )\n', '        external\n', '        returns (bool)\n', '    {\n', '\n', '        require(initiator == address(this), "!invalid");\n', '\n', '        (address user, uint256 amount) = abi.decode(params, (address, uint256));\n', '\n', '\n', '        cauldron.updateExchangeRate();\n', '\n', '        uint256 preBalance = totalBalance();\n', '\n', '        require(IERC20(asset).balanceOf(address(this)) >= amounts[0], "Invalid flashloan");\n', '\n', '        _addToPosition(amounts[0]);\n', '\n', '\n', '\n', '        uint256 amountOwing = amounts[0].add(premiums[0]);\n', '\n', '        // swap MIM for USDC in curve metapool\n', '        {\n', '            uint256 min_dy = amountOwing.sub(amount);\n', '\n', '            uint256 dy_get = metapool.get_dy_underlying(0, 3, IERC20(mim).balanceOf(address(this)));\n', '\n', '            require(dy_get >= min_dy, "Not enough amount being received from curve");\n', '\n', '            uint256 amountReceived = metapool.exchange_underlying(0, 3, IERC20(mim).balanceOf(address(this)), min_dy);\n', '\n', '            if(amountOwing > amountReceived){\n', '                IERC20(asset).safeTransferFrom(user, address(this), amountOwing.sub(amountReceived));\n', '            }\n', '        }\n', '\n', '        ITERC20(asset).approve(addressesProvider.getLendingPool(), amountOwing);\n', '\n', '        // calculate share of user\n', '        uint256 postBalance = totalBalance();\n', '        uint256 diff = postBalance.sub(preBalance);\n', '        uint256 shareAmount = getSharesToMint(diff);\n', '\n', '        // mint share token\n', '        _mint(user, shareAmount);\n', '        \n', '        return true;\n', '    }\n', '\n', '\n', '    /// @notice price per share in terms of USDC\n', '    /// @return sharePrice amount of USDC for per unit share\n', '    function pricePerShare() public view returns(uint256 sharePrice)  {\n', '\n', '        if(totalSupply() == 0){\n', '            return 0;\n', '        }\n', '\n', '        sharePrice = totalBalance().mul(1e18).div(totalSupply());\n', '\n', '    }\n', '\n', '\n', '    /// @notice totalBalance in terms of USDC\n', '    /// @return netBalance amount of USDC deposited in MIM\n', '    function totalBalance() public view returns(uint256) {\n', '\n', '        if(cauldron.userCollateralShare(address(this)) == 0){\n', '            return 0;\n', '        }\n', '\n', '        uint256 collateralValue = cauldron.userCollateralShare(address(this)).mul(IYearnVault(collateral).pricePerShare());\n', '        \n', '        Rebase memory totalBorrow = cauldron.totalBorrow();\n', '        uint256 debtValue = totalBorrow.toElastic(cauldron.userBorrowPart(address(this)), true);\n', '        \n', '        // scale USDT or USDC collateral to 18 decimals\n', '\n', '        collateralValue = collateralValue.mul(1e12).div(10**IYearnVault(collateral).decimals());\n', '\n', '        return collateralValue.sub(debtValue);\n', '    }\n', '\n', '    /// @notice Deposit USDC to create a leveraged position on MIM\n', '    /// @param amount of USDC to use of user to create position\n', '    function deposit(uint256 amount, uint256 leveragedAmount) external {\n', '\n', '        address receiverAddress = address(this);\n', '\n', '        address[] memory assets = new address[](1);\n', '        assets[0] = asset; // USDC\n', '\n', '\n', '        uint256[] memory amounts = new uint256[](1);\n', '        amounts[0] = leveragedAmount;\n', '        // 0 = no debt, 1 = stable, 2 = variable\n', '        uint256[] memory modes = new uint256[](1);\n', '        modes[0] = 0;\n', '\n', '        address onBehalfOf = address(this);\n', '        bytes memory params = abi.encode(address(msg.sender), amount);\n', '        uint16 referralCode = 0;\n', '\n', '        ILendingPool(addressesProvider.getLendingPool()).flashLoan(\n', '            receiverAddress,\n', '            assets,\n', '            amounts,\n', '            modes,\n', '            onBehalfOf,\n', '            params,\n', '            referralCode\n', '        );\n', '\n', '    }\n', '\n', '\n', '    /// @notice Amount that can be used to leverage at full potential considering swap from curve pool\n', '    /// @param amount of max USDC which can be used\n', '    function flashloanAmount(uint256 amount) public view returns (uint256 netAmount) {\n', '\n', '        if(amount == 0){\n', '            return 0;\n', '        }\n', '        netAmount = amount.mul(COLLATERAL_RATIO).div(BASIS_POINT.sub(COLLATERAL_RATIO));\n', '\n', '\n', '        while(true){\n', '\n', '            uint256 amountToSwap = netAmount.mul(1e12).mul(COLLATERAL_RATIO).div(BASIS_POINT);          \n', '            uint256 amountBack = metapool.get_dy_underlying(0, 3, amountToSwap);\n', '            uint256 amountRequired = netAmount.add(netAmount.mul(AAVE_FLASHLOAN_FEE).div(BASIS_POINT)).sub(amount);\n', '            \n', '            if(amountBack < amountRequired){\n', '                netAmount = netAmount.sub(amountRequired.sub(amountBack));\n', '            }\n', '\n', '            if(amountBack >= amountRequired){\n', '                break;\n', '            }\n', '\n', '        }\n', '    }\n', '\n', '    /// @notice Withdraw USDC to withdraw from leveraged position on MIM\n', '    /// @param amount of shares to use to withdraw underlying USDC\n', '    function withdraw(uint256 amount) external {\n', '\n', '        require(balanceOf(msg.sender) >= amount, "!not enough shares");\n', '        cauldron.accrue();\n', '        uint256 borrowPart = cauldron.userBorrowPart(address(this)).mul(amount).div(totalSupply());\n', '\n', '        (, uint256 repayAmount) = cauldron.totalBorrow().sub(borrowPart, true);\n', '        \n', '        uint256 share = bentoBox.toShare(IERC20(mim), repayAmount, true);\n', '        \n', '        repayAmount = bentoBox.toAmount(IERC20(mim), share, true);\n', '\n', '        bytes memory params = abi.encode(msg.sender, amount, borrowPart, share);\n', '        \n', '        bentoBox.flashLoan(IFlashBorrower(address(this)), address(this), IERC20(mim), repayAmount, params);\n', '\n', '    }\n', '\n', '\n', '    function onFlashLoan(\n', '        address sender,\n', '        IERC20 token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external override {\n', '\n', '        require(address(this) == sender, "!invalid flash loan");\n', '\n', '        (address user, uint256 shareAmount, uint256 borrowPart, uint256 share) = abi.decode(data, (address, uint256, uint256, uint256));\n', '\n', '        bentoBox.deposit(IERC20(mim), address(this), address(bentoBox), amount, share);\n', '\n', '        cauldron.repay(address(this), true, borrowPart);\n', '\n', '        uint256 collateralShare = cauldron.userCollateralShare(address(this)).mul(shareAmount).div(totalSupply());\n', '\n', '        cauldron.removeCollateral(address(this), collateralShare);\n', '\n', '        bentoBox.withdraw(IERC20(collateral), address(this), address(this), 0, collateralShare);\n', '\n', '        IYearnVault(collateral).withdraw(IERC20(collateral).balanceOf(address(this)));\n', '\n', '        metapool.exchange_underlying(3, 0, IERC20(asset).balanceOf(address(this)), amount.add(fee));\n', '\n', '        uint256 extraMIM = IERC20(mim).balanceOf(address(this)).sub(amount.add(fee));\n', '\n', '        uint256 withdrawalAmount = metapool.exchange_underlying(0, 3, extraMIM, 0);\n', '\n', '        uint256 adminFees = withdrawalAmount.mul(WITHDRAWAL_FEES).div(BASIS_POINT);\n', '\n', '        transferFees(adminFees);\n', '\n', '        IERC20(asset).safeTransfer(user, withdrawalAmount.sub(adminFees));\n', '        IERC20(mim).safeTransfer(address(bentoBox), amount.add(fee));\n', '        _burn(user, shareAmount);\n', '    }\n', '\n', '\n', '\n', '    function transferFees(uint256 amount) internal {\n', '        IERC20(asset).safeTransfer(owner(), amount);\n', '    }\n', '\n', '    function withdrawERC20(address token) external onlyOwner {\n', '        IERC20(token).safeTransfer(msg.sender, IERC20(token).balanceOf(address(this)));\n', '    }\n', '\n', '    function withdrawEth() external onlyOwner {\n', '        payable(msg.sender).transfer(address(this).balance);\n', '    }\n', '\n', '}']