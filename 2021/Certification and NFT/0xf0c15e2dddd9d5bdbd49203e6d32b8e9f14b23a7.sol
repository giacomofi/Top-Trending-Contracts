['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-11\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract Context {\n', '    constructor () internal { }\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; \n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '    Roles.Role private _whitelistAdmins;\n', '    constructor () internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(_msgSender()), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', 'contract WhitelistedRole is Context, WhitelistAdminRole {\n', '    using Roles for Roles.Role;\n', '    event WhitelistedAdded(address indexed account);\n', '    event WhitelistedRemoved(address indexed account);\n', '    Roles.Role private _whitelisteds;\n', '    modifier onlyWhitelisted() {\n', '        require(isWhitelisted(_msgSender()), "WhitelistedRole: caller does not have the Whitelisted role");\n', '        _;\n', '    }\n', '    function isWhitelisted(address account) public view returns (bool) {\n', '        return _whitelisteds.has(account);\n', '    }\n', '    function addWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _addWhitelisted(account);\n', '    }\n', '    function removeWhitelisted(address account) public onlyWhitelistAdmin {\n', '        _removeWhitelisted(account);\n', '    }\n', '    function renounceWhitelisted() public {\n', '        _removeWhitelisted(_msgSender());\n', '    }\n', '    function _addWhitelisted(address account) internal {\n', '        _whitelisteds.add(account);\n', '        emit WhitelistedAdded(account);\n', '    }\n', '    function _removeWhitelisted(address account) internal {\n', '        _whitelisteds.remove(account);\n', '        emit WhitelistedRemoved(account);\n', '    }\n', '}\n', '\n', 'contract AccessWhitelist is WhitelistedRole {\n', '    constructor() public {\n', '        super.addWhitelisted(msg.sender);\n', '    }\n', '}\n', '\n', 'contract AccessControls {\n', '    AccessWhitelist public accessWhitelist;\n', '    constructor(AccessWhitelist _accessWhitelist) internal {\n', '        accessWhitelist = _accessWhitelist;\n', '    }\n', '    modifier onlyWhitelisted() {\n', '        require(accessWhitelist.isWhitelisted(msg.sender), "Caller not whitelisted");\n', '        _;\n', '    }\n', '    modifier onlyWhitelistAdmin() {\n', '        require(accessWhitelist.isWhitelistAdmin(msg.sender), "Caller not whitelist admin");\n', '        _;\n', '    }\n', '    function updateAccessWhitelist(AccessWhitelist _accessWhitelist) external onlyWhitelistAdmin {\n', '        accessWhitelist = _accessWhitelist;\n', '    }\n', '}\n', '\n', 'contract SuperTokenMultiSender is AccessControls {\n', '    using SafeMath for uint256;\n', '    event Transfer(address indexed _token, address indexed _caller, uint256 _recipientCount, uint256 _totalTokensSent);\n', '    event PricePerTxChanged(address indexed _caller, uint256 _oldPrice, uint256 _newPrice);\n', '    event ReferralPerTxChanged(address indexed _caller, uint256 _oldPrice, uint256 _newPrice);\n', '    event EtherMoved(address indexed _caller, address indexed _to, uint256 _amount);\n', '    event TokensMoved(address indexed _caller, address indexed _to, uint256 _amount);\n', '    event CreditsAdded(address indexed _caller, address indexed _to, uint256 _amount);\n', '    event CreditsRemoved(address indexed _caller, address indexed _to, uint256 _amount);\n', '    mapping(address => uint256) public credits;\n', '    uint256 public pricePerTx = 0.02 ether;\n', '    uint256 public referralPerTx = 0.01 ether;\n', '    address payable public feeSplitter;\n', '    constructor(AccessWhitelist _accessWhitelist, address payable _feeSplitter)\n', '        AccessControls(_accessWhitelist) public {\n', '        feeSplitter = _feeSplitter;\n', '    }\n', '    function () external payable {}\n', '    function transfer(address _token, address payable _referral, address[] calldata _addresses, uint256[] calldata _values) payable external returns (bool) {\n', '        require(_addresses.length == _values.length, "Address array and values array must be same length");\n', '        require(credits[msg.sender] > 0 || msg.value >= pricePerTx, "Must have credit or min value");\n', '        uint256 totalTokensSent;\n', '        for (uint i = 0; i < _addresses.length; i += 1) {\n', '            require(_addresses[i] != address(0), "Address invalid");\n', '            require(_values[i] > 0, "Value invalid");\n', '            IERC20(_token).transferFrom(msg.sender, _addresses[i], _values[i]);\n', '            totalTokensSent = totalTokensSent.add(_values[i]);\n', '        }\n', '        if (msg.value == 0 && credits[msg.sender] > 0) {\n', '            credits[msg.sender] = credits[msg.sender].sub(1);\n', '        } else {\n', '            uint256 fee = msg.value;\n', '            if (_referral != address(0)) {\n', '                fee = fee.sub(referralPerTx);\n', '                (bool feeSplitterSuccess,) = _referral.call.value(referralPerTx)("");\n', '                require(feeSplitterSuccess, "Failed to transfer the referral");\n', '            }\n', '            (bool feeSplitterSuccess,) = address(feeSplitter).call.value(fee)("");\n', '            require(feeSplitterSuccess, "Failed to transfer to the fee splitter");\n', '        }\n', '        emit Transfer(_token, msg.sender, _addresses.length, totalTokensSent);\n', '        return true;\n', '    }\n', '    function moveEther(address payable _account) onlyWhitelistAdmin external returns (bool)  {\n', '        uint256 contractBalance = address(this).balance;\n', '        _account.transfer(contractBalance);\n', '        emit EtherMoved(msg.sender, _account, contractBalance);\n', '        return true;\n', '    }\n', '    function moveTokens(address _token, address _account) external onlyWhitelistAdmin returns (bool) {\n', '        uint256 contractTokenBalance = IERC20(_token).balanceOf(address(this));\n', '        IERC20(_token).transfer(_account, contractTokenBalance);\n', '        emit TokensMoved(msg.sender, _account, contractTokenBalance);\n', '        return true;\n', '    }\n', '    function addCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\n', '        credits[_to] = credits[_to].add(_amount);\n', '        emit CreditsAdded(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    function reduceCredit(address _to, uint256 _amount) external onlyWhitelisted returns (bool) {\n', '        credits[_to] = credits[_to].sub(_amount);\n', '        emit CreditsRemoved(msg.sender, _to, _amount);\n', '        return true;\n', '    }\n', '    function setPricePerTx(uint256 _pricePerTx) external onlyWhitelisted returns (bool) {\n', '        uint256 oldPrice = pricePerTx;\n', '        pricePerTx = _pricePerTx;\n', '        emit PricePerTxChanged(msg.sender, oldPrice, pricePerTx);\n', '        return true;\n', '    }\n', '    function setReferralPerTx(uint256 _referralPerTx) external onlyWhitelisted returns (bool) {\n', '        uint256 oldPrice = referralPerTx;\n', '        referralPerTx = _referralPerTx;\n', '        emit ReferralPerTxChanged(msg.sender, oldPrice, referralPerTx);\n', '        return true;\n', '    }\n', '    function creditsOfOwner(address _owner) external view returns (uint256) {\n', '        return credits[_owner];\n', '    }\n', '    function updateFeeSplitter(address payable _feeSplitter) external onlyWhitelistAdmin {\n', '        feeSplitter = _feeSplitter;\n', '    }\n', '}']