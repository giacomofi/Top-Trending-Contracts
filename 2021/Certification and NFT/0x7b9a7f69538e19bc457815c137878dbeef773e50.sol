['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' *\n', '*/\n', ' \n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', ' \n', '  function ceil(uint a, uint m) internal pure returns (uint r) {\n', '    return (a + m - 1) / m * m;\n', '  }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract ERC20Interface {\n', '    function totalSupply() public virtual view returns (uint);\n', '    function balanceOf(address tokenOwner) public virtual view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) public virtual view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) public virtual returns (bool success);\n', '    function approve(address spender, uint256 tokens) public virtual returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) public virtual returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', "// 'CHIHUAHUA' token AND staking contract\n", '\n', '// Symbol      : CHUEY\n', '// Name        : CHIHUAHUA Finance\n', '// Total supply: 1,000,000 (1 million)\n', '// Min supply  : 100k \n', '// Decimals    : 18\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', 'contract CHIHUAHUA is ERC20Interface, Owned {\n', '    using SafeMath for uint256;\n', '   \n', '    string public symbol = "CHUEY";\n', '    string public  name = "CHIHUAHUA Finance";\n', '    uint256 public decimals = 18;\n', '    \n', '    uint256 _totalSupply = 1e6 * 10 ** (decimals); // 1,000,000\n', '    \n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping(address => uint256)) allowed;\n', '   \n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor (address owner) public {\n', '        \n', '        owner = 0x712478a06292F3685C727Cb4b025deA2aB70c388;\n', '        \n', '        balances[address(owner)] =  1000000 * 10 ** (18); // 1,000,000\n', '        emit Transfer(address(0), address(owner), 1000000 * 10 ** (18));\n', '    }\n', '\n', '   \n', "    /** ERC20Interface function's implementation **/\n", '   \n', '    function totalSupply() public override view returns (uint256){\n', '       return _totalSupply;\n', '    }\n', '   \n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address tokenOwner) public override view returns (uint256 balance) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    // ------------------------------------------------------------------------\n', '    function approve(address spender, uint256 tokens) public override returns (bool success){\n', '        allowed[msg.sender][spender] = tokens;\n', '        emit Approval(msg.sender,spender,tokens);\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address tokenOwner, address spender) public override view returns (uint256 remaining) {\n', '        return allowed[tokenOwner][spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address to, uint256 tokens) public override returns (bool success) {\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[msg.sender] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[msg.sender] = balances[msg.sender].sub(tokens);\n', '       \n', '        uint256 deduction = deductionsToApply(tokens);\n', '        applyDeductions(deduction);\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '        emit Transfer(msg.sender, to, tokens.sub(deduction));\n', '        return true;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    //\n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address from, address to, uint256 tokens) public override returns (bool success){\n', '        require(tokens <= allowed[from][msg.sender]); //check allowance\n', '        require(balances[from] >= tokens);\n', '        balances[from] = balances[from].sub(tokens);\n', '        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n', '      \n', '        uint256 deduction = deductionsToApply(tokens);\n', '        applyDeductions(deduction);\n', '       \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '        emit Transfer(from, to, tokens.sub(tokens));\n', '        return true;\n', '    }\n', '    \n', '    function _transfer(address to, uint256 tokens, bool rewards) internal returns(bool){\n', '        // prevent transfer to 0x0, use burn instead\n', '        require(address(to) != address(0));\n', '        require(balances[address(this)] >= tokens );\n', '        require(balances[to] + tokens >= balances[to]);\n', '        \n', '        balances[address(this)] = balances[address(this)].sub(tokens);\n', '        \n', '        uint256 deduction = 0;\n', '        \n', '        if(!rewards){\n', '            deduction = deductionsToApply(tokens);\n', '            applyDeductions(deduction);\n', '        }\n', '        \n', '        balances[to] = balances[to].add(tokens.sub(deduction));\n', '            \n', '        emit Transfer(address(this),to,tokens.sub(deduction));\n', '        \n', '        return true;\n', '    }\n', '\n', '    function deductionsToApply(uint256 tokens) private view returns(uint256){\n', '        uint256 deduction = 0;\n', '        uint256 minSupply = 100000 * 10 ** (18);\n', '        \n', '        if(_totalSupply > minSupply){\n', '        \n', '            deduction = onePercent(tokens).mul(5); // 5% transaction cost\n', '        \n', '            if(_totalSupply.sub(deduction) < minSupply)\n', '                deduction = _totalSupply.sub(minSupply);\n', '        }\n', '        \n', '        return deduction;\n', '    }\n', '    \n', '    function applyDeductions(uint256 deduction) private{\n', '        if(stakedCoins == 0){\n', '            burnTokens(deduction);\n', '        }\n', '        else{\n', '            burnTokens(deduction.div(2));\n', '            disburse(deduction.div(2));\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Burn the ``value` amount of tokens from the `account`\n', '    // ------------------------------------------------------------------------\n', '    function burnTokens(uint256 value) internal{\n', '        require(_totalSupply >= value); // burn only unsold tokens\n', '        _totalSupply = _totalSupply.sub(value);\n', '        emit Transfer(msg.sender, address(0), value);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Calculates onePercent of the uint256 amount sent\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) internal pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    \n', '    /********************************STAKING CONTRACT**********************************/\n', '    \n', '    uint256 deployTime;\n', '    uint256 private totalDividentPoints;\n', '    uint256 private unclaimedDividendPoints;\n', '    uint256 pointMultiplier = 1000000000000000000;\n', '    uint256 public stakedCoins;\n', '    \n', '    uint256 public totalStakes;\n', '    uint256 public totalRewardsClaimed;\n', '    \n', '    bool public stakingOpen;\n', '    \n', '    struct  Account {\n', '        uint256 balance;\n', '        uint256 lastDividentPoints;\n', '        uint256 timeInvest;\n', '        uint256 lastClaimed;\n', '        uint256 rewardsClaimed;\n', '        uint256 pending;\n', '    }\n', '\n', '    mapping(address => Account) accounts;\n', '    \n', '    function openStaking() external onlyOwner{\n', '        require(!stakingOpen, "staking already open");\n', '        stakingOpen = true;\n', '    }\n', '    \n', '    function STAKE(uint256 _tokens) external returns(bool){\n', '        require(stakingOpen, "staking is close");\n', '        // gets CHIHUAHUA tokens from user to contract address\n', '        require(transfer(address(this), _tokens), "In sufficient tokens in user wallet");\n', '        \n', '        // require(_tokens >= 100 * 10 ** (18), "Minimum stake allowed is 100 CHUEY");\n', '        \n', '        uint256 owing = dividendsOwing(msg.sender);\n', '        \n', '        if(owing > 0) // early stakes\n', '            accounts[msg.sender].pending = owing;\n', '            \n', '        uint256 deduction = deductionsToApply(_tokens);\n', '        \n', '        stakedCoins = stakedCoins.add(_tokens.sub(deduction));\n', '        accounts[msg.sender].balance = accounts[msg.sender].balance.add(_tokens.sub(deduction));\n', '        accounts[msg.sender].lastDividentPoints = totalDividentPoints;\n', '        accounts[msg.sender].timeInvest = now;\n', '        accounts[msg.sender].lastClaimed = now;\n', '        \n', '        totalStakes = totalStakes.add(_tokens.sub(deduction));\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function pendingReward(address _user) external view returns(uint256){\n', '        uint256 owing = dividendsOwing(_user);\n', '        return owing;\n', '    }\n', '    \n', '    function dividendsOwing(address investor) internal view returns (uint256){\n', '        uint256 newDividendPoints = totalDividentPoints.sub(accounts[investor].lastDividentPoints);\n', '        return (((accounts[investor].balance).mul(newDividendPoints)).div(pointMultiplier)).add(accounts[investor].pending);\n', '    }\n', '   \n', '    function updateDividend(address investor) internal returns(uint256){\n', '        uint256 owing = dividendsOwing(investor);\n', '        if (owing > 0){\n', '            unclaimedDividendPoints = unclaimedDividendPoints.sub(owing);\n', '            accounts[investor].lastDividentPoints = totalDividentPoints;\n', '        }\n', '        return owing;\n', '    }\n', '   \n', '    function activeStake(address _user) external view returns (uint256){\n', '        return accounts[_user].balance;\n', '    }\n', '   \n', '    function UNSTAKE() external returns (bool){\n', '        require(accounts[msg.sender].balance > 0);\n', '        \n', '        uint256 owing = updateDividend(msg.sender);\n', '        if(owing > 0) // unclaimed reward\n', '            accounts[msg.sender].pending = owing;\n', '        \n', '        stakedCoins = stakedCoins.sub(accounts[msg.sender].balance);\n', '\n', '        require(_transfer(msg.sender, accounts[msg.sender].balance, false));\n', '       \n', '        accounts[msg.sender].balance = 0;\n', '        return true;\n', '    }\n', '   \n', '    function disburse(uint256 amount) internal{\n', '        balances[address(this)] = balances[address(this)].add(amount);\n', '        \n', '        uint256 unnormalized = amount.mul(pointMultiplier);\n', '        totalDividentPoints = totalDividentPoints.add(unnormalized.div(stakedCoins));\n', '        unclaimedDividendPoints = unclaimedDividendPoints.add(amount);\n', '    }\n', '   \n', '    function claimReward() external returns(bool){\n', '        uint256 owing = updateDividend(msg.sender);\n', '        \n', '        require(owing > 0);\n', '\n', '        require(_transfer(msg.sender, owing, true));\n', '        \n', '        accounts[msg.sender].rewardsClaimed = accounts[msg.sender].rewardsClaimed.add(owing);\n', '       \n', '        totalRewardsClaimed = totalRewardsClaimed.add(owing);\n', '        return true;\n', '    }\n', '    \n', '    function rewardsClaimed(address _user) external view returns(uint256 rewardClaimed){\n', '        return accounts[_user].rewardsClaimed;\n', '    }\n', '}']