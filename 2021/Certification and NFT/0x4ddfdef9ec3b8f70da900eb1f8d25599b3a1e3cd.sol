['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/Roles.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping(address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts/PauserRole.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', 'contract PauserRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    function initPauserRole() internal {\n', '        _addPauser(_msgSender());\n', '    }\n', '\n', '    constructor() {\n', '        _addPauser(_msgSender());\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(\n', '            isPauser(_msgSender()),\n', '            "PauserRole: caller does not have the Pauser role"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(_msgSender());\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/Pausable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', 'contract Pausable is Context, PauserRole {\n', '    event Paused(address account);\n', '    event Unpaused(address account);\n', '    bool private _paused;\n', '\n', '    constructor() {\n', '        _paused = false;\n', '    }\n', '\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/WhitelistAdminRole.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title WhitelistAdminRole\n', ' * @dev WhitelistAdmins are responsible for assigning and removing Whitelisted accounts.\n', ' */\n', 'contract WhitelistAdminRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '    function initWhiteListAdmin() internal {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    constructor() {\n', '        _addWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    modifier onlyWhitelistAdmin() {\n', '        require(\n', '            isWhitelistAdmin(_msgSender()),\n', '            "WhitelistAdminRole: caller does not have the WhitelistAdmin role"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(_msgSender());\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    }\n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath#mul: OVERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath#div: DIVISION_BY_ZERO");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath#sub: UNDERFLOW");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath#add: OVERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath#mod: DIVISION_BY_ZERO");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', '                "Address: low-level static call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).sub(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Wrap.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', 'contract Wrap {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _tokenAddress) {\n', '        token = IERC20(_tokenAddress);\n', '    }\n', '\n', '    uint256 private _totalSupply;\n', '    \n', '    mapping(address => uint256) private _balances;\n', '    mapping(address => uint256[]) public fixedBalances;\n', '    mapping(address => uint256[]) public releaseTime;\n', '    mapping(address => uint256) public fixedStakeLength;\n', '    \n', '    event WithdrawnFixedStake(address indexed user, uint256 amount);\n', '\n', '    function totalSupply() external view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function stake(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '    \n', '    function fixedStake (uint256 _day, uint256 _amount) public virtual {\n', '        fixedBalances[msg.sender].push(_amount);\n', '        uint256 time = block.timestamp + _day * 1 days;\n', '        releaseTime[msg.sender].push(time);\n', '        fixedStakeLength[msg.sender] += 1;\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public virtual {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        IERC20(token).safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '    function _rescueScore(address account) internal {\n', '        uint256 amount = _balances[account];\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[account] = _balances[account].sub(amount);\n', '        IERC20(token).safeTransfer(account, amount);\n', '    }\n', '    \n', '     function withdrawFixedStake(uint256 _index) public virtual {\n', '        require(fixedBalances[msg.sender].length >= _index, "No Record Found");\n', '        require(fixedBalances[msg.sender][_index] != 0, "No Balance To Break");\n', '        require(releaseTime[msg.sender][_index] <= block.timestamp, "Time isn\'t up");\n', '        \n', '        _totalSupply = _totalSupply.sub(fixedBalances[msg.sender][_index]);\n', '        IERC20(token).safeTransfer(msg.sender, fixedBalances[msg.sender][_index]);\n', '        emit WithdrawnFixedStake(msg.sender, fixedBalances[msg.sender][_index]);\n', '        removeBalance(_index);\n', '        removeReleaseTime(_index);\n', '        fixedStakeLength[msg.sender] -= 1;\n', '        \n', '    }\n', '    function removeBalance(uint index) internal {\n', '        // Move the last element into the place to delete\n', '        fixedBalances[msg.sender][index] = fixedBalances[msg.sender][fixedBalances[msg.sender].length - 1];\n', '        // Remove the last element\n', '        fixedBalances[msg.sender].pop();\n', '    }\n', '    \n', '    function removeReleaseTime(uint index) internal {\n', '        // Move the last element into the place to delete\n', '        releaseTime[msg.sender][index] = releaseTime[msg.sender][releaseTime[msg.sender].length - 1];\n', '        // Remove the last element\n', '        releaseTime[msg.sender].pop();\n', '    }\n', '}\n', '\n', '// File: contracts/MyIERC721.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface MyIERC721 {\n', '    function mint(address _to) external;\n', '}\n', '\n', '// File: contracts/ERC721TokenReceiver.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev ERC-721 interface for accepting safe transfers.\n', ' * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.\n', ' */\n', 'interface ERC721TokenReceiver {\n', '    /**\n', '     * @dev Handle the receipt of a NFT. The ERC721 smart contract calls this function on the\n', '     * recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return\n', '     * of other than the magic value MUST result in the transaction being reverted.\n', '     * Returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))` unless throwing.\n', '     * @notice The contract address is always the message sender. A wallet/broker/auction application\n', '     * MUST implement the wallet interface if it will accept safe transfers.\n', '     * @param _operator The address which called `safeTransferFrom` function.\n', '     * @param _from The address which previously owned the token.\n', '     * @param _tokenId The NFT identifier which is being transferred.\n', '     * @param _data Additional data with no specified format.\n', '     * @return Returns `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`.\n', '     */\n', '    function onERC721Received(\n', '        address _operator,\n', '        address _from,\n', '        uint256 _tokenId,\n', '        bytes calldata _data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '// File: contracts/Stake.sol\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'contract Stake is Wrap, Pausable, WhitelistAdminRole {\n', '    struct Card {\n', '        uint256 points;\n', '        uint256 releaseTime;\n', '        address erc721;\n', '        uint256 supply;\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => mapping(uint256 => Card)) public cards;\n', '    mapping(address => uint256) public pendingWithdrawals;\n', '\n', '    mapping(address => uint256) public points;\n', '    mapping(address => uint256) public lastUpdateTime;\n', '    uint256 public rewardRate = 8640;\n', '    uint256 public periodStart;\n', '    uint256 public minStake;\n', '    uint256 public maxStake;\n', '    uint256 public minStakeFixed;\n', '    uint256 public maxStakeFixed;\n', '    address public controller;\n', '    bool public constructed = false;\n', '    address public rescuer;\n', '    uint256 public spentScore;\n', '    uint256 public maxDay;\n', '    \n', '    \n', '    event Staked(address indexed user, uint256 amount);\n', '    event FixedStaked(address indexed user, uint256 indexed amount, uint256 indexed day);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RescueRedeemed(address indexed user, uint256 amount);\n', '    event Removed(\n', '        address indexed erc1155,\n', '        uint256 indexed card,\n', '        address indexed recipient,\n', '        uint256 amount\n', '    );\n', '    event Redeemed(\n', '        address indexed user,\n', '        address indexed erc1155,\n', '        uint256 indexed id,\n', '        uint256 amount\n', '    );\n', '\n', '    modifier updateReward(address account) {\n', '        if (account != address(0)) {\n', '            points[account] = earned(account);\n', '            lastUpdateTime[account] = block.timestamp;\n', '        }\n', '        _;\n', '    }\n', '\n', '   constructor(\n', '        uint256 _periodStart,\n', '        uint256 _minStake,\n', '        uint256 _maxStake,\n', '        uint256 _minStakeFixed,\n', '        uint256 _maxStakeFixed,\n', '        uint256 _maxDay,\n', '        address _controller,\n', '        IERC20 _tokenAddress\n', '    ) Wrap(_tokenAddress) {\n', '        require(\n', '            _minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake,\n', '            "Problem with min and max stake setup"\n', '        );\n', '        constructed = true;\n', '        periodStart = _periodStart;\n', '        minStake = _minStake;\n', '        maxStake = _maxStake;\n', '        minStakeFixed = _minStakeFixed;\n', '        maxStakeFixed = _maxStakeFixed;\n', '        controller = _controller;\n', '        rescuer = _controller;\n', '        maxDay = _maxDay;\n', '        // \t\tsuper.initWhiteListAdmin();\n', '    }\n', '\n', '    function setRewardRate(uint256 _rewardRate) external onlyWhitelistAdmin {\n', '        require(_rewardRate > 0, "Reward rate too low");\n', '        rewardRate = _rewardRate;\n', '    }\n', '    \n', '    function setMaxDay(uint256 _day) external onlyWhitelistAdmin {\n', '        require(_day > 0, "Reward rate too low");\n', '        maxDay = _day;\n', '    }\n', '\n', '    function setMinMaxStake(uint256 _minStake, uint256 _maxStake)\n', '        external\n', '        onlyWhitelistAdmin\n', '    {\n', '        require(\n', '            _minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake,\n', '            "Problem with min and max stake setup"\n', '        );\n', '        minStake = _minStake;\n', '        maxStake = _maxStake;\n', '    }\n', '    \n', '    function setMinMaxStakeFixed(uint256 _minStake, uint256 _maxStake)\n', '        external\n', '        onlyWhitelistAdmin\n', '    {\n', '        require(\n', '            _minStake >= 0 && _maxStake > 0 && _maxStake >= _minStake,\n', '            "Problem with min and max stake setup"\n', '        );\n', '        minStake = _minStake;\n', '        maxStake = _maxStake;\n', '    }\n', '\n', '    function setRescuer(address _rescuer) external onlyWhitelistAdmin {\n', '        rescuer = _rescuer;\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '        return points[account].add(getCurrPoints(account));\n', '    }\n', '\n', '    function getCurrPoints(address account) internal view returns (uint256) {\n', '        uint256 blockTime = block.timestamp;\n', '        return\n', '            blockTime.sub(lastUpdateTime[account]).mul(balanceOf(account)).div(\n', '                rewardRate\n', '            );\n', '    }\n', '\n', '    function stake(uint256 amount)\n', '        public\n', '        override\n', '        updateReward(msg.sender)\n', '        whenNotPaused()\n', '    {\n', '        require(block.timestamp >= periodStart, "Pool not open");\n', '        require(\n', '            amount.add(balanceOf(msg.sender)) >= minStake,\n', '            "Too few deposit"\n', '        );\n', '        require(\n', '            amount.add(balanceOf(msg.sender)) <= maxStake,\n', '            "Deposit limit reached"\n', '        );\n', '\n', '        super.stake(amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '    \n', '    function fixedStake (uint256 _day, uint256 _amount) public override whenNotPaused() {\n', '        require(block.timestamp >= periodStart, "Pool not open");\n', '        require(_day > 0, "Can\'t stake for Zero days");\n', '        require(maxDay <= _day, "Stake Day Limit Exceeded");\n', '        require(\n', '            _amount >= minStakeFixed,\n', '            "Too few deposit"\n', '        );\n', '        require(\n', '            _amount <= maxStakeFixed,\n', '            "Deposit limit reached"\n', '        );\n', '        points[msg.sender] = points[msg.sender].add(_day.mul(_amount));\n', '        super.fixedStake(_day, _amount);\n', '        \n', '        emit FixedStaked(msg.sender, _amount, _day);\n', '    }\n', '\n', '    function withdraw(uint256 amount) public override updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '\n', '        super.withdraw(amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '    \n', '    function withdrawFixedStake(uint256 index) public override {\n', '\n', '        super.withdrawFixedStake(index);\n', '    }\n', '\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '    }\n', '\n', '    function rescueScore(address account)\n', '        external\n', '        updateReward(account)\n', '        returns (uint256)\n', '    {\n', '        require(msg.sender == rescuer, "!rescuer");\n', '        uint256 earnedPoints = points[account];\n', '        spentScore = spentScore.add(earnedPoints);\n', '        points[account] = 0;\n', '\n', '        if (balanceOf(account) > 0) {\n', '            _rescueScore(account);\n', '        }\n', '\n', '        emit RescueRedeemed(account, earnedPoints);\n', '        return earnedPoints;\n', '    }\n', '\n', '    function addNfts(\n', '        uint256 _points,\n', '        uint256 _releaseTime,\n', '        address _erc721Address,\n', '        uint256 _tokenId,\n', '        uint256 _cardAmount\n', '    ) public onlyWhitelistAdmin returns (uint256) {\n', '        require(_tokenId > 0, "Invalid token id");\n', '        require(_cardAmount > 0, "Invalid card amount");\n', '        Card storage c = cards[_erc721Address][_tokenId];\n', '        c.points = _points;\n', '        c.releaseTime = _releaseTime;\n', '        c.erc721 = _erc721Address;\n', '        c.supply = _cardAmount;\n', '        return _tokenId;\n', '    }\n', '\n', '    function redeem(address _erc721Address, uint256 id)\n', '        external\n', '        updateReward(msg.sender)\n', '    {\n', '        require(cards[_erc721Address][id].points != 0, "Card not found");\n', '        require(\n', '            block.timestamp >= cards[_erc721Address][id].releaseTime,\n', '            "Card not released"\n', '        );\n', '        require(\n', '            points[msg.sender] >= cards[_erc721Address][id].points,\n', '            "Redemption exceeds point balance"\n', '        );\n', '\n', '        points[msg.sender] = points[msg.sender].sub(\n', '            cards[_erc721Address][id].points\n', '        );\n', '        spentScore = spentScore.add(cards[_erc721Address][id].points);\n', '\n', '        MyIERC721(cards[_erc721Address][id].erc721).mint(msg.sender);\n', '\n', '        emit Redeemed(\n', '            msg.sender,\n', '            cards[_erc721Address][id].erc721,\n', '            id,\n', '            cards[_erc721Address][id].points\n', '        );\n', '    }\n', '}']