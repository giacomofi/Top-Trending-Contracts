['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', '/*\n', 'https://powerpool.finance/\n', '\n', '          wrrrw r wrr\n', '         ppwr rrr wppr0       prwwwrp                                 prwwwrp                   wr0\n', '        rr 0rrrwrrprpwp0      pp   pr  prrrr0 pp   0r  prrrr0  0rwrrr pp   pr  prrrr0  prrrr0    r0\n', '        rrp pr   wr00rrp      prwww0  pp   wr pp w00r prwwwpr  0rw    prwww0  pp   wr pp   wr    r0\n', '        r0rprprwrrrp pr0      pp      wr   pr pp rwwr wr       0r     pp      wr   pr wr   pr    r0\n', '         prwr wrr0wpwr        00        www0   0w0ww    www0   0w     00        www0    www0   0www0\n', '          wrr ww0rrrr\n', '\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '// File: @powerpool/poweroracle/contracts/interfaces/IPowerPoke.sol\n', '\n', 'pragma solidity ^0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IPowerPoke {\n', "  /*** CLIENT'S CONTRACT INTERFACE ***/\n", '  function authorizeReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporter(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizeNonReporterWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinDeposit_\n', '  ) external view;\n', '\n', '  function authorizePoker(uint256 userId_, address pokerKey_) external view;\n', '\n', '  function authorizePokerWithDeposit(\n', '    uint256 userId_,\n', '    address pokerKey_,\n', '    uint256 overrideMinStake_\n', '  ) external view;\n', '\n', '  function slashReporter(uint256 slasherId_, uint256 times_) external;\n', '\n', '  function reward(\n', '    uint256 userId_,\n', '    uint256 gasUsed_,\n', '    uint256 compensationPlan_,\n', '    bytes calldata pokeOptions_\n', '  ) external;\n', '\n', '  /*** CLIENT OWNER INTERFACE ***/\n', '  function transferClientOwnership(address client_, address to_) external;\n', '\n', '  function addCredit(address client_, uint256 amount_) external;\n', '\n', '  function withdrawCredit(\n', '    address client_,\n', '    address to_,\n', '    uint256 amount_\n', '  ) external;\n', '\n', '  function setReportIntervals(\n', '    address client_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setSlasherHeartbeat(address client_, uint256 slasherHeartbeat_) external;\n', '\n', '  function setGasPriceLimit(address client_, uint256 gasPriceLimit_) external;\n', '\n', '  function setFixedCompensations(\n', '    address client_,\n', '    uint256 eth_,\n', '    uint256 cvp_\n', '  ) external;\n', '\n', '  function setBonusPlan(\n', '    address client_,\n', '    uint256 planId_,\n', '    bool active_,\n', '    uint64 bonusNominator_,\n', '    uint64 bonusDenominator_,\n', '    uint64 perGas_\n', '  ) external;\n', '\n', '  function setMinimalDeposit(address client_, uint256 defaultMinDeposit_) external;\n', '\n', '  /*** POKER INTERFACE ***/\n', '  function withdrawRewards(uint256 userId_, address to_) external;\n', '\n', '  function setPokerKeyRewardWithdrawAllowance(uint256 userId_, bool allow_) external;\n', '\n', '  /*** OWNER INTERFACE ***/\n', '  function addClient(\n', '    address client_,\n', '    address owner_,\n', '    bool canSlash_,\n', '    uint256 gasPriceLimit_,\n', '    uint256 minReportInterval_,\n', '    uint256 maxReportInterval_\n', '  ) external;\n', '\n', '  function setClientActiveFlag(address client_, bool active_) external;\n', '\n', '  function setCanSlashFlag(address client_, bool canSlash) external;\n', '\n', '  function setOracle(address oracle_) external;\n', '\n', '  function pause() external;\n', '\n', '  function unpause() external;\n', '\n', '  /*** GETTERS ***/\n', '  function creditOf(address client_) external view returns (uint256);\n', '\n', '  function ownerOf(address client_) external view returns (address);\n', '\n', '  function getMinMaxReportIntervals(address client_) external view returns (uint256 min, uint256 max);\n', '\n', '  function getSlasherHeartbeat(address client_) external view returns (uint256);\n', '\n', '  function getGasPriceLimit(address client_) external view returns (uint256);\n', '\n', '  function getPokerBonus(\n', '    address client_,\n', '    uint256 bonusPlanId_,\n', '    uint256 gasUsed_,\n', '    uint256 userDeposit_\n', '  ) external view returns (uint256);\n', '\n', '  function getGasPriceFor(address client_) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: contracts/interfaces/IPowerOracle.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IPowerOracle {\n', '  function assetPrices(address _token) external view returns (uint256);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/BMathInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface BMathInterface {\n', '  function calcInGivenOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 tokenBalanceOut,\n', '    uint256 tokenWeightOut,\n', '    uint256 tokenAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '\n', '  function calcSingleInGivenPoolOut(\n', '    uint256 tokenBalanceIn,\n', '    uint256 tokenWeightIn,\n', '    uint256 poolSupply,\n', '    uint256 totalWeight,\n', '    uint256 poolAmountOut,\n', '    uint256 swapFee\n', '  ) external pure returns (uint256 tokenAmountIn);\n', '}\n', '\n', '// File: contracts/interfaces/BPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'interface BPoolInterface is IERC20, BMathInterface {\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external returns (uint256);\n', '\n', '  function getDenormalizedWeight(address) external view returns (uint256);\n', '\n', '  function getBalance(address) external view returns (uint256);\n', '\n', '  function getSwapFee() external view returns (uint256);\n', '\n', '  function getTotalDenormalizedWeight() external view returns (uint256);\n', '\n', '  function getCommunityFee()\n', '    external\n', '    view\n', '    returns (\n', '      uint256,\n', '      uint256,\n', '      uint256,\n', '      address\n', '    );\n', '\n', '  function calcAmountWithCommunityFee(\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external view returns (uint256, uint256);\n', '\n', '  function getRestrictions() external view returns (address);\n', '\n', '  function isPublicSwap() external view returns (bool);\n', '\n', '  function isFinalized() external view returns (bool);\n', '\n', '  function isBound(address t) external view returns (bool);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function setSwapFee(uint256) external;\n', '\n', '  function setCommunityFeeAndReceiver(\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    address\n', '  ) external;\n', '\n', '  function setController(address) external;\n', '\n', '  function setPublicSwap(bool) external;\n', '\n', '  function finalize() external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function rebind(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function unbind(address) external;\n', '\n', '  function gulp(address) external;\n', '\n', '  function callVoting(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  function getMinWeight() external view returns (uint256);\n', '\n', '  function getMaxBoundTokens() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexPoolInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface PowerIndexPoolInterface is BPoolInterface {\n', '  function initialize(\n', '    string calldata name,\n', '    string calldata symbol,\n', '    uint256 minWeightPerSecond,\n', '    uint256 maxWeightPerSecond\n', '  ) external;\n', '\n', '  function bind(\n', '    address,\n', '    uint256,\n', '    uint256,\n', '    uint256,\n', '    uint256\n', '  ) external;\n', '\n', '  function setDynamicWeight(\n', '    address token,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) external;\n', '\n', '  function getDynamicWeightSettings(address token)\n', '    external\n', '    view\n', '    returns (\n', '      uint256 fromTimestamp,\n', '      uint256 targetTimestamp,\n', '      uint256 fromDenorm,\n', '      uint256 targetDenorm\n', '    );\n', '\n', '  function getMinWeight() external view override returns (uint256);\n', '\n', '  function getWeightPerSecondBounds() external view returns (uint256, uint256);\n', '\n', '  function setWeightPerSecondBounds(uint256, uint256) external;\n', '\n', '  function setWrapper(address, bool) external;\n', '\n', '  function getWrapperMode() external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/IPoolRestrictions.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IPoolRestrictions {\n', '  function getMaxTotalSupply(address _pool) external view returns (uint256);\n', '\n', '  function isVotingSignatureAllowed(address _votingAddress, bytes4 _signature) external view returns (bool);\n', '\n', '  function isVotingSenderAllowed(address _votingAddress, address _sender) external view returns (bool);\n', '\n', '  function isWithoutFee(address _addr) external view returns (bool);\n', '}\n', '\n', '// File: contracts/PowerIndexAbstractController.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', 'contract PowerIndexAbstractController is Ownable {\n', '  using SafeMath for uint256;\n', '\n', '  bytes4 public constant CALL_VOTING_SIG = bytes4(keccak256(bytes("callVoting(address,bytes4,bytes,uint256)")));\n', '\n', '  event CallPool(bool indexed success, bytes4 indexed inputSig, bytes inputData, bytes outputData);\n', '\n', '  PowerIndexPoolInterface public immutable pool;\n', '\n', '  constructor(address _pool) public {\n', '    pool = PowerIndexPoolInterface(_pool);\n', '  }\n', '\n', '  /**\n', '   * @notice Call any function from pool, except prohibited signatures.\n', '   * @param signature Method signature\n', '   * @param args Encoded method inputs\n', '   */\n', '  function callPool(bytes4 signature, bytes calldata args) external onlyOwner {\n', '    _checkSignature(signature);\n', '    (bool success, bytes memory data) = address(pool).call(abi.encodePacked(signature, args));\n', '    require(success, "NOT_SUCCESS");\n', '    emit CallPool(success, signature, args, data);\n', '  }\n', '\n', '  /**\n', '   * @notice Call voting by pool\n', '   * @param voting Voting address\n', '   * @param signature Method signature\n', '   * @param args Encoded method inputs\n', '   * @param value Send value to pool\n', '   */\n', '  function callVotingByPool(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external {\n', '    require(_restrictions().isVotingSenderAllowed(voting, msg.sender), "SENDER_NOT_ALLOWED");\n', '    pool.callVoting(voting, signature, args, value);\n', '  }\n', '\n', '  /**\n', '   * @notice Migrate several contracts with setController method to new controller address\n', '   * @param newController New controller to migrate\n', '   * @param addressesToMigrate Address to call setController method\n', '   */\n', '  function migrateController(address newController, address[] calldata addressesToMigrate) external onlyOwner {\n', '    uint256 len = addressesToMigrate.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      PowerIndexPoolInterface(addressesToMigrate[i]).setController(newController);\n', '    }\n', '  }\n', '\n', '  function _restrictions() internal view returns (IPoolRestrictions) {\n', '    return IPoolRestrictions(pool.getRestrictions());\n', '  }\n', '\n', '  function _checkSignature(bytes4 signature) internal pure virtual {\n', '    require(signature != CALL_VOTING_SIG, "SIGNATURE_NOT_ALLOWED");\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/PowerIndexWrapperInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface PowerIndexWrapperInterface {\n', '  function getFinalTokens() external view returns (address[] memory tokens);\n', '\n', '  function getCurrentTokens() external view returns (address[] memory tokens);\n', '\n', '  function getBalance(address _token) external view returns (uint256);\n', '\n', '  function setPiTokenForUnderlyingsMultiple(address[] calldata _underlyingTokens, address[] calldata _piTokens)\n', '    external;\n', '\n', '  function setPiTokenForUnderlying(address _underlyingTokens, address _piToken) external;\n', '\n', '  function updatePiTokenEthFees(address[] calldata _underlyingTokens) external;\n', '\n', '  function withdrawOddEthFee(address payable _recipient) external;\n', '\n', '  function calcEthFeeForTokens(address[] memory tokens) external view returns (uint256 feeSum);\n', '\n', '  function joinPool(uint256 poolAmountOut, uint256[] calldata maxAmountsIn) external payable;\n', '\n', '  function exitPool(uint256 poolAmountIn, uint256[] calldata minAmountsOut) external payable;\n', '\n', '  function swapExactAmountIn(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256, uint256);\n', '\n', '  function swapExactAmountOut(\n', '    address,\n', '    uint256,\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256, uint256);\n', '\n', '  function joinswapExternAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function joinswapPoolAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function exitswapPoolAmountIn(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '\n', '  function exitswapExternAmountOut(\n', '    address,\n', '    uint256,\n', '    uint256\n', '  ) external payable returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/WrappedPiErc20Interface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface WrappedPiErc20Interface is IERC20 {\n', '  function deposit(uint256 _amount) external payable returns (uint256);\n', '\n', '  function withdraw(uint256 _amount) external payable returns (uint256);\n', '\n', '  function changeRouter(address _newRouter) external;\n', '\n', '  function setEthFee(uint256 _newEthFee) external;\n', '\n', '  function approveUnderlying(address _to, uint256 _amount) external;\n', '\n', '  function callExternal(\n', '    address voting,\n', '    bytes4 signature,\n', '    bytes calldata args,\n', '    uint256 value\n', '  ) external;\n', '\n', '  struct ExternalCallData {\n', '    address destination;\n', '    bytes4 signature;\n', '    bytes args;\n', '    uint256 value;\n', '  }\n', '\n', '  function callExternalMultiple(ExternalCallData[] calldata calls) external;\n', '\n', '  function getUnderlyingBalance() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/WrappedPiErc20FactoryInterface.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'interface WrappedPiErc20FactoryInterface {\n', '  event NewWrappedPiErc20(address indexed token, address indexed wrappedToken, address indexed creator);\n', '\n', '  function build(\n', '    address _token,\n', '    address _router,\n', '    string calldata _name,\n', '    string calldata _symbol\n', '  ) external returns (WrappedPiErc20Interface);\n', '}\n', '\n', '// File: contracts/interfaces/IPiRouterFactory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IPiRouterFactory {\n', '  function buildRouter(address _piToken, bytes calldata _args) external returns (address);\n', '}\n', '\n', '// File: contracts/powerindex-router/PowerIndexWrappedController.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PowerIndexWrappedController is PowerIndexAbstractController {\n', '  /* ==========  EVENTS  ========== */\n', '\n', '  /** @dev Emitted on replacing underlying token with exists piToken. */\n', '  event ReplacePoolTokenWithPiToken(\n', '    address indexed underlyingToken,\n', '    address indexed piToken,\n', '    uint256 balance,\n', '    uint256 denormalizedWeight\n', '  );\n', '\n', '  /** @dev Emitted on replacing underlying token with new version of token. */\n', '  event ReplacePoolTokenWithNewVersion(\n', '    address indexed oldToken,\n', '    address indexed newToken,\n', '    address indexed migrator,\n', '    uint256 balance,\n', '    uint256 denormalizedWeight\n', '  );\n', '\n', '  /** @dev Emitted on finishing pool replacing. */\n', '  event ReplacePoolTokenFinish();\n', '\n', '  /** @dev Emitted on poolWrapper update. */\n', '  event SetPoolWrapper(address indexed poolWrapper);\n', '\n', '  /** @dev Emitted on piTokenFactory update. */\n', '  event SetPiTokenFactory(address indexed piTokenFactory);\n', '\n', '  /** @dev Emitted on creating piToken. */\n', '  event CreatePiToken(address indexed underlyingToken, address indexed piToken, address indexed router);\n', '\n', '  /* ==========  Storage  ========== */\n', '\n', '  /** @dev Address of poolWrapper contract. */\n', '  PowerIndexWrapperInterface public poolWrapper;\n', '\n', '  /** @dev Address of piToken factory contract. */\n', '  WrappedPiErc20FactoryInterface public piTokenFactory;\n', '\n', '  constructor(\n', '    address _pool,\n', '    address _poolWrapper,\n', '    address _piTokenFactory\n', '  ) public PowerIndexAbstractController(_pool) {\n', '    poolWrapper = PowerIndexWrapperInterface(_poolWrapper);\n', '    piTokenFactory = WrappedPiErc20FactoryInterface(_piTokenFactory);\n', '  }\n', '\n', '  /**\n', '   * @dev Set poolWrapper contract address.\n', '   * @param _poolWrapper Address of pool wrapper.\n', '   */\n', '  function setPoolWrapper(address _poolWrapper) external onlyOwner {\n', '    poolWrapper = PowerIndexWrapperInterface(_poolWrapper);\n', '    emit SetPoolWrapper(_poolWrapper);\n', '  }\n', '\n', '  /**\n', '   * @dev Set piTokenFactory contract address.\n', '   * @param _piTokenFactory Address of PiToken factory.\n', '   */\n', '  function setPiTokenFactory(address _piTokenFactory) external onlyOwner {\n', '    piTokenFactory = WrappedPiErc20FactoryInterface(_piTokenFactory);\n', '    emit SetPiTokenFactory(_piTokenFactory);\n', '  }\n', '\n', '  /**\n', '   * @dev Creating piToken using underling token and router factory.\n', '   * @param _underlyingToken Token, which will be wrapped by piToken.\n', '   * @param _routerFactory Router factory, to creating router by buildRouter function.\n', '   * @param _routerArgs Router args, depends on router implementation.\n', '   * @param _name Name of piToken.\n', '   * @param _name Symbol of piToken.\n', '   */\n', '  function createPiToken(\n', '    address _underlyingToken,\n', '    address _routerFactory,\n', '    bytes memory _routerArgs,\n', '    string calldata _name,\n', '    string calldata _symbol\n', '  ) external onlyOwner {\n', '    _createPiToken(_underlyingToken, _routerFactory, _routerArgs, _name, _symbol);\n', '  }\n', '\n', '  /**\n', '   * @dev Creating piToken and replacing pool token with it.\n', '   * @param _underlyingToken Token, which will be wrapped by piToken.\n', '   * @param _routerFactory Router factory, to creating router by buildRouter function.\n', '   * @param _routerArgs Router args, depends on router implementation.\n', '   * @param _name Name of piToken.\n', '   * @param _name Symbol of piToken.\n', '   */\n', '  function replacePoolTokenWithNewPiToken(\n', '    address _underlyingToken,\n', '    address _routerFactory,\n', '    bytes calldata _routerArgs,\n', '    string calldata _name,\n', '    string calldata _symbol\n', '  ) external payable onlyOwner {\n', '    WrappedPiErc20Interface piToken = _createPiToken(_underlyingToken, _routerFactory, _routerArgs, _name, _symbol);\n', '    _replacePoolTokenWithPiToken(_underlyingToken, piToken);\n', '  }\n', '\n', '  /**\n', '   * @dev Replacing pool token with existing piToken.\n', '   * @param _underlyingToken Token, which will be wrapped by piToken.\n', '   * @param _piToken Address of piToken.\n', '   */\n', '  function replacePoolTokenWithExistingPiToken(address _underlyingToken, WrappedPiErc20Interface _piToken)\n', '    external\n', '    payable\n', '    onlyOwner\n', '  {\n', '    _replacePoolTokenWithPiToken(_underlyingToken, _piToken);\n', '  }\n', '\n', '  /**\n', '   * @dev Replacing pool token with new token version and calling migrator.\n', '   * Warning! All balance of poll token will be approved to _migrator for exchange to new token.\n', '   *\n', '   * @param _oldToken Pool token ti replace with new version.\n', '   * @param _newToken New version of token to bind to pool instead of the old.\n', '   * @param _migrator Address of contract to migrate from old token to new. Do not use untrusted contract!\n', '   * @param _migratorData Data for executing migrator.\n', '   */\n', '  function replacePoolTokenWithNewVersion(\n', '    address _oldToken,\n', '    address _newToken,\n', '    address _migrator,\n', '    bytes calldata _migratorData\n', '  ) external onlyOwner {\n', '    uint256 denormalizedWeight = pool.getDenormalizedWeight(_oldToken);\n', '    uint256 balance = pool.getBalance(_oldToken);\n', '\n', '    pool.unbind(_oldToken);\n', '\n', '    IERC20(_oldToken).approve(_migrator, balance);\n', '    (bool success, ) = _migrator.call(_migratorData);\n', '    require(success, "NOT_SUCCESS");\n', '\n', '    require(\n', '      IERC20(_newToken).balanceOf(address(this)) >= balance,\n', '      "PiBPoolController:newVersion: insufficient newToken balance"\n', '    );\n', '\n', '    IERC20(_newToken).approve(address(pool), balance);\n', '    _bindNewToken(_newToken, balance, denormalizedWeight);\n', '\n', '    emit ReplacePoolTokenWithNewVersion(_oldToken, _newToken, _migrator, balance, denormalizedWeight);\n', '  }\n', '\n', '  /*** Internal Functions ***/\n', '\n', '  function _replacePoolTokenWithPiToken(address _underlyingToken, WrappedPiErc20Interface _piToken) internal {\n', '    uint256 denormalizedWeight = pool.getDenormalizedWeight(_underlyingToken);\n', '    uint256 balance = pool.getBalance(_underlyingToken);\n', '\n', '    pool.unbind(_underlyingToken);\n', '\n', '    IERC20(_underlyingToken).approve(address(_piToken), balance);\n', '    _piToken.deposit{ value: msg.value }(balance);\n', '\n', '    _piToken.approve(address(pool), balance);\n', '    _bindNewToken(address(_piToken), balance, denormalizedWeight);\n', '\n', '    if (address(poolWrapper) != address(0)) {\n', '      poolWrapper.setPiTokenForUnderlying(_underlyingToken, address(_piToken));\n', '    }\n', '\n', '    emit ReplacePoolTokenWithPiToken(_underlyingToken, address(_piToken), balance, denormalizedWeight);\n', '  }\n', '\n', '  function _bindNewToken(\n', '    address _piToken,\n', '    uint256 _balance,\n', '    uint256 _denormalizedWeight\n', '  ) internal virtual {\n', '    pool.bind(_piToken, _balance, _denormalizedWeight);\n', '  }\n', '\n', '  function _createPiToken(\n', '    address _underlyingToken,\n', '    address _routerFactory,\n', '    bytes memory _routerArgs,\n', '    string calldata _name,\n', '    string calldata _symbol\n', '  ) internal returns (WrappedPiErc20Interface) {\n', '    WrappedPiErc20Interface piToken = piTokenFactory.build(_underlyingToken, address(this), _name, _symbol);\n', '    address router = IPiRouterFactory(_routerFactory).buildRouter(address(piToken), _routerArgs);\n', '    Ownable(router).transferOwnership(msg.sender);\n', '    piToken.changeRouter(router);\n', '\n', '    emit CreatePiToken(_underlyingToken, address(piToken), router);\n', '    return piToken;\n', '  }\n', '}\n', '\n', '// File: contracts/PowerIndexPoolController.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract PowerIndexPoolController is PowerIndexWrappedController {\n', '  using SafeERC20 for IERC20;\n', '\n', '  /* ==========  Storage  ========== */\n', '\n', '  /** @dev Signature to execute bind in pool. */\n', '  bytes4 public constant BIND_SIG = bytes4(keccak256(bytes("bind(address,uint256,uint256,uint256,uint256)")));\n', '\n', '  /** @dev Signature to execute unbind in pool. */\n', '  bytes4 public constant UNBIND_SIG = bytes4(keccak256(bytes("unbind(address)")));\n', '\n', '  struct DynamicWeightInput {\n', '    address token;\n', '    uint256 targetDenorm;\n', '    uint256 fromTimestamp;\n', '    uint256 targetTimestamp;\n', '  }\n', '\n', '  /** @dev Emitted on setting new weights strategy. */\n', '  event SetWeightsStrategy(address indexed weightsStrategy);\n', '\n', '  /** @dev Weights strategy contract address. */\n', '  address public weightsStrategy;\n', '\n', '  modifier onlyWeightsStrategy() {\n', '    require(msg.sender == weightsStrategy, "ONLY_WEIGHTS_STRATEGY");\n', '    _;\n', '  }\n', '\n', '  constructor(\n', '    address _pool,\n', '    address _poolWrapper,\n', '    address _wrapperFactory,\n', '    address _weightsStrategy\n', '  ) public PowerIndexWrappedController(_pool, _poolWrapper, _wrapperFactory) {\n', '    weightsStrategy = _weightsStrategy;\n', '  }\n', '\n', '  /* ==========  Configuration Actions  ========== */\n', '\n', '  /**\n', '   * @notice Call bind in pool.\n', '   * @param token Token to bind.\n', '   * @param balance Initial token balance.\n', '   * @param targetDenorm Target weight.\n', '   * @param fromTimestamp Start timestamp to change weight.\n', '   * @param targetTimestamp Target timestamp to change weight.\n', '   */\n', '  function bind(\n', '    address token,\n', '    uint256 balance,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) external onlyOwner {\n', '    _validateNewTokenBind();\n', '\n', '    IERC20(token).safeTransferFrom(msg.sender, address(this), balance);\n', '    IERC20(token).approve(address(pool), balance);\n', '    pool.bind(token, balance, targetDenorm, fromTimestamp, targetTimestamp);\n', '  }\n', '\n', '  /**\n', "   * @notice Set the old token's target weight to MIN_WEIGHT and add a new token\n", '   * with a previous weight of the old token.\n', '   * @param oldToken Token to replace.\n', '   * @param newToken New token.\n', '   * @param balance Initial new token balance.\n', '   * @param fromTimestamp Start timestamp to change weight.\n', '   * @param targetTimestamp Target timestamp to change weight.\n', '   */\n', '  function replaceTokenWithNew(\n', '    address oldToken,\n', '    address newToken,\n', '    uint256 balance,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) external onlyOwner {\n', '    _replaceTokenWithNew(oldToken, newToken, balance, fromTimestamp, targetTimestamp);\n', '  }\n', '\n', '  /**\n', '   * @notice The same as replaceTokenWithNew, but sets fromTimestamp with block.timestamp\n', '   * and uses durationFromNow to set targetTimestamp.\n', '   * @param oldToken Token to replace\n', '   * @param newToken New token\n', '   * @param balance Initial new token balance\n', '   * @param durationFromNow Duration to set targetTimestamp.\n', '   */\n', '  function replaceTokenWithNewFromNow(\n', '    address oldToken,\n', '    address newToken,\n', '    uint256 balance,\n', '    uint256 durationFromNow\n', '  ) external onlyOwner {\n', '    uint256 now = block.timestamp.add(1);\n', '    _replaceTokenWithNew(oldToken, newToken, balance, now, now.add(durationFromNow));\n', '  }\n', '\n', '  /**\n', '   * @notice Call setDynamicWeight for several tokens.\n', '   * @param _dynamicWeights Tokens dynamic weights configs.\n', '   */\n', '  function setDynamicWeightList(DynamicWeightInput[] memory _dynamicWeights) external onlyOwner {\n', '    uint256 len = _dynamicWeights.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      pool.setDynamicWeight(\n', '        _dynamicWeights[i].token,\n', '        _dynamicWeights[i].targetDenorm,\n', '        _dynamicWeights[i].fromTimestamp,\n', '        _dynamicWeights[i].targetTimestamp\n', '      );\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Set _weightsStrategy address.\n', '   * @param _weightsStrategy Contract for weights management.\n', '   */\n', '  function setWeightsStrategy(address _weightsStrategy) external onlyOwner {\n', '    weightsStrategy = _weightsStrategy;\n', '    emit SetWeightsStrategy(_weightsStrategy);\n', '  }\n', '\n', '  /**\n', '   * @notice Call setDynamicWeight for several tokens, can be called only by weightsStrategy address.\n', '   * @param _dynamicWeights Tokens dynamic weights configs.\n', '   */\n', '  function setDynamicWeightListByStrategy(DynamicWeightInput[] memory _dynamicWeights) external onlyWeightsStrategy {\n', '    uint256 len = _dynamicWeights.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      pool.setDynamicWeight(\n', '        _dynamicWeights[i].token,\n', '        _dynamicWeights[i].targetDenorm,\n', '        _dynamicWeights[i].fromTimestamp,\n', '        _dynamicWeights[i].targetTimestamp\n', '      );\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Permissionless function to unbind tokens with MIN_WEIGHT.\n', '   * @param _token Token to unbind.\n', '   */\n', '  function unbindNotActualToken(address _token) external {\n', '    require(pool.getDenormalizedWeight(_token) == pool.getMinWeight(), "DENORM_MIN");\n', '    (, uint256 targetTimestamp, , ) = pool.getDynamicWeightSettings(_token);\n', '    require(block.timestamp > targetTimestamp, "TIMESTAMP_MORE_THEN_TARGET");\n', '\n', '    uint256 tokenBalance = pool.getBalance(_token);\n', '\n', '    pool.unbind(_token);\n', '    (, , , address communityWallet) = pool.getCommunityFee();\n', '    IERC20(_token).safeTransfer(communityWallet, tokenBalance);\n', '  }\n', '\n', '  function _checkSignature(bytes4 signature) internal pure override {\n', '    require(signature != BIND_SIG && signature != UNBIND_SIG && signature != CALL_VOTING_SIG, "SIGNATURE_NOT_ALLOWED");\n', '  }\n', '\n', '  /*** Internal Functions ***/\n', '\n', '  /**\n', "   * @notice Set the old token's target weight to MIN_WEIGHT and\n", '   * add a new token with a previous weight of the old token.\n', '   * @param oldToken Token to replace\n', '   * @param newToken New token\n', '   * @param balance Initial new token balance\n', '   * @param fromTimestamp Start timestamp to change weight.\n', '   * @param targetTimestamp Target timestamp to change weight.\n', '   */\n', '  function _replaceTokenWithNew(\n', '    address oldToken,\n', '    address newToken,\n', '    uint256 balance,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) internal {\n', '    uint256 minWeight = pool.getMinWeight();\n', '    (, , , uint256 targetDenorm) = pool.getDynamicWeightSettings(oldToken);\n', '\n', '    pool.setDynamicWeight(oldToken, minWeight, fromTimestamp, targetTimestamp);\n', '\n', '    IERC20(newToken).safeTransferFrom(msg.sender, address(this), balance);\n', '    IERC20(newToken).approve(address(pool), balance);\n', '    pool.bind(newToken, balance, targetDenorm.sub(minWeight), fromTimestamp, targetTimestamp);\n', '  }\n', '\n', '  /**\n', "   * @notice Check that pool doesn't have the maximum number of bound tokens.\n", '   * If there is a max number of bound tokens, one should have a minimum weight.\n', '   */\n', '  function _validateNewTokenBind() internal {\n', '    address[] memory tokens = pool.getCurrentTokens();\n', '    uint256 tokensLen = tokens.length;\n', '    uint256 minWeight = pool.getMinWeight();\n', '\n', '    if (tokensLen == pool.getMaxBoundTokens() - 1) {\n', '      for (uint256 i = 0; i < tokensLen; i++) {\n', '        (, , , uint256 targetDenorm) = pool.getDynamicWeightSettings(tokens[i]);\n', '        if (targetDenorm == minWeight) {\n', '          return;\n', '        }\n', '      }\n', '      revert("NEW_TOKEN_NOT_ALLOWED"); // If there is no tokens with target MIN_WEIGHT\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/balancer-core/BConst.sol\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract BConst {\n', '    uint public constant BONE              = 10**18;\n', '    // Minimum number of tokens in the pool\n', '    uint public constant MIN_BOUND_TOKENS  = 2;\n', '    // Maximum number of tokens in the pool\n', '    uint public constant MAX_BOUND_TOKENS  = 9;\n', '    // Minimum swap fee\n', '    uint public constant MIN_FEE           = BONE / 10**6;\n', '    // Maximum swap fee\n', '    uint public constant MAX_FEE           = BONE / 10;\n', '    // Minimum weight for token\n', '    uint public constant MIN_WEIGHT        = 1000000000;\n', '    // Maximum weight for token\n', '    uint public constant MAX_WEIGHT        = BONE * 50;\n', '    // Maximum total weight\n', '    uint public constant MAX_TOTAL_WEIGHT  = BONE * 50;\n', '    // Minimum balance for a token\n', '    uint public constant MIN_BALANCE       = BONE / 10**12;\n', '    // Initial pool tokens supply\n', '    uint public constant INIT_POOL_SUPPLY  = BONE * 100;\n', '\n', '    uint public constant MIN_BPOW_BASE     = 1 wei;\n', '    uint public constant MAX_BPOW_BASE     = (2 * BONE) - 1 wei;\n', '    uint public constant BPOW_PRECISION    = BONE / 10**10;\n', '    // Maximum input tokens balance ratio for swaps.\n', '    uint public constant MAX_IN_RATIO      = BONE / 2;\n', '    // Maximum output tokens balance ratio for swaps.\n', '    uint public constant MAX_OUT_RATIO     = (BONE / 3) + 1 wei;\n', '}\n', '\n', '// File: contracts/balancer-core/BNum.sol\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', 'contract BNum is BConst {\n', '\n', '    function btoi(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return a / BONE;\n', '    }\n', '\n', '    function bfloor(uint a)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        return btoi(a) * BONE;\n', '    }\n', '\n', '    function badd(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsub(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        (uint c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    function bsubSign(uint a, uint b)\n', '        internal pure\n', '        returns (uint, bool)\n', '    {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    function bmul(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    function bdiv(uint a, uint b)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      require(b > 0, "ERR_DIV_ZERO");\n', '      return a / b;\n', '    }\n', '\n', '    // DSMath.wpow\n', '    function bpowi(uint a, uint n)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        uint z = n % 2 != 0 ? a : BONE;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            a = bmul(a, a);\n', '\n', '            if (n % 2 != 0) {\n', '                z = bmul(z, a);\n', '            }\n', '        }\n', '        return z;\n', '    }\n', '\n', '    // Compute b^(e.w) by splitting it into (b^e)*(b^0.w).\n', '    // Use `bpowi` for `b^e` and `bpowK` for k iterations\n', '    // of approximation of b^0.w\n', '    function bpow(uint base, uint exp)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        require(base >= MIN_BPOW_BASE, "ERR_BPOW_BASE_TOO_LOW");\n', '        require(base <= MAX_BPOW_BASE, "ERR_BPOW_BASE_TOO_HIGH");\n', '\n', '        uint whole  = bfloor(exp);\n', '        uint remain = bsub(exp, whole);\n', '\n', '        uint wholePow = bpowi(base, btoi(whole));\n', '\n', '        if (remain == 0) {\n', '            return wholePow;\n', '        }\n', '\n', '        uint partialResult = bpowApprox(base, remain, BPOW_PRECISION);\n', '        return bmul(wholePow, partialResult);\n', '    }\n', '\n', '    function bpowApprox(uint base, uint exp, uint precision)\n', '        internal pure\n', '        returns (uint)\n', '    {\n', '        // term 0:\n', '        uint a     = exp;\n', '        (uint x, bool xneg)  = bsubSign(base, BONE);\n', '        uint term = BONE;\n', '        uint sum   = term;\n', '        bool negative = false;\n', '\n', '\n', '        // term(k) = numer / denom\n', '        //         = (product(a - i - 1, i=1-->k) * x^k) / (k!)\n', '        // each iteration, multiply previous term by (a-(k-1)) * x / k\n', '        // continue until term is less than precision\n', '        for (uint i = 1; term >= precision; i++) {\n', '            uint bigK = i * BONE;\n', '            (uint c, bool cneg) = bsubSign(a, bsub(bigK, BONE));\n', '            term = bmul(term, bmul(c, x));\n', '            term = bdiv(term, bigK);\n', '            if (term == 0) break;\n', '\n', '            if (xneg) negative = !negative;\n', '            if (cneg) negative = !negative;\n', '            if (negative) {\n', '                sum = bsub(sum, term);\n', '            } else {\n', '                sum = badd(sum, term);\n', '            }\n', '        }\n', '\n', '        return sum;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/weight-strategies/MCapWeightAbstract.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract MCapWeightAbstract is BNum, OwnableUpgradeSafe {\n', '  event SetExcludeTokenBalances(address indexed token, address[] excludeTokenBalances);\n', '  event FetchTokenMCap(address indexed pool, address indexed token, uint256 mCap);\n', '  event UpdatePoolWeights(\n', '    address indexed pool,\n', '    uint256 indexed timestamp,\n', '    address[] tokens,\n', '    uint256[3][] weightsChange,\n', '    uint256[] newMCaps\n', '  );\n', '\n', '  struct TokenConfigItem {\n', '    address token;\n', '    address[] excludeTokenBalances;\n', '  }\n', '\n', '  IPowerOracle public oracle;\n', '  mapping(address => address[]) public excludeTokenBalances;\n', '\n', '  constructor(address _oracle) public OwnableUpgradeSafe() {\n', '    if (_oracle != address(0)) {\n', '      __Ownable_init();\n', '      oracle = IPowerOracle(_oracle);\n', '    }\n', '  }\n', '\n', '  function setExcludeTokenBalances(address _token, address[] calldata _excludeTokenBalances) external onlyOwner {\n', '    excludeTokenBalances[_token] = _excludeTokenBalances;\n', '\n', '    emit SetExcludeTokenBalances(_token, _excludeTokenBalances);\n', '  }\n', '\n', '  function setExcludeTokenBalancesList(TokenConfigItem[] calldata _tokenConfigItems) external onlyOwner {\n', '    uint256 len = _tokenConfigItems.length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      excludeTokenBalances[_tokenConfigItems[i].token] = _tokenConfigItems[i].excludeTokenBalances;\n', '\n', '      emit SetExcludeTokenBalances(_tokenConfigItems[i].token, _tokenConfigItems[i].excludeTokenBalances);\n', '    }\n', '  }\n', '\n', '  function getTokenMarketCap(address _token) public view returns (uint256) {\n', '    uint256 totalSupply = IERC20(_token).totalSupply();\n', '    uint256 len = excludeTokenBalances[_token].length;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      totalSupply = bsub(totalSupply, IERC20(_token).balanceOf(excludeTokenBalances[_token][i]));\n', '    }\n', '    return bdiv(bmul(totalSupply, oracle.assetPrices(_token)), 1 ether);\n', '  }\n', '\n', '  function getExcludeTokenBalancesLength(address _token) external view returns (uint256) {\n', '    return excludeTokenBalances[_token].length;\n', '  }\n', '\n', '  function getExcludeTokenBalancesList(address _token) external view returns (address[] memory) {\n', '    return excludeTokenBalances[_token];\n', '  }\n', '\n', '  function _computeWeightsChangeWithEvent(\n', '    PowerIndexPoolInterface _pool,\n', '    address[] memory _tokens,\n', '    uint256 _minWPS,\n', '    uint256 _maxWPS,\n', '    uint256 fromTimestamp,\n', '    uint256 toTimestamp\n', '  ) internal returns (uint256[3][] memory weightsChange, uint256 lenToPush) {\n', '    uint256[] memory newMCaps;\n', '    (weightsChange, lenToPush, newMCaps) = computeWeightsChange(\n', '      _pool,\n', '      _tokens,\n', '      _minWPS,\n', '      _maxWPS,\n', '      fromTimestamp,\n', '      toTimestamp\n', '    );\n', '    emit UpdatePoolWeights(address(_pool), block.timestamp, _tokens, weightsChange, newMCaps);\n', '  }\n', '\n', '  function computeWeightsChange(\n', '    PowerIndexPoolInterface _pool,\n', '    address[] memory _tokens,\n', '    uint256 _minWPS,\n', '    uint256 _maxWPS,\n', '    uint256 fromTimestamp,\n', '    uint256 toTimestamp\n', '  )\n', '    public\n', '    view\n', '    returns (\n', '      uint256[3][] memory weightsChange,\n', '      uint256 lenToPush,\n', '      uint256[] memory newMCaps\n', '    )\n', '  {\n', '    uint256 len = _tokens.length;\n', '    newMCaps = new uint256[](len);\n', '\n', '    uint256 newMarketCapSum;\n', '    for (uint256 i = 0; i < len; i++) {\n', '      newMCaps[i] = getTokenMarketCap(_tokens[i]);\n', '      newMarketCapSum = badd(newMarketCapSum, newMCaps[i]);\n', '    }\n', '\n', '    weightsChange = new uint256[3][](len);\n', '    for (uint256 i = 0; i < len; i++) {\n', '      (, , , uint256 oldWeight) = _pool.getDynamicWeightSettings(_tokens[i]);\n', '      uint256 newWeight = bmul(bdiv(newMCaps[i], newMarketCapSum), 25 * BONE);\n', '      weightsChange[i] = [i, oldWeight, newWeight];\n', '    }\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      uint256 wps = getWeightPerSecond(weightsChange[i][1], weightsChange[i][2], fromTimestamp, toTimestamp);\n', '      if (wps >= _minWPS) {\n', '        lenToPush++;\n', '      }\n', '    }\n', '\n', '    if (lenToPush > 1) {\n', '      _sort(weightsChange);\n', '    }\n', '  }\n', '\n', '  function getWeightPerSecond(\n', '    uint256 fromDenorm,\n', '    uint256 targetDenorm,\n', '    uint256 fromTimestamp,\n', '    uint256 targetTimestamp\n', '  ) public pure returns (uint256) {\n', '    uint256 delta = targetDenorm > fromDenorm ? bsub(targetDenorm, fromDenorm) : bsub(fromDenorm, targetDenorm);\n', '    return div(delta, bsub(targetTimestamp, fromTimestamp));\n', '  }\n', '\n', '  function _quickSort(\n', '    uint256[3][] memory wightsChange,\n', '    int256 left,\n', '    int256 right\n', '  ) internal pure {\n', '    int256 i = left;\n', '    int256 j = right;\n', '    if (i == j) return;\n', '    uint256[3] memory pivot = wightsChange[uint256(left + (right - left) / 2)];\n', '    int256 pDiff = int256(pivot[2]) - int256(pivot[1]);\n', '    while (i <= j) {\n', '      while (int256(wightsChange[uint256(i)][2]) - int256(wightsChange[uint256(i)][1]) < pDiff) i++;\n', '      while (pDiff < int256(wightsChange[uint256(j)][2]) - int256(wightsChange[uint256(j)][1])) j--;\n', '      if (i <= j) {\n', '        (wightsChange[uint256(i)], wightsChange[uint256(j)]) = (wightsChange[uint256(j)], wightsChange[uint256(i)]);\n', '        i++;\n', '        j--;\n', '      }\n', '    }\n', '    if (left < j) _quickSort(wightsChange, left, j);\n', '    if (i < right) _quickSort(wightsChange, i, right);\n', '  }\n', '\n', '  function _sort(uint256[3][] memory weightsChange) internal pure {\n', '    _quickSort(weightsChange, int256(0), int256(weightsChange.length - 1));\n', '  }\n', '\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: contracts/weight-strategies/MCapWeightStrategy.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract MCapWeightStrategy is MCapWeightAbstract {\n', '  event AddPool(address indexed pool, address indexed poolController);\n', '  event SetPool(address indexed pool, address indexed poolController, bool indexed active);\n', '  event SetWeightsChangeDuration(uint256 weightsChangeDuration);\n', '\n', '  struct PokeVars {\n', '    PowerIndexPoolInterface pool;\n', '    uint256 minWPS;\n', '    uint256 maxWPS;\n', '    address[] tokens;\n', '    address[] piTokens;\n', '    uint256 tokensLen;\n', '    uint256 fromTimestamp;\n', '    uint256 iToPush;\n', '  }\n', '\n', '  struct Pool {\n', '    PowerIndexPoolController controller;\n', '    PowerIndexWrapperInterface wrapper;\n', '    uint256 lastWeightsUpdate;\n', '    bool active;\n', '  }\n', '\n', '  uint256 internal constant COMPENSATION_PLAN_1_ID = 1;\n', '\n', '  address[] public pools;\n', '  mapping(address => Pool) public poolsData;\n', '\n', '  uint256 weightsChangeDuration;\n', '\n', '  IPowerPoke public powerPoke;\n', '\n', '  modifier onlyReporter(uint256 _reporterId, bytes calldata _rewardOpts) {\n', '    uint256 gasStart = gasleft();\n', '    powerPoke.authorizeReporter(_reporterId, msg.sender);\n', '    _;\n', '    _reward(_reporterId, gasStart, COMPENSATION_PLAN_1_ID, _rewardOpts);\n', '  }\n', '\n', '  modifier onlyNonReporter(uint256 _reporterId, bytes calldata _rewardOpts) {\n', '    uint256 gasStart = gasleft();\n', '    powerPoke.authorizeNonReporter(_reporterId, msg.sender);\n', '    _;\n', '    _reward(_reporterId, gasStart, COMPENSATION_PLAN_1_ID, _rewardOpts);\n', '  }\n', '\n', '  modifier denyContract() {\n', '    require(msg.sender == tx.origin, "CONTRACT_CALL");\n', '    _;\n', '  }\n', '\n', '  constructor() public MCapWeightAbstract(address(0)) {}\n', '\n', '  function initialize(\n', '    address _oracle,\n', '    address _powerPoke,\n', '    uint256 _weightsChangeDuration\n', '  ) external initializer {\n', '    __Ownable_init();\n', '    oracle = IPowerOracle(_oracle);\n', '    powerPoke = IPowerPoke(_powerPoke);\n', '    weightsChangeDuration = _weightsChangeDuration;\n', '  }\n', '\n', '  function setWeightsChangeDuration(uint256 _weightsChangeDuration) external onlyOwner {\n', '    weightsChangeDuration = _weightsChangeDuration;\n', '\n', '    emit SetWeightsChangeDuration(_weightsChangeDuration);\n', '  }\n', '\n', '  function addPool(\n', '    address _poolAddress,\n', '    address _controller,\n', '    address _wrapper\n', '  ) external onlyOwner {\n', '    require(address(poolsData[_poolAddress].controller) == address(0), "ALREADY_EXIST");\n', '    require(_controller != address(0), "CONTROLLER_CANT_BE_NULL");\n', '    pools.push(_poolAddress);\n', '    poolsData[_poolAddress].controller = PowerIndexPoolController(_controller);\n', '    poolsData[_poolAddress].wrapper = PowerIndexWrapperInterface(_wrapper);\n', '    poolsData[_poolAddress].active = true;\n', '    emit AddPool(_poolAddress, _controller);\n', '  }\n', '\n', '  function setPool(\n', '    address _poolAddress,\n', '    address _controller,\n', '    address _wrapper,\n', '    bool _active\n', '  ) external onlyOwner {\n', '    require(_controller != address(0), "CONTROLLER_CANT_BE_NULL");\n', '    poolsData[_poolAddress].controller = PowerIndexPoolController(_controller);\n', '    poolsData[_poolAddress].wrapper = PowerIndexWrapperInterface(_wrapper);\n', '    poolsData[_poolAddress].active = _active;\n', '    emit SetPool(_poolAddress, _controller, _active);\n', '  }\n', '\n', '  function pausePool(address _poolAddress) external onlyOwner {\n', '    poolsData[_poolAddress].active = false;\n', '    PowerIndexPoolInterface pool = PowerIndexPoolInterface(_poolAddress);\n', '    address[] memory tokens = pool.getCurrentTokens();\n', '\n', '    uint256 len = tokens.length;\n', '    PowerIndexPoolController.DynamicWeightInput[] memory dws;\n', '    dws = new PowerIndexPoolController.DynamicWeightInput[](len);\n', '\n', '    for (uint256 i = 0; i < len; i++) {\n', '      dws[i].token = tokens[i];\n', '      dws[i].fromTimestamp = block.timestamp + 1;\n', '      dws[i].targetTimestamp = block.timestamp + 2;\n', '      dws[i].targetDenorm = pool.getDenormalizedWeight(tokens[i]);\n', '    }\n', '\n', '    poolsData[_poolAddress].controller.setDynamicWeightListByStrategy(dws);\n', '  }\n', '\n', '  function pokeFromReporter(\n', '    uint256 _reporterId,\n', '    address[] memory _pools,\n', '    bytes calldata _rewardOpts\n', '  ) external onlyReporter(_reporterId, _rewardOpts) denyContract {\n', '    _poke(_pools, false);\n', '  }\n', '\n', '  function pokeFromSlasher(\n', '    uint256 _reporterId,\n', '    address[] memory _pools,\n', '    bytes calldata _rewardOpts\n', '  ) external onlyNonReporter(_reporterId, _rewardOpts) denyContract {\n', '    _poke(_pools, true);\n', '  }\n', '\n', '  function getPoolsList() external view returns (address[] memory) {\n', '    return pools;\n', '  }\n', '\n', '  function getPoolsLength() external view returns (uint256) {\n', '    return pools.length;\n', '  }\n', '\n', '  function getActivePoolsList() external view returns (address[] memory output) {\n', '    uint256 len = pools.length;\n', '    uint256 activeLen = 0;\n', '\n', '    for (uint256 i; i < len; i++) {\n', '      if (poolsData[pools[i]].active) {\n', '        activeLen++;\n', '      }\n', '    }\n', '\n', '    output = new address[](activeLen);\n', '    uint256 ai;\n', '    for (uint256 i; i < len; i++) {\n', '      if (poolsData[pools[i]].active) {\n', '        output[ai++] = pools[i];\n', '      }\n', '    }\n', '  }\n', '\n', '  function _poke(address[] memory _pools, bool _bySlasher) internal {\n', '    (uint256 minInterval, uint256 maxInterval) = _getMinMaxReportInterval();\n', '    for (uint256 pi = 0; pi < _pools.length; pi++) {\n', '      PokeVars memory pv;\n', '      pv.pool = PowerIndexPoolInterface(_pools[pi]);\n', '\n', '      Pool storage pd = poolsData[address(pv.pool)];\n', '      require(pd.active, "NOT_ACTIVE");\n', '      require(pd.lastWeightsUpdate + minInterval < block.timestamp, "MIN_INTERVAL_NOT_REACHED");\n', '      if (_bySlasher) {\n', '        require(pd.lastWeightsUpdate + maxInterval < block.timestamp, "MAX_INTERVAL_NOT_REACHED");\n', '      }\n', '      (pv.minWPS, pv.maxWPS) = pv.pool.getWeightPerSecondBounds();\n', '\n', '      if (address(pd.wrapper) == address(0)) {\n', '        pv.tokens = pv.pool.getCurrentTokens();\n', '      } else {\n', '        pv.tokens = pd.wrapper.getCurrentTokens();\n', '        pv.piTokens = pv.pool.getCurrentTokens();\n', '      }\n', '      pv.tokensLen = pv.tokens.length;\n', '\n', '      pv.fromTimestamp = block.timestamp + 1;\n', '\n', '      (uint256[3][] memory weightsChange, uint256 lenToPush) =\n', '        _computeWeightsChangeWithEvent(\n', '          pv.pool,\n', '          pv.tokens,\n', '          pv.minWPS,\n', '          pv.maxWPS,\n', '          pv.fromTimestamp,\n', '          pv.fromTimestamp + weightsChangeDuration\n', '        );\n', '\n', '      PowerIndexPoolController.DynamicWeightInput[] memory dws;\n', '      dws = new PowerIndexPoolController.DynamicWeightInput[](lenToPush);\n', '\n', '      for (uint256 i = 0; i < pv.tokensLen; i++) {\n', '        uint256 wps =\n', '          getWeightPerSecond(\n', '            weightsChange[i][1],\n', '            weightsChange[i][2],\n', '            pv.fromTimestamp,\n', '            pv.fromTimestamp + weightsChangeDuration\n', '          );\n', '\n', '        if (wps > pv.maxWPS) {\n', '          if (weightsChange[i][1] > weightsChange[i][2]) {\n', '            weightsChange[i][2] = bsub(weightsChange[i][1], mul(weightsChangeDuration, pv.maxWPS));\n', '          } else {\n', '            weightsChange[i][2] = badd(weightsChange[i][1], mul(weightsChangeDuration, pv.maxWPS));\n', '          }\n', '        }\n', '\n', '        if (wps >= pv.minWPS) {\n', '          if (address(pd.wrapper) == address(0)) {\n', '            dws[pv.iToPush].token = pv.tokens[weightsChange[i][0]];\n', '          } else {\n', '            dws[pv.iToPush].token = pv.piTokens[weightsChange[i][0]];\n', '          }\n', '          dws[pv.iToPush].fromTimestamp = pv.fromTimestamp;\n', '          dws[pv.iToPush].targetTimestamp = pv.fromTimestamp + weightsChangeDuration;\n', '          dws[pv.iToPush].targetDenorm = weightsChange[i][2];\n', '          pv.iToPush++;\n', '        }\n', '      }\n', '\n', '      if (dws.length > 0) {\n', '        pd.controller.setDynamicWeightListByStrategy(dws);\n', '      }\n', '\n', '      pd.lastWeightsUpdate = block.timestamp;\n', '    }\n', '  }\n', '\n', '  function _reward(\n', '    uint256 _reporterId,\n', '    uint256 _gasStart,\n', '    uint256 _compensationPlan,\n', '    bytes calldata _rewardOpts\n', '  ) internal {\n', '    powerPoke.reward(_reporterId, bsub(_gasStart, gasleft()), _compensationPlan, _rewardOpts);\n', '  }\n', '\n', '  function _getMinMaxReportInterval() internal view returns (uint256 min, uint256 max) {\n', '    return powerPoke.getMinMaxReportIntervals(address(this));\n', '  }\n', '}']