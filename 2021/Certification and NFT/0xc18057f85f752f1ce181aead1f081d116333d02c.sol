['pragma solidity ^0.5.16;\n', '\n', 'import "./ErrorReporter.sol";\n', 'import "./ComptrollerStorage.sol";\n', '/**\n', ' * @title ComptrollerCore\n', ' * @dev Storage for the comptroller is at this address, while execution is delegated to the `comptrollerImplementation`.\n', ' * CTokens should reference this contract as their comptroller.\n', ' */\n', 'contract Unitroller is UnitrollerAdminStorage, ComptrollerErrorReporter {\n', '\n', '    /**\n', '      * @notice Emitted when pendingComptrollerImplementation is changed\n', '      */\n', '    event NewPendingImplementation(address oldPendingImplementation, address newPendingImplementation);\n', '\n', '    /**\n', '      * @notice Emitted when pendingComptrollerImplementation is accepted, which means comptroller implementation is updated\n', '      */\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    /**\n', '      * @notice Event emitted when the Fuse admin renounces their rights\n', '      */\n', '    event FuseAdminRightsRenounced();\n', '\n', '    /**\n', '      * @notice Event emitted when the admin renounces their rights\n', '      */\n', '    event AdminRightsRenounced();\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is changed\n', '      */\n', '    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n', '\n', '    /**\n', '      * @notice Emitted when pendingAdmin is accepted, which means admin is updated\n', '      */\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '\n', '    constructor() public {\n', '        // Set admin to caller\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /*** Admin Functions ***/\n', '    function _setPendingImplementation(address newPendingImplementation) public returns (uint) {\n', '        if (!hasAdminRights()) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_IMPLEMENTATION_OWNER_CHECK);\n', '        }\n', '\n', '        address oldPendingImplementation = pendingComptrollerImplementation;\n', '\n', '        pendingComptrollerImplementation = newPendingImplementation;\n', '\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '    * @notice Accepts new implementation of comptroller. msg.sender must be pendingImplementation\n', "    * @dev Admin function for new implementation to accept it's role as implementation\n", '    * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '    */\n', '    function _acceptImplementation() public returns (uint) {\n', '        // Check caller is pendingImplementation and pendingImplementation ≠ address(0)\n', '        if (msg.sender != pendingComptrollerImplementation || pendingComptrollerImplementation == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_PENDING_IMPLEMENTATION_ADDRESS_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldImplementation = comptrollerImplementation;\n', '        address oldPendingImplementation = pendingComptrollerImplementation;\n', '\n', '        comptrollerImplementation = pendingComptrollerImplementation;\n', '\n', '        pendingComptrollerImplementation = address(0);\n', '\n', '        emit NewImplementation(oldImplementation, comptrollerImplementation);\n', '        emit NewPendingImplementation(oldPendingImplementation, pendingComptrollerImplementation);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '\n', '    /**\n', '      * @notice Renounce Fuse admin rights.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _renounceFuseAdminRights() external returns (uint) {\n', '        // Check caller = admin\n', '        if (!hasAdminRights()) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.RENOUNCE_ADMIN_RIGHTS_OWNER_CHECK);\n', '        }\n', '\n', '        // Check that rights have not already been renounced\n', '        if (!fuseAdminHasRights) return uint(Error.NO_ERROR);\n', '\n', '        // Set fuseAdminHasRights to false\n', '        fuseAdminHasRights = false;\n', '\n', '        // Emit FuseAdminRightsRenounced()\n', '        emit FuseAdminRightsRenounced();\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Renounce admin rights.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _renounceAdminRights() external returns (uint) {\n', '        // Check caller = admin\n', '        if (!hasAdminRights()) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.RENOUNCE_ADMIN_RIGHTS_OWNER_CHECK);\n', '        }\n', '\n', '        // Check that rights have not already been renounced\n', '        if (!adminHasRights) return uint(Error.NO_ERROR);\n', '\n', '        // Set adminHasRights to false\n', '        adminHasRights = false;\n', '\n', '        // Emit AdminRightsRenounced()\n', '        emit AdminRightsRenounced();\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\n', '      * @param newPendingAdmin New pending admin.\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _setPendingAdmin(address newPendingAdmin) public returns (uint) {\n', '        // Check caller = admin\n', '        if (!hasAdminRights()) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.SET_PENDING_ADMIN_OWNER_CHECK);\n', '        }\n', '\n', '        // Save current value, if any, for inclusion in log\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        // Emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin)\n', '        emit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\n', '      * @dev Admin function for pending admin to accept role and update admin\n', '      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function _acceptAdmin() public returns (uint) {\n', '        // Check caller is pendingAdmin and pendingAdmin ≠ address(0)\n', '        if (msg.sender != pendingAdmin || msg.sender == address(0)) {\n', '            return fail(Error.UNAUTHORIZED, FailureInfo.ACCEPT_ADMIN_PENDING_ADMIN_CHECK);\n', '        }\n', '\n', '        // Save current values for inclusion in log\n', '        address oldAdmin = admin;\n', '        address oldPendingAdmin = pendingAdmin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '        emit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '        return uint(Error.NO_ERROR);\n', '    }\n', '\n', '    /**\n', '     * @dev Delegates execution to an implementation contract.\n', '     * It returns to the external caller whatever the implementation returns\n', '     * or forwards reverts.\n', '     */\n', '    function () payable external {\n', '        // delegate all other functions to current implementation\n', '        (bool success, ) = comptrollerImplementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '              let free_mem_ptr := mload(0x40)\n', '              returndatacopy(free_mem_ptr, 0, returndatasize)\n', '\n', '              switch success\n', '              case 0 { revert(free_mem_ptr, returndatasize) }\n', '              default { return(free_mem_ptr, returndatasize) }\n', '        }\n', '    }\n', '}']