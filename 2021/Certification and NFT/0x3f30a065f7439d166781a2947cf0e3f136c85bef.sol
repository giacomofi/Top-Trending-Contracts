['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', 'contract Gov is Governable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public thresholdPropose;\n', '    \n', '    uint256 public proposeCount;\n', '    address public stakeToken;\n', '    \n', '    \n', '    struct Propose {\n', '        address payable creator;\n', '        string subject;\n', '        string content;\n', '        uint endTime;\n', '        uint span;\n', '        uint totalStake;\n', '        uint yes;\n', '        uint no;\n', '    }\n', '\n', '   \n', '    \n', '    struct User{\n', '        uint stakeEndTime;\n', '        uint256 totalYes;\n', '        uint256 totalNo;\n', '        uint256 totalStake;\n', '    }\n', '\n', '    Propose[] public proposes;\n', '    mapping(uint256=>mapping(address => User)) public users;\n', '\n', '    \n', '\n', '    // account => amount of daily staking\n', '    mapping(address => uint256) public myTotalStake;\n', ' \n', '\n', '   // event Staked (address sender, uint256 amount);\n', '    event UnStaked (address sender,uint propID, uint256 amount);\n', '    event Withdrawn (address sender, uint256 amount);\n', '  \n', '  \n', '    function initialize(address _governor,address _stakeToken) public governance  {\n', '        require(msg.sender == governor || governor == address(0), "invalid governor");\n', '        governor = _governor;\n', '        stakeToken = _stakeToken;\n', '        thresholdPropose = 100000 ether; //tmp 10w\n', '\n', '        // config[StakeTokenAddress] = uint(0xAbF690E2EbC6690c4Fdc303fc3eE0FBFEb1818eD);\t\t// Rinkeby\n', '        //config[StakeTokenAddress] = uint(0x6669Ee1e6612E1B43eAC84d4CB9a94Af0A98E740);//uint(0x1C9491865a1DE77C5b6e19d2E6a5F1D7a6F2b25F);//matter //test\n', '    }\n', '\n', '\n', '\tevent CreatePropose(uint indexed propID, string subject, string content, uint span, uint stakeAmount);\n', '    function propose(string memory _subject, string memory _content, uint _span, uint _stakeAmount) public virtual {\n', '\t\taddress sender = msg.sender;\n', "\t\trequire(_span >= 3 days, 'Span is too short'); //tmp 3day\n", "\t\trequire(_span <= 7 days, 'Span is too long');\n", "\t\trequire(_stakeAmount >= thresholdPropose, 'Proponent has not enough Matter!');\n", '\t\t\n', '\t\tuint propID = proposes.length;\n', '      \n', '        IERC20 _stakeToken = IERC20(stakeToken);\n', '        _stakeToken.transferFrom(sender, address(this), _stakeAmount);        // transfer amount of staking to contract\n', '        //_stakeToken.approve(address(this), 0);                          // reset allowance to 0\n', '        \n', '        myTotalStake[sender] += _stakeAmount.sub(100 ether); \n', '        users[propID][sender].stakeEndTime = now.add(_span);\n', '        users[propID][sender].totalStake += _stakeAmount.sub(100 ether);\n', '        \n', '        Propose memory prop;\n', '        prop.creator = msg.sender;\n', '        prop.subject = _subject;\n', '        prop.content = _content;\n', '        prop.endTime = now.add(_span);\n', '        prop.span = _span;\n', '        proposes.push(prop);\n', '        proposeCount=propID.add(1);\n', '        \n', '        emit CreatePropose(propID, _subject,  _content,  _span, _stakeAmount);\n', '     }\n', '    \n', '\n', '    function unStaking(uint propID) public virtual {\n', '        address sender = msg.sender;\n', '        uint amount = users[propID][sender].totalStake;\n', '        require(users[propID][sender].stakeEndTime < now, "Staking not due");\n', '        require(amount > 0, "no matter to unStaking");\n', '        \n', '        IERC20(stakeToken).transfer(sender, amount);\n', '        myTotalStake[sender] = myTotalStake[sender].sub(amount);        \n', '        users[propID][sender].totalStake = 0;\n', '        emit UnStaked(sender,propID, amount);\n', '    }\n', '\n', '\n', '    function getVotes(uint propID) public view returns(uint ,uint , uint ) {//uint totalStake,uint yes, uint no\n', '        return (proposes[propID].totalStake,proposes[propID].yes,proposes[propID].no);\n', '    }\n', '    \n', '    function getResult(uint propID) public view returns(uint) {//1 yes 2 no 0 pending\n', '        if (now<proposes[propID].endTime)\n', '            return 0;\n', '        if((proposes[propID].yes>proposes[propID].no)&&(proposes[propID].totalStake>=2000000 ether))//tmp 200w\n', '            return 1;\n', '        else \n', '            return 2;\n', ' \n', '    }\n', '\n', '    event Vote(address indexed user, uint indexed propID, uint voteType, uint amount);\n', '    function vote(uint propID, uint voteType, uint amount) public virtual {  //_vote=1 yes  _vote=2 no\n', '        address sender = msg.sender;\n', '        require(amount > 0, "amount must > 0");\n', '        require(now<proposes[propID].endTime,"prop is over");\n', '        IERC20 _stakeToken = IERC20(stakeToken);\n', '        _stakeToken.transferFrom(sender, address(this), amount);  \n', '        users[propID][sender].stakeEndTime = now.add(proposes[propID].span);\n', '        myTotalStake[sender] = myTotalStake[sender].add(amount);\n', '        users[propID][sender].totalStake = users[propID][sender].totalStake.add(amount);\n', '\n', '        if (voteType==1) {//yes\n', '            users[propID][sender].totalYes = users[propID][sender].totalYes.add(amount);\n', '            proposes[propID].yes = proposes[propID].yes.add(amount);\n', '        }else{\n', '            users[propID][sender].totalNo = users[propID][sender].totalNo.add(amount);\n', '            proposes[propID].no = proposes[propID].no.add(amount);\n', '        }\n', '        emit Vote(sender, propID, voteType, amount);\n', '        \n', '        proposes[propID].totalStake = proposes[propID].totalStake.add(amount);\n', '    }\n', '    \n', '   \n', '    function transferFee(address payable to, uint amount) public governance {\n', '        to.transfer(amount);\n', '    }\n', '    \n', '    function transferStakeFee(address payable to, uint amount) public governance {\n', '        IERC20(stakeToken).transfer(to, amount);\n', '    }    \n', '    uint256[50] private __gap;\n', '}']