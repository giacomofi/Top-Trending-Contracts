['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.8.3 <0.9.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indinTokening whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indinTokening whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indinTokening whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/extensions/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/extensions/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Enumerable is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the total amount of tokens stored by the contract.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n', "     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n", '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    /**\n', '     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n', '     * Use along with {totalSupply} to enumerate all tokens.\n', '     */\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an applinTokenion\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n', ' * the Metadata extension, but not including the Enumerable extension, which is available separately as\n', ' * {ERC721Enumerable}.\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n', '    using Address for address;\n', '    using Strings for uint256;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping (uint256 => address) private _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping (address => uint256) private _balances;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n', '        return interfaceId == type(IERC721).interfaceId\n', '            || interfaceId == type(IERC721Metadata).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        string memory baseURI = _baseURI();\n', '        return bytes(baseURI).length > 0\n', '            ? string(abi.encodePacked(baseURI, tokenId.toString()))\n', "            : '';\n", '    }\n', '\n', '    /**\n', '     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n', '     * in child contracts.\n', '     */\n', '    function _baseURI() internal view virtual returns (string memory) {\n', '        return "";\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[owner] -= 1;\n', '        delete _owners[tokenId];\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve `to` to operate on `tokenId`\n', '     *\n', '     * Emits a {Approval} event.\n', '     */\n', '    function _approve(address to, uint256 tokenId) internal virtual {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (to.isContract()) {\n', '            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n', '                return retval == IERC721Receiver(to).onERC721Received.selector;\n', '            } catch (bytes memory reason) {\n', '                if (reason.length == 0) {\n', '                    revert("ERC721: transfer to non ERC721Receiver implementer");\n', '                } else {\n', '                    // solhint-disable-next-line no-inline-assembly\n', '                    assembly {\n', '                        revert(add(32, reason), mload(reason))\n', '                    }\n', '                }\n', '            }\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/extensions/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '\n', '/**\n', ' * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n', ' * enumerability of all the token ids in the contract as well as all token ids owned by each\n', ' * account.\n', ' */\n', 'abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] private _allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n', '        return interfaceId == type(IERC721Enumerable).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n', '        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '        return _ownedTokens[owner][index];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n', '        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, tokenId);\n', '\n', '        if (from == address(0)) {\n', '            _addTokenToAllTokensEnumeration(tokenId);\n', '        } else if (from != to) {\n', '            _removeTokenFromOwnerEnumeration(from, tokenId);\n', '        }\n', '        if (to == address(0)) {\n', '            _removeTokenFromAllTokensEnumeration(tokenId);\n', '        } else if (to != from) {\n', '            _addTokenToOwnerEnumeration(to, tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n", '     * @param to address representing the new owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '        uint256 length = ERC721.balanceOf(to);\n', '        _ownedTokens[to][length] = tokenId;\n', '        _ownedTokensIndex[tokenId] = length;\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's token tracking data structures.\n", '     * @param tokenId uint256 ID of the token to be added to the tokens list\n', '     */\n', '    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '        _allTokensIndex[tokenId] = _allTokens.length;\n', '        _allTokens.push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n", '     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n', '     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n', '     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', "        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n", '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n', '        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary\n', '        if (tokenIndex != lastTokenIndex) {\n', '            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '        }\n', '\n', '        // This also deletes the contents at the last position of the array\n', '        delete _ownedTokensIndex[tokenId];\n', '        delete _ownedTokens[from][lastTokenIndex];\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's token tracking data structures.\n", '     * This has O(1) time complexity, but alters the order of the _allTokens array.\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list\n', '     */\n', '    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n', '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = _allTokens.length - 1;\n', '        uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n', '        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n', "        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n", '        uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '\n', '        // This also deletes the contents at the last position of the array\n', '        delete _allTokensIndex[tokenId];\n', '        _allTokens.pop();\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ERC721OnOpenSea.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'interface ProxyRegistry {\n', '    function proxies(address) external view returns (address);\n', '}\n', '\n', '/**\n', ' * @dev helper contract to allow gasless OpenSea listings\n', ' */\n', 'contract ERC721OnOpenSea is ERC721Enumerable {\n', '    address public proxyRegistryAddress;\n', '\n', '    constructor(\n', '        string memory name,\n', '        string memory symbol,\n', '        address registryProxyAddress_\n', '    ) ERC721(name, symbol) {\n', '        proxyRegistryAddress = registryProxyAddress_;\n', '    }\n', '\n', '    function isApprovedForAll(address owner, address operator)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n', '\n', '        if (address(proxyRegistry.proxies(owner)) == operator) {\n', '            return true;\n', '        }\n', '\n', '        return super.isApprovedForAll(owner, operator);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IUniswapV2Router02Minimal.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'interface IUniswapV2Router02Minimal {\n', '    function WETH() external pure returns (address);\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '}\n', '\n', '\n', '// File contracts/interfaces/InQCToken.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'interface InQCToken {\n', '    function mint(address, uint256) external;\n', '    function swapAndBurn(uint256) external;\n', '}\n', '\n', '\n', '// File contracts/nQCTokenRescue.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev we rescue the nTokens\n', ' */\n', 'contract nQCTokenRescue {\n', '    // reference to, basically, self\n', '    InQCToken private _nQCToken;\n', '\n', '    // total number of nTokens that exist\n', '    uint256 public immutable totalnTokens;\n', '\n', '    // how many nTokens initially existed to be rescued\n', '    uint256 private immutable _remainingnTokensInitial;\n', '\n', '    // how many nTokens are left to be rescued\n', '    uint256 public remainingnTokens;\n', '\n', '    // when rescues can begin\n', '    uint256 public immutable rescueStartTime;\n', '\n', '    // initial price of rescues\n', '    uint256 public immutable rescuePriceInitial;\n', '\n', '    // current price of rescues\n', '    uint256 public rescuePrice;\n', '\n', '    // amount of rescue price increases\n', '    uint256 public immutable rescuePriceIncrement;\n', '\n', '    // amount of nTokens to rescue before price increase is triggered\n', '    uint256 public immutable rescueTrancheSize;\n', '\n', '    // how many blocks must exist between rescues for a given address\n', '    uint256 public immutable rescueRateLimit;\n', '\n', '    // track last block that an address performed a rescue\n', '    mapping(address => uint256) public rescueLastBlock;\n', '\n', '    // how many funds have been collected for rescues (resets every tranche)\n', '    uint256 private collectedRescueFunds;\n', '\n', '    event Rescue(address indexed rescuer, uint256 tokenId, uint256 price);\n', '\n', '    constructor(\n', '        InQCToken nQCToken_,\n', '        uint256[2] memory nTokenDetails_,\n', '        uint256[5] memory rescueDetails_\n', '    ) {\n', '        _nQCToken = nQCToken_;\n', '\n', '        totalnTokens = nTokenDetails_[0];\n', '        _remainingnTokensInitial = nTokenDetails_[1];\n', '        remainingnTokens = nTokenDetails_[1];\n', '\n', '        rescuePriceInitial = rescueDetails_[0];\n', '        rescuePrice = rescueDetails_[0];\n', '        rescuePriceIncrement = rescueDetails_[1];\n', '        rescueTrancheSize = rescueDetails_[2];\n', '        rescueStartTime = rescueDetails_[3];\n', '        rescueRateLimit = rescueDetails_[4];\n', '    }\n', '\n', '    /**\n', '     * @dev public function to rescue a nToken\n', '     */\n', '    function rescue() public payable {\n', '        // require that rescues have globally started\n', '        require(block.timestamp >= rescueStartTime, "too early");\n', '        \n', '        // require that address has passed their rate limit\n', '        require(\n', '            block.number >= rescueLastBlock[msg.sender] + rescueRateLimit,\n', '            "too soon"\n', '        );\n', '\n', '        // require that there are nTokens left to be rescued\n', '        require(remainingnTokens > 0, "no nTokens left");\n', '\n', '        // require that the correct amount is paid (at minimum)\n', '        require(msg.value >= rescuePrice, "value too low");\n', '\n', "        // update address' last block rate limit tracker\n", '        rescueLastBlock[msg.sender] = block.number;\n', '\n', '        // grab the current rescue price (for use after updating `rescuePrice`)\n', '        uint256 currentRescuePrice = rescuePrice;\n', '\n', '        // update the amount of funds that have been used for rescues\n', '        collectedRescueFunds += currentRescuePrice;\n', '\n', '        // decrement remaining nTokens\n', '        remainingnTokens--;\n', '\n', '        // if we are at a tranch boundary, OR, there are no remaining nTokens, then\n', '        // we want to update the price and swap & burn all collected ETH from previous\n', '        // tranche\n', '        if (\n', '            (_remainingnTokensInitial - remainingnTokens) % rescueTrancheSize == 0 ||\n', '            remainingnTokens == 0\n', '        ) {\n', '            // if there are no more nTokens, set rescuePrice at 0 for cleanup sake\n', '            if (remainingnTokens == 0) {\n', '                rescuePrice = 0;\n', '            } else {\n', '                // otherwise, increment rescuePrice by the increment amount\n', '                rescuePrice += rescuePriceIncrement;\n', '            }\n', '\n', '            // swap and burn collected funds\n', '            _nQCToken.swapAndBurn(collectedRescueFunds);\n', '\n', '            // reset collected funds back to 0\n', '            collectedRescueFunds = 0;\n', '        }\n', '\n', '        // get the tokenId for the nToken to mint, mint it\n', '        uint256 tokenId = totalnTokens - remainingnTokens;\n', '        _nQCToken.mint(msg.sender, tokenId);\n', '\n', '        // if the user overpaid, refund their Ether\n', '        if (msg.value > currentRescuePrice) {\n', '            payable(msg.sender).transfer(msg.value - currentRescuePrice);\n', '        }\n', '\n', '        emit Rescue(msg.sender, tokenId, rescuePrice);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/nQCTokenAuction.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '/**\n', ' * @dev we auction the genesis nTokens\n', ' */\n', 'contract nQCTokenAuction {\n', '    // reference to, basically, self\n', '    InQCToken private _nQCToken;\n', '\n', '    // number of total genesis nTokens\n', '    uint256 public immutable genesisnTokens;\n', '\n', '    // start time of the first auction\n', '    uint64 public immutable auctionsStart;\n', '\n', '    // how long auctions last\n', '    uint64 public immutable auctionsDuration;\n', '\n', '    // time between end of one auction, and beginning of next auction\n', '    uint64 public immutable auctionsDistance;\n', '\n', '    // number of total auctions to perform\n', '    uint64 public immutable auctionsCount;\n', '\n', '    // number of nTokens being auctioned off per auction\n', '    uint64 public immutable auctionsnTokensPerAuction;\n', '\n', '    // minimum bid increase amount\n', '    uint64 public immutable auctionsBidIncrement;\n', '\n', '    // track number of bids that have been placed for a nToken\n', '    mapping(uint256 => uint256) public bidCount;\n', '\n', '    // track the highest bid amount for a nToken\n', '    mapping(uint256 => uint256) public highBidAmount;\n', '\n', '    // track the owner of the highest bid for a nToken\n', '    mapping(uint256 => address) public highBidOwner;\n', '\n', '    // track all of the bids (per address) for nTokens\n', '    mapping(uint256 => mapping(address => uint256)) public bidsByTokenByAddress;\n', '\n', '    event Bid(\n', '        address indexed account,\n', '        uint256 nTokenId,\n', '        uint256 amount,\n', '        uint256 bidCount\n', '    );\n', '    event WithdrawLowBid(\n', '        address indexed account,\n', '        uint256 nTokenId,\n', '        uint256 amount\n', '    );\n', '    event ClaimWinningBid(\n', '        address indexed account,\n', '        uint256 nTokenId,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(InQCToken nQCToken_, uint64[6] memory auctionsDetails_) {\n', '        _nQCToken = nQCToken_;\n', '\n', '        genesisnTokens = auctionsDetails_[3] * auctionsDetails_[4];\n', '\n', '        auctionsStart = auctionsDetails_[0];\n', '        auctionsDuration = auctionsDetails_[1];\n', '        auctionsDistance = auctionsDetails_[2];\n', '        auctionsCount = auctionsDetails_[3];\n', '        auctionsnTokensPerAuction = auctionsDetails_[4];\n', '        auctionsBidIncrement = auctionsDetails_[5];\n', '\n', '        require(auctionsDetails_[0] >= block.timestamp, "too late");\n', '    }\n', '\n', '    /**\n', '     * @dev helper function which returns two integers:\n', '     * 1) startId: the ID of a nToken which signifies the "lowest" ID of the most recent (or current) auction set\n', '     * 2) endId: the ID of a nToken which signifies the "highest" ID of the most recent (or current) auction set\n', '     * if (startId > endId), that means that no auction is currently happening, but exposes\n', '     *   information about the most recently completed auction\n', '     * if (startId <= endId), that means that an auction is currently happening, for that range of IDs\n', '     */\n', '    function auctionsState() public view returns (uint256, uint256) {\n', '        uint64 checkedAuctions = 0;\n', '        uint256 startId = 0;\n', '        uint256 endId = 0;\n', '\n', '        // loop through each auction\n', '        while (checkedAuctions <= auctionsCount) {\n', '            // calculate the start time of the current auction iteration\n', '            uint64 auctionStart =\n', '                auctionsStart +\n', '                    (checkedAuctions * (auctionsDuration + auctionsDistance));\n', '\n', "            // if the auction starts in the future, we're done with this while loop\n", '            if (auctionStart > block.timestamp) {\n', '                break;\n', '            }\n', '            // otherwise, the auction is currently in progress, or over\n', '\n', '            // regardless of in progress or over, we need to calculate the startID\n', '            // which is done by multiplying our auction iteration by number of nTokens\n', '            // per auction plus 1 because nToken ids start at 1\n', '            startId = checkedAuctions * auctionsnTokensPerAuction + 1;\n', '\n', '            // add duration to start time, compare to current timestamp, to see if\n', "            // we're currently in auction\n", '            if (auctionStart + auctionsDuration > block.timestamp) {\n', "                // if we're in an auction, break the loop and don't update endId\n", '                break;\n', '            } else {\n', '                // if the auction ended in the past, update endId\n', '                endId =\n', '                    checkedAuctions *\n', '                    auctionsnTokensPerAuction +\n', '                    auctionsnTokensPerAuction;\n', '            }\n', '\n', '            // iterate\n', '            checkedAuctions++;\n', '        }\n', '\n', '        return (startId, endId);\n', '    }\n', '\n', '    /**\n', '     * @dev how many genesis nTokens are remaining\n', '     */\n', '    function remainingGenesisnTokens() public view returns (uint256) {\n', '        (, uint256 endId) = auctionsState();\n', '        return genesisnTokens - endId;\n', '    }\n', '\n', '    /**\n', '     * @dev place a bid for a nToken, referenced by its index in the current auction\n', '     */\n', '    function bid(uint64 index) public payable {\n', '        (uint256 startId, uint256 endId) = auctionsState();\n', '\n', '        // bids can only be placed while in an auction\n', '        require(startId > endId, "not in auction");\n', '\n', '        // nTokens are referenced by their index in the auction\n', '        require(index < auctionsnTokensPerAuction, "bad index");\n', '        uint256 nTokenId = startId + index;\n', '\n', '        // users may increase their bid by sending the difference of the total amount\n', '        // they want to bid, and their current bid\n', '        uint256 newBid = bidsByTokenByAddress[nTokenId][msg.sender] + msg.value;\n', '\n', '        // make sure their new bid covers the bid increment amount\n', '        require(\n', '            newBid >= highBidAmount[nTokenId] + auctionsBidIncrement,\n', '            "not enough"\n', '        );\n', '\n', '        // increment the bid count\n', '        bidCount[nTokenId] += 1;\n', '\n', '        // set the high bid amount\n', '        highBidAmount[nTokenId] = newBid;\n', '\n', '        // set the high bid owner\n', '        highBidOwner[nTokenId] = msg.sender;\n', '\n', "        // set the user's bid on this nToken (for withdraws, later)\n", '        bidsByTokenByAddress[nTokenId][msg.sender] = newBid;\n', '\n', '        emit Bid(msg.sender, nTokenId, newBid, bidCount[nTokenId]);\n', '    }\n', '\n', '    /**\n', '     * @dev bids which have been outbid can be "withdrawn" and their Ether returned\n', '     * highest current bid cannot be withdrawn\n', '     */\n', '    function withdrawLowBid(uint256 nTokenId) public {\n', '        // if user is the current highest bid for the nToken, no can withdraw\n', '        require(msg.sender != highBidOwner[nTokenId], "can\'t withdraw high bid");\n', '\n', '        // get reference to their bid amount\n', '        uint256 bidAmount = bidsByTokenByAddress[nTokenId][msg.sender];\n', '\n', '        // make sure the user actually has funds to withdraw\n', '        require(bidAmount > 0, "nothing to withdraw");\n', '\n', '        // reset their amount for this nToken to 0\n', '        bidsByTokenByAddress[nTokenId][msg.sender] = 0;\n', '\n', '        // send the user their funds\n', '        payable(msg.sender).transfer(bidAmount);\n', '\n', '        emit WithdrawLowBid(msg.sender, nTokenId, bidAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev when auction is over, highest bid can claim their nToken!\n', '     */\n', '    function claimWinningBid(uint256 nTokenId) public {\n', '        // confirm that the nToken being claimed belongs to a completed auction\n', '        (, uint256 endId) = auctionsState();\n', '        require(nTokenId <= endId, "nToken not claimable");\n', '\n', '        // if no bids have been placed on a nToken, they can be claimed first-come-first-serve\n', '        if (highBidOwner[nTokenId] != address(0)) {\n', '            // otherwise, require that user is the owner of highest bid\n', '            require(msg.sender == highBidOwner[nTokenId], "not winning bid");\n', '        }\n', '\n', '        // mint that nToken\n', '        _nQCToken.mint(msg.sender, nTokenId);\n', '\n', '        // only swap & burn if a bid actually exists\n', '        if (highBidAmount[nTokenId] > 0) {\n', '            _nQCToken.swapAndBurn(highBidAmount[nTokenId]);\n', '        }\n', '\n', '        emit ClaimWinningBid(msg.sender, nTokenId, highBidAmount[nTokenId]);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/nQCToken.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev we like the nTokens\n', ' */\n', 'contract nQCToken is InQCToken, nQCTokenRescue, nQCTokenAuction, ERC721OnOpenSea {\n', '    string private __baseURI;\n', '    \n', "    // there's an owner, but they can only update the BaseURI\n", '    address public owner;\n', '\n', '    // track the nToken names here\n', '    mapping(uint256 => string) public nTokenNames;\n', '\n', '    // how much does a name change cost\n', '    uint256 public nameChangePrice;\n', '\n', '    // reference to the token (HATE) that all funds will be swapped into\n', '    address public immutable HATE;\n', '\n', '    // reference to the address where all swapped HATE will be burned to\n', '    address public immutable burn;\n', '\n', '    // uniswap router address\n', '    IUniswapV2Router02Minimal public immutable uniswapV2Router;\n', '    \n', '    // events for public functions\n', '    event NamenToken(address indexed account, uint256 nTokenId, string name);\n', '    event UpdateBaseURI(string baseURI);\n', '    event RevokeOwner();\n', '\n', '    constructor(\n', '        address[4] memory addresses,\n', '        string memory baseURI_,\n', '        uint32 normalnTokens_,\n', '        uint256[5] memory rescueDetails_,\n', '        uint64[6] memory auctionsDetails_,\n', '        uint256 nameChangePrice_\n', '    )\n', '        ERC721OnOpenSea("nQCTokenRescue", "nQCT", addresses[3])\n', '        nQCTokenRescue(\n', '            InQCToken(address(this)),\n', '            [\n', '                uint256(\n', '                    auctionsDetails_[3] * auctionsDetails_[4] + normalnTokens_\n', '                ),\n', '                normalnTokens_\n', '            ],\n', '            rescueDetails_\n', '        )\n', '        nQCTokenAuction(InQCToken(address(this)), auctionsDetails_)\n', '    {\n', '        HATE = addresses[0];\n', '        uniswapV2Router = IUniswapV2Router02Minimal(addresses[1]);\n', '        burn = addresses[2];\n', '        __baseURI = baseURI_;\n', '        owner = msg.sender;\n', '        nameChangePrice = nameChangePrice_;\n', '    }\n', '\n', '    /**\n', '     * @dev override OZ ERC721 _baseURI() function\n', '     */\n', '    function _baseURI() internal view virtual override returns (string memory) {\n', '        return __baseURI;\n', '    }\n', '\n', '    /**\n', '     * @dev we want to be able to update this later, to fully decentralize it\n', '     */\n', '    function updateBaseURI(string calldata baseURI) public {\n', '        require(msg.sender == owner, "not owner");\n', '        __baseURI = baseURI;\n', '        emit UpdateBaseURI(baseURI);\n', '    }\n', '\n', '    /**\n', "     * @dev after getting baseURI into it's final form, revoke ownership\n", '     */\n', '    function revokeOwner() public {\n', '        require(msg.sender == owner, "not owner");\n', '        owner = address(0);\n', '        emit RevokeOwner();\n', '    }\n', '\n', '    /**\n', '     * @dev mint a new token to recipient with specified id, but only from current contract\n', '     */\n', '    function mint(address to_, uint256 tokenId_) public override {\n', '        require(msg.sender == address(this), "can\'t mint");\n', '        _mint(to_, tokenId_);\n', '    }\n', '\n', '    /**\n', '     * @dev given an amount of Ether, swap all for HATE and send to burn address\n', '     */\n', '    function swapAndBurn(uint256 _amount) public override {\n', '        require(msg.sender == address(this), "can\'t swap and burn");\n', '\n', '        address[] memory path = new address[](2);\n', '        path[0] = uniswapV2Router.WETH();\n', '        path[1] = HATE;\n', '\n', '        uniswapV2Router.swapExactETHForTokensSupportingFeeOnTransferTokens{\n', '            value: _amount\n', '        }(0, path, burn, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev owner of a nToken can name a nToken, once\n', '     */\n', '    function namenToken(uint256 nTokenId, string calldata nTokenName) external {\n', '        require(ownerOf(nTokenId) == msg.sender, "not your nToken");\n', '\n', "        // can only name a nToken if it's not already named\n", '        bytes memory currentName = bytes(nTokenNames[nTokenId]);\n', '        require(currentName.length == 0, "already named");\n', '\n', '        nTokenNames[nTokenId] = nTokenName;\n', '        IERC20(HATE).transferFrom(msg.sender, burn, nameChangePrice);\n', '\n', '        emit NamenToken(msg.sender, nTokenId, nTokenName);\n', '    }\n', '    }']