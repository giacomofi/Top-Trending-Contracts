['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-09\n', '*/\n', '\n', '/*\n', ' \n', '          _       _________ _______           _______ \n', '|\\     /|( (    /|\\__   __/(  ___  )|\\     /|(  ____ \\\n', '| )   ( ||  \\  ( |   ) (   | (   ) || )   ( || (    \\/\n', '| |   | ||   \\ | |   | |   | |   | || |   | || (__    \n', '| |   | || (\\ \\) |   | |   | |   | || |   | ||  __)   \n', '| |   | || | \\   |   | |   | | /\\| || |   | || (      \n', '| (___) || )  \\  |___) (___| (_\\ \\ || (___) || (____/\\\n', '(_______)|/    )_)\\_______/(____\\/_)(_______)(_______/\n', '                                                      \n', ' _______  _        _______ \n', '(  ___  )( (    /|(  ____ \\\n', '| (   ) ||  \\  ( || (    \\/\n', '| |   | ||   \\ | || (__    \n', '| |   | || (\\ \\) ||  __)   \n', '| |   | || | \\   || (      \n', '| (___) || )  \\  || (____/\\\n', '(_______)|/    )_)(_______/\n', ' \n', ' _______           _______ _________ _______ \n', '(  ____ )|\\     /|(  ___  )\\__   __/(  ___  )\n', '| (    )|| )   ( || (   ) |   ) (   | (   ) |\n', '| (____)|| (___) || |   | |   | |   | |   | |\n', '|  _____)|  ___  || |   | |   | |   | |   | |\n', '| (      | (   ) || |   | |   | |   | |   | |\n', '| )      | )   ( || (___) |   | |   | (___) |\n', '|/       |/     \\|(_______)   )_(   (_______)\n', '                                             \n', '\n', ' https://uniqueone.photo\n', ' \n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract OperatorRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event OperatorAdded(address indexed account);\n', '    event OperatorRemoved(address indexed account);\n', '\n', '    Roles.Role private _operators;\n', '\n', '    constructor () internal {\n', '\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(isOperator(_msgSender()), "OperatorRole: caller does not have the Operator role");\n', '        _;\n', '    }\n', '\n', '    function isOperator(address account) public view returns (bool) {\n', '        return _operators.has(account);\n', '    }\n', '\n', '    function _addOperator(address account) internal {\n', '        _operators.add(account);\n', '        emit OperatorAdded(account);\n', '    }\n', '\n', '    function _removeOperator(address account) internal {\n', '        _operators.remove(account);\n', '        emit OperatorRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract OwnableOperatorRole is Ownable, OperatorRole {\n', '    function addOperator(address account) public onlyOwner {\n', '        _addOperator(account);\n', '    }\n', '\n', '    function removeOperator(address account) public onlyOwner {\n', '        _removeOperator(account);\n', '    }\n', '}\n', '\n', 'contract ERC1155SaleNonceHolder is OwnableOperatorRole {\n', '    // keccak256(token, owner, tokenId) => nonce\n', '    mapping(bytes32 => uint256) public nonces;\n', '\n', '    // keccak256(token, owner, tokenId, nonce) => completed amount\n', '    mapping(bytes32 => uint256) public completed;\n', '\n', '    function getNonce(address token, uint256 tokenId, address owner) view public returns (uint256) {\n', '        return nonces[getNonceKey(token, tokenId, owner)];\n', '    }\n', '\n', '    function setNonce(address token, uint256 tokenId, address owner, uint256 nonce) public onlyOperator {\n', '        nonces[getNonceKey(token, tokenId, owner)] = nonce;\n', '    }\n', '\n', '    function getNonceKey(address token, uint256 tokenId, address owner) pure public returns (bytes32) {\n', '        return keccak256(abi.encodePacked(token, tokenId, owner));\n', '    }\n', '\n', '    function getCompleted(address token, uint256 tokenId, address owner, uint256 nonce) view public returns (uint256) {\n', '        return completed[getCompletedKey(token, tokenId, owner, nonce)];\n', '    }\n', '\n', '    function setCompleted(address token, uint256 tokenId, address owner, uint256 nonce, uint256 _completed) public onlyOperator {\n', '        completed[getCompletedKey(token, tokenId, owner, nonce)] = _completed;\n', '    }\n', '\n', '    function getCompletedKey(address token, uint256 tokenId, address owner, uint256 nonce) pure public returns (bytes32) {\n', '        return keccak256(abi.encodePacked(token, tokenId, owner, nonce));\n', '    }\n', '}']