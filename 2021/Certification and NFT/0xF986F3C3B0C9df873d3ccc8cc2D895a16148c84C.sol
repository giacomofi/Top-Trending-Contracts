['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'import "./interfaces/ICToken.sol";\n', 'import "./interfaces/ITrigger.sol";\n', '\n', '/**\n', ' * @notice Defines a trigger that is toggled if the Compound exchange rate decreases between consecutive checks. Under\n', ' * normal operation, this value should only increase\n', ' */\n', 'contract CompoundExchangeRate is ITrigger {\n', '  uint256 internal constant WAD = 10**18;\n', '\n', '  /// @notice Address of CToken market protected by this trigger\n', '  ICToken public immutable market;\n', '\n', '  /// @notice Last read exchangeRateStored\n', '  uint256 public lastExchangeRate;\n', '\n', '  /// @dev Due to rounding errors in the Compound Protocol, the exchangeRateStored may occassionally decrease by small\n', '  /// amount even when nothing is wrong. A large, very conservative tolerance is applied to ensure we do not\n', '  /// accidentally trigger in these cases. Even though a smaller tolerance would likely be ok, a non-trivial exploit\n', '  ///  will most likely cause the exchangeRateStored to decrease by more than 10,000 wei\n', '  uint256 public constant tolerance = 10000; // 10,000 wei tolerance\n', '\n', '  /**\n', '   * @param _market Is the address of the Compound market this trigger should protect\n', '   * @dev For definitions of other constructor parameters, see ITrigger.sol\n', '   */\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    string memory _description,\n', '    uint256[] memory _platformIds,\n', '    address _recipient,\n', '    address _market\n', '  ) ITrigger(_name, _symbol, _description, _platformIds, _recipient) {\n', '    // Set market\n', '    market = ICToken(_market);\n', '\n', "    // Save current exchange rate (immutables can't be read at construction, so we don't use `market` directly)\n", '    lastExchangeRate = ICToken(_market).exchangeRateStored();\n', '  }\n', '\n', '  /**\n', "   * @dev Checks if a CToken's exchange rate decreased. The exchange rate should never decrease, but may occasionally\n", '   * decrease slightly due to rounding errors\n', '   * @return True if trigger condition occured (i.e. exchange rate decreased), false otherwise\n', '   */\n', '  function checkTriggerCondition() internal override returns (bool) {\n', '    // Read this blocks exchange rate\n', '    uint256 _currentExchangeRate = market.exchangeRateStored();\n', '\n', '    // Check if current exchange rate is below current exchange rate, accounting for tolerance\n', '    bool _status = _currentExchangeRate < (lastExchangeRate - tolerance);\n', '\n', '    // Save the new exchange rate\n', '    lastExchangeRate = _currentExchangeRate;\n', '\n', '    // Return status\n', '    return _status;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'interface ICToken {\n', '  function totalReserves() external view returns (uint256);\n', '\n', '  function totalBorrows() external view returns (uint256);\n', '\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  function getCash() external view returns (uint256);\n', '\n', '  function exchangeRateStored() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', '/**\n', ' * @notice Abstract contract for creating or interacting with a Trigger contract\n', ' * @dev All trigger contracts created must inerit from this contract and conform to this interface\n', ' */\n', 'abstract contract ITrigger {\n', "  /// @notice Trigger name, analgous to an ERC-20 token's name\n", '  string public name;\n', '\n', "  /// @notice Trigger symbol, analgous to an ERC-20 token's symbol\n", '  string public symbol;\n', '\n', '  /// @notice Trigger description\n', '  string public description;\n', '\n', '  /// @notice Array of IDs of platforms covered by this trigger\n', '  uint256[] public platformIds;\n', '\n', '  /// @notice Returns address of recipient who receives subsidies for creating a protection market using this trigger\n', '  address public immutable recipient;\n', '\n', '  /// @notice Returns true if trigger condition has been met\n', '  bool public isTriggered;\n', '\n', '  /// @notice Emitted when the trigger is activated\n', '  event TriggerActivated();\n', '\n', '  /**\n', '   * @notice Returns array of IDs, where each ID corresponds to a platform covered by this trigger\n', '   * @dev See documentation for mapping of ID numbers to platforms\n', '   */\n', '  function getPlatformIds() external view returns (uint256[] memory) {\n', '    return platformIds;\n', '  }\n', '\n', '  /**\n', '   * @dev Executes trigger-specific logic to check if market has been triggered\n', '   * @return True if trigger condition occured, false otherwise\n', '   */\n', '  function checkTriggerCondition() internal virtual returns (bool);\n', '\n', '  /**\n', '   * @notice Checks trigger condition, sets isTriggered flag to true if condition is met, and returns the trigger status\n', '   * @return True if trigger condition occured, false otherwise\n', '   */\n', '  function checkAndToggleTrigger() external returns (bool) {\n', '    // Return true if trigger already toggled\n', '    if (isTriggered) return true;\n', '\n', '    // Return false if market has not been triggered\n', '    if (!checkTriggerCondition()) return false;\n', '\n', '    // Otherwise, market has been triggered\n', '    emit TriggerActivated();\n', '    isTriggered = true;\n', '    return isTriggered;\n', '  }\n', '\n', '  constructor(\n', '    string memory _name,\n', '    string memory _symbol,\n', '    string memory _description,\n', '    uint256[] memory _platformIds,\n', '    address _recipient\n', '  ) {\n', '    name = _name;\n', '    description = _description;\n', '    symbol = _symbol;\n', '    platformIds = _platformIds;\n', '    recipient = _recipient;\n', '  }\n', '}\n', '\n', '{\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999999\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']