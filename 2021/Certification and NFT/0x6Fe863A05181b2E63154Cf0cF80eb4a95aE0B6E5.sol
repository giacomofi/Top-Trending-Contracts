['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/introspection/ERC165Upgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC20/SafeERC20Upgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC721/ERC721HolderUpgradeable.sol";\n', '\n', 'import "./interfaces/IRegistrar.sol";\n', 'import "./interfaces/IStakingController.sol";\n', '\n', 'contract StakingController is\n', '  Initializable,\n', '  ContextUpgradeable,\n', '  ERC165Upgradeable,\n', '  ERC721HolderUpgradeable,\n', '  IStakingController\n', '{\n', '  using SafeERC20Upgradeable for IERC20Upgradeable;\n', '\n', '  IERC20Upgradeable private infinity;\n', '  IRegistrar private registrar;\n', '  address private controller;\n', '  uint256 public requestCount;\n', '\n', '  struct DomainData {\n', '    // Used to invalidate all existing requests whenever a request is fulfilled\n', '    uint256 nonce;\n', '    // Tracks the request which was fulfilled to create this domain\n', '    uint256 fulfilledRequest;\n', '  }\n', '\n', '  mapping(uint256 => Request) public requests;\n', '  mapping(uint256 => DomainData) public domainData;\n', '\n', '  struct Request {\n', '    uint256 parentId;\n', '    uint256 offeredAmount;\n', '    address requester;\n', '    string requestedName;\n', '    bool accepted;\n', '    uint256 domainNonce;\n', '  }\n', '\n', '  function initialize(IRegistrar _registrar, IERC20Upgradeable _infinity)\n', '    public\n', '    initializer\n', '  {\n', '    __ERC165_init();\n', '    __Context_init();\n', '    __ERC721Holder_init();\n', '\n', '    infinity = _infinity;\n', '    registrar = _registrar;\n', '    controller = address(this);\n', '  }\n', '\n', '  /**\n', '   * @notice placeDomainRequest allows a user to send a request for a new sub domain to a domains owner\n', '   * @param parentId is the id number of the parent domain to the sub domain being requested\n', '   * @param offeredAmount is the uint value of the amount of infinity request\n', '   * @param name is the name of the new domain being created\n', '   * @param requestUri is the uri to a JSON object which will have more details about the request (for ui)\n', '   **/\n', '  function placeDomainRequest(\n', '    uint256 parentId,\n', '    uint256 offeredAmount,\n', '    string memory name,\n', '    string memory requestUri\n', '  ) external override {\n', '    require(\n', '      registrar.domainExists(parentId),\n', '      "Staking Controller: Invalid Domain"\n', '    );\n', '    require(bytes(name).length > 0, "Staking Controller: Name is empty");\n', '\n', '    requestCount++;\n', '\n', "    // Calculate what the created domain's id would be so we can get the nonce\n", '    uint256 domainId = calculateDomainId(parentId, name);\n', '\n', '    require(\n', '      !registrar.domainExists(domainId),\n', '      "Staking Controller: Domain already exists."\n', '    );\n', '\n', '    uint256 domainNonce = domainData[domainId].nonce;\n', '\n', '    requests[requestCount] = Request({\n', '      parentId: parentId,\n', '      offeredAmount: offeredAmount,\n', '      requester: _msgSender(),\n', '      requestedName: name,\n', '      accepted: false,\n', '      domainNonce: domainNonce\n', '    });\n', '\n', '    emit DomainRequestPlaced(\n', '      parentId,\n', '      requestCount,\n', '      offeredAmount,\n', '      requestUri,\n', '      name,\n', '      _msgSender(),\n', '      domainNonce\n', '    );\n', '  }\n', '\n', '  /**\n', '   * @notice approveDomainRequest approves a domain request, allowing the domain to be created.\n', '   *      two different requests can be approved at a time, whichever requestor fulfills their\n', '   *      request first gets to fulfill the request.\n', '   * @param requestId is the id number of the request being accepted\n', '   **/\n', '  function approveDomainRequest(uint256 requestId) external override {\n', '    Request storage request = requests[requestId];\n', '\n', '    require(\n', '      request.requester != address(0),\n', '      "Staking Controller: Request doesn\'t exist"\n', '    );\n', '\n', '    require(\n', '      registrar.ownerOf(request.parentId) == _msgSender(),\n', '      "Staking Controller: Not Authorized Owner"\n', '    );\n', '    require(!request.accepted, "Staking Controller: Request already accepted");\n', '\n', '    uint256 domainId =\n', '      calculateDomainId(request.parentId, request.requestedName);\n', '\n', '    require(\n', '      request.domainNonce == domainData[domainId].nonce,\n', '      "Staking Controller: Request is outdated"\n', '    );\n', '\n', '    request.accepted = true;\n', '\n', '    emit DomainRequestApproved(requestId);\n', '  }\n', '\n', '  /**\n', '   *  @notice Fulfills a domain request, creating the domain.\n', '   *    Transfers tokens from requesters wallet into controller.\n', '   *  @param requestId is the id number of the request being fullfilled\n', '   *  @param royaltyAmount is the royalty amount the creator sets for resales on zAuction\n', '   *  @param metadata is the IPFS hash of the new domains information\n', '   *  @param lockOnCreation is a bool representing whether or not the metadata for this domain is locked\n', '   **/\n', '  function fulfillDomainRequest(\n', '    uint256 requestId,\n', '    uint256 royaltyAmount,\n', '    string memory metadata,\n', '    bool lockOnCreation\n', '  ) external override {\n', '    Request storage request = requests[requestId];\n', '\n', '    // Only allow requestor to fulfill\n', '    require(\n', '      _msgSender() == request.requester,\n', '      "Staking Controller: Only requester may fulfill."\n', '    );\n', '\n', '    require(request.accepted, "Staking Controller: Request not accepted");\n', '\n', '    uint256 predictedDomainId =\n', '      calculateDomainId(request.parentId, request.requestedName);\n', '\n', '    require(\n', '      request.domainNonce == domainData[predictedDomainId].nonce,\n', '      "Staking Controller: Request is outdated."\n', '    );\n', '\n', "    // This will fail if the user hasn't approved the token or have enough\n", '    infinity.safeTransferFrom(\n', '      request.requester,\n', '      controller,\n', '      request.offeredAmount\n', '    );\n', '\n', '    // This will fail if the domain already exists\n', '    uint256 domainId =\n', '      registrar.registerDomain(\n', '        request.parentId,\n', '        request.requestedName,\n', '        controller,\n', '        request.requester\n', '      );\n', '\n', '    /*\n', '     * This should never really happen, but if it does it means the controller\n', '     * is somehow calculating the domainId different than the Registrar which\n', "     * means we can't reliably track domain data\n", '     */\n', '    require(\n', '      predictedDomainId == domainId,\n', '      "Staking Controller: internal error, domain id\'s did not match."\n', '    );\n', '\n', '    // Increment the nonce on the domain data so any existing requests for this domain become invalid\n', '    uint256 newDomainNonce = domainData[domainId].nonce + 1;\n', '    domainData[domainId].nonce = newDomainNonce;\n', '    // Track the request which was fulfilled for this domain\n', '    domainData[domainId].fulfilledRequest = requestId;\n', '\n', '    registrar.setDomainMetadataUri(domainId, metadata);\n', '    registrar.setDomainRoyaltyAmount(domainId, royaltyAmount);\n', '    registrar.safeTransferFrom(controller, request.requester, domainId);\n', '\n', '    if (lockOnCreation) {\n', '      registrar.lockDomainMetadataForOwner(domainId);\n', '    }\n', '\n', '    emit DomainRequestFulfilled(\n', '      requestId,\n', '      request.requestedName,\n', '      request.requester,\n', '      domainId,\n', '      request.parentId,\n', '      newDomainNonce\n', '    );\n', '  }\n', '\n', '  /**\n', '   *  @notice Calculates what a child domain id would be.\n', '   *    This must always return the same id as what the ZNS Registrar would return\n', '   *  @param parentId id of the parent\n', '   *  @param name name of the child\n', '   **/\n', '  function calculateDomainId(uint256 parentId, string memory name)\n', '    public\n', '    pure\n', '    returns (uint256)\n', '  {\n', '    uint256 labelHash = uint256(keccak256(bytes(name)));\n', '    uint256 domainId =\n', '      uint256(keccak256(abi.encodePacked(parentId, labelHash)));\n', '\n', '    return domainId;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', 'import "../utils/AddressUpgradeable.sol";\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !AddressUpgradeable.isContract(address(this));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', 'import "../proxy/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC165Upgradeable.sol";\n', 'import "../proxy/Initializable.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    function __ERC165_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '    }\n', '\n', '    function __ERC165_init_unchained() internal initializer {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC20Upgradeable.sol";\n', 'import "../../math/SafeMathUpgradeable.sol";\n', 'import "../../utils/AddressUpgradeable.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./IERC721ReceiverUpgradeable.sol";\n', 'import "../../proxy/Initializable.sol";\n', '\n', '  /**\n', '   * @dev Implementation of the {IERC721Receiver} interface.\n', '   *\n', '   * Accepts all token transfers. \n', '   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n', '   */\n', 'contract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\n', '    function __ERC721Holder_init() internal initializer {\n', '        __ERC721Holder_init_unchained();\n', '    }\n', '\n', '    function __ERC721Holder_init_unchained() internal initializer {\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Receiver-onERC721Received}.\n', '     *\n', '     * Always returns `IERC721Receiver.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721EnumerableUpgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721MetadataUpgradeable.sol";\n', '\n', 'interface IRegistrar is\n', '  IERC721MetadataUpgradeable,\n', '  IERC721EnumerableUpgradeable\n', '{\n', '  // Emitted when a controller is removed\n', '  event ControllerAdded(address indexed controller);\n', '\n', '  // Emitted whenever a controller is removed\n', '  event ControllerRemoved(address indexed controller);\n', '\n', '  // Emitted whenever a new domain is created\n', '  event DomainCreated(\n', '    uint256 indexed id,\n', '    string name,\n', '    uint256 indexed nameHash,\n', '    uint256 indexed parent,\n', '    address minter,\n', '    address controller\n', '  );\n', '\n', '  // Emitted whenever the metadata of a domain is locked\n', '  event MetadataLocked(uint256 indexed id, address locker);\n', '\n', '  // Emitted whenever the metadata of a domain is unlocked\n', '  event MetadataUnlocked(uint256 indexed id);\n', '\n', '  // Emitted whenever the metadata of a domain is changed\n', '  event MetadataChanged(uint256 indexed id, string uri);\n', '\n', '  // Emitted whenever the royalty amount is changed\n', '  event RoyaltiesAmountChanged(uint256 indexed id, uint256 amount);\n', '\n', '  // Authorises a controller, who can register domains.\n', '  function addController(address controller) external;\n', '\n', '  // Revoke controller permission for an address.\n', '  function removeController(address controller) external;\n', '\n', '  // Registers a new sub domain\n', '  function registerDomain(\n', '    uint256 parentId,\n', '    string memory name,\n', '    address domainOwner,\n', '    address minter\n', '  ) external returns (uint256);\n', '\n', '  // Lock a domains metadata from being modified, can only be called by domain owner and if the metadata is unlocked\n', '  function lockDomainMetadata(uint256 id) external;\n', '\n', '  // Utility function to lock a domains metadata, used by controllers instead of a user.\n', '  function lockDomainMetadataForOwner(uint256 id) external;\n', '\n', '  // Unlocks a domains metadata, can only be called by the address that locked the metadata\n', '  function unlockDomainMetadata(uint256 id) external;\n', '\n', '  // Sets a domains metadata uri\n', '  function setDomainMetadataUri(uint256 id, string memory uri) external;\n', '\n', '  // Sets the asked royalty amount on a domain (amount is a percentage with 5 decimal places)\n', '  function setDomainRoyaltyAmount(uint256 id, uint256 amount) external;\n', '\n', '  // Checks whether or not a domain exists\n', '  function domainExists(uint256 id) external view returns (bool);\n', '\n', '  // Whether or not a domain specific by an id is available.\n', '  function isAvailable(uint256 id) external view returns (bool);\n', '\n', '  // Returns the original minter of a domain\n', '  function minterOf(uint256 id) external view returns (address);\n', '\n', '  // Checks if a domains metadata is locked\n', '  function isDomainMetadataLocked(uint256 id) external view returns (bool);\n', '\n', '  // Returns the address which locked the domain metadata\n', '  function domainMetadataLockedBy(uint256 id) external view returns (address);\n', '\n', '  // Gets the controller that registered a domain\n', '  function domainController(uint256 id) external view returns (address);\n', '\n', '  // Gets a domains current royalty amount\n', '  function domainRoyaltyAmount(uint256 id) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.3;\n', '\n', 'import "@openzeppelin/contracts-upgradeable/introspection/IERC165Upgradeable.sol";\n', 'import "@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol";\n', '\n', 'interface IStakingController is IERC165Upgradeable, IERC721ReceiverUpgradeable {\n', '  event DomainRequestPlaced(\n', '    uint256 indexed parentId,\n', '    uint256 indexed requestId,\n', '    uint256 offeredAmount,\n', '    string requestUri,\n', '    string name,\n', '    address requestor,\n', '    uint256 domainNonce\n', '  );\n', '\n', '  event DomainRequestApproved(uint256 indexed requestId);\n', '\n', '  event DomainRequestFulfilled(\n', '    uint256 indexed requestId,\n', '    string name,\n', '    address recipient,\n', '    uint256 indexed domainId,\n', '    uint256 indexed parentID,\n', '    uint256 domainNonce\n', '  );\n', '\n', '  event RequestWithdrawn(uint256 indexed requestId);\n', '\n', '  /**\n', '   * @notice placeDomainRequest allows a user to send a request for a new sub domain to a domains owner\n', '   * @param parentId is the id number of the parent domain to the sub domain being requested\n', '   * @param bidAmount is the uint value of the amount of infinity bid\n', '   * @param name is the name of the new domain being created\n', '   **/\n', '  function placeDomainRequest(\n', '    uint256 parentId,\n', '    uint256 bidAmount,\n', '    string memory name,\n', '    string memory requestUri\n', '  ) external;\n', '\n', '  /**\n', '   * @notice approveDomainRequest approves a domain request, allowing the domain to be created.\n', '   * @param requestId is the id number of the request being accepted\n', '   **/\n', '  function approveDomainRequest(uint256 requestId) external;\n', '\n', '  /**\n', '   * @notice Fulfills a domain bid, creating the domain.\n', '   *   Transfers tokens from bidders wallet into controller.\n', '   * @param bidId is the id number of the bid being fullfilled\n', '   * @param royaltyAmount is the royalty amount the creator sets for resales on zAuction\n', '   * @param metadata is the IPFS hash of the new domains information\n', '   * @param lockOnCreation is a bool representing whether or not the metadata for this domain is locked\n', '   **/\n', '  function fulfillDomainRequest(\n', '    uint256 bidId,\n', '    uint256 royaltyAmount,\n', '    string memory metadata,\n', '    bool lockOnCreation\n', '  ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165Upgradeable {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721ReceiverUpgradeable {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./IERC721Upgradeable.sol";\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721EnumerableUpgradeable is IERC721Upgradeable {\n', '\n', '    /**\n', '     * @dev Returns the total amount of tokens stored by the contract.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n', "     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n", '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    /**\n', '     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n', '     * Use along with {totalSupply} to enumerate all tokens.\n', '     */\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "./IERC721Upgradeable.sol";\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721MetadataUpgradeable is IERC721Upgradeable {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "../../introspection/IERC165Upgradeable.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721Upgradeable is IERC165Upgradeable {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '{\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "libraries": {}\n', '}']