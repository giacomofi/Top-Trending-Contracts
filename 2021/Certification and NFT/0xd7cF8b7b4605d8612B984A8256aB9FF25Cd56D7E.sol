['//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./OpenZeppelin/access/Ownable.sol";\n', 'import "./Interfaces/ISettings.sol";\n', '\n', 'contract Settings is Ownable, ISettings {\n', '\n', '    /// @notice the maximum auction length\n', '    uint256 public override maxAuctionLength;\n', '\n', '    /// @notice the longest an auction can ever be\n', '    uint256 public constant maxMaxAuctionLength = 8 weeks;\n', '\n', '    /// @notice the minimum auction length\n', '    uint256 public override minAuctionLength;\n', '\n', '    /// @notice the shortest an auction can ever be\n', '    uint256 public constant minMinAuctionLength = 1 days;\n', '\n', '    /// @notice governance fee max\n', '    uint256 public override governanceFee;\n', '\n', '    /// @notice 10% fee is max\n', '    uint256 public constant maxGovFee = 100;\n', '\n', '    /// @notice max curator fee\n', '    uint256 public override maxCuratorFee;\n', '\n', '    /// @notice the % bid increase required for a new bid\n', '    uint256 public override minBidIncrease;\n', '\n', '    /// @notice 10% bid increase is max \n', '    uint256 public constant maxMinBidIncrease = 100;\n', '\n', '    /// @notice 1% bid increase is min\n', '    uint256 public constant minMinBidIncrease = 10;\n', '\n', '    /// @notice the % of tokens required to be voting for an auction to start\n', '    uint256 public override minVotePercentage;\n', '\n', '    /// @notice the max % increase over the initial \n', '    uint256 public override maxReserveFactor;\n', '\n', '    /// @notice the max % decrease from the initial\n', '    uint256 public override minReserveFactor;\n', '\n', '    /// @notice the address who receives auction fees\n', '    address payable public override feeReceiver;\n', '\n', '    event UpdateMaxAuctionLength(uint256 _old, uint256 _new);\n', '\n', '    event UpdateMinAuctionLength(uint256 _old, uint256 _new);\n', '\n', '    event UpdateGovernanceFee(uint256 _old, uint256 _new);\n', '\n', '    event UpdateCuratorFee(uint256 _old, uint256 _new);\n', '\n', '    event UpdateMinBidIncrease(uint256 _old, uint256 _new);\n', '\n', '    event UpdateMinVotePercentage(uint256 _old, uint256 _new);\n', '\n', '    event UpdateMaxReserveFactor(uint256 _old, uint256 _new);\n', '\n', '    event UpdateMinReserveFactor(uint256 _old, uint256 _new);\n', '\n', '    event UpdateFeeReceiver(address _old, address _new);\n', '\n', '    constructor() {\n', '        maxAuctionLength = 2 weeks;\n', '        minAuctionLength = 3 days;\n', '        feeReceiver = payable(msg.sender);\n', '        minReserveFactor = 500;  // 50%\n', '        maxReserveFactor = 2000; // 200%\n', '        minBidIncrease = 50;     // 5%\n', '        maxCuratorFee = 100;\n', '        minVotePercentage = 500; // 50%\n', '    }\n', '\n', '    function setMaxAuctionLength(uint256 _length) external onlyOwner {\n', '        require(_length <= maxMaxAuctionLength, "max auction length too high");\n', '        require(_length > minAuctionLength, "max auction length too low");\n', '\n', '        emit UpdateMaxAuctionLength(maxAuctionLength, _length);\n', '\n', '        maxAuctionLength = _length;\n', '    }\n', '\n', '    function setMinAuctionLength(uint256 _length) external onlyOwner {\n', '        require(_length >= minMinAuctionLength, "min auction length too low");\n', '        require(_length < maxAuctionLength, "min auction length too high");\n', '\n', '        emit UpdateMinAuctionLength(minAuctionLength, _length);\n', '\n', '        minAuctionLength = _length;\n', '    }\n', '\n', '    function setGovernanceFee(uint256 _fee) external onlyOwner {\n', '        require(_fee <= maxGovFee, "fee too high");\n', '\n', '        emit UpdateGovernanceFee(governanceFee, _fee);\n', '\n', '        governanceFee = _fee;\n', '    }\n', '\n', '    function setMaxCuratorFee(uint256 _fee) external onlyOwner {\n', '        emit UpdateCuratorFee(governanceFee, _fee);\n', '\n', '        maxCuratorFee = _fee;\n', '    }\n', '\n', '    function setMinBidIncrease(uint256 _min) external onlyOwner {\n', '        require(_min <= maxMinBidIncrease, "min bid increase too high");\n', '        require(_min >= minMinBidIncrease, "min bid increase too low");\n', '\n', '        emit UpdateMinBidIncrease(minBidIncrease, _min);\n', '\n', '        minBidIncrease = _min;\n', '    }\n', '\n', '    function setMinVotePercentage(uint256 _min) external onlyOwner {\n', '        // 1000 is 100%\n', '        require(_min <= 1000, "min vote percentage too high");\n', '\n', '        emit UpdateMinVotePercentage(minVotePercentage, _min);\n', '\n', '        minVotePercentage = _min;\n', '    }\n', '\n', '    function setMaxReserveFactor(uint256 _factor) external onlyOwner {\n', '        require(_factor > minReserveFactor, "max reserve factor too low");\n', '\n', '        emit UpdateMaxReserveFactor(maxReserveFactor, _factor);\n', '\n', '        maxReserveFactor = _factor;\n', '    }\n', '\n', '    function setMinReserveFactor(uint256 _factor) external onlyOwner {\n', '        require(_factor < maxReserveFactor, "min reserve factor too high");\n', '\n', '        emit UpdateMinReserveFactor(minReserveFactor, _factor);\n', '\n', '        minReserveFactor = _factor;\n', '    }\n', '\n', '    function setFeeReceiver(address payable _receiver) external onlyOwner {\n', '        require(_receiver != address(0), "fees cannot go to 0 address");\n', '\n', '        emit UpdateFeeReceiver(feeReceiver, _receiver);\n', '\n', '        feeReceiver = _receiver;\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface ISettings {\n', '\n', '    function maxAuctionLength() external returns(uint256);\n', '\n', '    function minAuctionLength() external returns(uint256);\n', '\n', '    function maxCuratorFee() external returns(uint256);\n', '\n', '    function governanceFee() external returns(uint256);\n', '\n', '    function minBidIncrease() external returns(uint256);\n', '\n', '    function minVotePercentage() external returns(uint256);\n', '\n', '    function maxReserveFactor() external returns(uint256);\n', '\n', '    function minReserveFactor() external returns(uint256);\n', '\n', '    function feeReceiver() external returns(address payable);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']