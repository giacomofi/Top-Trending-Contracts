['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '/* Discussion:\n', ' * //discord.com/invite/66tafq3\n', ' */\n', '/* Description:\n', ' * Switch To Uniswap V3 Individual NFTs\n', ' */\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', 'contract ProposalCode {\n', '    string private _metadataLink;\n', '\n', '    constructor(string memory metadataLink) {\n', '        _metadataLink = metadataLink;\n', '    }\n', '\n', '    function getMetadataLink() public view returns (string memory) {\n', '        return _metadataLink;\n', '    }\n', '\n', '    function callOneTime(address) public {\n', '        _setFarmingSetup_0();\n', '        IMVDProxy proxy = IMVDProxy(msg.sender);\n', '        IStateHolder stateHolder = IStateHolder(proxy.getStateHolderAddress());\n', '        stateHolder.setBool(_toStateHolderKey("farming.authorized", _toString(0x44425bEf5356a3fA4c071c21039E608Bf5db487A)), false);\n', '        stateHolder.setBool(_toStateHolderKey("farming.authorized", _toString(0x607c1a69AeF6704e8F2EF52682e35338906644E4)), true);\n', '    }\n', '\n', '    function _setFarmingSetup_0() private {\n', '        FarmingSetupConfiguration[] memory configurations = new FarmingSetupConfiguration[](3);\n', '        configurations[0] = FarmingSetupConfiguration(false, true, 0, FarmingSetupInfo(576000, 12697000, 21187500000000000, 0, 0, 0x09946D4E4CCDE2A28Ef269d26D9423034f5333E1, 0x7b123f53421b1bF8533339BFBdc7C98aA94163db, true, 0, 0, -154800, 29400));\n', '        configurations[1] = FarmingSetupConfiguration(false, true, 1, FarmingSetupInfo(576000, 12697000, 8828125000000000, 0, 0, 0x09946D4E4CCDE2A28Ef269d26D9423034f5333E1, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, true, 0, 1, -108200, 7000));\n', '        configurations[2] = FarmingSetupConfiguration(false, true, 2, FarmingSetupInfo(576000, 12697000, 5296875000000000, 0, 0, 0x09946D4E4CCDE2A28Ef269d26D9423034f5333E1, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, true, 0, 2, -70000, 13000));\n', '        IFarmExtension(0x44425bEf5356a3fA4c071c21039E608Bf5db487A).setFarmingSetups(configurations);\n', '    }\n', '\n', '    function _toStateHolderKey(string memory a, string memory b) private pure returns(string memory) {\n', '        return _toLowerCase(string(abi.encodePacked(a, ".", b)));\n', '    }\n', '\n', '    function _toString(address _addr) private pure returns(string memory) {\n', '        bytes32 value = bytes32(uint256(_addr));\n', '        bytes memory alphabet = "0123456789abcdef";\n', '\n', '        bytes memory str = new bytes(42);\n', "        str[0] = '0';\n", "        str[1] = 'x';\n", '        for (uint i = 0; i < 20; i++) {\n', '            str[2+i*2] = alphabet[uint(uint8(value[i + 12] >> 4))];\n', '            str[3+i*2] = alphabet[uint(uint8(value[i + 12] & 0x0f))];\n', '        }\n', '        return string(str);\n', '    }\n', '\n', '    function _toLowerCase(string memory str) private pure returns(string memory) {\n', '        bytes memory bStr = bytes(str);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            bStr[i] = bStr[i] >= 0x41 && bStr[i] <= 0x5A ? bytes1(uint8(bStr[i]) + 0x20) : bStr[i];\n', '        }\n', '        return string(bStr);\n', '    }\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getStateHolderAddress() external view returns(address);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function setBool(string calldata varName, bool val) external returns(bool);\n', '}\n', '\n', 'struct FarmingSetupInfo {\n', '    uint256 blockDuration; // duration of setup\n', '    uint256 startBlock; // optional start block used for the delayed activation of the first setup\n', '    uint256 originalRewardPerBlock;\n', '    uint256 minStakeable; // minimum amount of staking tokens.\n', "    uint256 renewTimes; // if the setup is renewable or if it's one time.\n", '    address liquidityPoolTokenAddress; // address of the liquidity pool token\n', '    address mainTokenAddress; // eg. buidl address.\n', '    bool involvingETH; // if the setup involves ETH or not.\n', '    uint256 setupsCount; // number of setups created by this info.\n', '    uint256 lastSetupIndex; // index of last setup;\n', '    int24 tickLower; // Gen2 Only - tickLower of the UniswapV3 pool\n', '    int24 tickUpper; // Gen 2 Only - tickUpper of the UniswapV3 pool\n', '}\n', '\n', 'struct FarmingSetupConfiguration {\n', "    bool add; // true if we're adding a new setup, false we're updating it.\n", '    bool disable;\n', "    uint256 index; // index of the setup we're updating.\n", '    FarmingSetupInfo info; // data of the new or updated setup\n', '}\n', '\n', 'interface IFarmExtension {\n', '    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\n', '}']