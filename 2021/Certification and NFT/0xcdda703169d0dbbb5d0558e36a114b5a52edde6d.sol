['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a - b : 0;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuardUpgradeSafe is Initializable {\n', '    bool private _notEntered;\n', '\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '\n', '\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function initialize(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', 'contract RewardsDistributor is Configurable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public rewardsToken;\n', '\t\n', '    function initialize(address governor, address _rewardsToken) public initializer {\n', '        super.initialize(governor);\n', '        rewardsToken = _rewardsToken;\n', '    }\n', '    \n', '    function approvePool(address pool, uint amount) public governance {\n', '        //IERC20(rewardsToken).safeApprove(pool, amount);\n', '        IERC20(rewardsToken).approve(pool, amount);             // GT do not support safeApprove\n', '    }\n', '}\n', '\n', '\n', '// Inheritancea\n', 'interface IStakingRewards {\n', '    // Views\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    function rewards(address account) external view returns (uint256);\n', '\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    function getRewardForDuration() external view returns (uint256);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // Mutative\n', '\n', '    function stake(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function getReward() external;\n', '\n', '    function exit() external;\n', '}\n', '\n', 'abstract contract RewardsDistributionRecipient {\n', '    address public rewardsDistribution;\n', '\n', '    function notifyRewardAmount(uint256 reward) virtual external;\n', '\n', '    modifier onlyRewardsDistribution() {\n', '        require(msg.sender == rewardsDistribution, "Caller is not RewardsDistribution contract");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract StakingRewards is IStakingRewards, RewardsDistributionRecipient, ReentrancyGuardUpgradeSafe {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    IERC20 public rewardsToken;\n', '    IERC20 public stakingToken;\n', '    uint256 public periodFinish = 0;\n', '    uint256 public rewardRate = 0;                  // obsoleted\n', '    uint256 public rewardsDuration = 60 days;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) override public rewards;\n', '\n', '    uint256 internal _totalSupply;\n', '    mapping(address => uint256) internal _balances;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    //constructor(\n', '    function initialize(\n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken\n', '    ) public virtual initializer {\n', '        super.__ReentrancyGuard_init();\n', '        rewardsToken = IERC20(_rewardsToken);\n', '        stakingToken = IERC20(_stakingToken);\n', '        rewardsDistribution = _rewardsDistribution;\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    function totalSupply() virtual override public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) virtual override public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function lastTimeRewardApplicable() override public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    function rewardPerToken() virtual override public view returns (uint256) {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable().sub(lastUpdateTime).mul(rewardRate).mul(1e18).div(_totalSupply)\n', '            );\n', '    }\n', '\n', '    function earned(address account) virtual override public view returns (uint256) {\n', '        return _balances[account].mul(rewardPerToken().sub(userRewardPerTokenPaid[account])).div(1e18).add(rewards[account]);\n', '    }\n', '\n', '    function getRewardForDuration() virtual override external view returns (uint256) {\n', '        return rewardRate.mul(rewardsDuration);\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '\n', '    function stakeWithPermit(uint256 amount, uint deadline, uint8 v, bytes32 r, bytes32 s) virtual public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '\n', '        // permit\n', '        IPermit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\n', '\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function stake(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdraw(uint256 amount) virtual override public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        stakingToken.safeTransfer(msg.sender, amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function getReward() virtual override public nonReentrant updateReward(msg.sender) {\n', '        uint256 reward = rewards[msg.sender];\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            rewardsToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function exit() virtual override public {\n', '        withdraw(_balances[msg.sender]);\n', '        getReward();\n', '    }\n', '\n', '    /* ========== RESTRICTED FUNCTIONS ========== */\n', '\n', '    function notifyRewardAmount(uint256 reward) override external onlyRewardsDistribution updateReward(address(0)) {\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = reward.div(rewardsDuration);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = reward.add(leftover).div(rewardsDuration);\n', '        }\n', '\n', '        // Ensure the provided reward amount is not more than the balance in the contract.\n', '        // This keeps the reward rate in the right range, preventing overflows due to\n', '        // very high values of rewardRate in the earned and rewardsPerToken functions;\n', '        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\n', '        uint balance = rewardsToken.balanceOf(address(this));\n', '        require(rewardRate <= balance.div(rewardsDuration), "Provided reward too high");\n', '\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(rewardsDuration);\n', '        emit RewardAdded(reward);\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    modifier updateReward(address account) virtual {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '}\n', '\n', 'interface IPermit {\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', 'contract StakingPool is Configurable, StakingRewards {\n', '    using Address for address payable;\n', '    \n', "    bytes32 internal constant _ecoAddr_         = 'ecoAddr';\n", "    bytes32 internal constant _ecoRatio_        = 'ecoRatio';\n", "\tbytes32 internal constant _allowContract_   = 'allowContract';\n", "\tbytes32 internal constant _allowlist_       = 'allowlist';\n", "\tbytes32 internal constant _blocklist_       = 'blocklist';\n", '\t\n', "\tbytes32 internal constant _rewards2Token_   = 'rewards2Token';\n", "\tbytes32 internal constant _rewards2Ratio_   = 'rewards2Ratio';\n", "\t//bytes32 internal constant _rewards2Span_    = 'rewards2Span';\n", "\tbytes32 internal constant _rewards2Begin_   = 'rewards2Begin';\n", '\n', '\tuint public lep;            // 1: linear, 2: exponential, 3: power\n', '\tuint public period;\n', '\tuint public begin;\n', '\n', '    mapping (address => uint256) public paid;\n', '\n', '    function initialize(address _governor, \n', '        address _rewardsDistribution,\n', '        address _rewardsToken,\n', '        address _stakingToken,\n', '        address _ecoAddr\n', '    ) public virtual initializer {\n', '\t    super.initialize(_governor);\n', '        super.initialize(_rewardsDistribution, _rewardsToken, _stakingToken);\n', '        config[_ecoAddr_] = uint(_ecoAddr);\n', '        config[_ecoRatio_] = 0.1 ether;\n', '    }\n', '\n', '    function notifyRewardBegin(uint _lep, uint _period, uint _span, uint _begin) virtual public governance updateReward(address(0)) {\n', '        lep             = _lep;         // 1: linear, 2: exponential, 3: power\n', '        period          = _period;\n', '        rewardsDuration = _span;\n', '        begin           = _begin;\n', '        periodFinish    = _begin.add(_span);\n', '    }\n', '    \n', '    function notifyReward2(address _rewards2Token, uint _ratio, /*uint _span,*/ uint _begin) virtual external governance updateReward(address(0)) {\n', '        config[_rewards2Token_] = uint(_rewards2Token);\n', '        config[_rewards2Ratio_] = _ratio;\n', '        //config[_rewards2Span_]  = _span;\n', '        config[_rewards2Begin_] = _begin;\n', '    }\n', '\n', '    function rewardDelta() public view returns (uint amt) {\n', '        if(begin == 0 || begin >= now || lastUpdateTime >= now)\n', '            return 0;\n', '            \n', '        amt = rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\n', '        \n', '        // calc rewardDelta in period\n', '        if(lep == 3) {                                                              // power\n', '            uint y = period.mul(1 ether).div(lastUpdateTime.add(rewardsDuration).sub(begin));\n', '            uint amt1 = amt.mul(1 ether).div(y);\n', '            uint amt2 = amt1.mul(period).div(now.add(rewardsDuration).sub(begin));\n', '            amt = amt.sub(amt2);\n', '        } else if(lep == 2) {                                                       // exponential\n', '            if(now.sub(lastUpdateTime) < rewardsDuration)\n', '                amt = amt.mul(now.sub(lastUpdateTime)).div(rewardsDuration);\n', '        }else if(now < periodFinish)                                                // linear\n', '            amt = amt.mul(now.sub(lastUpdateTime)).div(periodFinish.sub(lastUpdateTime));\n', '        else if(lastUpdateTime >= periodFinish)\n', '            amt = 0;\n', '    }\n', '    \n', '    function rewardPerToken() virtual override public view returns (uint256) {\n', '        if (_totalSupply == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                rewardDelta().mul(1e18).div(_totalSupply)\n', '            );\n', '    }\n', '\n', '    modifier updateReward(address account) virtual override {\n', '        (uint delta, uint d) = (rewardDelta(), 0);\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = now;\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '\n', '        address addr = address(config[_ecoAddr_]);\n', '        uint ratio = config[_ecoRatio_];\n', '        if(addr != address(0) && ratio != 0) {\n', '            d = delta.mul(ratio).div(1 ether);\n', '            rewards[addr] = rewards[addr].add(d);\n', '        }\n', '        rewards[address(0)] = rewards[address(0)].add(delta).add(d);\n', '        _;\n', '    }\n', '\n', '    function getReward() virtual override public {\n', '        getReward(msg.sender);\n', '    }\n', '    function getReward(address payable acct) virtual public nonReentrant updateReward(acct) {\n', "        require(acct != address(0), 'invalid address');\n", "        require(getConfig(_blocklist_, acct) == 0, 'In blocklist');\n", '        bool isContract = acct.isContract();\n', "        require(!isContract || config[_allowContract_] != 0 || getConfig(_allowlist_, acct) != 0, 'No allowContract');\n", '\n', '        uint256 reward = rewards[acct];\n', '        if (reward > 0) {\n', '            paid[acct] = paid[acct].add(reward);\n', '            paid[address(0)] = paid[address(0)].add(reward);\n', '            rewards[acct] = 0;\n', '            rewards[address(0)] = rewards[address(0)].sub0(reward);\n', '            rewardsToken.safeTransferFrom(rewardsDistribution, acct, reward);\n', '            emit RewardPaid(acct, reward);\n', '            \n', '            if(config[_rewards2Token_] != 0 && config[_rewards2Begin_] <= now) {\n', '                uint reward2 = Math.min(reward.mul(config[_rewards2Ratio_]).div(1e18), IERC20(config[_rewards2Token_]).balanceOf(address(this)));\n', '                IERC20(config[_rewards2Token_]).safeTransfer(acct, reward2);\n', '                emit RewardPaid2(acct, reward2);\n', '            }\n', '        }\n', '    }\n', '    event RewardPaid2(address indexed user, uint256 reward2);\n', '\n', '    function getRewardForDuration() override external view returns (uint256) {\n', '        return rewardsToken.allowance(rewardsDistribution, address(this)).sub0(rewards[address(0)]);\n', '    }\n', '    \n', '    function rewards2Token() virtual external view returns (address) {\n', '        return address(config[_rewards2Token_]);\n', '    }\n', '    \n', '    function rewards2Ratio() virtual external view returns (uint) {\n', '        return config[_rewards2Ratio_];\n', '    }\n', '    \n', '}\n', '\n', 'interface IWETH is IERC20 {\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'contract EthPool is StakingPool {\n', '    function stakeEth() virtual public payable nonReentrant updateReward(msg.sender) {\n', '        uint amount = msg.value;\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        IWETH(address(stakingToken)).deposit{value: amount}();                   //stakingToken.safeTransferFrom(msg.sender, address(this), amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '\n', '    function withdrawEth(uint256 amount) virtual public nonReentrant updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(amount);\n', '        IWETH(address(stakingToken)).withdraw(amount);                           //stakingToken.safeTransfer(msg.sender, amount);\n', '        msg.sender.transfer(amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function exitEth() virtual public {\n', '        withdrawEth(_balances[msg.sender]);\n', '        getReward();\n', '    }\n', '    \n', '    receive () payable external {\n', '        \n', '    }\n', '}\n', '\n', 'contract DoublePool is StakingPool {\n', '    IStakingRewards public stakingPool2;\n', '    IERC20 public rewardsToken2;\n', '    //uint256 public lastUpdateTime2;                                 // obsoleted\n', '    //uint256 public rewardPerTokenStored2;                           // obsoleted\n', '    mapping(address => uint256) public userRewardPerTokenPaid2;\n', '    mapping(address => uint256) public rewards2;\n', '\n', '    function initialize(address, address, address, address, address) override public {\n', '        revert();\n', '    }\n', '    \n', '    function initialize(address _governor, address _rewardsDistribution, address _rewardsToken, address _stakingToken, address _ecoAddr, address _stakingPool2, address _rewardsToken2) public initializer {\n', '\t    super.initialize(_governor, _rewardsDistribution, _rewardsToken, _stakingToken, _ecoAddr);\n', '\t    \n', '\t    stakingPool2 = IStakingRewards(_stakingPool2);\n', '\t    rewardsToken2 = IERC20(_rewardsToken2);\n', '\t}\n', '    \n', '    function notifyRewardBegin(uint _lep, uint _period, uint _span, uint _begin) virtual override public governance updateReward2(address(0)) {\n', '        super.notifyRewardBegin(_lep, _period, _span, _begin);\n', '    }\n', '    \n', '    function stake(uint amount) virtual override public updateReward2(msg.sender) {\n', '        super.stake(amount);\n', '        stakingToken.safeApprove(address(stakingPool2), amount);\n', '        stakingPool2.stake(amount);\n', '    }\n', '\n', '    function withdraw(uint amount) virtual override public updateReward2(msg.sender) {\n', '        stakingPool2.withdraw(amount);\n', '        super.withdraw(amount);\n', '    }\n', '    \n', '    function getReward2() virtual public nonReentrant updateReward2(msg.sender) {\n', '        uint256 reward2 = rewards2[msg.sender];\n', '        if (reward2 > 0) {\n', '            rewards2[msg.sender] = 0;\n', '            stakingPool2.getReward();\n', '            rewardsToken2.safeTransfer(msg.sender, reward2);\n', '            emit RewardPaid2(msg.sender, reward2);\n', '        }\n', '    }\n', '    event RewardPaid2(address indexed user, uint256 reward2);\n', '\n', '    function getDoubleReward() virtual public {\n', '        getReward();\n', '        getReward2();\n', '    }\n', '    \n', '    function exit() override public {\n', '        super.exit();\n', '        getReward2();\n', '    }\n', '    \n', '    function rewardPerToken2() virtual public view returns (uint256) {\n', '        return stakingPool2.rewardPerToken();\n', '    }\n', '\n', '    function earned2(address account) virtual public view returns (uint256) {\n', '        return _balances[account].mul(rewardPerToken2().sub(userRewardPerTokenPaid2[account])).div(1e18).add(rewards2[account]);\n', '    }\n', '\n', '    modifier updateReward2(address account) virtual {\n', '        if (account != address(0)) {\n', '            rewards2[account] = earned2(account);\n', '            userRewardPerTokenPaid2[account] = rewardPerToken2();\n', '        }\n', '        _;\n', '    }\n', '\n', '}\n', '\n', 'contract Mine is Governable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public reward;\n', '\n', '    function initialize(address governor, address reward_) public initializer {\n', '        super.initialize(governor);\n', '        reward = reward_;\n', '    }\n', '    \n', '    function approvePool(address pool, uint amount) public governance {\n', '        IERC20(reward).safeApprove(pool, amount);\n', '    }\n', '    \n', '    function approveToken(address token, address pool, uint amount) public governance {\n', '        IERC20(token).safeApprove(pool, amount);\n', '    }\n', '    \n', '}']