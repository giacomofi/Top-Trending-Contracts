['// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', 'import "./SafeMath.sol";\n', 'import "./TellorGetters.sol";\n', 'import "./TellorVariables.sol";\n', 'import "hardhat/console.sol";\n', 'import "./Utilities.sol";\n', '\n', '/** \n', ' @author Tellor Inc.\n', ' @title Extension\n', ' @dev  This contract holds staking functions, tallyVotes and updateDisputeFee\n', ' * Because of space limitations and will be consolidated in future iterations\n', '**/\n', 'contract Extension is TellorGetters {\n', '    using SafeMath for uint256;\n', '    \n', '    /*Events*/\n', '    //emitted upon dispute tally\n', '    event DisputeVoteTallied(\n', '        uint256 indexed _disputeID,\n', '        int256 _result,\n', '        address indexed _reportedMiner,\n', '        address _reportingParty,\n', '        bool _passed\n', '    );\n', '    event StakeWithdrawn(address indexed _sender); //Emits when a staker is block.timestamp no longer staked\n', '    event StakeWithdrawRequested(address indexed _sender); //Emits when a staker begins the 7 day withdraw period\n', '    event NewStake(address indexed _sender); //Emits upon new staker\n', '    event NewTellorAddress(address _newTellor);\n', '    /*Functions*/\n', '    /**\n', '     * @dev This function allows miners to deposit their stake.\n', '     */\n', '    function depositStake() external{\n', '        _newStake(msg.sender);\n', '        updateMinDisputeFee();\n', '    }\n', '\n', '    /**\n', '     * @dev This function allows stakers to request to withdraw their stake (no longer stake)\n', '     * once they lock for withdraw(stakes.currentStatus = 2) they are locked for 7 days before they\n', '     * can withdraw the deposit\n', '     */\n', '    function requestStakingWithdraw() external {\n', '        StakeInfo storage stakes = stakerDetails[msg.sender];\n', '        //Require that the miner is staked\n', '        require(stakes.currentStatus == 1, "Miner is not staked");\n', '        //Change the miner staked to locked to be withdrawStake\n', '        stakes.currentStatus = 2;\n', '        //Change the startDate to block.timestamp since the lock up period begins block.timestamp\n', '        //and the miner can only withdraw 7 days later from block.timestamp(check the withdraw function)\n', '        stakes.startDate = block.timestamp - (block.timestamp % 86400);\n', '        //Reduce the staker count\n', '        uints[_STAKE_COUNT] -= 1;\n', '        //Update the minimum dispute fee that is based on the number of stakers\n', '        updateMinDisputeFee();\n', '        emit StakeWithdrawRequested(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev tallies the votes and locks the stake disbursement(currentStatus = 4) if the vote passes\n', '     * @param _disputeId is the dispute id\n', '     */\n', '    function tallyVotes(uint256 _disputeId) external {\n', '        Dispute storage disp = disputesById[_disputeId];\n', '        //Ensure this has not already been executed/tallied\n', '        require(disp.executed == false, "Dispute has been already executed");\n', '        //Ensure that the vote has been open long enough\n', '        require(\n', '            block.timestamp >= disp.disputeUintVars[_MIN_EXECUTION_DATE],\n', '            "Time for voting haven\'t elapsed"\n', '        );\n', "        //Ensure that it's a valid disputeId\n", '        require(\n', '            disp.reportingParty != address(0),\n', '            "reporting Party is address 0"\n', '        );\n', '        int256 _tally = disp.tally;\n', '        if (_tally > 0) {\n', '        //If the vote is not a proposed fork\n', '            if (disp.isPropFork == false) {\n', '                //Set the dispute state to passed/true\n', '                disp.disputeVotePassed = true;\n', '                //Ensure the time for voting has elapsed\n', '                StakeInfo storage stakes = stakerDetails[disp.reportedMiner];\n', '                //If the vote for disputing a value is successful(disp.tally >0) then unstake the reported\n', '                if (stakes.currentStatus == 3) {\n', '                    stakes.currentStatus = 4;\n', '                }\n', '            } else if (uint256(_tally) >= ((uints[_TOTAL_SUPPLY] * 5) / 100)) {\n', '                disp.disputeVotePassed = true;\n', '            }\n', '        }\n', '        disp.disputeUintVars[_TALLY_DATE] = block.timestamp;\n', '        disp.executed = true;\n', '        emit DisputeVoteTallied(\n', '            _disputeId,\n', '            _tally,\n', '            disp.reportedMiner,\n', '            disp.reportingParty,\n', '            disp.disputeVotePassed\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev This function updates the minimum dispute fee as a function of the amount\n', '     * of staked miners\n', '     */\n', '    function updateMinDisputeFee() public {\n', '        uint256 _stakeAmt = uints[_STAKE_AMOUNT];\n', '        uint256 _trgtMiners = uints[_TARGET_MINERS];\n', '        uints[_DISPUTE_FEE] = SafeMath.max(\n', '            15e18,\n', '            (_stakeAmt -\n', '                ((_stakeAmt *\n', '                    (SafeMath.min(_trgtMiners, uints[_STAKE_COUNT]) * 1000)) /\n', '                    _trgtMiners) /\n', '                1000)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Updates the Tellor address after a proposed fork has\n', '     * passed the vote and day has gone by without a dispute\n', '     * @param _disputeId the disputeId for the proposed fork\n', '    */\n', '    function updateTellor(uint256 _disputeId) external {\n', '        bytes32 _hash = disputesById[_disputeId].hash;\n', '        uint256 origID = disputeIdByDisputeHash[_hash];\n', '        //this checks the "lastID" or the most recent if this is a multiple dispute case\n', '        uint256 lastID =\n', '            disputesById[origID].disputeUintVars[\n', '                keccak256(\n', '                    abi.encode(\n', '                        disputesById[origID].disputeUintVars[_DISPUTE_ROUNDS]\n', '                    )\n', '                )\n', '            ];\n', '        TellorStorage.Dispute storage disp = disputesById[lastID];\n', '        require(disp.isPropFork, "must be a fork proposal");\n', '        require(\n', '            disp.disputeUintVars[_FORK_EXECUTED] == 0,\n', '            "update Tellor has already been run"\n', '        );\n', '        require(disp.disputeVotePassed == true, "vote needs to pass");\n', '        require(disp.disputeUintVars[_TALLY_DATE] > 0, "vote needs to be tallied");\n', '        require(\n', '            block.timestamp - disp.disputeUintVars[_TALLY_DATE] > 1 days,\n', '            "Time for voting for further disputes has not passed"\n', '        );\n', '        disp.disputeUintVars[_FORK_EXECUTED] = 1;\n', '        address _newTellor =disp.proposedForkAddress;\n', '        addresses[_TELLOR_CONTRACT] = _newTellor; \n', '        assembly {\n', '            sstore(_EIP_SLOT, _newTellor)\n', '        }\n', '        emit NewTellorAddress(_newTellor);\n', '    }\n', '\n', '    /**\n', '     * @dev This function allows users to withdraw their stake after a 7 day waiting\n', '     * period from request\n', '     */\n', '    function withdrawStake() external {\n', '        StakeInfo storage stakes = stakerDetails[msg.sender];\n', '        //Require the staker has locked for withdraw(currentStatus ==2) and that 7 days have\n', '        //passed by since they locked for withdraw\n', '        require(\n', '            block.timestamp - (block.timestamp % 86400) - stakes.startDate >=\n', '                7 days,\n', '            "7 days didn\'t pass"\n', '        );\n', '        require(\n', '            stakes.currentStatus == 2,\n', '            "Miner was not locked for withdrawal"\n', '        );\n', '        stakes.currentStatus = 0;\n', '        emit StakeWithdrawn(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev This internal function is used the depositStake function to successfully stake miners.\n', "     * The function updates their status/state and status start date so they are locked it so they can't withdraw\n", '     * and updates the number of stakers in the system.\n', '     * @param _staker the address of the new staker\n', '    */\n', '    function _newStake(address _staker) internal {\n', '        require(\n', '            balances[_staker][balances[_staker].length - 1].value >=\n', '                uints[_STAKE_AMOUNT],\n', '            "Balance is lower than stake amount"\n', '        );\n', '        //Ensure they can only stake if they are not currently staked or if their stake time frame has ended\n', '        //and they are currently locked for withdraw\n', '        require(\n', '            stakerDetails[_staker].currentStatus == 0 ||\n', '                stakerDetails[_staker].currentStatus == 2,\n', '            "Miner is in the wrong state"\n', '        );\n', '        uints[_STAKE_COUNT] += 1;\n', '        stakerDetails[_staker] = StakeInfo({\n', '            currentStatus: 1, \n', '            startDate: block.timestamp//this resets their stake start date to now\n', '        });\n', '        emit NewStake(_staker);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', '/** \n', ' @author Tellor Inc.\n', ' @title SafeMath\n', ' @dev  Slightly modified SafeMath library - includes a min and max function, removes useless div function\n', '**/\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '\n', '    function add(int256 a, int256 b) internal pure returns (int256 c) {\n', '        if (b > 0) {\n', '            c = a + b;\n', '            assert(c >= a);\n', '        } else {\n', '            c = a + b;\n', '            assert(c <= a);\n', '        }\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a : b;\n', '    }\n', '\n', '    function max(int256 a, int256 b) internal pure returns (uint256) {\n', '        return a > b ? uint256(a) : uint256(b);\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a * b;\n', '        assert(a == 0 || c / a == b);\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '\n', '    function sub(int256 a, int256 b) internal pure returns (int256 c) {\n', '        if (b > 0) {\n', '            c = a - b;\n', '            assert(c <= a);\n', '        } else {\n', '            c = a - b;\n', '            assert(c >= a);\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', 'import "./SafeMath.sol";\n', 'import "./TellorStorage.sol";\n', 'import "./TellorVariables.sol";\n', 'import "./Utilities.sol";\n', '\n', '/**\n', ' @author Tellor Inc.\n', ' @title TellorGetters\n', ' @dev Getter functions for Tellor Oracle system\n', '*/\n', 'contract TellorGetters is TellorStorage, TellorVariables, Utilities {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev This function tells you if a given challenge has been completed by a given miner\n', '     * @param _challenge the challenge to search for\n', '     * @param _miner address that you want to know if they solved the challenge\n', '     * @return true if the _miner address provided solved the\n', '     */\n', '    function didMine(bytes32 _challenge, address _miner)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return minersByChallenge[_challenge][_miner];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if an address voted in a given dispute\n', '     * @param _disputeId to look up\n', '     * @param _address to look up\n', '     * @return bool of whether or not party voted\n', '     */\n', '    function didVote(uint256 _disputeId, address _address)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return disputesById[_disputeId].voted[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev allows Tellor to read data from the addressVars mapping\n', '     * @param _data is the keccak256("variable_name") of the variable that is being accessed.\n', '     * These are examples of how the variables are saved within other functions:\n', '     * addressVars[keccak256("_owner")]\n', '     * addressVars[keccak256("tellorContract")]\n', '     * @return address of the requested variable\n', '     */\n', '    function getAddressVars(bytes32 _data) external view returns (address) {\n', '        return addresses[_data];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all dispute variables\n', '     * @param _disputeId to look up\n', '     * @return bytes32 hash of dispute\n', '     * bool executed where true if it has been voted on\n', '     * bool disputeVotePassed\n', '     * bool isPropFork true if the dispute is a proposed fork\n', '     * address of reportedMiner\n', '     * address of reportingParty\n', '     * address of proposedForkAddress\n', '     * uint of requestId\n', '     * uint of timestamp\n', '     * uint of value\n', '     * uint of minExecutionDate\n', '     * uint of numberOfVotes\n', '     * uint of blocknumber\n', '     * uint of minerSlot\n', '     * uint of quorum\n', '     * uint of fee\n', '     * int count of the current tally\n', '     */\n', '    function getAllDisputeVars(uint256 _disputeId)\n', '        external\n', '        view\n', '        returns (\n', '            bytes32,\n', '            bool,\n', '            bool,\n', '            bool,\n', '            address,\n', '            address,\n', '            address,\n', '            uint256[9] memory,\n', '            int256\n', '        )\n', '    {\n', '        Dispute storage disp = disputesById[_disputeId];\n', '        return (\n', '            disp.hash,\n', '            disp.executed,\n', '            disp.disputeVotePassed,\n', '            disp.isPropFork,\n', '            disp.reportedMiner,\n', '            disp.reportingParty,\n', '            disp.proposedForkAddress,\n', '            [\n', '                disp.disputeUintVars[_REQUEST_ID],\n', '                disp.disputeUintVars[_TIMESTAMP],\n', '                disp.disputeUintVars[_VALUE],\n', '                disp.disputeUintVars[_MIN_EXECUTION_DATE],\n', '                disp.disputeUintVars[_NUM_OF_VOTES],\n', '                disp.disputeUintVars[_BLOCK_NUMBER],\n', '                disp.disputeUintVars[_MINER_SLOT],\n', '                disp.disputeUintVars[keccak256("quorum")],\n', '                disp.disputeUintVars[_FEE]\n', '            ],\n', '            disp.tally\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Checks if a given hash of miner,requestId has been disputed\n', '     * @param _hash is the sha256(abi.encodePacked(_miners[2],_requestId,_timestamp));\n', '     * @return uint disputeId\n', '     */\n', '    function getDisputeIdByDisputeHash(bytes32 _hash)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return disputeIdByDisputeHash[_hash];\n', '    }\n', '\n', '    /**\n', '     * @dev Checks for uint variables in the disputeUintVars mapping based on the disputeId\n', '     * @param _disputeId is the dispute id;\n', '     * @param _data the variable to pull from the mapping. _data = keccak256("variable_name") where variable_name is\n', '     * the variables/strings used to save the data in the mapping. The variables names are\n', '     * commented out under the disputeUintVars under the Dispute struct\n', '     * @return uint value for the bytes32 data submitted\n', '     */\n', '    function getDisputeUintVars(uint256 _disputeId, bytes32 _data)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return disputesById[_disputeId].disputeUintVars[_data];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the a value for the latest timestamp available\n', '     * @param _requestId being requested\n', "     * @return value for timestamp of last proof of work submitted and if true if it exist or 0 and false if it doesn't\n", '     */\n', '    function getLastNewValueById(uint256 _requestId)\n', '        external\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        Request storage _request = requestDetails[_requestId];\n', '        if (_request.requestTimestamps.length != 0) {\n', '            return (\n', '                retrieveData(\n', '                    _requestId,\n', '                    _request.requestTimestamps[\n', '                        _request.requestTimestamps.length - 1\n', '                    ]\n', '                ),\n', '                true\n', '            );\n', '        } else {\n', '            return (0, false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets blocknumber for mined timestamp\n', '     * @param _requestId to look up\n', '     * @param _timestamp is the timestamp to look up blocknumber\n', '     * @return uint of the blocknumber which the dispute was mined\n', '     */\n', '    function getMinedBlockNum(uint256 _requestId, uint256 _timestamp)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return requestDetails[_requestId].minedBlockNum[_timestamp];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n', '     * @param _requestId to look up\n', '     * @param _timestamp is the timestamp to look up miners for\n', "     * @return the 5 miners' addresses\n", '     */\n', '    function getMinersByRequestIdAndTimestamp(\n', '        uint256 _requestId,\n', '        uint256 _timestamp\n', '    ) external view returns (address[5] memory) {\n', '        return requestDetails[_requestId].minersByValue[_timestamp];\n', '    }\n', '\n', '    /**\n', '     * @dev Counts the number of values that have been submitted for the request\n', '     * if called for the currentRequest being mined it can tell you how many miners have submitted a value for that\n', '     * request so far\n', '     * @param _requestId the requestId to look up\n', '     * @return uint count of the number of values received for the requestId\n', '     */\n', '    function getNewValueCountbyRequestId(uint256 _requestId)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return requestDetails[_requestId].requestTimestamps.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter function for the specified requestQ index\n', '     * @param _index to look up in the requestQ array\n', '     * @return uint of requestId\n', '     */\n', '    function getRequestIdByRequestQIndex(uint256 _index)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(_index <= 50, "RequestQ index is above 50");\n', '        return requestIdByRequestQIndex[_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter function for the requestQ array\n', '     * @return the requestQ array\n', '     */\n', '    function getRequestQ() external view returns (uint256[51] memory) {\n', '        return requestQ;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows access to the uint variables saved in the apiUintVars under the requestDetails struct\n', '     * for the requestId specified\n', '     * @param _requestId to look up\n', '     * @param _data the variable to pull from the mapping. _data = keccak256("variable_name") where variable_name is\n', '     * the variables/strings used to save the data in the mapping. The variables names are\n', '     * in TellorVariables.sol\n', '     * @return uint value of the apiUintVars specified in _data for the requestId specified\n', '     */\n', '    function getRequestUintVars(uint256 _requestId, bytes32 _data)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return requestDetails[_requestId].apiUintVars[_data];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the API struct variables that are not mappings\n', '     * @param _requestId to look up\n', '     * @return uint of index in requestQ array\n', '     * @return uint of current payout/tip for this requestId\n', '     */\n', '    function getRequestVars(uint256 _requestId)\n', '        external\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        Request storage _request = requestDetails[_requestId];\n', '        return (\n', '            _request.apiUintVars[_REQUEST_Q_POSITION],\n', '            _request.apiUintVars[_TOTAL_TIP]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev This function allows users to retrieve all information about a staker\n', '     * @param _staker address of staker inquiring about\n', '     * @return uint current state of staker\n', '     * @return uint startDate of staking\n', '     */\n', '    function getStakerInfo(address _staker)\n', '        external\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        return (\n', '            stakerDetails[_staker].currentStatus,\n', '            stakerDetails[_staker].startDate\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n', '     * @param _requestId to look up\n', '     * @param _timestamp is the timestamp to look up miners for\n', '     * @return address[5] array of 5 addresses of miners that mined the requestId\n', '     */\n', '    function getSubmissionsByTimestamp(uint256 _requestId, uint256 _timestamp)\n', '        external\n', '        view\n', '        returns (uint256[5] memory)\n', '    {\n', '        return requestDetails[_requestId].valuesByTimestamp[_timestamp];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the timestamp for the value based on their index\n', '     * @param _requestID is the requestId to look up\n', '     * @param _index is the value index to look up\n', '     * @return uint timestamp\n', '     */\n', '    function getTimestampbyRequestIDandIndex(uint256 _requestID, uint256 _index)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return requestDetails[_requestID].requestTimestamps[_index];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the variables saved under the TellorStorageStruct uints variable\n', '     * @param _data the variable to pull from the mapping. _data = keccak256("variable_name")\n', '     * where variable_name is the variables/strings used to save the data in the mapping.\n', '     * The variables names in the TellorVariables contract\n', '     * @return uint of specified variable\n', '     */\n', '    function getUintVar(bytes32 _data) external view returns (uint256) {\n', '        return uints[_data];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the 5 miners who mined the value for the specified requestId/_timestamp\n', '     * @param _requestId to look up\n', '     * @param _timestamp is the timestamp to look up miners for\n', '     * @return bool true if requestId/timestamp is under dispute\n', '     */\n', '    function isInDispute(uint256 _requestId, uint256 _timestamp)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return requestDetails[_requestId].inDispute[_timestamp];\n', '    }\n', '\n', '    /**\n', '     * @dev Retrieve value from oracle based on timestamp\n', '     * @param _requestId being requested\n', '     * @param _timestamp to retrieve data/value from\n', '     * @return value for timestamp submitted\n', '     */\n', '    function retrieveData(uint256 _requestId, uint256 _timestamp)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return requestDetails[_requestId].finalValues[_timestamp];\n', '    }\n', '\n', '    /**\n', '     * @dev Getter for the total_supply of oracle tokens\n', '     * @return uint total supply\n', '     */\n', '    function totalSupply() external view returns (uint256) {\n', '        return uints[_TOTAL_SUPPLY];\n', '    }\n', '\n', '    /**\n', "     * @dev Allows users to access the token's name\n", '     */\n', '    function name() external pure returns (string memory) {\n', '        return "Tellor Tributes";\n', '    }\n', '\n', '    /**\n', "     * @dev Allows users to access the token's symbol\n", '     */\n', '    function symbol() external pure returns (string memory) {\n', '        return "TRB";\n', '    }\n', '\n', '    /**\n', '     * @dev Allows users to access the number of decimals\n', '     */\n', '    function decimals() external pure returns (uint8) {\n', '        return 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Getter function for the requestId being mined\n', '     * returns the currentChallenge, array of requestIDs, difficulty, and the current Tip of the 5 IDs\n', '     */\n', '    function getNewCurrentVariables()\n', '        external\n', '        view\n', '        returns (\n', '            bytes32 _challenge,\n', '            uint256[5] memory _requestIds,\n', '            uint256 _diff,\n', '            uint256 _tip\n', '        )\n', '    {\n', '        for (uint256 i = 0; i < 5; i++) {\n', '            _requestIds[i] = currentMiners[i].value;\n', '        }\n', '        return (\n', '            bytesVars[_CURRENT_CHALLENGE],\n', '            _requestIds,\n', '            uints[_DIFFICULTY],\n', '            uints[_CURRENT_TOTAL_TIPS]\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Getter function for next requestIds on queue/request with highest payouts at time the function is called\n', '     */\n', '    function getNewVariablesOnDeck()\n', '        external\n', '        view\n', '        returns (uint256[5] memory idsOnDeck, uint256[5] memory tipsOnDeck)\n', '    {\n', '        idsOnDeck = getTopRequestIDs();\n', '        for (uint256 i = 0; i < 5; i++) {\n', '            tipsOnDeck[i] = requestDetails[idsOnDeck[i]].apiUintVars[\n', '                _TOTAL_TIP\n', '            ];\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Getter function for the top 5 requests with highest payouts. This function is used within the getNewVariablesOnDeck function\n', '     */\n', '    function getTopRequestIDs()\n', '        public\n', '        view\n', '        returns (uint256[5] memory _requestIds)\n', '    {\n', '        uint256[5] memory _max;\n', '        uint256[5] memory _index;\n', '        (_max, _index) = _getMax5(requestQ);\n', '        for (uint256 i = 0; i < 5; i++) {\n', '            if (_max[i] != 0) {\n', '                _requestIds[i] = requestIdByRequestQIndex[_index[i]];\n', '            } else {\n', '                _requestIds[i] = currentMiners[4 - i].value;\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', '/**\n', ' @author Tellor Inc.\n', ' @title TellorVariables\n', ' @dev Helper contract to store hashes of variables\n', '*/\n', 'contract TellorVariables {\n', '    bytes32 constant _BLOCK_NUMBER =\n', '        0x4b4cefd5ced7569ef0d091282b4bca9c52a034c56471a6061afd1bf307a2de7c; //keccak256("_BLOCK_NUMBER");\n', '    bytes32 constant _CURRENT_CHALLENGE =\n', '        0xd54702836c9d21d0727ffacc3e39f57c92b5ae0f50177e593bfb5ec66e3de280; //keccak256("_CURRENT_CHALLENGE");\n', '    bytes32 constant _CURRENT_REQUESTID =\n', '        0xf5126bb0ac211fbeeac2c0e89d4c02ac8cadb2da1cfb27b53c6c1f4587b48020; //keccak256("_CURRENT_REQUESTID");\n', '    bytes32 constant _CURRENT_REWARD =\n', '        0xd415862fd27fb74541e0f6f725b0c0d5b5fa1f22367d9b78ec6f61d97d05d5f8; //keccak256("_CURRENT_REWARD");\n', '    bytes32 constant _CURRENT_TOTAL_TIPS =\n', '        0x09659d32f99e50ac728058418d38174fe83a137c455ff1847e6fb8e15f78f77a; //keccak256("_CURRENT_TOTAL_TIPS");\n', '    bytes32 constant _DEITY =\n', '        0x5fc094d10c65bc33cc842217b2eccca0191ff24148319da094e540a559898961; //keccak256("_DEITY");\n', '    bytes32 constant _DIFFICULTY =\n', '        0xf758978fc1647996a3d9992f611883adc442931dc49488312360acc90601759b; //keccak256("_DIFFICULTY");\n', '    bytes32 constant _DISPUTE_COUNT =\n', '        0x310199159a20c50879ffb440b45802138b5b162ec9426720e9dd3ee8bbcdb9d7; //keccak256("_DISPUTE_COUNT");\n', '    bytes32 constant _DISPUTE_FEE =\n', '        0x675d2171f68d6f5545d54fb9b1fb61a0e6897e6188ca1cd664e7c9530d91ecfc; //keccak256("_DISPUTE_FEE");\n', '    bytes32 constant _DISPUTE_ROUNDS =\n', '        0x6ab2b18aafe78fd59c6a4092015bddd9fcacb8170f72b299074f74d76a91a923; //keccak256("_DISPUTE_ROUNDS");\n', '    bytes32 constant _EXTENSION =\n', '        0x2b2a1c876f73e67ebc4f1b08d10d54d62d62216382e0f4fd16c29155818207a4; //keccak256("_EXTENSION");\n', '    bytes32 constant _FEE =\n', '        0x1da95f11543c9b03927178e07951795dfc95c7501a9d1cf00e13414ca33bc409; //keccak256("_FEE");\n', '    bytes32 constant _FORK_EXECUTED =\n', '        0xda571dfc0b95cdc4a3835f5982cfdf36f73258bee7cb8eb797b4af8b17329875; //keccak256("_FORK_EXECUTED");\n', '    bytes32 constant _LOCK =\n', '        0xd051321aa26ce60d202f153d0c0e67687e975532ab88ce92d84f18e39895d907;\n', '    bytes32 constant _MIGRATOR =\n', '        0xc6b005d45c4c789dfe9e2895b51df4336782c5ff6bd59a5c5c9513955aa06307; //keccak256("_MIGRATOR");\n', '    bytes32 constant _MIN_EXECUTION_DATE =\n', '        0x46f7d53798d31923f6952572c6a19ad2d1a8238d26649c2f3493a6d69e425d28; //keccak256("_MIN_EXECUTION_DATE");\n', '    bytes32 constant _MINER_SLOT =\n', '        0x6de96ee4d33a0617f40a846309c8759048857f51b9d59a12d3c3786d4778883d; //keccak256("_MINER_SLOT");\n', '    bytes32 constant _NUM_OF_VOTES =\n', '        0x1da378694063870452ce03b189f48e04c1aa026348e74e6c86e10738514ad2c4; //keccak256("_NUM_OF_VOTES");\n', '    bytes32 constant _OLD_TELLOR =\n', '        0x56e0987db9eaec01ed9e0af003a0fd5c062371f9d23722eb4a3ebc74f16ea371; //keccak256("_OLD_TELLOR");\n', '    bytes32 constant _ORIGINAL_ID =\n', '        0xed92b4c1e0a9e559a31171d487ecbec963526662038ecfa3a71160bd62fb8733; //keccak256("_ORIGINAL_ID");\n', '    bytes32 constant _OWNER =\n', '        0x7a39905194de50bde334d18b76bbb36dddd11641d4d50b470cb837cf3bae5def; //keccak256("_OWNER");\n', '    bytes32 constant _PAID =\n', '        0x29169706298d2b6df50a532e958b56426de1465348b93650fca42d456eaec5fc; //keccak256("_PAID");\n', '    bytes32 constant _PENDING_OWNER =\n', '        0x7ec081f029b8ac7e2321f6ae8c6a6a517fda8fcbf63cabd63dfffaeaafa56cc0; //keccak256("_PENDING_OWNER");\n', '    bytes32 constant _REQUEST_COUNT =\n', '        0x3f8b5616fa9e7f2ce4a868fde15c58b92e77bc1acd6769bf1567629a3dc4c865; //keccak256("_REQUEST_COUNT");\n', '    bytes32 constant _REQUEST_ID =\n', '        0x9f47a2659c3d32b749ae717d975e7962959890862423c4318cf86e4ec220291f; //keccak256("_REQUEST_ID");\n', '    bytes32 constant _REQUEST_Q_POSITION =\n', '        0xf68d680ab3160f1aa5d9c3a1383c49e3e60bf3c0c031245cbb036f5ce99afaa1; //keccak256("_REQUEST_Q_POSITION");\n', '    bytes32 constant _SLOT_PROGRESS =\n', '        0xdfbec46864bc123768f0d134913175d9577a55bb71b9b2595fda21e21f36b082; //keccak256("_SLOT_PROGRESS");\n', '    bytes32 constant _STAKE_AMOUNT =\n', '        0x5d9fadfc729fd027e395e5157ef1b53ef9fa4a8f053043c5f159307543e7cc97; //keccak256("_STAKE_AMOUNT");\n', '    bytes32 constant _STAKE_COUNT =\n', '        0x10c168823622203e4057b65015ff4d95b4c650b308918e8c92dc32ab5a0a034b; //keccak256("_STAKE_COUNT");\n', '    bytes32 constant _T_BLOCK =\n', '        0xf3b93531fa65b3a18680d9ea49df06d96fbd883c4889dc7db866f8b131602dfb; //keccak256("_T_BLOCK");\n', '    bytes32 constant _TALLY_DATE =\n', '        0xf9e1ae10923bfc79f52e309baf8c7699edb821f91ef5b5bd07be29545917b3a6; //keccak256("_TALLY_DATE");\n', '    bytes32 constant _TARGET_MINERS =\n', '        0x0b8561044b4253c8df1d9ad9f9ce2e0f78e4bd42b2ed8dd2e909e85f750f3bc1; //keccak256("_TARGET_MINERS");\n', '    bytes32 constant _TELLOR_CONTRACT =\n', '        0x0f1293c916694ac6af4daa2f866f0448d0c2ce8847074a7896d397c961914a08; //keccak256("_TELLOR_CONTRACT");\n', '    bytes32 constant _TELLOR_GETTERS =\n', '        0xabd9bea65759494fe86471c8386762f989e1f2e778949e94efa4a9d1c4b3545a; //keccak256("_TELLOR_GETTERS");\n', '    bytes32 constant _TIME_OF_LAST_NEW_VALUE =\n', '        0x2c8b528fbaf48aaf13162a5a0519a7ad5a612da8ff8783465c17e076660a59f1; //keccak256("_TIME_OF_LAST_NEW_VALUE");\n', '    bytes32 constant _TIME_TARGET =\n', '        0xd4f87b8d0f3d3b7e665df74631f6100b2695daa0e30e40eeac02172e15a999e1; //keccak256("_TIME_TARGET");\n', '    bytes32 constant _TIMESTAMP =\n', '        0x2f9328a9c75282bec25bb04befad06926366736e0030c985108445fa728335e5; //keccak256("_TIMESTAMP");\n', '    bytes32 constant _TOTAL_SUPPLY =\n', '        0xe6148e7230ca038d456350e69a91b66968b222bfac9ebfbea6ff0a1fb7380160; //keccak256("_TOTAL_SUPPLY");\n', '    bytes32 constant _TOTAL_TIP =\n', '        0x1590276b7f31dd8e2a06f9a92867333eeb3eddbc91e73b9833e3e55d8e34f77d; //keccak256("_TOTAL_TIP");\n', '    bytes32 constant _VALUE =\n', '        0x9147231ab14efb72c38117f68521ddef8de64f092c18c69dbfb602ffc4de7f47; //keccak256("_VALUE");\n', '    bytes32 constant _EIP_SLOT =\n', '        0x7050c9e0f4ca769c69bd3a8ef740bc37934f8e2c036e5a723fd8ee048ed3f8c3;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >= 0.4.22 <0.9.0;\n', '\n', 'library console {\n', '\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '\tfunction _sendLogPayload(bytes memory payload) private view {\n', '\t\tuint256 payloadLength = payload.length;\n', '\t\taddress consoleAddress = CONSOLE_ADDRESS;\n', '\t\tassembly {\n', '\t\t\tlet payloadStart := add(payload, 32)\n', '\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n', '\t\t}\n', '\t}\n', '\n', '\tfunction log() internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log()"));\n', '\t}\n', '\n', '\tfunction logInt(int p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '\t}\n', '\n', '\tfunction logUint(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction logString(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction logBool(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction logAddress(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction logBytes(bytes memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '\t}\n', '\n', '\tfunction logBytes1(bytes1 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '\t}\n', '\n', '\tfunction logBytes2(bytes2 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '\t}\n', '\n', '\tfunction logBytes3(bytes3 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '\t}\n', '\n', '\tfunction logBytes4(bytes4 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '\t}\n', '\n', '\tfunction logBytes5(bytes5 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '\t}\n', '\n', '\tfunction logBytes6(bytes6 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '\t}\n', '\n', '\tfunction logBytes7(bytes7 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '\t}\n', '\n', '\tfunction logBytes8(bytes8 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '\t}\n', '\n', '\tfunction logBytes9(bytes9 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '\t}\n', '\n', '\tfunction logBytes10(bytes10 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '\t}\n', '\n', '\tfunction logBytes11(bytes11 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '\t}\n', '\n', '\tfunction logBytes12(bytes12 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '\t}\n', '\n', '\tfunction logBytes13(bytes13 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '\t}\n', '\n', '\tfunction logBytes14(bytes14 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '\t}\n', '\n', '\tfunction logBytes15(bytes15 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '\t}\n', '\n', '\tfunction logBytes16(bytes16 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '\t}\n', '\n', '\tfunction logBytes17(bytes17 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '\t}\n', '\n', '\tfunction logBytes18(bytes18 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '\t}\n', '\n', '\tfunction logBytes19(bytes19 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '\t}\n', '\n', '\tfunction logBytes20(bytes20 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '\t}\n', '\n', '\tfunction logBytes21(bytes21 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '\t}\n', '\n', '\tfunction logBytes22(bytes22 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '\t}\n', '\n', '\tfunction logBytes23(bytes23 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '\t}\n', '\n', '\tfunction logBytes24(bytes24 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '\t}\n', '\n', '\tfunction logBytes25(bytes25 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '\t}\n', '\n', '\tfunction logBytes26(bytes26 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '\t}\n', '\n', '\tfunction logBytes27(bytes27 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '\t}\n', '\n', '\tfunction logBytes28(bytes28 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '\t}\n', '\n', '\tfunction logBytes29(bytes29 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '\t}\n', '\n', '\tfunction logBytes30(bytes30 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '\t}\n', '\n', '\tfunction logBytes31(bytes31 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '\t}\n', '\n', '\tfunction logBytes32(bytes32 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction log(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction log(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction log(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', '/**\n', ' @author Tellor Inc.\n', ' @title Utilities\n', ' @dev Functions for retrieving min and Max in 51 length array (requestQ)\n', ' *Taken partly from: https://github.com/modular-network/ethereum-libraries-array-utils/blob/master/contracts/Array256Lib.sol\n', '*/\n', 'contract Utilities {\n', '    /**\n', '     * @dev This is an internal function called by updateOnDeck that gets the top 5 values\n', '     * @param data is an array [51] to determine the top 5 values from\n', '     * @return max the top 5 values and their index values in the data array\n', '     */\n', '    function _getMax5(uint256[51] memory data)\n', '        internal\n', '        pure\n', '        returns (uint256[5] memory max, uint256[5] memory maxIndex)\n', '    {\n', '        uint256 min5 = data[1];\n', '        uint256 minI = 0;\n', '        for (uint256 j = 0; j < 5; j++) {\n', '            max[j] = data[j + 1]; //max[0]=data[1]\n', '            maxIndex[j] = j + 1; //maxIndex[0]= 1\n', '            if (max[j] < min5) {\n', '                min5 = max[j];\n', '                minI = j;\n', '            }\n', '        }\n', '        for (uint256 i = 6; i < data.length; i++) {\n', '            if (data[i] > min5) {\n', '                max[minI] = data[i];\n', '                maxIndex[minI] = i;\n', '                min5 = data[i];\n', '                for (uint256 j = 0; j < 5; j++) {\n', '                    if (max[j] < min5) {\n', '                        min5 = max[j];\n', '                        minI = j;\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', '/**\n', '  @author Tellor Inc.\n', '  @title TellorStorage\n', '  @dev Contains all the variables/structs used by Tellor\n', '*/\n', 'contract TellorStorage {\n', '    //Internal struct for use in proof-of-work submission\n', '    struct Details {\n', '        uint256 value;\n', '        address miner;\n', '    }\n', '    struct Dispute {\n', '        bytes32 hash; //unique hash of dispute: keccak256(_miner,_requestId,_timestamp)\n', '        int256 tally; //current tally of votes for - against measure\n', '        bool executed; //is the dispute settled\n', '        bool disputeVotePassed; //did the vote pass?\n', '        bool isPropFork; //true for fork proposal NEW\n', "        address reportedMiner; //miner who submitted the 'bad value' will get disputeFee if dispute vote fails\n", "        address reportingParty; //miner reporting the 'bad value'-pay disputeFee will get reportedMiner's stake if dispute vote passes\n", '        address proposedForkAddress; //new fork address (if fork proposal)\n', '        mapping(bytes32 => uint256) disputeUintVars;\n', '        mapping(address => bool) voted; //mapping of address to whether or not they voted\n', '    }\n', '    struct StakeInfo {\n', '        uint256 currentStatus; //0-not Staked, 1=Staked, 2=LockedForWithdraw 3= OnDispute 4=ReadyForUnlocking 5=Unlocked\n', '        uint256 startDate; //stake start date\n', '    }\n', '    //Internal struct to allow balances to be queried by blocknumber for voting purposes\n', '    struct Checkpoint {\n', '        uint128 fromBlock; // fromBlock is the block number that the value was generated from\n', '        uint128 value; // value is the amount of tokens at a specific block number\n', '    }\n', '    struct Request {\n', '        uint256[] requestTimestamps; //array of all newValueTimestamps requested\n', '        mapping(bytes32 => uint256) apiUintVars;\n', '        mapping(uint256 => uint256) minedBlockNum; //[apiId][minedTimestamp]=>block.number\n', '        //This the time series of finalValues stored by the contract where uint UNIX timestamp is mapped to value\n', '        mapping(uint256 => uint256) finalValues;\n', '        mapping(uint256 => bool) inDispute; //checks if API id is in dispute or finalized.\n', '        mapping(uint256 => address[5]) minersByValue;\n', '        mapping(uint256 => uint256[5]) valuesByTimestamp;\n', '    }\n', '    uint256[51] requestQ; //uint50 array of the top50 requests by payment amount\n', '    uint256[] public newValueTimestamps; //array of all timestamps requested\n', '    //This is a boolean that tells you if a given challenge has been completed by a given miner\n', '    mapping(uint256 => uint256) requestIdByTimestamp; //minedTimestamp to apiId\n', '    mapping(uint256 => uint256) requestIdByRequestQIndex; //link from payoutPoolIndex (position in payout pool array) to apiId\n', '    mapping(uint256 => Dispute) public disputesById; //disputeId=> Dispute details\n', '    mapping(bytes32 => uint256) public requestIdByQueryHash; // api bytes32 gets an id = to count of requests array\n', '    mapping(bytes32 => uint256) public disputeIdByDisputeHash; //maps a hash to an ID for each dispute\n', '    mapping(bytes32 => mapping(address => bool)) public minersByChallenge;\n', '    Details[5] public currentMiners; //This struct is for organizing the five mined values to find the median\n', '    mapping(address => StakeInfo) stakerDetails; //mapping from a persons address to their staking info\n', '    mapping(uint256 => Request) requestDetails;\n', '    mapping(bytes32 => uint256) public uints;\n', '    mapping(bytes32 => address) public addresses;\n', '    mapping(bytes32 => bytes32) public bytesVars;\n', '    //ERC20 storage\n', '    mapping(address => Checkpoint[]) public balances;\n', '    mapping(address => mapping(address => uint256)) public _allowances;\n', '    //Migration storage\n', '    mapping(address => bool) public migrated;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 300\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']