['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.7.0;\n', 'import "./ScaleBuying.sol";\n', 'import "./InitialLiquidityOffering.sol";\n', 'import "./DelegateOwnershipManager.sol";\n', 'import "./AbqErc20.sol";\n', '\n', '/// @notice Contract used to ratify the ICO and ILO for the ABQ token.\n', 'contract SaleRatification\n', '{\n', '    /// @notice Ratify the ICO and ILO for the ABQ token.\n', '    /// @param _ilo The intended Initial Liquidity Offering (ILO) to use.\n', '    /// @param _ico The intended Initial Coin Offering (ICO) to use.\n', '    /// @param _treasury The Aardbanq DAO treasury that bounty tokens will be minted for.\n', '    /// @param _ownershipManager The delegate manager for the ownership and minting permissions for the ABQ token.\n', '    /// @param _token The ABQ token.\n', '    function ratify(InitialLiquidityOffering _ilo, ScaleBuying _ico, address _treasury, DelegateOwnershipManager _ownershipManager, AbqErc20 _token)\n', '        external\n', '    {\n', '        // CG: set the pricer for the ILO as the ICO and the liquidity establisher for the ICO as the ILO\n', '        _ilo.setPricer(_ico);\n', '        _ico.setLiquidityEstablisher(_ilo);\n', '\n', '        // CG: Give ownership of the token to the DelegateOwnershipManager and give mint permission to the ICO and ILO.\n', '        _token.changeOwner(address(_ownershipManager));\n', '        _ownershipManager.setMintPermission(address(_ilo), true);\n', '        _ownershipManager.setMintPermission(address(_ico), true);\n', '\n', '        _ownershipManager.mint(address(_ico), 11585 ether); // CG: Auction tokens\n', '        _ownershipManager.mint(address(_treasury), 50000 ether);    // CG: Bounty tokens\n', '    }\n', '}']