['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: contracts\\Interfaces.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library MathUtil {\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', 'interface ICurveGauge {\n', '    function deposit(uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function withdraw(uint256) external;\n', '    function claim_rewards() external;\n', '    function reward_tokens(uint256) external view returns(address);//v2\n', '    function rewarded_token() external view returns(address);//v1\n', '}\n', '\n', 'interface ICurveVoteEscrow {\n', '    function create_lock(uint256, uint256) external;\n', '    function increase_amount(uint256) external;\n', '    function increase_unlock_time(uint256) external;\n', '    function withdraw() external;\n', '    function smart_wallet_checker() external view returns (address);\n', '}\n', '\n', 'interface IWalletChecker {\n', '    function check(address) external view returns (bool);\n', '}\n', '\n', 'interface IVoting{\n', '    function vote(uint256, bool, bool) external; //voteId, support, executeIfDecided\n', '    function getVote(uint256) external view returns(bool,bool,uint64,uint64,uint64,uint64,uint256,uint256,uint256,bytes memory); \n', '    function vote_for_gauge_weights(address,uint256) external;\n', '}\n', '\n', 'interface IMinter{\n', '    function mint(address) external;\n', '}\n', '\n', 'interface IRegistry{\n', '    function get_registry() external view returns(address);\n', '    function get_address(uint256 _id) external view returns(address);\n', '    function gauge_controller() external view returns(address);\n', '    function get_lp_token(address) external view returns(address);\n', '    function get_gauges(address) external view returns(address[10] memory,uint128[10] memory);\n', '}\n', '\n', 'interface IStaker{\n', '    function deposit(address, address) external;\n', '    function withdraw(address) external;\n', '    function withdraw(address, address, uint256) external;\n', '    function withdrawAll(address, address) external;\n', '    function createLock(uint256, uint256) external;\n', '    function increaseAmount(uint256) external;\n', '    function increaseTime(uint256) external;\n', '    function release() external;\n', '    function claimCrv(address) external returns (uint256);\n', '    function claimRewards(address) external;\n', '    function claimFees(address,address) external;\n', '    function setStashAccess(address, bool) external;\n', '    function vote(uint256,address,bool) external;\n', '    function voteGaugeWeight(address,uint256) external;\n', '    function balanceOfPool(address) external view returns (uint256);\n', '    function operator() external view returns (address);\n', '    function execute(address _to, uint256 _value, bytes calldata _data) external returns (bool, bytes memory);\n', '}\n', '\n', 'interface IRewards{\n', '    function stake(address, uint256) external;\n', '    function stakeFor(address, uint256) external;\n', '    function withdraw(address, uint256) external;\n', '    function exit(address) external;\n', '    function getReward(address) external;\n', '    function queueNewRewards(uint256) external;\n', '    function notifyRewardAmount(uint256) external;\n', '    function addExtraReward(address) external;\n', '    function stakingToken() external returns (address);\n', '}\n', '\n', 'interface IStash{\n', '    function stashRewards() external returns (bool);\n', '    function processStash() external returns (bool);\n', '    function claimRewards() external returns (bool);\n', '}\n', '\n', 'interface IFeeDistro{\n', '    function claim() external;\n', '    function token() external view returns(address);\n', '}\n', '\n', 'interface ITokenMinter{\n', '    function mint(address,uint256) external;\n', '    function burn(address,uint256) external;\n', '}\n', '\n', 'interface IDeposit{\n', '    function isShutdown() external view returns(bool);\n', '    function balanceOf(address _account) external view returns(uint256);\n', '    function totalSupply() external view returns(uint256);\n', '    function poolInfo(uint256) external view returns(address,address,address,address,address, bool);\n', '    function rewardClaimed(uint256,address,uint256) external;\n', '    function withdrawTo(uint256,uint256,address) external;\n', '    function claimRewards(uint256,address) external returns(bool);\n', '    function rewardArbitrator() external returns(address);\n', '}\n', '\n', 'interface ICrvDeposit{\n', '    function deposit(uint256, bool) external;\n', '    function lockIncentive() external view returns(uint256);\n', '}\n', '\n', 'interface IRewardFactory{\n', '    function setAccess(address,bool) external;\n', '    function CreateCrvRewards(uint256,address) external returns(address);\n', '    function CreateTokenRewards(address,address,address) external returns(address);\n', '    function activeRewardCount(address) external view returns(uint256);\n', '    function addActiveReward(address,uint256) external returns(bool);\n', '    function removeActiveReward(address,uint256) external returns(bool);\n', '}\n', '\n', 'interface IStashFactory{\n', '    function CreateStash(uint256,address,address,uint256) external returns(address);\n', '}\n', '\n', 'interface ITokenFactory{\n', '    function CreateDepositToken(address) external returns(address);\n', '}\n', '\n', 'interface IPools{\n', '    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool);\n', '    function shutdownPool(uint256 _pid) external returns(bool);\n', '    function poolInfo(uint256) external view returns(address,address,address,address,address,bool);\n', '    function poolLength() external view returns (uint256);\n', '    function gaugeMap(address) external view returns(bool);\n', '    function setPoolManager(address _poolM) external;\n', '}\n', '\n', 'interface IVestedEscrow{\n', '    function fund(address[] calldata _recipient, uint256[] calldata _amount) external returns(bool);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\utils\\Address.sol\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin\\contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\Booster.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', 'contract Booster{\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    address public constant registry = address(0x0000000022D53366457F9d5E68Ec105046FC4383);\n', '    uint256 public constant distributionAddressId = 4;\n', '    address public constant voteOwnership = address(0xE478de485ad2fe566d49342Cbd03E49ed7DB3356);\n', '    address public constant voteParameter = address(0xBCfF8B0b9419b9A88c44546519b1e909cF330399);\n', '\n', '    uint256 public lockIncentive = 1000; //incentive to crv stakers\n', '    uint256 public stakerIncentive = 450; //incentive to native token stakers\n', '    uint256 public earmarkIncentive = 50; //incentive to users who spend gas to make calls\n', '    uint256 public platformFee = 0; //possible fee to build treasury\n', '    uint256 public constant MaxFees = 2000;\n', '    uint256 public constant FEE_DENOMINATOR = 10000;\n', '\n', '    address public owner;\n', '    address public feeManager;\n', '    address public poolManager;\n', '    address public immutable staker;\n', '    address public immutable minter;\n', '    address public rewardFactory;\n', '    address public stashFactory;\n', '    address public tokenFactory;\n', '    address public rewardArbitrator;\n', '    address public voteDelegate;\n', '    address public treasury;\n', '    address public stakerRewards; //cvx rewards\n', '    address public lockRewards; //cvxCrv rewards(crv)\n', '    address public lockFees; //cvxCrv vecrv fees\n', '    address public feeDistro;\n', '    address public feeToken;\n', '\n', '    bool public isShutdown;\n', '\n', '    struct PoolInfo {\n', '        address lptoken;\n', '        address token;\n', '        address gauge;\n', '        address crvRewards;\n', '        address stash;\n', '        bool shutdown;\n', '    }\n', '\n', '    //index(pid) -> pool\n', '    PoolInfo[] public poolInfo;\n', '    mapping(address => bool) public gaugeMap;\n', '\n', '    event Deposited(address indexed user, uint256 indexed poolid, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 indexed poolid, uint256 amount);\n', '\n', '    constructor(address _staker, address _minter) public {\n', '        isShutdown = false;\n', '        staker = _staker;\n', '        owner = msg.sender;\n', '        voteDelegate = msg.sender;\n', '        feeManager = msg.sender;\n', '        poolManager = msg.sender;\n', '        feeDistro = address(0); //address(0xA464e6DCda8AC41e03616F95f4BC98a13b8922Dc);\n', '        feeToken = address(0); //address(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n', '        treasury = address(0);\n', '        minter = _minter;\n', '    }\n', '\n', '\n', '    /// SETTER SECTION ///\n', '\n', '    function setOwner(address _owner) external {\n', '        require(msg.sender == owner, "!auth");\n', '        owner = _owner;\n', '    }\n', '\n', '    function setFeeManager(address _feeM) external {\n', '        require(msg.sender == feeManager, "!auth");\n', '        feeManager = _feeM;\n', '    }\n', '\n', '    function setPoolManager(address _poolM) external {\n', '        require(msg.sender == poolManager, "!auth");\n', '        poolManager = _poolM;\n', '    }\n', '\n', '    function setFactories(address _rfactory, address _sfactory, address _tfactory) external {\n', '        require(msg.sender == owner, "!auth");\n', '        \n', '        //reward factory only allow this to be called once even if owner\n', '        //removes ability to inject malicious staking contracts\n', '        //token factory can also be immutable\n', '        if(rewardFactory == address(0)){\n', '            rewardFactory = _rfactory;\n', '            tokenFactory = _tfactory;\n', '        }\n', '\n', '        //stash factory should be considered more safe to change\n', '        //updating may be required to handle new types of gauges\n', '        stashFactory = _sfactory;\n', '    }\n', '\n', '    function setArbitrator(address _arb) external {\n', '        require(msg.sender==owner, "!auth");\n', '        rewardArbitrator = _arb;\n', '    }\n', '\n', '    function setVoteDelegate(address _voteDelegate) external {\n', '        require(msg.sender==voteDelegate, "!auth");\n', '        voteDelegate = _voteDelegate;\n', '    }\n', '\n', '    function setRewardContracts(address _rewards, address _stakerRewards) external {\n', '        require(msg.sender == owner, "!auth");\n', '        \n', '        //reward contracts are immutable or else the owner\n', '        //has a means to redeploy and mint cvx via rewardClaimed()\n', '        if(lockRewards == address(0)){\n', '            lockRewards = _rewards;\n', '            stakerRewards = _stakerRewards;\n', '        }\n', '    }\n', '\n', "    // Set reward token and claim contract, get from Curve's registry\n", '    function setFeeInfo() external {\n', '        require(msg.sender==feeManager, "!auth");\n', '        \n', '        feeDistro = IRegistry(registry).get_address(distributionAddressId);\n', '        address _feeToken = IFeeDistro(feeDistro).token();\n', '        if(feeToken != _feeToken){\n', '            //create a new reward contract for the new token\n', '            lockFees = IRewardFactory(rewardFactory).CreateTokenRewards(_feeToken,lockRewards,address(this));\n', '            feeToken = _feeToken;\n', '        }\n', '    }\n', '\n', '    function setFees(uint256 _lockFees, uint256 _stakerFees, uint256 _callerFees, uint256 _platform) external{\n', '        require(msg.sender==feeManager, "!auth");\n', '\n', '        uint256 total = _lockFees.add(_stakerFees).add(_callerFees).add(_platform);\n', '        require(total <= MaxFees, ">MaxFees");\n', '\n', '        //values must be within certain ranges     \n', '        if(_lockFees >= 1000 && _lockFees <= 1500\n', '            && _stakerFees >= 300 && _stakerFees <= 600\n', '            && _callerFees >= 10 && _callerFees <= 100\n', '            && _platform <= 200){\n', '            lockIncentive = _lockFees;\n', '            stakerIncentive = _stakerFees;\n', '            earmarkIncentive = _callerFees;\n', '            platformFee = _platform;\n', '        }\n', '    }\n', '\n', '    function setTreasury(address _treasury) external {\n', '        require(msg.sender==feeManager, "!auth");\n', '        treasury = _treasury;\n', '    }\n', '\n', '    /// END SETTER SECTION ///\n', '\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    //create a new pool\n', '    function addPool(address _lptoken, address _gauge, uint256 _stashVersion) external returns(bool){\n', '        require(msg.sender==poolManager && !isShutdown, "!add");\n', '        require(_gauge != address(0) && _lptoken != address(0),"!param");\n', '\n', "        //the next pool's pid\n", '        uint256 pid = poolInfo.length;\n', '\n', '        //create a tokenized deposit\n', '        address token = ITokenFactory(tokenFactory).CreateDepositToken(_lptoken);\n', '        //create a reward contract for crv rewards\n', '        address newRewardPool = IRewardFactory(rewardFactory).CreateCrvRewards(pid,token);\n', '        //create a stash to handle extra incentives\n', '        address stash = IStashFactory(stashFactory).CreateStash(pid,_gauge,staker,_stashVersion);\n', '\n', '        //add the new pool\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                lptoken: _lptoken,\n', '                token: token,\n', '                gauge: _gauge,\n', '                crvRewards: newRewardPool,\n', '                stash: stash,\n', '                shutdown: false\n', '            })\n', '        );\n', '        gaugeMap[_gauge] = true;\n', '        //give stashes access to rewardfactory and voteproxy\n', '        //   voteproxy so it can grab the incentive tokens off the contract after claiming rewards\n', '        //   reward factory so that stashes can make new extra reward contracts if a new incentive is added to the gauge\n', '        if(stash != address(0)){\n', '            poolInfo[pid].stash = stash;\n', '            IStaker(staker).setStashAccess(stash,true);\n', '            IRewardFactory(rewardFactory).setAccess(stash,true);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    //shutdown pool\n', '    function shutdownPool(uint256 _pid) external returns(bool){\n', '        require(msg.sender==poolManager, "!auth");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '\n', '        //withdraw from gauge\n', '        try IStaker(staker).withdrawAll(pool.lptoken,pool.gauge){\n', '        }catch{}\n', '\n', '        pool.shutdown = true;\n', '        gaugeMap[pool.gauge] = false;\n', '        return true;\n', '    }\n', '\n', '    //shutdown this contract.\n', '    //  unstake and pull all lp tokens to this address\n', '    //  only allow withdrawals\n', '    function shutdownSystem() external{\n', '        require(msg.sender == owner, "!auth");\n', '        isShutdown = true;\n', '\n', '        for(uint i=0; i < poolInfo.length; i++){\n', '            PoolInfo storage pool = poolInfo[i];\n', '            if (pool.shutdown) continue;\n', '\n', '            address token = pool.lptoken;\n', '            address gauge = pool.gauge;\n', '\n', '            //withdraw from gauge\n', '            try IStaker(staker).withdrawAll(token,gauge){\n', '                pool.shutdown = true;\n', '            }catch{}\n', '        }\n', '    }\n', '\n', '\n', '    //deposit lp tokens and stake\n', '    function deposit(uint256 _pid, uint256 _amount, bool _stake) public returns(bool){\n', '        require(!isShutdown,"shutdown");\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.shutdown == false, "pool is closed");\n', '\n', '        //send to proxy to stake\n', '        address lptoken = pool.lptoken;\n', '        IERC20(lptoken).safeTransferFrom(msg.sender, staker, _amount);\n', '\n', '        //stake\n', '        address gauge = pool.gauge;\n', '        require(gauge != address(0),"!gauge setting");\n', '        IStaker(staker).deposit(lptoken,gauge);\n', '\n', '        //some gauges claim rewards when depositing, stash them in a seperate contract until next claim\n', '        address stash = pool.stash;\n', '        if(stash != address(0)){\n', '            IStash(stash).stashRewards();\n', '        }\n', '\n', '        address token = pool.token;\n', '        if(_stake){\n', '            //mint here and send to rewards on user behalf\n', '            ITokenMinter(token).mint(address(this),_amount);\n', '            address rewardContract = pool.crvRewards;\n', '            IERC20(token).safeApprove(rewardContract,0);\n', '            IERC20(token).safeApprove(rewardContract,_amount);\n', '            IRewards(rewardContract).stakeFor(msg.sender,_amount);\n', '        }else{\n', '            //add user balance directly\n', '            ITokenMinter(token).mint(msg.sender,_amount);\n', '        }\n', '\n', '        \n', '        emit Deposited(msg.sender, _pid, _amount);\n', '        return true;\n', '    }\n', '\n', '    //deposit all lp tokens and stake\n', '    function depositAll(uint256 _pid, bool _stake) external returns(bool){\n', '        address lptoken = poolInfo[_pid].lptoken;\n', '        uint256 balance = IERC20(lptoken).balanceOf(msg.sender);\n', '        deposit(_pid,balance,_stake);\n', '        return true;\n', '    }\n', '\n', '    //withdraw lp tokens\n', '    function _withdraw(uint256 _pid, uint256 _amount, address _from, address _to) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        address lptoken = pool.lptoken;\n', '        address gauge = pool.gauge;\n', '\n', '        //remove lp balance\n', '        address token = pool.token;\n', '        ITokenMinter(token).burn(_from,_amount);\n', '\n', '        //pull from gauge if not shutdown\n', '        // if shutdown tokens will be in this contract\n', '        if (!pool.shutdown) {\n', '            IStaker(staker).withdraw(lptoken,gauge, _amount);\n', '        }\n', '\n', '        //some gauges claim rewards when withdrawing, stash them in a seperate contract until next claim\n', '        //do not call if shutdown since stashes wont have access\n', '        address stash = pool.stash;\n', '        if(stash != address(0) && !isShutdown && !pool.shutdown){\n', '            IStash(stash).stashRewards();\n', '        }\n', '        \n', '        //return lp tokens\n', '        IERC20(lptoken).safeTransfer(_to, _amount);\n', '\n', '        emit Withdrawn(_to, _pid, _amount);\n', '    }\n', '\n', '    //withdraw lp tokens\n', '    function withdraw(uint256 _pid, uint256 _amount) public returns(bool){\n', '        _withdraw(_pid,_amount,msg.sender,msg.sender);\n', '        return true;\n', '    }\n', '\n', '    //withdraw all lp tokens\n', '    function withdrawAll(uint256 _pid) public returns(bool){\n', '        address token = poolInfo[_pid].token;\n', '        uint256 userBal = IERC20(token).balanceOf(msg.sender);\n', '        withdraw(_pid, userBal);\n', '        return true;\n', '    }\n', '\n', '    //allow reward contracts to send here and withdraw to user\n', '    function withdrawTo(uint256 _pid, uint256 _amount, address _to) external returns(bool){\n', '        address rewardContract = poolInfo[_pid].crvRewards;\n', '        require(msg.sender == rewardContract,"!auth");\n', '\n', '        _withdraw(_pid,_amount,msg.sender,_to);\n', '        return true;\n', '    }\n', '\n', '\n', '    //delegate address votes on dao\n', '    function vote(uint256 _voteId, address _votingAddress, bool _support) external returns(bool){\n', '        require(msg.sender == voteDelegate, "!auth");\n', '        require(_votingAddress == voteOwnership || _votingAddress == voteParameter, "!voteAddr");\n', '        \n', '        IStaker(staker).vote(_voteId,_votingAddress,_support);\n', '        return true;\n', '    }\n', '\n', '    function voteGaugeWeight(address[] calldata _gauge, uint256[] calldata _weight ) external returns(bool){\n', '        require(msg.sender == voteDelegate, "!auth");\n', '\n', '        for(uint256 i = 0; i < _gauge.length; i++){\n', '            IStaker(staker).voteGaugeWeight(_gauge[i],_weight[i]);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function claimRewards(uint256 _pid, address _gauge) external returns(bool){\n', '        address stash = poolInfo[_pid].stash;\n', '        require(msg.sender == stash,"!auth");\n', '\n', '        IStaker(staker).claimRewards(_gauge);\n', '        return true;\n', '    }\n', '\n', '    function setGaugeRedirect(uint256 _pid) external returns(bool){\n', '        address stash = poolInfo[_pid].stash;\n', '        require(msg.sender == stash,"!auth");\n', '        address gauge = poolInfo[_pid].gauge;\n', '        bytes memory data = abi.encodeWithSelector(bytes4(keccak256("set_rewards_receiver(address)")), stash);\n', '        IStaker(staker).execute(gauge,uint256(0),data);\n', '        return true;\n', '    }\n', '\n', '    //claim crv and extra rewards and disperse to reward contracts\n', '    function _earmarkRewards(uint256 _pid) internal {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        require(pool.shutdown == false, "pool is closed");\n', '\n', '        address gauge = pool.gauge;\n', '\n', '        //claim crv\n', '        IStaker(staker).claimCrv(gauge);\n', '\n', '        //check if there are extra rewards\n', '        address stash = pool.stash;\n', '        if(stash != address(0)){\n', '            //claim extra rewards\n', '            IStash(stash).claimRewards();\n', '            //process extra rewards\n', '            IStash(stash).processStash();\n', '        }\n', '\n', '        //crv balance\n', '        uint256 crvBal = IERC20(crv).balanceOf(address(this));\n', '\n', '        if (crvBal > 0) {\n', '            uint256 _lockIncentive = crvBal.mul(lockIncentive).div(FEE_DENOMINATOR);\n', '            uint256 _stakerIncentive = crvBal.mul(stakerIncentive).div(FEE_DENOMINATOR);\n', '            uint256 _callIncentive = crvBal.mul(earmarkIncentive).div(FEE_DENOMINATOR);\n', '            \n', '            //send treasury\n', '            if(treasury != address(0) && treasury != address(this) && platformFee > 0){\n', '                //only subtract after address condition check\n', '                uint256 _platform = crvBal.mul(platformFee).div(FEE_DENOMINATOR);\n', '                crvBal = crvBal.sub(_platform);\n', '                IERC20(crv).safeTransfer(treasury, _platform);\n', '            }\n', '\n', '            //remove incentives from balance\n', '            crvBal = crvBal.sub(_lockIncentive).sub(_callIncentive).sub(_stakerIncentive);\n', '\n', '            //send incentives for calling\n', '            IERC20(crv).safeTransfer(msg.sender, _callIncentive);          \n', '\n', '            //send crv to lp provider reward contract\n', '            address rewardContract = pool.crvRewards;\n', '            IERC20(crv).safeTransfer(rewardContract, crvBal);\n', '            IRewards(rewardContract).queueNewRewards(crvBal);\n', '\n', "            //send lockers' share of crv to reward contract\n", '            IERC20(crv).safeTransfer(lockRewards, _lockIncentive);\n', '            IRewards(lockRewards).queueNewRewards(_lockIncentive);\n', '\n', "            //send stakers's share of crv to reward contract\n", '            IERC20(crv).safeTransfer(stakerRewards, _stakerIncentive);\n', '            IRewards(stakerRewards).queueNewRewards(_stakerIncentive);\n', '        }\n', '    }\n', '\n', '    function earmarkRewards(uint256 _pid) external returns(bool){\n', '        require(!isShutdown,"shutdown");\n', '        _earmarkRewards(_pid);\n', '        return true;\n', '    }\n', '\n', "    //claim fees from curve distro contract, put in lockers' reward contract\n", '    function earmarkFees() external returns(bool){\n', '        //claim fee rewards\n', '        IStaker(staker).claimFees(feeDistro, feeToken);\n', '        //send fee rewards to reward contract\n', '        uint256 _balance = IERC20(feeToken).balanceOf(address(this));\n', '        IERC20(feeToken).safeTransfer(lockFees, _balance);\n', '        IRewards(lockFees).queueNewRewards(_balance);\n', '        return true;\n', '    }\n', '\n', '    //callback from reward contract when crv is received.\n', '    function rewardClaimed(uint256 _pid, address _address, uint256 _amount) external returns(bool){\n', '        address rewardContract = poolInfo[_pid].crvRewards;\n', '        require(msg.sender == rewardContract || msg.sender == lockRewards, "!auth");\n', '\n', '        //mint reward tokens\n', '        ITokenMinter(minter).mint(_address,_amount);\n', '        \n', '        return true;\n', '    }\n', '\n', '}']