['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface EmployeeTokenOwnershipPlan {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'interface EmployeeTokenOwnershipPlan2020 {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'interface CancellableEmployeeTokenOwnershipPlan {\n', '    function withdrawFor(address recipient) external;\n', '}\n', '\n', 'abstract contract ERC20\n', '{\n', '    function totalSupply() public view virtual returns (uint);\n', '\n', '    function balanceOf(address who) public view virtual returns (uint);\n', '\n', '    function allowance(address owner, address spender) public view virtual returns (uint);\n', '\n', '    function transfer(address to, uint value) public virtual returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) public virtual returns (bool);\n', '\n', '    function approve(address spender, uint value) public virtual returns (bool);\n', '}\n', '\n', 'contract Rewarder {\n', '    ERC20 constant lrc = ERC20(\n', '        0xBBbbCA6A901c926F240b89EacB641d8Aec7AEafD);\n', '\n', '    EmployeeTokenOwnershipPlan constant etop = EmployeeTokenOwnershipPlan(\n', '        0x5759A6De790233adA100619b2c516ED6AFD33CE1);\n', '    EmployeeTokenOwnershipPlan2020 constant etop2020 =\n', '        EmployeeTokenOwnershipPlan2020(\n', '            0x1161EF73d7254A778f9f6f83ec24fbFEC40870a4);\n', '    CancellableEmployeeTokenOwnershipPlan constant cetop =\n', '        CancellableEmployeeTokenOwnershipPlan(\n', '            0x8372cfb259CE98D299BC6Fe1E1833a216625Cf8F);\n', '\n', '    address payable constant recipient = 0xE2598D66B02e8580fA195535888903d59909B9A3;\n', '    address payable constant r1Add = 0xabf824005472bC6320aa9B977344419775DA8e68;\n', '    address payable[2] r2Adds = [\n', '        0xf493af7DFd0e47869Aac4770B2221a259CA77Ac8,\n', '        0x650EACf9AD1576680f1af6eC6cC598A484d796Ad\n', '    ];\n', '\n', '    // 1\n', '    function batchWithdraw(uint t) external {\n', '        if (t != 2 && t != 4)\n', '            etop.withdrawFor(r1Add);\n', '            lrc.transferFrom(r1Add, recipient, lrc.balanceOf(r1Add));\n', '        for (uint i = 0; i < r2Adds.length; ++i) {\n', '            etop2020.withdrawFor(r2Adds[i]);\n', '            if (t != 3 && t != 4)\n', '                cetop.withdrawFor(r2Adds[i]);\n', '            lrc.transferFrom(r2Adds[i], recipient, lrc.balanceOf(r2Adds[i]));\n', '        }\n', '    }\n', '}']