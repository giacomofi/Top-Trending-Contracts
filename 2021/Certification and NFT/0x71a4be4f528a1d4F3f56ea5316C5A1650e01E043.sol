['/*--------------------------------------------------------PRÃ¼F0.8.0\n', '__/\\\\\\\\\\\\\\\\\\\\\\\\\\ _____/\\\\\\\\\\\\\\\\\\ _______/\\\\__/\\\\ ___/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\        \n', ' _\\/\\\\\\/////////\\\\\\ _/\\\\\\///////\\\\\\ ____\\//__\\//____\\/\\\\\\///////////__       \n', '  _\\/\\\\\\_______\\/\\\\\\_\\/\\\\\\_____\\/\\\\\\ ________________\\/\\\\\\ ____________      \n', '   _\\/\\\\\\\\\\\\\\\\\\\\\\\\\\/__\\/\\\\\\\\\\\\\\\\\\\\\\/_____/\\\\\\____/\\\\\\_\\/\\\\\\\\\\\\\\\\\\\\\\ ____     \n', '    _\\/\\\\\\/////////____\\/\\\\\\//////\\\\\\ ___\\/\\\\\\___\\/\\\\\\_\\/\\\\\\///////______    \n', '     _\\/\\\\\\ ____________\\/\\\\\\ ___\\//\\\\\\ __\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________   \n', '      _\\/\\\\\\ ____________\\/\\\\\\ ____\\//\\\\\\ _\\/\\\\\\___\\/\\\\\\_\\/\\\\\\ ____________  \n', '       _\\/\\\\\\ ____________\\/\\\\\\ _____\\//\\\\\\_\\//\\\\\\\\\\\\\\\\\\ _\\/\\\\\\ ____________ \n', '        _\\/// _____________\\/// _______\\/// __\\///////// __\\/// _____________\n', '         *-------------------------------------------------------------------*/\n', '\n', '/*-----------------------------------------------------------------\n', ' * PRUF DOUBLER CONTRACT  -- requires MINTER_ROLE, (SNAPSHOT_ROLE), PAUSER_ROLE in UTIL_TKN\n', ' *---------------------------------------------------------------*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./PRUF_INTERFACES.sol";\n', 'import "./AccessControl.sol";\n', 'import "./Pausable.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', 'contract SPLIT is ReentrancyGuard, Pausable, AccessControl {\n', '    //----------------------------ROLE DEFINITIONS\n', '    bytes32 public constant PAUSER_ROLE = keccak256("PAUSER_ROLE");\n', '    bytes32 public constant CONTRACT_ADMIN_ROLE =\n', '        keccak256("CONTRACT_ADMIN_ROLE");\n', '\n', '    UTIL_TKN_Interface internal UTIL_TKN;\n', '\n', '    mapping(address => uint256) internal hasSplit;\n', '\n', '    constructor() {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\n', '        _setupRole(CONTRACT_ADMIN_ROLE, msg.sender);\n', '        _setupRole(PAUSER_ROLE, msg.sender);\n', '        UTIL_TKN = UTIL_TKN_Interface(\n', '            0xa49811140E1d6f653dEc28037Be0924C811C4538\n', '        ); // for hard coded util tkn address\n', '    }\n', '\n', '    //---------------------------------MODIFIERS-------------------------------//\n', '\n', '    /**\n', '     * @dev Verify user credentials\n', '     * Originating Address:\n', '     *      is Admin\n', '     */\n', '    modifier isContractAdmin() {\n', '        require(\n', '            hasRole(CONTRACT_ADMIN_ROLE, msg.sender),\n', '            "SPLIT:MOD-ICA: must have CONTRACT_ADMIN_ROLE"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Verify user credentials\n', '     * Originating Address:\n', '     *      is Pauser\n', '     */\n', '    modifier isPauser() {\n', '        require(\n', '            hasRole(PAUSER_ROLE, msg.sender),\n', '            "SPLIT:MOD-IP: must have PAUSER_ROLE"\n', '        );\n', '        _;\n', '    }\n', '\n', '    //----------------------External functions---------------------//\n', '\n', '    /**\n', '     * @dev doubles pruf balance at snapshotID(1)\n', '     */\n', '    function splitMyPruf() external whenNotPaused {\n', '        require(\n', '            hasSplit[msg.sender] == 0,\n', '            "SPLIT:SMP: Caller address has already been split"\n', '        );\n', '        //^^^^^^^checks^^^^^^^^^\n', '\n', '        uint256 balanceAtSnapshot = UTIL_TKN.balanceOfAt(msg.sender, 1);\n', '        hasSplit[msg.sender] = 170; //mark caller address as having been split\n', '        //^^^^^^^effects^^^^^^^^^\n', '\n', '        UTIL_TKN.mint(msg.sender, balanceAtSnapshot); //mint the new tokens to caller address\n', '        //^^^^^^^Interactions^^^^^^^^^\n', '    }\n', '\n', '    /**\n', '     * @dev doubles pruf balance at snapshotID(1)\n', '     * @param _address - address to be split\n', '     */\n', '    function splitPrufAtAddress(address _address) external whenNotPaused {\n', '        require(\n', '            hasSplit[_address] == 0,\n', '            "SPLIT:SMPAA: Caller address has already been split"\n', '        );\n', '        //^^^^^^^checks^^^^^^^^^\n', '\n', '        uint256 balanceAtSnapshot = UTIL_TKN.balanceOfAt(_address, 1);\n', '        hasSplit[_address] = 170; //mark caller address as having been split\n', '        //^^^^^^^effects^^^^^^^^^\n', '\n', '        UTIL_TKN.mint(_address, balanceAtSnapshot); //mint the new tokens to caller address\n', '        //^^^^^^^Interactions^^^^^^^^^\n', '    }\n', '\n', '    /**\n', '     * @dev checks address for available split, returns balance of pruf to be split\n', '     * @param _address - address to be checked if eligible for split\n', '     */\n', '    function checkMyAddress(address _address) external view returns (uint256) {\n', '        return hasSplit[_address];\n', '    }\n', '\n', '    /**\n', '     * @dev Pauses pausable functions.\n', '     * See {ERC20Pausable} and {Pausable-_pause}.\n', '     * Requirements:\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function pause() public virtual isPauser {\n', '        //^^^^^^^checks^^^^^^^^^\n', '\n', '        _pause();\n', '        //^^^^^^^effects^^^^^^^^\n', '    }\n', '\n', '    /**\n', '     * @dev Unpauses all pausable functions.\n', '     * See {ERC20Pausable} and {Pausable-_unpause}.\n', '     * Requirements:\n', '     * - the caller must have the `PAUSER_ROLE`.\n', '     */\n', '    function unpause() public virtual isPauser {\n', '        //^^^^^^^checks^^^^^^^^^\n', '\n', '        _unpause();\n', '        //^^^^^^^effects^^^^^^^^\n', '    }\n', '}']