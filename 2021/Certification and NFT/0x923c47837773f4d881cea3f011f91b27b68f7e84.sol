['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// @dev Telegram: defi_guru\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', 'interface IUniswapV2Factory {\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function sync() external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '      address token,\n', '      uint liquidity,\n', '      uint amountTokenMin,\n', '      uint amountETHMin,\n', '      address to,\n', '      uint deadline\n', '    ) external returns (uint amountETH);\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '}\n', '\n', 'library SafeCast {\n', '\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '    \n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', 'contract SteakFinance is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using SafeCast for int256;\n', '  \n', '    string private _name = "SteakFinance";\n', '    string private _symbol = "STK";\n', '    uint8 private _decimals = 5;\n', '\n', '    mapping(address => uint256) internal _reflectionBalance;\n', '    mapping(address => uint256) internal _tokenBalance;\n', '    mapping(address => mapping(address => uint256)) internal _allowances;\n', '\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 internal _tokenTotal = 100_000_000_000e5;\n', '    uint256 internal _reflectionTotal = (MAX - (MAX % _tokenTotal));\n', '\n', '    mapping(address => bool) isTaxless;\n', '    mapping(address => bool) internal _isExcluded;\n', '    address[] internal _excluded;\n', '        \n', '    //all fees\n', '    uint256 public feeDecimal = 2;\n', '    uint256 public teamFee = 250;\n', '    uint256 public liquidityFee = 250;\n', '    uint256 public taxFee = 250;\n', '    uint256 public p2pTaxFee = 500;\n', '   \n', '    uint256 public feeTotal;\n', '\n', '    address public teamWallet;\n', '    address public interestWallet;\n', '    \n', '    bool private inSwapAndLiquify;\n', '    bool public swapAndLiquifyEnabled = true;\n', '    bool public isFeeActive = false; // should be true\n', '    mapping(address => bool) public bots;\n', '    \n', '    uint256 public maxTxAmount = _tokenTotal.div(1000);// 0.1%\n', '    uint256 public maxPriceImpact = 200; // 2%\n', '    uint256 public minTokensBeforeSwap = 1000_000e5;\n', '    \n', '    bool public cooldownEnabled = true;\n', '    \n', '    mapping(address => uint256) public sellCooldown;\n', '    mapping(address => uint256) public buyCooldown;\n', '    mapping(address => uint256) public sellCount;\n', '    mapping(address => uint256) public sellCooldownStart;\n', '\n', '    uint256 public buyCooldownTime = 2 minutes;\n', '    uint256[] public sellCooldownTimes;\n', '    uint256 public sellCooldownPeriod = 1 days;\n', '    uint256 public sellPenaltyMultiplier = 3;\n', '    \n', '    bool public p2pTaxEnabled = true;\n', '\n', '    IUniswapV2Router02 public  uniswapV2Router;\n', '    address public  uniswapV2Pair;\n', '    \n', '    event SwapAndLiquifyEnabledUpdated(bool enabled);\n', '    event SwapAndLiquify(uint256 tokensSwapped,uint256 ethReceived, uint256 tokensIntoLiqudity);\n', '\n', '    modifier lockTheSwap {\n', '        inSwapAndLiquify = true;\n', '        _;\n', '        inSwapAndLiquify = false;\n', '    }\n', '\n', '    constructor() public {\n', '        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap Router For Ethereum\n', '\n', '        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n', '            \n', '        uniswapV2Router = _uniswapV2Router;\n', '        \n', '        address _owner = 0xA5Bc1AaF013963f3a234ca050649c52a39F00Ea0;\n', '        teamWallet = 0x9251d6cd44648Be331992D263a0ECa5c61dFBf1E;\n', '        interestWallet = 0x7fb9482DE43B8e1dA59Bbd08f55A182799bCDb7B;\n', '\n', '        isTaxless[_owner] = true;\n', '        isTaxless[address(this)] = true;\n', '        isTaxless[teamWallet] = true;\n', '        isTaxless[interestWallet] = true;\n', '\n', '        sellCooldownTimes.push(1 hours);\n', '        sellCooldownTimes.push(2 hours);\n', '        sellCooldownTimes.push(6 hours);\n', '        sellCooldownTimes.push(sellCooldownPeriod);\n', '\n', '        _isExcluded[uniswapV2Pair] = true;\n', '        _excluded.push(uniswapV2Pair);\n', '       \n', '        _isExcluded[interestWallet] = true;\n', '        _excluded.push(interestWallet);\n', '       \n', '        _isExcluded[_owner] = true;\n', '        _excluded.push(_owner);\n', '\n', '        uint256 interestBalance = reflectionFromToken(50_000_000_000e5);\n', '        _reflectionBalance[interestWallet] = interestBalance;\n', '        _tokenBalance[interestWallet] = _tokenBalance[interestWallet].add(50_000_000_000e5);\n', '        emit Transfer(address(0), interestWallet, 50_000_000_000e5);\n', '        \n', '        _reflectionBalance[_owner] = _reflectionTotal.sub(interestBalance);\n', '        _tokenBalance[_owner] = _tokenBalance[_owner].add(50_000_000_000e5);\n', '        emit Transfer(address(0), _owner, 50_000_000_000e5);\n', '        \n', '        transferOwnership(_owner);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _tokenTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        if (_isExcluded[account]) return _tokenBalance[account];\n', '        return tokenFromReflection(_reflectionBalance[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        public\n', '        override\n', '        virtual\n', '        returns (bool)\n', '    {\n', '       _transfer(_msgSender(),recipient,amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender)\n', '        public\n', '        override\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount)\n', '        public\n', '        override\n', '        returns (bool)\n', '    {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public override virtual returns (bool) {\n', '        _transfer(sender,recipient,amount);\n', '               \n', '        _approve(sender,_msgSender(),_allowances[sender][_msgSender()].sub( amount,"ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].add(addedValue)\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(\n', '                subtractedValue,\n', '                "ERC20: decreased allowance below zero"\n', '            )\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function isExcluded(address account) public view returns (bool) {\n', '        return _isExcluded[account];\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tokenAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(tokenAmount <= _tokenTotal, "Amount must be less than supply");\n', '        return tokenAmount.mul(_getReflectionRate());\n', '    }\n', '\n', '    function tokenFromReflection(uint256 reflectionAmount)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        require(\n', '            reflectionAmount <= _reflectionTotal,\n', '            "Amount must be less than total reflections"\n', '        );\n', '        uint256 currentRate = _getReflectionRate();\n', '        return reflectionAmount.div(currentRate);\n', '    }\n', '\n', '    function excludeAccount(address account) external onlyOwner() {\n', '        require(\n', '            account != address(uniswapV2Router),\n', '            "TOKEN: We can not exclude Uniswap router."\n', '        );\n', '        \n', '        require(!_isExcluded[account], "TOKEN: Account is already excluded");\n', '        if (_reflectionBalance[account] > 0) {\n', '            _tokenBalance[account] = tokenFromReflection(\n', '                _reflectionBalance[account]\n', '            );\n', '        }\n', '        _isExcluded[account] = true;\n', '        _excluded.push(account);\n', '    }\n', '\n', '    function includeAccount(address account) external onlyOwner() {\n', '        require(_isExcluded[account], "TOKEN: Account is already included");\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (_excluded[i] == account) {\n', '                _excluded[i] = _excluded[_excluded.length - 1];\n', '                _tokenBalance[account] = 0;\n', '                _isExcluded[account] = false;\n', '                _excluded.pop();\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(!bots[sender] && !bots[recipient], "Banned!");\n', '        require(\n', '            isTaxless[sender] || isTaxless[recipient] || \n', '            (amount <= maxTxAmount && amount <= balanceOf(uniswapV2Pair).mul(maxPriceImpact).div(10**(feeDecimal + 2))),\n', '            "Max Transfer Limit Exceeds!");\n', '        \n', '        uint256 transferAmount = amount;\n', '        uint256 rate = _getReflectionRate();\n', '        \n', '        //swapAndLiquify\n', '        uint256 contractTokenBalance = balanceOf(address(this));\n', '        uint256 teamBal = balanceOf(teamWallet);\n', '        if (!inSwapAndLiquify && sender != uniswapV2Pair && swapAndLiquifyEnabled) {\n', '            if(contractTokenBalance >= minTokensBeforeSwap)\n', '                swapAndLiquify(contractTokenBalance);\n', '            else if(teamBal >= minTokensBeforeSwap) {\n', '                _reflectionBalance[teamWallet] = _reflectionBalance[teamWallet].sub(teamBal.mul(rate));\n', '                _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(teamBal.mul(rate));\n', '                distributeTeam(teamBal);\n', '            }\n', '        }\n', '        \n', '        if(isFeeActive && !isTaxless[sender] && !isTaxless[recipient] && !inSwapAndLiquify) {\n', '            transferAmount = collectFee(sender,recipient,amount,rate);\n', '        }\n', '\n', '        //transfer reflection\n', '        _reflectionBalance[sender] = _reflectionBalance[sender].sub(amount.mul(rate));\n', '        _reflectionBalance[recipient] = _reflectionBalance[recipient].add(transferAmount.mul(rate));\n', '\n', '        //if any account belongs to the excludedAccount transfer token\n', '        if (_isExcluded[sender]) {\n', '            _tokenBalance[sender] = _tokenBalance[sender].sub(amount);\n', '        }\n', '        if (_isExcluded[recipient]) {\n', '            _tokenBalance[recipient] = _tokenBalance[recipient].add(transferAmount);\n', '        }\n', '\n', '        emit Transfer(sender, recipient, transferAmount);\n', '    }\n', '    \n', '    function validateTradeAndGetFee(address from, address to) private returns(uint256, uint256, uint256) {\n', '        // only use Cooldown when buying/selling on exchange\n', '        if(!cooldownEnabled || (from != uniswapV2Pair && to != uniswapV2Pair)) \n', '            return p2pTaxEnabled ? (p2pTaxFee, 0, 0) : (0,0,0);\n', '        \n', '        if(to != uniswapV2Pair && !isTaxless[to]) {\n', '            require(buyCooldown[to] <= block.timestamp, "Err: Buy Cooldown");\n', '            buyCooldown[to] = block.timestamp + buyCooldownTime;\n', '        }\n', '\n', '        uint256 _teamFee = teamFee;\n', '        uint256 _taxFee = taxFee;\n', '\n', '        if(from != uniswapV2Pair && !isTaxless[from]) {\n', '            require(sellCooldown[from] <= block.timestamp, "Err: Sell Cooldown");\n', '            \n', '            if(sellCooldownStart[from] + sellCooldownPeriod < block.timestamp) {\n', '                sellCount[from] = 0;\n', '                sellCooldownStart[from] = block.timestamp;\n', '            }\n', '          \n', '            for(uint256 i = 0; i < sellCooldownTimes.length; i++) {\n', '                if(sellCount[from] == i) {\n', '                    sellCount[from]++;\n', '                    sellCooldown[from] = block.timestamp + sellCooldownTimes[i];\n', '                    _teamFee = teamFee.mul(i == 0 ? 1 : i + sellPenaltyMultiplier);\n', '                    _taxFee = taxFee.mul(i == 0 ? 1 : i + sellPenaltyMultiplier);\n', '                    if(sellCooldownTimes.length == i + 1) sellCooldown[from] = sellCooldownStart[from] + sellCooldownPeriod;\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '        return (_teamFee, _taxFee, liquidityFee);\n', '    }\n', '    \n', '    function collectFee(address account, address to, uint256 amount, uint256 rate) private returns (uint256) {\n', '        uint256 transferAmount = amount;\n', '        \n', '        (uint256 __teamFee , uint256 __taxFee, uint256 __liquidityFee) = validateTradeAndGetFee(account, to);\n', '  \n', '        //@dev liquidity fee\n', '        if(__liquidityFee != 0){\n', '            uint256 _liquidityFee = amount.mul(__liquidityFee).div(10**(feeDecimal + 2));\n', '            transferAmount = transferAmount.sub(_liquidityFee);\n', '            _reflectionBalance[address(this)] = _reflectionBalance[address(this)].add(_liquidityFee.mul(rate));\n', '            if (_isExcluded[address(this)]) {\n', '                _tokenBalance[address(this)] = _tokenBalance[address(this)].add(_liquidityFee);\n', '            }\n', '            feeTotal = feeTotal.add(_liquidityFee);\n', '            emit Transfer(account,address(this),_liquidityFee);\n', '        }\n', '        \n', '        //@dev team fee\n', '        if(__teamFee != 0){\n', '            uint256 _teamFee = amount.mul(__teamFee).div(10**(feeDecimal + 2));\n', '            transferAmount = transferAmount.sub(_teamFee);\n', '            _reflectionBalance[teamWallet] = _reflectionBalance[teamWallet].add(_teamFee.mul(rate));\n', '            if (_isExcluded[teamWallet]) {\n', '                _tokenBalance[teamWallet] = _tokenBalance[teamWallet].add(_teamFee);\n', '            }\n', '            feeTotal = feeTotal.add(_teamFee);\n', '            emit Transfer(account,teamWallet,_teamFee);\n', '        }\n', '\n', '        //@dev tax fee\n', '        if(__taxFee != 0){\n', '            uint256 _taxFee = amount.mul(__taxFee).div(10**(feeDecimal + 2));\n', '            transferAmount = transferAmount.sub(_taxFee);\n', '            _reflectionTotal = _reflectionTotal.sub(_taxFee.mul(rate));\n', '            feeTotal = feeTotal.add(_taxFee);\n', '        }\n', '        return transferAmount;\n', '    }\n', '\n', '    function _getReflectionRate() private view returns (uint256) {\n', '        uint256 reflectionSupply = _reflectionTotal;\n', '        uint256 tokenSupply = _tokenTotal;\n', '        for (uint256 i = 0; i < _excluded.length; i++) {\n', '            if (\n', '                _reflectionBalance[_excluded[i]] > reflectionSupply ||\n', '                _tokenBalance[_excluded[i]] > tokenSupply\n', '            ) return _reflectionTotal.div(_tokenTotal);\n', '            reflectionSupply = reflectionSupply.sub(\n', '                _reflectionBalance[_excluded[i]]\n', '            );\n', '            tokenSupply = tokenSupply.sub(_tokenBalance[_excluded[i]]);\n', '        }\n', '        if (reflectionSupply < _reflectionTotal.div(_tokenTotal))\n', '            return _reflectionTotal.div(_tokenTotal);\n', '        return reflectionSupply.div(tokenSupply);\n', '    }\n', '    \n', '     function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n', '         if(contractTokenBalance > maxTxAmount)\n', '            contractTokenBalance = maxTxAmount;\n', '            \n', '        // split the contract balance into halves\n', '        uint256 half = contractTokenBalance.div(2);\n', '        uint256 otherHalf = contractTokenBalance.sub(half);\n', '\n', "        // capture the contract's current ETH balance.\n", '        // this is so that we can capture exactly the amount of ETH that the\n', '        // swap creates, and not make the liquidity event include any ETH that\n', '        // has been manually sent to the contract\n', '        uint256 initialBalance = address(this).balance;\n', '\n', '        // swap tokens for ETH\n', '        swapTokensForEth(half); // <- this breaks the ETH -> HATE swap when swap+liquify is triggered\n', '\n', '        // how much ETH did we just swap into?\n', '        uint256 newBalance = address(this).balance.sub(initialBalance);\n', '\n', '        // add liquidity to uniswap\n', '        addLiquidity(otherHalf, newBalance);\n', '        \n', '        emit SwapAndLiquify(half, newBalance, otherHalf);\n', '    }\n', '\n', '    function swapTokensForEth(uint256 tokenAmount) private {\n', '        // generate the uniswap pair path of token -> weth\n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = uniswapV2Router.WETH();\n', '\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // make the swap\n', '        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '   \n', '    function distributeTeam(uint256 amount) private lockTheSwap {\n', '        swapTokensForEth(amount);\n', '        payable(teamWallet).transfer(address(this).balance);\n', '    }\n', '   \n', '    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n', '        // approve token transfer to cover all possible scenarios\n', '        _approve(address(this), address(uniswapV2Router), tokenAmount);\n', '\n', '        // add the liquidity\n', '        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n', '            address(this),\n', '            tokenAmount,\n', '            0, // slippage is unavoidable\n', '            0, // slippage is unavoidable\n', '            owner(),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function burn(uint256 amount) external {\n', '        uint256 rate = _getReflectionRate();\n', '        _reflectionBalance[msg.sender] = _reflectionBalance[msg.sender].sub(amount.mul(rate));\n', '        if(_isExcluded[msg.sender]) {\n', '            _tokenBalance[msg.sender] = _tokenBalance[msg.sender].sub(amount);\n', '        }\n', '        _tokenTotal = _tokenTotal.sub(amount);\n', '        _reflectionTotal = _reflectionTotal.sub(amount.mul(rate));\n', '        emit Transfer(msg.sender,address(0),amount);\n', '    }\n', '\n', '    function deliver(uint256 amount) external {\n', "        require(!_isExcluded[msg.sender],'Excluded cannot call this!');\n", '        uint256 rate = _getReflectionRate();\n', '        _reflectionBalance[msg.sender] = _reflectionBalance[msg.sender].sub(amount.mul(rate));\n', '        _reflectionTotal = _reflectionTotal.sub(amount.mul(rate));\n', '        feeTotal = feeTotal.add(amount);\n', '        emit Transfer(msg.sender,address(this),amount);\n', '    }\n', '   \n', '    function setTaxless(address account, bool value) external onlyOwner {\n', '        isTaxless[account] = value;\n', '    }\n', '    \n', '    function setBots(address account, bool value) external onlyOwner {\n', '        bots[account] = value;\n', '    }\n', '    \n', '    function setSwapAndLiquifyEnabled(bool enabled) external onlyOwner {\n', '        swapAndLiquifyEnabled = enabled;\n', '        SwapAndLiquifyEnabledUpdated(enabled);\n', '    }\n', '    \n', '    function setFeeActive(bool value) external onlyOwner {\n', '        isFeeActive = value;\n', '    }\n', '    \n', '    function setTeamFee(uint256 fee) external onlyOwner {\n', '        teamFee = fee;\n', '    }\n', '    \n', '    function setLiquidityFee(uint256 fee) external onlyOwner {\n', '        liquidityFee = fee;\n', '    }\n', '    \n', '    function setTaxFee(uint256 fee) external onlyOwner {\n', '        taxFee = fee;\n', '    }\n', '    \n', '    function setP2PTaxFee(uint256 fee) external onlyOwner {\n', '        p2pTaxFee = fee;\n', '    }\n', '    \n', '    function setTeamWallet(address wallet) external onlyOwner {\n', '        teamWallet = wallet;\n', '    }\n', '    \n', '    function setInterestWallet(address wallet) external onlyOwner {\n', '        interestWallet = wallet;\n', '    }\n', '    \n', '    function setMaxTransferAndPriceImpact(uint256 maxAmount, uint256 maxImpact) external onlyOwner {\n', '        maxTxAmount = maxAmount;\n', '        maxPriceImpact = maxImpact;\n', '    }\n', '    \n', '    function setMinTokensBeforeSwap(uint256 amount) external onlyOwner {\n', '        minTokensBeforeSwap = amount;\n', '    }\n', '    \n', '    function setCooldonwEnabled(bool value) external onlyOwner {\n', '        cooldownEnabled = value;\n', '    }\n', '    \n', '    function setBuyCooldown(uint256 cooldown) external onlyOwner {\n', '        minTokensBeforeSwap = cooldown;\n', '    }\n', '    \n', '    function setSellCooldown(uint256 cooldownPeriod, uint256[] memory sellTimes) external onlyOwner {\n', '        sellCooldownPeriod = cooldownPeriod;\n', '        sellCooldownTimes = sellTimes;\n', '    }\n', '    \n', '    function setSellPenaltyMultipier(uint256 value) external onlyOwner {\n', '        sellPenaltyMultiplier = value;\n', '    }\n', '    \n', '    function setP2pTaxEnabled(bool value) external onlyOwner {\n', '        p2pTaxEnabled = value;\n', '    }\n', '   \n', '    receive() external payable {}\n', '}']