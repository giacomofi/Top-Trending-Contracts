['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// File: contracts\\interface\\INestMapping.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', '/// @dev The interface defines methods for nest builtin contract address mapping\n', 'interface INestMapping {\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) external;\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    );\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() external view returns (address);\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() external view returns (address);\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() external view returns (address);\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() external view returns (address);\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() external view returns (address);\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() external view returns (address);\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() external view returns (address);\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) external;\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) external view returns (address);\n', '}\n', '\n', '// File: contracts\\interface\\INestGovernance.sol\n', '\n', '/// @dev This interface defines the governance methods\n', 'interface INestGovernance is INestMapping {\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) external;\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) external view returns (uint);\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) external view returns (bool);\n', '}\n', '\n', '// File: contracts\\lib\\IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\interface\\INestQuery.sol\n', '\n', '/// @dev This interface defines the methods for price query\n', 'interface INestQuery {\n', '    \n', '    /// @dev Get the latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function triggeredPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the full information of latest trigger price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint avgPrice,\n', '        uint sigmaSQ\n', '    );\n', '\n', '    /// @dev Find the price at block number\n', '    /// @param tokenAddress Destination token address\n', '    /// @param height Destination block number\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function findPrice(\n', '        address tokenAddress,\n', '        uint height\n', '    ) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the latest effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    function latestPrice(address tokenAddress) external view returns (uint blockNumber, uint price);\n', '\n', '    /// @dev Get the last (num) effective price\n', '    /// @param tokenAddress Destination token address\n', '    /// @param count The number of prices that want to return\n', '    /// @return An array which length is num * 2, each two element expresses one price like blockNumber｜price\n', '    function lastPriceList(address tokenAddress, uint count) external view returns (uint[] memory);\n', '\n', '    /// @dev Returns the results of latestPrice() and triggeredPriceInfo()\n', '    /// @param tokenAddress Destination token address\n', '    /// @return latestPriceBlockNumber The block number of latest price\n', '    /// @return latestPriceValue The token latest price. (1eth equivalent to (price) token)\n', '    /// @return triggeredPriceBlockNumber The block number of triggered price\n', '    /// @return triggeredPriceValue The token triggered price. (1eth equivalent to (price) token)\n', '    /// @return triggeredAvgPrice Average price\n', '    /// @return triggeredSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function latestPriceAndTriggeredPriceInfo(address tokenAddress) external view \n', '    returns (\n', '        uint latestPriceBlockNumber,\n', '        uint latestPriceValue,\n', '        uint triggeredPriceBlockNumber,\n', '        uint triggeredPriceValue,\n', '        uint triggeredAvgPrice,\n', '        uint triggeredSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function triggeredPrice2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice\n', '    );\n', '\n', '    /// @dev Get the full information of latest trigger price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return avgPrice Average price\n', '    /// @return sigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that \n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447, \n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    /// @return ntokenAvgPrice Average price of ntoken\n', '    /// @return ntokenSigmaSQ The square of the volatility (18 decimal places). The current implementation assumes that\n', '    ///         the volatility cannot exceed 1. Correspondingly, when the return value is equal to 999999999999996447,\n', '    ///         it means that the volatility has exceeded the range that can be expressed\n', '    function triggeredPriceInfo2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint avgPrice,\n', '        uint sigmaSQ,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice,\n', '        uint ntokenAvgPrice,\n', '        uint ntokenSigmaSQ\n', '    );\n', '\n', '    /// @dev Get the latest effective price. (token and ntoken)\n', '    /// @param tokenAddress Destination token address\n', '    /// @return blockNumber The block number of price\n', '    /// @return price The token price. (1eth equivalent to (price) token)\n', '    /// @return ntokenBlockNumber The block number of ntoken price\n', '    /// @return ntokenPrice The ntoken price. (1eth equivalent to (price) ntoken)\n', '    function latestPrice2(address tokenAddress) external view returns (\n', '        uint blockNumber,\n', '        uint price,\n', '        uint ntokenBlockNumber,\n', '        uint ntokenPrice\n', '    );\n', '}\n', '\n', '// File: contracts\\lib\\TransferHelper.sol\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts\\interface\\INestLedger.sol\n', '\n', '/// @dev This interface defines the nest ledger methods\n', 'interface INestLedger {\n', '\n', '    /// @dev Application Flag Changed event\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    event ApplicationChanged(address addr, uint flag);\n', '    \n', '    /// @dev Configuration structure of nest ledger contract\n', '    struct Config {\n', '        \n', '        // nest reward scale(10000 based). 2000\n', '        uint16 nestRewardScale;\n', '\n', '        // // ntoken reward scale(10000 based). 8000\n', '        // uint16 ntokenRewardScale;\n', '    }\n', '    \n', '    /// @dev Modify configuration\n', '    /// @param config Configuration object\n', '    function setConfig(Config memory config) external;\n', '\n', '    /// @dev Get configuration\n', '    /// @return Configuration object\n', '    function getConfig() external view returns (Config memory);\n', '\n', '    /// @dev Set DAO application\n', '    /// @param addr DAO application contract address\n', '    /// @param flag Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function setApplication(address addr, uint flag) external;\n', '\n', '    /// @dev Check DAO application flag\n', '    /// @param addr DAO application contract address\n', '    /// @return Authorization flag, 1 means authorization, 0 means cancel authorization\n', '    function checkApplication(address addr) external view returns (uint);\n', '\n', '    /// @dev Carve reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function carveETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev Add reward\n', '    /// @param ntokenAddress Destination ntoken address\n', '    function addETHReward(address ntokenAddress) external payable;\n', '\n', '    /// @dev The function returns eth rewards of specified ntoken\n', '    /// @param ntokenAddress The ntoken address\n', '    function totalETHRewards(address ntokenAddress) external view returns (uint);\n', '\n', '    /// @dev Pay\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to pay with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function pay(address ntokenAddress, address tokenAddress, address to, uint value) external;\n', '\n', '    /// @dev Settlement\n', '    /// @param ntokenAddress Destination ntoken address. Indicates which ntoken to settle with\n', '    /// @param tokenAddress Token address of receiving funds (0 means ETH)\n', '    /// @param to Address to receive\n', '    /// @param value Amount to receive\n', '    function settle(address ntokenAddress, address tokenAddress, address to, uint value) external payable;\n', '}\n', '\n', '// File: contracts\\NestBase.sol\n', '\n', '/// @dev Base contract of nest\n', 'contract NestBase {\n', '\n', '    // Address of nest token contract\n', '    address constant NEST_TOKEN_ADDRESS = 0x04abEdA201850aC0124161F037Efd70c74ddC74C;\n', '\n', '    // Genesis block number of nest\n', '    // NEST token contract is created at block height 6913517. However, because the mining algorithm of nest1.0\n', '    // is different from that at present, a new mining algorithm is adopted from nest2.0. The new algorithm\n', '    // includes the attenuation logic according to the block. Therefore, it is necessary to trace the block\n', '    // where the nest begins to decay. According to the circulation when nest2.0 is online, the new mining\n', '    // algorithm is used to deduce and convert the nest, and the new algorithm is used to mine the nest2.0\n', '    // on-line flow, the actual block is 5120000\n', '    uint constant NEST_GENESIS_BLOCK = 5120000;\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) virtual public {\n', "        require(_governance == address(0), 'NEST:!initialize');\n", '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev INestGovernance implementation contract address\n', '    address public _governance;\n', '\n', '    /// @dev Rewritten in the implementation contract, for load other contract addresses. Call \n', '    ///      super.update(nestGovernanceAddress) when overriding, and override method without onlyGovernance\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function update(address nestGovernanceAddress) virtual public {\n', '\n', '        address governance = _governance;\n', '        require(governance == msg.sender || INestGovernance(governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _governance = nestGovernanceAddress;\n', '    }\n', '\n', '    /// @dev Migrate funds from current contract to NestLedger\n', '    /// @param tokenAddress Destination token address.(0 means eth)\n', '    /// @param value Migrate amount\n', '    function migrate(address tokenAddress, uint value) external onlyGovernance {\n', '\n', '        address to = INestGovernance(_governance).getNestLedgerAddress();\n', '        if (tokenAddress == address(0)) {\n', '            INestLedger(to).addETHReward { value: value } (address(0));\n', '        } else {\n', '            TransferHelper.safeTransfer(tokenAddress, to, value);\n', '        }\n', '    }\n', '\n', '    //---------modifier------------\n', '\n', '    modifier onlyGovernance() {\n', '        require(INestGovernance(_governance).checkGovernance(msg.sender, 0), "NEST:!gov");\n', '        _;\n', '    }\n', '\n', '    modifier noContract() {\n', '        require(msg.sender == tx.origin, "NEST:!contract");\n', '        _;\n', '    }\n', '}\n', '\n', '// File: contracts\\NestMapping.sol\n', '\n', '/// @dev The contract is for nest builtin contract address mapping\n', 'abstract contract NestMapping is NestBase, INestMapping {\n', '\n', '    // constructor() { }\n', '\n', '    /// @dev Address of nest token contract\n', '    address _nestTokenAddress;\n', '\n', '    /// @dev Address of nest node contract\n', '    address _nestNodeAddress;\n', '\n', '    /// @dev INestLedger implementation contract address\n', '    address _nestLedgerAddress;\n', '\n', '    /// @dev INestMining implementation contract address for nest\n', '    address _nestMiningAddress;\n', '\n', '    /// @dev INestMining implementation contract address for ntoken\n', '    address _ntokenMiningAddress;\n', '\n', '    /// @dev INestPriceFacade implementation contract address\n', '    address _nestPriceFacadeAddress;\n', '\n', '    /// @dev INestVote implementation contract address\n', '    address _nestVoteAddress;\n', '\n', '    /// @dev INestQuery implementation contract address\n', '    address _nestQueryAddress;\n', '\n', '    /// @dev NNIncome contract address\n', '    address _nnIncomeAddress;\n', '\n', '    /// @dev INTokenController implementation contract address\n', '    address _nTokenControllerAddress;\n', '    \n', '    /// @dev Address registered in the system\n', '    mapping(string=>address) _registeredAddress;\n', '\n', '    /// @dev Set the built-in contract address of the system\n', '    /// @param nestTokenAddress Address of nest token contract\n', '    /// @param nestNodeAddress Address of nest node contract\n', '    /// @param nestLedgerAddress INestLedger implementation contract address\n', '    /// @param nestMiningAddress INestMining implementation contract address for nest\n', '    /// @param ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @param nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @param nestVoteAddress INestVote implementation contract address\n', '    /// @param nestQueryAddress INestQuery implementation contract address\n', '    /// @param nnIncomeAddress NNIncome contract address\n', '    /// @param nTokenControllerAddress INTokenController implementation contract address\n', '    function setBuiltinAddress(\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) override external onlyGovernance {\n', '        \n', '        if (nestTokenAddress != address(0)) {\n', '            _nestTokenAddress = nestTokenAddress;\n', '        }\n', '        if (nestNodeAddress != address(0)) {\n', '            _nestNodeAddress = nestNodeAddress;\n', '        }\n', '        if (nestLedgerAddress != address(0)) {\n', '            _nestLedgerAddress = nestLedgerAddress;\n', '        }\n', '        if (nestMiningAddress != address(0)) {\n', '            _nestMiningAddress = nestMiningAddress;\n', '        }\n', '        if (ntokenMiningAddress != address(0)) {\n', '            _ntokenMiningAddress = ntokenMiningAddress;\n', '        }\n', '        if (nestPriceFacadeAddress != address(0)) {\n', '            _nestPriceFacadeAddress = nestPriceFacadeAddress;\n', '        }\n', '        if (nestVoteAddress != address(0)) {\n', '            _nestVoteAddress = nestVoteAddress;\n', '        }\n', '        if (nestQueryAddress != address(0)) {\n', '            _nestQueryAddress = nestQueryAddress;\n', '        }\n', '        if (nnIncomeAddress != address(0)) {\n', '            _nnIncomeAddress = nnIncomeAddress;\n', '        }\n', '        if (nTokenControllerAddress != address(0)) {\n', '            _nTokenControllerAddress = nTokenControllerAddress;\n', '        }\n', '    }\n', '\n', '    /// @dev Get the built-in contract address of the system\n', '    /// @return nestTokenAddress Address of nest token contract\n', '    /// @return nestNodeAddress Address of nest node contract\n', '    /// @return nestLedgerAddress INestLedger implementation contract address\n', '    /// @return nestMiningAddress INestMining implementation contract address for nest\n', '    /// @return ntokenMiningAddress INestMining implementation contract address for ntoken\n', '    /// @return nestPriceFacadeAddress INestPriceFacade implementation contract address\n', '    /// @return nestVoteAddress INestVote implementation contract address\n', '    /// @return nestQueryAddress INestQuery implementation contract address\n', '    /// @return nnIncomeAddress NNIncome contract address\n', '    /// @return nTokenControllerAddress INTokenController implementation contract address\n', '    function getBuiltinAddress() override external view returns (\n', '        address nestTokenAddress,\n', '        address nestNodeAddress,\n', '        address nestLedgerAddress,\n', '        address nestMiningAddress,\n', '        address ntokenMiningAddress,\n', '        address nestPriceFacadeAddress,\n', '        address nestVoteAddress,\n', '        address nestQueryAddress,\n', '        address nnIncomeAddress,\n', '        address nTokenControllerAddress\n', '    ) {\n', '        return (\n', '            _nestTokenAddress,\n', '            _nestNodeAddress,\n', '            _nestLedgerAddress,\n', '            _nestMiningAddress,\n', '            _ntokenMiningAddress,\n', '            _nestPriceFacadeAddress,\n', '            _nestVoteAddress,\n', '            _nestQueryAddress,\n', '            _nnIncomeAddress,\n', '            _nTokenControllerAddress\n', '        );\n', '    }\n', '\n', '    /// @dev Get address of nest token contract\n', '    /// @return Address of nest token contract\n', '    function getNestTokenAddress() override external view returns (address) { return _nestTokenAddress; }\n', '\n', '    /// @dev Get address of nest node contract\n', '    /// @return Address of nest node contract\n', '    function getNestNodeAddress() override external view returns (address) { return _nestNodeAddress; }\n', '\n', '    /// @dev Get INestLedger implementation contract address\n', '    /// @return INestLedger implementation contract address\n', '    function getNestLedgerAddress() override external view returns (address) { return _nestLedgerAddress; }\n', '\n', '    /// @dev Get INestMining implementation contract address for nest\n', '    /// @return INestMining implementation contract address for nest\n', '    function getNestMiningAddress() override external view returns (address) { return _nestMiningAddress; }\n', '\n', '    /// @dev Get INestMining implementation contract address for ntoken\n', '    /// @return INestMining implementation contract address for ntoken\n', '    function getNTokenMiningAddress() override external view returns (address) { return _ntokenMiningAddress; }\n', '\n', '    /// @dev Get INestPriceFacade implementation contract address\n', '    /// @return INestPriceFacade implementation contract address\n', '    function getNestPriceFacadeAddress() override external view returns (address) { return _nestPriceFacadeAddress; }\n', '\n', '    /// @dev Get INestVote implementation contract address\n', '    /// @return INestVote implementation contract address\n', '    function getNestVoteAddress() override external view returns (address) { return _nestVoteAddress; }\n', '\n', '    /// @dev Get INestQuery implementation contract address\n', '    /// @return INestQuery implementation contract address\n', '    function getNestQueryAddress() override external view returns (address) { return _nestQueryAddress; }\n', '\n', '    /// @dev Get NNIncome contract address\n', '    /// @return NNIncome contract address\n', '    function getNnIncomeAddress() override external view returns (address) { return _nnIncomeAddress; }\n', '\n', '    /// @dev Get INTokenController implementation contract address\n', '    /// @return INTokenController implementation contract address\n', '    function getNTokenControllerAddress() override external view returns (address) { return _nTokenControllerAddress; }\n', '\n', '    /// @dev Registered address. The address registered here is the address accepted by nest system\n', '    /// @param key The key\n', '    /// @param addr Destination address. 0 means to delete the registration information\n', '    function registerAddress(string memory key, address addr) override external onlyGovernance {\n', '        _registeredAddress[key] = addr;\n', '    }\n', '\n', '    /// @dev Get registered address\n', '    /// @param key The key\n', '    /// @return Destination address. 0 means empty\n', '    function checkAddress(string memory key) override external view returns (address) {\n', '        return _registeredAddress[key];\n', '    }\n', '}\n', '\n', '// File: contracts\\NestGovernance.sol\n', '\n', '/// @dev Nest governance contract\n', 'contract NestGovernance is NestMapping, INestGovernance {\n', '\n', '    // constructor() {\n', '    //     _governance = address(this);\n', '    //     _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\n', '    // }\n', '\n', '    /// @dev To support open-zeppelin/upgrades\n', '    /// @param nestGovernanceAddress INestGovernance implementation contract address\n', '    function initialize(address nestGovernanceAddress) override public {\n', '\n', '        // While initialize NestGovernance, nestGovernanceAddress is address(this),\n', '        // So must let nestGovernanceAddress to 0\n', '        require(nestGovernanceAddress == address(0), "NestGovernance:!address");\n', '\n', '        // nestGovernanceAddress is address(this)\n', '        super.initialize(address(this));\n', '\n', '        // Add msg.sender to governance\n', '        _governanceMapping[msg.sender] = GovernanceInfo(msg.sender, uint96(0xFFFFFFFFFFFFFFFFFFFFFFFF));\n', '    }\n', '\n', '    /// @dev Structure of governance address information\n', '    struct GovernanceInfo {\n', '        address addr;\n', '        uint96 flag;\n', '    }\n', '\n', '    /// @dev Governance address information\n', '    mapping(address=>GovernanceInfo) _governanceMapping;\n', '\n', '    /// @dev Set governance authority\n', '    /// @param addr Destination address\n', '    /// @param flag Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function setGovernance(address addr, uint flag) override external onlyGovernance {\n', '        \n', '        if (flag > 0) {\n', '            _governanceMapping[addr] = GovernanceInfo(addr, uint96(flag));\n', '        } else {\n', '            _governanceMapping[addr] = GovernanceInfo(address(0), uint96(0));\n', '        }\n', '    }\n', '\n', '    /// @dev Get governance rights\n', '    /// @param addr Destination address\n', '    /// @return Weight. 0 means to delete the governance permission of the target address. Weight is not \n', '    ///        implemented in the current system, only the difference between authorized and unauthorized. \n', '    ///        Here, a uint96 is used to represent the weight, which is only reserved for expansion\n', '    function getGovernance(address addr) override external view returns (uint) {\n', '        return _governanceMapping[addr].flag;\n', '    }\n', '\n', '    /// @dev Check whether the target address has governance rights for the given target\n', '    /// @param addr Destination address\n', '    /// @param flag Permission weight. The permission of the target address must be greater than this weight to pass the check\n', '    /// @return True indicates permission\n', '    function checkGovernance(address addr, uint flag) override public view returns (bool) {\n', '        return _governanceMapping[addr].flag > flag;\n', '    }\n', '\n', '    /// @dev This method is for ntoken in created in nest3.0\n', '    /// @param addr Destination address\n', '    /// @return True indicates permission\n', '    function checkOwners(address addr) external view returns (bool) {\n', '        return checkGovernance(addr, 0);\n', '    }\n', '}']