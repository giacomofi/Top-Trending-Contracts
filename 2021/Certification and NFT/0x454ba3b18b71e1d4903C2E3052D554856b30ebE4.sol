['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '// https://github.com/dapphub/ds-pause\n', 'contract DSPauseAbstract {\n', '    function delay() public view returns (uint256);\n', '    function plot(address, bytes32, bytes memory, uint256) public;\n', '    function exec(address, bytes32, bytes memory, uint256) public returns (bytes memory);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/pot.sol\n', 'contract PotAbstract {\n', '    function file(bytes32, uint256) external;\n', '    function drip() external returns (uint256);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/jug.sol\n', 'contract JugAbstract {\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vat.sol\n', 'contract VatAbstract {\n', '    function ilks(bytes32) external view returns (uint256, uint256, uint256, uint256, uint256);\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/flip.sol\n', 'contract FlipAbstract {\n', '    function file(bytes32, uint256) external;\n', '}\n', '\n', '// https://github.com/makerdao/flipper-mom/blob/master/src/FlipperMom.sol\n', 'contract FlipperMomAbstract {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', '// https://github.com/makerdao/ilk-registry/blob/master/src/IlkRegistry.sol\n', 'contract IlkRegistryAbstract {\n', '    function list() external view returns (bytes32[] memory);\n', '    function flip(bytes32) external view returns (address);\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log/blob/master/src/ChainLog.sol\n', 'contract ChainlogAbstract {\n', '    function getAddress(bytes32) public view returns (address);\n', '}\n', '\n', 'contract SpellAction {\n', '    // This address should correspond to the latest MCD Chainlog contract; verify\n', '    //  against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\n', '    ChainlogAbstract constant CHANGELOG =\n', '        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    uint256 constant ZERO_PCT_RATE = 1000000000000000000000000000;\n', '\n', '    // Common orders of magnitude needed in spells\n', '    //\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '    uint256 constant RAD = 10**45;\n', '    uint256 constant MLN = 10**6;\n', '    uint256 constant BLN = 10**9;\n', '\n', '    function execute() external {\n', '        address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");\n', '        address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");\n', '        address MCD_POT      = CHANGELOG.getAddress("MCD_POT");\n', '        address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");\n', '        uint256 totalLine = 0;\n', '\n', '        // MCD Modifications\n', '\n', '        // Ensure we drip pot prior to modifications (housekeeping).\n', '        //\n', '        PotAbstract(MCD_POT).drip();\n', '\n', '        // Set the Dai Savings Rate\n', '        // DSR_RATE is a value determined by the rate accumulator calculation\n', '        // ex. an 8% annual rate will be 1000000002440418608258400030\n', '        //\n', '        PotAbstract(MCD_POT).file("dsr", ZERO_PCT_RATE);\n', '\n', '        // Loop over all ilks\n', '        //\n', '        IlkRegistryAbstract registry = IlkRegistryAbstract(ILK_REGISTRY);\n', '        bytes32[] memory ilks = registry.list();\n', '\n', '        for (uint i = 0; i < ilks.length; i++) {\n', "            // Set the ilk's flip tau\n", '            //\n', '            FlipAbstract(registry.flip(ilks[i])).file(bytes32("tau"), 24 hours);\n', '\n', '            // skip the rest of the loop for the following ilks:\n', '            //\n', '            if (ilks[i] == "USDC-B") {\n', '                continue;\n', '            }\n', '\n', '            // Always drip the ilk prior to modifications (housekeeping)\n', '            //\n', '            JugAbstract(MCD_JUG).drip(ilks[i]);\n', '\n', '            // Set the ilk stability fee\n', '            //\n', '            JugAbstract(MCD_JUG).file(ilks[i], "duty", ZERO_PCT_RATE);\n', '\n', '            // Keep a running total of all ilk Debt Ceilings\n', '            //\n', '            (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks(ilks[i]);\n', '            totalLine += ilkLine;\n', '        }\n', '\n', '        // Set the USDC-B debt ceiling\n', '        // USDC_B_LINE is the number of Dai that can be created with USDC token\n', '        // collateral.\n', '        // ex. a 60 million Dai USDC-B ceiling will be USDC_B_LINE = 60000000\n', '        //\n', '        // New Line: +50m\n', '        (,,, uint256 ilkLine,) = VatAbstract(MCD_VAT).ilks("USDC-B");\n', '        uint256 USDC_B_LINE = ilkLine + (50 * MLN * RAD);\n', '        VatAbstract(MCD_VAT).file("USDC-B", "line", USDC_B_LINE);\n', '        totalLine += USDC_B_LINE;\n', '\n', '        // Set the Global Debt Ceiling to the sum of all ilk line\n', '        //\n', '        VatAbstract(MCD_VAT).file("Line", totalLine);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    // This address should correspond to the latest MCD Chainlog contract; verify\n', '    //  against the current release list at:\n', '    //     https://changelog.makerdao.com/releases/mainnet/active/contracts.json\n', '    ChainlogAbstract constant CHANGELOG =\n', '        ChainlogAbstract(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '\n', '    DSPauseAbstract  public pause;\n', '    address          public action;\n', '    bytes32          public tag;\n', '    uint256          public eta;\n', '    bytes            public sig;\n', '    uint256          public expiration;\n', '    bool             public done;\n', '\n', '    uint256 constant T2021_07_01_1200UTC = 1625140800;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    string constant public description = "DEFCON-2 Emergency Spell";\n', '\n', '    constructor() public {\n', '        address MCD_PAUSE = CHANGELOG.getAddress("MCD_PAUSE");\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        pause = DSPauseAbstract(MCD_PAUSE);\n', '        expiration = T2021_07_01_1200UTC;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + pause.delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}']