['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '/*\n', '\n', '* Pynthetix: SystemStatus.sol\n', '*\n', '* Latest source (may be newer): https://github.com/Pynthetixio/pynthetix/blob/master/contracts/SystemStatus.sol\n', '* Docs: https://docs.pynthetix.io/contracts/SystemStatus\n', '*\n', '* Contract Dependencies: \n', '*\t- ISystemStatus\n', '*\t- Owned\n', '* Libraries: (none)\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2021 Pynthetix\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '\n', '// https://docs.pynthetix.io/contracts/source/contracts/owned\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    function _onlyOwner() private view {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', '\n', '// https://docs.pynthetix.io/contracts/source/interfaces/isystemstatus\n', 'interface ISystemStatus {\n', '    struct Status {\n', '        bool canSuspend;\n', '        bool canResume;\n', '    }\n', '\n', '    struct Suspension {\n', '        bool suspended;\n', '        // reason is an integer code,\n', '        // 0 => no reason, 1 => upgrading, 2+ => defined by system usage\n', '        uint248 reason;\n', '    }\n', '\n', '    // Views\n', '    function accessControl(bytes32 section, address account) external view returns (bool canSuspend, bool canResume);\n', '\n', '    function requireSystemActive() external view;\n', '\n', '    function requireIssuanceActive() external view;\n', '\n', '    function requireExchangeActive() external view;\n', '\n', '    function requirePynthActive(bytes32 currencyKey) external view;\n', '\n', '    function requirePynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view;\n', '\n', '    function pynthSuspension(bytes32 currencyKey) external view returns (bool suspended, uint248 reason);\n', '\n', '    // Restricted functions\n', '    function suspendPynth(bytes32 currencyKey, uint256 reason) external;\n', '\n', '    function updateAccessControl(\n', '        bytes32 section,\n', '        address account,\n', '        bool canSuspend,\n', '        bool canResume\n', '    ) external;\n', '}\n', '\n', '\n', '// Inheritance\n', '\n', '\n', '// https://docs.pynthetix.io/contracts/source/contracts/systemstatus\n', 'contract SystemStatus is Owned, ISystemStatus {\n', '    mapping(bytes32 => mapping(address => Status)) public accessControl;\n', '\n', '    uint248 public constant SUSPENSION_REASON_UPGRADE = 1;\n', '\n', '    bytes32 public constant SECTION_SYSTEM = "System";\n', '    bytes32 public constant SECTION_ISSUANCE = "Issuance";\n', '    bytes32 public constant SECTION_EXCHANGE = "Exchange";\n', '    bytes32 public constant SECTION_SYNTH = "Pynth";\n', '\n', '    Suspension public systemSuspension;\n', '\n', '    Suspension public issuanceSuspension;\n', '\n', '    Suspension public exchangeSuspension;\n', '\n', '    mapping(bytes32 => Suspension) public pynthSuspension;\n', '\n', '    constructor(address _owner) public Owned(_owner) {\n', '        _internalUpdateAccessControl(SECTION_SYSTEM, _owner, true, true);\n', '        _internalUpdateAccessControl(SECTION_ISSUANCE, _owner, true, true);\n', '        _internalUpdateAccessControl(SECTION_EXCHANGE, _owner, true, true);\n', '        _internalUpdateAccessControl(SECTION_SYNTH, _owner, true, true);\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '    function requireSystemActive() external view {\n', '        _internalRequireSystemActive();\n', '    }\n', '\n', '    function requireIssuanceActive() external view {\n', '        // Issuance requires the system be active\n', '        _internalRequireSystemActive();\n', '        require(!issuanceSuspension.suspended, "Issuance is suspended. Operation prohibited");\n', '    }\n', '\n', '    function requireExchangeActive() external view {\n', '        // Issuance requires the system be active\n', '        _internalRequireSystemActive();\n', '        require(!exchangeSuspension.suspended, "Exchange is suspended. Operation prohibited");\n', '    }\n', '\n', '    function requirePynthActive(bytes32 currencyKey) external view {\n', '        // Pynth exchange and transfer requires the system be active\n', '        _internalRequireSystemActive();\n', '        require(!pynthSuspension[currencyKey].suspended, "Pynth is suspended. Operation prohibited");\n', '    }\n', '\n', '    function requirePynthsActive(bytes32 sourceCurrencyKey, bytes32 destinationCurrencyKey) external view {\n', '        // Pynth exchange and transfer requires the system be active\n', '        _internalRequireSystemActive();\n', '\n', '        require(\n', '            !pynthSuspension[sourceCurrencyKey].suspended && !pynthSuspension[destinationCurrencyKey].suspended,\n', '            "One or more pynths are suspended. Operation prohibited"\n', '        );\n', '    }\n', '\n', '    function isSystemUpgrading() external view returns (bool) {\n', '        return systemSuspension.suspended && systemSuspension.reason == SUSPENSION_REASON_UPGRADE;\n', '    }\n', '\n', '    function getPynthSuspensions(bytes32[] calldata pynths)\n', '        external\n', '        view\n', '        returns (bool[] memory suspensions, uint256[] memory reasons)\n', '    {\n', '        suspensions = new bool[](pynths.length);\n', '        reasons = new uint256[](pynths.length);\n', '\n', '        for (uint i = 0; i < pynths.length; i++) {\n', '            suspensions[i] = pynthSuspension[pynths[i]].suspended;\n', '            reasons[i] = pynthSuspension[pynths[i]].reason;\n', '        }\n', '    }\n', '\n', '    /* ========== MUTATIVE FUNCTIONS ========== */\n', '    function updateAccessControl(\n', '        bytes32 section,\n', '        address account,\n', '        bool canSuspend,\n', '        bool canResume\n', '    ) external onlyOwner {\n', '        _internalUpdateAccessControl(section, account, canSuspend, canResume);\n', '    }\n', '\n', '    function suspendSystem(uint256 reason) external {\n', '        _requireAccessToSuspend(SECTION_SYSTEM);\n', '        systemSuspension.suspended = true;\n', '        systemSuspension.reason = uint248(reason);\n', '        emit SystemSuspended(systemSuspension.reason);\n', '    }\n', '\n', '    function resumeSystem() external {\n', '        _requireAccessToResume(SECTION_SYSTEM);\n', '        systemSuspension.suspended = false;\n', '        emit SystemResumed(uint256(systemSuspension.reason));\n', '        systemSuspension.reason = 0;\n', '    }\n', '\n', '    function suspendIssuance(uint256 reason) external {\n', '        _requireAccessToSuspend(SECTION_ISSUANCE);\n', '        issuanceSuspension.suspended = true;\n', '        issuanceSuspension.reason = uint248(reason);\n', '        emit IssuanceSuspended(reason);\n', '    }\n', '\n', '    function resumeIssuance() external {\n', '        _requireAccessToResume(SECTION_ISSUANCE);\n', '        issuanceSuspension.suspended = false;\n', '        emit IssuanceResumed(uint256(issuanceSuspension.reason));\n', '        issuanceSuspension.reason = 0;\n', '    }\n', '\n', '    function suspendExchange(uint256 reason) external {\n', '        _requireAccessToSuspend(SECTION_EXCHANGE);\n', '        exchangeSuspension.suspended = true;\n', '        exchangeSuspension.reason = uint248(reason);\n', '        emit ExchangeSuspended(reason);\n', '    }\n', '\n', '    function resumeExchange() external {\n', '        _requireAccessToResume(SECTION_EXCHANGE);\n', '        exchangeSuspension.suspended = false;\n', '        emit ExchangeResumed(uint256(exchangeSuspension.reason));\n', '        exchangeSuspension.reason = 0;\n', '    }\n', '\n', '    function suspendPynth(bytes32 currencyKey, uint256 reason) external {\n', '        _requireAccessToSuspend(SECTION_SYNTH);\n', '        pynthSuspension[currencyKey].suspended = true;\n', '        pynthSuspension[currencyKey].reason = uint248(reason);\n', '        emit PynthSuspended(currencyKey, reason);\n', '    }\n', '\n', '    function resumePynth(bytes32 currencyKey) external {\n', '        _requireAccessToResume(SECTION_SYNTH);\n', '        emit PynthResumed(currencyKey, uint256(pynthSuspension[currencyKey].reason));\n', '        delete pynthSuspension[currencyKey];\n', '    }\n', '\n', '    /* ========== INTERNAL FUNCTIONS ========== */\n', '\n', '    function _requireAccessToSuspend(bytes32 section) internal view {\n', '        require(accessControl[section][msg.sender].canSuspend, "Restricted to access control list");\n', '    }\n', '\n', '    function _requireAccessToResume(bytes32 section) internal view {\n', '        require(accessControl[section][msg.sender].canResume, "Restricted to access control list");\n', '    }\n', '\n', '    function _internalRequireSystemActive() internal view {\n', '        require(\n', '            !systemSuspension.suspended,\n', '            systemSuspension.reason == SUSPENSION_REASON_UPGRADE\n', '                ? "Pynthetix is suspended, upgrade in progress... please stand by"\n', '                : "Pynthetix is suspended. Operation prohibited"\n', '        );\n', '    }\n', '\n', '    function _internalUpdateAccessControl(\n', '        bytes32 section,\n', '        address account,\n', '        bool canSuspend,\n', '        bool canResume\n', '    ) internal {\n', '        require(\n', '            section == SECTION_SYSTEM ||\n', '                section == SECTION_ISSUANCE ||\n', '                section == SECTION_EXCHANGE ||\n', '                section == SECTION_SYNTH,\n', '            "Invalid section supplied"\n', '        );\n', '        accessControl[section][account].canSuspend = canSuspend;\n', '        accessControl[section][account].canResume = canResume;\n', '        emit AccessControlUpdated(section, account, canSuspend, canResume);\n', '    }\n', '\n', '    /* ========== EVENTS ========== */\n', '\n', '    event SystemSuspended(uint256 reason);\n', '    event SystemResumed(uint256 reason);\n', '\n', '    event IssuanceSuspended(uint256 reason);\n', '    event IssuanceResumed(uint256 reason);\n', '\n', '    event ExchangeSuspended(uint256 reason);\n', '    event ExchangeResumed(uint256 reason);\n', '\n', '    event PynthSuspended(bytes32 currencyKey, uint256 reason);\n', '    event PynthResumed(bytes32 currencyKey, uint256 reason);\n', '\n', '    event AccessControlUpdated(bytes32 indexed section, address indexed account, bool canSuspend, bool canResume);\n', '}']