['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev External interface of AccessControl declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControl {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n', '    function grantRole(bytes32 role, address account) external;\n', '    function revokeRole(bytes32 role, address account) external;\n', '    function renounceRole(bytes32 role, address account) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', " * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n", ' * members except through off-chain means by accessing the contract event logs. Some\n', ' * applications may benefit from on-chain enumerability, for those cases see\n', ' * {AccessControlEnumerable}.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context, IAccessControl, ERC165 {\n', '    struct RoleData {\n', '        mapping (address => bool) members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Modifier that checks that an account has a specific role. Reverts\n', '     * with a standardized message including the required role.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    modifier onlyRole(bytes32 role) {\n', '        _checkRole(role, _msgSender());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControl).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view override returns (bool) {\n', '        return _roles[role].members[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Revert with a standard message if `account` is missing `role`.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     */\n', '    function _checkRole(bytes32 role, address account) internal view {\n', '        if(!hasRole(role, account)) {\n', '            revert(string(abi.encodePacked(\n', '                "AccessControl: account ",\n', '                Strings.toHexString(uint160(account), 20),\n', '                " is missing role ",\n', '                Strings.toHexString(uint256(role), 32)\n', '            )));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (!hasRole(role, account)) {\n', '            _roles[role].members[account] = true;\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (hasRole(role, account)) {\n', '            _roles[role].members[account] = false;\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '  /**\n', '   * @dev Implementation of the {IERC721Receiver} interface.\n', '   *\n', '   * Accepts all token transfers.\n', '   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n', '   */\n', 'contract ERC721Holder is IERC721Receiver {\n', '\n', '    /**\n', '     * @dev See {IERC721Receiver-onERC721Received}.\n', '     *\n', '     * Always returns `IERC721Receiver.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC721Received.selector;\n', '    }\n', '}\n', '\n', 'interface INonfungiblePositionManager is IERC721 {\n', '  function positions(uint256 tokenId)\n', '        external\n', '        view\n', '        returns (\n', '            uint96 nonce,\n', '            address operator,\n', '            address token0,\n', '            address token1,\n', '            uint24 fee,\n', '            int24 tickLower,\n', '            int24 tickUpper,\n', '            uint128 liquidity,\n', '            uint256 feeGrowthInside0LastX128,\n', '            uint256 feeGrowthInside1LastX128,\n', '            uint128 tokensOwed0,\n', '            uint128 tokensOwed1\n', '        );\n', '}\n', '\n', 'interface RainiLpv2StakingPool {\n', '  function burn(address _owner, uint256 _amount) external;\n', '  function balanceOf(address _owner) external view returns(uint256);\n', '}\n', '\n', 'contract RainiLpv3StakingPool is AccessControl, ReentrancyGuard, ERC721Holder {\n', '  bytes32 public constant BURNER_ROLE = keccak256("BURNER_ROLE");\n', '  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '\n', '  using SafeERC20 for IERC20;\n', ' \n', '  // Fixed / admin assigned values:\n', '\n', '  uint256 public rewardRate;\n', '  uint256 public minRewardStake;\n', '  uint256 constant public REWARD_DECIMALS = 1000000;\n', '\n', '  uint256 public maxBonus;\n', '  uint256 public bonusDuration;\n', '  uint256 public bonusRate;\n', '  uint256 constant public BONUS_DECIMALS = 1000000000;\n', '\n', '  uint256 constant public RAINI_REWARD_DECIMALS = 1000000000000;\n', '\n', '  int24 public minTickUpper;\n', '  int24 public maxTickLower;\n', '  uint24 public feeRequired;\n', '\n', '\n', '  INonfungiblePositionManager public rainiLpNFT;\n', '  RainiLpv2StakingPool public rainiLpv2StakingPool;\n', '  IERC20 public rainiToken;\n', '\n', '  address public exchangeTokenAddress;\n', '\n', '  uint256 public unicornToEth;\n', '\n', '\n', '  // Universal variables\n', '  uint256 public totalSupply;\n', '  \n', '  struct GeneralRewardVars {\n', '    uint32 lastUpdateTime;\n', '    uint64 rainiRewardPerTokenStored;\n', '    uint32 periodFinish;\n', '    uint128 rainiRewardRate;\n', '  }\n', '\n', '  GeneralRewardVars public generalRewardVars;\n', '\n', '  // account specific variables\n', '\n', '  struct AccountRewardVars {\n', '    uint40 lastBonus;\n', '    uint32 lastUpdated;\n', '    uint104 rainiRewards;\n', '    uint64 rainiRewardPerTokenPaid;\n', '  }\n', '\n', '  struct AccountVars {\n', '    uint128 staked;\n', '    uint128 unicornBalance;\n', '  }\n', '\n', '\n', '  mapping(address => AccountRewardVars) internal accountRewardVars;\n', '  mapping(address => AccountVars) internal accountVars;\n', '  mapping(address => uint32[]) internal stakedNFTs;\n', '\n', '\n', '  // Events\n', '  event EthWithdrawn(uint256 amount);\n', '\n', '  event RewardSet(uint256 rewardRate, uint256 minRewardStake);\n', '  event BonusesSet(uint256 maxBonus, uint256 bonusDuration);\n', '  event RainiLpTokenSet(address token);\n', '  event UnicornToEthSet(uint256 unicornToEth);\n', '  event TickRangeSet(int24 minTickUpper, int24 maxTickLower);\n', '  event FeeRequiredSet(uint24 feeRequired);\n', '  \n', '\n', '  event TokensStaked(address payer, uint256 amount, uint256 timestamp);\n', '  event TokensWithdrawn(address owner, uint256 amount, uint256 timestamp);\n', '\n', '  event UnicornPointsBurned(address owner, uint256 amount);\n', '  event UnicornPointsMinted(address owner, uint256 amount);\n', '  event UnicornPointsBought(address owner, uint256 amount);\n', '\n', '  event RewardWithdrawn(address owner, uint256 amount, uint256 timestamp);\n', '  event RewardPoolAdded(uint256 _amount, uint256 _duration, uint256 timestamp);\n', '\n', '  constructor(address _rainiLpNFT, address _rainiToken, address _exchangeToken, address _v2Pool) {\n', '    require(_rainiLpNFT != address(0), "RainiLpv3StakingPool: _rainiLpToken is zero address");\n', '    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '    rainiLpNFT = INonfungiblePositionManager(_rainiLpNFT);\n', '    exchangeTokenAddress = _exchangeToken;\n', '    rainiToken = IERC20(_rainiToken);\n', '    rainiLpv2StakingPool = RainiLpv2StakingPool(_v2Pool);\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "RainiLpv3StakingPool: caller is not an owner");\n', '    _;\n', '  }\n', '\n', '  modifier onlyBurner() {\n', '    require(hasRole(BURNER_ROLE, _msgSender()), "RainiLpv3StakingPool: caller is not a burner");\n', '    _;\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(hasRole(MINTER_ROLE, _msgSender()), "RainiLpv3StakingPool: caller is not a minter");\n', '    _;\n', '  }\n', '  \n', '  modifier balanceUpdate(address _owner) {\n', '\n', '    AccountRewardVars memory _accountRewardVars = accountRewardVars[_owner];\n', '    AccountVars memory _accountVars = accountVars[_owner];\n', '    GeneralRewardVars memory _generalRewardVars = generalRewardVars;\n', '\n', '    // Raini rewards\n', '    _generalRewardVars.rainiRewardPerTokenStored = uint64(rainiRewardPerToken());\n', '    _generalRewardVars.lastUpdateTime = uint32(lastTimeRewardApplicable());\n', '\n', '    if (_owner != address(0)) {\n', '      uint32 duration = uint32(block.timestamp) - _accountRewardVars.lastUpdated;\n', '      uint128 reward = calculateReward(_owner, _accountVars.staked, duration);\n', '  \n', '      _accountVars.unicornBalance = _accountVars.unicornBalance + reward;\n', '      _accountRewardVars.lastUpdated = uint32(block.timestamp);\n', '      _accountRewardVars.lastBonus = uint40(Math.min(maxBonus, _accountRewardVars.lastBonus + bonusRate * duration));\n', '      \n', '      _accountRewardVars.rainiRewards = uint104(rainiEarned(_owner));\n', '      _accountRewardVars.rainiRewardPerTokenPaid = _generalRewardVars.rainiRewardPerTokenStored;\n', '    }\n', '\n', '    accountRewardVars[_owner] = _accountRewardVars;\n', '    accountVars[_owner] = _accountVars;\n', '    generalRewardVars = _generalRewardVars;\n', '\n', '    _;\n', '  }\n', '\n', '  function getRewardByDuration(address _owner, uint256 _amount, uint256 _duration) \n', '    public view returns(uint256) {\n', '      return calculateReward(_owner, _amount, _duration);\n', '  }\n', '\n', '  function getStaked(address _owner) \n', '    public view returns(uint256) {\n', '      return accountVars[_owner].staked;\n', '  }\n', '\n', '  function getStakedPositions(address _owner) \n', '    public view returns(uint32[] memory) {\n', '      return stakedNFTs[_owner];\n', '  }\n', '  \n', '  function balanceOf(address _owner)\n', '    public view returns(uint256) {\n', '      uint256 reward = calculateReward(_owner, accountVars[_owner].staked, block.timestamp - accountRewardVars[_owner].lastUpdated);\n', '      return accountVars[_owner].unicornBalance + reward;\n', '  }\n', '\n', '  function getCurrentBonus(address _owner) \n', '    public view returns(uint256) {\n', '      AccountRewardVars memory _accountRewardVars = accountRewardVars[_owner];\n', '\n', '      if(accountVars[_owner].staked == 0) {\n', '        return 0;\n', '      } \n', '      uint256 duration = block.timestamp - _accountRewardVars.lastUpdated;\n', '      return Math.min(maxBonus, _accountRewardVars.lastBonus + bonusRate * duration);\n', '  }\n', '\n', '  function getCurrentAvgBonus(address _owner, uint256 _duration)\n', '    public view returns(uint256) {\n', '      AccountRewardVars memory _accountRewardVars = accountRewardVars[_owner];\n', '\n', '      if(accountVars[_owner].staked == 0) {\n', '        return 0;\n', '      } \n', '      uint256 avgBonus;\n', '      if(_accountRewardVars.lastBonus < maxBonus) {\n', '        uint256 durationTillMax = (maxBonus - _accountRewardVars.lastBonus) / bonusRate;\n', '        if(_duration > durationTillMax) {\n', '          uint256 avgWeightedBonusTillMax = (_accountRewardVars.lastBonus + maxBonus) * durationTillMax / 2;\n', '          uint256 weightedMaxBonus = maxBonus * (_duration - durationTillMax);\n', '\n', '          avgBonus = (avgWeightedBonusTillMax + weightedMaxBonus) / _duration;\n', '        } else {\n', '          avgBonus = (_accountRewardVars.lastBonus + bonusRate * _duration + _accountRewardVars.lastBonus) / 2;\n', '        }\n', '      } else {\n', '        avgBonus = maxBonus;\n', '      }\n', '      return avgBonus;\n', '  }\n', '\n', '  function setReward(uint256 _rewardRate, uint256 _minRewardStake)\n', '    external onlyOwner {\n', '      rewardRate = _rewardRate;\n', '      minRewardStake = _minRewardStake;\n', '\n', '      emit RewardSet(rewardRate, minRewardStake);\n', '  }\n', '\n', '  function setUnicornToEth(uint256 _unicornToEth)\n', '    external onlyOwner {\n', '      unicornToEth = _unicornToEth;\n', '      \n', '      emit UnicornToEthSet(_unicornToEth);\n', '  }\n', '\n', '  function setBonus(uint256 _maxBonus, uint256 _bonusDuration)\n', '    external onlyOwner {\n', '      maxBonus = _maxBonus * BONUS_DECIMALS;\n', '      bonusDuration = _bonusDuration;\n', '      bonusRate = maxBonus / _bonusDuration;\n', '\n', '      emit BonusesSet(_maxBonus, _bonusDuration);\n', '  }\n', '  function setTickRange(int24 _maxTickLower, int24 _minTickUpper)\n', '    external onlyOwner {\n', '      minTickUpper = _minTickUpper;\n', '      maxTickLower = _maxTickLower;\n', '      emit TickRangeSet(_minTickUpper, _maxTickLower);\n', '  }\n', '\n', '  function setFeeRequired(uint24 _feeRequired)\n', '    external onlyOwner {\n', '      feeRequired = _feeRequired;  \n', '      emit FeeRequiredSet(_feeRequired);\n', '  }\n', '\n', '  function stake(uint32 _tokenId)\n', '    external nonReentrant balanceUpdate(_msgSender()) {\n', '      (\n', '        ,//uint96 nonce,\n', '        ,//address operator,\n', '        address token0,\n', '        address token1,\n', '        uint24 fee,\n', '        int24 tickLower,\n', '        int24 tickUpper,\n', '        uint128 liquidity,\n', '        ,//uint256 feeGrowthInside0LastX128,\n', '        ,//uint256 feeGrowthInside1LastX128,\n', '        ,//uint128 tokensOwed0,\n', '        //uint128 tokensOwed1\n', '      ) = rainiLpNFT.positions(_tokenId);\n', '\n', '      require(tickUpper > minTickUpper, "RainiLpv3StakingPool: tickUpper too low");\n', '      require(tickLower < maxTickLower, "RainiLpv3StakingPool: tickLower too high");\n', '      require((token0 ==  exchangeTokenAddress && token1 == address(rainiToken)) ||\n', '              (token1 ==  exchangeTokenAddress && token0 == address(rainiToken)), "RainiLpv3StakingPool: NFT tokens not correct");\n', '      require(fee == feeRequired, "RainiLpv3StakingPool: fee != feeRequired");\n', '\n', '      rainiLpNFT.safeTransferFrom(_msgSender(), address(this), _tokenId);\n', '\n', '      uint32[] memory nfts = stakedNFTs[_msgSender()];\n', '      bool wasAdded = false;\n', '      for (uint i = 0; i < nfts.length; i++) {\n', '         if (nfts[i] == 0) {\n', '           stakedNFTs[_msgSender()][i] = _tokenId;\n', '           wasAdded = true;\n', '           break;\n', '         }\n', '      }\n', '      if (!wasAdded) {\n', '        stakedNFTs[_msgSender()].push(_tokenId);\n', '      }      \n', '\n', '      totalSupply = totalSupply + liquidity;\n', '      uint128 currentStake = accountVars[_msgSender()].staked;\n', '      accountVars[_msgSender()].staked = currentStake + liquidity;\n', '      accountRewardVars[_msgSender()].lastBonus = uint40(accountRewardVars[_msgSender()].lastBonus * currentStake / (currentStake + liquidity));\n', '\n', '      emit TokensStaked(_msgSender(), liquidity, block.timestamp);\n', '  }\n', '  \n', '  function withdraw(uint256 _tokenId)\n', '    external nonReentrant balanceUpdate(_msgSender()) {\n', '\n', '      bool ownsNFT = false;\n', '      uint32[] memory nfts = stakedNFTs[_msgSender()];\n', '      for (uint i = 0; i < nfts.length; i++) {\n', '        if (nfts[i] == _tokenId) {\n', '          ownsNFT = true;\n', '          delete stakedNFTs[_msgSender()][i];\n', '          break;\n', '        }\n', '      }\n', '      require(ownsNFT == true, "RainiLpv3StakingPool: Not the owner");\n', '\n', '      rainiLpNFT.safeTransferFrom(address(this), _msgSender(), _tokenId);\n', '\n', '      (\n', '        ,//uint96 nonce,\n', '        ,//address operator,\n', '        ,//address token0,\n', '        ,//address token1,\n', '        ,//uint24 fee,\n', '        ,//int24 tickLower,\n', '        ,//int24 tickUpper,\n', '        uint128 liquidity,\n', '        ,//uint256 feeGrowthInside0LastX128,\n', '        ,//uint256 feeGrowthInside1LastX128,\n', '        ,//uint128 tokensOwed0,\n', '        //uint128 tokensOwed1\n', '      ) = rainiLpNFT.positions(_tokenId);\n', '\n', '      accountVars[_msgSender()].staked = accountVars[_msgSender()].staked - liquidity;\n', '      totalSupply = totalSupply - liquidity;\n', '\n', '      emit TokensWithdrawn(_msgSender(), liquidity, block.timestamp);\n', '  }\n', '\n', '  function withdrawEth(uint256 _amount)\n', '    external onlyOwner {\n', '      require(_amount <= address(this).balance, "RainiLpv3StakingPool: not enough balance");\n', '      (bool success, ) = _msgSender().call{ value: _amount }("");\n', '      require(success, "RainiLpv3StakingPool: transfer failed");\n', '      emit EthWithdrawn(_amount);\n', '  }\n', '  \n', '  function mint(address[] calldata _addresses, uint256[] calldata _points) \n', '    external onlyMinter {\n', '      require(_addresses.length == _points.length, "RainiLpv3StakingPool: Arrays not equal");\n', '      \n', '      for (uint256 i = 0; i < _addresses.length; i++) {\n', '        accountVars[_addresses[i]].unicornBalance = uint128(accountVars[_addresses[i]].unicornBalance + _points[i]);\n', '        \n', '        emit UnicornPointsMinted(_addresses[i], _points[i]);\n', '      }\n', '  }\n', '  \n', '  function buyUnicorn(uint256 _amount) \n', '    external payable {\n', '      require(_amount > 0, "RainiLpv3StakingPool: _amount is zero");\n', '      require(msg.value * unicornToEth >= _amount, "RainiLpv3StakingPool: not enougth eth");\n', '\n', '      accountVars[_msgSender()].unicornBalance = uint128(accountVars[_msgSender()].unicornBalance + _amount);\n', '\n', '      uint256 refund = msg.value - (_amount / unicornToEth);\n', '      if(refund > 0) {\n', '        (bool success, ) = _msgSender().call{ value: refund }("");\n', '        require(success, "RainiLpv3StakingPool: transfer failed");\n', '      }\n', '      \n', '      emit UnicornPointsBought(_msgSender(), _amount);\n', '  }  \n', '  \n', '  function burn(address _owner, uint256 _amount) \n', '    external nonReentrant onlyBurner balanceUpdate(_owner) {\n', '      accountVars[_owner].unicornBalance = uint128(accountVars[_owner].unicornBalance - _amount);\n', '      \n', '      emit UnicornPointsBurned(_owner, _amount);\n', '  }\n', '    \n', '  function calculateReward(address _owner, uint256 _amount, uint256 _duration) \n', '    private view returns(uint128) {\n', '      uint256 reward = _duration * rewardRate * _amount / (REWARD_DECIMALS * minRewardStake);\n', '\n', '      return calculateBonus(_owner, reward, _duration);\n', '  }\n', '\n', '  function calculateBonus(address _owner, uint256 _amount, uint256 _duration)\n', '    private view returns(uint128) {\n', '      uint256 avgBonus = getCurrentAvgBonus(_owner, _duration);\n', '      return uint128(_amount + _amount * avgBonus  / BONUS_DECIMALS / 100);\n', '  }\n', '\n', '\n', '\n', '  // RAINI rewards\n', '\n', '  function lastTimeRewardApplicable() public view returns (uint256) {\n', '      return Math.min(block.timestamp, generalRewardVars.periodFinish);\n', '  }\n', '\n', '  function rainiRewardPerToken() public view returns (uint256) {\n', '    GeneralRewardVars memory _generalRewardVars = generalRewardVars;\n', '\n', '    if (totalSupply == 0) {\n', '      return _generalRewardVars.rainiRewardPerTokenStored;\n', '    }\n', '    \n', '    return _generalRewardVars.rainiRewardPerTokenStored + (uint256(lastTimeRewardApplicable() - _generalRewardVars.lastUpdateTime) * _generalRewardVars.rainiRewardRate * RAINI_REWARD_DECIMALS) / totalSupply;\n', '  }\n', '\n', '  function rainiEarned(address account) public view returns (uint256) {\n', '    AccountRewardVars memory _accountRewardVars = accountRewardVars[account];\n', '    AccountVars memory _accountVars = accountVars[account];\n', '    \n', '    uint256 calculatedEarned = (uint256(_accountVars.staked) * (rainiRewardPerToken() - _accountRewardVars.rainiRewardPerTokenPaid)) / RAINI_REWARD_DECIMALS + _accountRewardVars.rainiRewards;\n', '    uint256 poolBalance = rainiToken.balanceOf(address(this));\n', '    // some rare case the reward can be slightly bigger than real number, we need to check against how much we have left in pool\n', '    if (calculatedEarned > poolBalance) return poolBalance;\n', '    return calculatedEarned;\n', '  }\n', '\n', '  function addRainiRewardPool(uint256 _amount, uint256 _duration)\n', '    external onlyOwner nonReentrant balanceUpdate(address(0)) {\n', '\n', '      GeneralRewardVars memory _generalRewardVars = generalRewardVars;\n', '\n', '      if (_generalRewardVars.periodFinish > block.timestamp) {\n', '        uint256 timeRemaining = _generalRewardVars.periodFinish - block.timestamp;\n', '        _amount += timeRemaining * _generalRewardVars.rainiRewardRate;\n', '      }\n', '\n', '      rainiToken.safeTransferFrom(_msgSender(), address(this), _amount);\n', '      _generalRewardVars.rainiRewardRate = uint128(_amount / _duration);\n', '      _generalRewardVars.periodFinish = uint32(block.timestamp + _duration);\n', '      _generalRewardVars.lastUpdateTime = uint32(block.timestamp);\n', '      generalRewardVars = _generalRewardVars;\n', '      emit RewardPoolAdded(_amount, _duration, block.timestamp);\n', '  }\n', '\n', '  function abortRainiRewardPool() external onlyOwner nonReentrant balanceUpdate(address(0)) {\n', '\n', '      GeneralRewardVars memory _generalRewardVars = generalRewardVars;\n', '\n', '      require (_generalRewardVars.periodFinish > block.timestamp, "Reward pool is not active");\n', '      \n', '      uint256 timeRemaining = _generalRewardVars.periodFinish - block.timestamp;\n', '      uint256 remainingAmount = timeRemaining * _generalRewardVars.rainiRewardRate;\n', '      rainiToken.transfer(_msgSender(), remainingAmount);\n', '\n', '      _generalRewardVars.rainiRewardRate = 0;\n', '      _generalRewardVars.periodFinish = uint32(block.timestamp);\n', '      _generalRewardVars.lastUpdateTime = uint32(block.timestamp);\n', '      generalRewardVars = _generalRewardVars;\n', '  }\n', '\n', '  function recoverRaini(uint256 _amount) external onlyOwner nonReentrant {\n', '    require(generalRewardVars.periodFinish < block.timestamp, "Raini cannot be recovered while reward pool active.");\n', '    rainiToken.transfer(_msgSender(), _amount);\n', '  }\n', '\n', '  function withdrawReward() external nonReentrant balanceUpdate(_msgSender()) {\n', '    uint256 reward = rainiEarned(_msgSender());\n', '    require(reward > 1, "no reward to withdraw");\n', '    if (reward > 1) {\n', '      accountRewardVars[_msgSender()].rainiRewards = 0;\n', '      rainiToken.safeTransfer(_msgSender(), reward);\n', '    }\n', '\n', '    emit RewardWithdrawn(_msgSender(), reward, block.timestamp);\n', '  }\n', '\n', '\n', '\n', '  // LP v2 migration\n', '  function migrateV2Unicorns() external {\n', '    uint256 balance = rainiLpv2StakingPool.balanceOf(_msgSender());\n', '    rainiLpv2StakingPool.burn(_msgSender(), balance);\n', '    accountVars[_msgSender()].unicornBalance = uint128(accountVars[_msgSender()].unicornBalance + balance);\n', '    emit UnicornPointsMinted(_msgSender(), balance);\n', '  }\n', '}']