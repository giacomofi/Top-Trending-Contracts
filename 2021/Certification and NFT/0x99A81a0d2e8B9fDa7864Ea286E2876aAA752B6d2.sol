['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', '                "Address: low-level static call failed"\n', '            );\n', '    }\n', '\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '    address private _dev;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        _dev = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    function dev() public view returns (address) {\n', '        return _dev;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyDev() {\n', '        require(_dev == _msgSender(), "Ownable: caller is not the dev");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    function transferDevship(address newDev) public virtual onlyDev {\n', '        require(newDev != address(0), "Ownable: new dev is the zero address");\n', '        _dev = newDev;\n', '    }\n', '}\n', '\n', 'library SafeMathUniswap {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUniswap for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) =\n', '            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0\n', '            ? (reserve0, reserve1)\n', '            : (reserve1, reserve0);\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    function getPair(address tokenA, address tokenB)\n', '        external\n', '        view\n', '        returns (address pair);\n', '\n', '    function allPairs(uint256) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint256);\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves()\n', '        external\n', '        view\n', '        returns (\n', '            uint112 reserve0,\n', '            uint112 reserve1,\n', '            uint32 blockTimestampLast\n', '        );\n', '\n', '    function swap(\n', '        uint256 amount0Out,\n', '        uint256 amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '}\n', '\n', 'interface TokenInterface is IERC20 {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '}\n', '\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', 'library Math {\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '}\n', '\n', 'contract SwapBot is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for TokenInterface;\n', '\n', '    IFreeFromUpTo public constant chi = IFreeFromUpTo(0x0000000000004946c0e9F43F4Dee607b0eF1fA1c);\n', '\n', '    TokenInterface private _weth;\n', '\n', '    IUniswapV2Router02[] public _routers;\n', '    IUniswapV2Factory[] public _factories;\n', '    address[] private _runners;\n', '\n', '    struct Root {\n', '        uint8[] routerIds;\n', '        address[] inTokens;\n', '        uint256 startAmount;\n', '        uint256 estimateProfit;\n', '        uint256 chiAmount;\n', '    }\n', '\n', '    struct PairInfo {\n', '        IUniswapV2Pair pair;\n', '        uint256 outputAmount;\n', '        bool isReserveIn;\n', '    }\n', '\n', '    modifier onlyRunner() {\n', '        (bool exist, ) = checkRunner(_msgSender());\n', '        require(exist, "caller is not the runner");\n', '        _;\n', '    }\n', '\n', '    modifier discountCHI(uint256 chiAmount) {\n', '        if (chiAmount > 0) {\n', '            uint256 gasStart = gasleft();\n', '            _;\n', '            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            chi.freeFromUpTo(_msgSender(), Math.min((gasSpent + 14154) / 41947, chiAmount));\n', '        } else {\n', '            _;\n', '        }\n', '    }\n', '\n', '    constructor() {\n', '        _weth = TokenInterface(address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2));\n', '\n', '        IUniswapV2Router02 uniswapV2Router = IUniswapV2Router02(address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D));\n', '        IUniswapV2Router02 sushiswapV2Router = IUniswapV2Router02(address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F));\n', '\n', '        _routers.push(uniswapV2Router);\n', '        _routers.push(sushiswapV2Router);\n', '\n', '        _factories.push(IUniswapV2Factory(uniswapV2Router.factory()));\n', '        _factories.push(IUniswapV2Factory(sushiswapV2Router.factory()));\n', '\n', '        _runners.push(_msgSender());\n', '    }\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function deposit(uint256 depositAmount) public onlyDev {\n', '        _weth.deposit{value: depositAmount}();\n', '    }\n', '\n', '    function runnerLength() public view returns (uint8) {\n', '        return uint8(_runners.length);\n', '    }\n', '    \n', '    function checkRunner(address runner)\n', '        public\n', '        view\n', '        returns (bool exist, uint8 index)\n', '    {\n', '        uint8 length = runnerLength();\n', '        exist = false;\n', '        for (uint8 i = 0; i < length; i++) {\n', '            if (_runners[i] == runner) {\n', '                exist = true;\n', '                index = i;\n', '                break;\n', '            }\n', '        }\n', '    }\n', '\n', '    function addRunner(address runner) external onlyDev {\n', '        require(runner != address(0), "Invalid runner address.");\n', '\n', '        _runners.push(address(runner));\n', '    }\n', '\n', '    function withdrawProfit(address withdrawAddress, uint256 withdrawAmount)\n', '        public\n', '        onlyOwner\n', '        returns (bool sent)\n', '    {\n', '        uint256 balance = _weth.balanceOf(address(this));\n', '        require(balance > withdrawAmount, "Invalid Withdraw Amount");\n', '\n', '        _weth.withdraw(withdrawAmount);\n', '        (sent, ) = withdrawAddress.call{value: withdrawAmount}("");\n', '        require(sent, "Invalid withdraw ETH");\n', '    }\n', '\n', '    function emergencyWithdraw(address withdrawAddress) \n', '        public\n', '        onlyDev\n', '        returns (bool sent)\n', '    {\n', '        uint256 withdrawAmount = _weth.balanceOf(address(this));\n', '        _weth.withdraw(withdrawAmount);\n', '        uint256 ethAmount = address(this).balance;\n', '        (sent, ) = withdrawAddress.call{value: ethAmount}("");\n', '        require(sent, "Invalid withdraw ETH");\n', '    }\n', '\n', '    function checkEstimatedProfit(\n', '        uint8[] memory routerIds,\n', '        uint256 startAmount,\n', '        address[] memory inTokens\n', '    ) \n', '        public \n', '        view \n', '        returns (\n', '            uint256,\n', '            PairInfo[] memory\n', '        )\n', '    {\n', '        uint256 len = inTokens.length;\n', '        uint256 amountIn = startAmount;\n', '        bool isReserveIn;\n', '        PairInfo[] memory pairList = new PairInfo[](len - 1);\n', '\n', '\n', '        for (uint256 i = 0; i < len - 1; i++) {\n', '            IUniswapV2Factory factory = _factories[routerIds[i]];\n', '\n', '            IUniswapV2Pair pair = IUniswapV2Pair(factory.getPair(inTokens[i], inTokens[i + 1]));\n', '\n', '            (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '\n', '            isReserveIn = pair.token0() == inTokens[i] ? true : false;\n', '\n', '            amountIn = UniswapV2Library.getAmountOut(\n', '                amountIn,\n', '                isReserveIn ? reserve0 : reserve1,\n', '                !isReserveIn ? reserve0 : reserve1\n', '            );\n', '\n', '            pairList[i] = PairInfo(\n', '                pair,\n', '                amountIn,\n', '                isReserveIn\n', '            );\n', '        }\n', '\n', '        uint256 profit = amountIn <= startAmount ? 0 : amountIn.sub(startAmount);\n', '        return (profit, pairList);\n', '    }\n', '\n', '    function run(\n', '        Root memory router\n', '    ) public onlyRunner discountCHI(router.chiAmount) {\n', '        (uint256 estimateProfit, PairInfo[] memory pairList)\n', '            = checkEstimatedProfit(router.routerIds, router.startAmount, router.inTokens);\n', '\n', '        if (estimateProfit < router.estimateProfit) {\n', '            return;\n', '        }\n', '\n', '        uint256 len = router.inTokens.length;\n', '        uint256 amountIn = router.startAmount;\n', '\n', '        for (uint256 i = 0; i < len - 1; i++) {\n', '            amountIn = _swapTokenToToken(\n', '                amountIn,\n', '                router.inTokens[i],\n', '                router.inTokens[i + 1],\n', '                pairList[i]\n', '            );\n', '        }\n', '        return;\n', '    }\n', '\n', '    function bulkRun(Root[] memory roots)\n', '        external\n', '        onlyRunner\n', '        returns (bool)\n', '    {\n', '        uint256 length = roots.length;\n', '\n', '        uint256 maxProfit = 0;\n', '        uint256 goalRoot = 0;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            Root memory root = roots[i];\n', '\n', '            (uint256 profit, ) = checkEstimatedProfit(\n', '                root.routerIds,\n', '                root.startAmount,\n', '                root.inTokens\n', '            );\n', '\n', '            if (profit > maxProfit) {\n', '                maxProfit = profit;\n', '                goalRoot = i;\n', '            }\n', '        }\n', '\n', '        if (maxProfit > 0) {\n', '            Root memory root = roots[goalRoot];\n', '            run(root);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function _swapTokenToToken(\n', '        uint256 tokenInAmount,\n', '        address inToken,\n', '        address outToken,\n', '        PairInfo memory pairInfo\n', '    ) private returns (uint256 amountOut) {\n', '        uint256 oldTokenOutAmount = TokenInterface(outToken).balanceOf(address(this));\n', '\n', '        TokenInterface(inToken).safeTransfer(address(pairInfo.pair), tokenInAmount);\n', '        _swapSupportingFeeOnTransferTokens(\n', '            pairInfo\n', '        );\n', '        \n', '        uint256 newTokenOutAmount = TokenInterface(outToken).balanceOf(address(this));\n', '        amountOut = newTokenOutAmount.sub(oldTokenOutAmount);\n', '    }\n', '\n', '    function _swapSupportingFeeOnTransferTokens(\n', '        PairInfo memory pairInfo\n', '    ) internal virtual {\n', '        (uint256 amount0Out, uint256 amount1Out) =\n', '            pairInfo.isReserveIn\n', '                ? (uint256(0), pairInfo.outputAmount)\n', '                : (pairInfo.outputAmount, uint256(0));\n', '\n', '        pairInfo.pair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n', '    }\n', '}']