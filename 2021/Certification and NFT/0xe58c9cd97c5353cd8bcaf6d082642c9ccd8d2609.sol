['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '/*\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract Ownable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor() internal {\n', '        _OWNER_ = msg.sender;\n', '        emit OwnershipTransferred(address(0), _OWNER_);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() external {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '\n', 'contract UserQuota is Ownable {\n', '\n', '    mapping(address => int) public userQuota;\n', '    int constant quota = 150 * 10**6; // 150u on eth\n', '\n', '    function setUserQuota(address[] memory users) external onlyOwner {\n', '        for(uint256 i = 0; i< users.length; i++) {\n', '            require(users[i] != address(0), "USER_INVALID");\n', '            userQuota[users[i]] = quota;\n', '        }\n', '    }\n', '\n', '    function getUserQuota(address user) external view returns (int) {\n', '        return userQuota[user];\n', '    }\n', '}']