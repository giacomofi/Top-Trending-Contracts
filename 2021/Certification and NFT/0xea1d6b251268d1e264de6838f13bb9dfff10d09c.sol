['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.6.7;\n', '\n', 'interface IERC1155 {\n', '    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 value, bytes calldata _data) external;\n', '    function balanceOf(address _owner, uint256 _id) external view returns(uint256);\n', '}\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    \n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '        return c;\n', '    }\n', '    \n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    \n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '    \n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract RandomizedSale is Ownable {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 constant public MAX_SUPPLY = 17;\n', '    \n', '    IERC1155  public nft;\n', '    uint256   public price = 0.5 ether;\n', '    uint256   public id;\n', '    uint256   public offset;\n', '    uint256   public start;\n', '    uint256   public idToSend;\n', '    uint256   public maxId;\n', '    uint256   public amountSold = 0;\n', '    bool      public ended = false;\n', '    \n', '    address[] public buyers;\n', '    mapping(address => bool) public buyerMapping; // key is address, value is boolean where true means they already bought\n', '    \n', '    address payable public haus;\n', '    address payable public seller;\n', '    \n', '    event Buy(address buyer, uint256 amount);\n', '    \n', '    constructor() public {\n', '        start = 1620154800;\n', '        id = 72;\n', '        maxId  = id + MAX_SUPPLY - 1;\n', '        \n', '        nft = IERC1155(0x13bAb10a88fc5F6c77b87878d71c9F1707D2688A);\n', '        seller = payable(address(0x15884D7a5567725E0306A90262ee120aD8452d58));\n', '        haus = payable(address(0x38747BAF050d3C22315a761585868DbA16abFD89));\n', '    }\n', '    \n', '    function buy(uint256 amount) public payable {\n', '        require(amountSold + buyers.length < MAX_SUPPLY, "sold out");\n', '        require(!buyerMapping[msg.sender], "already purchased");\n', '        require(msg.sender == tx.origin, "no contracts");\n', '        require(block.timestamp >= start, "early");\n', '        require(amount <= MAX_SUPPLY, "ordered too many");\n', '        require(amount <= 1, "ordered too many");\n', '        require(msg.value == price.mul(amount), "wrong amount");\n', '        \n', '        uint256 balance = address(this).balance;\n', '        uint256 hausFee = balance.div(20).mul(3);\n', '        haus.transfer(hausFee);\n', '        seller.transfer(address(this).balance);\n', '        \n', '        buyerMapping[msg.sender] = true;\n', '        buyers.push(msg.sender);\n', '        emit Buy(msg.sender, amount);\n', '    }\n', '    \n', '    function supply() public view returns(uint256) {\n', '        return MAX_SUPPLY.sub(amountSold);\n', '    }\n', '    \n', '    function supply(uint256 _id) public view returns(uint256) {\n', '        return nft.balanceOf(address(this), _id);\n', '    }\n', '    \n', '    function end() public onlyOwner {\n', '        if (!ended) {\n', '            ended = true;\n', '            offset = generateRandom();\n', '            idToSend = id.add(offset);\n', '        }\n', '        \n', '        uint256 balance = address(this).balance;\n', '        uint256 hausFee = balance.div(20).mul(3);\n', '        haus.transfer(hausFee);\n', '        seller.transfer(address(this).balance);\n', '    }\n', '    \n', '    function distribute() public onlyOwner {\n', '        if (!ended) {\n', '            return;\n', '        }\n', '        \n', '        for (uint i = 0; i < buyers.length; i++) {\n', '            address toSendTo = buyers[i];\n', '\n', '            nft.safeTransferFrom(address(this), toSendTo, idToSend, 1, new bytes(0x0));\n', '            \n', '            buyerMapping[toSendTo] = false;\n', '            \n', '            idToSend = idToSend.add(1);\n', '            if (idToSend > maxId) {\n', '                idToSend = id;\n', '            }\n', '        }\n', '        \n', '        amountSold = amountSold.add(buyers.length);\n', '        delete buyers;\n', '    }\n', '    \n', '    function generateRandom() private view returns (uint256) {\n', '        return uint256(keccak256(abi.encode(block.timestamp, block.difficulty)))%(MAX_SUPPLY);\n', '    }\n', '    \n', '    function pull(uint256 _id) public onlyOwner {\n', '        nft.safeTransferFrom(address(this), seller, _id, 1, new bytes(0x0));\n', '    }\n', '    \n', '    function onERC1155BatchReceived(address, address, uint256[] calldata, uint256[] calldata, bytes calldata) external pure returns(bytes4) {\n', '        return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"));\n', '    }\n', '    \n', '    function onERC1155Received(address, address, uint256, uint256, bytes calldata) external pure returns(bytes4) {\n', '        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));\n', '    }\n', '}']