['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-25\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/InterestCalculator.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract InterestCalculator {\n', '    using SafeMath for uint;\n', '    uint private constant MAX_DAYS = 365;\n', '\n', '    function _initCumulativeInterestForDays() internal pure returns(uint[] memory) {\n', '        uint[] memory cumulativeInterestForDays = new uint[](MAX_DAYS.add(1));\n', '\n', '        cumulativeInterestForDays[0] = 0;\n', '        cumulativeInterestForDays[1] = 1;\n', '        cumulativeInterestForDays[2] = 2;\n', '        cumulativeInterestForDays[3] = 3;\n', '        cumulativeInterestForDays[4] = 4;\n', '        cumulativeInterestForDays[5] = 6;\n', '        cumulativeInterestForDays[6] = 8;\n', '        cumulativeInterestForDays[7] = 11;\n', '        cumulativeInterestForDays[8] = 14;\n', '        cumulativeInterestForDays[9] = 17;\n', '        cumulativeInterestForDays[10] = 21;\n', '        cumulativeInterestForDays[11] = 25;\n', '        cumulativeInterestForDays[12] = 30;\n', '        cumulativeInterestForDays[13] = 35;\n', '        cumulativeInterestForDays[14] = 40;\n', '        cumulativeInterestForDays[15] = 46;\n', '        cumulativeInterestForDays[16] = 52;\n', '        cumulativeInterestForDays[17] = 58;\n', '        cumulativeInterestForDays[18] = 65;\n', '        cumulativeInterestForDays[19] = 72;\n', '        cumulativeInterestForDays[20] = 80;\n', '        cumulativeInterestForDays[21] = 88;\n', '        cumulativeInterestForDays[22] = 96;\n', '        cumulativeInterestForDays[23] = 105;\n', '        cumulativeInterestForDays[24] = 114;\n', '        cumulativeInterestForDays[25] = 124;\n', '        cumulativeInterestForDays[26] = 134;\n', '        cumulativeInterestForDays[27] = 144;\n', '        cumulativeInterestForDays[28] = 155;\n', '        cumulativeInterestForDays[29] = 166;\n', '        cumulativeInterestForDays[30] = 178;\n', '        cumulativeInterestForDays[31] = 190;\n', '        cumulativeInterestForDays[32] = 202;\n', '        cumulativeInterestForDays[33] = 215;\n', '        cumulativeInterestForDays[34] = 228;\n', '        cumulativeInterestForDays[35] = 242;\n', '        cumulativeInterestForDays[36] = 256;\n', '        cumulativeInterestForDays[37] = 271;\n', '        cumulativeInterestForDays[38] = 286;\n', '        cumulativeInterestForDays[39] = 301;\n', '        cumulativeInterestForDays[40] = 317;\n', '        cumulativeInterestForDays[41] = 333;\n', '        cumulativeInterestForDays[42] = 350;\n', '        cumulativeInterestForDays[43] = 367;\n', '        cumulativeInterestForDays[44] = 385;\n', '        cumulativeInterestForDays[45] = 403;\n', '        cumulativeInterestForDays[46] = 421;\n', '        cumulativeInterestForDays[47] = 440;\n', '        cumulativeInterestForDays[48] = 459;\n', '        cumulativeInterestForDays[49] = 479;\n', '        cumulativeInterestForDays[50] = 499;\n', '        cumulativeInterestForDays[51] = 520;\n', '        cumulativeInterestForDays[52] = 541;\n', '        cumulativeInterestForDays[53] = 563;\n', '        cumulativeInterestForDays[54] = 585;\n', '        cumulativeInterestForDays[55] = 607;\n', '        cumulativeInterestForDays[56] = 630;\n', '        cumulativeInterestForDays[57] = 653;\n', '        cumulativeInterestForDays[58] = 677;\n', '        cumulativeInterestForDays[59] = 701;\n', '        cumulativeInterestForDays[60] = 726;\n', '        cumulativeInterestForDays[61] = 751;\n', '        cumulativeInterestForDays[62] = 777;\n', '        cumulativeInterestForDays[63] = 803;\n', '        cumulativeInterestForDays[64] = 830;\n', '        cumulativeInterestForDays[65] = 857;\n', '        cumulativeInterestForDays[66] = 884;\n', '        cumulativeInterestForDays[67] = 912;\n', '        cumulativeInterestForDays[68] = 940;\n', '        cumulativeInterestForDays[69] = 969;\n', '        cumulativeInterestForDays[70] = 998;\n', '        cumulativeInterestForDays[71] = 1028;\n', '        cumulativeInterestForDays[72] = 1058;\n', '        cumulativeInterestForDays[73] = 1089;\n', '        cumulativeInterestForDays[74] = 1120;\n', '        cumulativeInterestForDays[75] = 1152;\n', '        cumulativeInterestForDays[76] = 1184;\n', '        cumulativeInterestForDays[77] = 1217;\n', '        cumulativeInterestForDays[78] = 1250;\n', '        cumulativeInterestForDays[79] = 1284;\n', '        cumulativeInterestForDays[80] = 1318;\n', '        cumulativeInterestForDays[81] = 1353;\n', '        cumulativeInterestForDays[82] = 1388;\n', '        cumulativeInterestForDays[83] = 1424;\n', '        cumulativeInterestForDays[84] = 1460;\n', '        cumulativeInterestForDays[85] = 1497;\n', '        cumulativeInterestForDays[86] = 1534;\n', '        cumulativeInterestForDays[87] = 1572;\n', '        cumulativeInterestForDays[88] = 1610;\n', '        cumulativeInterestForDays[89] = 1649;\n', '        cumulativeInterestForDays[90] = 1688;\n', '        cumulativeInterestForDays[91] = 1728;\n', '        cumulativeInterestForDays[92] = 1768;\n', '        cumulativeInterestForDays[93] = 1809;\n', '        cumulativeInterestForDays[94] = 1850;\n', '        cumulativeInterestForDays[95] = 1892;\n', '        cumulativeInterestForDays[96] = 1934;\n', '        cumulativeInterestForDays[97] = 1977;\n', '        cumulativeInterestForDays[98] = 2020;\n', '        cumulativeInterestForDays[99] = 2064;\n', '        cumulativeInterestForDays[100] = 2108;\n', '        cumulativeInterestForDays[101] = 2153;\n', '        cumulativeInterestForDays[102] = 2199;\n', '        cumulativeInterestForDays[103] = 2245;\n', '        cumulativeInterestForDays[104] = 2292;\n', '        cumulativeInterestForDays[105] = 2339;\n', '        cumulativeInterestForDays[106] = 2387;\n', '        cumulativeInterestForDays[107] = 2435;\n', '        cumulativeInterestForDays[108] = 2484;\n', '        cumulativeInterestForDays[109] = 2533;\n', '        cumulativeInterestForDays[110] = 2583;\n', '        cumulativeInterestForDays[111] = 2633;\n', '        cumulativeInterestForDays[112] = 2684;\n', '        cumulativeInterestForDays[113] = 2736;\n', '        cumulativeInterestForDays[114] = 2788;\n', '        cumulativeInterestForDays[115] = 2841;\n', '        cumulativeInterestForDays[116] = 2894;\n', '        cumulativeInterestForDays[117] = 2948;\n', '        cumulativeInterestForDays[118] = 3002;\n', '        cumulativeInterestForDays[119] = 3057;\n', '        cumulativeInterestForDays[120] = 3113;\n', '        cumulativeInterestForDays[121] = 3169;\n', '        cumulativeInterestForDays[122] = 3226;\n', '        cumulativeInterestForDays[123] = 3283;\n', '        cumulativeInterestForDays[124] = 3341;\n', '        cumulativeInterestForDays[125] = 3399;\n', '        cumulativeInterestForDays[126] = 3458;\n', '        cumulativeInterestForDays[127] = 3518;\n', '        cumulativeInterestForDays[128] = 3578;\n', '        cumulativeInterestForDays[129] = 3639;\n', '        cumulativeInterestForDays[130] = 3700;\n', '        cumulativeInterestForDays[131] = 3762;\n', '        cumulativeInterestForDays[132] = 3825;\n', '        cumulativeInterestForDays[133] = 3888;\n', '        cumulativeInterestForDays[134] = 3952;\n', '        cumulativeInterestForDays[135] = 4016;\n', '        cumulativeInterestForDays[136] = 4081;\n', '        cumulativeInterestForDays[137] = 4147;\n', '        cumulativeInterestForDays[138] = 4213;\n', '        cumulativeInterestForDays[139] = 4280;\n', '        cumulativeInterestForDays[140] = 4347;\n', '        cumulativeInterestForDays[141] = 4415;\n', '        cumulativeInterestForDays[142] = 4484;\n', '        cumulativeInterestForDays[143] = 4553;\n', '        cumulativeInterestForDays[144] = 4623;\n', '        cumulativeInterestForDays[145] = 4694;\n', '        cumulativeInterestForDays[146] = 4765;\n', '        cumulativeInterestForDays[147] = 4837;\n', '        cumulativeInterestForDays[148] = 4909;\n', '        cumulativeInterestForDays[149] = 4982;\n', '        cumulativeInterestForDays[150] = 5056;\n', '        cumulativeInterestForDays[151] = 5130;\n', '        cumulativeInterestForDays[152] = 5205;\n', '        cumulativeInterestForDays[153] = 5281;\n', '        cumulativeInterestForDays[154] = 5357;\n', '        cumulativeInterestForDays[155] = 5434;\n', '        cumulativeInterestForDays[156] = 5512;\n', '        cumulativeInterestForDays[157] = 5590;\n', '        cumulativeInterestForDays[158] = 5669;\n', '        cumulativeInterestForDays[159] = 5749;\n', '        cumulativeInterestForDays[160] = 5829;\n', '        cumulativeInterestForDays[161] = 5910;\n', '        cumulativeInterestForDays[162] = 5992;\n', '        cumulativeInterestForDays[163] = 6074;\n', '        cumulativeInterestForDays[164] = 6157;\n', '        cumulativeInterestForDays[165] = 6241;\n', '        cumulativeInterestForDays[166] = 6325;\n', '        cumulativeInterestForDays[167] = 6410;\n', '        cumulativeInterestForDays[168] = 6496;\n', '        cumulativeInterestForDays[169] = 6582;\n', '        cumulativeInterestForDays[170] = 6669;\n', '        cumulativeInterestForDays[171] = 6757;\n', '        cumulativeInterestForDays[172] = 6845;\n', '        cumulativeInterestForDays[173] = 6934;\n', '        cumulativeInterestForDays[174] = 7024;\n', '        cumulativeInterestForDays[175] = 7114;\n', '        cumulativeInterestForDays[176] = 7205;\n', '        cumulativeInterestForDays[177] = 7297;\n', '        cumulativeInterestForDays[178] = 7390;\n', '        cumulativeInterestForDays[179] = 7483;\n', '        cumulativeInterestForDays[180] = 7577;\n', '        cumulativeInterestForDays[181] = 7672;\n', '        cumulativeInterestForDays[182] = 7767;\n', '        cumulativeInterestForDays[183] = 7863;\n', '        cumulativeInterestForDays[184] = 7960;\n', '        cumulativeInterestForDays[185] = 8058;\n', '        cumulativeInterestForDays[186] = 8156;\n', '        cumulativeInterestForDays[187] = 8255;\n', '        cumulativeInterestForDays[188] = 8355;\n', '        cumulativeInterestForDays[189] = 8455;\n', '        cumulativeInterestForDays[190] = 8556;\n', '        cumulativeInterestForDays[191] = 8658;\n', '        cumulativeInterestForDays[192] = 8761;\n', '        cumulativeInterestForDays[193] = 8864;\n', '        cumulativeInterestForDays[194] = 8968;\n', '        cumulativeInterestForDays[195] = 9073;\n', '        cumulativeInterestForDays[196] = 9179;\n', '        cumulativeInterestForDays[197] = 9285;\n', '        cumulativeInterestForDays[198] = 9392;\n', '        cumulativeInterestForDays[199] = 9500;\n', '        cumulativeInterestForDays[200] = 9609;\n', '        cumulativeInterestForDays[201] = 9719;\n', '        cumulativeInterestForDays[202] = 9829;\n', '        cumulativeInterestForDays[203] = 9940;\n', '        cumulativeInterestForDays[204] = 10052;\n', '        cumulativeInterestForDays[205] = 10165;\n', '        cumulativeInterestForDays[206] = 10278;\n', '        cumulativeInterestForDays[207] = 10392;\n', '        cumulativeInterestForDays[208] = 10507;\n', '        cumulativeInterestForDays[209] = 10623;\n', '        cumulativeInterestForDays[210] = 10740;\n', '        cumulativeInterestForDays[211] = 10857;\n', '        cumulativeInterestForDays[212] = 10975;\n', '        cumulativeInterestForDays[213] = 11094;\n', '        cumulativeInterestForDays[214] = 11214;\n', '        cumulativeInterestForDays[215] = 11335;\n', '        cumulativeInterestForDays[216] = 11456;\n', '        cumulativeInterestForDays[217] = 11578;\n', '        cumulativeInterestForDays[218] = 11701;\n', '        cumulativeInterestForDays[219] = 11825;\n', '        cumulativeInterestForDays[220] = 11950;\n', '        cumulativeInterestForDays[221] = 12076;\n', '        cumulativeInterestForDays[222] = 12202;\n', '        cumulativeInterestForDays[223] = 12329;\n', '        cumulativeInterestForDays[224] = 12457;\n', '        cumulativeInterestForDays[225] = 12586;\n', '        cumulativeInterestForDays[226] = 12716;\n', '        cumulativeInterestForDays[227] = 12847;\n', '        cumulativeInterestForDays[228] = 12978;\n', '        cumulativeInterestForDays[229] = 13110;\n', '        cumulativeInterestForDays[230] = 13243;\n', '        cumulativeInterestForDays[231] = 13377;\n', '        cumulativeInterestForDays[232] = 13512;\n', '        cumulativeInterestForDays[233] = 13648;\n', '        cumulativeInterestForDays[234] = 13785;\n', '        cumulativeInterestForDays[235] = 13922;\n', '        cumulativeInterestForDays[236] = 14060;\n', '        cumulativeInterestForDays[237] = 14199;\n', '        cumulativeInterestForDays[238] = 14339;\n', '        cumulativeInterestForDays[239] = 14480;\n', '        cumulativeInterestForDays[240] = 14622;\n', '        cumulativeInterestForDays[241] = 14765;\n', '        cumulativeInterestForDays[242] = 14909;\n', '        cumulativeInterestForDays[243] = 15054;\n', '        cumulativeInterestForDays[244] = 15199;\n', '        cumulativeInterestForDays[245] = 15345;\n', '        cumulativeInterestForDays[246] = 15492;\n', '        cumulativeInterestForDays[247] = 15640;\n', '        cumulativeInterestForDays[248] = 15789;\n', '        cumulativeInterestForDays[249] = 15939;\n', '        cumulativeInterestForDays[250] = 16090;\n', '        cumulativeInterestForDays[251] = 16242;\n', '        cumulativeInterestForDays[252] = 16395;\n', '        cumulativeInterestForDays[253] = 16549;\n', '        cumulativeInterestForDays[254] = 16704;\n', '        cumulativeInterestForDays[255] = 16860;\n', '        cumulativeInterestForDays[256] = 17017;\n', '        cumulativeInterestForDays[257] = 17174;\n', '        cumulativeInterestForDays[258] = 17332;\n', '        cumulativeInterestForDays[259] = 17491;\n', '        cumulativeInterestForDays[260] = 17651;\n', '        cumulativeInterestForDays[261] = 17812;\n', '        cumulativeInterestForDays[262] = 17974;\n', '        cumulativeInterestForDays[263] = 18137;\n', '        cumulativeInterestForDays[264] = 18301;\n', '        cumulativeInterestForDays[265] = 18466;\n', '        cumulativeInterestForDays[266] = 18632;\n', '        cumulativeInterestForDays[267] = 18799;\n', '        cumulativeInterestForDays[268] = 18967;\n', '        cumulativeInterestForDays[269] = 19136;\n', '        cumulativeInterestForDays[270] = 19306;\n', '        cumulativeInterestForDays[271] = 19477;\n', '        cumulativeInterestForDays[272] = 19649;\n', '        cumulativeInterestForDays[273] = 19822;\n', '        cumulativeInterestForDays[274] = 19996;\n', '        cumulativeInterestForDays[275] = 20171;\n', '        cumulativeInterestForDays[276] = 20347;\n', '        cumulativeInterestForDays[277] = 20524;\n', '        cumulativeInterestForDays[278] = 20702;\n', '        cumulativeInterestForDays[279] = 20881;\n', '        cumulativeInterestForDays[280] = 21061;\n', '        cumulativeInterestForDays[281] = 21242;\n', '        cumulativeInterestForDays[282] = 21424;\n', '        cumulativeInterestForDays[283] = 21607;\n', '        cumulativeInterestForDays[284] = 21791;\n', '        cumulativeInterestForDays[285] = 21976;\n', '        cumulativeInterestForDays[286] = 22162;\n', '        cumulativeInterestForDays[287] = 22350;\n', '        cumulativeInterestForDays[288] = 22539;\n', '        cumulativeInterestForDays[289] = 22729;\n', '        cumulativeInterestForDays[290] = 22920;\n', '        cumulativeInterestForDays[291] = 23112;\n', '        cumulativeInterestForDays[292] = 23305;\n', '        cumulativeInterestForDays[293] = 23499;\n', '        cumulativeInterestForDays[294] = 23694;\n', '        cumulativeInterestForDays[295] = 23890;\n', '        cumulativeInterestForDays[296] = 24087;\n', '        cumulativeInterestForDays[297] = 24285;\n', '        cumulativeInterestForDays[298] = 24484;\n', '        cumulativeInterestForDays[299] = 24685;\n', '        cumulativeInterestForDays[300] = 24887;\n', '        cumulativeInterestForDays[301] = 25090;\n', '        cumulativeInterestForDays[302] = 25294;\n', '        cumulativeInterestForDays[303] = 25499;\n', '        cumulativeInterestForDays[304] = 25705;\n', '        cumulativeInterestForDays[305] = 25912;\n', '        cumulativeInterestForDays[306] = 26120;\n', '        cumulativeInterestForDays[307] = 26330;\n', '        cumulativeInterestForDays[308] = 26541;\n', '        cumulativeInterestForDays[309] = 26753;\n', '        cumulativeInterestForDays[310] = 26966;\n', '        cumulativeInterestForDays[311] = 27180;\n', '        cumulativeInterestForDays[312] = 27395;\n', '        cumulativeInterestForDays[313] = 27611;\n', '        cumulativeInterestForDays[314] = 27829;\n', '        cumulativeInterestForDays[315] = 28048;\n', '        cumulativeInterestForDays[316] = 28268;\n', '        cumulativeInterestForDays[317] = 28489;\n', '        cumulativeInterestForDays[318] = 28711;\n', '        cumulativeInterestForDays[319] = 28934;\n', '        cumulativeInterestForDays[320] = 29159;\n', '        cumulativeInterestForDays[321] = 29385;\n', '        cumulativeInterestForDays[322] = 29612;\n', '        cumulativeInterestForDays[323] = 29840;\n', '        cumulativeInterestForDays[324] = 30069;\n', '        cumulativeInterestForDays[325] = 30300;\n', '        cumulativeInterestForDays[326] = 30532;\n', '        cumulativeInterestForDays[327] = 30765;\n', '        cumulativeInterestForDays[328] = 30999;\n', '        cumulativeInterestForDays[329] = 31235;\n', '        cumulativeInterestForDays[330] = 31472;\n', '        cumulativeInterestForDays[331] = 31710;\n', '        cumulativeInterestForDays[332] = 31949;\n', '        cumulativeInterestForDays[333] = 32190;\n', '        cumulativeInterestForDays[334] = 32432;\n', '        cumulativeInterestForDays[335] = 32675;\n', '        cumulativeInterestForDays[336] = 32919;\n', '        cumulativeInterestForDays[337] = 33165;\n', '        cumulativeInterestForDays[338] = 33412;\n', '        cumulativeInterestForDays[339] = 33660;\n', '        cumulativeInterestForDays[340] = 33909;\n', '        cumulativeInterestForDays[341] = 34160;\n', '        cumulativeInterestForDays[342] = 34412;\n', '        cumulativeInterestForDays[343] = 34665;\n', '        cumulativeInterestForDays[344] = 34920;\n', '        cumulativeInterestForDays[345] = 35176;\n', '        cumulativeInterestForDays[346] = 35433;\n', '        cumulativeInterestForDays[347] = 35692;\n', '        cumulativeInterestForDays[348] = 35952;\n', '        cumulativeInterestForDays[349] = 36213;\n', '        cumulativeInterestForDays[350] = 36476;\n', '        cumulativeInterestForDays[351] = 36740;\n', '        cumulativeInterestForDays[352] = 37005;\n', '        cumulativeInterestForDays[353] = 37272;\n', '        cumulativeInterestForDays[354] = 37540;\n', '        cumulativeInterestForDays[355] = 37809;\n', '        cumulativeInterestForDays[356] = 38080;\n', '        cumulativeInterestForDays[357] = 38352;\n', '        cumulativeInterestForDays[358] = 38625;\n', '        cumulativeInterestForDays[359] = 38900;\n', '        cumulativeInterestForDays[360] = 39176;\n', '        cumulativeInterestForDays[361] = 39454;\n', '        cumulativeInterestForDays[362] = 39733;\n', '        cumulativeInterestForDays[363] = 40013;\n', '        cumulativeInterestForDays[364] = 40295;\n', '        cumulativeInterestForDays[365] = 40578;\n', '\n', '        return cumulativeInterestForDays;\n', '    }\n', '\n', '    function _getInterestTillDays(uint _day) internal pure returns(uint) {\n', '        require(_day <= MAX_DAYS);\n', '\n', '        return _initCumulativeInterestForDays()[_day];\n', '    }\n', '}\n', '\n', '// File: contracts/Events.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract Events {\n', '    event Deposit(address user, uint amount, uint8 stakeId, address uplinkAddress, uint uplinkStakeId);\n', '    event Withdrawn(address user, uint amount);\n', '    event ReInvest(address user, uint amount);\n', '    event Exited(address user, uint stakeId, uint amount);\n', '    event PoolDrawn(uint refPoolAmount, uint sponsorPoolAmount);\n', '}\n', '\n', '// File: contracts/PercentageCalculator.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'contract PercentageCalculator {\n', '    using SafeMath for uint;\n', '\n', '    uint public constant PERCENT_MULTIPLIER = 10000;\n', '\n', '    function _calcPercentage(uint amount, uint basisPoints) internal pure returns (uint) {\n', '        require(basisPoints >= 0);\n', '        return amount.mul(basisPoints).div(PERCENT_MULTIPLIER);\n', '    }\n', '\n', '    function _calcBasisPoints(uint base, uint interest) internal pure returns (uint) {\n', '        return interest.mul(PERCENT_MULTIPLIER).div(base);\n', '    }\n', '}\n', '\n', '// File: contracts/utils/Utils.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'contract Utils {\n', '    using SafeMath for uint;\n', '\n', '    uint public constant DAY = 86400; // Seconds in a day\n', '\n', '    function _calcDays(uint start, uint end) internal pure returns (uint) {\n', '        return end.sub(start).div(DAY);\n', '    }\n', '}\n', '\n', '// File: contracts/Constants.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract Constants {\n', '    uint public constant MAX_CONTRACT_REWARD_BP = 37455; // 374.55%\n', '\n', '    uint public constant LP_FEE_BP = 500; // 5%\n', '    uint public constant REF_COMMISSION_BP = 800; // 8%\n', '\n', '    // Ref and sponsor pools\n', '    uint public constant REF_POOL_FEE_BP = 50; // 0.5%, goes to ref pool from each deposit\n', '    uint public constant SPONSOR_POOL_FEE_BP = 50; // 0.5%, goes to sponsor pool from each deposit\n', '\n', "    uint public constant EXIT_PENALTY_BP = 5000; // 50%, deduct from user's initial deposit on exit\n", '\n', '    // Contract bonus\n', '    uint public constant MAX_CONTRACT_BONUS_BP = 300; // maximum bonus a user can get 3%\n', '    uint public constant CONTRACT_BONUS_UNIT = 250;    // For each 250 token balance of contract, gives\n', '    uint public constant CONTRACT_BONUS_PER_UNIT_BP = 1; // 0.01% extra interest\n', '\n', '    // Hold bonus\n', '    uint public constant MAX_HOLD_BONUS_BP = 100; // Maximum 1% hold bonus\n', '    uint public constant HOLD_BONUS_UNIT = 43200; // 12 hours\n', '    uint public constant HOLD_BONUS_PER_UNIT_BP = 2; // 0.02% hold bonus for each 12 hours of hold\n', '\n', '    uint public constant REWARD_THRESHOLD_BP = 300; // User will only get hold bonus if his rewards are more then 3% of his deposit\n', '\n', '    uint public constant MAX_WITHDRAWAL_OVER_REWARD_THRESHOLD_BP = 300; // Max daily withdrawal limit if user is above REWARD_THRESHOLD_BP\n', '\n', '    uint public constant DEV_FEE_BP = 500; // 5%\n', '}\n', '\n', '// File: contracts/StatsVars.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract StatsVars {\n', '    // Stats\n', '    uint public totalDepositRewards;\n', '    uint public totalExited;\n', '}\n', '\n', '// File: contracts/SharedVariables.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SharedVariables is Constants, StatsVars, Events, PercentageCalculator, InterestCalculator, Utils {\n', '\n', '    uint public constant fourRXTokenDecimals = 8;\n', '    IERC20 public fourRXToken;\n', '    address public devAddress;\n', '\n', '    struct Stake {\n', '        uint8 id;\n', '        bool active;\n', '        bool optInInsured; // Is insured ???\n', '\n', '        uint32 holdFrom; // Timestamp from which hold should be counted\n', '        uint32 interestCountFrom; // TimeStamp from which interest should be counted, from the beginning\n', "        uint32 lastWithdrawalAt; // date time of last withdrawals so we don't allow more then 3% a day\n", '\n', '        uint origDeposit;\n', '        uint deposit; // Initial Deposit\n', '        uint withdrawn; // Total withdrawn from this stake\n', '        uint penalty; // Total penalty on this stale\n', '\n', '        uint rewards;\n', '    }\n', '\n', '    struct User {\n', '        address wallet; // Wallet Address\n', '        Stake[] stakes;\n', '    }\n', '\n', '    mapping (address => User) public users;\n', '\n', '    uint[] public refPoolBonuses;\n', '    uint[] public sponsorPoolBonuses;\n', '\n', '    uint public maxContractBalance;\n', '\n', '    uint16 public poolCycle;\n', '    uint32 public poolDrewAt;\n', '\n', '    uint public refPoolBalance;\n', '    uint public sponsorPoolBalance;\n', '\n', '    uint public devBalance;\n', '}\n', '\n', '// File: contracts/libs/SortedLinkedList.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'library SortedLinkedList {\n', '    using SafeMath for uint;\n', '\n', '    struct Item {\n', '        address user;\n', '        uint16 next;\n', '        uint8 id;\n', '        uint score;\n', '    }\n', '\n', '    uint16 internal constant GUARD = 0;\n', '\n', '    function addNode(Item[] storage items, address user, uint score, uint8 id) internal {\n', '        uint16 prev = findSortedIndex(items, score);\n', '        require(_verifyIndex(items, score, prev));\n', '        items.push(Item(user, items[prev].next, id, score));\n', '        items[prev].next = uint16(items.length.sub(1));\n', '    }\n', '\n', '    function updateNode(Item[] storage items, address user, uint score, uint8 id) internal {\n', '        (uint16 current, uint16 oldPrev) = findCurrentAndPrevIndex(items, user, id);\n', '        require(items[oldPrev].next == current);\n', '        require(items[current].user == user);\n', '        require(items[current].id == id);\n', '        score = score.add(items[current].score);\n', '        items[oldPrev].next = items[current].next;\n', '        addNode(items, user, score, id);\n', '    }\n', '\n', '    function initNodes(Item[] storage items) internal {\n', '        items.push(Item(address(0), 0, 0, 0));\n', '    }\n', '\n', '    function _verifyIndex(Item[] storage items, uint score, uint16 prev) internal view returns (bool) {\n', '        return prev == GUARD || (score <= items[prev].score && score > items[items[prev].next].score);\n', '    }\n', '\n', '    function findSortedIndex(Item[] storage items, uint score) internal view returns(uint16) {\n', '        Item memory current = items[GUARD];\n', '        uint16 index = GUARD;\n', '        while(current.next != GUARD && items[current.next].score >= score) {\n', '            index = current.next;\n', '            current = items[current.next];\n', '        }\n', '\n', '        return index;\n', '    }\n', '\n', '    function findCurrentAndPrevIndex(Item[] storage items, address user, uint8 id) internal view returns (uint16, uint16) {\n', '        Item memory current = items[GUARD];\n', '        uint16 currentIndex = GUARD;\n', '        uint16 prevIndex = GUARD;\n', '        while(current.next != GUARD && !(current.user == user && current.id == id)) {\n', '            prevIndex = currentIndex;\n', '            currentIndex = current.next;\n', '            current = items[current.next];\n', '        }\n', '\n', '        return (currentIndex, prevIndex);\n', '    }\n', '\n', '    function isInList(Item[] storage items, address user, uint8 id) internal view returns (bool) {\n', '        Item memory current = items[GUARD];\n', '        bool exists = false;\n', '\n', '        while(current.next != GUARD ) {\n', '            if (current.user == user && current.id == id) {\n', '                exists = true;\n', '                break;\n', '            }\n', '            current = items[current.next];\n', '        }\n', '\n', '        return exists;\n', '    }\n', '}\n', '\n', '// File: contracts/Pools/SponsorPool.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract SponsorPool {\n', '    SortedLinkedList.Item[] public sponsorPoolUsers;\n', '\n', '    function _addSponsorPoolRecord(address user, uint amount, uint8 stakeId) internal {\n', '        SortedLinkedList.addNode(sponsorPoolUsers, user, amount, stakeId);\n', '    }\n', '\n', '    function _cleanSponsorPoolUsers() internal {\n', '        delete sponsorPoolUsers;\n', '        SortedLinkedList.initNodes(sponsorPoolUsers);\n', '    }\n', '}\n', '\n', '// File: contracts/Pools/ReferralPool.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'contract ReferralPool {\n', '\n', '    SortedLinkedList.Item[] public refPoolUsers;\n', '\n', '    function _addReferralPoolRecord(address user, uint amount, uint8 stakeId) internal {\n', '        if (!SortedLinkedList.isInList(refPoolUsers, user, stakeId)) {\n', '            SortedLinkedList.addNode(refPoolUsers, user, amount, stakeId);\n', '        } else {\n', '            SortedLinkedList.updateNode(refPoolUsers, user, amount, stakeId);\n', '        }\n', '    }\n', '\n', '    function _cleanReferralPoolUsers() internal {\n', '        delete refPoolUsers;\n', '        SortedLinkedList.initNodes(refPoolUsers);\n', '    }\n', '}\n', '\n', '// File: contracts/Pools.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Pools is SponsorPool, ReferralPool, SharedVariables {\n', '\n', '    uint8 public constant MAX_REF_POOL_USERS = 12;\n', '    uint8 public constant MAX_SPONSOR_POOL_USERS = 10;\n', '\n', '    function _resetPools() internal {\n', '        _cleanSponsorPoolUsers();\n', '        _cleanReferralPoolUsers();\n', '        delete refPoolBalance;\n', '        delete sponsorPoolBalance;\n', '        poolDrewAt = uint32(block.timestamp);\n', '        poolCycle++;\n', '    }\n', '\n', '    function _updateSponsorPoolUsers(User memory user, Stake memory stake) internal {\n', '        _addSponsorPoolRecord(user.wallet, stake.deposit, stake.id);\n', '    }\n', '\n', '    // Reorganise top ref-pool users to draw pool for\n', '    function _updateRefPoolUsers(User memory uplinkUser , Stake memory stake, uint8 uplinkUserStakeId) internal {\n', '        _addReferralPoolRecord(uplinkUser.wallet, stake.deposit, uplinkUserStakeId);\n', '    }\n', '\n', '    function drawPool() public {\n', '        if (block.timestamp > poolDrewAt + 1 days) {\n', '\n', '            SortedLinkedList.Item memory current = refPoolUsers[0];\n', '            uint16 i = 0;\n', '\n', '            while (i < MAX_REF_POOL_USERS && current.next != SortedLinkedList.GUARD) {\n', '                current = refPoolUsers[current.next];\n', '                users[current.user].stakes[current.id].rewards = users[current.user].stakes[current.id].rewards.add(_calcPercentage(refPoolBalance, refPoolBonuses[i]));\n', '                i++;\n', '            }\n', '\n', '            current = sponsorPoolUsers[0];\n', '            i = 0;\n', '\n', '            while (i < MAX_SPONSOR_POOL_USERS && current.next != SortedLinkedList.GUARD) {\n', '                current = sponsorPoolUsers[current.next];\n', '                users[current.user].stakes[current.id].rewards = users[current.user].stakes[current.id].rewards.add(_calcPercentage(sponsorPoolBalance, sponsorPoolBonuses[i]));\n', '                i++;\n', '            }\n', '\n', '            emit PoolDrawn(refPoolBalance, sponsorPoolBalance);\n', '\n', '            _resetPools();\n', '        }\n', '    }\n', '\n', '    // pool info getters\n', '\n', '    function getPoolInfo() external view returns (uint32, uint16, uint, uint) {\n', '        return (poolDrewAt, poolCycle, sponsorPoolBalance, refPoolBalance);\n', '    }\n', '\n', '    function getPoolParticipants() external view returns (address[] memory, uint8[] memory, uint[] memory, address[] memory, uint8[] memory, uint[] memory) {\n', '        address[] memory sponsorPoolUsersAddresses = new address[](MAX_SPONSOR_POOL_USERS);\n', '        uint8[] memory sponsorPoolUsersStakeIds = new uint8[](MAX_SPONSOR_POOL_USERS);\n', '        uint[] memory sponsorPoolUsersAmounts = new uint[](MAX_SPONSOR_POOL_USERS);\n', '\n', '        address[] memory refPoolUsersAddresses = new address[](MAX_REF_POOL_USERS);\n', '        uint8[] memory refPoolUsersStakeIds = new uint8[](MAX_REF_POOL_USERS);\n', '        uint[] memory refPoolUsersAmounts = new uint[](MAX_REF_POOL_USERS);\n', '\n', '        uint16 i = 0;\n', '        SortedLinkedList.Item memory current = sponsorPoolUsers[i];\n', '\n', '        while (i < MAX_SPONSOR_POOL_USERS && current.next != SortedLinkedList.GUARD) {\n', '            current = sponsorPoolUsers[current.next];\n', '            sponsorPoolUsersAddresses[i] = current.user;\n', '            sponsorPoolUsersStakeIds[i] = current.id;\n', '            sponsorPoolUsersAmounts[i] = current.score;\n', '            i++;\n', '        }\n', '\n', '        i = 0;\n', '        current = refPoolUsers[i];\n', '\n', '        while (i < MAX_REF_POOL_USERS && current.next != SortedLinkedList.GUARD) {\n', '            current = refPoolUsers[current.next];\n', '            refPoolUsersAddresses[i] = current.user;\n', '            refPoolUsersStakeIds[i] = current.id;\n', '            refPoolUsersAmounts[i] = current.score;\n', '            i++;\n', '        }\n', '\n', '        return (sponsorPoolUsersAddresses, sponsorPoolUsersStakeIds, sponsorPoolUsersAmounts, refPoolUsersAddresses, refPoolUsersStakeIds, refPoolUsersAmounts);\n', '    }\n', '}\n', '\n', '// File: contracts/RewardsAndPenalties.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', 'contract RewardsAndPenalties is Pools {\n', '    using SafeMath for uint;\n', '\n', '    function _distributeReferralReward(uint amount, Stake memory stake, address uplinkAddress, uint8 uplinkStakeId) internal {\n', '        User storage uplinkUser = users[uplinkAddress];\n', '\n', '        uint commission = _calcPercentage(amount, REF_COMMISSION_BP);\n', '\n', '        uplinkUser.stakes[uplinkStakeId].rewards = uplinkUser.stakes[uplinkStakeId].rewards.add(commission);\n', '\n', '        _updateRefPoolUsers(uplinkUser, stake, uplinkStakeId);\n', '    }\n', '\n', '    function _calcDepositRewards(uint amount) internal pure returns (uint) {\n', '        uint rewardPercent = 0;\n', '\n', '        if (amount > 175 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 50; // 0.5%\n', '        } else if (amount > 150 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 40; // 0.4%\n', '        } else if (amount > 135 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 35; // 0.35%\n', '        } else if (amount > 119 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 30; // 0.3%\n', '        } else if (amount > 100 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 25; // 0.25%\n', '        } else if (amount > 89 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 20; // 0.2%\n', '        } else if (amount > 75 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 15; // 0.15%\n', '        } else if (amount > 59 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 10; // 0.1%\n', '        } else if (amount > 45 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 5; // 0.05%\n', '        } else if (amount > 20 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 2; // 0.02%\n', '        } else if (amount > 9 * (10**fourRXTokenDecimals)) {\n', '            rewardPercent = 1; // 0.01%\n', '        }\n', '\n', '        return _calcPercentage(amount, rewardPercent);\n', '    }\n', '\n', '    function _calcContractBonus(Stake memory stake) internal view returns (uint) {\n', '        uint contractBonusPercent = fourRXToken.balanceOf(address(this)).mul(CONTRACT_BONUS_PER_UNIT_BP).div(CONTRACT_BONUS_UNIT).div(10**fourRXTokenDecimals);\n', '\n', '        if (contractBonusPercent > MAX_CONTRACT_BONUS_BP) {\n', '            contractBonusPercent = MAX_CONTRACT_BONUS_BP;\n', '        }\n', '\n', '        return _calcPercentage(stake.deposit, contractBonusPercent);\n', '    }\n', '\n', '    function _calcHoldRewards(Stake memory stake) internal view returns (uint) {\n', '        uint holdBonusPercent = (block.timestamp).sub(stake.holdFrom).div(HOLD_BONUS_UNIT).mul(HOLD_BONUS_PER_UNIT_BP);\n', '\n', '        if (holdBonusPercent > MAX_HOLD_BONUS_BP) {\n', '            holdBonusPercent = MAX_HOLD_BONUS_BP;\n', '        }\n', '\n', '        return _calcPercentage(stake.deposit, holdBonusPercent);\n', '    }\n', '\n', '    function _calcRewardsWithoutHoldBonus(Stake memory stake) internal view returns (uint) {\n', '        uint interest = _calcPercentage(stake.deposit, _getInterestTillDays(_calcDays(stake.interestCountFrom, block.timestamp)));\n', '\n', '        uint contractBonus = _calcContractBonus(stake);\n', '\n', '        uint totalRewardsWithoutHoldBonus = stake.rewards.add(interest).add(contractBonus);\n', '\n', '        return totalRewardsWithoutHoldBonus;\n', '    }\n', '\n', '    function _calcRewards(Stake memory stake) internal view returns (uint) {\n', '        uint rewards = _calcRewardsWithoutHoldBonus(stake);\n', '\n', '        if (_calcBasisPoints(stake.deposit, rewards) >= REWARD_THRESHOLD_BP) {\n', '            rewards = rewards.add(_calcHoldRewards(stake));\n', '        }\n', '\n', '        uint maxRewards = _calcPercentage(stake.deposit, MAX_CONTRACT_REWARD_BP);\n', '\n', '        if (rewards > maxRewards) {\n', '            rewards = maxRewards;\n', '        }\n', '\n', '        return rewards;\n', '    }\n', '\n', '    function _calcPenalty(Stake memory stake, uint withdrawalAmount) internal pure returns (uint) {\n', '        uint basisPoints = _calcBasisPoints(stake.deposit, withdrawalAmount);\n', "        // If user's rewards are more then REWARD_THRESHOLD_BP -- No penalty\n", '        if (basisPoints >= REWARD_THRESHOLD_BP) {\n', '            return 0;\n', '        }\n', '\n', '        return _calcPercentage(withdrawalAmount, PERCENT_MULTIPLIER.sub(basisPoints.mul(PERCENT_MULTIPLIER).div(REWARD_THRESHOLD_BP)));\n', '    }\n', '}\n', '\n', '// File: contracts/Insurance.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', 'contract Insurance is RewardsAndPenalties {\n', '    uint private constant BASE_INSURANCE_FOR_BP = 3500; // trigger insurance with contract balance fall below 35%\n', '    uint private constant OPT_IN_INSURANCE_FEE_BP = 1000; // 10%\n', '    uint private constant OPT_IN_INSURANCE_FOR_BP = 10000; // 100%\n', '\n', '    bool public isInInsuranceState = false; // if contract is only allowing insured money this becomes true;\n', '\n', '    function _checkForBaseInsuranceTrigger() internal {\n', '        if (fourRXToken.balanceOf(address(this)) <= _calcPercentage(maxContractBalance, BASE_INSURANCE_FOR_BP)) {\n', '            isInInsuranceState = true;\n', '        } else {\n', '            isInInsuranceState = false;\n', '        }\n', '    }\n', '\n', '    function _getInsuredAvailableAmount(Stake memory stake, uint withdrawalAmount) internal pure returns (uint)\n', '    {\n', '        uint availableAmount = withdrawalAmount;\n', '        // Calc correct insured value by checking which insurance should be applied\n', '        uint insuredFor = BASE_INSURANCE_FOR_BP;\n', '        if (stake.optInInsured) {\n', '            insuredFor = OPT_IN_INSURANCE_FOR_BP;\n', '        }\n', '\n', '        uint maxWithdrawalAllowed = _calcPercentage(stake.deposit, insuredFor);\n', '\n', '        require(maxWithdrawalAllowed >= stake.withdrawn.add(stake.penalty)); // if contract is in insurance trigger, do not allow withdrawals for the users who already have withdrawn more then 35%\n', '\n', '        if (stake.withdrawn.add(availableAmount).add(stake.penalty) > maxWithdrawalAllowed) {\n', '            availableAmount = maxWithdrawalAllowed.sub(stake.withdrawn).sub(stake.penalty);\n', '        }\n', '\n', '        return availableAmount;\n', '    }\n', '\n', '    function _insureStake(address user, Stake storage stake) internal {\n', '        require(!stake.optInInsured && stake.active);\n', '        require(fourRXToken.transferFrom(user, address(this), _calcPercentage(stake.deposit, OPT_IN_INSURANCE_FEE_BP)));\n', '\n', '        stake.optInInsured = true;\n', '    }\n', '}\n', '\n', '// File: contracts/FourRXFinance.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '/// @title 4RX Finance Staking DAPP Contract\n', '/// @notice Available functionality: Deposit, Withdraw, ExitProgram, Insure Stake\n', 'contract FourRXFinance is Insurance {\n', '\n', '    constructor(address _devAddress, address fourRXTokenAddress) public {\n', '        devAddress = _devAddress;\n', '        fourRXToken = IERC20(fourRXTokenAddress);\n', '\n', '        // Ref Bonus // 12 Max Participants\n', '        refPoolBonuses.push(2000); // 20%\n', '        refPoolBonuses.push(1700); // 17%\n', '        refPoolBonuses.push(1400); // 14%\n', '        refPoolBonuses.push(1100); // 11%\n', '        refPoolBonuses.push(1000); // 10%\n', '        refPoolBonuses.push(700); // 7%\n', '        refPoolBonuses.push(600); // 6%\n', '        refPoolBonuses.push(500); // 5%\n', '        refPoolBonuses.push(400); // 4%\n', '        refPoolBonuses.push(300); // 3%\n', '        refPoolBonuses.push(200); // 2%\n', '        refPoolBonuses.push(100); // 1%\n', '\n', '        // Sponsor Pool // 10 Max Participants\n', '        sponsorPoolBonuses.push(3000); // 30%\n', '        sponsorPoolBonuses.push(2000); // 20%\n', '        sponsorPoolBonuses.push(1200); // 12%\n', '        sponsorPoolBonuses.push(1000); // 10%\n', '        sponsorPoolBonuses.push(800); // 8%\n', '        sponsorPoolBonuses.push(700); // 7%\n', '        sponsorPoolBonuses.push(600); // 6%\n', '        sponsorPoolBonuses.push(400); // 4%\n', '        sponsorPoolBonuses.push(200); // 2%\n', '        sponsorPoolBonuses.push(100); // 1%\n', '\n', '        _resetPools();\n', '\n', '        poolCycle = 0;\n', '    }\n', '\n', '    function deposit(uint amount, address uplinkAddress, uint8 uplinkStakeId) external {\n', '        require(\n', '            uplinkAddress == address(0) ||\n', '            (users[uplinkAddress].wallet != address(0) && users[uplinkAddress].stakes[uplinkStakeId].active)\n', '        ); // Either uplink must be registered and be a active deposit or 0 address\n', '\n', '        User storage user = users[msg.sender];\n', '\n', '        if (users[msg.sender].stakes.length > 0) {\n', '            require(amount >= users[msg.sender].stakes[user.stakes.length - 1].deposit.mul(2)); // deposit amount must be greater 2x then last deposit\n', '        }\n', '\n', '        require(fourRXToken.transferFrom(msg.sender, address(this), amount));\n', '\n', "        drawPool(); // Draw old pool if qualified, and we're pretty sure that this stake is going to be created\n", '\n', '        uint depositReward = _calcDepositRewards(amount);\n', '\n', '        Stake memory stake;\n', '\n', '        user.wallet = msg.sender;\n', '\n', '        stake.id = uint8(user.stakes.length);\n', '        stake.active = true;\n', '        stake.interestCountFrom = uint32(block.timestamp);\n', '        stake.holdFrom = uint32(block.timestamp);\n', '\n', '        stake.origDeposit = amount;\n', '        stake.deposit = amount.sub(_calcPercentage(amount, LP_FEE_BP)); // Deduct LP Commission\n', '        stake.rewards = depositReward;\n', '\n', '        _updateSponsorPoolUsers(user, stake);\n', '\n', '        if (uplinkAddress != address(0)) {\n', '            _distributeReferralReward(amount, stake, uplinkAddress, uplinkStakeId);\n', '        }\n', '\n', '        user.stakes.push(stake);\n', '\n', '        refPoolBalance = refPoolBalance.add(_calcPercentage(amount, REF_POOL_FEE_BP));\n', '\n', '        sponsorPoolBalance = sponsorPoolBalance.add(_calcPercentage(amount, SPONSOR_POOL_FEE_BP));\n', '\n', '        devBalance = devBalance.add(_calcPercentage(amount, DEV_FEE_BP));\n', '\n', '        uint currentContractBalance = fourRXToken.balanceOf(address(this));\n', '\n', '        if (currentContractBalance > maxContractBalance) {\n', '            maxContractBalance = currentContractBalance;\n', '        }\n', '\n', '        totalDepositRewards = totalDepositRewards.add(depositReward);\n', '\n', '        emit Deposit(msg.sender, amount, stake.id,  uplinkAddress, uplinkStakeId);\n', '    }\n', '\n', '\n', '    function balanceOf(address _userAddress, uint stakeId) public view returns (uint) {\n', '        require(users[_userAddress].wallet == _userAddress);\n', '        User memory user = users[_userAddress];\n', '\n', '        return _calcRewards(user.stakes[stakeId]).sub(user.stakes[stakeId].withdrawn);\n', '    }\n', '\n', '    function withdraw(uint stakeId) external {\n', '        User storage user = users[msg.sender];\n', '        Stake storage stake = user.stakes[stakeId];\n', '        require(user.wallet == msg.sender && stake.active); // stake should be active\n', '\n', '        require(stake.lastWithdrawalAt + 1 days < block.timestamp); // we only allow one withdrawal each day\n', '\n', '        uint availableAmount = _calcRewards(stake).sub(stake.withdrawn).sub(stake.penalty);\n', '\n', '        require(availableAmount > 0);\n', '\n', '        uint penalty = _calcPenalty(stake, availableAmount);\n', '\n', '        if (penalty == 0) {\n', '            availableAmount = availableAmount.sub(_calcPercentage(stake.deposit, REWARD_THRESHOLD_BP)); // Only allow withdrawal if available is more then 10% of base\n', '\n', '            uint maxAllowedWithdrawal = _calcPercentage(stake.deposit, MAX_WITHDRAWAL_OVER_REWARD_THRESHOLD_BP);\n', '\n', '            if (availableAmount > maxAllowedWithdrawal) {\n', '                availableAmount = maxAllowedWithdrawal;\n', '            }\n', '        }\n', '\n', '        if (isInInsuranceState) {\n', '            availableAmount = _getInsuredAvailableAmount(stake, availableAmount);\n', '        }\n', '\n', '        availableAmount = availableAmount.sub(penalty);\n', '\n', '        stake.withdrawn = stake.withdrawn.add(availableAmount);\n', '        stake.lastWithdrawalAt = uint32(block.timestamp);\n', '        stake.holdFrom = uint32(block.timestamp);\n', '\n', '        stake.penalty = stake.penalty.add(penalty);\n', '\n', '        if (stake.withdrawn >= _calcPercentage(stake.deposit, MAX_CONTRACT_REWARD_BP)) {\n', '            stake.active = false; // if stake has withdrawn equals to or more then the max amount, then mark stake in-active\n', '        }\n', '\n', '        _checkForBaseInsuranceTrigger();\n', '\n', '        fourRXToken.transfer(user.wallet, availableAmount);\n', '\n', '        emit Withdrawn(user.wallet, availableAmount);\n', '    }\n', '\n', '    function exitProgram(uint stakeId) external {\n', '        User storage user = users[msg.sender];\n', '        require(user.wallet == msg.sender);\n', '        Stake storage stake = user.stakes[stakeId];\n', '        require(stake.active);\n', '        uint penaltyAmount = _calcPercentage(stake.origDeposit, EXIT_PENALTY_BP);\n', '        uint balance = balanceOf(msg.sender, stakeId);\n', '\n', '        uint availableAmount = stake.origDeposit + balance - penaltyAmount; // (deposit + (rewards - withdrawn) - penalty)\n', '\n', '        if (availableAmount > 0) {\n', '            fourRXToken.transfer(user.wallet, availableAmount);\n', '            stake.withdrawn = stake.withdrawn.add(availableAmount);\n', '        }\n', '\n', '        stake.active = false;\n', '        stake.penalty = stake.penalty.add(penaltyAmount);\n', '\n', '        totalExited = totalExited.add(1);\n', '\n', '        emit Exited(user.wallet, stakeId, availableAmount > 0 ? availableAmount : 0);\n', '    }\n', '\n', '    function insureStake(uint stakeId) external {\n', '        User storage user = users[msg.sender];\n', '        require(user.wallet == msg.sender);\n', '        Stake storage stake = user.stakes[stakeId];\n', '        _insureStake(user.wallet, stake);\n', '    }\n', '\n', '    // Getters\n', '\n', '    function getUser(address userAddress) external view returns (User memory) {\n', '        return users[userAddress];\n', '    }\n', '\n', '    function getContractInfo() external view returns (uint, bool, uint, uint) {\n', '        return (maxContractBalance, isInInsuranceState, totalDepositRewards, totalExited);\n', '    }\n', '\n', '    function withdrawDevFee(address withdrawingAddress, uint amount) external {\n', '        require(msg.sender == devAddress);\n', '        require(amount <= devBalance);\n', '        devBalance = devBalance.sub(amount);\n', '        fourRXToken.transfer(withdrawingAddress, amount);\n', '    }\n', '\n', '    function updateDevAddress(address newDevAddress) external {\n', '        require(msg.sender == devAddress);\n', '        devAddress = newDevAddress;\n', '    }\n', '}']