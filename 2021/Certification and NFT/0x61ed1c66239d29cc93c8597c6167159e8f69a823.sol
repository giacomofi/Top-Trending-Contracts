['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract RefStake is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of RSDs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accRsdPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accRsdPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;           // Address of LP token contract.\n', '        uint256 allocPoint;       // How many allocation points assigned to this pool. RSDs to distribute per block.\n', '        uint256 lastRewardBlock;  // Last block number that RSDs distribution occurs.\n', '        uint256 accRsdPerShare; // Accumulated RSDs per share, times 1e12. See below.\n', '    }\n', '\n', '    // The RSD TOKEN!\n', '    ReferenceSystemDeFi public rsd;\n', '    // RSD tokens created per block.\n', '    uint256 public rsdPerBlock;\n', '    // Bonus muliplier for early rsd makers.\n', '    uint256 public BONUS_MULTIPLIER = 100;\n', '    // // The migrator contract. It has a lot of power. Can only be set through governance (owner).\n', '    // IMigratorChef public migrator;\n', '\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n', '    // Total allocation points. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when RSD mining starts.\n', '    uint256 public startBlock;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '\n', '    constructor(\n', '        uint256 _rsdPerBlock,\n', '        uint256 _startBlock\n', '    ) public {\n', '        rsdPerBlock = _rsdPerBlock;\n', '        startBlock = _startBlock;\n', '        totalAllocPoint = 1000;\n', '    }\n', '\n', '    function updateMultiplier(uint256 multiplierNumber) public onlyOwner {\n', '        BONUS_MULTIPLIER = multiplierNumber;\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    // XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accRsdPerShare: 0\n', '        }));\n', '        updateStakingPool();\n', '    }\n', '\n', "    // Update the given pool's RSD allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 prevAllocPoint = poolInfo[_pid].allocPoint;\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '        if (prevAllocPoint != _allocPoint) {\n', '            totalAllocPoint = totalAllocPoint.sub(prevAllocPoint).add(_allocPoint);\n', '            updateStakingPool();\n', '        }\n', '    }\n', '\n', '    function updateStakingPool() internal {\n', '        uint256 length = poolInfo.length;\n', '        uint256 points = 0;\n', '        for (uint256 pid = 1; pid < length; ++pid) {\n', '            points = points.add(poolInfo[pid].allocPoint);\n', '        }\n', '        if (points != 0) {\n', '            points = points.div(3);\n', '            totalAllocPoint = totalAllocPoint.sub(poolInfo[0].allocPoint).add(points);\n', '            poolInfo[0].allocPoint = points;\n', '        }\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n', '        return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '    }\n', '\n', '    // View function to see pending RSDs on frontend.\n', '    function pendingRsd(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accRsdPerShare = pool.accRsdPerShare;\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 rsdReward = multiplier.mul(rsdPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '            accRsdPerShare = accRsdPerShare.add(rsdReward.mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accRsdPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 rsdReward = multiplier.mul(rsdPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '        rsd.mintForStakeHolder(owner(), rsdReward.div(117));\n', '\n', '        pool.accRsdPerShare = pool.accRsdPerShare.add(rsdReward.mul(1e12).div(lpSupply));\n', '        pool.lastRewardBlock = block.number;\n', '    }\n', '\n', '    // Deposit LP tokens to MasterChef for RSD allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public {\n', '\n', "        require (_pid != 0, 'deposit RSD by staking');\n", '\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accRsdPerShare).div(1e12).sub(user.rewardDebt);\n', '            if(pending > 0) {\n', '                safeRsdTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        if (_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRsdPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '\n', "        require (_pid != 0, 'withdraw RSD by unstaking');\n", '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accRsdPerShare).div(1e12).sub(user.rewardDebt);\n', '        if(pending > 0) {\n', '            safeRsdTransfer(msg.sender, pending);\n', '        }\n', '        if(_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRsdPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount);\n', '    }\n', '\n', '    // Stake RSD tokens to MasterChef\n', '    function enterStaking(uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        updatePool(0);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accRsdPerShare).div(1e12).sub(user.rewardDebt);\n', '            if(pending > 0) {\n', '                safeRsdTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        if(_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRsdPerShare).div(1e12);\n', '\n', '        emit Deposit(msg.sender, 0, _amount);\n', '    }\n', '\n', '    // Withdraw RSD tokens from STAKING.\n', '    function leaveStaking(uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[0];\n', '        UserInfo storage user = userInfo[0][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(0);\n', '        uint256 pending = user.amount.mul(pool.accRsdPerShare).div(1e12).sub(user.rewardDebt);\n', '        if(pending > 0) {\n', '            safeRsdTransfer(msg.sender, pending);\n', '        }\n', '        if(_amount > 0) {\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accRsdPerShare).div(1e12);\n', '\n', '        emit Withdraw(msg.sender, 0, _amount);\n', '    }\n', '\n', '    // Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        pool.lpToken.safeTransfer(address(msg.sender), user.amount);\n', '        emit EmergencyWithdraw(msg.sender, _pid, user.amount);\n', '        user.amount = 0;\n', '        user.rewardDebt = 0;\n', '    }\n', '\n', '    // Safe rsd transfer function, just in case if rounding error causes pool to not have enough RSDs.\n', '    function safeRsdTransfer(address _to, uint256 _amount) internal {\n', '        rsd.mintForStakeHolder(_to, _amount);\n', '    }\n', '\n', '    function updateRsdPerBlock(uint256 _rsdPerBlock) public onlyOwner {\n', '        rsdPerBlock = _rsdPerBlock;\n', '    }\n', '\n', '    function setRsdTokenReward(address payable rsdAddress) public onlyOwner {\n', '        rsd = ReferenceSystemDeFi(rsdAddress);\n', '        if (poolInfo.length == 0) {\n', '            // staking pool\n', '            poolInfo.push(PoolInfo({\n', '                lpToken: rsd,\n', '                allocPoint: 1000,\n', '                lastRewardBlock: startBlock,\n', '                accRsdPerShare: 0\n', '            }));            \n', '        }\n', '    }\n', '}\n', '\n', 'contract ReferenceSystemDeFi is IERC20, Ownable {\n', '\n', '    using SafeMath for int;\n', '    using SafeMath for uint;\n', '    using SafeMath for uint8;\n', '    using SafeMath for uint16;\n', '    using SafeMath for uint256;\n', '  \n', '    bool private _growMarketMint;\n', '    bool private _reduceSupplyFlag;\n', '    bool private _shouldRewardOwner;\n', '\n', '    enum TransactionType {\n', '      BURN,\n', '      MINT,\n', '      REWARD_MINER,\n', '      REWARD_OWNER,\n', '      TRANSFER\n', '    }  \n', '\n', '    uint8 private _ALPHA;\n', '    uint8 private _decimals;\n', '    uint8 private _EPSILON;\n', '    uint8 private _MIN_PERCENTAGE_FACTOR;\n', '    uint8 private _metric;\n', '    uint16 private _EXPANSION_RATE;\n', '    uint16 private _MAX_TX_INTERVAL;\n', '    uint16 private _MIN_TX_INTERVAL;\n', '    uint16 private _SALE_RATE;\n', '    uint16 private _Q;\n', '    uint16 private _percentageFactor;\n', '    uint16 private _seedNumber;\n', '    uint16 private _txNumber;\n', '    uint128 private _CROWDSALE_DURATION;\n', '    uint128 private _CONTRACT_TIMESTAMP;\n', '    uint256 private _marketCapTotalSupply; \n', '    uint256 private _targetTotalSupply; \n', '    uint256 private _totalSupply; \n', '    uint256 private _moreThanOnce;\n', '    uint256 private _volumeAfter;\n', '    uint256 private _volumeBefore;\n', '\n', '    address private _stakeHelper;\n', '\n', '    mapping (address => TransactionType) private _txType;\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    event Pool(uint256 amount);\n', '    event PolicyAdjustment(bool reduction, uint16 percentageFactor);\n', '    event PoBet(address winner, uint256 amount);\n', '    event SupplyAdjustment(bool reduction, uint256 amount);\n', '    event RandomNumber(uint256 modulus, uint256 randomNumber);\n', '    event Reward(address miner, uint256 amount);\n', '    \n', '    constructor (string memory name_, string memory symbol_, address stakeHelperAddress) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _reduceSupplyFlag = true;        \n', '        _decimals = 18;\n', '        _CONTRACT_TIMESTAMP = uint128(block.timestamp);\n', '        _decimals = 18;\n', '        _ALPHA = 120;\n', '        _EPSILON = 120;\n', '        _EXPANSION_RATE = 1000; // 400 --> 0.25 % | 1000 --> 0.1 %\n', '        _MIN_PERCENTAGE_FACTOR = 100;\n', '        _MAX_TX_INTERVAL = 144;\n', '        _MIN_TX_INTERVAL = 12;\n', '        _CROWDSALE_DURATION = 7889229; // 3 MONTHS\n', '        _percentageFactor = 100;\n', '        _SALE_RATE = 2000;\n', '        _shouldRewardOwner = true;\n', '        _stakeHelper = stakeHelperAddress;\n', '        _growMarketMint = true;\n', '        _mint(owner(), 1459240e18);\n', '    }\n', '\n', '    receive() external payable {\n', '      require(msg.data.length == 0);\n', '      crowdsale(msg.sender);\n', '    }\n', '\n', '    fallback() external payable {\n', '      require(msg.data.length == 0);\n', '      crowdsale(msg.sender);\n', '    }\n', '\n', '    function crowdsale(address beneficiary) public payable {\n', '      require(block.timestamp.sub(_CONTRACT_TIMESTAMP) <= _CROWDSALE_DURATION, "RSD: crowdsale is over");\n', '      require(msg.value.mul(_SALE_RATE) <= 50000e18, "RSD: required amount exceeds the maximum allowed");\n', '      _growMarketMint = true;\n', '      _mint(beneficiary, msg.value.mul(_SALE_RATE).mul(150).div(100));\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _txType[msg.sender] = TransactionType.TRANSFER;\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _txType[msg.sender] = TransactionType.TRANSFER;\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0) || _txType[msg.sender] == TransactionType.REWARD_MINER || _txType[msg.sender] == TransactionType.REWARD_OWNER, "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer();\n', '\n', '        uint256 amountToTransfer = _adjustSupply(sender, amount);\n', '        _volumeAfter = _volumeAfter.add(amount);\n', '        _balances[sender] = _balances[sender].sub(amountToTransfer, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amountToTransfer);\n', '        emit Transfer(sender, recipient, amountToTransfer);\n', '        delete amountToTransfer;\n', '    }\n', '\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        _txType[msg.sender] = TransactionType.MINT;\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer();\n', '\n', '        if (_growMarketMint) {\n', '          _targetTotalSupply = _targetTotalSupply.add(amount);\n', '          _marketCapTotalSupply = _marketCapTotalSupply.add(amount);\n', '          _growMarketMint = false;\n', '        }\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        _txType[msg.sender] = TransactionType.BURN;\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer();\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    function _beforeTokenTransfer() internal virtual {\n', '      if (_txType[msg.sender] == TransactionType.TRANSFER) {  \n', '        _txNumber = uint16(_txNumber.add(1));\n', '        _adjustTargetTotalSupply();\n', '      }\n', '    }\n', '\n', '    function _adjustPolicyOptimal() internal virtual {\n', '      _Q = uint16((_Q.div(1000).mul(uint16(1000).sub(_ALPHA))).add(_metric.mul(_ALPHA)));\n', '      _reduceSupplyFlag = (_targetTotalSupply < _totalSupply);\n', '      _percentageFactor = uint16((_Q.div(1000)).add(_MIN_PERCENTAGE_FACTOR));\n', '    }\n', '\n', '    function _adjustPolicyRandom() internal virtual {\n', '      _reduceSupplyFlag = (_randomNumber(2) != 0);\n', '      _percentageFactor = uint16((_randomNumber(100).add(_MIN_PERCENTAGE_FACTOR))); \n', '    }\n', '\n', '    function _adjustTargetTotalSupply() internal virtual {\n', '      if (_txNumber > _randomNumber(_MAX_TX_INTERVAL) && _txNumber > _MIN_TX_INTERVAL) {  \n', '        uint256 delta;\n', '        _volumeAfter = _volumeAfter.div(_txNumber); // Avg. volume\n', '        if (_volumeAfter >= _volumeBefore) {\n', '          delta = ((_volumeAfter.sub(_volumeBefore)).mul(1e18)).div(((_volumeAfter.add(_volumeBefore)).div(2)).add(1));\n', '          _targetTotalSupply = _marketCapTotalSupply.sub((_totalSupply.mul(delta)).div(uint256(1e18).mul(100)));\n', '        } else {\n', '          delta = ((_volumeBefore.sub(_volumeAfter)).mul(1e18)).div(((_volumeAfter.add(_volumeBefore)).div(2)).add(1));\n', '          _targetTotalSupply = _marketCapTotalSupply.add((_totalSupply.mul(delta)).div(uint256(1e18).mul(100)));        \n', '        }\n', '        _volumeBefore = _volumeAfter;\n', '        _txNumber = 0;\n', '        delete delta;\n', '        _rewardWinner(msg.sender);\n', '      }\n', '    }    \n', '\n', '    function _adjustSupply(address account, uint256 txAmount) internal virtual returns(uint256) {\n', '      if (_txType[msg.sender] == TransactionType.TRANSFER) {  \n', '\n', '        if (_randomNumber(1000) > _EPSILON)\n', '          _adjustPolicyOptimal();\n', '        else\n', '          _adjustPolicyRandom();\n', '\n', '        uint256 adjustedAmount = _calculateSupplyAdjustment(txAmount);\n', '        uint256 minerAmount = _calculateMinerReward(txAmount);\n', '        if (_reduceSupplyFlag) {\n', '          _burn(account, adjustedAmount);\n', '          txAmount = txAmount.sub(adjustedAmount).sub(minerAmount);\n', '        } else {\n', '          _mint(account, adjustedAmount.add(minerAmount));\n', '          txAmount = txAmount.add(adjustedAmount.div(2));\n', '        }\n', '        if (_shouldRewardOwner) {\n', '          uint256 amountOwner = minerAmount.div(117); // _OWNER_PERCENTAGE\n', '          minerAmount = minerAmount.sub(amountOwner);\n', '          _rewardMinerAndPool(account, minerAmount);\n', '          _rewardOwner(account, amountOwner);\n', '          delete amountOwner;\n', '        } else {\n', '          _rewardMinerAndPool(account, minerAmount);\n', '        }\n', '        \n', '        delete adjustedAmount;\n', '        delete minerAmount;\n', '\n', '        _calculateMetric();\n', '      }\n', '\n', '      return txAmount; \n', '    }\n', '\n', '    function burn(uint256 amount) public {\n', '      _burn(msg.sender, amount);\n', '    }\n', '\n', '    function _calculateMinerReward(uint256 amount) internal virtual view returns(uint256) {\n', '      return amount.div(_percentageFactor.mul(2));\n', '    }    \n', '\n', '    function _calculateMetric() internal virtual {\n', '      if (_targetTotalSupply >= _totalSupply)\n', '        _metric = uint8(log_2((_targetTotalSupply.sub(_totalSupply)).add(1)));\n', '      else\n', '        _metric = uint8(log_2((_totalSupply.sub(_targetTotalSupply)).add(1)));\n', '\n', '      _metric = _metric > 100 ? 0 : (100 - _metric);\n', '    }\n', '\n', '    function _calculateSupplyAdjustment(uint256 amount) internal virtual view returns(uint256) {\n', '      return amount.div(_percentageFactor);\n', '    }\n', '\n', '    function generateRandomMoreThanOnce() public {\n', '      _moreThanOnce = uint256(keccak256(abi.encodePacked(\n', '        _moreThanOnce,\n', '        _seedNumber,\n', '        block.timestamp,\n', '        block.number,\n', '        _totalSupply,\n', '        _targetTotalSupply,\n', '        _marketCapTotalSupply,\n', '        _Q,\n', '        _txNumber,\n', '        msg.sender))).mod(_targetTotalSupply);\n', '    }\n', '\n', '    function getCrowdsaleDuration() public view returns(uint128) {\n', '      return _CROWDSALE_DURATION;\n', '    }   \n', '\n', '    function getExpansionRate() public view returns(uint16) {\n', '      return _EXPANSION_RATE;\n', '    } \n', '\n', '    function getMarketCapTotalSupply() public onlyOwner view returns(uint256) {\n', '      return _marketCapTotalSupply;\n', '    }\n', '\n', '    function getMoreThanOnceNumber() public onlyOwner view returns(uint256) {\n', '      return _moreThanOnce;\n', '    }\n', '\n', '    function getQ() public onlyOwner view returns(uint16) {\n', '      return _Q;\n', '    }\n', '\n', '    function getSaleRate() public view returns(uint16) {\n', '      return _SALE_RATE;\n', '    }    \n', '\n', '    function getSeedNumber() public onlyOwner view returns(uint16) {\n', '      return _seedNumber;\n', '    }\n', '\n', '    function getTargetTotalSupply() public onlyOwner view returns(uint256) {\n', '      return _targetTotalSupply;\n', '    }\n', '\n', '    // Snippet copied from Stack Exchange\n', '    function log_2(uint x) public pure returns (uint y) {\n', '      assembly {\n', '            let arg := x\n', '            x := sub(x,1)\n', '            x := or(x, div(x, 0x02))\n', '            x := or(x, div(x, 0x04))\n', '            x := or(x, div(x, 0x10))\n', '            x := or(x, div(x, 0x100))\n', '            x := or(x, div(x, 0x10000))\n', '            x := or(x, div(x, 0x100000000))\n', '            x := or(x, div(x, 0x10000000000000000))\n', '            x := or(x, div(x, 0x100000000000000000000000000000000))\n', '            x := add(x, 1)\n', '            let m := mload(0x40)\n', '            mstore(m,           0xf8f9cbfae6cc78fbefe7cdc3a1793dfcf4f0e8bbd8cec470b6a28a7a5a3e1efd)\n', '            mstore(add(m,0x20), 0xf5ecf1b3e9debc68e1d9cfabc5997135bfb7a7a3938b7b606b5b4b3f2f1f0ffe)\n', '            mstore(add(m,0x40), 0xf6e4ed9ff2d6b458eadcdf97bd91692de2d4da8fd2d0ac50c6ae9a8272523616)\n', '            mstore(add(m,0x60), 0xc8c0b887b0a8a4489c948c7f847c6125746c645c544c444038302820181008ff)\n', '            mstore(add(m,0x80), 0xf7cae577eec2a03cf3bad76fb589591debb2dd67e0aa9834bea6925f6a4a2e0e)\n', '            mstore(add(m,0xa0), 0xe39ed557db96902cd38ed14fad815115c786af479b7e83247363534337271707)\n', '            mstore(add(m,0xc0), 0xc976c13bb96e881cb166a933a55e490d9d56952b8d4e801485467d2362422606)\n', '            mstore(add(m,0xe0), 0x753a6d1b65325d0c552a4d1345224105391a310b29122104190a110309020100)\n', '            mstore(0x40, add(m, 0x100))\n', '            let magic := 0x818283848586878898a8b8c8d8e8f929395969799a9b9d9e9faaeb6bedeeff\n', '            let shift := 0x100000000000000000000000000000000000000000000000000000000000000\n', '            let a := div(mul(x, magic), shift)\n', '            y := div(mload(add(m,sub(255,a))), shift)\n', '            y := add(y, mul(256, gt(arg, 0x8000000000000000000000000000000000000000000000000000000000000000)))\n', '        }  \n', '    }    \n', '\n', '    function mintForStakeHolder(address stakeholder, uint256 amount) public {\n', '      require(msg.sender == _stakeHelper, "RSD: only stake helper can call this function");\n', '      _growMarketMint = true;\n', '      _mint(stakeholder, amount);\n', '    }   \n', '\n', '    function obtainRandomNumber(uint256 modulus) public {\n', '      emit RandomNumber(modulus, _randomNumber(modulus));\n', '    }\n', '\n', '    function _randomNumber(uint256 modulus) internal virtual returns(uint256) {\n', '      _moreThanOnce = _moreThanOnce.add(1);\n', '      return uint256(keccak256(abi.encodePacked(\n', '        _moreThanOnce,\n', '        _seedNumber,\n', '        block.timestamp,\n', '        block.number,\n', '        msg.sender))).mod(modulus);\n', '    }\n', '\n', '    function _rewardMinerAndPool(address account, uint256 amount) internal virtual {\n', '      _txType[msg.sender] = TransactionType.REWARD_MINER;\n', '      _transfer(account, address(this), amount.mul(90).div(100));\n', '      _transfer(account, block.coinbase, amount.mul(10).div(100));\n', '      if (_EXPANSION_RATE > 0)\n', '        _marketCapTotalSupply = _marketCapTotalSupply.add(amount.div(_EXPANSION_RATE));\n', '      emit Pool(amount.mul(90).div(100));\n', '      emit Reward(block.coinbase, amount.mul(10).div(100));\n', '    }\n', '\n', '    function _rewardOwner(address account, uint256 amount) internal virtual {\n', '      _txType[msg.sender] = TransactionType.REWARD_OWNER;\n', '      _transfer(account, owner(), amount);\n', '      emit Reward(owner(), amount);\n', '    }\n', '\n', '    // Here PoBet happens\n', '    function _rewardWinner(address account) internal virtual {\n', '      if (_randomNumber(2) != 0) {\n', '        _mint(account, _balances[address(this)]);\n', '        emit PoBet(account, _balances[address(this)]);\n', '        _burn(address(this), _balances[address(this)]);\n', '      }\n', '    }\n', '\n', '    function shouldRewardOwner(bool should) public onlyOwner {\n', '      _shouldRewardOwner = should;\n', '    }\n', '\n', '    function updateCrowdsaleDuration(uint128 timestampDuration) public onlyOwner {\n', '      _CROWDSALE_DURATION = timestampDuration;\n', '    }\n', '\n', '    function updateExpansionRate(uint16 expansionRate) public onlyOwner {\n', '      _EXPANSION_RATE = expansionRate;\n', '    }\n', '\n', '    function updateMaxTxInterval(uint16 maxTxInterval) public onlyOwner {\n', '      _MAX_TX_INTERVAL = maxTxInterval;\n', '    }\n', '\n', '    function updateMinTxInterval(uint16 minTxInterval) public onlyOwner {\n', '      _MIN_TX_INTERVAL = minTxInterval;\n', '    }    \n', '\n', '    function updateSaleRate(uint16 rate) public onlyOwner {\n', '      _SALE_RATE = rate;\n', '    }\n', '\n', '    function updateSeedNumber(uint16 newSeedNumber) public onlyOwner {\n', '      _seedNumber = newSeedNumber;\n', '    }\n', '\n', '    function withdrawSales(address payable account, uint256 amount) public onlyOwner {\n', '      require(address(this).balance >= amount, "RSD: required amount exceeds the balance");\n', '      account.transfer(amount);\n', '    }\n', '\n', '    function withdrawSales(address payable account) public onlyOwner {\n', '      require(address(this).balance > 0, "RSD: does not have any balance");\n', '      account.transfer(address(this).balance);\n', '    }\n', '\n', '    function withdrawTokensSent(address tokenAddress) public onlyOwner {\n', '      IERC20 token = IERC20(tokenAddress);\n', '      if (token.balanceOf(address(this)) > 0) \n', '        token.transfer(owner(), token.balanceOf(address(this)));\n', '    }  \n', '}']