['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function ceil(uint256 a, uint256 m) internal pure returns (uint256 r) {\n', '        require(m != 0, "SafeMath: to ceil number shall not be zero");\n', '        return (a + m - 1) / m * m;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner, "only allowed by owner");\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "Invalid address");\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', 'interface IStakeContract{\n', '    function StakeTokens(address _ofUser, uint256 _tokens) external returns(bool);\n', '    function SetRewardClaimDate() external returns(bool);\n', '}\n', '\n', 'contract SeedRoundSale is Owned{\n', '    \n', '    using SafeMath for uint256;\n', '    \n', '    uint256 private maxSaleAmount = 20000000 * 10 ** 18;\n', '    bool sale;\n', '    address private tokenAddress;\n', '    address private stakingAddress;\n', '    \n', '    uint256 private minInvestment = 100000 * 10 ** 18;\n', '    uint256 private maxInvestment = 2000000 * 10 ** 18;\n', '    \n', '    uint256 cliffPeriod = 365 days; //365 days;\n', '    uint256 tokenUnLockDate;\n', '    uint256 withdrawPeriod = 30 days;\n', '    \n', '    struct UserTokens{\n', '        uint256 purchased;\n', '        uint256 claimed;\n', '    }\n', '    mapping(address => UserTokens) public purchasedTokens;\n', '    uint256 public totalTokensSold;\n', '    \n', '    AggregatorV3Interface internal ethPriceFeed;\n', '    \n', '    event SaleEnded(address by, uint256 unsoldTokens);\n', '    event CliffStarted(address by);\n', '    event TokensWithdraw(address by, uint256 tokens);\n', '     \n', '     /**\n', '     * Network: Main Network\n', '     * Aggregator: ETH/USD\n', '     * Address: 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n', '     */\n', '    constructor(address _tokenAddress, address _stakingAddress) public{\n', '        tokenAddress = _tokenAddress;\n', '        ethPriceFeed = AggregatorV3Interface(0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419);\n', '        stakingAddress = _stakingAddress;\n', '        sale = true;\n', '    }\n', '    \n', '    function EndSale() external onlyOwner{\n', '        require(sale, "sale is already close");\n', '        sale = false;\n', '        \n', '        // send the unsold tokens back to owner\n', '        uint256 unsoldTokens = maxSaleAmount.sub(totalTokensSold);\n', '        if(unsoldTokens > 0)\n', '            IERC20(tokenAddress).transfer(tokenAddress, unsoldTokens);\n', '            \n', '        emit SaleEnded(msg.sender, unsoldTokens);\n', '    }\n', '    \n', '    receive() external payable {\n', '        uint256 tokens = getTokenAmount(msg.value);\n', '        _preValidatePurchase(msg.sender, tokens);\n', '        \n', '        purchasedTokens[msg.sender].purchased = purchasedTokens[msg.sender].purchased.add(tokens);\n', '        totalTokensSold = totalTokensSold.add(tokens);\n', "        (bool success, ) = owner.call{value: msg.value}('');\n", '        require(success, "ether transfer to owner unsuccessful");\n', '        \n', '        require(IStakeContract(stakingAddress).StakeTokens(msg.sender, tokens), "token stake unsuccessful");\n', '    }\n', '    \n', '    function addFiatBuyers(address _buyer, uint256 tokens) external onlyOwner{\n', '        _preValidatePurchase(_buyer, tokens);\n', '        totalTokensSold = totalTokensSold.add(tokens);\n', '        purchasedTokens[_buyer].purchased = purchasedTokens[_buyer].purchased.add(tokens);\n', '        require(IStakeContract(stakingAddress).StakeTokens(_buyer, tokens), "token stake unsuccessful");\n', '    }\n', '    \n', '    function _preValidatePurchase(address user, uint256 tokens) internal view{\n', '        require(sale, "sale is closed");\n', '        require(purchasedTokens[user].purchased.add(tokens) >= minInvestment, "below min limit");\n', '        require(purchasedTokens[user].purchased.add(tokens) <= maxInvestment, "exceed max limit");\n', '        require(IERC20(tokenAddress).balanceOf(address(this)) >= maxSaleAmount, "insufficient balance of sale contract");\n', '        require(totalTokensSold.add(tokens) <= maxSaleAmount, "insufficient balance of sale contract, try lesser investment");\n', '    }\n', '    \n', '    function getTokenAmount(uint256 amount) public view returns(uint256){\n', '        int latestPrice = getETHLatestPrice(); \n', '        latestPrice = latestPrice / 1e8; \n', '        \n', '        uint256 scaling = 1e18;\n', '        uint256 pointOneDollarsInEthers = (scaling).div(uint256(latestPrice).mul(10));//scaled\n', '        \n', '        return  ((amount.mul(scaling)).div(pointOneDollarsInEthers));\n', '    }\n', '    \n', '    /**\n', '     * Returns the latest price\n', '     */\n', '    function getETHLatestPrice() public view returns (int) {\n', '        (\n', '            uint80 roundID, \n', '            int price,\n', '            uint startedAt,\n', '            uint timeStamp,\n', '            uint80 answeredInRound\n', '        ) = ethPriceFeed.latestRoundData();\n', '        return price;\n', '    }\n', '    \n', '    function StartCliff() external onlyOwner{\n', '        require(tokenUnLockDate == 0, "cliff already started");\n', '        tokenUnLockDate = block.timestamp.add(cliffPeriod);\n', '        require(IStakeContract(stakingAddress).SetRewardClaimDate(), "failed to set reward claim date in staking");\n', '        emit CliffStarted(msg.sender);\n', '    }\n', '    \n', '    function withdrawTokens() external {\n', '        require(block.timestamp >= tokenUnLockDate, "cliff period has not ended");\n', '        require(tokenUnLockDate > 0, "cliff period has not started");\n', '        \n', '        uint256 monthsPassed = (block.timestamp.sub(tokenUnLockDate)).div(withdrawPeriod);\n', '        if(monthsPassed > 12)\n', '            monthsPassed = 12;\n', '        uint256 allowedToWithdrawPerMonth = (purchasedTokens[msg.sender].purchased.mul(1e18)).div(12); //scaled\n', '        uint256 availableToWithdrawNow = (allowedToWithdrawPerMonth.mul(monthsPassed)).div(1e18); // un-scaled\n', '        availableToWithdrawNow = (availableToWithdrawNow).sub(purchasedTokens[msg.sender].claimed);\n', '        require(availableToWithdrawNow > 0, "nothing pending to claim");\n', '        purchasedTokens[msg.sender].claimed = purchasedTokens[msg.sender].claimed.add(availableToWithdrawNow);\n', '        \n', '        require(IERC20(tokenAddress).transfer(msg.sender, availableToWithdrawNow), "transfer of tokens from sale contract failed");\n', '        emit TokensWithdraw(msg.sender, availableToWithdrawNow);\n', '    }\n', '    \n', '    function availableToWithdraw(address _user) external view returns(uint256){\n', '        if(tokenUnLockDate > 0 && block.timestamp >= tokenUnLockDate){\n', '            uint256 monthsPassed = (block.timestamp.sub(tokenUnLockDate)).div(withdrawPeriod);\n', '            if(monthsPassed > 12)\n', '                monthsPassed = 12;\n', '            uint256 allowedToWithdrawPerMonth = (purchasedTokens[_user].purchased.mul(1e18)).div(12); //scaled\n', '            uint256 availableToWithdrawNow = (allowedToWithdrawPerMonth.mul(monthsPassed)).div(1e18); // un-scaled\n', '            availableToWithdrawNow = (availableToWithdrawNow).sub(purchasedTokens[_user].claimed);\n', '            return availableToWithdrawNow;\n', '        }\n', '        else{\n', '            return 0;\n', '        }\n', '    }\n', '}']