['// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', "import {ILendingRateOracle} from '../../interfaces/ILendingRateOracle.sol';\n", "import {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol';\n", '\n', 'contract LendingRateOracle is ILendingRateOracle, Ownable {\n', '  mapping(address => uint256) borrowRates;\n', '  mapping(address => uint256) liquidityRates;\n', '\n', '  function getMarketBorrowRate(address _asset) external view override returns (uint256) {\n', '    return borrowRates[_asset];\n', '  }\n', '\n', '  function setMarketBorrowRate(address _asset, uint256 _rate) external override onlyOwner {\n', '    borrowRates[_asset] = _rate;\n', '  }\n', '\n', '  function getMarketLiquidityRate(address _asset) external view returns (uint256) {\n', '    return liquidityRates[_asset];\n', '  }\n', '\n', '  function setMarketLiquidityRate(address _asset, uint256 _rate) external onlyOwner {\n', '    liquidityRates[_asset] = _rate;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * @title ILendingRateOracle interface\n', ' * @notice Interface for the Aave borrow rate oracle. Provides the average market borrow rate to be used as a base for the stable borrow rate calculations\n', ' **/\n', '\n', 'interface ILendingRateOracle {\n', '  /**\n', '    @dev returns the market borrow rate in ray\n', '    **/\n', '  function getMarketBorrowRate(address asset) external view returns (uint256);\n', '\n', '  /**\n', '    @dev sets the market borrow rate. Rate value must be in ray\n', '    **/\n', '  function setMarketBorrowRate(address asset, uint256 rate) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', "import './Context.sol';\n", '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor() internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', "    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public virtual onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', "    require(newOwner != address(0), 'Ownable: new owner is the zero address');\n", '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '  function _msgSender() internal view virtual returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}']