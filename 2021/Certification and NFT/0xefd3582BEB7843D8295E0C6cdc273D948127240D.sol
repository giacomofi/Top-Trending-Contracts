['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-12\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/TimeLockedTokenDistribute.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract TimeLockedTokenDistribute is Ownable, ReentrancyGuard, Pausable {\n', '    using SafeMath for uint256;\n', '\n', '    // represents total distribution for locked balances\n', '    mapping(address => uint256) public distribution;\n', '\n', '    // represents first unlock\n', '    mapping(address => uint256) public firstunlock;\n', '\n', '    // blocklist\n', '    mapping(address => uint8) public blocklist;\n', '\n', '    // Token Address\n', '    IERC20 token;\n', '\n', '    // Claimed Token\n', '    mapping(address => uint256) public ClaimedBalances;\n', '\n', '    // start of the lockup period\n', '    // Wednesday, April 21, 2021 02:00:00 AM UTC +0\n', '    // uint256 constant LOCK_START = 1618970400;\n', '    uint256 constant LOCK_START = 1620784800;\n', '    // length of time to delay first epoch\n', '    // uint256 constant FIRST_EPOCH_DELAY = 21 days;\n', '    uint256 constant FIRST_EPOCH_DELAY = 9 days;\n', '    // how long does an epoch last\n', '    uint256 constant EPOCH_DURATION = 1 days;\n', '    // number of epochs\n', '    uint256 constant TOTAL_EPOCHS = 365;\n', '\n', '    // // Friday, July 24, 2021 4:58:31 PM GMT\n', '    // uint256 constant LOCK_START = 1618840800;\n', '    // // length of time to delay first epoch\n', '    // uint256 constant FIRST_EPOCH_DELAY = 0 minutes;\n', '    // // how long does an epoch last\n', '    // uint256 constant EPOCH_DURATION = 5 minutes;\n', '    // // number of epochs\n', '    // uint256 constant TOTAL_EPOCHS = 20000;\n', '\n', '    // registry of locked addresses\n', '    address public timeLockRegistry;\n', '\n', '    modifier onlyTimeLockRegistry() {\n', '        require(msg.sender == timeLockRegistry, "only TimeLockRegistry");\n', '        _;\n', '    }\n', '\n', '    constructor(address _TimeLockRegistry, IERC20 _token) public {\n', '        require(_TimeLockRegistry != address(0), "cannot be zero address");\n', '\n', '        token = _token;\n', '        timeLockRegistry = _TimeLockRegistry;\n', '    }\n', '\n', '    function setToken(IERC20 _token) external onlyOwner {\n', '        require(address(token) != address(0), "cannot be zero address");\n', '        require(_token != token, "must be new token");\n', '        token = _token;\n', '    }\n', '\n', '    function setTimeLockRegistry(address newTimeLockRegistry)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(newTimeLockRegistry != address(0), "cannot be zero address");\n', '        require(\n', '            newTimeLockRegistry != timeLockRegistry,\n', '            "must be new TimeLockRegistry"\n', '        );\n', '        timeLockRegistry = newTimeLockRegistry;\n', '    }\n', '\n', '    function claim() public nonReentrant() whenNotPaused() {\n', '        require(blocklist[msg.sender] == 0, "Sender has been blocked!");\n', '        uint256 tokenCanClaimed =\n', '            unlockedBalance(msg.sender).sub(ClaimedBalances[msg.sender]);\n', '        require(tokenCanClaimed > 0, "Sender has 0 unclaimed tokens");\n', '        //Log\n', '        ClaimedBalances[msg.sender] = unlockedBalance(msg.sender);\n', '        require(\n', '            token.balanceOf(address(this)) >= tokenCanClaimed,\n', '            "insufficient balance"\n', '        );\n', '        token.transfer(msg.sender, tokenCanClaimed);\n', '    }\n', '\n', '    function registerLockupByArr(\n', '        address[] memory _receivers,\n', '        uint256[] memory _amounts,\n', '        uint256[] memory _unlocks\n', '    ) external onlyTimeLockRegistry {\n', '        uint256 totalAmount;\n', '        for (uint256 i = 0; i < _receivers.length; i++) {\n', '            require(distribution[_receivers[i]] == 0, "Only add once.");\n', '            require(firstunlock[_receivers[i]] == 0, "Only add once.");\n', '            require(_unlocks[i] <= _amounts[i], "invalid first unlock amount.");\n', '\n', '            // add amount to locked distribution\n', '            distribution[_receivers[i]] = distribution[_receivers[i]].add(\n', '                _amounts[i]\n', '            );\n', '\n', '            // add firstunlock\n', '            firstunlock[_receivers[i]] = firstunlock[_receivers[i]].add(\n', '                _unlocks[i]\n', '            );\n', '\n', '            totalAmount = totalAmount.add(_amounts[i]);\n', '        }\n', '\n', '        // transfer to LockContract\n', '        // require(\n', '        //     token.balanceOf(msg.sender) >= totalAmount,\n', '        //     "insufficient balance"\n', '        // );\n', '        // token.transferFrom(msg.sender, address(this), totalAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer tokens to another account under the lockup schedule\n', '     * Emits a transfer event showing a transfer to the recipient\n', '     * Only the registry can call this function\n', '     * @param receiver Address to receive the tokens\n', '     * @param amount Tokens to be transferred\n', '     */\n', '    function registerLockup(\n', '        address receiver,\n', '        uint256 amount,\n', '        uint256 unlock\n', '    ) external onlyTimeLockRegistry {\n', '        require(token.balanceOf(msg.sender) >= amount, "insufficient balance");\n', '\n', '        require(distribution[receiver] == 0, "Only add once.");\n', '        require(firstunlock[receiver] == 0, "Only add once.");\n', '        require(unlock <= amount, "invalid first unlock amount.");\n', '\n', '        // add amount to locked distribution\n', '        distribution[receiver] = distribution[receiver].add(amount);\n', '\n', '        // add firstunlock\n', '        firstunlock[receiver] = firstunlock[receiver].add(unlock);\n', '\n', '        // transfer to LockContract\n', '        // token.transferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function deposit(uint256 amount) external onlyTimeLockRegistry {\n', '        require(token.balanceOf(msg.sender) >= amount, "insufficient balance");\n', '        // transfer to LockContract\n', '        token.transferFrom(msg.sender, address(this), amount);\n', '    }\n', '\n', '    function withdraw(address receiver, uint256 amount)\n', '        external\n', '        onlyTimeLockRegistry\n', '    {\n', '        require(\n', '            token.balanceOf(address(this)) >= amount,\n', '            "insufficient balance"\n', '        );\n', '        token.transfer(receiver, amount);\n', '    }\n', '\n', '    function balance() public view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    function cleanDistribution(address account) external onlyTimeLockRegistry {\n', '        distribution[account] = 0;\n', '    }\n', '\n', '    function cleanFirstUnlock(address account) external onlyTimeLockRegistry {\n', '        firstunlock[account] = 0;\n', '    }\n', '\n', '    function addToBlockList(address account) external onlyTimeLockRegistry {\n', '        blocklist[account] = 1;\n', '    }\n', '\n', '    function removeFromBlockList(address account)\n', '        external\n', '        onlyTimeLockRegistry\n', '    {\n', '        blocklist[account] = 0;\n', '    }\n', '\n', '    function lockedBalance(address account) public view returns (uint256) {\n', '        // distribution * 0.7 * (epochsLeft / totalEpochs)\n', '        // return distribution[account].mul(100 - FIRST_UNLOCK).div(100).mul(epochsLeft()).div(TOTAL_EPOCHS);\n', '\n', '        // (distribution - firstunlock) * (epochsLeft / totalEpochs)\n', '        return\n', '            distribution[account]\n', '                .sub(firstunlock[account])\n', '                .mul(epochsLeft())\n', '                .div(TOTAL_EPOCHS);\n', '    }\n', '\n', '    function unlockedBalance(address account) public view returns (uint256) {\n', '        // totalBalance - lockedBalance\n', '        return distribution[account].sub(lockedBalance(account));\n', '    }\n', '\n', '    function claimedBalance(address account) public view returns (uint256) {\n', '        return ClaimedBalances[account];\n', '    }\n', '\n', '    function epochsPassed() public view returns (uint256) {\n', '        // return 0 if timestamp is lower than start time\n', '        if (block.timestamp < LOCK_START) {\n', '            return 0;\n', '        }\n', '\n', '        // how long it has been since the beginning of lockup period\n', '        uint256 timePassed = block.timestamp.sub(LOCK_START);\n', '\n', '        // 1st epoch is FIRST_EPOCH_DELAY longer; we check to prevent subtraction underflow\n', '        if (timePassed < FIRST_EPOCH_DELAY) {\n', '            return 0;\n', '        }\n', '\n', '        // subtract the FIRST_EPOCH_DELAY, so that we can count all epochs as lasting EPOCH_DURATION\n', '        uint256 totalEpochsPassed =\n', '            timePassed.sub(FIRST_EPOCH_DELAY).div(EPOCH_DURATION);\n', '\n', "        // epochs don't count over TOTAL_EPOCHS\n", '        if (totalEpochsPassed > TOTAL_EPOCHS) {\n', '            return TOTAL_EPOCHS;\n', '        }\n', '\n', '        return totalEpochsPassed;\n', '    }\n', '\n', '    function epochsLeft() public view returns (uint256) {\n', '        return TOTAL_EPOCHS.sub(epochsPassed());\n', '    }\n', '\n', '    function nextEpoch() public view returns (uint256) {\n', '        // get number of epochs passed\n', '        uint256 passed = epochsPassed();\n', '\n', '        // if all epochs passed, return\n', '        if (passed == TOTAL_EPOCHS) {\n', '            // return INT_MAX\n', '            return uint256(-1);\n', '        }\n', '\n', '        // if no epochs passed, return latest epoch + delay + standard duration\n', '        if (passed == 0) {\n', '            return latestEpoch().add(FIRST_EPOCH_DELAY).add(EPOCH_DURATION);\n', '        }\n', '\n', '        // otherwise return latest epoch + epoch duration\n', '        return latestEpoch().add(EPOCH_DURATION);\n', '    }\n', '\n', '    function latestEpoch() public view returns (uint256) {\n', '        // get number of epochs passed\n', '        uint256 passed = epochsPassed();\n', '\n', '        // if no epochs passed, return lock start time\n', '        if (passed == 0) {\n', '            return LOCK_START;\n', '        }\n', '\n', '        // accounts for first epoch being longer\n', '        // lockStart + firstEpochDelay + (epochsPassed * epochDuration)\n', '        return\n', '            LOCK_START.add(FIRST_EPOCH_DELAY).add(passed.mul(EPOCH_DURATION));\n', '    }\n', '\n', '    function finalEpoch() public pure returns (uint256) {\n', '        // lockStart + firstEpochDelay + (epochDuration * totalEpochs)\n', '        return\n', '            LOCK_START.add(FIRST_EPOCH_DELAY).add(\n', '                EPOCH_DURATION.mul(TOTAL_EPOCHS)\n', '            );\n', '    }\n', '\n', '    function lockStart() public pure returns (uint256) {\n', '        return LOCK_START;\n', '    }\n', '}']