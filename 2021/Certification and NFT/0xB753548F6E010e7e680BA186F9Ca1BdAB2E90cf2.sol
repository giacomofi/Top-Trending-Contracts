['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "./Ownable.sol";\n', 'import "./TransparentUpgradeableProxy.sol";\n', '\n', '/**\n', ' * @dev This is an auxiliary contract meant to be assigned as the admin of a {TransparentUpgradeableProxy}. For an\n', ' * explanation of why you would want to use this see the documentation for {TransparentUpgradeableProxy}.\n', ' */\n', 'contract ProxyAdmin is Ownable {\n', '\n', '    /**\n', '     * @dev Returns the current implementation of `proxy`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - This contract must be the admin of `proxy`.\n', '     */\n', '    function getProxyImplementation(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n', '        // We need to manually run the static call since the getter cannot be flagged as view\n', '        // bytes4(keccak256("implementation()")) == 0x5c60da1b\n', '        (bool success, bytes memory returndata) = address(proxy).staticcall(hex"5c60da1b");\n', '        require(success);\n', '        return abi.decode(returndata, (address));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the current admin of `proxy`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - This contract must be the admin of `proxy`.\n', '     */\n', '    function getProxyAdmin(TransparentUpgradeableProxy proxy) public view virtual returns (address) {\n', '        // We need to manually run the static call since the getter cannot be flagged as view\n', '        // bytes4(keccak256("admin()")) == 0xf851a440\n', '        (bool success, bytes memory returndata) = address(proxy).staticcall(hex"f851a440");\n', '        require(success);\n', '        return abi.decode(returndata, (address));\n', '    }\n', '\n', '    /**\n', '     * @dev Changes the admin of `proxy` to `newAdmin`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - This contract must be the current admin of `proxy`.\n', '     */\n', '    function changeProxyAdmin(TransparentUpgradeableProxy proxy, address newAdmin) public virtual onlyOwner {\n', '        proxy.changeAdmin(newAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades `proxy` to `implementation`. See {TransparentUpgradeableProxy-upgradeTo}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - This contract must be the admin of `proxy`.\n', '     */\n', '    function upgrade(TransparentUpgradeableProxy proxy, address implementation) public virtual onlyOwner {\n', '        proxy.upgradeTo(implementation);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades `proxy` to `implementation` and calls a function on the new implementation. See\n', '     * {TransparentUpgradeableProxy-upgradeToAndCall}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - This contract must be the admin of `proxy`.\n', '     */\n', '    function upgradeAndCall(TransparentUpgradeableProxy proxy, address implementation, bytes memory data) public payable virtual onlyOwner {\n', '        proxy.upgradeToAndCall{value: msg.value}(implementation, data);\n', '    }\n', '}']