['pragma solidity ^0.5.16;\n', '\n', 'import "./GErc20.sol";\n', '\n', '/**\n', ' * @title GErc20Delegate Contract\n', ' * @notice GTokens which wrap an EIP-20 underlying and are delegated to\n', ' */\n', 'contract GErc20Delegate is GErc20, GDelegateInterface {\n', '    /**\n', '     * @notice Construct an empty delegate\n', '     */\n', '    constructor() public {}\n', '\n', '    /**\n', '     * @notice Called by the delegator on a delegate to initialize it for duty\n', '     * @param data The encoded bytes data for any initialization\n', '     */\n', '    function _becomeImplementation(bytes memory data) public {\n', '        // Shh -- currently unused\n', '        data;\n', '\n', "        // Shh -- we don't ever want this hook to be marked pure\n", '        if (false) {\n', '            implementation = address(0);\n', '        }\n', '\n', '        require(msg.sender == admin, "only the admin may call _becomeImplementation");\n', '    }\n', '\n', '    /**\n', '     * @notice Called by the delegator on a delegate to forfeit its responsibility\n', '     */\n', '    function _resignImplementation() public {\n', "        // Shh -- we don't ever want this hook to be marked pure\n", '        if (false) {\n', '            implementation = address(0);\n', '        }\n', '\n', '        require(msg.sender == admin, "only the admin may call _resignImplementation");\n', '    }\n', '}']