['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-21\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', " * @title Interface for other's contracts use\n", " * @dev This functions will be called by other's contracts\n", ' */\n', 'interface IERAC {\n', '    /**\n', '     * @dev Query the TokenId(ERAC) list for the specified account.\n', '     *\n', '     */\n', '    function getTokenIds(address owner) external view returns (uint256[] memory);\n', '}\n', '\n', '\n', '/**\n', " * @title Interface for other's contracts use\n", " * @dev This functions will be called by other's contracts\n", ' */\n', 'interface INERA {\n', '    /**\n', '     * @dev Mining for NERA tokens.\n', '     *\n', '     */\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract ERACMiner is Ownable {\n', '    \n', '    // the NERA contract address(Special note: need to wait for the NERA contract deployment, get the address and replace, then compile and deploy this contract)\n', '    address private constant _NERA_CONTRACT_ADDRESS = address(0x6b1218D1a79b06a811dc54E745C51d8cDF666c1d);\n', '    \n', '    // the ERAC contract address(Special note: need to wait for the ERAC contract deployment, get the address and replace, then compile and deploy this contract)\n', '    address private constant _ERAC_CONTRACT_ADDRESS = address(0x30E4812AC46992F3A53A9e7D3CF37cDAdc1f4145);\n', '\n', '    using SafeMath for uint256;\n', '    // Produce time control\n', '    // The timestamp (counting the total seconds elapsed since 1970-01-01 00:00:00[UTC zero zone] )\n', '    // now start timestamp is 2021-04-16 00:00:00[UTC zero zone] or 2021-04-16 08:00:00(Beijing Time)\n', '    uint256 private constant _startTimestamp = 1618531200;\n', '    uint256 private constant _mintPeriod     = 70956000; //821.25d * 24h * 3600s;\n', '    uint256 private constant _endTimestamp   = _startTimestamp + _mintPeriod;\n', '\n', '    // Mapping from tokenId to total amount of this tokenId that withdrawed\n', '    mapping(uint256 => uint256) private _withdrawalAmount;\n', '\n', '    /**\n', '     * @dev Throws if called by an invalid ERAC token id.\n', '     */\n', '    modifier isValidTokenId(uint256 tokenId) \n', '    {\n', '        require(tokenId >= 1 && tokenId <= 10000, "ERACMiner: operator an invalid ERAC tokenId");\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', "     * @dev Give any valid ERAC's token id return level(1-9)\n", '     */\n', '    function _getLevel(uint256 id) \n', '        private\n', '        pure\n', '        isValidTokenId(id) \n', '        returns (uint256) \n', '    {\n', '        return id>6000 ? 1 : (id>4000 ? 2 : (id>3000 ? 3 : (id>2000 ? 4 : (id>1000 ? 5 : (id>300 ? 6 : (id>100 ? 7 : (id>10 ? 8 : 9)))))));\n', '    }    \n', '\n', '\n', '    /**\n', '     * @dev Query the balanceOf NERAs remaining for an ERAC (wei)\n', '     */\n', '    function balanceOfERAC(uint256 tokenId) \n', '        public\n', '        view\n', '        isValidTokenId(tokenId)\n', '        returns (uint256)\n', '    {\n', '        uint256 nSeconds = block.timestamp - _startTimestamp;\n', '        if(nSeconds <= 0) return 0;\n', '        // Produce speed of levels\n', '        uint16[10] memory levelEveryDayMiningNum = [0, 3, 7, 13, 18, 22, 38, 175, 390, 4384];\n', '        return nSeconds * (10 ** 18) * levelEveryDayMiningNum[_getLevel(tokenId)] / 86400 - _withdrawalAmount[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Query the balanceOf NERAs remaining for an account (wei)\n', '     */\n', '    function balanceOfAccount(address owner)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256[] memory tokenIds = IERAC(_ERAC_CONTRACT_ADDRESS).getTokenIds(owner);\n', '        if(tokenIds.length == 0) return 0;\n', '        uint256 totalBalance = 0;\n', '        for(uint i = 0; i < tokenIds.length; ++i) {\n', '            totalBalance = totalBalance.add(balanceOfERAC(tokenIds[i]));\n', '        }   \n', '        return totalBalance;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev withdraw\n', '     */\n', '    function withdraw() \n', '        public\n', '        returns (bool)\n', '    {\n', '        //Reference of ERAC contract call\n', '        uint256[] memory tokenIds = IERAC(_ERAC_CONTRACT_ADDRESS).getTokenIds(msg.sender); \n', '        require(tokenIds.length > 0, "ERACMiner: message sender has no ERAC token");\n', '\n', '        uint256 withdrawBalance = 0;\n', '        for(uint i = 0; i < tokenIds.length; ++i) {\n', '            uint256 tokenId = tokenIds[i];\n', '            uint256 balanceOfThis = balanceOfERAC(tokenId);\n', '            if (balanceOfThis > 0) { \n', '                _withdrawalAmount[tokenId] = _withdrawalAmount[tokenId].add(balanceOfThis);\n', '                withdrawBalance = withdrawBalance.add(balanceOfThis);\n', '            }\n', '        }\n', '\n', '        require(withdrawBalance > 0, "ERACMiner: since last withdraw has no new NERA produce");\n', '        //Reference of NERA contract call\n', '        require(INERA(_NERA_CONTRACT_ADDRESS).mint(msg.sender, withdrawBalance), "ERACMiner: mint failed.");\n', '\n', '        return true;\n', '    }\n', '}']