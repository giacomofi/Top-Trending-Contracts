['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-11\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-07-17\n', '*/\n', '\n', '/*\n', '   ____            __   __        __   _\n', '  / __/__ __ ___  / /_ / /  ___  / /_ (_)__ __\n', ' _\\ \\ / // // _ \\/ __// _ \\/ -_)/ __// / \\ \\ /\n', '/___/ \\_, //_//_/\\__//_//_/\\__/ \\__//_/ /_\\_\\\n', '     /___/\n', '\n', '* Synthetix: YAMRewards.sol\n', '*\n', '* Docs: https://docs.synthetix.io/\n', '*\n', '*\n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2020 Synthetix\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/\n', '\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    \n', '    \n', '    function mint(address account, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/IRewardDistributionRecipient.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', 'interface ERC721 /* is ERC165 */ {\n', '    /// @dev This emits when ownership of any NFT changes by any mechanism.\n', '    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n', '    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n', '    ///  may be created and assigned without emitting Transfer. At the time of\n', '    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '\n', '    /// @dev This emits when the approved address for an NFT is changed or\n', '    ///  reaffirmed. The zero address indicates there is no approved address.\n', '    ///  When a Transfer event emits, this also indicates that the approved\n', '    ///  address for that NFT (if any) is reset to none.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @dev This emits when an operator is enabled or disabled for an owner.\n', '    ///  The operator can manage all NFTs of the owner.\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /// @notice Count all NFTs assigned to an owner\n', '    /// @dev NFTs assigned to the zero address are considered invalid, and this\n', '    ///  function throws for queries about the zero address.\n', '    /// @param _owner An address for whom to query the balance\n', '    /// @return The number of NFTs owned by `_owner`, possibly zero\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    /// @notice Find the owner of an NFT\n', '    /// @param _tokenId The identifier for an NFT\n', '    /// @dev NFTs assigned to zero address are considered invalid, and queries\n', '    ///  about them do throw.\n', '    /// @return The address of the owner of the NFT\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '\n', '    /// @notice Transfers the ownership of an NFT from one address to another address\n', '    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '    ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n', '    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '    ///  `onERC721Received` on `_to` and throws if the return value is not\n', '    ///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '    /// @param data Additional data with no specified format, sent in call to `_to`\n', '\n', '    // Changed mutability to implicit non-payable\n', '    // Changed visibility to public\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\n', '\n', '    /// @notice Transfers the ownership of an NFT from one address to another address\n', '    /// @dev This works identically to the other function with an extra data parameter,\n', '    ///  except this function just sets data to ""\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '\n', '    // Changed mutability to implicit non-payable\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n', '    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n', '    ///  THEY MAY BE PERMANENTLY LOST\n', '    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '    ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '    ///  `_tokenId` is not a valid NFT.\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '\n', '    // Changed mutability to implicit non-payable\n', '    // Changed visibility to public\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    /// @notice Set or reaffirm the approved address for an NFT\n', '    /// @dev The zero address indicates there is no approved address.\n', '    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n', '    ///  operator of the current owner.\n', '    /// @param _approved The new approved NFT controller\n', '    /// @param _tokenId The NFT to approve\n', '\n', '    // Changed mutability to implicit non-payable\n', '    function approve(address _approved, uint256 _tokenId) external;\n', '\n', '    /// @notice Enable or disable approval for a third party ("operator") to manage\n', '    ///  all your assets.\n', '    /// @dev Throws unless `msg.sender` is the current NFT owner.\n', '    /// @dev Emits the ApprovalForAll event\n', '    /// @param _operator Address to add to the set of authorized operators.\n', '    /// @param _approved True if the operators is approved, false to revoke approval\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '    /// @notice Get the approved address for a single NFT\n', '    /// @dev Throws if `_tokenId` is not a valid NFT\n', '    /// @param _tokenId The NFT to find the approved address for\n', '    /// @return The approved address for this NFT, or the zero address if there is none\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '\n', '    /// @notice Query if an address is an authorized operator for another address\n', '    /// @param _owner The address that owns the NFTs\n', '    /// @param _operator The address that acts on behalf of the owner\n', '    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', 'interface IOneOAKGovernance {\n', '    function getGovernanceContract(uint256 _type) external view returns (address);\n', '}\n', '\n', 'interface INFTGovernance {\n', '    function getListingActiveDelay() external view returns (uint256);\n', '    function getBuyBonusResidual() external view returns (uint256);\n', '    function getMarketFee() external view returns (uint256);\n', '    function getAbsoluteMinPrice() external view returns (uint256);\n', '    function getMinPrice() external view returns (uint256);\n', '    function getMaxPrice() external view returns (uint256);\n', '    function getTokensForPrice(uint256 price) external view returns (uint256);\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function getNftAddress(uint256 _tokenId) external view returns (address);\n', '}\n', '\n', 'contract IRewardDistributionRecipient is Ownable {\n', '    event RewardDistributionChanged(address indexed rewardDistribution);\n', '\n', '    address public rewardDistribution;\n', '\n', '    function notifyRewardAmount(uint256 reward) external;\n', '\n', '    modifier onlyRewardDistribution() {\n', '        require(_msgSender() == rewardDistribution, "Caller is not reward distribution");\n', '        _;\n', '    }\n', '\n', '    function setRewardDistribution(address _rewardDistribution)\n', '        external\n', '        onlyOwner\n', '    {\n', '        rewardDistribution = _rewardDistribution;\n', '\n', '        emit RewardDistributionChanged(rewardDistribution);\n', '    }\n', '}\n', '\n', 'contract OneOAK721Pool is IRewardDistributionRecipient {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    IERC20 public rewardToken;\n', '    IOneOAKGovernance public governanceContract;\n', '    address public rewardsPoolAddress;\n', '    \n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    // 90% locked for LOCKED_PERIOD length of time. vesting begins after LOCKUP_HURDLE length of time\n', '    uint256 public constant DURATION      = 62500000; // ~723 days\n', '    uint256 public constant LOCKUP_HURDLE = 31250000; // 365 days\n', '    uint256 public constant LOCKUP_PERIOD = 31250000; // 365 days\n', '    uint256 public constant LOCKUP_FACTOR = 10; // 10% ulocked immediately, 90% locked\n', '\n', '    uint256 public starttime = 1616169600; // 2021-03-19 16:00:00 (UTC UTC +00:00)\n', '    mapping(address => uint256) public unlockStart;\n', '\n', '    uint256 public periodFinish = 0;\n', '    mapping(address => uint256) public unlockEnd;\n', '\n', '    uint256 public rewardRate = 0;\n', '    mapping(address => uint256) public unlockedRewardRate;\n', '\n', '    uint256 public lastUpdateTime;\n', '    mapping(address => uint256) public lastUnlockedUpdateTime;\n', '\n', '    uint256 public rewardPerTokenStored;\n', '    mapping(address => uint256) public unlockedRewardPerTokenStored;\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public userUnlockedRewardPerTokenPaid;\n', '\n', '    mapping(address => uint256) public rewards; \n', '    mapping(address => uint256) public unlockedRewards;\n', '    \n', '    mapping(address => uint256) public penalties;\n', '\n', '    mapping(address => uint256) public allTimeLockedRewards;\n', '    \n', '    mapping(address => mapping(uint256 => mapping(uint256 => Listing))) public listings;\n', '    \n', '    struct Listing { \n', '       uint256 blockNumber;\n', '       uint256 price;\n', '       uint256 tokenId;\n', '       uint256 tokensStaked;\n', '       address seller;\n', '       bool active;\n', '    }\n', '    \n', '    event RewardLocked(address indexed user, uint256 reward, uint256 start, uint256 end);\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event NftSold(address indexed seller, address buyer, uint256 nftType, uint256 nftId, uint256 price);\n', '\n', '    constructor(address _oakTokenAddress, address _governanceContract, address _rewardsPoolAddress) public {\n', '        rewardToken = IERC20(_oakTokenAddress);\n', '        governanceContract = IOneOAKGovernance(_governanceContract);\n', '        rewardsPoolAddress = _rewardsPoolAddress;\n', '    }\n', '\n', '    modifier checkStart() {\n', '        require(block.timestamp >= starttime,"not start");\n', '        _;\n', '    }\n', '\n', '    modifier updateReward(address account) {\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier updateUnlockedReward(address account) {\n', '        unlockedRewardPerTokenStored[account] = unlockedRewardForAccount(account);\n', '        lastUnlockedUpdateTime[account] = lastTimeUnlockedRewardApplicable(account);\n', '        if (account != address(0)) {\n', '            unlockedRewards[account] = unlockedEarned(account);\n', '            userUnlockedRewardPerTokenPaid[account] = unlockedRewardPerTokenStored[account];\n', '        }\n', '        _;\n', '    }\n', '\n', '    function lastTimeRewardApplicable() public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '    \n', '    function lastTimeUnlockedRewardApplicable(address account) public view returns (uint256) {\n', '        return Math.min(block.timestamp, unlockEnd[account]);\n', '    }\n', '\n', '    function rewardPerToken() public view returns (uint256) {\n', '        if (totalSupply() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '        return\n', '            rewardPerTokenStored.add(\n', '                lastTimeRewardApplicable()\n', '                    .sub(lastUpdateTime)\n', '                    .mul(rewardRate)\n', '                    .mul(1e18)\n', '                    .div(totalSupply())\n', '            );\n', '    }    \n', '\n', '    function unlockedRewardForAccount(address account) public view returns (uint256) {\n', '        if (lastTimeUnlockedRewardApplicable(account) < lastUnlockedUpdateTime[account]) {\n', '            return 0;\n', '        } \n', '        return\n', '            unlockedRewardPerTokenStored[account].add(\n', '                lastTimeUnlockedRewardApplicable(account)\n', '                    .sub(lastUnlockedUpdateTime[account])\n', '                    .mul(unlockedRewardRate[account])\n', '                    .mul(1e18)\n', '            );\n', '    }\n', '\n', '    function earned(address account) public view returns (uint256) {\n', '        if (penalties[account] >= balanceOf(account)) {\n', '            return 0;\n', '        } else {\n', '            return\n', '                (balanceOf(account).sub(penalties[account]))\n', '                    .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '                    .div(1e18)\n', '                    .add(rewards[account]);\n', '        }\n', '    }\n', '\n', '    function unlockedEarned(address account) public view returns (uint256) {\n', '        if (block.timestamp <= unlockStart[account] \n', '            || penalties[account] >= unlockedRewardForAccount(account)\n', '            || userUnlockedRewardPerTokenPaid[account] >= (unlockedRewardForAccount(account).sub(penalties[account]))\n', '        ) {\n', '            return 0;\n', '        }\n', '        return \n', '            (unlockedRewardForAccount(account).sub(penalties[account]))\n', '                .sub(userUnlockedRewardPerTokenPaid[account])\n', '                .div(1e18)\n', '                .add(unlockedRewards[account]);\n', '    }\n', '\n', '    function addRewards(address account, uint256 amount) private updateReward(account) checkStart {\n', '        require(amount > 0, "Cannot stake 0");\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Staked(account, amount);\n', '    }\n', '\n', '    function removeRewards(address account, uint256 amount) private updateReward(account) checkStart {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        _balances[account] = _balances[account].sub(amount);\n', '        emit Withdrawn(account, amount);\n', '    }\n', '\n', '    function exit() external {\n', '        removeRewards(msg.sender, balanceOf(msg.sender));\n', '        getReward();\n', '    }\n', '        \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function getReward() public updateReward(msg.sender) checkStart {\n', '        uint256 reward = earned(msg.sender);\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            \n', '            rewardToken.mint(address(this), reward);\n', '\n', '            // unlock 10% immediately\n', '            uint256 availableReward = reward.div(LOCKUP_FACTOR);\n', '            uint256 lockedReward = reward.sub(availableReward);\n', '    \n', '            // lock remaining 90% for 1 year\n', '            // tokens vest continuously the course of 1 year\n', '\n', '            updateLockedAmount(msg.sender, lockedReward);\n', '            \n', '            rewardToken.safeTransfer(msg.sender, availableReward);\n', '            emit RewardPaid(msg.sender, availableReward);\n', '        }\n', '    }\n', '\n', '    function getUnlockedReward() public updateUnlockedReward(msg.sender) checkStart {\n', '        uint256 reward = unlockedEarned(msg.sender);\n', '        if (reward > 0) {\n', '            unlockedRewards[msg.sender] = 0;\n', '            \n', '            rewardToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    function notifyRewardAmount(uint256 reward)\n', '        external\n', '        onlyRewardDistribution\n', '        updateReward(address(0))\n', '    {\n', '        if (block.timestamp > starttime) {\n', '          if (block.timestamp >= periodFinish) {\n', '              rewardRate = reward.div(DURATION);\n', '          } else {\n', '              uint256 remaining = periodFinish.sub(block.timestamp);\n', '              uint256 leftover = remaining.mul(rewardRate);\n', '              rewardRate = reward.add(leftover).div(DURATION);\n', '          }\n', '          lastUpdateTime = block.timestamp;\n', '          periodFinish = block.timestamp.add(DURATION);\n', '          emit RewardAdded(reward);\n', '        } else {\n', '          rewardRate = reward.div(DURATION);\n', '          lastUpdateTime = starttime;\n', '          periodFinish = starttime.add(DURATION);\n', '          emit RewardAdded(reward);\n', '        }\n', '    }\n', '\n', '    function updateLockedAmount(address account, uint256 reward)\n', '        internal\n', '    {   \n', '        if (unlockStart[account] > 0) {\n', '            uint256 remaining = unlockEnd[account].sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(unlockedRewardRate[account]);\n', '            unlockedRewardRate[account] = reward.add(leftover).div(LOCKUP_PERIOD);\n', '\n', '            if (block.timestamp >= unlockStart[account]) {\n', '                unlockEnd[account] = block.timestamp.add(LOCKUP_PERIOD);\n', '            }\n', '\n', '            lastUnlockedUpdateTime[account] = block.timestamp;\n', '        } else {\n', '            unlockedRewardRate[account] = reward.div(LOCKUP_PERIOD);\n', '            unlockStart[account] = block.timestamp.add(LOCKUP_HURDLE);\n', '            unlockEnd[account] = unlockStart[account].add(LOCKUP_PERIOD);\n', '            lastUnlockedUpdateTime[account] = unlockStart[account];\n', '        }\n', '\n', '        allTimeLockedRewards[account] = allTimeLockedRewards[account].add(reward);\n', '        emit RewardLocked(account, reward, unlockStart[account], unlockEnd[account]);\n', '    }\n', '\n', '    function getOwner(uint256 _type, uint256 _tokenId) public view returns (address) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).ownerOf(_tokenId);\n', '    }\n', '        \n', '    function getApproved(uint256 _type, uint256 _tokenId) public view returns (address) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getApproved(_tokenId);\n', '    }\n', '    \n', '    function getMinPrice(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getMinPrice();\n', '    }\n', '    \n', '    function getMaxPrice(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getMaxPrice();\n', '    }\n', '    \n', '    function getBuyBonusResidual(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getBuyBonusResidual();\n', '    }\n', '    \n', '    function getTokensForPrice(uint _type, uint price) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getTokensForPrice(price);\n', '    }\n', '    \n', '    function getMarketFee(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getMarketFee();\n', '    }\n', '    \n', '    function getAbsoluteMinPrice(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getAbsoluteMinPrice();\n', '    }\n', '\n', '    function getListingActiveDelay(uint _type) public view returns (uint256) {\n', '        address _governanceContract = governanceContract.getGovernanceContract(_type);\n', '        return INFTGovernance(_governanceContract).getListingActiveDelay();\n', '    }\n', '\n', '    function list(uint _type, uint256 _tokenId, uint256 _price) public {\n', '        address user = msg.sender;\n', '        address owner = getOwner(_type, _tokenId);\n', '        address approved = getApproved(_type, _tokenId);\n', '        \n', '        require(address(this) == approved, "Approval required");\n', '        require(user == owner, "Owner required");\n', '        require(_price >= getAbsoluteMinPrice(_type), "Price too low");\n', '\n', '        Listing storage previousListing = listings[owner][_type][_tokenId];\n', '        if (previousListing.active) {\n', '            uint256 tokensStaked = previousListing.tokensStaked;\n', '            if (tokensStaked > 0) { \n', '                removeRewards(user, tokensStaked);\n', '            }\n', '        }\n', '        \n', '        uint256 tokensForPrice = getTokensForPrice(_type, _price);\n', '\n', '        Listing memory listing = Listing({\n', '            blockNumber: block.number,\n', '            price: _price, \n', '            tokenId: _tokenId, \n', '            seller: user,\n', '            tokensStaked: tokensForPrice,\n', '            active: true\n', '        });\n', '        listings[user][_type][_tokenId] = listing;\n', '        \n', '        if (tokensForPrice > 0) {\n', '            addRewards(user, tokensForPrice);\n', '            emit Staked(user, tokensForPrice);\n', '        }\n', '    }\n', '    \n', '    function cancel(uint256 _type, uint256 _tokenId) external {\n', '        address user = msg.sender;\n', '        Listing storage listing = listings[user][_type][_tokenId];\n', '        listing.active = false;\n', '        \n', '        uint256 tokensStaked = listing.tokensStaked;\n', '        if (tokensStaked > 0) {\n', '            removeRewards(user, tokensStaked);\n', '        }\n', '    }\n', '    \n', '    function staleListing(uint256 _type, address _owner, uint256 _tokenId) external payable {\n', '        Listing storage listing = listings[_owner][_type][_tokenId];\n', '        address seller = listing.seller;\n', '        \n', '        uint256 listingDelay = getListingActiveDelay(_type);\n', '        require(block.number.sub(listing.blockNumber) > listingDelay, "Listing will be availale in a few blocks");\n', '        require(listing.active, "Listing not active");\n', '        require(listing.price > 0, "Listing not found");\n', '        \n', '        address approved = getApproved(_type, _tokenId);\n', '        address owner = getOwner(_type, _tokenId);\n', '        \n', '        if ((owner != seller || address(this) != approved)) {\n', '            listing.active = false;\n', '            addPenalty(seller, listing.tokensStaked);\n', '        } else {\n', '            revert("Listing is OK");\n', '        }\n', '    }\n', '    \n', '    function addPenalty(address owner, uint256 tokensStaked) internal {\n', '        penalties[owner] = penalties[owner].add(tokensStaked);\n', '    }\n', '\n', '    function purchase(uint256 _type, address _owner, uint256 _tokenId) external updateReward(_owner) payable {\n', '        address buyer = msg.sender;\n', '\n', '        Listing storage listing = listings[_owner][_type][_tokenId];\n', '        address seller = listing.seller;\n', '        uint256 price = listing.price;\n', '        \n', '        address owner = getOwner(_type, _tokenId);\n', '        address approved = getApproved(_type, _tokenId);\n', '        uint256 listingDelay = getListingActiveDelay(_type);\n', '\n', '        require(price > 0, "Listing not found");\n', '        require(listing.active, "Listing not active");\n', '        require(owner == seller, "Seller must own the item");\n', '        require(approved == address(this), "Approve required");\n', '        require(block.number.sub(listing.blockNumber) > listingDelay, "Listing pending");\n', '        require(msg.value >= listing.price, "ETH payed below listed price");\n', '        \n', '        listing.active = false;\n', '        \n', '        if (getBuyBonusResidual(_type) > 0) {\n', '            uint256 residual = listing.tokensStaked.div(getBuyBonusResidual(_type));\n', '            uint256 realizedRewards = listing.tokensStaked.sub(residual);\n', '\n', '            if (realizedRewards > 0) {\n', '                removeRewards(seller, realizedRewards);\n', '            }\n', '        } else {\n', '            if (listing.tokensStaked > 0) {\n', '                removeRewards(seller, listing.tokensStaked);\n', '            }\n', '        }\n', '\n', '        transferNft(seller, buyer, _type, _tokenId);\n', '        \n', '        if (getMarketFee(_type) > 0) {\n', '            uint256 taxes = price.div(getMarketFee(_type));\n', '            uint256 taxedPrice = price.sub(taxes);\n', '            \n', '            address payable payableSeller = address(uint160(seller));\n', '            payableSeller.send(taxedPrice);\n', '            \n', '            address payable payableRewardsPool = address(uint160(rewardsPoolAddress));\n', '            if (!payableRewardsPool.send(taxes)) {\n', '                revert("Error paying RewardsPool");\n', '            }\n', '            IRewardDistributionRecipient(rewardsPoolAddress).notifyRewardAmount(taxes);\n', '        } else {\n', '            address payable payableSeller = address(uint160(seller));\n', '            payableSeller.send(price);\n', '        }\n', '        \n', '        emit NftSold(seller, buyer, _type, _tokenId, price);\n', '    }\n', '    \n', '    function transferNft(address from, address to, uint256 _type, uint256 _tokenId) internal {\n', '        ERC721 nftToken = ERC721(INFTGovernance(governanceContract.getGovernanceContract(_type)).getNftAddress(_tokenId));\n', '        nftToken.safeTransferFrom(from, to, _tokenId);\n', '    }\n', '\n', '    function getListing(address _owner, uint256 _type, uint256 _tokenId) public view returns (uint256, uint256, address, uint256, bool) {\n', '        Listing storage listing = listings[_owner][_type][_tokenId];\n', '        uint256 price = listing.price;\n', '        uint256 tokenId = listing.tokenId;\n', '        address seller = listing.seller;\n', '        uint256 tokensStaked = listing.tokensStaked;\n', '        bool active = listing.active;\n', '\n', '        return (\n', '            price,\n', '            tokenId,\n', '            seller,\n', '            tokensStaked,\n', '            active\n', '        );\n', '    }\n', '\n', '}']