['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.12; */\n', '/* pragma experimental ABIEncoderV2; */\n', '\n', '/* import { CollateralOpts } from "./CollateralOpts.sol"; */\n', '\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'library DssExecLib {\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '    function vat()        public view returns (address) {}\n', '    function cat()        public view returns (address) {}\n', '    function pot()        public view returns (address) {}\n', '    function vow()        public view returns (address) {}\n', '    function end()        public view returns (address) {}\n', '    function reg()        public view returns (address) {}\n', '    function spotter()    public view returns (address) {}\n', '    function flipperMom() public view returns (address) {}\n', '    function flip(bytes32) public view returns (address) {}\n', '    function getChangelogAddress(bytes32) public view returns (address) {}\n', '    function setChangelogAddress(bytes32, address) public {}\n', '    function setChangelogVersion(string memory) public {}\n', '    function authorize(address, address) public {}\n', '    function deauthorize(address, address) public {}\n', '    function canCast(uint40, bool) public pure returns (bool) {}\n', '    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\n', '    function setContract(address, bytes32, address) public {}\n', '    function setContract(address, bytes32, bytes32, address) public {}\n', '    function setIlkStabilityFee(bytes32, uint256, bool) public {}\n', '    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\n', '    function addWritersToMedianWhitelist(address, address[] memory) public {}\n', '    function removeWritersFromMedianWhitelist(address, address[] memory) public {}\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function addReaderToOSMWhitelist(address, address) public {}\n', '    function removeReaderFromOSMWhitelist(address, address) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '/* import { CollateralOpts } from "./CollateralOpts.sol"; */\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Modifier used to limit execution time when office hours is enabled\n', '    modifier limited {\n', '        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Returns the next available cast time\n', '    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n', '        require(eta <= uint40(-1));\n', '        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '    function nextCastTime(uint256) external view returns (uint256);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        return SpellAction(action).nextCastTime(eta);\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipAbstract.sol\n', '/// ClipAbstract.sol -- Clip Interface\n', '\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', 'interface ClipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilk() external view returns (bytes32);\n', '    function vat() external view returns (address);\n', '    function dog() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function spotter() external view returns (address);\n', '    function calc() external view returns (address);\n', '    function buf() external view returns (uint256);\n', '    function tail() external view returns (uint256);\n', '    function cusp() external view returns (uint256);\n', '    function chip() external view returns (uint64);\n', '    function tip() external view returns (uint192);\n', '    function chost() external view returns (uint256);\n', '    function kicks() external view returns (uint256);\n', '    function active(uint256) external view returns (uint256);\n', '    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\n', '    function stopped() external view returns (uint256);\n', '    function file(bytes32,uint256) external;\n', '    function file(bytes32,address) external;\n', '    function kick(uint256,uint256,address,address) external returns (uint256);\n', '    function redo(uint256,address) external;\n', '    function take(uint256,uint256,uint256,address,bytes calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (uint256[] memory);\n', '    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\n', '    function upchost() external;\n', '    function yank(uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\n', 'interface ClipperMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function locked(address) external view returns (uint256);\n', '    function tolerance(address) external view returns (uint256);\n', '    function spotter() external view returns (address);\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setPriceTolerance(address, uint256) external;\n', '    function setBreaker(address, uint256, uint256) external;\n', '    function tripBreaker(address) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/OsmAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/osm\n', 'interface OsmAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function stopped() external view returns (uint256);\n', '    function src() external view returns (address);\n', '    function hop() external view returns (uint16);\n', '    function zzz() external view returns (uint64);\n', '    function cur() external view returns (uint128, uint128);\n', '    function nxt() external view returns (uint128, uint128);\n', '    function bud(address) external view returns (uint256);\n', '    function stop() external;\n', '    function start() external;\n', '    function change(address) external;\n', '    function step(uint16) external;\n', '    function void() external;\n', '    function pass() external view returns (bool);\n', '    function poke() external;\n', '    function peek() external view returns (bytes32, bool);\n', '    function peep() external view returns (bytes32, bool);\n', '    function read() external view returns (bytes32);\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import {Fileable, ChainlogLike} from "dss-exec-lib/DssExecLib.sol"; */\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '/* import "dss-interfaces/dss/ClipAbstract.sol"; */\n', '/* import "dss-interfaces/dss/ClipperMomAbstract.sol"; */\n', '/* import "dss-interfaces/dss/OsmAbstract.sol"; */\n', '\n', 'struct Collateral {\n', '    bytes32 ilk;\n', '    address vat;\n', '    address vow;\n', '    address spotter;\n', '    address cat;\n', '    address dog;\n', '    address end;\n', '    address esm;\n', '    address flipperMom;\n', '    address clipperMom;\n', '    address ilkRegistry;\n', '    address pip;\n', '    address clipper;\n', '    address flipper;\n', '    address calc;\n', '    uint256 hole;\n', '    uint256 chop;\n', '    uint256 buf;\n', '    uint256 tail;\n', '    uint256 cusp;\n', '    uint256 chip;\n', '    uint256 tip;\n', '    uint256 cut;\n', '    uint256 step;\n', '    uint256 tolerance;\n', '    bytes32 clipKey;\n', '    bytes32 calcKey;\n', '    bytes32 flipKey;\n', '}\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/b1cdcbc7c7ba2c1a0c2c91ed9b04599c0bfb8cee/governance/votes/Executive%20vote%20-%20April%2030%2C%202021.md -q -O - 2> /dev/null)"\n', '    string public constant description =\n', '        "2021-04-30 MakerDAO Executive Spell | Hash: 0x99dc00e1323b91bf5685c4acca38f776bacc65c9ade10bf04dbb5d45e666eed4";\n', '\n', '    uint256 constant MILLION = 10**6;\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '    uint256 constant RAD = 10**45;\n', '\n', '    address constant MCD_CLIP_ETH_A       = 0xc67963a226eddd77B91aD8c421630A1b0AdFF270;\n', '    address constant MCD_CLIP_CALC_ETH_A  = 0x7d9f92DAa9254Bbd1f479DBE5058f74C2381A898;\n', '    address constant MCD_CLIP_ETH_B       = 0x71eb894330e8a4b96b8d6056962e7F116F50e06F;\n', '    address constant MCD_CLIP_CALC_ETH_B  = 0x19E26067c4a69B9534adf97ED8f986c49179dE18;\n', '    address constant MCD_CLIP_ETH_C       = 0xc2b12567523e3f3CBd9931492b91fe65b240bc47;\n', '    address constant MCD_CLIP_CALC_ETH_C  = 0x1c4fC274D12b2e1BBDF97795193D3148fCDa6108;\n', '    address constant MCD_CLIP_WBTC_A      = 0x0227b54AdbFAEec5f1eD1dFa11f54dcff9076e2C;\n', '    address constant MCD_CLIP_CALC_WBTC_A = 0x5f4CEa97ca1030C6Bd38429c8a0De7Cd4981C70A;\n', '\n', '    address constant ETHBTC               = 0x81A679f98b63B3dDf2F17CB5619f4d6775b3c5ED;\n', '\n', '    address constant DEFI_SAVER           = 0xd72BA9402E9f3Ff01959D6c841DDD13615FFff42;\n', '    address constant LISKO                = 0x238A3F4C923B75F3eF8cA3473A503073f0530801;\n', '\n', '    function flipperToClipper(Collateral memory col) internal {\n', '        // Check constructor values of Clipper\n', '        require(ClipAbstract(col.clipper).vat() == col.vat, "DssSpell/clip-wrong-vat");\n', '        require(ClipAbstract(col.clipper).spotter() == col.spotter, "DssSpell/clip-wrong-spotter");\n', '        require(ClipAbstract(col.clipper).dog() == col.dog, "DssSpell/clip-wrong-dog");\n', '        require(ClipAbstract(col.clipper).ilk() == col.ilk, "DssSpell/clip-wrong-ilk");\n', '        // Set CLIP for the ilk in the DOG\n', '        DssExecLib.setContract(col.dog, col.ilk, "clip", col.clipper);\n', '        // Set VOW in the CLIP\n', '        DssExecLib.setContract(col.clipper, "vow", col.vow);\n', '        // Set CALC in the CLIP\n', '        DssExecLib.setContract(col.clipper, "calc", col.calc);\n', '        // Authorize CLIP can access to VAT\n', '        DssExecLib.authorize(col.vat, col.clipper);\n', '        // Authorize CLIP can access to DOG\n', '        DssExecLib.authorize(col.dog, col.clipper);\n', '        // Authorize DOG can kick auctions on CLIP\n', '        DssExecLib.authorize(col.clipper, col.dog);\n', '        // Authorize the END to access the CLIP\n', '        DssExecLib.authorize(col.clipper, col.end);\n', '        // Authorize CLIPPERMOM can set the stopped flag in CLIP\n', '        DssExecLib.authorize(col.clipper, col.clipperMom);\n', '        // Authorize ESM to execute in Clipper\n', '        DssExecLib.authorize(col.clipper, col.esm);\n', '        // Whitelist CLIP in the osm\n', '        DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipper);\n', '        // Whitelist clipperMom in the osm\n', '        DssExecLib.addReaderToOSMWhitelist(col.pip, col.clipperMom);\n', '        // No more auctions kicked via the CAT:\n', '        DssExecLib.deauthorize(col.flipper, col.cat);\n', '        // No more circuit breaker for the FLIP:\n', '        DssExecLib.deauthorize(col.flipper, col.flipperMom);\n', '        // Set values\n', '        Fileable(col.dog).file(col.ilk, "hole", col.hole);\n', '        Fileable(col.dog).file(col.ilk, "chop", col.chop);\n', '        Fileable(col.clipper).file("buf", col.buf);\n', '        Fileable(col.clipper).file("tail", col.tail);\n', '        Fileable(col.clipper).file("cusp", col.cusp);\n', '        Fileable(col.clipper).file("chip", col.chip);\n', '        Fileable(col.clipper).file("tip", col.tip);\n', '        Fileable(col.calc).file("cut", col.cut);\n', '        Fileable(col.calc).file("step", col.step);\n', '        ClipperMomAbstract(col.clipperMom).setPriceTolerance(col.clipper, col.tolerance);\n', '        // Update chost\n', '        ClipAbstract(col.clipper).upchost();\n', '        // Replace flip to clip in the ilk registry\n', '        DssExecLib.setContract(col.ilkRegistry, col.ilk, "xlip", col.clipper);\n', '        Fileable(col.ilkRegistry).file(col.ilk, "class", 1);\n', '        // Update Chainlog\n', '        DssExecLib.setChangelogAddress(col.clipKey, col.clipper);\n', '        DssExecLib.setChangelogAddress(col.calcKey, col.calc);\n', '        ChainlogLike(DssExecLib.LOG).removeAddress(col.flipKey);\n', '    }\n', '\n', '    function actions() public override {\n', '        address MCD_VAT         = DssExecLib.vat();\n', '        address MCD_CAT         = DssExecLib.cat();\n', '        address MCD_DOG         = DssExecLib.getChangelogAddress("MCD_DOG");\n', '        address MCD_VOW         = DssExecLib.vow();\n', '        address MCD_SPOT        = DssExecLib.spotter();\n', '        address MCD_END         = DssExecLib.end();\n', '        address MCD_ESM         = DssExecLib.getChangelogAddress("MCD_ESM");\n', '        address FLIPPER_MOM     = DssExecLib.getChangelogAddress("FLIPPER_MOM");\n', '        address CLIPPER_MOM     = DssExecLib.getChangelogAddress("CLIPPER_MOM");\n', '        address ILK_REGISTRY    = DssExecLib.getChangelogAddress("ILK_REGISTRY");\n', '        address PIP_ETH         = DssExecLib.getChangelogAddress("PIP_ETH");\n', '        address PIP_WBTC        = DssExecLib.getChangelogAddress("PIP_WBTC");\n', '\n', '        // --------------------------------- ETH-A ---------------------------------\n', '        flipperToClipper(Collateral({\n', '            ilk: "ETH-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: PIP_ETH,\n', '            clipper: MCD_CLIP_ETH_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_ETH_A"),\n', '            calc: MCD_CLIP_CALC_ETH_A,\n', '            hole: 22 * MILLION * RAD,\n', '            chop: 113 * WAD / 100,\n', '            buf: 130 * RAY / 100,\n', '            tail: 140 minutes,\n', '            cusp: 40 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 0,\n', '            cut: 99 * RAY / 100,\n', '            step: 90 seconds,\n', '            tolerance: 50 * RAY / 100,\n', '            clipKey: "MCD_CLIP_ETH_A",\n', '            calcKey: "MCD_CLIP_CALC_ETH_A",\n', '            flipKey: "MCD_FLIP_ETH_A"\n', '        }));\n', '\n', '        // --------------------------------- ETH-B ---------------------------------\n', '\n', '        flipperToClipper(Collateral({\n', '            ilk: "ETH-B",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: PIP_ETH,\n', '            clipper: MCD_CLIP_ETH_B,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_ETH_B"),\n', '            calc: MCD_CLIP_CALC_ETH_B,\n', '            hole: 8 * MILLION * RAD,\n', '            chop: 113 * WAD / 100,\n', '            buf: 130 * RAY / 100,\n', '            tail: 140 minutes,\n', '            cusp: 40 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 0,\n', '            cut: 99 * RAY / 100,\n', '            step: 90 seconds,\n', '            tolerance: 50 * RAY / 100,\n', '            clipKey: "MCD_CLIP_ETH_B",\n', '            calcKey: "MCD_CLIP_CALC_ETH_B",\n', '            flipKey: "MCD_FLIP_ETH_B"\n', '        }));\n', '\n', '        // --------------------------------- ETH-C ---------------------------------\n', '\n', '        flipperToClipper(Collateral({\n', '            ilk: "ETH-C",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: PIP_ETH,\n', '            clipper: MCD_CLIP_ETH_C,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_ETH_C"),\n', '            calc: MCD_CLIP_CALC_ETH_C,\n', '            hole: 5 * MILLION * RAD,\n', '            chop: 113 * WAD / 100,\n', '            buf: 130 * RAY / 100,\n', '            tail: 140 minutes,\n', '            cusp: 40 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 0,\n', '            cut: 99 * RAY / 100,\n', '            step: 90 seconds,\n', '            tolerance: 50 * RAY / 100,\n', '            clipKey: "MCD_CLIP_ETH_C",\n', '            calcKey: "MCD_CLIP_CALC_ETH_C",\n', '            flipKey: "MCD_FLIP_ETH_C"\n', '        }));\n', '\n', '        // --------------------------------- WBTC-A ---------------------------------\n', '\n', '        flipperToClipper(Collateral({\n', '            ilk: "WBTC-A",\n', '            vat: MCD_VAT,\n', '            vow: MCD_VOW,\n', '            spotter: MCD_SPOT,\n', '            cat: MCD_CAT,\n', '            dog: MCD_DOG,\n', '            end: MCD_END,\n', '            esm: MCD_ESM,\n', '            flipperMom: FLIPPER_MOM,\n', '            clipperMom: CLIPPER_MOM,\n', '            ilkRegistry: ILK_REGISTRY,\n', '            pip: PIP_WBTC,\n', '            clipper: MCD_CLIP_WBTC_A,\n', '            flipper: DssExecLib.getChangelogAddress("MCD_FLIP_WBTC_A"),\n', '            calc: MCD_CLIP_CALC_WBTC_A,\n', '            hole: 15 * MILLION * RAD,\n', '            chop: 113 * WAD / 100,\n', '            buf: 130 * RAY / 100,\n', '            tail: 140 minutes,\n', '            cusp: 40 * RAY / 100,\n', '            chip: 1 * WAD / 1000,\n', '            tip: 0,\n', '            cut: 99 * RAY / 100,\n', '            step: 90 seconds,\n', '            tolerance: 50 * RAY / 100,\n', '            clipKey: "MCD_CLIP_WBTC_A",\n', '            calcKey: "MCD_CLIP_CALC_WBTC_A",\n', '            flipKey: "MCD_FLIP_WBTC_A"\n', '        }));\n', '\n', '        // ---------- Whitelist DeFi Saver as light feed and remove "lisko" as dark feed ----------\n', '\n', '        address[] memory addAddrs = new address[](1);\n', '        addAddrs[0] = DEFI_SAVER;\n', '        address[] memory remAddrs = new address[](1);\n', '        remAddrs[0] = LISKO;\n', '        address median;\n', '\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_ETH")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_BAT")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_WBTC")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_ZRX")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_KNC")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_MANA")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_USDT")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_COMP")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_LRC")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_LINK")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_BAL")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_YFI")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_UNI")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = OsmAbstract(DssExecLib.getChangelogAddress("PIP_AAVE")).src();\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '        median = ETHBTC;\n', '        DssExecLib.addWritersToMedianWhitelist(median, addAddrs);\n', '        DssExecLib.removeWritersFromMedianWhitelist(median, remAddrs);\n', '\n', '\n', '        DssExecLib.setChangelogVersion("1.5.0");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']