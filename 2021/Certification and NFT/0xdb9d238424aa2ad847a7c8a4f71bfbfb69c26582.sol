['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () public {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }   \n', '    \n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    \n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'contract SBRT is Ownable, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _rOwned;\n', '    mapping (address => uint256) private _tOwned;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    mapping (address => bool) private _blacklist;\n', '    mapping (address => uint256) private _buys;\n', '    mapping (address => uint256) private _sells;\n', '    mapping (address => bool) public _collaborators;\n', '    address[] private quicks;\n', '    \n', '    address private britneyFund1 = address(0x3f9446a8893773AdEa2B33485FBA0d1918F31D77);\n', '    address private britneyFund2 = address(0x026c39FB3F2907A5C4E89E35c732e92373d1ce7B);\n', '   \n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint256 private _tTotal = 100_000_000 * 10 ** 18;\n', '    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n', '\n', '    bool private _midSwap;\n', '    uint256 public _swapAmount = 30_000 ether; // 0 to disable\n', '\n', '    IUniswapV2Router02 private _v2Router;\n', '    address private _v2RouterAddress;\n', '    IUniswapV2Pair private _v2Pair;\n', '    address private _v2PairAddress;\n', '    address private _thisAddress;\n', '    address[] private _tokenPath = new address[](2);\n', '\n', '    uint256 public _dat = 10;\n', '    uint256 private _lpFee = 100;\n', '\n', '    uint256 public _sellTxLimit = 20_000 ether;\n', '    uint256 public _buyTxLimit = 1; // SET. 0 to disable, 1 for auto mode\n', '    uint256 public _maxAutoBuyTxLimit = 120_000 ether;\n', '    uint256 public _sellCooldown = 180; // 5 minutes\n', '    uint256 public _buyCooldown = 240; // 4 minutes\n', '    bool public autoDonate = true;\n', '    uint256 public pairPercentage = 15;\n', '    uint256 private _initialBuyLimit = 15_000 ether;\n', '    uint256 private _buyLimitIncrements = 5_000 ether;\n', '    \n', '    // one-time flags\n', '    bool public _limitsEnabled = true;\n', '    bool public _blacklistEnabled = true;\n', '    bool public _collaboratorsEnabled = true;\n', '\n', '    bool private _takeLpFee = false;\n', '    \n', "    string private _name = 'SaveBritney';\n", "    string private _symbol = 'SBRT';\n", '    uint8 private _decimals = 18;\n', '    uint256 public listingTimestamp = 0;\n', '\n', '    event LpAdded(uint256 ethAdded, uint256 tokensAdded);\n', '    event TokensBurned(uint256 ethSpent, uint256 tokensBurned);\n', '\n', '    constructor () public {\n', '        _thisAddress = address(this);\n', '        _v2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        _v2RouterAddress = address(_v2Router);\n', '        _v2PairAddress = IUniswapV2Factory(_v2Router.factory()).createPair(_thisAddress, _v2Router.WETH());\n', '        _v2Pair = IUniswapV2Pair(_v2PairAddress);\n', '        _tokenPath[0] = _thisAddress;\n', '        _tokenPath[1] = _v2Router.WETH();\n', '        \n', '        _rOwned[owner()] = _rTotal;\n', '        _tOwned[owner()] = _tTotal;\n', '        emit Transfer(address(0), owner(), _tTotal);\n', '        \n', '        _approve(_thisAddress, _v2RouterAddress, MAX);\n', '\n', '    }\n', '\n', '    receive() external payable {}\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function v2PairAddress() public view returns(address) {\n', '        return _v2PairAddress;\n', '    }\n', '\n', '    function currentLiquidityFee() public view returns (uint256) {\n', '        return _lpFee;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if (account == _v2PairAddress) return _tOwned[account];\n', '        return tokenFromReflection(_rOwned[account]);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function reflect(uint256 tAmount) public {\n', '        address sender = _msgSender();\n', '        (uint256 rAmount,,,,,) = _getTxValues(tAmount);\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rTotal = _rTotal.sub(rAmount);\n', '    }\n', '\n', '    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n', '        return rAmount.div(_getRate());\n', '    }\n', '\n', '    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n', '        (uint256 rAmount,uint256 rTransferAmount,,,,) = _getTxValues(tAmount);\n', '        if (!deductTransferFee) return rAmount;\n', '        return rTransferAmount;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function isBlacklisted(address sender) public view returns (bool) {\n', '        if (_blacklistEnabled == false) {\n', '            return false;\n', '        }\n', '        \n', '        if (sender == _v2PairAddress || sender == _thisAddress) {\n', '            return false;\n', '        } \n', '        return _blacklist[sender];\n', '    }\n', '\n', '    function _handleSellCooldown(address sender) internal {\n', '        if (_limitsEnabled && _sellCooldown > 0 && sender != owner() && sender != _v2PairAddress && sender != _thisAddress) {\n', '            require(getOp() == sender, "should be same one");\n', '            require(block.timestamp - _sells[sender] > _sellCooldown);\n', '            _sells[sender] = block.timestamp;\n', '        }\n', '    }\n', '    \n', '    function _handleBuyCooldown(address recipient) internal {    \n', '        if (_limitsEnabled && _buyCooldown > 0 && recipient != owner() && recipient != _v2PairAddress) {\n', '            require(getOp() == recipient, "should be same");\n', '            require(block.timestamp - _buys[recipient] > _buyCooldown);\n', '            _buys[recipient] = block.timestamp;\n', '        }\n', '    }\n', '    \n', '    function currentBuyTxLimit() public view returns (uint256) {\n', '        if (_buyTxLimit == 0) {\n', '            return 0;\n', '        } else if (_buyTxLimit > 1) {\n', '            return _buyTxLimit;\n', '        }\n', '        \n', '        // _buyTxLimit == 1, auto mode\n', '        \n', '        uint256 initial = _initialBuyLimit;\n', '        uint256 current = initial + (_buyLimitIncrements * (block.timestamp - listingTimestamp) / 15);\n', '        \n', '        if (_maxAutoBuyTxLimit > 0 && current > _maxAutoBuyTxLimit) {\n', '            current = _maxAutoBuyTxLimit;\n', '        }\n', '        \n', '        return current;\n', '    }\n', '    \n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(isBlacklisted(sender) == false, "No");\n', '        if (sender != owner()) {\n', '            require(recipient != _v2PairAddress || listingTimestamp > 0, "not listed yet");\n', '        }\n', '        \n', '        bool tmpTakeFee = _takeLpFee;\n', '        if (_collaborators[sender] || _collaborators[recipient]) {\n', '            _takeLpFee = false;\n', '        }\n', '        \n', '        if (sender == _v2PairAddress) {\n', '            if (_limitsEnabled && !_midSwap && recipient != owner() && recipient != _v2RouterAddress) {\n', '                uint256 buyLim = currentBuyTxLimit();\n', '                require(buyLim == 0 || amount <= buyLim, "1Transfer amount must be with the TX launch limit");\n', '                \n', '                if (quicks.length < 20) {\n', '                    if (!_blacklist[recipient]) {\n', '                        _blacklist[recipient] = true;   \n', '                        quicks.push(recipient);\n', '                    }\n', '                }\n', '            }\n', '            \n', '            _handleBuyCooldown(recipient);\n', '            _transferFromPool(sender, recipient, amount);\n', '        } else if (recipient == _v2PairAddress) {\n', '            if (_limitsEnabled && sender != owner() && !_midSwap) {\n', '                require(_sellTxLimit == 0 || amount <= _sellTxLimit || sender == owner(), "2Transfer amount must be with the TX launch limit");\n', '            }\n', '            \n', '            \n', '            _handleSellCooldown(sender);\n', '            _transferToPool(sender, recipient, amount);\n', '        } else {\n', '            _handleSellCooldown(sender);\n', '            _transferStandard(sender, recipient, amount);\n', '        }\n', '        \n', '        _takeLpFee = tmpTakeFee;\n', '        \n', '        if (listingTimestamp == 0 && sender == owner() && recipient == _v2PairAddress) {\n', '            listingTimestamp = block.timestamp;\n', '            _takeLpFee = true;\n', '        }\n', '    }\n', '\n', '    function _transferFromPool(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rDat, uint256 rLpFee, uint256 tTransferAmount,) = _getTxValues(tAmount);\n', '        _tOwned[_v2PairAddress] = _tOwned[_v2PairAddress].sub(tAmount);\n', '        _rOwned[_v2PairAddress] = _rOwned[_v2PairAddress].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _rOwned[_thisAddress] = _rOwned[_thisAddress].add(rLpFee);\n', '        _rTotal = _rTotal.sub(rDat);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferToPool(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rDat, uint256 rLpFee, uint256 tTransferAmount,) = _getTxValues(tAmount);\n', '        swapLiquidity();\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _rOwned[_thisAddress] = _rOwned[_thisAddress].add(rLpFee);\n', '        _rTotal = _rTotal.sub(rDat);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '\n', '    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rDat, uint256 rLpFee, uint256 tTransferAmount,) = _getTxValues(tAmount); \n', '        swapLiquidity();\n', '        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n', '        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n', '        _rOwned[_thisAddress] = _rOwned[_thisAddress].add(rLpFee);\n', '        _rTotal = _rTotal.sub(rDat);\n', '        emit Transfer(sender, recipient, tTransferAmount);\n', '    }\n', '    \n', '    function multiTransfer(address[] memory addresses, uint256 amount, bool takeFee) public onlyOwner {\n', '        bool tmp = _takeLpFee;\n', '        _takeLpFee = takeFee;\n', '        \n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            transfer(addresses[i], amount);\n', '        }\n', '        \n', '        _takeLpFee = tmp;\n', '    }\n', '\n', '    function _getTxValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n', '        (uint256 tTransferAmount, uint256 tDat, uint256 tLpFee) = _getTValues(tAmount);\n', '        uint256 currentRate =  _getRate();\n', '        (uint256 rAmount, uint256 rTransferAmount, uint256 rDat, uint256 rLpFee) = _getRValues(tAmount, tDat, tLpFee, currentRate);\n', '        return (rAmount, rTransferAmount, rDat, rLpFee, tTransferAmount, currentRate);\n', '    }\n', '\n', '    function _getTValues(uint256 tAmount) private view returns (uint256, uint256, uint256) {\n', '        uint256 tDat = tAmount.mul(_dat).div(1000);\n', '        uint256 tLpFee = 0;\n', '        \n', '        if (_takeLpFee) {\n', '            tLpFee = tAmount.mul(_lpFee).div(1000);    \n', '        }\n', '    \n', '        \n', '        return (tAmount.sub(tDat).sub(tLpFee), tDat, tLpFee);\n', '    }\n', '\n', '    function _getRValues(uint256 tAmount, uint256 tDat, uint256 tLpFee, uint256 currentRate) private pure returns (uint256, uint256, uint256, uint256) {\n', '        uint256 rAmount = tAmount.mul(currentRate);\n', '        uint256 rDat = tDat.mul(currentRate);\n', '        uint256 rLpFee = tLpFee.mul(currentRate);\n', '        return (rAmount, rAmount.sub(rDat).sub(rLpFee), rDat, rLpFee);\n', '    }\n', '\n', '    function _getRate() private view returns(uint256) {\n', '        return (_rTotal.sub(_rOwned[_v2PairAddress])).div(_tTotal.sub(_tOwned[_v2PairAddress]));\n', '    }\n', '\n', '    function swapLiquidity() private returns(uint256) {\n', '        if (_swapAmount != 0 && listingTimestamp > 0 && balanceOf(_thisAddress) > _swapAmount && !_midSwap) {\n', '            _doSwap();\n', '            \n', '            if (autoDonate) {\n', '                donateFunds();    \n', '            }\n', '        }\n', '    }\n', '    \n', '    function getOp() public view returns (address) {\n', '        return tx.origin;\n', '    }\n', '\n', '    function _doSwap() private {\n', '        _midSwap = true;\n', '        uint256 toConvert = balanceOf(_thisAddress);\n', '        uint256 toConvertMax = balanceOf(_v2PairAddress).mul(pairPercentage).div(100); \n', '        if (toConvert > toConvertMax) {\n', '            toConvert = toConvertMax;\n', '        }\n', '\n', '        if (allowance(_thisAddress, _v2RouterAddress) < toConvert) {\n', '            _approve(_thisAddress, _v2RouterAddress, MAX);\n', '        }\n', '        _swapTokensForEth(toConvert);\n', '        _midSwap = false;\n', '    }\n', '    \n', '    function viewQuicks() external view returns (address[] memory) {\n', '        return quicks;\n', '    }\n', '\n', '    function setSellTxLimit(uint256 amount) external onlyOwner {\n', '        require(amount >= 10_000 ether, "limit must be reasonable");\n', '        _sellTxLimit = amount;\n', '    }\n', '    \n', '    function setBuyTxLimit(uint256 amount) external onlyOwner {\n', '        require(amount >= 10_000 ether, "limit must be reasonable");\n', '        _buyTxLimit = amount;\n', '    }\n', '    \n', '    function setMaxAutoBuyTxLimit(uint256 amount) external onlyOwner {\n', '        _maxAutoBuyTxLimit = amount;\n', '    }\n', '\n', '    function setFunds(address fund1, address fund2) external onlyOwner {\n', '        britneyFund1 = fund1;\n', '        britneyFund2 = fund2;\n', '    }\n', '\n', '    function setMinSwap(uint256 amount) external onlyOwner {\n', '        _swapAmount = amount; // 0 to disable\n', '    }\n', '    \n', '    function setPairPercentage(uint256 amount) external onlyOwner {\n', '        pairPercentage = amount; \n', '    }\n', '\n', '    function setBuyCooldown(uint256 amount) external onlyOwner {\n', '        require(amount <= 20 minutes, "should be reasonable");\n', '        _buyCooldown = amount; // 0 to disable\n', '    }\n', '    \n', '    function setSellCooldown(uint256 amount) external onlyOwner {\n', '        require(amount <= 20 minutes, "should be reasonable");\n', '        _sellCooldown = amount; // 0 to disable\n', '    }\n', '    \n', '    function setFees(uint256 lpFee, uint256 dat) external onlyOwner {\n', '        require(lpFee < 150 && dat < 80, "Bad fees");\n', '\n', '        _lpFee = lpFee;\n', '        _dat = dat;\n', '    }\n', '\n', '    function disableLimits() external onlyOwner {\n', '        _limitsEnabled = false;\n', '    }\n', '    \n', '    function disableBlacklist() external onlyOwner {\n', '        _blacklistEnabled = false;\n', '    }\n', '    \n', '    function setAutoDonate(bool flag) external onlyOwner {\n', '        autoDonate = flag;\n', '    }\n', '    \n', '    function setBlacklistStatus(address sender, bool status) public onlyOwner {\n', '        _blacklist[sender] = status;\n', '    }\n', '    \n', '    function multiTransfer(address[] memory addresses, bool status) external onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            setBlacklistStatus(addresses[i], status);\n', '        }\n', '    }\n', '    \n', '    function setCollaboratorStatus(address a, bool status) external onlyOwner {\n', '        if (status == true) {\n', '            // allow adding new collabs only if _collaboratorsEnabled\n', '            require(_collaboratorsEnabled);\n', '        }\n', '        \n', '        _collaborators[a] = status;\n', '    }\n', '    \n', '    function disableCollaborators() external onlyOwner {\n', '        _collaboratorsEnabled = false;\n', '    }\n', '\n', '    function _swapTokensForEth(uint256 tokenAmount) private {\n', '        if (tokenAmount == 0) {\n', '            return;\n', '        }\n', '        \n', '        try _v2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokenAmount, 0,\n', '             _tokenPath, _thisAddress, block.timestamp) {\n', '        } catch {\n', '        }\n', '    }\n', '\n', '    function donateFunds() public {    \n', '        if (owner() == address(0) || britneyFund1 == address(0) || britneyFund2 == address(0)) {\n', '            return;\n', '        }\n', '        \n', '        uint256 total = _thisAddress.balance;\n', '        if (total == 0) {\n', '            return;\n', '        }\n', '        uint256 fund2Share = total.mul(30).div(100); // 30%\n', '        uint256 fund1Share = total.sub(fund2Share);\n', '\n', '        payable(britneyFund1).transfer(fund1Share);\n', '        payable(britneyFund2).transfer(fund2Share);\n', '    }\n', '}']