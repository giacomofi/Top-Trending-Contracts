['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-07\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-08-17\n', '*/\n', '\n', '// File: contracts/bancor/token/interfaces/IERC20Token.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '/*\n', '    ERC20 Standard Token interface\n', '*/\n', 'contract IERC20Token {\n', "    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n", '    function name() public view returns (string) {this;}\n', '    function symbol() public view returns (string) {this;}\n', '    function decimals() public view returns (uint8) {this;}\n', '    function totalSupply() public view returns (uint256) {this;}\n', '    function balanceOf(address _owner) public view returns (uint256) {_owner; this;}\n', '    function allowance(address _owner, address _spender) public view returns (uint256) {_owner; _spender; this;}\n', '\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n', '    function approve(address _spender, uint256 _value) public returns (bool success);\n', '}\n', '\n', '// File: contracts/bancor/utility/interfaces/IOwned.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '/*\n', '    Owned contract interface\n', '*/\n', 'contract IOwned {\n', "    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n", '    function owner() public view returns (address) {this;}\n', '\n', '    function transferOwnership(address _newOwner) public;\n', '    function acceptOwnership() public;\n', '}\n', '\n', '// File: contracts/bancor/utility/Owned.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '/**\n', '  * @dev Provides support and utilities for contract ownership\n', '*/\n', 'contract Owned is IOwned {\n', '    address public owner;\n', '    address public newOwner;\n', '\n', '    /**\n', '      * @dev triggered when the owner is updated\n', '      *\n', '      * @param _prevOwner previous owner\n', '      * @param _newOwner  new owner\n', '    */\n', '    event OwnerUpdate(address indexed _prevOwner, address indexed _newOwner);\n', '\n', '    /**\n', '      * @dev initializes a new Owned instance\n', '    */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    // allows execution by the owner only\n', '    modifier ownerOnly {\n', '        _ownerOnly();\n', '        _;\n', '    }\n', '\n', '    // error message binary size optimization\n', '    function _ownerOnly() internal view {\n', '        require(msg.sender == owner, "ERR_ACCESS_DENIED");\n', '    }\n', '\n', '    /**\n', '      * @dev allows transferring the contract ownership\n', '      * the new owner still needs to accept the transfer\n', '      * can only be called by the contract owner\n', '      *\n', '      * @param _newOwner    new contract owner\n', '    */\n', '    function transferOwnership(address _newOwner) public ownerOnly {\n', '        require(_newOwner != owner, "ERR_SAME_OWNER");\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    /**\n', '      * @dev used by a new owner to accept an ownership transfer\n', '    */\n', '    function acceptOwnership() public {\n', '        require(msg.sender == newOwner, "ERR_ACCESS_DENIED");\n', '        emit OwnerUpdate(owner, newOwner);\n', '        owner = newOwner;\n', '        newOwner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IOracle.sol\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', 'contract IOracle {\n', '    function getValue() public view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IAggregator.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', 'contract IAggregator {\n', '    function latestAnswer() public view returns (int256);\n', '}\n', '\n', '// File: contracts/Oracle.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', '\n', '\n', 'contract Oracle is IOracle, Owned {\n', '\n', '    IAggregator public aggregatorBNTUSD;\n', '\n', '    constructor(IAggregator _aggregatorBNTUSD) public {\n', '        aggregatorBNTUSD = _aggregatorBNTUSD;\n', '    }\n', '\n', '    function updateAggregator(IAggregator _aggregator) public ownerOnly {\n', '        aggregatorBNTUSD = _aggregator;\n', '    }\n', '\n', '    function getValue() public view returns (uint256) {\n', '        return uint256(aggregatorBNTUSD.latestAnswer()) / 1e2;\n', '    }\n', '\n', '    function transferERC20Token(IERC20Token _token, address _to, uint256 _amount) public ownerOnly {\n', '        _token.transfer(_to, _amount);\n', '    }\n', '\n', '}']