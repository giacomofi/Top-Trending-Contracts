['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'contract StakingTokenWrapper is ReentrancyGuard {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public stakingToken;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /**\n', '     * @dev TokenWrapper constructor\n', '     * @param _stakingToken Wrapped token to be staked\n', '     */\n', '    constructor(address _stakingToken) internal {\n', '        stakingToken = IERC20(_stakingToken);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total amount of the staked token\n', '     * @return uint256 total supply\n', '     */\n', '    function totalSupply()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the balance of a given account\n', '     * @param _account User for which to retrieve balance\n', '     */\n', '    function balanceOf(address _account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _balances[_account];\n', '    }\n', '\n', '    /**\n', '     * @dev Deposits a given amount of StakingToken from sender\n', '     * @param _amount Units of StakingToken\n', '     */\n', '    function _stake(address _beneficiary, uint256 _amount)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        _balances[_beneficiary] = _balances[_beneficiary].add(_amount);\n', '        stakingToken.safeTransferFrom(msg.sender, address(this), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given stake from sender\n', '     * @param _amount Units of StakingToken\n', '     */\n', '    function _withdraw(uint256 _amount)\n', '        internal\n', '        nonReentrant\n', '    {\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        _balances[msg.sender] = _balances[msg.sender].sub(_amount);\n', '        stakingToken.safeTransfer(msg.sender, _amount);\n', '    }\n', '}\n', '\n', 'contract ModuleKeys {\n', '\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE = 0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING = 0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN = 0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB = 0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER = 0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER = 0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN = 0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER = 0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR = 0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '    function cancelProposedModule(bytes32 _key) external;\n', '    function acceptProposedModule(bytes32 _key) external;\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '    function cancelLockModule(bytes32 _key) external;\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'contract Module is ModuleKeys {\n', '\n', '    INexus public nexus;\n', '\n', '    /**\n', '     * @dev Initialises the Module by setting publisher addresses,\n', '     *      and reading all available system module information\n', '     */\n', '    constructor(address _nexus) internal {\n', '        require(_nexus != address(0), "Nexus is zero address");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(\n', '            msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _liquidator() internal view returns (address) {\n', '        return nexus.getModule(KEY_LIQUIDATOR);\n', '    }\n', '}\n', '\n', 'interface IRewardsDistributionRecipient {\n', '    function notifyRewardAmount(uint256 reward) external;\n', '    function getRewardToken() external view returns (IERC20);\n', '}\n', '\n', 'contract RewardsDistributionRecipient is IRewardsDistributionRecipient, Module {\n', '\n', '    // @abstract\n', '    function notifyRewardAmount(uint256 reward) external;\n', '    function getRewardToken() external view returns (IERC20);\n', '\n', '    // This address has the ability to distribute the rewards\n', '    address public rewardsDistributor;\n', '\n', '    /** @dev Recipient is a module, governed by mStable governance */\n', '    constructor(address _nexus, address _rewardsDistributor)\n', '        internal\n', '        Module(_nexus)\n', '    {\n', '        rewardsDistributor = _rewardsDistributor;\n', '    }\n', '\n', '    /**\n', '     * @dev Only the rewards distributor can notify about rewards\n', '     */\n', '    modifier onlyRewardsDistributor() {\n', '        require(msg.sender == rewardsDistributor, "Caller is not reward distributor");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the rewardsDistributor - only called by mStable governor\n', '     * @param _rewardsDistributor   Address of the new distributor\n', '     */\n', '    function setRewardsDistribution(address _rewardsDistributor)\n', '        external\n', '        onlyGovernor\n', '    {\n', '        rewardsDistributor = _rewardsDistributor;\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @notice Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * @dev bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x.mul(FULL_SCALE);\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(uint256 x, uint256 y, uint256 scale)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        uint256 z = x.mul(y);\n', '        // return 9e38 / 1e18 = 9e18\n', '        return z.div(scale);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x.mul(y);\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled.add(FULL_SCALE.sub(1));\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil.div(FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        uint256 z = x.mul(FULL_SCALE);\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return z.div(y);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x.mul(ratio);\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled.add(RATIO_SCALE.sub(1));\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil.div(RATIO_SCALE);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio)\n', '        internal\n', '        pure\n', '        returns (uint256 c)\n', '    {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        uint256 y = x.mul(RATIO_SCALE);\n', '        // return 1e22 / 1e12 = 1e10\n', '        return y.div(ratio);\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', '// Internal\n', '// Libs\n', '/**\n', ' * @title  StakingRewards\n', ' * @author Originally: Synthetix (forked from /Synthetixio/synthetix/contracts/StakingRewards.sol)\n', ' *         Audit: https://github.com/sigp/public-audits/blob/master/synthetix/unipool/review.pdf\n', ' *         Changes by: Stability Labs Pty. Ltd.\n', ' * @notice Rewards stakers of a given LP token (a.k.a StakingToken) with RewardsToken, on a pro-rata basis\n', " * @dev    Uses an ever increasing 'rewardPerTokenStored' variable to distribute rewards\n", ' * each time a write action is called in the contract. This allows for passive reward accrual.\n', ' *         Changes:\n', ' *           - Cosmetic (comments, readability)\n', ' *           - Addition of getRewardToken()\n', ' *           - Changing of `StakingTokenWrapper` funcs from `super.stake` to `_stake`\n', ' *           - Introduced a `stake(_beneficiary)` function to enable contract wrappers to stake on behalf\n', ' */\n', 'contract StakingRewards is StakingTokenWrapper, RewardsDistributionRecipient {\n', '\n', '    using StableMath for uint256;\n', '\n', '    IERC20 public rewardsToken;\n', '\n', '    uint256 public constant DURATION = 7 days;\n', '\n', '    // Timestamp for current period finish\n', '    uint256 public periodFinish = 0;\n', '    // RewardRate for the rest of the PERIOD\n', '    uint256 public rewardRate = 0;\n', '    // Last time any user took action\n', '    uint256 public lastUpdateTime = 0;\n', '    // Ever increasing rewardPerToken rate, based on % of total supply\n', '    uint256 public rewardPerTokenStored = 0;\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '\n', '    event RewardAdded(uint256 reward);\n', '    event Staked(address indexed user, uint256 amount, address payer);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '\n', '    /** @dev StakingRewards is a TokenWrapper and RewardRecipient */\n', '    constructor(\n', '        address _nexus,\n', '        address _stakingToken,\n', '        address _rewardsToken,\n', '        address _rewardsDistributor\n', '    )\n', '        public\n', '        StakingTokenWrapper(_stakingToken)\n', '        RewardsDistributionRecipient(_nexus, _rewardsDistributor)\n', '    {\n', '        rewardsToken = IERC20(_rewardsToken);\n', '    }\n', '\n', '    /** @dev Updates the reward for a given address, before executing function */\n', '    modifier updateReward(address _account) {\n', '        // Setting of global vars\n', '        (uint256 newRewardPerToken, uint256 lastApplicableTime) = _rewardPerToken();\n', '        // If statement protects against loss in initialisation case\n', '        if(newRewardPerToken > 0) {\n', '            rewardPerTokenStored = newRewardPerToken;\n', '            lastUpdateTime = lastApplicableTime;\n', '            // Setting of personal vars based on new globals\n', '            if (_account != address(0)) {\n', '                rewards[_account] = _earned(_account, newRewardPerToken);\n', '                userRewardPerTokenPaid[_account] = newRewardPerToken;\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    /***************************************\n', '                    ACTIONS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for the sender\n', '     * @param _amount Units of StakingToken\n', '     */\n', '    function stake(uint256 _amount)\n', '        external\n', '    {\n', '        _stake(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for a given beneficiary\n', '     * @param _beneficiary Staked tokens are credited to this address\n', '     * @param _amount      Units of StakingToken\n', '     */\n', '    function stake(address _beneficiary, uint256 _amount)\n', '        external\n', '    {\n', '        _stake(_beneficiary, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Internally stakes an amount by depositing from sender,\n', '     * and crediting to the specified beneficiary\n', '     * @param _beneficiary Staked tokens are credited to this address\n', '     * @param _amount      Units of StakingToken\n', '     */\n', '    function _stake(address _beneficiary, uint256 _amount)\n', '        internal\n', '        updateReward(_beneficiary)\n', '    {\n', '        require(_amount > 0, "Cannot stake 0");\n', '        super._stake(_beneficiary, _amount);\n', '        emit Staked(_beneficiary, _amount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws stake from pool and claims any rewards\n', '     */\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '        claimReward();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws given stake amount from the pool\n', '     * @param _amount Units of the staked token to withdraw\n', '     */\n', '    function withdraw(uint256 _amount)\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', '        require(_amount > 0, "Cannot withdraw 0");\n', '        _withdraw(_amount);\n', '        emit Withdrawn(msg.sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Claims outstanding rewards for the sender.\n', '     * First updates outstanding reward allocation and then transfers.\n', '     */\n', '    function claimReward()\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', '        uint256 reward = rewards[msg.sender];\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            rewardsToken.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '\n', '    /***************************************\n', '                    GETTERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Gets the RewardsToken\n', '     */\n', '    function getRewardToken()\n', '        external\n', '        view\n', '        returns (IERC20)\n', '    {\n', '        return rewardsToken;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the last applicable timestamp for this reward period\n', '     */\n', '    function lastTimeRewardApplicable()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return StableMath.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards per token since last update,\n', '     * and sums with stored to give the new cumulative reward per token\n', "     * @return 'Reward' per staked token\n", '     */\n', '    function rewardPerToken()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        (uint256 rewardPerToken_, ) = _rewardPerToken();\n', '        return rewardPerToken_;\n', '    }\n', '\n', '    function _rewardPerToken()\n', '        internal\n', '        view\n', '        returns (uint256 rewardPerToken_, uint256 lastTimeRewardApplicable_)\n', '    {\n', '        uint256 lastApplicableTime = lastTimeRewardApplicable(); // + 1 SLOAD\n', '        uint256 timeDelta = lastApplicableTime.sub(lastUpdateTime); // + 1 SLOAD\n', '        // If this has been called twice in the same block, shortcircuit to reduce gas\n', '        if(timeDelta == 0) {\n', '            return (rewardPerTokenStored, lastApplicableTime);\n', '        }\n', '        // new reward units to distribute = rewardRate * timeSinceLastUpdate\n', '        uint256 rewardUnitsToDistribute = rewardRate.mul(timeDelta); // + 1 SLOAD\n', '        uint256 supply = totalSupply(); // + 1 SLOAD\n', '        // If there is no StakingToken liquidity, avoid div(0)\n', '        // If there is nothing to distribute, short circuit\n', '        if (supply == 0 || rewardUnitsToDistribute == 0) {\n', '            return (rewardPerTokenStored, lastApplicableTime);\n', '        }\n', '        // new reward units per token = (rewardUnitsToDistribute * 1e18) / totalTokens\n', '        uint256 unitsToDistributePerToken = rewardUnitsToDistribute.divPrecisely(supply);\n', '        // return summed rate\n', '        return (rewardPerTokenStored.add(unitsToDistributePerToken), lastApplicableTime); // + 1 SLOAD\n', '    }\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards a user has earned\n', '     * @param _account User address\n', '     * @return Total reward amount earned\n', '     */\n', '    function earned(address _account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _earned(_account, rewardPerToken());\n', '    }\n', '\n', '    function _earned(address _account, uint256 _currentRewardPerToken)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        // current rate per token - rate user previously received\n', '        uint256 userRewardDelta = _currentRewardPerToken.sub(userRewardPerTokenPaid[_account]); // + 1 SLOAD\n', '        // Short circuit if there is nothing new to distribute\n', '        if(userRewardDelta == 0){\n', '            return rewards[_account];\n', '        }\n', '        // new reward = staked tokens * difference in rate\n', '        uint256 userNewReward = balanceOf(_account).mulTruncate(userRewardDelta); // + 1 SLOAD\n', '        // add to previous rewards\n', '        return rewards[_account].add(userNewReward);\n', '    }\n', '\n', '\n', '    /***************************************\n', '                    ADMIN\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Notifies the contract that new rewards have been added.\n', '     * Calculates an updated rewardRate based on the rewards in period.\n', '     * @param _reward Units of RewardToken that have been added to the pool\n', '     */\n', '    function notifyRewardAmount(uint256 _reward)\n', '        external\n', '        onlyRewardsDistributor\n', '        updateReward(address(0))\n', '    {\n', '        require(_reward < 1e24, "Cannot notify with more than a million units");\n', '\n', '        uint256 currentTime = block.timestamp;\n', '        // If previous period over, reset rewardRate\n', '        if (currentTime >= periodFinish) {\n', '            rewardRate = _reward.div(DURATION);\n', '        }\n', '        // If additional reward to existing period, calc sum\n', '        else {\n', '            uint256 remaining = periodFinish.sub(currentTime);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = _reward.add(leftover).div(DURATION);\n', '        }\n', '\n', '        lastUpdateTime = currentTime;\n', '        periodFinish = currentTime.add(DURATION);\n', '\n', '        emit RewardAdded(_reward);\n', '    }\n', '}']