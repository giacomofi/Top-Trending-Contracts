['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.7.6;   \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}      \n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IWETH {\n', '    function allowance(address, address) public virtual view returns (uint256);\n', '\n', '    function balanceOf(address) public virtual view returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) public virtual returns (bool);\n', '\n', '    function deposit() public payable virtual;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}      \n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}      \n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TokenUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function approveToken(\n', '        address _tokenAddr,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_tokenAddr == ETH_ADDR) return;\n', '\n', '        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n', '            IERC20(_tokenAddr).safeApprove(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function pullTokensIfNeeded(\n', '        address _token,\n', '        address _from,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        // handle max uint amount\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, _from);\n', '        }\n', '\n', '        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n', '            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawTokens(\n', '        address _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, address(this));\n', '        }\n', '\n', '        if (_to != address(0) && _to != address(this) && _amount != 0) {\n', '            if (_token != ETH_ADDR) {\n', '                IERC20(_token).safeTransfer(_to, _amount);\n', '            } else {\n', '                payable(_to).transfer(_amount);\n', '            }\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function depositWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).deposit{value: _amount}();\n', '    }\n', '\n', '    function withdrawWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).withdraw(_amount);\n', '    }\n', '\n', '    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n', '        if (_tokenAddr == ETH_ADDR) {\n', '            return _acc.balance;\n', '        } else {\n', '            return IERC20(_tokenAddr).balanceOf(_acc);\n', '        }\n', '    }\n', '\n', '    function getTokenDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == ETH_ADDR) return 18;\n', '\n', '        return IERC20(_token).decimals();\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '// Common interface for the Trove Manager.\n', 'interface ITroveManager {\n', '    \n', '    // --- Events ---\n', '\n', '    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n', '    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n', '    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\n', '    event ActivePoolAddressChanged(address _activePoolAddress);\n', '    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n', '    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n', '    event GasPoolAddressChanged(address _gasPoolAddress);\n', '    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n', '    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n', '    event LQTYTokenAddressChanged(address _lqtyTokenAddress);\n', '    event LQTYStakingAddressChanged(address _lqtyStakingAddress);\n', '\n', '    event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation, uint _LUSDGasCompensation);\n', '    event Redemption(uint _attemptedLUSDAmount, uint _actualLUSDAmount, uint _ETHSent, uint _ETHFee);\n', '    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\n', '    event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);\n', '    event BaseRateUpdated(uint _baseRate);\n', '    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\n', '    event TotalStakesUpdated(uint _newTotalStakes);\n', '    event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);\n', '    event LTermsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n', '    event TroveSnapshotsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n', '    event TroveIndexUpdated(address _borrower, uint _newIndex);\n', '\n', '    function getTroveOwnersCount() external view returns (uint);\n', '\n', '    function getTroveFromTroveOwnersArray(uint _index) external view returns (address);\n', '\n', '    function getNominalICR(address _borrower) external view returns (uint);\n', '    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\n', '\n', '    function liquidate(address _borrower) external;\n', '\n', '    function liquidateTroves(uint _n) external;\n', '\n', '    function batchLiquidateTroves(address[] calldata _troveArray) external;\n', '\n', '    function redeemCollateral(\n', '        uint _LUSDAmount,\n', '        address _firstRedemptionHint,\n', '        address _upperPartialRedemptionHint,\n', '        address _lowerPartialRedemptionHint,\n', '        uint _partialRedemptionHintNICR,\n', '        uint _maxIterations,\n', '        uint _maxFee\n', '    ) external; \n', '\n', '    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\n', '\n', '    function updateTroveRewardSnapshots(address _borrower) external;\n', '\n', '    function addTroveOwnerToArray(address _borrower) external returns (uint index);\n', '\n', '    function applyPendingRewards(address _borrower) external;\n', '\n', '    function getPendingETHReward(address _borrower) external view returns (uint);\n', '\n', '    function getPendingLUSDDebtReward(address _borrower) external view returns (uint);\n', '\n', '     function hasPendingRewards(address _borrower) external view returns (bool);\n', '\n', '    function getEntireDebtAndColl(address _borrower) external view returns (\n', '        uint debt, \n', '        uint coll, \n', '        uint pendingLUSDDebtReward, \n', '        uint pendingETHReward\n', '    );\n', '\n', '    function closeTrove(address _borrower) external;\n', '\n', '    function removeStake(address _borrower) external;\n', '\n', '    function getRedemptionRate() external view returns (uint);\n', '    function getRedemptionRateWithDecay() external view returns (uint);\n', '\n', '    function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\n', '\n', '    function getBorrowingRate() external view returns (uint);\n', '    function getBorrowingRateWithDecay() external view returns (uint);\n', '\n', '    function getBorrowingFee(uint LUSDDebt) external view returns (uint);\n', '    function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\n', '\n', '    function decayBaseRateFromBorrowing() external;\n', '\n', '    function getTroveStatus(address _borrower) external view returns (uint);\n', '    \n', '    function getTroveStake(address _borrower) external view returns (uint);\n', '\n', '    function getTroveDebt(address _borrower) external view returns (uint);\n', '\n', '    function getTroveColl(address _borrower) external view returns (uint);\n', '\n', '    function setTroveStatus(address _borrower, uint num) external;\n', '\n', '    function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);\n', '\n', '    function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint); \n', '\n', '    function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint); \n', '\n', '    function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint); \n', '\n', '    function getTCR(uint _price) external view returns (uint);\n', '\n', '    function checkRecoveryMode(uint _price) external view returns (bool);\n', '}      \n', '\n', '\n', '\n', '// Common interface for the Trove Manager.\n', 'interface IBorrowerOperations {\n', '\n', '    // --- Events ---\n', '\n', '    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n', '    event ActivePoolAddressChanged(address _activePoolAddress);\n', '    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n', '    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n', '    event GasPoolAddressChanged(address _gasPoolAddress);\n', '    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n', '    event PriceFeedAddressChanged(address  _newPriceFeedAddress);\n', '    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n', '    event LUSDTokenAddressChanged(address _lusdTokenAddress);\n', '    event LQTYStakingAddressChanged(address _lqtyStakingAddress);\n', '\n', '    event TroveCreated(address indexed _borrower, uint arrayIndex);\n', '    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\n', '    event LUSDBorrowingFeePaid(address indexed _borrower, uint _LUSDFee);\n', '\n', '    // --- Functions ---\n', '\n', '    function openTrove(uint _maxFee, uint _LUSDAmount, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function addColl(address _upperHint, address _lowerHint) external payable;\n', '\n', '    function moveETHGainToTrove(address _user, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function withdrawColl(uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function withdrawLUSD(uint _maxFee, uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function repayLUSD(uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function closeTrove() external;\n', '\n', '    function adjustTrove(uint _maxFee, uint _collWithdrawal, uint _debtChange, bool isDebtIncrease, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function claimCollateral() external;\n', '\n', '    function getCompositeDebt(uint _debt) external pure returns (uint);\n', '}      \n', '\n', '\n', '\n', 'interface IPriceFeed {\n', '    function lastGoodPrice() external pure returns (uint256);\n', '}      \n', '\n', '\n', '\n', 'interface IHintHelpers {\n', '\n', '    function getRedemptionHints(\n', '        uint _LUSDamount, \n', '        uint _price,\n', '        uint _maxIterations\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            address firstRedemptionHint,\n', '            uint partialRedemptionHintNICR,\n', '            uint truncatedLUSDamount\n', '        );\n', '\n', '    function getApproxHint(uint _CR, uint _numTrials, uint _inputRandomSeed)\n', '        external\n', '        view\n', '        returns (address hintAddress, uint diff, uint latestRandomSeed);\n', '\n', '    function computeNominalCR(uint _coll, uint _debt) external pure returns (uint);\n', '\n', '    function computeCR(uint _coll, uint _debt, uint _price) external pure returns (uint);\n', '}      \n', '\n', '\n', '\n', '// Common interface for the SortedTroves Doubly Linked List.\n', 'interface ISortedTroves {\n', '\n', '    // --- Events ---\n', '    \n', '    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\n', '    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\n', '    event NodeAdded(address _id, uint _NICR);\n', '    event NodeRemoved(address _id);\n', '\n', '    // --- Functions ---\n', '    \n', '    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\n', '\n', '    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\n', '\n', '    function remove(address _id) external;\n', '\n', '    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\n', '\n', '    function contains(address _id) external view returns (bool);\n', '\n', '    function isFull() external view returns (bool);\n', '\n', '    function isEmpty() external view returns (bool);\n', '\n', '    function getSize() external view returns (uint256);\n', '\n', '    function getMaxSize() external view returns (uint256);\n', '\n', '    function getFirst() external view returns (address);\n', '\n', '    function getLast() external view returns (address);\n', '\n', '    function getNext(address _id) external view returns (address);\n', '\n', '    function getPrev(address _id) external view returns (address);\n', '\n', '    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\n', '\n', '    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\n', '}      \n', '\n', '\n', 'interface ICollSurplusPool {\n', '\n', '    // --- Events ---\n', '    \n', '    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n', '    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n', '    event ActivePoolAddressChanged(address _newActivePoolAddress);\n', '\n', '    event CollBalanceUpdated(address indexed _account, uint _newBalance);\n', '    event EtherSent(address _to, uint _amount);\n', '\n', '    // --- Contract setters ---\n', '\n', '    function setAddresses(\n', '        address _borrowerOperationsAddress,\n', '        address _troveManagerAddress,\n', '        address _activePoolAddress\n', '    ) external;\n', '\n', '    function getETH() external view returns (uint);\n', '\n', '    function getCollateral(address _account) external view returns (uint);\n', '\n', '    function accountSurplus(address _account, uint _amount) external;\n', '\n', '    function claimColl(address _account) external;\n', '}      \n', '\n', 'interface IStabilityPool {\n', '\n', '    // --- Events ---\n', '    \n', '    event StabilityPoolETHBalanceUpdated(uint _newBalance);\n', '    event StabilityPoolLUSDBalanceUpdated(uint _newBalance);\n', '\n', '    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n', '    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n', '    event ActivePoolAddressChanged(address _newActivePoolAddress);\n', '    event DefaultPoolAddressChanged(address _newDefaultPoolAddress);\n', '    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\n', '    event SortedTrovesAddressChanged(address _newSortedTrovesAddress);\n', '    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n', '    event CommunityIssuanceAddressChanged(address _newCommunityIssuanceAddress);\n', '\n', '    event P_Updated(uint _P);\n', '    event S_Updated(uint _S, uint128 _epoch, uint128 _scale);\n', '    event G_Updated(uint _G, uint128 _epoch, uint128 _scale);\n', '    event EpochUpdated(uint128 _currentEpoch);\n', '    event ScaleUpdated(uint128 _currentScale);\n', '\n', '    event FrontEndRegistered(address indexed _frontEnd, uint _kickbackRate);\n', '    event FrontEndTagSet(address indexed _depositor, address indexed _frontEnd);\n', '\n', '    event DepositSnapshotUpdated(address indexed _depositor, uint _P, uint _S, uint _G);\n', '    event FrontEndSnapshotUpdated(address indexed _frontEnd, uint _P, uint _G);\n', '    event UserDepositChanged(address indexed _depositor, uint _newDeposit);\n', '    event FrontEndStakeChanged(address indexed _frontEnd, uint _newFrontEndStake, address _depositor);\n', '\n', '    event ETHGainWithdrawn(address indexed _depositor, uint _ETH, uint _LUSDLoss);\n', '    event LQTYPaidToDepositor(address indexed _depositor, uint _LQTY);\n', '    event LQTYPaidToFrontEnd(address indexed _frontEnd, uint _LQTY);\n', '    event EtherSent(address _to, uint _amount);\n', '\n', '    // --- Functions ---\n', '\n', '    /*\n', '     * Called only once on init, to set addresses of other Liquity contracts\n', '     * Callable only by owner, renounces ownership at the end\n', '     */\n', '    function setAddresses(\n', '        address _borrowerOperationsAddress,\n', '        address _troveManagerAddress,\n', '        address _activePoolAddress,\n', '        address _lusdTokenAddress,\n', '        address _sortedTrovesAddress,\n', '        address _priceFeedAddress,\n', '        address _communityIssuanceAddress\n', '    ) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Frontend is registered or zero address\n', '     * - Sender is not a registered frontend\n', '     * - _amount is not zero\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Tags the deposit with the provided front end tag param, if it's a new deposit\n", "     * - Sends depositor's accumulated gains (LQTY, ETH) to depositor\n", "     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\n", "     * - Increases deposit and tagged front end's stake, and takes new snapshots for each.\n", '     */\n', '    function provideToSP(uint _amount, address _frontEndTag) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - _amount is zero or there are no under collateralized troves left in the system\n', '     * - User has a non zero deposit\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Removes the deposit's front end tag if it is a full withdrawal\n", "     * - Sends all depositor's accumulated gains (LQTY, ETH) to depositor\n", "     * - Sends the tagged front end's accumulated LQTY gains to the tagged front end\n", "     * - Decreases deposit and tagged front end's stake, and takes new snapshots for each.\n", '     *\n', '     * If _amount > userDeposit, the user withdraws all of their compounded deposit.\n', '     */\n', '    function withdrawFromSP(uint _amount) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - User has a non zero deposit\n', '     * - User has an open trove\n', '     * - User has some ETH gain\n', '     * ---\n', '     * - Triggers a LQTY issuance, based on time passed since the last issuance. The LQTY issuance is shared between *all* depositors and front ends\n', "     * - Sends all depositor's LQTY gain to  depositor\n", "     * - Sends all tagged front end's LQTY gain to the tagged front end\n", "     * - Transfers the depositor's entire ETH gain from the Stability Pool to the caller's trove\n", '     * - Leaves their compounded deposit in the Stability Pool\n', '     * - Updates snapshots for deposit and tagged front end stake\n', '     */\n', '    function withdrawETHGainToTrove(address _upperHint, address _lowerHint) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Frontend (sender) not already registered\n', '     * - User (sender) has no deposit\n', '     * - _kickbackRate is in the range [0, 100%]\n', '     * ---\n', '     * Front end makes a one-time selection of kickback rate upon registering\n', '     */\n', '    function registerFrontEnd(uint _kickbackRate) external;\n', '\n', '    /*\n', '     * Initial checks:\n', '     * - Caller is TroveManager\n', '     * ---\n', '     * Cancels out the specified debt against the LUSD contained in the Stability Pool (as far as possible)\n', "     * and transfers the Trove's ETH collateral from ActivePool to StabilityPool.\n", '     * Only called by liquidation functions in the TroveManager.\n', '     */\n', '    function offset(uint _debt, uint _coll) external;\n', '\n', '    /*\n', '     * Returns the total amount of ETH held by the pool, accounted in an internal variable instead of `balance`,\n', '     * to exclude edge cases like ETH received from a self-destruct.\n', '     */\n', '    function getETH() external view returns (uint);\n', '\n', '    /*\n', '     * Returns LUSD held in the pool. Changes when users deposit/withdraw, and when Trove debt is offset.\n', '     */\n', '    function getTotalLUSDDeposits() external view returns (uint);\n', '\n', '    /*\n', '     * Calculates the ETH gain earned by the deposit since its last snapshots were taken.\n', '     */\n', '    function getDepositorETHGain(address _depositor) external view returns (uint);\n', '\n', '    /*\n', '     * Calculate the LQTY gain earned by a deposit since its last snapshots were taken.\n', '     * If not tagged with a front end, the depositor gets a 100% cut of what their deposit earned.\n', "     * Otherwise, their cut of the deposit's earnings is equal to the kickbackRate, set by the front end through\n", '     * which they made their deposit.\n', '     */\n', '    function getDepositorLQTYGain(address _depositor) external view returns (uint);\n', '\n', '    /*\n', '     * Return the LQTY gain earned by the front end.\n', '     */\n', '    function getFrontEndLQTYGain(address _frontEnd) external view returns (uint);\n', '\n', '    /*\n', "     * Return the user's compounded deposit.\n", '     */\n', '    function getCompoundedLUSDDeposit(address _depositor) external view returns (uint);\n', '\n', '    /*\n', "     * Return the front end's compounded stake.\n", '     *\n', "     * The front end's compounded stake is equal to the sum of its depositors' compounded deposits.\n", '     */\n', '    function getCompoundedFrontEndStake(address _frontEnd) external view returns (uint);\n', '     \n', '     // function deposits(address) external view returns ()\n', '}      \n', '\n', '\n', '\n', 'interface ILQTYStaking {\n', '\n', '    // --- Events --\n', '    \n', '    event LQTYTokenAddressSet(address _lqtyTokenAddress);\n', '    event LUSDTokenAddressSet(address _lusdTokenAddress);\n', '    event TroveManagerAddressSet(address _troveManager);\n', '    event BorrowerOperationsAddressSet(address _borrowerOperationsAddress);\n', '    event ActivePoolAddressSet(address _activePoolAddress);\n', '\n', '    event StakeChanged(address indexed staker, uint newStake);\n', '    event StakingGainsWithdrawn(address indexed staker, uint LUSDGain, uint ETHGain);\n', '    event F_ETHUpdated(uint _F_ETH);\n', '    event F_LUSDUpdated(uint _F_LUSD);\n', '    event TotalLQTYStakedUpdated(uint _totalLQTYStaked);\n', '    event EtherSent(address _account, uint _amount);\n', '    event StakerSnapshotsUpdated(address _staker, uint _F_ETH, uint _F_LUSD);\n', '\n', '    // --- Functions ---\n', '\n', '    function setAddresses\n', '    (\n', '        address _lqtyTokenAddress,\n', '        address _lusdTokenAddress,\n', '        address _troveManagerAddress, \n', '        address _borrowerOperationsAddress,\n', '        address _activePoolAddress\n', '    )  external;\n', '\n', '    function stake(uint _LQTYamount) external;\n', '\n', '    function unstake(uint _LQTYamount) external;\n', '\n', '    function increaseF_ETH(uint _ETHFee) external; \n', '\n', '    function increaseF_LUSD(uint _LQTYFee) external;  \n', '\n', '    function getPendingETHGain(address _user) external view returns (uint);\n', '\n', '    function getPendingLUSDGain(address _user) external view returns (uint);\n', '\n', '    function stakes(address) external view returns (uint256);\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquityHelper {\n', '    using TokenUtils for address;\n', '\n', '    uint constant public LUSD_GAS_COMPENSATION = 200e18;\n', '    address constant public LUSDTokenAddr = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\n', '    address constant public LQTYTokenAddr = 0x6DEA81C8171D0bA574754EF6F8b412F2Ed88c54D;\n', '    address constant public PriceFeedAddr = 0x4c517D4e2C851CA76d7eC94B805269Df0f2201De;\n', '    address constant public BorrowerOperationsAddr = 0x24179CD81c9e782A4096035f7eC97fB8B783e007;\n', '    address constant public TroveManagerAddr = 0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2;\n', '    address constant public SortedTrovesAddr = 0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6;\n', '    address constant public HintHelpersAddr = 0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0;\n', '    address constant public CollSurplusPoolAddr = 0x3D32e8b97Ed5881324241Cf03b2DA5E2EBcE5521;\n', '    address constant public StabilityPoolAddr = 0x66017D22b0f8556afDd19FC67041899Eb65a21bb;\n', '    address constant public LQTYStakingAddr = 0x4f9Fbb3f1E99B56e0Fe2892e623Ed36A76Fc605d;\n', '\n', '    IPriceFeed constant public PriceFeed = IPriceFeed(PriceFeedAddr);\n', '    IBorrowerOperations constant public BorrowerOperations = IBorrowerOperations(BorrowerOperationsAddr);\n', '    ITroveManager constant public TroveManager = ITroveManager(TroveManagerAddr);\n', '    ISortedTroves constant public SortedTroves = ISortedTroves(SortedTrovesAddr);\n', '    IHintHelpers constant public HintHelpers = IHintHelpers(HintHelpersAddr);\n', '    ICollSurplusPool constant public CollSurplusPool = ICollSurplusPool(CollSurplusPoolAddr);\n', '    IStabilityPool constant public StabilityPool = IStabilityPool(StabilityPoolAddr);\n', '    ILQTYStaking constant public LQTYStaking = ILQTYStaking(LQTYStakingAddr);\n', '\n', '    function withdrawStaking(uint256 _ethGain, uint256 _lusdGain, address _wethTo, address _lusdTo) internal {\n', '        if (_ethGain > 0) {\n', '            TokenUtils.depositWeth(_ethGain);\n', '            TokenUtils.WETH_ADDR.withdrawTokens(_wethTo, _ethGain);\n', '        }\n', '        if (_lusdGain > 0) {\n', '            LUSDTokenAddr.withdrawTokens(_lusdTo, _lusdGain);\n', '        }\n', '    }\n', '    \n', '    function withdrawStabilityGains(uint256 _ethGain, uint256 _lqtyGain, address _wethTo, address _lqtyTo) internal {\n', '        if (_ethGain > 0) {\n', '            TokenUtils.depositWeth(_ethGain);\n', '            TokenUtils.WETH_ADDR.withdrawTokens(_wethTo, _ethGain);\n', '        }      \n', '        if (_lqtyGain > 0) {\n', '            LQTYTokenAddr.withdrawTokens(_lqtyTo, _lqtyGain);\n', '        }\n', '    }\n', '}      \n', '\n', '\n', '\n', 'abstract contract IDFSRegistry {\n', ' \n', '    function getAddr(bytes32 _id) public view virtual returns (address);\n', '\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public virtual;\n', '\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n', '\n', '    function approveContractChange(bytes32 _id) public virtual;\n', '\n', '    function cancelContractChange(bytes32 _id) public virtual;\n', '\n', '    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n', '}      \n', '\n', '\n', '\n', '/// @title A stateful contract that holds and can change owner/admin\n', 'contract AdminVault {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function changeOwner(address _owner) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function changeAdmin(address _admin) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        admin = _admin;\n', '    }\n', '\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title AdminAuth Handles owner/admin privileges over smart contracts\n', 'contract AdminAuth {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n', '\n', '    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n', '\n', '    modifier onlyOwner() {\n', '        require(adminVault.owner() == msg.sender, "msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(adminVault.admin() == msg.sender, "msg.sender not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(_receiver).transfer(_amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyAdmin {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}      \n', '\n', '\n', '\n', 'contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(\n', '        address _contract,\n', '        address _caller,\n', '        string memory _logName,\n', '        bytes memory _data\n', '    ) public {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Stores all the important DFS addresses and can be changed (timelock)\n', 'contract DFSRegistry is AdminAuth {\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";\n', '    string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn\'t exists";\n', '    string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";\n', '    string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";\n', '    string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";\n', '    string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";\n', '    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";\n', '    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";\n', '\n', '    struct Entry {\n', '        address contractAddr;\n', '        uint256 waitPeriod;\n', '        uint256 changeStartTime;\n', '        bool inContractChange;\n', '        bool inWaitPeriodChange;\n', '        bool exists;\n', '    }\n', '\n', '    mapping(bytes32 => Entry) public entries;\n', '    mapping(bytes32 => address) public previousAddresses;\n', '\n', '    mapping(bytes32 => address) public pendingAddresses;\n', '    mapping(bytes32 => uint256) public pendingWaitTimes;\n', '\n', '    /// @notice Given an contract id returns the registered address\n', '    /// @dev Id is keccak256 of the contract name\n', '    /// @param _id Id of contract\n', '    function getAddr(bytes32 _id) public view returns (address) {\n', '        return entries[_id].contractAddr;\n', '    }\n', '\n', '    /// @notice Helper function to easily query if id is registered\n', '    /// @param _id Id of contract\n', '    function isRegistered(bytes32 _id) public view returns (bool) {\n', '        return entries[_id].exists;\n', '    }\n', '\n', '    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n', '\n', '    /// @notice Adds a new contract to the registry\n', '    /// @param _id Id of contract\n', '    /// @param _contractAddr Address of the contract\n', '    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public onlyOwner {\n', '        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\n', '\n', '        entries[_id] = Entry({\n', '            contractAddr: _contractAddr,\n', '            waitPeriod: _waitPeriod,\n', '            changeStartTime: 0,\n', '            inContractChange: false,\n', '            inWaitPeriodChange: false,\n', '            exists: true\n', '        });\n', '\n', '        // Remember tha address so we can revert back to old addr if needed\n', '        previousAddresses[_id] = _contractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "AddNewContract",\n', '            abi.encode(_id, _contractAddr, _waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Reverts to the previous address immediately\n', '    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n', '    /// @param _id Id of contract\n', '    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\n', '\n', '        address currentAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = previousAddresses[_id];\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "RevertToPreviousAddress",\n', '            abi.encode(_id, currentAddr, previousAddresses[_id])\n', '        );\n', '    }\n', '\n', '    /// @notice Starts an address change for an existing entry\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    /// @param _newContractAddr Address of the new contract\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inContractChange = true;\n', '\n', '        pendingAddresses[_id] = _newContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartContractChange",\n', '            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new contract address, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        address oldContractAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = pendingAddresses[_id];\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        previousAddresses[_id] = oldContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel pending change\n', '    /// @param _id Id of contract\n', '    function cancelContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        address oldContractAddr = pendingAddresses[_id];\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Starts the change for waitPeriod\n', '    /// @param _id Id of contract\n', '    /// @param _newWaitPeriod New wait time\n', '    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\n', '\n', '        pendingWaitTimes[_id] = _newWaitPeriod;\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inWaitPeriodChange = true;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartWaitPeriodChange",\n', '            abi.encode(_id, _newWaitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new wait period, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        uint256 oldWaitTime = entries[_id].waitPeriod;\n', '        entries[_id].waitPeriod = pendingWaitTimes[_id];\n', '        \n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveWaitPeriodChange",\n', '            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel wait period change\n', '    /// @param _id Id of contract\n', '    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelWaitPeriodChange",\n', '            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Implements Action interface and common helpers for passing inputs\n', 'abstract contract ActionBase is AdminAuth {\n', '    address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\n', '    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";\n', '    string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";\n', '\n', '    /// @dev Subscription params index range [128, 255]\n', '    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n', '    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n', '\n', '    /// @dev Return params index range [1, 127]\n', '    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n', '    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n', '\n', '    /// @dev If the input value should not be replaced\n', '    uint8 public constant NO_PARAM_MAPPING = 0;\n', '\n', '    /// @dev We need to parse Flash loan actions in a different way\n', '    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\n', '\n', '    /// @notice Parses inputs and runs the implemented action through a proxy\n', '    /// @dev Is called by the TaskExecutor chaining actions together\n', '    /// @param _callData Array of input values each value encoded as bytes\n', '    /// @param _subData Array of subscribed vales, replaces input values if specified\n', '    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n', '    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n', '    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual returns (bytes32);\n', '\n', '    /// @notice Parses inputs and runs the single implemented action through a proxy\n', '    /// @dev Used to save gas when executing a single action directly\n', '    function executeActionDirect(bytes[] memory _callData) public virtual payable;\n', '\n', '    /// @notice Returns the type of action we are implementing\n', '    function actionType() public pure virtual returns (uint8);\n', '\n', '\n', '    //////////////////////////// HELPER METHODS ////////////////////////////\n', '\n', '    /// @notice Given an uint256 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamUint(\n', '        uint _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (uint) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '\n', '    /// @notice Given an addr input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamAddr(\n', '        address _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (address) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Given an bytes32 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamABytes32(\n', '        bytes32 _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (bytes32) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = (_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value indicated that we need to inject values\n', '    /// @param _type Indicated the type of the input\n', '    function isReplaceable(uint8 _type) internal pure returns (bool) {\n', '        return _type != NO_PARAM_MAPPING;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value is in the return value range\n', '    /// @param _type Indicated the type of the input\n', '    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n', '        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in return array value\n', '    /// @param _type Indicated the type of the input\n', '    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\n', '\n', '        return (_type - RETURN_MIN_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in sub array value\n', '    /// @param _type Indicated the type of the input\n', '    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\n', '\n', '        return (_type - SUB_MIN_INDEX_VALUE);\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquityStake is ActionBase, LiquityHelper {\n', '    using TokenUtils for address;\n', '\n', '    struct Params {\n', '        uint256 lqtyAmount; // Amount of LQTY tokens to stake\n', '        address from;       // Address where to pull the tokens from\n', '        address wethTo;     // Address that will receive ETH(wrapped) gains\n', '        address lusdTo;     // Address that will receive LUSD token gains\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual override returns (bytes32) {\n', '        Params memory params = parseInputs(_callData);\n', '        params.lqtyAmount = _parseParamUint(params.lqtyAmount, _paramMapping[0], _subData, _returnValues);\n', '        params.from = _parseParamAddr(params.from, _paramMapping[1], _subData, _returnValues);\n', '        params.wethTo = _parseParamAddr(params.wethTo, _paramMapping[2], _subData, _returnValues);\n', '        params.lusdTo = _parseParamAddr(params.lusdTo, _paramMapping[3], _subData, _returnValues);\n', '\n', '        params.lqtyAmount = _liquityStake(params);\n', '        return bytes32(params.lqtyAmount);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function executeActionDirect(bytes[] memory _callData) public payable virtual override {\n', '        Params memory params = parseInputs(_callData);\n', '\n', '        _liquityStake(params);\n', '    }\n', '\n', '    /// @inheritdoc ActionBase\n', '    function actionType() public pure virtual override returns (uint8) {\n', '        return uint8(ActionType.STANDARD_ACTION);\n', '    }\n', '\n', '    //////////////////////////// ACTION LOGIC ////////////////////////////\n', '\n', '    /// @notice Stakes LQTY tokens\n', '    function _liquityStake(Params memory _params) internal returns (uint256) {\n', '        if (_params.lqtyAmount == type(uint256).max) {\n', '            _params.lqtyAmount = LQTYTokenAddr.getBalance(_params.from);\n', '        }\n', '\n', '        uint256 ethGain = LQTYStaking.getPendingETHGain(address(this));\n', '        uint256 lusdGain = LQTYStaking.getPendingLUSDGain(address(this));\n', '\n', '        LQTYTokenAddr.pullTokensIfNeeded(_params.from, _params.lqtyAmount);\n', '        LQTYStaking.stake(_params.lqtyAmount);\n', '\n', '        withdrawStaking(ethGain, lusdGain, _params.wethTo, _params.lusdTo);\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "LiquityStake",\n', '            abi.encode(\n', '                _params,\n', '                ethGain,\n', '                lusdGain\n', '            )\n', '        );\n', '\n', '        return _params.lqtyAmount;\n', '    }\n', '\n', '    function parseInputs(bytes[] memory _callData) internal pure returns (Params memory params) {\n', '        params = abi.decode(_callData[0], (Params));\n', '    }\n', '}']