['import "./EIP20.sol";\n', '\n', 'pragma solidity ^0.4.21;\n', '\n', '\n', 'contract EIP20Factory {\n', '\n', '    mapping(address => address[]) public created;\n', '    mapping(address => bool) public isEIP20; //verify without having to do a bytecode check.\n', '    bytes public EIP20ByteCode; // solhint-disable-line var-name-mixedcase\n', '\n', '    function EIP20Factory() public {\n', '        //upon creation of the factory, deploy a EIP20 (parameters are meaningless) and store the bytecode provably.\n', '        address verifiedToken = createEIP20(10000000000000, "Genesis", 2, "CSC");\n', '        EIP20ByteCode = codeAt(verifiedToken);\n', '    }\n', '\n', '    //verifies if a contract that has been deployed is a Human Standard Token.\n', '    //NOTE: This is a very expensive function, and should only be used in an eth_call. ~800k gas\n', '    function verifyEIP20(address _tokenContract) public view returns (bool) {\n', '        bytes memory fetchedTokenByteCode = codeAt(_tokenContract);\n', '\n', '        if (fetchedTokenByteCode.length != EIP20ByteCode.length) {\n', '            return false; //clear mismatch\n', '        }\n', '\n', '      //starting iterating through it if lengths match\n', '        for (uint i = 0; i < fetchedTokenByteCode.length; i++) {\n', '            if (fetchedTokenByteCode[i] != EIP20ByteCode[i]) {\n', '                return false;\n', '            }\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function createEIP20(uint256 _initialAmount, string _name, uint8 _decimals, string _symbol)\n', '        public\n', '    returns (address) {\n', '\n', '        EIP20 newToken = (new EIP20(_initialAmount, _name, _decimals, _symbol));\n', '        created[msg.sender].push(address(newToken));\n', '        isEIP20[address(newToken)] = true;\n', '        //the factory will own the created tokens. You must transfer them.\n', '        newToken.transfer(msg.sender, _initialAmount);\n', '        return address(newToken);\n', '    }\n', '\n', '    //for now, keeping this internal. Ideally there should also be a live version of this that\n', '    // any contract can use, lib-style.\n', '    //retrieves the bytecode at a specific address.\n', '    function codeAt(address _addr) internal view returns (bytes outputCode) {\n', '        assembly { // solhint-disable-line no-inline-assembly\n', '            // retrieve the size of the code, this needs assembly\n', '            let size := extcodesize(_addr)\n', '            // allocate output byte array - this could also be done without assembly\n', '            // by using outputCode = new bytes(size)\n', '            outputCode := mload(0x40)\n', '            // new "memory end" including padding\n', '            mstore(0x40, add(outputCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n', '            // store length in memory\n', '            mstore(outputCode, size)\n', '            // actually retrieve the code, this needs assembly\n', '            extcodecopy(_addr, add(outputCode, 0x20), 0, size)\n', '        }\n', '    }\n', '}']