['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-29\n', '*/\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see `ERC20Detailed`.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through `transferFrom`. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when `approve` or `transferFrom` are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * > Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an `Approval` event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to `approve`. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\math\\SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the `IERC20` interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using `_mint`.\n', ' * For a generic mechanism see `ERC20Mintable`.\n', ' *\n', ' * *For a detailed writeup see our guide [How to implement supply\n', ' * mechanisms](https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226).*\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an `Approval` event is emitted on calls to `transferFrom`.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard `decreaseAllowance` and `increaseAllowance`\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See `IERC20.approve`.\n', ' */\n', 'contract ERC20 is IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See `IERC20.totalSupply`.\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.balanceOf`.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transfer`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.allowance`.\n', '     */\n', '    function allowance(address owner, address spender) public view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.approve`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 value) public returns (bool) {\n', '        _approve(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See `IERC20.transferFrom`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of `ERC20`;\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `value`.\n', "     * - the caller must have allowance for `sender`'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to `approve` that can be used as a mitigation for\n', '     * problems described in `IERC20.approve`.\n', '     *\n', '     * Emits an `Approval` event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to `transfer`, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a `Transfer` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = _balances[sender].sub(amount);\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a `Transfer` event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '     /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a `Transfer` event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 value) internal {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _totalSupply = _totalSupply.sub(value);\n', '        _balances[account] = _balances[account].sub(value);\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an `Approval` event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 value) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = value;\n', '        emit Approval(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Destoys `amount` tokens from `account`.`amount` is then deducted\n', "     * from the caller's allowance.\n", '     *\n', '     * See `_burn` and `_approve`.\n', '     */\n', '    function _burnFrom(address account, uint256 amount) internal {\n', '        _burn(account, amount);\n', '        _approve(account, msg.sender, _allowances[account][msg.sender].sub(amount));\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\access\\Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\access\\roles\\MinterRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', 'contract MinterRole {\n', '    using Roles for Roles.Role;\n', '\n', '    event MinterAdded(address indexed account);\n', '    event MinterRemoved(address indexed account);\n', '\n', '    Roles.Role private _minters;\n', '\n', '    constructor () internal {\n', '        _addMinter(msg.sender);\n', '    }\n', '\n', '    modifier onlyMinter() {\n', '        require(isMinter(msg.sender), "MinterRole: caller does not have the Minter role");\n', '        _;\n', '    }\n', '\n', '    function isMinter(address account) public view returns (bool) {\n', '        return _minters.has(account);\n', '    }\n', '\n', '    function addMinter(address account) public onlyMinter {\n', '        _addMinter(account);\n', '    }\n', '\n', '    function renounceMinter() public {\n', '        _removeMinter(msg.sender);\n', '    }\n', '\n', '    function _addMinter(address account) internal {\n', '        _minters.add(account);\n', '        emit MinterAdded(account);\n', '    }\n', '\n', '    function _removeMinter(address account) internal {\n', '        _minters.remove(account);\n', '        emit MinterRemoved(account);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\ERC20Mintable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Extension of `ERC20` that adds a set of accounts with the `MinterRole`,\n', ' * which have permission to mint (create) new tokens as they see fit.\n', ' *\n', ' * At construction, the deployer of the contract is the only minter.\n', ' */\n', 'contract ERC20Mintable is ERC20, MinterRole {\n', '    /**\n', '     * @dev See `ERC20._mint`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must have the `MinterRole`.\n', '     */\n', '    function mint(address account, uint256 amount) public onlyMinter returns (bool) {\n', '        _mint(account, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\utils\\Address.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '        \n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\token\\ERC20\\SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\utils\\ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the `nonReentrant` modifier\n', ' * available, which can be aplied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' */\n', 'contract ReentrancyGuard {\n', '    /// @dev counter to allow mutex lock with only one SSTORE operation\n', '    uint256 private _guardCounter;\n', '\n', '    constructor () internal {\n', '        // The counter starts at one to prevent changing it from zero to a non-zero\n', '        // value, which is a more expensive operation.\n', '        _guardCounter = 1;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        _guardCounter += 1;\n', '        uint256 localCounter = _guardCounter;\n', '        _;\n', '        require(localCounter == _guardCounter, "ReentrancyGuard: reentrant call");\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\Crowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Crowdsale\n', ' * @dev Crowdsale is a base contract for managing a token crowdsale,\n', ' * allowing investors to purchase tokens with ether. This contract implements\n', ' * such functionality in its most fundamental form and can be extended to provide additional\n', ' * functionality and/or custom behavior.\n', ' * The external interface represents the basic interface for purchasing tokens, and conforms\n', ' * the base architecture for crowdsales. It is *not* intended to be modified / overridden.\n', ' * The internal interface conforms the extensible and modifiable surface of crowdsales. Override\n', " * the methods to add functionality. Consider using 'super' where appropriate to concatenate\n", ' * behavior.\n', ' */\n', 'contract Crowdsale is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // The token being sold\n', '    IERC20 private _token;\n', '\n', '    // Address where funds are collected\n', '    address payable private _wallet;\n', '\n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 private _rate;\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', '\n', '    /**\n', '     * @param rate Number of token units a buyer gets per wei\n', '     * @dev The rate is the conversion between wei and the smallest and indivisible\n', '     * token unit. So, if you are using a rate of 1 with a ERC20Detailed token\n', '     * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.\n', '     * @param wallet Address where collected funds will be forwarded to\n', '     * @param token Address of the token being sold\n', '     */\n', '    constructor (uint256 rate, address payable wallet, IERC20 token) public {\n', '        require(rate > 0, "Crowdsale: rate is 0");\n', '        require(wallet != address(0), "Crowdsale: wallet is the zero address");\n', '        require(address(token) != address(0), "Crowdsale: token is the zero address");\n', '\n', '        _rate = rate;\n', '        _wallet = wallet;\n', '        _token = token;\n', '    }\n', '\n', '    /**\n', '     * @dev fallback function ***DO NOT OVERRIDE***\n', '     * Note that other contracts will transfer funds with a base gas stipend\n', '     * of 2300, which is not enough to call buyTokens. Consider calling\n', '     * buyTokens directly when purchasing tokens from a contract.\n', '     */\n', '    function () external payable {\n', '        buyTokens(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '\n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', '\n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(msg.sender, beneficiary, weiAmount, tokens);\n', '\n', '        _updatePurchasingState(beneficiary, weiAmount);\n', '\n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");\n', '        require(weiAmount != 0, "Crowdsale: weiAmount is 0");\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n', '     * conditions are not met.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override for extensions that require an internal state to check for validity (current user contributions,\n', '     * etc.)\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _updatePurchasingState(address beneficiary, uint256 weiAmount) internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '\n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\validation\\CappedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title CappedCrowdsale\n', ' * @dev Crowdsale with a limit for total contributions.\n', ' */\n', 'contract CappedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.\n', '     * @param cap Max amount of wei to be contributed\n', '     */\n', '    constructor (uint256 cap) public {\n', '        require(cap > 0, "CappedCrowdsale: cap is 0");\n', '        _cap = cap;\n', '    }\n', '\n', '    /**\n', '     * @return the cap of the crowdsale.\n', '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the cap has been reached.\n', '     * @return Whether the cap was reached\n', '     */\n', '    function capReached() public view returns (bool) {\n', '        return weiRaised() >= _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the funding cap.\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '        require(weiRaised().add(weiAmount) <= _cap, "CappedCrowdsale: cap exceeded");\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\emission\\MintedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title MintedCrowdsale\n', ' * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.\n', ' * Token ownership should be transferred to MintedCrowdsale for minting.\n', ' */\n', 'contract MintedCrowdsale is Crowdsale {\n', '    /**\n', '     * @dev Overrides delivery by minting tokens upon purchase.\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Number of tokens to be minted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        // Potentially dangerous assumption about the type of the token.\n', '        require(\n', '            ERC20Mintable(address(token())).mint(beneficiary, tokenAmount),\n', '                "MintedCrowdsale: minting failed"\n', '        );\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\validation\\TimedCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title TimedCrowdsale\n', ' * @dev Crowdsale accepting contributions only within a time frame.\n', ' */\n', 'contract TimedCrowdsale is Crowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _openingTime;\n', '    uint256 private _closingTime;\n', '\n', '    /**\n', '     * Event for crowdsale extending\n', '     * @param newClosingTime new closing time\n', '     * @param prevClosingTime old closing time\n', '     */\n', '    event TimedCrowdsaleExtended(uint256 prevClosingTime, uint256 newClosingTime);\n', '\n', '    /**\n', '     * @dev Reverts if not in crowdsale time range.\n', '     */\n', '    modifier onlyWhileOpen {\n', '        require(isOpen(), "TimedCrowdsale: not open");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Constructor, takes crowdsale opening and closing times.\n', '     * @param openingTime Crowdsale opening time\n', '     * @param closingTime Crowdsale closing time\n', '     */\n', '    constructor (uint256 openingTime, uint256 closingTime) public {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(openingTime >= block.timestamp, "TimedCrowdsale: opening time is before current time");\n', '        // solhint-disable-next-line max-line-length\n', '        require(closingTime > openingTime, "TimedCrowdsale: opening time is not before closing time");\n', '\n', '        _openingTime = openingTime;\n', '        _closingTime = closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale opening time.\n', '     */\n', '    function openingTime() public view returns (uint256) {\n', '        return _openingTime;\n', '    }\n', '\n', '    /**\n', '     * @return the crowdsale closing time.\n', '     */\n', '    function closingTime() public view returns (uint256) {\n', '        return _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is open, false otherwise.\n', '     */\n', '    function isOpen() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp >= _openingTime && block.timestamp <= _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n', '     * @return Whether crowdsale period has elapsed\n', '     */\n', '    function hasClosed() public view returns (bool) {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        return block.timestamp > _closingTime;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring to be within contributing period.\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal onlyWhileOpen view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Extend crowdsale.\n', '     * @param newClosingTime Crowdsale closing time\n', '     */\n', '    function _extendTime(uint256 newClosingTime) internal {\n', '        require(!hasClosed(), "TimedCrowdsale: already closed");\n', '        // solhint-disable-next-line max-line-length\n', '        require(newClosingTime > _closingTime, "TimedCrowdsale: new closing time is before current closing time");\n', '\n', '        emit TimedCrowdsaleExtended(_closingTime, newClosingTime);\n', '        _closingTime = newClosingTime;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\price\\IncreasingPriceCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title IncreasingPriceCrowdsale\n', ' * @dev Extension of Crowdsale contract that increases the price of tokens linearly in time.\n', ' * Note that what should be provided to the constructor is the initial and final _rates_, that is,\n', ' * the amount of tokens per wei contributed. Thus, the initial rate must be greater than the final rate.\n', ' */\n', 'contract IncreasingPriceCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private _initialRate;\n', '    uint256 private _finalRate;\n', '\n', '    /**\n', '     * @dev Constructor, takes initial and final rates of tokens received per wei contributed.\n', '     * @param initialRate Number of tokens a buyer gets per wei at the start of the crowdsale\n', '     * @param finalRate Number of tokens a buyer gets per wei at the end of the crowdsale\n', '     */\n', '    constructor (uint256 initialRate, uint256 finalRate) public {\n', '        require(finalRate > 0, "IncreasingPriceCrowdsale: final rate is 0");\n', '        // solhint-disable-next-line max-line-length\n', '        require(initialRate > finalRate, "IncreasingPriceCrowdsale: initial rate is not greater than final rate");\n', '        _initialRate = initialRate;\n', '        _finalRate = finalRate;\n', '    }\n', '\n', '    /**\n', "     * The base rate function is overridden to revert, since this crowdsale doesn't use it, and\n", '     * all calls to it are a mistake.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        revert("IncreasingPriceCrowdsale: rate() called");\n', '    }\n', '\n', '    /**\n', '     * @return the initial rate of the crowdsale.\n', '     */\n', '    function initialRate() public view returns (uint256) {\n', '        return _initialRate;\n', '    }\n', '\n', '    /**\n', '     * @return the final rate of the crowdsale.\n', '     */\n', '    function finalRate() public view returns (uint256) {\n', '        return _finalRate;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the rate of tokens per wei at the present time.\n', '     * Note that, as price _increases_ with time, the rate _decreases_.\n', '     * @return The number of tokens a buyer gets per wei at a given time\n', '     */\n', '    function getCurrentRate() public view returns (uint256) {\n', '        if (!isOpen()) {\n', '            return 0;\n', '        }\n', '\n', '        // solhint-disable-next-line not-rely-on-time\n', '        uint256 elapsedTime = block.timestamp.sub(openingTime());\n', '        uint256 timeRange = closingTime().sub(openingTime());\n', '        uint256 rateRange = _initialRate.sub(_finalRate);\n', '        return _initialRate.sub(elapsedTime.mul(rateRange).div(timeRange));\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent method taking into account variable rate.\n', '     * @param weiAmount The value in wei to be converted into tokens\n', '     * @return The number of tokens _weiAmount wei will buy at present time\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        uint256 currentRate = getCurrentRate();\n', '        return currentRate.mul(weiAmount);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\FinalizableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @title FinalizableCrowdsale\n', ' * @dev Extension of TimedCrowdsale with a one-off finalization action, where one\n', ' * can do extra work after finishing.\n', ' */\n', 'contract FinalizableCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    bool private _finalized;\n', '\n', '    event CrowdsaleFinalized();\n', '\n', '    constructor () internal {\n', '        _finalized = false;\n', '    }\n', '\n', '    /**\n', '     * @return true if the crowdsale is finalized, false otherwise.\n', '     */\n', '    function finalized() public view returns (bool) {\n', '        return _finalized;\n', '    }\n', '\n', '    /**\n', '     * @dev Must be called after crowdsale ends, to do some extra finalization\n', "     * work. Calls the contract's finalization function.\n", '     */\n', '    function finalize() public {\n', '        require(!_finalized, "FinalizableCrowdsale: already finalized");\n', '        require(hasClosed(), "FinalizableCrowdsale: not closed");\n', '\n', '        _finalized = true;\n', '\n', '        _finalization();\n', '        emit CrowdsaleFinalized();\n', '    }\n', '\n', '    /**\n', '     * @dev Can be overridden to add finalization logic. The overriding function\n', '     * should call super._finalization() to ensure the chain of finalization is\n', '     * executed entirely.\n', '     */\n', '    function _finalization() internal {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\ownership\\Secondary.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev A Secondary contract can only be used by its primary account (the one that created it).\n', ' */\n', 'contract Secondary {\n', '    address private _primary;\n', '\n', '    /**\n', '     * @dev Emitted when the primary contract changes.\n', '     */\n', '    event PrimaryTransferred(\n', '        address recipient\n', '    );\n', '\n', '    /**\n', '     * @dev Sets the primary account to the one that is creating the Secondary contract.\n', '     */\n', '    constructor () internal {\n', '        _primary = msg.sender;\n', '        emit PrimaryTransferred(_primary);\n', '    }\n', '\n', '    /**\n', '     * @dev Reverts if called from any account other than the primary.\n', '     */\n', '    modifier onlyPrimary() {\n', '        require(msg.sender == _primary, "Secondary: caller is not the primary account");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the primary.\n', '     */\n', '    function primary() public view returns (address) {\n', '        return _primary;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers contract to a new primary.\n', '     * @param recipient The address of new primary.\n', '     */\n', '    function transferPrimary(address recipient) public onlyPrimary {\n', '        require(recipient != address(0), "Secondary: new primary is the zero address");\n', '        _primary = recipient;\n', '        emit PrimaryTransferred(_primary);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\Escrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', ' /**\n', '  * @title Escrow\n', '  * @dev Base escrow contract, holds funds designated for a payee until they\n', '  * withdraw them.\n', '  * @dev Intended usage: This contract (and derived escrow contracts) should be a\n', '  * standalone contract, that only interacts with the contract that instantiated\n', '  * it. That way, it is guaranteed that all Ether will be handled according to\n', '  * the Escrow rules, and there is no need to check for payable functions or\n', '  * transfers in the inheritance tree. The contract that uses the escrow as its\n', '  * payment method should be its primary, and provide public methods redirecting\n', "  * to the escrow's deposit and withdraw.\n", '  */\n', 'contract Escrow is Secondary {\n', '    using SafeMath for uint256;\n', '\n', '    event Deposited(address indexed payee, uint256 weiAmount);\n', '    event Withdrawn(address indexed payee, uint256 weiAmount);\n', '\n', '    mapping(address => uint256) private _deposits;\n', '\n', '    function depositsOf(address payee) public view returns (uint256) {\n', '        return _deposits[payee];\n', '    }\n', '\n', '    /**\n', '     * @dev Stores the sent amount as credit to be withdrawn.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function deposit(address payee) public onlyPrimary payable {\n', '        uint256 amount = msg.value;\n', '        _deposits[payee] = _deposits[payee].add(amount);\n', '\n', '        emit Deposited(payee, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw accumulated balance for a payee.\n', '     * @param payee The address whose funds will be withdrawn and transferred to.\n', '     */\n', '    function withdraw(address payable payee) public onlyPrimary {\n', '        uint256 payment = _deposits[payee];\n', '\n', '        _deposits[payee] = 0;\n', '\n', '        payee.transfer(payment);\n', '\n', '        emit Withdrawn(payee, payment);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\ConditionalEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title ConditionalEscrow\n', ' * @dev Base abstract escrow to only allow withdrawal if a condition is met.\n', ' * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n', ' */\n', 'contract ConditionalEscrow is Escrow {\n', '    /**\n', '     * @dev Returns whether an address is allowed to withdraw their funds. To be\n', '     * implemented by derived contracts.\n', '     * @param payee The destination address of the funds.\n', '     */\n', '    function withdrawalAllowed(address payee) public view returns (bool);\n', '\n', '    function withdraw(address payable payee) public {\n', '        require(withdrawalAllowed(payee), "ConditionalEscrow: payee is not allowed to withdraw");\n', '        super.withdraw(payee);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\payment\\escrow\\RefundEscrow.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @title RefundEscrow\n', ' * @dev Escrow that holds funds for a beneficiary, deposited from multiple\n', ' * parties.\n', ' * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.\n', ' * @dev The primary account (that is, the contract that instantiates this\n', ' * contract) may deposit, close the deposit period, and allow for either\n', ' * withdrawal by the beneficiary, or refunds to the depositors. All interactions\n', ' * with RefundEscrow will be made through the primary contract. See the\n', ' * RefundableCrowdsale contract for an example of RefundEscrowΓÇÖs use.\n', ' */\n', 'contract RefundEscrow is ConditionalEscrow {\n', '    enum State { Active, Refunding, Closed }\n', '\n', '    event RefundsClosed();\n', '    event RefundsEnabled();\n', '\n', '    State private _state;\n', '    address payable private _beneficiary;\n', '\n', '    /**\n', '     * @dev Constructor.\n', '     * @param beneficiary The beneficiary of the deposits.\n', '     */\n', '    constructor (address payable beneficiary) public {\n', '        require(beneficiary != address(0), "RefundEscrow: beneficiary is the zero address");\n', '        _beneficiary = beneficiary;\n', '        _state = State.Active;\n', '    }\n', '\n', '    /**\n', '     * @return The current state of the escrow.\n', '     */\n', '    function state() public view returns (State) {\n', '        return _state;\n', '    }\n', '\n', '    /**\n', '     * @return The beneficiary of the escrow.\n', '     */\n', '    function beneficiary() public view returns (address) {\n', '        return _beneficiary;\n', '    }\n', '\n', '    /**\n', '     * @dev Stores funds that may later be refunded.\n', '     * @param refundee The address funds will be sent to if a refund occurs.\n', '     */\n', '    function deposit(address refundee) public payable {\n', '        require(_state == State.Active, "RefundEscrow: can only deposit while active");\n', '        super.deposit(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for the beneficiary to withdraw their funds, rejecting\n', '     * further deposits.\n', '     */\n', '    function close() public onlyPrimary {\n', '        require(_state == State.Active, "RefundEscrow: can only close while active");\n', '        _state = State.Closed;\n', '        emit RefundsClosed();\n', '    }\n', '\n', '    /**\n', '     * @dev Allows for refunds to take place, rejecting further deposits.\n', '     */\n', '    function enableRefunds() public onlyPrimary {\n', '        require(_state == State.Active, "RefundEscrow: can only enable refunds while active");\n', '        _state = State.Refunding;\n', '        emit RefundsEnabled();\n', '    }\n', '\n', '    /**\n', "     * @dev Withdraws the beneficiary's funds.\n", '     */\n', '    function beneficiaryWithdraw() public {\n', '        require(_state == State.Closed, "RefundEscrow: beneficiary can only withdraw while closed");\n', '        _beneficiary.transfer(address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether refundees can withdraw their deposits (be refunded). The overridden function receives a\n', "     * 'payee' argument, but we ignore it here since the condition is global, not per-payee.\n", '     */\n', '    function withdrawalAllowed(address) public view returns (bool) {\n', '        return _state == State.Refunding;\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\RefundableCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundableCrowdsale\n', ' * @dev Extension of `FinalizableCrowdsale` contract that adds a funding goal, and the possibility of users\n', ' * getting a refund if goal is not met.\n', ' *\n', ' * Deprecated, use `RefundablePostDeliveryCrowdsale` instead. Note that if you allow tokens to be traded before the goal\n', ' * is met, then an attack is possible in which the attacker purchases tokens from the crowdsale and when they sees that\n', ' * the goal is unlikely to be met, they sell their tokens (possibly at a discount). The attacker will be refunded when\n', ' * the crowdsale is finalized, and the users that purchased from them will be left with worthless tokens.\n', ' */\n', 'contract RefundableCrowdsale is FinalizableCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    // minimum amount of funds to be raised in weis\n', '    uint256 private _goal;\n', '\n', '    // refund escrow used to hold funds while crowdsale is running\n', '    RefundEscrow private _escrow;\n', '\n', '    /**\n', '     * @dev Constructor, creates RefundEscrow.\n', '     * @param goal Funding goal\n', '     */\n', '    constructor (uint256 goal) public {\n', '        require(goal > 0, "RefundableCrowdsale: goal is 0");\n', '        _escrow = new RefundEscrow(wallet());\n', '        _goal = goal;\n', '    }\n', '\n', '    /**\n', '     * @return minimum amount of funds to be raised in wei.\n', '     */\n', '    function goal() public view returns (uint256) {\n', '        return _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev Investors can claim refunds here if crowdsale is unsuccessful.\n', '     * @param refundee Whose refund will be claimed.\n', '     */\n', '    function claimRefund(address payable refundee) public {\n', '        require(finalized(), "RefundableCrowdsale: not finalized");\n', '        require(!goalReached(), "RefundableCrowdsale: goal reached");\n', '\n', '        _escrow.withdraw(refundee);\n', '    }\n', '\n', '    /**\n', '     * @dev Checks whether funding goal was reached.\n', '     * @return Whether funding goal was reached\n', '     */\n', '    function goalReached() public view returns (bool) {\n', '        return weiRaised() >= _goal;\n', '    }\n', '\n', '    /**\n', '     * @dev Escrow finalization task, called when finalize() is called.\n', '     */\n', '    function _finalization() internal {\n', '        if (goalReached()) {\n', '            _escrow.close();\n', '            _escrow.beneficiaryWithdraw();\n', '        } else {\n', '            _escrow.enableRefunds();\n', '        }\n', '\n', '        super._finalization();\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _escrow.deposit.value(msg.value)(msg.sender);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\PostDeliveryCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title PostDeliveryCrowdsale\n', ' * @dev Crowdsale that locks tokens from withdrawal until it ends.\n', ' */\n', 'contract PostDeliveryCrowdsale is TimedCrowdsale {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address => uint256) private _balances;\n', '    __unstable__TokenVault private _vault;\n', '\n', '    constructor() public {\n', '        _vault = new __unstable__TokenVault();\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw tokens only after crowdsale ends.\n', '     * @param beneficiary Whose tokens will be withdrawn.\n', '     */\n', '    function withdrawTokens(address beneficiary) public {\n', '        require(hasClosed(), "PostDeliveryCrowdsale: not closed");\n', '        uint256 amount = _balances[beneficiary];\n', '        require(amount > 0, "PostDeliveryCrowdsale: beneficiary is not due any tokens");\n', '\n', '        _balances[beneficiary] = 0;\n', '        _vault.transfer(token(), beneficiary, amount);\n', '    }\n', '\n', '    /**\n', '     * @return the balance of an account.\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Overrides parent by storing due balances, and delivering tokens to the vault instead of the end user. This\n', '     * ensures that the tokens will be available by the time they are withdrawn (which may not be the case if\n', '     * `_deliverTokens` was called later).\n', '     * @param beneficiary Token purchaser\n', '     * @param tokenAmount Amount of tokens purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _balances[beneficiary] = _balances[beneficiary].add(tokenAmount);\n', '        _deliverTokens(address(_vault), tokenAmount);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title __unstable__TokenVault\n', ' * @dev Similar to an Escrow for tokens, this contract allows its primary account to spend its tokens as it sees fit.\n', ' * This contract is an internal helper for PostDeliveryCrowdsale, and should not be used outside of this context.\n', ' */\n', '// solhint-disable-next-line contract-name-camelcase\n', 'contract __unstable__TokenVault is Secondary {\n', '    function transfer(IERC20 token, address to, uint256 amount) public onlyPrimary {\n', '        token.transfer(to, amount);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\crowdsale\\distribution\\RefundablePostDeliveryCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title RefundablePostDeliveryCrowdsale\n', ' * @dev Extension of RefundableCrowdsale contract that only delivers the tokens\n', ' * once the crowdsale has closed and the goal met, preventing refunds to be issued\n', ' * to token holders.\n', ' */\n', 'contract RefundablePostDeliveryCrowdsale is RefundableCrowdsale, PostDeliveryCrowdsale {\n', '    function withdrawTokens(address beneficiary) public {\n', '        require(finalized(), "RefundablePostDeliveryCrowdsale: not finalized");\n', '        require(goalReached(), "RefundablePostDeliveryCrowdsale: goal not reached");\n', '\n', '        super.withdrawTokens(beneficiary);\n', '    }\n', '}\n', '\n', '// File: contracts\\open-zeppelin-contracts\\ownership\\Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts\\crowdsale\\CMIRPDCrowdsale.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title CMIRPDCrowdsale\n', ' * @dev CMIRPDCrowdsale is an ERC-20 tokens crowdsale. Contract uses ETH as a fund raising currency. Features:\n', ' *   - Capped - has a cap (maximum, hard cap) on ETH funds raised\n', ' *   - Minted - new tokens are minted during crowdsale\n', ' *   - Timed - has opening and closing time\n', ' *   - Increasing price - price increases linearly from the opening to the closing time\n', ' *   - Refundable - has a goal (minimum, soft cap), if not exceeded, funds are returned to investors\n', ' *   - PostDelivery - tokens are withdrawn after crowsale is successfully finished, if tokens not paused\n', ' * @author TokenMint (visit https://tokenmint.io)\n', ' */\n', 'contract CMIRPDCrowdsale is RefundablePostDeliveryCrowdsale, IncreasingPriceCrowdsale, CappedCrowdsale, MintedCrowdsale, Ownable {\n', '\n', '    // minimum amount of wei needed for single investment\n', '    uint256 private _minimumInvestmentWei;\n', '\n', '    /**\n', '    * @dev Constructor, creates CMIRPDCrowdsale.\n', '    * @param openingTime Crowdsale opening time\n', '    * @param closingTime Crowdsale closing time\n', '    * @param initialRate How many smallest token units a buyer gets per wei at the beginning of the crowdsale\n', '    * @param finalRate How many smallest token units a buyer gets per wei at the end of the crowdsale\n', '    * @param fundRaisingAddress Address where raised funds will be transfered if crowdsale is successful\n', '    * @param tokenContractAddress ERC20Mintable contract address of the token being sold, already deployed\n', '    * @param cap Cap on funds raised (maximum, hard cap)\n', '    * @param goal Goal on funds raised (minimum, soft cap)\n', '    * @param minimumInvestmentWei Minimum amount of wei needed for single investment\n', '    */\n', '    constructor (\n', '        uint256 openingTime,\n', '        uint256 closingTime,\n', '        uint256 initialRate,\n', '        uint256 finalRate,\n', '        address payable fundRaisingAddress,\n', '        ERC20Mintable tokenContractAddress,\n', '        uint256 cap,\n', '        uint256 goal,\n', '        uint256 minimumInvestmentWei\n', '    )\n', '        public\n', '        Crowdsale(initialRate, fundRaisingAddress, tokenContractAddress)\n', '        CappedCrowdsale(cap)\n', '        TimedCrowdsale(openingTime, closingTime)\n', '        IncreasingPriceCrowdsale(initialRate, finalRate)\n', '        RefundableCrowdsale(goal)\n', '    {\n', '        // As goal needs to be met for a successful crowdsale\n', '        // the value needs to less or equal than a cap which is limit for accepted funds\n', '        require(goal <= cap);\n', '\n', '        // set minimum investment\n', '        _minimumInvestmentWei = minimumInvestmentWei;\n', '    }\n', '\n', '    /**\n', '     * @return minimum investment amount in wei\n', '     */\n', '    function minimumInvestmentWei() public view returns (uint256) {\n', '        return _minimumInvestmentWei;\n', '    }\n', '\n', '    /**\n', '     * @dev Extend parent behavior requiring purchase to respect the minimum investment amount in wei\n', '     * @param beneficiary Token purchaser\n', '     * @param weiAmount Amount of wei contributed\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        super._preValidatePurchase(beneficiary, weiAmount);\n', '        require(weiAmount >= _minimumInvestmentWei);\n', '    }\n', '}']