['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', '//          \n', '//              &&&&\n', '//              &&&&\n', '//              &&&&\n', '//              &&&&  &&&&&&&&&       &&&&&&&&&&&&          &&&&&&&&&&/   &&&&.&&&&&&&&&\n', '//              &&&&&&&&&   &&&&&   &&&&&&     &&&&&,     &&&&&    &&&&&  &&&&&&&&   &&&&\n', '//               &&&&&&      &&&&  &&&&#         &&&&   &&&&&       &&&&& &&&&&&     &&&&&\n', '//               &&&&&       &&&&/ &&&&           &&&& #&&&&        &&&&  &&&&&\n', '//               &&&&         &&&& &&&&&         &&&&  &&&&        &&&&&  &&&&&\n', '//               %%%%        /%%%%   %%%%%%   %%%%%%   %%%%  %%%%%%%%%    %%%%%\n', '//              %%%%%        %%%%      %%%%%%%%%%%    %%%%   %%%%%%       %%%%\n', '//                                                    %%%%\n', '//                                                    %%%%\n', '//                                                    %%%%\n', '//\n', '\n', '// File @uniswap/v2-core/contracts/interfaces/[email\xa0protected]\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to array types.\n', ' */\n', 'library Arrays {\n', '   /**\n', '     * @dev Searches a sorted `array` and returns the first index that contains\n', '     * a value greater or equal to `element`. If no such index exists (i.e. all\n', '     * values in the array are strictly less than `element`), the array length is\n', '     * returned. Time complexity O(log n).\n', '     *\n', '     * `array` is expected to be sorted in ascending order, and to contain no\n', '     * repeated elements.\n', '     */\n', '    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n', '        if (array.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 low = 0;\n', '        uint256 high = array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n', '            // because Math.average rounds down (it does integer division with truncation).\n', '            if (array[mid] > element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n', '        if (low > 0 && array[low - 1] == element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC777/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\n', ' *\n', ' * Accounts can be notified of {IERC777} tokens being sent to them by having a\n', ' * contract implement this interface (contract holders can be their own\n', ' * implementer) and registering it on the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\n', ' *\n', ' * See {IERC1820Registry} and {ERC1820Implementer}.\n', ' */\n', 'interface IERC777Recipient {\n', '    /**\n', '     * @dev Called by an {IERC777} token contract whenever tokens are being\n', '     * moved or created into a registered account (`to`). The type of operation\n', '     * is conveyed by `from` being the zero address or not.\n', '     *\n', "     * This call occurs _after_ the token contract's state is updated, so\n", '     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\n', '     *\n', '     * This function may revert to prevent the operation from being executed.\n', '     */\n', '    function tokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata userData,\n', '        bytes calldata operatorData\n', '    ) external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the global ERC1820 Registry, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1820[EIP]. Accounts may register\n', ' * implementers for interfaces in this registry, as well as query support.\n', ' *\n', ' * Implementers may be shared by multiple accounts, and can also implement more\n', ' * than a single interface for each account. Contracts can implement interfaces\n', ' * for themselves, but externally-owned accounts (EOA) must delegate this to a\n', ' * contract.\n', ' *\n', ' * {IERC165} interfaces can also be queried via the registry.\n', ' *\n', ' * For an in-depth explanation and source code analysis, see the EIP text.\n', ' */\n', 'interface IERC1820Registry {\n', '    /**\n', '     * @dev Sets `newManager` as the manager for `account`. A manager of an\n', '     * account is able to set interface implementers for it.\n', '     *\n', '     * By default, each account is its own manager. Passing a value of `0x0` in\n', '     * `newManager` will reset the manager to this initial state.\n', '     *\n', '     * Emits a {ManagerChanged} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     */\n', '    function setManager(address account, address newManager) external;\n', '\n', '    /**\n', '     * @dev Returns the manager for `account`.\n', '     *\n', '     * See {setManager}.\n', '     */\n', '    function getManager(address account) external view returns (address);\n', '\n', '    /**\n', "     * @dev Sets the `implementer` contract as ``account``'s implementer for\n", '     * `interfaceHash`.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     * The zero address can also be used in `implementer` to remove an old one.\n', '     *\n', '     * See {interfaceHash} to learn how these are created.\n', '     *\n', '     * Emits an {InterfaceImplementerSet} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be the current manager for `account`.\n', '     * - `interfaceHash` must not be an {IERC165} interface id (i.e. it must not\n', '     * end in 28 zeroes).\n', '     * - `implementer` must implement {IERC1820Implementer} and return true when\n', '     * queried for support, unless `implementer` is the caller. See\n', '     * {IERC1820Implementer-canImplementInterfaceForAddress}.\n', '     */\n', '    function setInterfaceImplementer(address account, bytes32 _interfaceHash, address implementer) external;\n', '\n', '    /**\n', '     * @dev Returns the implementer of `interfaceHash` for `account`. If no such\n', '     * implementer is registered, returns the zero address.\n', '     *\n', '     * If `interfaceHash` is an {IERC165} interface id (i.e. it ends with 28\n', '     * zeroes), `account` will be queried for support of it.\n', '     *\n', "     * `account` being the zero address is an alias for the caller's address.\n", '     */\n', '    function getInterfaceImplementer(address account, bytes32 _interfaceHash) external view returns (address);\n', '\n', '    /**\n', '     * @dev Returns the interface hash for an `interfaceName`, as defined in the\n', '     * corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-1820#interface-name[section of the EIP].\n', '     */\n', '    function interfaceHash(string calldata interfaceName) external pure returns (bytes32);\n', '\n', '    /**\n', '     *  @notice Updates the cache with whether the contract implements an ERC165 interface or not.\n', '     *  @param account Address of the contract for which to update the cache.\n', '     *  @param interfaceId ERC165 interface for which to update the cache.\n', '     */\n', '    function updateERC165Cache(address account, bytes4 interfaceId) external;\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not.\n', '     *  If the result is not cached a direct lookup on the contract address is performed.\n', '     *  If the result is not cached or the cached value is out-of-date, the cache MUST be updated manually by calling\n', '     *  {updateERC165Cache} with the contract address.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165Interface(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    /**\n', '     *  @notice Checks whether a contract implements an ERC165 interface or not without using nor updating the cache.\n', '     *  @param account Address of the contract to check.\n', '     *  @param interfaceId ERC165 interface to check.\n', '     *  @return True if `account` implements `interfaceId`, false otherwise.\n', '     */\n', '    function implementsERC165InterfaceNoCache(address account, bytes4 interfaceId) external view returns (bool);\n', '\n', '    event InterfaceImplementerSet(address indexed account, bytes32 indexed interfaceHash, address indexed implementer);\n', '\n', '    event ManagerChanged(address indexed account, address indexed newManager);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/HoprFarm.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * 5 million HOPR tokens are allocated as incentive for liquidity providers on uniswap.\n', ' * This incentive will be distributed on an approx. weekly-basis over 3 months (13 weeks) \n', ' * Liquidity providers (LPs) can deposit their LP-tokens (UniswapV2Pair token for HOPR-DAI)\n', ' * to this HoprFarm contract for at least 1 week (minimum deposit period) to receive rewards. \n', ' */\n', 'contract HoprFarm is IERC777Recipient, ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using Arrays for uint256[];\n', '\n', '    uint256 public constant TOTAL_INCENTIVE = 5000000 ether;\n', '    uint256 public constant WEEKLY_BLOCK_NUMBER = 44800; // Taking 13.5 s/block as average block time. thus 7*24*60*60/13.5 = 44800 blocks per week. \n', '    uint256 public constant TOTAL_CLAIM_PERIOD = 13; // Incentives are released over a period of 13 weeks. \n', '    uint256 public constant WEEKLY_INCENTIVE = 384615384615384615384615; // 5000000/13 weeks There is very small amount of remainder for the last week (+5 wei)\n', '\n', '    // setup ERC1820\n', '    IERC1820Registry private constant ERC1820_REGISTRY = IERC1820Registry(0x1820a4B7618BdE71Dce8cdc73aAB6C95905faD24);\n', '    bytes32 private constant TOKENS_RECIPIENT_INTERFACE_HASH = keccak256("ERC777TokensRecipient");\n', '\n', '    struct LiquidityProvider {\n', '        mapping(uint256=>uint256) eligibleBalance; // Amount of liquidity tokens\n', '        uint256 claimedUntil; // the last period where the liquidity provider has claimed tokens\n', '        uint256 currentBalance;\n', '    }\n', '\n', '    // an ascending block numbers of start/end of each farming interval. \n', '    // E.g. the first farming interval is (distributionBlocks[0], distributionBlocks[1]].\n', '    uint256[] public distributionBlocks;\n', '    mapping(uint256=>uint256) public eligibleLiquidityPerPeriod;\n', '    mapping(address=>LiquidityProvider) public liquidityProviders;\n', '    uint256 public totalPoolBalance;\n', '    uint256 public claimedIncentive;\n', '    address public multisig;\n', '    IERC20 public pool; \n', '    IERC20 public hopr; \n', '\n', '    event TokenAdded(address indexed provider, uint256 indexed period, uint256 amount);\n', '    event TokenRemoved(address indexed provider, uint256 indexed period, uint256 amount);\n', '    event IncentiveClaimed(address indexed provider, uint256 indexed until, uint256 amount);\n', '\n', '    /**\n', '     * @dev Modifier to check address is multisig\n', '     */\n', '    modifier onlyMultisig(address adr) {\n', '        require(adr == multisig, "HoprFarm: Only DAO multisig");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev provides the farming schedule.\n', '     * @param _pool address Address of the HOPR-DAI uniswap pool.\n', '     * @param _token address Address of the HOPR token.\n', '     * @param _multisig address Address of the HOPR DAO multisig.\n', '     */\n', '    constructor(address _pool, address _token, address _multisig) public {\n', '        require(IUniswapV2Pair(_pool).token0() == _token || IUniswapV2Pair(_pool).token1() == _token, "HoprFarm: wrong token address");\n', '        pool = IERC20(_pool);\n', '        hopr = IERC20(_token);\n', '        multisig = _multisig;\n', '        distributionBlocks.push(0);\n', '        ERC1820_REGISTRY.setInterfaceImplementer(address(this), TOKENS_RECIPIENT_INTERFACE_HASH, address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev ERC777 hook triggered when multisig send HOPR token to this contract.\n', '     * @param operator address operator requesting the transfer\n', '     * @param from address token holder address\n', '     * @param to address recipient address\n', '     * @param amount uint256 amount of tokens to transfer\n', '     * @param userData bytes hex string of the starting block number. e.g. "0xb66bbd" for 11955133. It should not be longer than 3 bytes\n', '     * @param operatorData bytes extra information provided by the operator (if any)\n', '     */\n', '    function tokensReceived(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        bytes calldata userData,\n', '        // solhint-disable-next-line no-unused-vars\n', '        bytes calldata operatorData\n', '    ) external override onlyMultisig(from) nonReentrant {\n', '        require(msg.sender == address(hopr), "HoprFarm: Sender must be HOPR token");\n', '        require(to == address(this), "HoprFarm: Must be sending tokens to HOPR farm");\n', '        require(amount == TOTAL_INCENTIVE, "HoprFarm: Only accept 5 million HOPR token");\n', '        // take block number from userData, varies from 0x000000 to 0xffffff.\n', '        // This value is sufficient as 0xffff will be in March 2023.\n', '        require(userData.length == 3, "HoprFarm: Start block number needs to have three bytes");\n', '        require(distributionBlocks[0] == 0, "HoprFarm: Not initialized yet.");\n', '        bytes32 m;\n', '        assembly {\n', '            // it first loads the userData at the position 228 = 4 + 32 * 7, \n', '            // where 4 is the method signature and 7 is the storage of userData\n', '            // Then bit shift the right-padded bytes32 to remove all the padded zeros\n', '            // Given the blocknumber is not longer than 3 bytes, bitwise it needs to shift\n', '            // log2(16) * (32 - 3) * 2 = 232\n', '            m := shr(232, calldataload(228))\n', '        }\n', '        // update distribution blocks\n', '        uint256 startBlock = uint256(m);\n', '        require(startBlock >= block.number, "HoprFarm: Start block number should be in the future");\n', '        distributionBlocks[0] = startBlock;\n', '        for (uint256 i = 1; i <= TOTAL_CLAIM_PERIOD; i++) {\n', '            distributionBlocks.push(startBlock + i * WEEKLY_BLOCK_NUMBER);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Multisig can recover tokens (pool tokens/hopr tokens/any other random tokens)\n', '     * @param token Address of the token to be recovered.\n', '     */\n', '    function recoverToken(address token) external onlyMultisig(msg.sender) nonReentrant {\n', '        if (token == address(hopr)) {\n', '            hopr.safeTransfer(multisig, hopr.balanceOf(address(this)).add(claimedIncentive).sub(TOTAL_INCENTIVE));\n', '        } else if (token == address(pool)) {\n', '            pool.safeTransfer(multisig, pool.balanceOf(address(this)).sub(totalPoolBalance));\n', '        } else {\n', '            IERC20(token).safeTransfer(multisig, IERC20(token).balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Claim incenvtives for an account. Update total claimed incentive.\n', '     * @param provider Account of liquidity provider\n', '     */\n', '    function claimFor(address provider) external nonReentrant {\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        _claimFor(currentPeriod, provider);\n', '    }\n', '\n', '    /**\n', '     * @dev liquidity provider deposits their Uniswap HOPR-DAI tokens to the contract\n', '     * It updates the current balance and the eligible farming balance\n', '     * Thanks to `permit` function of UNI token (see below, link to source code), \n', '     * https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol\n', '     * LPs do not need to call `approve` seperately. `spender` is this farm contract. \n', '     * This function can be called by anyone with a valid signature of liquidity provider.\n', '     * @param amount Amount of pool token to be staked into the contract. It is also the amount in the signature.\n', '     * @param owner Address of the liquidity provider.\n', '     * @param deadline Timestamp after which the signature is no longer valid.\n', '     * @param v ECDSA signature.\n', '     * @param r ECDSA signature.\n', '     * @param s ECDSA signature.\n', '     */\n', '    function openFarmWithPermit(uint256 amount, address owner, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external nonReentrant {\n', '        IUniswapV2Pair(address(pool)).permit(owner, address(this), amount, deadline, v, r, s);\n', '        _openFarm(amount, owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by liquidty provider to deposit their Uniswap HOPR-DAI tokens to the contract\n', '     * It updates the current balance and the eligible farming balance\n', '     * @notice An `apprpove(<farm contract>, amount)` needs to be called prior to `openFarm`\n', '     * @param amount Amount of pool token to be staked into the contract.\n', '     */\n', '    function openFarm(uint256 amount) external nonReentrant {\n', '        _openFarm(amount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Claims all the reward until current block number and close the farm.\n', '     */\n', '    function claimAndClose() external nonReentrant {\n', '        // get current farm period\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        _claimFor(currentPeriod, msg.sender);\n', '        _closeFarm(currentPeriod, msg.sender, liquidityProviders[msg.sender].currentBalance);\n', '    }\n', '\n', '    /**\n', '     * @dev liquidity provider removes their Uniswap HOPR-DAI tokens to the contract\n', '     * It updates the current balance and the eligible farming balance\n', '     * @param amount Amount of pool token to be removed from the contract.\n', '     */\n', '    function closeFarm(uint256 amount) external nonReentrant {\n', '        // update balance to the right phase\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        _closeFarm(currentPeriod, msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev returns the first index that contains a value greater or equal to the current `block.number`\n', '     * If all numbers are strictly below block.number, returns array length.\n', '     * @notice get the current farm period. 0 means "not started", 1 means "1st period", ...\n', '     * If the returned value is larger than `maxFarmPeriod`, it means farming is "closed"\n', '     */\n', '    function currentFarmPeriod() public view returns (uint256) {\n', '        return distributionBlocks.findUpperBound(block.number);\n', '    }\n', '\n', '    /**\n', '     * @dev calculate virtual return based on current staking. Amount of tokens one can claim in the next period.\n', '     * @param amountToStake Amount of pool token that a liquidity provider would stake\n', '     */\n', '    function currentFarmIncentive(uint256 amountToStake) public view returns (uint256) {\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        if (currentPeriod >= TOTAL_CLAIM_PERIOD) {\n', '            return 0;            \n', '        }\n', '        return WEEKLY_INCENTIVE.mul(amountToStake).div(eligibleLiquidityPerPeriod[currentPeriod+1].add(amountToStake));\n', '    }\n', '\n', '    /**\n', '     * @dev Get the total amount of incentive to be claimed by the liquidity provider.\n', '     * @param provider Account of liquidity provider\n', '     */\n', '    function incentiveToBeClaimed(address provider) public view returns (uint256) {\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        return _incentiveToBeClaimed(currentPeriod, provider);\n', '    }\n', '\n', '    /**\n', '     * @dev update the liquidity token balance, of which is used for calculating the result of farming\n', '     * It updates the balance for the following periods. For the previous period, if the balance reduces \n', '     * the eligible balance of the previous round reduces. If the balance increases, it only affects the\n', '     * following rounds.\n', '     * @param account Address of the liquidity provider\n', '     * @param newBalance Latest balance\n', '     * @param currentPeriod Index of the farming period at current block number.\n', '     */\n', '    function updateEligibleBalance(address account, uint256 newBalance, uint256 currentPeriod) internal {\n', '        if (currentPeriod > 0) {\n', '            uint256 balanceFromLastPeriod = liquidityProviders[account].eligibleBalance[currentPeriod - 1];\n', '            if (balanceFromLastPeriod > newBalance) {\n', '                liquidityProviders[account].eligibleBalance[currentPeriod - 1] = newBalance;\n', '                eligibleLiquidityPerPeriod[currentPeriod - 1] = eligibleLiquidityPerPeriod[currentPeriod - 1].sub(balanceFromLastPeriod).add(newBalance);\n', '            }\n', '        }\n', '        uint256 newEligibleLiquidityPerPeriod = eligibleLiquidityPerPeriod[currentPeriod].sub(liquidityProviders[account].eligibleBalance[currentPeriod]).add(newBalance);\n', '        for (uint256 i = currentPeriod; i < TOTAL_CLAIM_PERIOD; i++) {\n', '            liquidityProviders[account].eligibleBalance[i] = newBalance;\n', '            eligibleLiquidityPerPeriod[i] = newEligibleLiquidityPerPeriod;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev liquidity provider deposits their Uniswap HOPR-DAI tokens to the contract\n', '     * It updates the current balance and the eligible farming balance\n', '     * @param amount Amount of pool token to be staked into the contract.\n', '     * @param provider Address of the liquidity provider.\n', '     */\n', '    function _openFarm(uint256 amount, address provider) internal {\n', '        // update balance to the right phase\n', '        uint256 currentPeriod = distributionBlocks.findUpperBound(block.number);\n', '        require(currentPeriod < TOTAL_CLAIM_PERIOD, "HoprFarm: Farming ended");\n', '        // always add currentBalance\n', '        uint256 newBalance = liquidityProviders[provider].currentBalance.add(amount);\n', '        liquidityProviders[provider].currentBalance = newBalance;\n', '        totalPoolBalance = totalPoolBalance.add(amount);      \n', '        // update eligible balance\n', '        updateEligibleBalance(provider, newBalance, currentPeriod);\n', '        // transfer token\n', '        pool.safeTransferFrom(provider, address(this), amount);\n', '        // emit event\n', '        emit TokenAdded(provider, currentPeriod, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Claim incenvtives for an account. Update total claimed incentive.\n', '     * @param currentPeriod Current farm period\n', '     * @param provider Account of liquidity provider\n', '     */\n', '    function _claimFor(uint256 currentPeriod, address provider) internal {\n', '        require(currentPeriod > 1, "HoprFarm: Too early to claim");\n', '        uint256 farmed = _incentiveToBeClaimed(currentPeriod, provider);\n', '        require(farmed > 0, "HoprFarm: Nothing to claim");\n', '        liquidityProviders[provider].claimedUntil = currentPeriod - 1;\n', '        claimedIncentive = claimedIncentive.add(farmed);\n', '        // transfer farmed tokens to the provider\n', '        hopr.safeTransfer(provider, farmed);\n', '        emit IncentiveClaimed(provider, currentPeriod - 1, farmed);\n', '    }\n', '\n', '    /**\n', '     * @dev liquidity provider removes their Uniswap HOPR-DAI tokens to the contract\n', '     * It updates the current balance and the eligible farming balance\n', '     * @param currentPeriod Current farm period\n', '     * @param provider Account of liquidity provider\n', '     * @param amount Amount of pool token to be removed from the contract.\n', '     */\n', '    function _closeFarm(uint256 currentPeriod, address provider, uint256 amount) internal {\n', '        // always add currentBalance\n', '        uint256 newBalance = liquidityProviders[provider].currentBalance.sub(amount);\n', '        liquidityProviders[provider].currentBalance = newBalance;\n', '        totalPoolBalance = totalPoolBalance.sub(amount);      \n', '        // update eligible balance\n', '        updateEligibleBalance(provider, newBalance, currentPeriod);\n', '        // transfer token\n', '        pool.safeTransfer(provider, amount);\n', '        // emit event\n', '        emit TokenRemoved(provider, currentPeriod, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Private function that gets the total amount of incentive to be claimed by the liquidity provider.\n', '     * @param currentPeriod Current farm period\n', '     * @param provider Account of liquidity provider\n', '     */\n', '    function _incentiveToBeClaimed(uint256 currentPeriod, address provider) private view returns (uint256) {\n', '        uint256 claimedPeriod = liquidityProviders[provider].claimedUntil;\n', '        if (currentPeriod < 1 || claimedPeriod >= currentPeriod) {\n', '            return 0;            \n', '        }\n', '        uint256 farmed;\n', '        for (uint256 i = claimedPeriod; i < currentPeriod - 1; i++) {\n', '            if (eligibleLiquidityPerPeriod[i] > 0) {\n', '                farmed = farmed.add(WEEKLY_INCENTIVE.mul(liquidityProviders[provider].eligibleBalance[i]).div(eligibleLiquidityPerPeriod[i]));\n', '            }\n', '        }\n', '        return farmed;\n', '    }\n', '}']