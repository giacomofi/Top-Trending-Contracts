['pragma solidity ^0.5.17;\n', '\n', 'import "./ERC20Detailed.sol";\n', 'import "./BurnableToken.sol";\n', '\n', '/**\n', ' * @dev Optional functions from the ERC20 standard.\n', ' */\n', 'contract STUDToken is ERC20Detailed, BurnableToken {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     * @param _initialTotalSupply Total supply of STUD Token.\n', '     * @param _owner Owner of the STUD Token.\n', '     */\n', '    constructor (uint256 _initialTotalSupply, address payable _owner) public {\n', '        _name = "Studyum Token";\n', '        _symbol = "STUD";\n', '        _decimals = 18;\n', '        _totalSupply = _initialTotalSupply;\n', '        _balances[_owner] = _totalSupply;\n', '        transferOwnership(_owner);\n', '        emit Transfer(address(0), _owner, _totalSupply);\n', '    }\n', '\n', '    /**\n', '     * @dev Used for bulk transfering. It can be used by anyone. Useful for airdrop.\n', '     * @param beneficiaries Array of addresses to receive tokens.\n', '     * @param amounts Array of token amounts addresses should receive.\n', '     */\n', '    function bulkTransfer(address[] calldata beneficiaries, uint256[] calldata amounts) external {\n', '        require(beneficiaries.length > 0, "Beneficiaries shouldn\'t be empty.");\n', '        require(beneficiaries.length == amounts.length, "Array lengths should be equal.");\n', '        uint256 amountSum = 0;\n', '        for (uint256 i=0; i<beneficiaries.length; i++) {\n', '            require(beneficiaries[i] != address(0), "Beneficiary is address zero.");\n', '            require(amounts[i]>0, "Amount is zero.");\n', '            amountSum += amounts[i];\n', '        }\n', '        require(amountSum <= balanceOf(msg.sender), "Sender amount too low.");\n', '        for (uint256 i=0; i<beneficiaries.length; i++) {\n', '            transfer(beneficiaries[i], amounts[i]);\n', '        }\n', '        emit BulkTransfer(msg.sender, amountSum, beneficiaries.length);\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Revertible fallback to prevent Ether deposits.\n', '     */\n', '    function () external payable {\n', '        revert("Revert the ETH.");\n', '    }\n', '\n', '    /**\n', '     * @dev Claim mistakenly sent tokens to the contract.\n', '     * @param _tokenAddress Address of the token to be extracted.\n', '     */\n', '    function claimTokens(address _tokenAddress) public onlyOwner {\n', '        if (_tokenAddress == address(0)) {\n', '            owner().transfer(address(this).balance);\n', '            return;\n', '        }\n', '\n', '        IERC20 token = IERC20(_tokenAddress);\n', '        uint balance = token.balanceOf(address(this));\n', '        token.transfer(owner(), balance);\n', '        emit ClaimedTokens(_tokenAddress, owner(), balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Emitted when the mistakenly sent tokens are claimed.\n', '     */\n', '    event ClaimedTokens(address _token, address _owner, uint256 _amount);\n', '    /**\n', '     * @dev Emitted when the bulk transfer is executed.\n', '     */    \n', '    event BulkTransfer(address _sender, uint256 _totalAmount, uint256 _beneficiaryCount);\n', '\n', '}']