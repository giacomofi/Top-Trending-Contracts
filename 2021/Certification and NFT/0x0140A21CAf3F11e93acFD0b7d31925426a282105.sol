['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'import "@openzeppelin/contracts/access/AccessControl.sol";\n', '\n', '/**\n', ' * @notice Access Controls contract for the Market Trading Platform\n', ' */\n', 'contract MarketTradingAccessControls is AccessControl {\n', '    /// @notice Role definitions\n', '    bytes32 public constant MINTER_ROLE = \n', '    0x9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6; // keccak256("MINTER_ROLE")\n', '\n', '    bytes32 public constant SMART_CONTRACT_ROLE = \n', '    0x9d49f397ae9ef1a834b569acb967799a367061e305932181a44f5773da873bfd; //keccak256("SMART_CONTRACT_ROLE");\n', '\n', '    /// @notice Events for adding and removing various roles\n', '    event AdminRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event AdminRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event MinterRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event MinterRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event SmartContractRoleGranted(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    event SmartContractRoleRemoved(\n', '        address indexed beneficiary,\n', '        address indexed caller\n', '    );\n', '\n', '    /**\n', '     * @notice The deployer is automatically given the admin role which will allow them to then grant roles to other addresses\n', '     */\n', '    constructor() public {\n', '        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '    }\n', '    /////////////\n', '    // Lookups //\n', '    /////////////\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the admin role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasAdminRole(address _address) external view returns (bool) {\n', '        return hasRole(DEFAULT_ADMIN_ROLE, _address);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the minter role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasMinterRole(address _address) external view returns (bool) {\n', '        return hasRole(MINTER_ROLE, _address);\n', '    }\n', '\n', '    /**\n', '     * @notice Used to check whether an address has the smart contract role\n', '     * @param _address EOA or contract being checked\n', '     * @return bool True if the account has the role or false if it does not\n', '     */\n', '    function hasSmartContractRole(address _address) external view returns (bool) {\n', '        return hasRole(SMART_CONTRACT_ROLE, _address);\n', '    }\n', '\n', '    ///////////////\n', '    // Modifiers //\n', '    ///////////////\n', '\n', '    /**\n', '     * @notice Grants the admin role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addAdminRole(address _address) external {\n', '        grantRole(DEFAULT_ADMIN_ROLE, _address);\n', '        emit AdminRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the admin role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeAdminRole(address _address) external {\n', '        revokeRole(DEFAULT_ADMIN_ROLE, _address);\n', '        emit AdminRoleRemoved(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Grants the minter role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addMinterRole(address _address) external {\n', '        grantRole(MINTER_ROLE, _address);\n', '        emit MinterRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the minter role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeMinterRole(address _address) external {\n', '        revokeRole(MINTER_ROLE, _address);\n', '        emit MinterRoleRemoved(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Grants the smart contract role to an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract receiving the new role\n', '     */\n', '    function addSmartContractRole(address _address) external {\n', '        grantRole(SMART_CONTRACT_ROLE, _address);\n', '        emit SmartContractRoleGranted(_address, _msgSender());\n', '    }\n', '\n', '    /**\n', '     * @notice Removes the smart contract role from an address\n', '     * @dev The sender must have the admin role\n', '     * @param _address EOA or contract affected\n', '     */\n', '    function removeSmartContractRole(address _address) external {\n', '        revokeRole(SMART_CONTRACT_ROLE, _address);\n', '        emit SmartContractRoleRemoved(_address, _msgSender());\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "@openzeppelin/contracts/token/ERC721/IERC721.sol";\n', '\n', 'interface IMarketTradingNFT is IERC721 {\n', '    //View\n', '    function isApproved(uint256 _tokenId, address _operator) external view returns (bool);\n', '    function setPrimarySalePrice(uint256 _tokenId, uint256 _salePrice) external;\n', '    function postCreators(uint256 _tokenId) external view returns (address);\n', '    function exists(uint256 _tokenId) external view returns (bool);\n', '    function getNFTDetailByTokenId(uint256 _tokenId) external view returns (uint256, address, address, uint256, string memory);\n', '\n', '    //external\n', '    function mint(address _beneficiary, string calldata _tokenUri, address _designer) external returns (uint256);\n', '    function burn(uint256 _tokenId) external;\n', '    \n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "@openzeppelin/contracts/GSN/Context.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', 'import "@openzeppelin/contracts/utils/Address.sol";\n', 'import "./AccessControl/MarketTradingAccessControls.sol";\n', 'import "./NFT/IMarketTradingNFT.sol";\n', '\n', '/**\n', ' * @notice Primary sale auction contract for MarketTrading NFTs\n', ' */\n', 'contract NFTAuction is Context, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    using Address for address payable;\n', '\n', '    /// @notice Event emitted only on construction. To be used by indexers\n', '    event NFTAuctionContractDeployed();\n', '\n', '    event PauseToggled(\n', '        bool isPaused\n', '    );\n', '\n', '    event UpdateAccessControls(\n', '        address indexed accessControls\n', '    );\n', '\n', '    event UpdatePlatformFeeRecipient(\n', '        address payable platformFeeRecipient\n', '    );\n', '\n', '    event UpdatePlatformFee(\n', '        uint256 platformFee\n', '    );\n', '\n', '    event UpdateResellFee(\n', '        uint256 resellFee\n', '    );\n', '\n', '    event UpdateCancelFee(\n', '        uint256 cancelFee\n', '    );\n', '\n', '    event UpdateMinBidIncrement(\n', '        uint256 minBidIncrement\n', '    );\n', '\n', '    event UpdateBidLockTime(\n', '        uint256 bidLockTime\n', '    );\n', '\n', '    event UpdateAuctionStatus(\n', '        string igUrl,\n', '        bool status\n', '    );\n', '\n', '    event BidPlaced(\n', '        string igUrl,\n', '        string edition,\n', '        address indexed bidder,\n', '        uint256 bid\n', '    );\n', '\n', '    event BidWithdrawn(\n', '        string indexed igUrl,\n', '        address indexed bidder,\n', '        uint256 bid\n', '    );\n', '\n', '    event BidRefunded(\n', '        address indexed bidder,\n', '        uint256 bid\n', '    );\n', '\n', '    event AuctionResulted(\n', '        uint256 indexed tokenId,\n', '        address seller,\n', '        string tokenUri,\n', '        string edition,\n', '        address indexed winner,\n', '        uint256 winningBid\n', '    );\n', '\n', '    /// @notice Information about the sender that placed a bit on an auction\n', '    struct HighestBid {\n', '        address payable bidder;\n', '        uint256 bid;\n', '        uint256 lastBidTime;\n', '    }\n', '\n', '    struct AuctionDetail {\n', '        uint256 tokenId;\n', '        address owner;\n', '    }\n', '\n', '    /// @notice instagram URL -> highest bidder info (if a bid has been received)\n', '    mapping(string => HighestBid) public highestBids;\n', '\n', '    /// @notice instagram URL -> Auction finished info \n', '    mapping(string => AuctionDetail) public auctionDetails;\n', '\n', '    /// @notice NFT - the only NFT that can be auctioned in this contract\n', '    IMarketTradingNFT public marketTradingNft;\n', '\n', '    /// @notice responsible for enforcing admin access\n', '    MarketTradingAccessControls public accessControls;\n', '    \n', "    /// @notice globally bid lock time, bidders can't withdraw bid before bidLockTime.\n", '    uint256 public bidLockTime = 1 days;\n', '\n', '    /// @notice globally and across all auctions, the amount by which a bid has to increase\n', '    uint256 public minBidIncrement = 0.01 ether;\n', '\n', '    /// @notice global platform fee, assumed to always be to 1 decimal place i.e. 50 = 5.0%\n', '    uint256 public platformFee = 50;\n', '\n', '    /// @notice global resell platform fee, assumed to always be to 1 decimal place i.e. 25 = 2.5%\n', '    uint256 public resellFee = 25;\n', '\n', '    /// @notice global creator fee, assumed to always be to 1 decimal place i.e. 100 = 10.0%\n', '    uint256 public creatorFee = 100;\n', '\n', '    /// @notice global cancel fee, assumed to always be to 1 decimal place i.e. 50 = 5.0%\n', '    uint256 public cancelFee = 50;\n', '\n', '    /// @notice where to send platform fee funds to\n', '    address payable public platformFeeRecipient;\n', '\n', '    /// @notice for switching off auction creations, bids and withdrawals\n', '    bool public isPaused;\n', '\n', '    modifier whenNotPaused() {\n', '        require(!isPaused, "Function is currently paused");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        MarketTradingAccessControls _accessControls,\n', '        IMarketTradingNFT _marketTradingNft,\n', '        address payable _platformFeeRecipient\n', '    ) public {\n', '        // Check inputed addresses are not zero address\n', '        require(address(_accessControls) != address(0), "NFTAuction: Invalid Access Controls");\n', '        require(address(_marketTradingNft) != address(0), "NFTAuction: Invalid NFT");\n', '        require(_platformFeeRecipient != address(0), "NFTAuction: Invalid Platform Fee Recipient");\n', '\n', '        accessControls = _accessControls;\n', '        marketTradingNft = _marketTradingNft;\n', '        platformFeeRecipient = _platformFeeRecipient;\n', '\n', '        emit NFTAuctionContractDeployed();\n', '    }\n', '\n', '\n', '    /**\n', '     @notice Places a new bid, out bidding the existing bidder if found and criteria is reached\n', '     @dev Only callable when the auction is open\n', '     @dev Bids from smart contracts are prohibited to prevent griefing with always reverting receiver\n', '     @param _igUrl Instagram URL of the fake NFT\n', '     */\n', '    function placeBid(string memory _igUrl) external payable nonReentrant whenNotPaused {\n', '        require(_msgSender().isContract() == false, "NFTAuction.placeBid: No contracts permitted");\n', '\n', '        uint256 bidAmount = msg.value;\n', '\n', '        // Ensure bid adheres to outbid increment and threshold\n', '        HighestBid storage highestBid = highestBids[_igUrl];\n', '        uint256 minBidRequired = highestBid.bid.add(minBidIncrement);\n', '        require(bidAmount >= minBidRequired, "NFTAuction.placeBid: Failed to outbid highest bidder");\n', '\n', '        // Refund existing top bidder if found\n', '        if (highestBid.bidder != address(0)) {\n', '            _refundHighestBidder(highestBid.bidder, highestBid.bid);\n', '        }\n', '\n', '        // assign top bidder and bid time\n', '        highestBid.bidder = _msgSender();\n', '        highestBid.bid = bidAmount;\n', '        highestBid.lastBidTime = _getNow();\n', '\n', '        emit BidPlaced(_igUrl, "1 of 1", _msgSender(), bidAmount);\n', '    }\n', '\n', '    /**\n', '     @notice Given a sender who has the highest bid on a NFT, allows them to withdraw their bid\n', '     @dev Only callable by the existing top bidder\n', '     @param _igUrl Instagram URL of the fake NFT\n', '     */\n', '    function withdrawBid(string memory _igUrl) external nonReentrant whenNotPaused {\n', '        HighestBid storage highestBid = highestBids[_igUrl];\n', '\n', '        // Ensure highest bidder is the caller\n', '        require(highestBid.bidder == _msgSender(), "NFTAuction.withdrawBid: You are not the highest bidder");\n', '\n', '        require(_getNow() >= highestBid.lastBidTime + bidLockTime, "NFTAuction.withdrawBid: Can\'t withdraw before locktime passed");\n', '\n', '        uint256 previousBid = highestBid.bid;\n', '\n', '        // Clean up the existing top bid\n', '        delete highestBids[_igUrl];\n', '\n', '        // Refund the top bidder\n', '        _refundHighestBidder(_msgSender(), previousBid);\n', '\n', '        emit BidWithdrawn(_igUrl, _msgSender(), previousBid);\n', '    }\n', '\n', '    //////////\n', '    // Admin /\n', '    //////////\n', '\n', '    /**\n', '     @notice Results a finished auction\n', '     @dev Only admin or smart contract\n', '     @dev Auction can only be resulted if there has been a bidder and reserve met.\n', '     @dev If there have been no bids, the auction needs to be cancelled instead using `cancelAuction()`\n', '     @param _igUrl Instagram URL of the fake NFT\n', '     @param _seller The creator of Instagram Post\n', '     */\n', '    function resultAuction(string memory _igUrl, address _seller) external nonReentrant {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()) || accessControls.hasSmartContractRole(_msgSender()),\n', '            "NFTAuction.resultAuction: Sender must be admin or smart contract"\n', '        );\n', '\n', '        // Ensure seller is not zero address\n', '        require(_seller != address(0), "NFTAuction.resultAuction: Seller should not be zero address");\n', '\n', '        // Get info on who the highest bidder is\n', '        HighestBid storage highestBid = highestBids[_igUrl];\n', '        address winner = highestBid.bidder;\n', '        uint256 winningBid = highestBid.bid;\n', '        uint256 maxShare = 1000;\n', '\n', '        // Ensure there is a winner\n', '        require(winner != address(0), "NFTAuction.resultAuction: no open bids");\n', '\n', '        // Clean up the highest bid\n', '        delete highestBids[_igUrl];\n', '        \n', '        AuctionDetail storage auctionDetail = auctionDetails[_igUrl];\n', '\n', '        uint256 platformFeeInETH;\n', '        uint256 creatorFeeInETH;\n', '\n', '        if (auctionDetail.tokenId == 0)\n', '        {\n', '            // Mint NFT to the highest bidder.\n', '            uint256 _tokenId = marketTradingNft.mint(winner, _igUrl, _seller);\n', '            auctionDetail.tokenId = _tokenId;\n', '            auctionDetail.owner = winner;\n', '\n', '            // Work out platform fee from above reserve amount\n', '            platformFeeInETH = winningBid.mul(platformFee).div(maxShare);\n', '        }\n', '        else {\n', '            // Transfer NFT to the new higgest bidder\n', '            require(marketTradingNft.ownerOf(auctionDetail.tokenId) == _seller,"NFTAuction.resultAuction: seller is not owner of NFT");\n', '\n', '            marketTradingNft.safeTransferFrom(auctionDetail.owner, winner, auctionDetail.tokenId);\n', '            auctionDetail.owner = winner;\n', '\n', '            // Work out platform fee and creator fee from above reserve amount\n', '            platformFeeInETH = winningBid.mul(resellFee).div(maxShare);\n', '            creatorFeeInETH = winningBid.mul(creatorFee).div(maxShare);\n', '        }\n', '\n', '        // Record the primary sale price for the NFT\n', '        marketTradingNft.setPrimarySalePrice(auctionDetail.tokenId, winningBid);\n', '\n', '        // Send platform fee\n', '        (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeInETH}("");\n', '        require(platformTransferSuccess, "NFTAuction.resultAuction: Failed to send platform fee");\n', '\n', '        // Send remaining to seller\n', '        (bool sellerTransferSuccess,) = _seller.call{value : winningBid.sub(platformFeeInETH).sub(creatorFeeInETH)}("");\n', '        require(sellerTransferSuccess, "NFTAuction.resultAuction: Failed to send the instagram post creator their royalties");\n', '\n', '        if(creatorFeeInETH > 0) {\n', '            // Send creator fee\n', '            (bool creatorTransferSuccess,) = marketTradingNft.postCreators(auctionDetail.tokenId).call{value : creatorFeeInETH}("");\n', '            require(creatorTransferSuccess, "NFTAuction.resultAuction: Failed to send creator fee");\n', '        }\n', '\n', '        emit AuctionResulted(auctionDetail.tokenId, _seller, _igUrl, "1 of 1", winner, winningBid.sub(platformFeeInETH));\n', '    }\n', '\n', '    /**\n', '     @notice Toggling the pause flag\n', '     @dev Only admin\n', '     */\n', '    function toggleIsPaused() external {\n', '        require(accessControls.hasAdminRole(_msgSender()), "NFTAuction.toggleIsPaused: Sender must be admin");\n', '        isPaused = !isPaused;\n', '        emit PauseToggled(isPaused);\n', '    }\n', '    \n', '    /**\n', '     @notice Update the amount by which bids have to increase, across all auctions\n', '     @dev Only admin\n', '     @param _minBidIncrement New bid step in WEI\n', '     */\n', '    function updateMinBidIncrement(uint256 _minBidIncrement) external {\n', '        require(accessControls.hasAdminRole(_msgSender()), "NFTAuction.updateMinBidIncrement: Sender must be admin");\n', '        minBidIncrement = _minBidIncrement;\n', '        emit UpdateMinBidIncrement(_minBidIncrement);\n', '    }\n', '\n', '    /**\n', "     @notice Update the lock time of the higgest bid, before locktime passed the highest bidder can't cancel the auction\n", '     @dev Only admin\n', '     @param _bidLockTime New bid lock time\n', '     */\n', '    function updateBidLockTime(uint256 _bidLockTime) external {\n', '        require(accessControls.hasAdminRole(_msgSender()), "NFTAuction.updateBidLockTime: Sender must be admin");\n', '        bidLockTime = _bidLockTime;\n', '        emit UpdateBidLockTime(_bidLockTime);\n', '    }   \n', '\n', '    /**\n', '     @notice Method for updating the access controls contract used by the NFT\n', '     @dev Only admin\n', '     @param _accessControls Address of the new access controls contract (Cannot be zero address)\n', '     */\n', '    function updateAccessControls(MarketTradingAccessControls _accessControls) external {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()),\n', '            "NFTAuction.updateAccessControls: Sender must be admin"\n', '        );\n', '\n', '        require(address(_accessControls) != address(0), "NFTAuction.updateAccessControls: Zero Address");\n', '\n', '        accessControls = _accessControls;\n', '        emit UpdateAccessControls(address(_accessControls));\n', '    }\n', '\n', '    /**\n', '     @notice Method for updating platform fee address\n', '     @dev Only admin\n', '     @param _platformFeeRecipient payable address the address to sends the funds to\n', '     */\n', '    function updatePlatformFeeRecipient(address payable _platformFeeRecipient) external {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()),\n', '            "NFTAuction.updatePlatformFeeRecipient: Sender must be admin"\n', '        );\n', '\n', '        require(_platformFeeRecipient != address(0), "NFTAuction.updatePlatformFeeRecipient: Zero address");\n', '\n', '        platformFeeRecipient = _platformFeeRecipient;\n', '        emit UpdatePlatformFeeRecipient(_platformFeeRecipient);\n', '    }\n', '\n', '    /**\n', '     @notice Method for updating platform fee \n', '     @dev Only admin\n', '     @param _platformFee New platform fee\n', '     */\n', '    function updatePlatformFee(uint256 _platformFee) external {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()),\n', '            "NFTAuction.updatePlatformFee: Sender must be admin"\n', '        );\n', '\n', '        platformFee = _platformFee;\n', '        emit UpdatePlatformFee(_platformFee);\n', '    }\n', '\n', '    /**\n', '     @notice Method for updating resell fee \n', '     @dev Only admin\n', '     @param _resellFee New resell fee\n', '     */\n', '    function updateResellFee(uint256 _resellFee) external {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()),\n', '            "NFTAuction.updateResellFee: Sender must be admin"\n', '        );\n', '\n', '        resellFee = _resellFee;\n', '        emit UpdateResellFee(_resellFee);\n', '    }\n', '\n', '    /**\n', '     @notice Method for updating cancel fee \n', '     @dev Only admin\n', '     @param _cancelFee New cancel fee\n', '     */\n', '    function updateCancelFee(uint256 _cancelFee) external {\n', '        require(\n', '            accessControls.hasAdminRole(_msgSender()),\n', '            "NFTAuction.updateCancelFee: Sender must be admin"\n', '        );\n', '\n', '        cancelFee = _cancelFee;\n', '        emit UpdateCancelFee(_cancelFee);\n', '    }\n', '    ///////////////\n', '    // Accessors //\n', '    ///////////////\n', '\n', '    /**\n', '     @notice Method for getting all info about the highest bidder\n', '     @param _igUrl Instagram URL of the fake NFT\n', '     */\n', '    function getHighestBidder(string memory _igUrl) external view returns (address payable _bidder, uint256 _bid, uint256 _lastBidTime) {\n', '        HighestBid storage highestBid = highestBids[_igUrl];\n', '        return (highestBid.bidder, highestBid.bid, highestBid.lastBidTime);\n', '    }\n', '\n', '    /////////////////////////\n', '    // Internal and Private /\n', '    /////////////////////////\n', '\n', '    function _getNow() internal virtual view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '     @notice Used for sending back escrowed funds from a previous bid\n', '     @param _currentHighestBidder Address of the last highest bidder\n', '     @param _currentHighestBid Ether amount in WEI that the bidder sent when placing their bid\n', '     */\n', '    function _refundHighestBidder(address payable _currentHighestBidder, uint256 _currentHighestBid) private {\n', '        uint256 maxShare = 1000;\n', '\n', '        // Work out platform fee from above reserve amount\n', '        uint256 platformFeeInETH = _currentHighestBid.mul(cancelFee).div(maxShare);\n', '\n', '        // Send platform fee\n', '        (bool platformTransferSuccess,) = platformFeeRecipient.call{value : platformFeeInETH}("");\n', '        require(platformTransferSuccess, "NFTAuction._refundHighestBidder: Failed to send platform fee");\n', '\n', '        // refund previous highest bid - platform fee (if bid exists)\n', '        (bool successRefund,) = _currentHighestBidder.call{value : _currentHighestBid.sub(platformFeeInETH)}("");\n', '        require(successRefund, "NFTAuction._refundHighestBidder: failed to refund previous bidder");\n', '\n', '        emit BidRefunded(_currentHighestBidder, _currentHighestBid.sub(platformFeeInETH));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/EnumerableSet.sol";\n', 'import "../utils/Address.sol";\n', 'import "../utils/Context.sol";\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "../../introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']