['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '}\n', '\n', 'interface IAggregator {\n', '    function latestAnswer() external view returns (int256 answer);\n', '}\n', '\n', '/// @title xSUSHIOracle\n', '/// @author BoringCrypto\n', '/// @notice Oracle used for getting the price of xSUSHI based on Chainlink SUSHI price\n', '/// @dev\n', 'contract xSUSHIOracleV1 is IAggregator {\n', '    using BoringMath for uint256;\n', '\n', '    IERC20 public immutable sushi;\n', '    IERC20 public immutable bar;\n', '    IAggregator public immutable sushiOracle;\n', '\n', '    constructor (IERC20 sushi_, IERC20 bar_, IAggregator sushiOracle_) public {\n', '        sushi = sushi_;\n', '        bar = bar_;\n', '        sushiOracle = sushiOracle_;\n', '    }\n', '\n', '    // Calculates the lastest exchange rate\n', '    // Uses sushi rate and xSUSHI conversion and divide for any conversion other than from SUSHI to ETH\n', '    function latestAnswer() external view override returns (int256) {\n', '        return int256(uint256(sushiOracle.latestAnswer()).mul(sushi.balanceOf(address(bar)) / bar.totalSupply()));\n', '    }\n', '}']