['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', '/**\n', ' * @dev Implementation of the March 19th 2021 to April 5th 2021 March Madness Oracle with Associated Press\n', ' *\n', ' * All interested consumers can freely access the games from the "games" mapping\n', ' * You may also listen for the "SetWinner" event.\n', ' */\n', 'contract MarchMadness2021 is Ownable {\n', '\n', '    /**\n', '     * @dev Game struct for holding the Game data\n', '     */\n', '    struct Game {\n', '        string id;\n', '        string homeTeam;\n', '        string awayTeam;\n', '        uint winner; // 0: none, 1: home, 2: away\n', '        uint homePoints;\n', '        uint awayPoints;\n', '        uint scheduled;\n', '        uint round;\n', '        /**\n', '         *  @dev round\n', '         *  0: "firstFour"\n', '         *  1: "firstRound"\n', '         *  2: "secondRound"\n', '         *  3: "sweet16"\n', '         *  4: "eliteEight"\n', '         *  5: "finalFour"\n', '         *  6: "nationalChampionship"\n', '         */\n', '    }\n', '\n', '    mapping(string => Game) public allGames;\n', '    string public ipfsFullData;\n', '\n', '    /**\n', '     *  @dev Event is called whenever a winner is called\n', '     */\n', '    event CallWinner(\n', '        string id,\n', '        string homeTeam,\n', '        string awayTeam,\n', '        uint winner,\n', '        uint homePoints,\n', '        uint awayPoints,\n', '        uint scheduled\n', '    );\n', '\n', '    /**\n', '     *  @dev Calls a Winner for a game\n', '     */\n', '    function callWinner(\n', '        uint round,\n', '        string calldata id,\n', '        string calldata homeTeam,\n', '        string calldata awayTeam,\n', '        uint winner,\n', '        uint homePoints,\n', '        uint awayPoints,\n', '        uint scheduled\n', '    )\n', '    external\n', '    onlyOwner\n', '    {\n', '        allGames[id] = Game(id, homeTeam, awayTeam, winner, homePoints, awayPoints, scheduled, round);\n', '        emit CallWinner(id, homeTeam, awayTeam, winner, homePoints, awayPoints, scheduled);\n', '    }\n', '\n', '    /**\n', '     *  @dev Returns a specific game based on id\n', '     */\n', '    function getGame(string memory id) public view returns (Game memory){\n', '        return allGames[id];\n', '    }\n', '\n', '    /**\n', '     *  @dev Event is called whenever the ipfs hash is updated\n', '     */\n', '    event SetIPFS(string ipfsHash);\n', '\n', '    /**\n', '    *   @dev Sets the IPFS hash for the pinned json containing the data for March Madness\n', '    */\n', '    function setIpfsData(string calldata ipfsHash)\n', '    external\n', '    onlyOwner\n', '    {\n', '        ipfsFullData = ipfsHash;\n', '        emit SetIPFS(ipfsHash);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']