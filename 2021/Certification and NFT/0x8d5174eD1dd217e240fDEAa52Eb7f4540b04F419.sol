['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/ISetToken.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title ISetToken\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for operating with SetTokens.\n', ' */\n', 'interface ISetToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a SetToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a SetToken\n', '     * @param positionState       Position ENUM. Default is 0; External is 1\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's cash position details and external positions\n", "     * This data structure allows O(1) access to a component's cash position units and \n", '     * virtual units.\n', '     *\n', "     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n", '     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n', '     *                                  by dividing a "real" value by the "positionMultiplier"\n', '     * @param componentIndex            \n', '     * @param externalPositionModules   List of external modules attached to each external position. Each module\n', '     *                                  maps to an external position\n', '     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n', '     */\n', '    struct ComponentPosition {\n', '      int256 virtualUnit;\n', '      address[] externalPositionModules;\n', '      mapping(address => ExternalPosition) externalPositions;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's external position details including virtual unit and any\n", '     * auxiliary data.\n', '     *\n', "     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n", '     * @param data              Arbitrary data\n', '     */\n', '    struct ExternalPosition {\n', '      int256 virtualUnit;\n', '      bytes data;\n', '    }\n', '\n', '\n', '    /* ============ Functions ============ */\n', '    \n', '    function addComponent(address _component) external;\n', '    function removeComponent(address _component) external;\n', '    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n', '    function addExternalPositionModule(address _component, address _positionModule) external;\n', '    function removeExternalPositionModule(address _component, address _positionModule) external;\n', '    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n', '    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n', '    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n', '    function getComponents() external view returns(address[] memory);\n', '    function getExternalPositionModules(address _component) external view returns(address[] memory);\n', '    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n', '    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n', '    function isComponent(address _component) external view returns(bool);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getPositions() external view returns (Position[] memory);\n', '    function getTotalComponentRealUnits(address _component) external view returns(int256);\n', '\n', '    function isInitializedModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/external/ICErc20.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '\n', '/**\n', ' * @title ICErc20\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with Compound cErc20 tokens (e.g. Dai, USDC)\n', ' */\n', 'interface ICErc20 is IERC20 {\n', '\n', '    function borrowBalanceCurrent(address _account) external returns (uint256);\n', '\n', '    function borrowBalanceStored(address _account) external view returns (uint256);\n', '\n', '    /**\n', '     * Calculates the exchange rate from the underlying to the CToken\n', '     *\n', '     * @notice Accrue interest then return the up-to-date exchange rate\n', '     * @return Calculated exchange rate scaled by 1e18\n', '     */\n', '    function exchangeRateCurrent() external returns (uint256);\n', '\n', '    function exchangeRateStored() external view returns (uint256);\n', '\n', '    function underlying() external returns (address);\n', '\n', '    /**\n', '     * Sender supplies assets into the market and receives cTokens in exchange\n', '     *\n', '     * @notice Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param _mintAmount The amount of the underlying asset to supply\n', '     * @return uint256 0=success, otherwise a failure\n', '     */\n', '    function mint(uint256 _mintAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Sender redeems cTokens in exchange for the underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param _redeemTokens The number of cTokens to redeem into underlying\n', '     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeem(uint256 _redeemTokens) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\n', '     * @dev Accrues interest whether or not the operation succeeds, unless reverted\n', '     * @param _redeemAmount The amount of underlying to redeem\n', '     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function redeemUnderlying(uint256 _redeemAmount) external returns (uint256);\n', '\n', '    /**\n', '      * @notice Sender borrows assets from the protocol to their own address\n', '      * @param _borrowAmount The amount of the underlying asset to borrow\n', '      * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '      */\n', '    function borrow(uint256 _borrowAmount) external returns (uint256);\n', '\n', '    /**\n', '     * @notice Sender repays their own borrow\n', '     * @param _repayAmount The amount to repay\n', '     * @return uint256 0=success, otherwise a failure (see ErrorReporter.sol for details)\n', '     */\n', '    function repayBorrow(uint256 _repayAmount) external returns (uint256);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/external/IComptroller.sol\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ICErc20 } from "contracts/interfaces/external/ICErc20.sol";\n', '\n', '\n', '/**\n', ' * @title IComptroller\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with Compound Comptroller\n', ' */\n', 'interface IComptroller {\n', '\n', '    /**\n', '     * @notice Add assets to be included in account liquidity calculation\n', '     * @param cTokens The list of addresses of the cToken markets to be enabled\n', '     * @return Success indicator for whether each corresponding market was entered\n', '     */\n', '    function enterMarkets(address[] memory cTokens) external returns (uint[] memory);\n', '\n', '    /**\n', "     * @notice Removes asset from sender's account liquidity calculation\n", '     * @dev Sender must not have an outstanding borrow balance in the asset,\n', '     *  or be providing neccessary collateral for an outstanding borrow.\n', '     * @param cTokenAddress The address of the asset to be removed\n', '     * @return Whether or not the account successfully exited the market\n', '     */\n', '    function exitMarket(address cTokenAddress) external returns (uint);\n', '\n', '    function getAllMarkets() external view returns (ICErc20[] memory);\n', '\n', '    function claimComp(address holder) external;\n', '}\n', '\n', '// Dependency file: contracts/protocol/integration/lib/Compound.sol\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { ICErc20 } from "contracts/interfaces/external/ICErc20.sol";\n', '// import { IComptroller } from "contracts/interfaces/external/IComptroller.sol";\n', '\n', '/**\n', ' * @title Compound\n', ' * @author Set Protocol\n', ' *\n', ' * Collection of helper functions for interacting with Compound integrations\n', ' */\n', 'library Compound {\n', '    /* ============ External ============ */\n', '\n', '    /**\n', '     * Get enter markets calldata from SetToken\n', '     */\n', '    function getEnterMarketsCalldata(\n', '        ICErc20 _cToken,\n', '        IComptroller _comptroller\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', '        address[] memory marketsToEnter = new address[](1);\n', '        marketsToEnter[0] = address(_cToken);\n', '\n', "        // Compound's enter market function signature is: enterMarkets(address[] _cTokens)\n", '        bytes memory callData = abi.encodeWithSignature("enterMarkets(address[])", marketsToEnter);\n', '\n', '        return (address(_comptroller), 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke enter markets from SetToken\n', '     */\n', '    function invokeEnterMarkets(ISetToken _setToken, ICErc20 _cToken, IComptroller _comptroller) external {\n', '        ( , , bytes memory enterMarketsCalldata) = getEnterMarketsCalldata(_cToken, _comptroller);\n', '\n', '        uint256[] memory returnValues = abi.decode(_setToken.invoke(address(_comptroller), 0, enterMarketsCalldata), (uint256[]));\n', '        require(returnValues[0] == 0, "Entering failed");\n', '    }\n', '\n', '    /**\n', '     * Get exit market calldata from SetToken\n', '     */\n', '    function getExitMarketCalldata(\n', '        ICErc20 _cToken,\n', '        IComptroller _comptroller\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's exit market function signature is: exitMarket(address _cToken)\n", '        bytes memory callData = abi.encodeWithSignature("exitMarket(address)", address(_cToken));\n', '\n', '        return (address(_comptroller), 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke exit market from SetToken\n', '     */\n', '    function invokeExitMarket(ISetToken _setToken, ICErc20 _cToken, IComptroller _comptroller) external {\n', '        ( , , bytes memory exitMarketCalldata) = getExitMarketCalldata(_cToken, _comptroller);\n', '        require(\n', '            abi.decode(_setToken.invoke(address(_comptroller), 0, exitMarketCalldata), (uint256)) == 0,\n', '            "Exiting failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Get mint cEther calldata from SetToken\n', '     */\n', '    function getMintCEtherCalldata(\n', '       ICErc20 _cEther,\n', '       uint256 _mintNotional\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's mint cEther function signature is: mint(). No return, reverts on error.\n", '        bytes memory callData = abi.encodeWithSignature("mint()");\n', '\n', '        return (address(_cEther), _mintNotional, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke mint cEther from the SetToken\n', '     */\n', '    function invokeMintCEther(ISetToken _setToken, ICErc20 _cEther, uint256 _mintNotional) external {\n', '        ( , , bytes memory mintCEtherCalldata) = getMintCEtherCalldata(_cEther, _mintNotional);\n', '\n', '        _setToken.invoke(address(_cEther), _mintNotional, mintCEtherCalldata);\n', '    }\n', '\n', '    /**\n', '     * Get mint cToken calldata from SetToken\n', '     */\n', '    function getMintCTokenCalldata(\n', '       ICErc20 _cToken,\n', '       uint256 _mintNotional\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's mint cToken function signature is: mint(uint256 _mintAmount). Returns 0 if success\n", '        bytes memory callData = abi.encodeWithSignature("mint(uint256)", _mintNotional);\n', '\n', '        return (address(_cToken), _mintNotional, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke mint from the SetToken. Mints the specified cToken from the underlying of the specified notional quantity\n', '     */\n', '    function invokeMintCToken(ISetToken _setToken, ICErc20 _cToken, uint256 _mintNotional) external {\n', '        ( , , bytes memory mintCTokenCalldata) = getMintCTokenCalldata(_cToken, _mintNotional);\n', '\n', '        require(\n', '            abi.decode(_setToken.invoke(address(_cToken), 0, mintCTokenCalldata), (uint256)) == 0,\n', '            "Mint failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Get redeem calldata\n', '     */\n', '    function getRedeemUnderlyingCalldata(\n', '       ICErc20 _cToken,\n', '       uint256 _redeemNotional\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's redeem function signature is: redeemUnderlying(uint256 _underlyingAmount)\n", '        bytes memory callData = abi.encodeWithSignature("redeemUnderlying(uint256)", _redeemNotional);\n', '\n', '        return (address(_cToken), _redeemNotional, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke redeem underlying from the SetToken\n', '     */\n', '    function invokeRedeemUnderlying(ISetToken _setToken, ICErc20 _cToken, uint256 _redeemNotional) external {\n', '        ( , , bytes memory redeemUnderlyingCalldata) = getRedeemUnderlyingCalldata(_cToken, _redeemNotional);\n', '        \n', '        require(\n', '            abi.decode(_setToken.invoke(address(_cToken), 0, redeemUnderlyingCalldata), (uint256)) == 0,\n', '            "Redeem failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Get repay borrow calldata\n', '     */\n', '    function getRepayBorrowCEtherCalldata(\n', '       ICErc20 _cToken,\n', '       uint256 _repayNotional\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's repay ETH function signature is: repayBorrow(). No return, revert on fail\n", '        bytes memory callData = abi.encodeWithSignature("repayBorrow()");\n', '\n', '        return (address(_cToken), _repayNotional, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke repay cEther from the SetToken\n', '     */\n', '    function invokeRepayBorrowCEther(ISetToken _setToken, ICErc20 _cEther, uint256 _repayNotional) external {\n', '        ( , , bytes memory repayBorrowCalldata) = getRepayBorrowCEtherCalldata(_cEther, _repayNotional);\n', '        _setToken.invoke(address(_cEther), _repayNotional, repayBorrowCalldata);\n', '    }\n', '\n', '    /**\n', '     * Get repay borrow calldata\n', '     */\n', '    function getRepayBorrowCTokenCalldata(\n', '       ICErc20 _cToken,\n', '       uint256 _repayNotional\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's repay asset function signature is: repayBorrow(uint256 _repayAmount)\n", '        bytes memory callData = abi.encodeWithSignature("repayBorrow(uint256)", _repayNotional);\n', '\n', '        return (address(_cToken), _repayNotional, callData);\n', '    }\n', '\n', '    /**\n', '     * Invoke repay cToken from the SetToken\n', '     */\n', '    function invokeRepayBorrowCToken(ISetToken _setToken, ICErc20 _cToken, uint256 _repayNotional) external {\n', '        ( , , bytes memory repayBorrowCalldata) = getRepayBorrowCTokenCalldata(_cToken, _repayNotional);\n', '        require(\n', '            abi.decode(_setToken.invoke(address(_cToken), 0, repayBorrowCalldata), (uint256)) == 0,\n', '            "Repay failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Get borrow calldata\n', '     */\n', '    function getBorrowCalldata(\n', '       ICErc20 _cToken,\n', '       uint256 _notionalBorrowQuantity\n', '    )\n', '        public\n', '        pure\n', '        returns (address, uint256, bytes memory)\n', '    {\n', "        // Compound's borrow function signature is: borrow(uint256 _borrowAmount). Note: Notional borrow quantity is in units of underlying asset\n", '        bytes memory callData = abi.encodeWithSignature("borrow(uint256)", _notionalBorrowQuantity);\n', '\n', '        return (address(_cToken), 0, callData);\n', '    }\n', '\n', '    /**\n', "     * Invoke the SetToken to interact with the specified cToken to borrow the cToken's underlying of the specified borrowQuantity.\n", '     */\n', '    function invokeBorrow(ISetToken _setToken, ICErc20 _cToken, uint256 _notionalBorrowQuantity) external {\n', '        ( , , bytes memory borrowCalldata) = getBorrowCalldata(_cToken, _notionalBorrowQuantity);\n', '        require(\n', '            abi.decode(_setToken.invoke(address(_cToken), 0, borrowCalldata), (uint256)) == 0,\n', '            "Borrow failed"\n', '        );\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addSet(address _setToken) external;\n', '    function feeRecipient() external view returns(address);\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isSet(address _setToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function resourceId(uint256 _id) external view returns(address);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IDebtIssuanceModule.sol\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', '/**\n', ' * @title IDebtIssuanceModule\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with Debt Issuance module interface.\n', ' */\n', 'interface IDebtIssuanceModule {\n', '\n', '    /**\n', '     * Called by another module to register itself on debt issuance module. Any logic can be included\n', '     * in case checks need to be made or state needs to be updated.\n', '     */\n', '    function registerToIssuanceModule(ISetToken _setToken) external;\n', '\n', '    /**\n', '     * Called by another module to unregister itself on debt issuance module. Any logic can be included\n', '     * in case checks need to be made or state needs to be cleared.\n', '     */\n', '    function unregisterFromIssuanceModule(ISetToken _setToken) external;\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IExchangeAdapter.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IExchangeAdapter {\n', '    function getSpender() external view returns(address);\n', '    function getTradeCalldata(\n', '        address _fromToken,\n', '        address _toToken,\n', '        address _toAddress,\n', '        uint256 _fromQuantity,\n', '        uint256 _minToQuantity,\n', '        bytes memory _data\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory);\n', '}\n', '\n', '// Dependency file: contracts/lib/AddressArrayUtils.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AddressArrayUtils\n', ' * @author Set Protocol\n', ' *\n', ' * Utility functions to handle Address Arrays\n', ' */\n', 'library AddressArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (uint256(-1), false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(address[] memory A, address a) internal pure returns (bool) {\n', '        (, bool isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurrence of a duplicate\n', '    */\n', '    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n', '        require(A.length > 0, "A is empty");\n', '\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            address current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove     \n', '     * @return Returns the array with the object removed.\n', '     */\n', '    function remove(address[] memory A, address a)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            (address[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove\n', '     */\n', '    function removeStorage(address[] storage A, address a)\n', '        internal\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n', '            if (index != lastIndex) { A[index] = A[lastIndex]; }\n', '            A.pop();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * @param A The input array to search\n', '    * @param index The index to remove\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(address[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (address[] memory, address)\n', '    {\n', '        uint256 length = A.length;\n', '        require(index < A.length, "Index must be < A length");\n', '        address[] memory newAddresses = new address[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newAddresses[j - 1] = A[j];\n', '        }\n', '        return (newAddresses, A[index]);\n', '    }\n', '\n', '    /**\n', '     * Returns the combination of the two arrays\n', '     * @param A The first array\n', '     * @param B The second array\n', '     * @return Returns A extended by B\n', '     */\n', '    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n', '        uint256 aLength = A.length;\n', '        uint256 bLength = B.length;\n', '        address[] memory newAddresses = new address[](aLength + bLength);\n', '        for (uint256 i = 0; i < aLength; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = 0; j < bLength; j++) {\n', '            newAddresses[aLength + j] = B[j];\n', '        }\n', '        return newAddresses;\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '// pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [// importANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * // importANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/ExplicitERC20.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @title ExplicitERC20\n', ' * @author Set Protocol\n', ' *\n', ' * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\n', ' */\n', 'library ExplicitERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * When given allowance, transfers a token from the "_from" to the "_to" of quantity "_quantity".\n', '     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\n', '     *\n', '     * @param _token           ERC20 token to approve\n', '     * @param _from            The account to transfer tokens from\n', '     * @param _to              The account to transfer tokens to\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function transferFrom(\n', '        IERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        // Call specified ERC20 contract to transfer tokens (via proxy).\n', '        if (_quantity > 0) {\n', '            uint256 existingBalance = _token.balanceOf(_to);\n', '\n', '            SafeERC20.safeTransferFrom(\n', '                _token,\n', '                _from,\n', '                _to,\n', '                _quantity\n', '            );\n', '\n', '            uint256 newBalance = _token.balanceOf(_to);\n', '\n', '            // Verify transfer quantity is reflected in balance\n', '            require(\n', '                newBalance == existingBalance.add(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IModule.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title IModule\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with Modules.\n', ' */\n', 'interface IModule {\n', '    /**\n', '     * Called by a SetToken to notify that this module was removed from the Set token. Any logic can be included\n', '     * in case checks need to be made or state needs to be cleared.\n', '     */\n', '    function removeModule() external;\n', '}\n', '\n', '// Dependency file: contracts/protocol/lib/Invoke.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', '\n', '/**\n', ' * @title Invoke\n', ' * @author Set Protocol\n', ' *\n', " * A collection of common utility functions for interacting with the SetToken's invoke function\n", ' */\n', 'library Invoke {\n', '    using SafeMath for uint256;\n', '\n', '    /* ============ Internal ============ */\n', '\n', '    /**\n', '     * Instructs the SetToken to set approvals of the ERC20 token to a spender.\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to approve\n', "     * @param _spender         The account allowed to spend the SetToken's balance\n", '     * @param _quantity        The quantity of allowance to allow\n', '     */\n', '    function invokeApprove(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _spender,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        bytes memory callData = abi.encodeWithSignature("approve(address,uint256)", _spender, _quantity);\n', '        _setToken.invoke(_token, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to transfer the ERC20 token to a recipient.\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function invokeTransfer(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            bytes memory callData = abi.encodeWithSignature("transfer(address,uint256)", _to, _quantity);\n', '            _setToken.invoke(_token, 0, callData);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to transfer the ERC20 token to a recipient.\n', '     * The new SetToken balance must equal the existing balance less the quantity transferred\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function strictInvokeTransfer(\n', '        ISetToken _setToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            // Retrieve current balance of token for the SetToken\n', '            uint256 existingBalance = IERC20(_token).balanceOf(address(_setToken));\n', '\n', '            Invoke.invokeTransfer(_setToken, _token, _to, _quantity);\n', '\n', '            // Get new balance of transferred token for SetToken\n', '            uint256 newBalance = IERC20(_token).balanceOf(address(_setToken));\n', '\n', '            // Verify only the transfer quantity is subtracted\n', '            require(\n', '                newBalance == existingBalance.sub(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to unwrap the passed quantity of WETH\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _weth            WETH address\n', '     * @param _quantity        The quantity to unwrap\n', '     */\n', '    function invokeUnwrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\n', '        bytes memory callData = abi.encodeWithSignature("withdraw(uint256)", _quantity);\n', '        _setToken.invoke(_weth, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Instructs the SetToken to wrap the passed quantity of ETH\n', '     *\n', '     * @param _setToken        SetToken instance to invoke\n', '     * @param _weth            WETH address\n', '     * @param _quantity        The quantity to unwrap\n', '     */\n', '    function invokeWrapWETH(ISetToken _setToken, address _weth, uint256 _quantity) internal {\n', '        bytes memory callData = abi.encodeWithSignature("deposit()");\n', '        _setToken.invoke(_weth, _quantity, callData);\n', '    }\n', '}\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/SafeCast.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n", ' * checks.\n', ' *\n', ' * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n', ' * easily result in undesired exploitation or bugs, since developers usually\n', ' * assume that overflows raise errors. `SafeCast` restores this intuition by\n', ' * reverting the transaction when such an operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' *\n', ' * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n', ' * all math on `uint256` and `int256` and then downcasting.\n', ' */\n', 'library SafeCast {\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SignedSafeMath.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Set Protocol\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number. \n', '     * (positive values are rounded towards zero and negative values are rounded away from 0). \n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/protocol/lib/Position.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { SafeCast } from "@openzeppelin/contracts/utils/SafeCast.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { PreciseUnitMath } from "contracts/lib/PreciseUnitMath.sol";\n', '\n', '\n', '/**\n', ' * @title Position\n', ' * @author Set Protocol\n', ' *\n', ' * Collection of helper functions for handling and updating SetToken Positions\n', ' *\n', ' * CHANGELOG:\n', ' *  - Updated editExternalPosition to work when no external position is associated with module\n', ' */\n', 'library Position {\n', '    using SafeCast for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeCast for int256;\n', '    using SignedSafeMath for int256;\n', '    using PreciseUnitMath for uint256;\n', '\n', '    /* ============ Helper ============ */\n', '\n', '    /**\n', '     * Returns whether the SetToken has a default position for a given component (if the real unit is > 0)\n', '     */\n', '    function hasDefaultPosition(ISetToken _setToken, address _component) internal view returns(bool) {\n', '        return _setToken.getDefaultPositionRealUnit(_component) > 0;\n', '    }\n', '\n', '    /**\n', '     * Returns whether the SetToken has an external position for a given component (if # of position modules is > 0)\n', '     */\n', '    function hasExternalPosition(ISetToken _setToken, address _component) internal view returns(bool) {\n', '        return _setToken.getExternalPositionModules(_component).length > 0;\n', '    }\n', '    \n', '    /**\n', '     * Returns whether the SetToken component default position real unit is greater than or equal to units passed in.\n', '     */\n', '    function hasSufficientDefaultUnits(ISetToken _setToken, address _component, uint256 _unit) internal view returns(bool) {\n', '        return _setToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\n', '    }\n', '\n', '    /**\n', '     * Returns whether the SetToken component external position is greater than or equal to the real units passed in.\n', '     */\n', '    function hasSufficientExternalUnits(\n', '        ISetToken _setToken,\n', '        address _component,\n', '        address _positionModule,\n', '        uint256 _unit\n', '    )\n', '        internal\n', '        view\n', '        returns(bool)\n', '    {\n', '       return _setToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \n', '    }\n', '\n', '    /**\n', '     * If the position does not exist, create a new Position and add to the SetToken. If it already exists,\n', '     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \n', '     * components where needed (in light of potential external positions).\n', '     *\n', '     * @param _setToken           Address of SetToken being modified\n', '     * @param _component          Address of the component\n', '     * @param _newUnit            Quantity of Position units - must be >= 0\n', '     */\n', '    function editDefaultPosition(ISetToken _setToken, address _component, uint256 _newUnit) internal {\n', '        bool isPositionFound = hasDefaultPosition(_setToken, _component);\n', '        if (!isPositionFound && _newUnit > 0) {\n', '            // If there is no Default Position and no External Modules, then component does not exist\n', '            if (!hasExternalPosition(_setToken, _component)) {\n', '                _setToken.addComponent(_component);\n', '            }\n', '        } else if (isPositionFound && _newUnit == 0) {\n', '            // If there is a Default Position and no external positions, remove the component\n', '            if (!hasExternalPosition(_setToken, _component)) {\n', '                _setToken.removeComponent(_component);\n', '            }\n', '        }\n', '\n', '        _setToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\n', '    }\n', '\n', '    /**\n', '     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\n', '     * 1) If component is not already added then add component and external position. \n', '     * 2) If component is added but no existing external position using the passed module exists then add the external position.\n', '     * 3) If the existing position is being added to then just update the unit and data\n', '     * 4) If the position is being closed and no other external positions or default positions are associated with the component\n', '     *    then untrack the component and remove external position.\n', '     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\n', '     *    external position.\n', '     *\n', '     * @param _setToken         SetToken being updated\n', '     * @param _component        Component position being updated\n', '     * @param _module           Module external position is associated with\n', '     * @param _newUnit          Position units of new external position\n', '     * @param _data             Arbitrary data associated with the position\n', '     */\n', '    function editExternalPosition(\n', '        ISetToken _setToken,\n', '        address _component,\n', '        address _module,\n', '        int256 _newUnit,\n', '        bytes memory _data\n', '    )\n', '        internal\n', '    {\n', '        if (_newUnit != 0) {\n', '            if (!_setToken.isComponent(_component)) {\n', '                _setToken.addComponent(_component);\n', '                _setToken.addExternalPositionModule(_component, _module);\n', '            } else if (!_setToken.isExternalPositionModule(_component, _module)) {\n', '                _setToken.addExternalPositionModule(_component, _module);\n', '            }\n', '            _setToken.editExternalPositionUnit(_component, _module, _newUnit);\n', '            _setToken.editExternalPositionData(_component, _module, _data);\n', '        } else {\n', '            require(_data.length == 0, "Passed data must be null");\n', '            // If no default or external position remaining then remove component from components array\n', '            if (_setToken.getExternalPositionRealUnit(_component, _module) != 0) {\n', '                address[] memory positionModules = _setToken.getExternalPositionModules(_component);\n', '                if (_setToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\n', '                    require(positionModules[0] == _module, "External positions must be 0 to remove component");\n', '                    _setToken.removeComponent(_component);\n', '                }\n', '                _setToken.removeExternalPositionModule(_component, _module);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Get total notional amount of Default position\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _positionUnit       Quantity of Position units\n', '     *\n', '     * @return                    Total notional amount of units\n', '     */\n', '    function getDefaultTotalNotional(uint256 _setTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\n', '        return _setTokenSupply.preciseMul(_positionUnit);\n', '    }\n', '\n', '    /**\n', '     * Get position unit from total notional amount\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _totalNotional      Total notional amount of component prior to\n', '     * @return                    Default position unit\n', '     */\n', '    function getDefaultPositionUnit(uint256 _setTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\n', '        return _totalNotional.preciseDiv(_setTokenSupply);\n', '    }\n', '\n', '    /**\n', '     * Get the total tracked balance - total supply * position unit\n', '     *\n', '     * @param _setToken           Address of the SetToken\n', '     * @param _component          Address of the component\n', '     * @return                    Notional tracked balance\n', '     */\n', '    function getDefaultTrackedBalance(ISetToken _setToken, address _component) internal view returns(uint256) {\n', '        int256 positionUnit = _setToken.getDefaultPositionRealUnit(_component); \n', '        return _setToken.totalSupply().preciseMul(positionUnit.toUint256());\n', '    }\n', '\n', '    /**\n', '     * Calculates the new default position unit and performs the edit with the new unit\n', '     *\n', '     * @param _setToken                 Address of the SetToken\n', '     * @param _component                Address of the component\n', '     * @param _setTotalSupply           Current SetToken supply\n', '     * @param _componentPreviousBalance Pre-action component balance\n', '     * @return                          Current component balance\n', '     * @return                          Previous position unit\n', '     * @return                          New position unit\n', '     */\n', '    function calculateAndEditDefaultPosition(\n', '        ISetToken _setToken,\n', '        address _component,\n', '        uint256 _setTotalSupply,\n', '        uint256 _componentPreviousBalance\n', '    )\n', '        internal\n', '        returns(uint256, uint256, uint256)\n', '    {\n', '        uint256 currentBalance = IERC20(_component).balanceOf(address(_setToken));\n', '        uint256 positionUnit = _setToken.getDefaultPositionRealUnit(_component).toUint256();\n', '\n', '        uint256 newTokenUnit;\n', '        if (currentBalance > 0) {\n', '            newTokenUnit = calculateDefaultEditPositionUnit(\n', '                _setTotalSupply,\n', '                _componentPreviousBalance,\n', '                currentBalance,\n', '                positionUnit\n', '            );\n', '        } else {\n', '            newTokenUnit = 0;\n', '        }\n', '\n', '        editDefaultPosition(_setToken, _component, newTokenUnit);\n', '\n', '        return (currentBalance, positionUnit, newTokenUnit);\n', '    }\n', '\n', '    /**\n', '     * Calculate the new position unit given total notional values pre and post executing an action that changes SetToken state\n', '     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\n', '     *\n', '     * @param _setTokenSupply     Supply of SetToken in precise units (10^18)\n', '     * @param _preTotalNotional   Total notional amount of component prior to executing action\n', '     * @param _postTotalNotional  Total notional amount of component after the executing action\n', '     * @param _prePositionUnit    Position unit of SetToken prior to executing action\n', '     * @return                    New position unit\n', '     */\n', '    function calculateDefaultEditPositionUnit(\n', '        uint256 _setTokenSupply,\n', '        uint256 _preTotalNotional,\n', '        uint256 _postTotalNotional,\n', '        uint256 _prePositionUnit\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\n', '        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_setTokenSupply));\n', '        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_setTokenSupply);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/interfaces/IIntegrationRegistry.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IIntegrationRegistry {\n', '    function addIntegration(address _module, string memory _id, address _wrapper) external;\n', '    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\n', '    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\n', '    function isValidIntegration(address _module, string memory _id) external view returns(bool);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/IPriceOracle.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title IPriceOracle\n', ' * @author Set Protocol\n', ' *\n', ' * Interface for interacting with PriceOracle\n', ' */\n', 'interface IPriceOracle {\n', '\n', '    /* ============ Functions ============ */\n', '\n', '    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\n', '    function masterQuoteAsset() external view returns (address);\n', '}\n', '\n', '// Dependency file: contracts/interfaces/ISetValuer.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '// pragma solidity 0.6.10;\n', '\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '\n', 'interface ISetValuer {\n', '    function calculateSetTokenValuation(ISetToken _setToken, address _quoteAsset) external view returns (uint256);\n', '}\n', '\n', '// Dependency file: contracts/protocol/lib/ResourceIdentifier.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IController } from "contracts/interfaces/IController.sol";\n', '// import { IIntegrationRegistry } from "contracts/interfaces/IIntegrationRegistry.sol";\n', '// import { IPriceOracle } from "contracts/interfaces/IPriceOracle.sol";\n', '// import { ISetValuer } from "contracts/interfaces/ISetValuer.sol";\n', '\n', '/**\n', ' * @title ResourceIdentifier\n', ' * @author Set Protocol\n', ' *\n', ' * A collection of utility functions to fetch information related to Resource contracts in the system\n', ' */\n', 'library ResourceIdentifier {\n', '\n', '    // IntegrationRegistry will always be resource ID 0 in the system\n', '    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\n', '    // PriceOracle will always be resource ID 1 in the system\n', '    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\n', '    // SetValuer resource will always be resource ID 2 in the system\n', '    uint256 constant internal SET_VALUER_RESOURCE_ID = 2;\n', '\n', '    /* ============ Internal ============ */\n', '\n', '    /**\n', '     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\n', '     * the Controller\n', '     */\n', '    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\n', '        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\n', '    }\n', '\n', '    /**\n', '     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\n', '     */\n', '    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\n', '        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\n', '    }\n', '\n', '    /**\n', '     * Gets the instance of Set valuer on Controller. Note: SetValuer is stored as index 2 on the Controller\n', '     */\n', '    function getSetValuer(IController _controller) internal view returns (ISetValuer) {\n', '        return ISetValuer(_controller.resourceId(SET_VALUER_RESOURCE_ID));\n', '    }\n', '}\n', '\n', '// Dependency file: contracts/protocol/lib/ModuleBase.sol\n', '\n', '/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '// import { AddressArrayUtils } from "contracts/lib/AddressArrayUtils.sol";\n', '// import { ExplicitERC20 } from "contracts/lib/ExplicitERC20.sol";\n', '// import { IController } from "contracts/interfaces/IController.sol";\n', '// import { IModule } from "contracts/interfaces/IModule.sol";\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { Invoke } from "contracts/protocol/lib/Invoke.sol";\n', '// import { Position } from "contracts/protocol/lib/Position.sol";\n', '// import { PreciseUnitMath } from "contracts/lib/PreciseUnitMath.sol";\n', '// import { ResourceIdentifier } from "contracts/protocol/lib/ResourceIdentifier.sol";\n', '// import { SafeCast } from "@openzeppelin/contracts/utils/SafeCast.sol";\n', '// import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import { SignedSafeMath } from "@openzeppelin/contracts/math/SignedSafeMath.sol";\n', '\n', '/**\n', ' * @title ModuleBase\n', ' * @author Set Protocol\n', ' *\n', ' * Abstract class that houses common Module-related state and functions.\n', ' */\n', 'abstract contract ModuleBase is IModule {\n', '    using AddressArrayUtils for address[];\n', '    using Invoke for ISetToken;\n', '    using Position for ISetToken;\n', '    using PreciseUnitMath for uint256;\n', '    using ResourceIdentifier for IController;\n', '    using SafeCast for int256;\n', '    using SafeCast for uint256;\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of the controller\n', '    IController public controller;\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier onlyManagerAndValidSet(ISetToken _setToken) { \n', '        require(isSetManager(_setToken, msg.sender), "Must be the SetToken manager");\n', '        require(isSetValidAndInitialized(_setToken), "Must be a valid and initialized SetToken");\n', '        _;\n', '    }\n', '\n', '    modifier onlySetManager(ISetToken _setToken, address _caller) {\n', '        require(isSetManager(_setToken, _caller), "Must be the SetToken manager");\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAndInitializedSet(ISetToken _setToken) {\n', '        require(isSetValidAndInitialized(_setToken), "Must be a valid and initialized SetToken");\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * Throws if the sender is not a SetToken's module or module not enabled\n", '     */\n', '    modifier onlyModule(ISetToken _setToken) {\n', '        require(\n', '            _setToken.moduleStates(msg.sender) == ISetToken.ModuleState.INITIALIZED,\n', '            "Only the module can call"\n', '        );\n', '\n', '        require(\n', '            controller.isModule(msg.sender),\n', '            "Module must be enabled on controller"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Utilized during module initializations to check that the module is in pending state\n', '     * and that the SetToken is valid\n', '     */\n', '    modifier onlyValidAndPendingSet(ISetToken _setToken) {\n', '        require(controller.isSet(address(_setToken)), "Must be controller-enabled SetToken");\n', '        require(isSetPendingInitialization(_setToken), "Must be pending initialization");        \n', '        _;\n', '    }\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables and map asset pairs to their oracles\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     */\n', '    constructor(IController _controller) public {\n', '        controller = _controller;\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has set allowance on the module).\n', '     *\n', '     * @param  _token          The address of the ERC20 token\n', '     * @param  _from           The address to transfer from\n', '     * @param  _to             The address to transfer to\n', '     * @param  _quantity       The number of tokens to transfer\n', '     */\n', '    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\n', '        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\n', '    }\n', '\n', '    /**\n', '     * Gets the integration for the module with the passed in name. Validates that the address is not empty\n', '     */\n', '    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \n', '        bytes32 integrationHash = getNameHash(_integrationName);\n', '        return getAndValidateAdapterWithHash(integrationHash);\n', '    }\n', '\n', '    /**\n', '     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\n', '     */\n', '    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \n', '        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\n', '            address(this),\n', '            _integrationHash\n', '        );\n', '\n', '        require(adapter != address(0), "Must be valid adapter"); \n', '        return adapter;\n', '    }\n', '\n', '    /**\n', '     * Gets the total fee for this module of the passed in index (fee % * quantity)\n', '     */\n', '    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\n', '        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\n', '        return _quantity.preciseMul(feePercentage);\n', '    }\n', '\n', '    /**\n', '     * Pays the _feeQuantity from the _setToken denominated in _token to the protocol fee recipient\n', '     */\n', '    function payProtocolFeeFromSetToken(ISetToken _setToken, address _token, uint256 _feeQuantity) internal {\n', '        if (_feeQuantity > 0) {\n', '            _setToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \n', '        }\n', '    }\n', '\n', '    /**\n', '     * Returns true if the module is in process of initialization on the SetToken\n', '     */\n', '    function isSetPendingInitialization(ISetToken _setToken) internal view returns(bool) {\n', '        return _setToken.isPendingModule(address(this));\n', '    }\n', '\n', '    /**\n', "     * Returns true if the address is the SetToken's manager\n", '     */\n', '    function isSetManager(ISetToken _setToken, address _toCheck) internal view returns(bool) {\n', '        return _setToken.manager() == _toCheck;\n', '    }\n', '\n', '    /**\n', '     * Returns true if SetToken must be enabled on the controller \n', '     * and module is registered on the SetToken\n', '     */\n', '    function isSetValidAndInitialized(ISetToken _setToken) internal view returns(bool) {\n', '        return controller.isSet(address(_setToken)) &&\n', '            _setToken.isInitializedModule(address(this));\n', '    }\n', '\n', '    /**\n', '     * Hashes the string and returns a bytes32 value\n', '     */\n', '    function getNameHash(string memory _name) internal pure returns(bytes32) {\n', '        return keccak256(bytes(_name));\n', '    }\n', '}\n', '\n', '// Root file: contracts/protocol/modules/CompoundLeverageModule.sol\n', '\n', '/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '// import { IERC20 } from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";\n', '// import { ReentrancyGuard } from "@openzeppelin/contracts/utils/ReentrancyGuard.sol";\n', '\n', '// import { Compound } from "contracts/protocol/integration/lib/Compound.sol";\n', '// import { ICErc20 } from "contracts/interfaces/external/ICErc20.sol";\n', '// import { IComptroller } from "contracts/interfaces/external/IComptroller.sol";\n', '// import { IController } from "contracts/interfaces/IController.sol";\n', '// import { IDebtIssuanceModule } from "contracts/interfaces/IDebtIssuanceModule.sol";\n', '// import { IExchangeAdapter } from "contracts/interfaces/IExchangeAdapter.sol";\n', '// import { ISetToken } from "contracts/interfaces/ISetToken.sol";\n', '// import { ModuleBase } from "contracts/protocol/lib/ModuleBase.sol";\n', '\n', '/**\n', ' * @title CompoundLeverageModule\n', ' * @author Set Protocol\n', ' *\n', ' * Smart contract that enables leverage trading using Compound as the lending protocol. This module is paired with a debt issuance module that will call\n', ' * functions on this module to keep interest accrual and liquidation state updated. This does not allow borrowing of assets from Compound alone. Each \n', ' * asset is leveraged when using this module.\n', ' *\n', ' * Note: Do not use this module in conjunction with other debt modules that allow Compound debt positions as it could lead to double counting of\n', ' * debt when borrowed assets are the same.\n', ' *\n', ' */\n', 'contract CompoundLeverageModule is ModuleBase, ReentrancyGuard, Ownable {\n', '    using Compound for ISetToken;\n', '\n', '    /* ============ Structs ============ */\n', '\n', '    struct EnabledAssets {\n', '        address[] collateralCTokens;             // Array of enabled cToken collateral assets for a SetToken\n', '        address[] borrowCTokens;                 // Array of enabled cToken borrow assets for a SetToken\n', '        address[] borrowAssets;                  // Array of underlying borrow assets that map to the array of enabled cToken borrow assets\n', '    }\n', '\n', '    struct ActionInfo {\n', '        ISetToken setToken;                      // SetToken instance\n', '        IExchangeAdapter exchangeAdapter;        // Exchange adapter instance\n', '        uint256 setTotalSupply;                  // Total supply of SetToken\n', '        uint256 notionalSendQuantity;            // Total notional quantity sent to exchange\n', '        uint256 minNotionalReceiveQuantity;      // Min total notional received from exchange\n', '        ICErc20 collateralCTokenAsset;           // Address of cToken collateral asset\n', '        ICErc20 borrowCTokenAsset;               // Address of cToken borrow asset\n', '        uint256 preTradeReceiveTokenBalance;     // Balance of pre-trade receive token balance\n', '    }\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event LeverageIncreased(\n', '        ISetToken indexed _setToken,\n', '        IERC20 indexed _borrowAsset,\n', '        IERC20 indexed _collateralAsset,\n', '        IExchangeAdapter _exchangeAdapter,\n', '        uint256 _totalBorrowAmount,\n', '        uint256 _totalReceiveAmount,\n', '        uint256 _protocolFee\n', '    );\n', '\n', '    event LeverageDecreased(\n', '        ISetToken indexed _setToken,\n', '        IERC20 indexed _collateralAsset,\n', '        IERC20 indexed _repayAsset,\n', '        IExchangeAdapter _exchangeAdapter,\n', '        uint256 _totalRedeemAmount,\n', '        uint256 _totalRepayAmount,\n', '        uint256 _protocolFee\n', '    );\n', '\n', '    event CollateralAssetsUpdated(\n', '        ISetToken indexed _setToken,\n', '        bool indexed _added,\n', '        IERC20[] _assets\n', '    );\n', '\n', '    event BorrowAssetsUpdated(\n', '        ISetToken indexed _setToken,\n', '        bool indexed _added,\n', '        IERC20[] _assets\n', '    );\n', '\n', '    event SetTokenStatusUpdated(\n', '        ISetToken indexed _setToken,\n', '        bool indexed _added\n', '    );\n', '\n', '    event AnySetAllowedUpdated(\n', '        bool indexed _anySetAllowed    \n', '    );\n', '\n', '    /* ============ Constants ============ */\n', '\n', '    // String identifying the DebtIssuanceModule in the IntegrationRegistry. Note: Governance must add DefaultIssuanceModule as\n', '    // the string as the integration name\n', '    string constant internal DEFAULT_ISSUANCE_MODULE_NAME = "DefaultIssuanceModule";\n', '\n', '    // 0 index stores protocol fee % on the controller, charged in the trade function\n', '    uint256 constant internal PROTOCOL_TRADE_FEE_INDEX = 0;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Mapping of underlying to CToken. If ETH, then map WETH to cETH\n', '    mapping(IERC20 => ICErc20) public underlyingToCToken;\n', '\n', '    // Wrapped Ether address\n', '    IERC20 internal weth;\n', '\n', '    // Compound cEther address\n', '    ICErc20 internal cEther;\n', '\n', '    // Compound Comptroller contract\n', '    IComptroller internal comptroller;\n', '\n', '    // COMP token address\n', '    IERC20 internal compToken;\n', '\n', '    // Mapping to efficiently check if cToken market for collateral asset is valid in SetToken\n', '    mapping(ISetToken => mapping(ICErc20 => bool)) public collateralCTokenEnabled;\n', '\n', '    // Mapping to efficiently check if cToken market for borrow asset is valid in SetToken\n', '    mapping(ISetToken => mapping(ICErc20 => bool)) public borrowCTokenEnabled;\n', '\n', '    // Mapping of enabled collateral and borrow cTokens for syncing positions\n', '    mapping(ISetToken => EnabledAssets) internal enabledAssets;\n', '\n', '    // Mapping of SetToken to boolean indicating if SetToken is on allow list. Updateable by governance\n', '    mapping(ISetToken => bool) public allowedSetTokens;\n', '\n', '    // Boolean that returns if any SetToken can initialize this module. If false, then subject to allow list\n', '    bool public anySetAllowed;\n', '\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Instantiate addresses. Underlying to cToken mapping is created.\n', '     * \n', '     * @param _controller               Address of controller contract\n', '     * @param _compToken                Address of COMP token\n', '     * @param _comptroller              Address of Compound Comptroller\n', '     * @param _cEther                   Address of cEther contract\n', '     * @param _weth                     Address of WETH contract\n', '     */\n', '    constructor(\n', '        IController _controller,\n', '        IERC20 _compToken,\n', '        IComptroller _comptroller,\n', '        ICErc20 _cEther,\n', '        IERC20 _weth\n', '    )\n', '        public\n', '        ModuleBase(_controller)\n', '    {\n', '        compToken = _compToken;\n', '        comptroller = _comptroller;\n', '        cEther = _cEther;\n', '        weth = _weth;\n', '\n', '        ICErc20[] memory cTokens = comptroller.getAllMarkets();\n', '\n', '        for(uint256 i = 0; i < cTokens.length; i++) {\n', '            ICErc20 cToken = cTokens[i];\n', '            underlyingToCToken[\n', '                cToken == _cEther ? _weth : IERC20(cTokens[i].underlying())\n', '            ] = cToken;\n', '        }\n', '    }\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', '     * MANAGER ONLY: Increases leverage for a given collateral position using an enabled borrow asset that is enabled.\n', '     * Performs a DEX trade, exchanging the borrow asset for collateral asset.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _borrowAsset          Address of asset being borrowed for leverage\n', '     * @param _collateralAsset      Address of collateral asset (underlying of cToken)\n', '     * @param _borrowQuantity       Borrow quantity of asset in position units\n', '     * @param _minReceiveQuantity   Min receive quantity of collateral asset to receive post-trade in position units\n', '     * @param _tradeAdapterName     Name of trade adapter\n', '     * @param _tradeData            Arbitrary data for trade\n', '     */\n', '    function lever(\n', '        ISetToken _setToken,\n', '        IERC20 _borrowAsset,\n', '        IERC20 _collateralAsset,\n', '        uint256 _borrowQuantity,\n', '        uint256 _minReceiveQuantity,\n', '        string memory _tradeAdapterName,\n', '        bytes memory _tradeData\n', '    )\n', '        external\n', '        nonReentrant\n', '        onlyManagerAndValidSet(_setToken)\n', '    {\n', '        // For levering up, send quantity is derived from borrow asset and receive quantity is derived from \n', '        // collateral asset\n', '        ActionInfo memory leverInfo = _createAndValidateActionInfo(\n', '            _setToken,\n', '            _borrowAsset,\n', '            _collateralAsset,\n', '            _borrowQuantity,\n', '            _minReceiveQuantity,\n', '            _tradeAdapterName,\n', '            true\n', '        );\n', '\n', '        _borrow(leverInfo.setToken, leverInfo.borrowCTokenAsset, leverInfo.notionalSendQuantity);\n', '\n', '        uint256 postTradeReceiveQuantity = _executeTrade(leverInfo, _borrowAsset, _collateralAsset, _tradeData);\n', '\n', '        uint256 protocolFee = _accrueProtocolFee(_setToken, _collateralAsset, postTradeReceiveQuantity);\n', '\n', '        uint256 postTradeCollateralQuantity = postTradeReceiveQuantity.sub(protocolFee);\n', '\n', '        _mintCToken(leverInfo.setToken, leverInfo.collateralCTokenAsset, _collateralAsset, postTradeCollateralQuantity);\n', '\n', '        _updateLeverPositions(leverInfo, _borrowAsset);\n', '\n', '        emit LeverageIncreased(\n', '            _setToken,\n', '            _borrowAsset,\n', '            _collateralAsset,\n', '            leverInfo.exchangeAdapter,\n', '            leverInfo.notionalSendQuantity,\n', '            postTradeCollateralQuantity,\n', '            protocolFee\n', '        );\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Decrease leverage for a given collateral position using an enabled borrow asset that is enabled\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _collateralAsset      Address of collateral asset (underlying of cToken)\n', '     * @param _repayAsset           Address of asset being repaid\n', '     * @param _redeemQuantity       Quantity of collateral asset to delever\n', '     * @param _minRepayQuantity     Minimum amount of repay asset to receive post trade\n', '     * @param _tradeAdapterName     Name of trade adapter\n', '     * @param _tradeData            Arbitrary data for trade\n', '     */\n', '    function delever(\n', '        ISetToken _setToken,\n', '        IERC20 _collateralAsset,\n', '        IERC20 _repayAsset,\n', '        uint256 _redeemQuantity,\n', '        uint256 _minRepayQuantity,\n', '        string memory _tradeAdapterName,\n', '        bytes memory _tradeData\n', '    )\n', '        external\n', '        nonReentrant\n', '        onlyManagerAndValidSet(_setToken)\n', '    {\n', '        // Note: for delevering, send quantity is derived from collateral asset and receive quantity is derived from \n', '        // repay asset\n', '        ActionInfo memory deleverInfo = _createAndValidateActionInfo(\n', '            _setToken,\n', '            _collateralAsset,\n', '            _repayAsset,\n', '            _redeemQuantity,\n', '            _minRepayQuantity,\n', '            _tradeAdapterName,\n', '            false\n', '        );\n', '\n', '        _redeemUnderlying(deleverInfo.setToken, deleverInfo.collateralCTokenAsset, deleverInfo.notionalSendQuantity);\n', '\n', '        uint256 postTradeReceiveQuantity = _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\n', '\n', '        uint256 protocolFee = _accrueProtocolFee(_setToken, _repayAsset, postTradeReceiveQuantity);\n', '\n', '        uint256 repayQuantity = postTradeReceiveQuantity.sub(protocolFee);\n', '\n', '        _repayBorrow(deleverInfo.setToken, deleverInfo.borrowCTokenAsset, _repayAsset, repayQuantity);\n', '\n', '        _updateLeverPositions(deleverInfo, _repayAsset);\n', '\n', '        emit LeverageDecreased(\n', '            _setToken,\n', '            _collateralAsset,\n', '            _repayAsset,\n', '            deleverInfo.exchangeAdapter,\n', '            deleverInfo.notionalSendQuantity,\n', '            repayQuantity,\n', '            protocolFee\n', '        );\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Pays down the borrow asset to 0 selling off a given collateral asset. Any extra received\n', '     * borrow asset is updated as equity. No protocol fee is charged.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _collateralAsset      Address of collateral asset (underlying of cToken)\n', '     * @param _repayAsset           Address of asset being repaid (underlying asset e.g. DAI)\n', '     * @param _redeemQuantity       Quantity of collateral asset to delever\n', '     * @param _tradeAdapterName     Name of trade adapter\n', '     * @param _tradeData            Arbitrary data for trade\n', '     */\n', '    function deleverToZeroBorrowBalance(\n', '        ISetToken _setToken,\n', '        IERC20 _collateralAsset,\n', '        IERC20 _repayAsset,\n', '        uint256 _redeemQuantity,\n', '        string memory _tradeAdapterName,\n', '        bytes memory _tradeData\n', '    )\n', '        external\n', '        nonReentrant\n', '        onlyManagerAndValidSet(_setToken)\n', '    {\n', '        uint256 notionalRedeemQuantity = _redeemQuantity.preciseMul(_setToken.totalSupply());\n', '        \n', '        require(borrowCTokenEnabled[_setToken][underlyingToCToken[_repayAsset]], "Borrow not enabled");\n', '        uint256 notionalRepayQuantity = underlyingToCToken[_repayAsset].borrowBalanceCurrent(address(_setToken));\n', '\n', '        ActionInfo memory deleverInfo = _createAndValidateActionInfoNotional(\n', '            _setToken,\n', '            _collateralAsset,\n', '            _repayAsset,\n', '            notionalRedeemQuantity,\n', '            notionalRepayQuantity,\n', '            _tradeAdapterName,\n', '            false\n', '        );\n', '\n', '        _redeemUnderlying(deleverInfo.setToken, deleverInfo.collateralCTokenAsset, deleverInfo.notionalSendQuantity);\n', '\n', '        uint256 postTradeReceiveQuantity = _executeTrade(deleverInfo, _collateralAsset, _repayAsset, _tradeData);\n', '\n', "        // We use notionalRepayQuantity vs. Compound's max value uint256(-1) to handle WETH properly\n", '        _repayBorrow(deleverInfo.setToken, deleverInfo.borrowCTokenAsset, _repayAsset, notionalRepayQuantity);\n', '\n', '        // Update default position first to save gas on editing borrow position\n', '        _setToken.calculateAndEditDefaultPosition(\n', '            address(_repayAsset),\n', '            deleverInfo.setTotalSupply,\n', '            deleverInfo.preTradeReceiveTokenBalance\n', '        );\n', '\n', '        _updateLeverPositions(deleverInfo, _repayAsset);\n', '\n', '        emit LeverageDecreased(\n', '            _setToken,\n', '            _collateralAsset,\n', '            _repayAsset,\n', '            deleverInfo.exchangeAdapter,\n', '            deleverInfo.notionalSendQuantity,\n', '            notionalRepayQuantity,\n', '            0 // No protocol fee\n', '        );\n', '    }\n', '\n', '    /**\n', '     * CALLABLE BY ANYBODY: Sync Set positions with enabled Compound collateral and borrow positions. For collateral \n', '     * assets, update cToken default position. For borrow assets, update external borrow position.\n', '     * - Collateral assets may come out of sync when a position is liquidated\n', '     * - Borrow assets may come out of sync when interest is accrued or position is liquidated and borrow is repaid\n', '     *\n', '     * @param _setToken               Instance of the SetToken\n', '     * @param _shouldAccrueInterest   Boolean indicating whether use current block interest rate value or stored value\n', '     */\n', '    function sync(ISetToken _setToken, bool _shouldAccrueInterest) public nonReentrant onlyValidAndInitializedSet(_setToken) {\n', '        uint256 setTotalSupply = _setToken.totalSupply();\n', '\n', '        // Only sync positions when Set supply is not 0. This preserves debt and collateral positions on issuance / redemption\n', '        if (setTotalSupply > 0) {\n', '            // Loop through collateral assets\n', '            address[] memory collateralCTokens = enabledAssets[_setToken].collateralCTokens;\n', '            for(uint256 i = 0; i < collateralCTokens.length; i++) {\n', '                ICErc20 collateralCToken = ICErc20(collateralCTokens[i]);\n', '                uint256 previousPositionUnit = _setToken.getDefaultPositionRealUnit(address(collateralCToken)).toUint256();\n', '                uint256 newPositionUnit = _getCollateralPosition(_setToken, collateralCToken, setTotalSupply);\n', '\n', '                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\n', '                if (previousPositionUnit != newPositionUnit) {\n', '                  _updateCollateralPosition(_setToken, collateralCToken, newPositionUnit);\n', '                }\n', '            }\n', '\n', '            // Loop through borrow assets\n', '            address[] memory borrowCTokens = enabledAssets[_setToken].borrowCTokens;\n', '            address[] memory borrowAssets = enabledAssets[_setToken].borrowAssets;\n', '            for(uint256 i = 0; i < borrowCTokens.length; i++) {\n', '                ICErc20 borrowCToken = ICErc20(borrowCTokens[i]);\n', '                IERC20 borrowAsset = IERC20(borrowAssets[i]);\n', '\n', '                int256 previousPositionUnit = _setToken.getExternalPositionRealUnit(address(borrowAsset), address(this));\n', '\n', '                int256 newPositionUnit = _getBorrowPosition(\n', '                    _setToken,\n', '                    borrowCToken,\n', '                    setTotalSupply,\n', '                    _shouldAccrueInterest\n', '                );\n', '\n', '                // Note: Accounts for if position does not exist on SetToken but is tracked in enabledAssets\n', '                if (newPositionUnit != previousPositionUnit) {\n', '                    _updateBorrowPosition(_setToken, borrowAsset, newPositionUnit);\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', "     * MANAGER ONLY: Initializes this module to the SetToken. Only callable by the SetToken's manager. Note: managers can enable\n", "     * collateral and borrow assets that don't exist as positions on the SetToken\n", '     *\n', '     * @param _setToken             Instance of the SetToken to initialize\n', '     * @param _collateralAssets     Underlying tokens to be enabled as collateral in the SetToken\n', '     * @param _borrowAssets         Underlying tokens to be enabled as borrow in the SetToken\n', '     */\n', '    function initialize(\n', '        ISetToken _setToken,\n', '        IERC20[] memory _collateralAssets,\n', '        IERC20[] memory _borrowAssets\n', '    )\n', '        external\n', '        onlySetManager(_setToken, msg.sender)\n', '        onlyValidAndPendingSet(_setToken)\n', '    {\n', '        if (!anySetAllowed) {\n', '            require(allowedSetTokens[_setToken], "Not allowed SetToken");\n', '        }\n', '\n', '        // Initialize module before trying register\n', '        _setToken.initializeModule();\n', '\n', '        // Get debt issuance module registered to this module and require that it is initialized\n', '        require(_setToken.isInitializedModule(getAndValidateAdapter(DEFAULT_ISSUANCE_MODULE_NAME)), "Issuance not initialized");\n', '\n', '        // Try if register exists on any of the modules including the debt issuance module\n', '        address[] memory modules = _setToken.getModules();\n', '        for(uint256 i = 0; i < modules.length; i++) {\n', '            try IDebtIssuanceModule(modules[i]).registerToIssuanceModule(_setToken) {} catch {}\n', '        }\n', '        \n', '        // Enable collateral and borrow assets on Compound\n', '        addCollateralAssets(_setToken, _collateralAssets);\n', '\n', '        addBorrowAssets(_setToken, _borrowAssets);\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Removes this module from the SetToken, via call by the SetToken. Compound Settings and manager enabled\n', '     * cTokens are deleted. Markets are exited on Comptroller (only valid if borrow balances are zero)\n', '     */\n', '    function removeModule() external override onlyValidAndInitializedSet(ISetToken(msg.sender)) {\n', '        ISetToken setToken = ISetToken(msg.sender);\n', '\n', '        // Sync Compound and SetToken positions prior to any removal action\n', '        sync(setToken, true);\n', '\n', '        address[] memory borrowCTokens = enabledAssets[setToken].borrowCTokens;\n', '        for (uint256 i = 0; i < borrowCTokens.length; i++) {\n', '            ICErc20 cToken = ICErc20(borrowCTokens[i]);\n', '\n', "            // Will exit only if token isn't also being used as collateral\n", '            if(!collateralCTokenEnabled[setToken][cToken]) {\n', '                // Note: if there is an existing borrow balance, will revert and market cannot be exited on Compound\n', '                setToken.invokeExitMarket(cToken, comptroller);\n', '            }\n', '\n', '            delete borrowCTokenEnabled[setToken][cToken];\n', '        }\n', '\n', '        address[] memory collateralCTokens = enabledAssets[setToken].collateralCTokens;\n', '        for (uint256 i = 0; i < collateralCTokens.length; i++) {\n', '            ICErc20 cToken = ICErc20(collateralCTokens[i]);\n', '\n', '            setToken.invokeExitMarket(cToken, comptroller);\n', '\n', '            delete collateralCTokenEnabled[setToken][cToken];\n', '        }\n', '        \n', '        delete enabledAssets[setToken];\n', '\n', '        // Try if unregister exists on any of the modules\n', '        address[] memory modules = setToken.getModules();\n', '        for(uint256 i = 0; i < modules.length; i++) {\n', '            try IDebtIssuanceModule(modules[i]).unregisterFromIssuanceModule(setToken) {} catch {}\n', '        }\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Add registration of this module on debt issuance module for the SetToken. Note: if the debt issuance module is not added to SetToken\n', '     * before this module is initialized, then this function needs to be called if the debt issuance module is later added and initialized to prevent state\n', '     * inconsistencies\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _debtIssuanceModule   Debt issuance module address to register\n', '     */\n', '    function registerToModule(ISetToken _setToken, IDebtIssuanceModule _debtIssuanceModule) external onlyManagerAndValidSet(_setToken) {\n', '        require(_setToken.isInitializedModule(address(_debtIssuanceModule)), "Issuance not initialized");\n', '\n', '        _debtIssuanceModule.registerToIssuanceModule(_setToken);\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Add enabled collateral assets. Collateral assets are tracked for syncing positions and entered in Compound markets\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _newCollateralAssets  Addresses of new collateral underlying assets\n', '     */\n', '    function addCollateralAssets(ISetToken _setToken, IERC20[] memory _newCollateralAssets) public onlyManagerAndValidSet(_setToken) {\n', '        for(uint256 i = 0; i < _newCollateralAssets.length; i++) {\n', '            ICErc20 cToken = underlyingToCToken[_newCollateralAssets[i]];\n', '            require(address(cToken) != address(0), "cToken must exist");\n', '            require(!collateralCTokenEnabled[_setToken][cToken], "Collateral enabled");\n', '\n', '            // Note: Will only enter market if cToken is not enabled as a borrow asset as well\n', '            if (!borrowCTokenEnabled[_setToken][cToken]) {\n', '                _setToken.invokeEnterMarkets(cToken, comptroller);\n', '            }\n', '\n', '            collateralCTokenEnabled[_setToken][cToken] = true;\n', '            enabledAssets[_setToken].collateralCTokens.push(address(cToken));\n', '        }\n', '\n', '        emit CollateralAssetsUpdated(_setToken, true, _newCollateralAssets);\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Remove collateral asset. Collateral asset exited in Compound markets\n', '     * If there is a borrow balance, collateral asset cannot be removed\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _collateralAssets     Addresses of collateral underlying assets to remove\n', '     */\n', '    function removeCollateralAssets(ISetToken _setToken, IERC20[] memory _collateralAssets) external onlyManagerAndValidSet(_setToken) {\n', '        // Sync Compound and SetToken positions prior to any removal action\n', '        sync(_setToken, true);\n', '\n', '        for(uint256 i = 0; i < _collateralAssets.length; i++) {\n', '            ICErc20 cToken = underlyingToCToken[_collateralAssets[i]];\n', '            require(collateralCTokenEnabled[_setToken][cToken], "Collateral not enabled");\n', '            \n', '            // Note: Will only exit market if cToken is not enabled as a borrow asset as well\n', '            // If there is an existing borrow balance, will revert and market cannot be exited on Compound\n', '            if (!borrowCTokenEnabled[_setToken][cToken]) {\n', '                _setToken.invokeExitMarket(cToken, comptroller);\n', '            }\n', '\n', '            delete collateralCTokenEnabled[_setToken][cToken];\n', '            enabledAssets[_setToken].collateralCTokens.removeStorage(address(cToken));\n', '        }\n', '\n', '        emit CollateralAssetsUpdated(_setToken, false, _collateralAssets);\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Add borrow asset. Borrow asset is tracked for syncing positions and entered in Compound markets\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _newBorrowAssets      Addresses of borrow underlying assets to add\n', '     */\n', '    function addBorrowAssets(ISetToken _setToken, IERC20[] memory _newBorrowAssets) public onlyManagerAndValidSet(_setToken) {\n', '        for(uint256 i = 0; i < _newBorrowAssets.length; i++) {\n', '            IERC20 newBorrowAsset = _newBorrowAssets[i];\n', '            ICErc20 cToken = underlyingToCToken[newBorrowAsset];\n', '            require(address(cToken) != address(0), "cToken must exist");\n', '            require(!borrowCTokenEnabled[_setToken][cToken], "Borrow enabled");\n', '\n', '            // Note: Will only enter market if cToken is not enabled as a borrow asset as well\n', '            if (!collateralCTokenEnabled[_setToken][cToken]) {\n', '                _setToken.invokeEnterMarkets(cToken, comptroller);\n', '            }\n', '\n', '            borrowCTokenEnabled[_setToken][cToken] = true;\n', '            enabledAssets[_setToken].borrowCTokens.push(address(cToken));\n', '            enabledAssets[_setToken].borrowAssets.push(address(newBorrowAsset));\n', '        }\n', '\n', '        emit BorrowAssetsUpdated(_setToken, true, _newBorrowAssets);\n', '    }\n', '\n', '    /**\n', '     * MANAGER ONLY: Remove borrow asset. Borrow asset is exited in Compound markets\n', '     * If there is a borrow balance, borrow asset cannot be removed\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _borrowAssets         Addresses of borrow underlying assets to remove\n', '     */\n', '    function removeBorrowAssets(ISetToken _setToken, IERC20[] memory _borrowAssets) external onlyManagerAndValidSet(_setToken) {\n', '        // Sync Compound and SetToken positions prior to any removal action\n', '        sync(_setToken, true);\n', '\n', '        for(uint256 i = 0; i < _borrowAssets.length; i++) {\n', '            ICErc20 cToken = underlyingToCToken[_borrowAssets[i]];\n', '            require(borrowCTokenEnabled[_setToken][cToken], "Borrow not enabled");\n', '            \n', '            // Note: Will only exit market if cToken is not enabled as a collateral asset as well\n', '            // If there is an existing borrow balance, will revert and market cannot be exited on Compound\n', '            if (!collateralCTokenEnabled[_setToken][cToken]) {\n', '                _setToken.invokeExitMarket(cToken, comptroller);\n', '            }\n', '\n', '            delete borrowCTokenEnabled[_setToken][cToken];\n', '            enabledAssets[_setToken].borrowCTokens.removeStorage(address(cToken));\n', '            enabledAssets[_setToken].borrowAssets.removeStorage(address(_borrowAssets[i]));\n', '        }\n', '\n', '        emit BorrowAssetsUpdated(_setToken, false, _borrowAssets);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE ONLY: Add or remove allowed SetToken to initialize this module. Only callable by governance.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     */\n', '    function updateAllowedSetToken(ISetToken _setToken, bool _status) external onlyOwner {\n', '        allowedSetTokens[_setToken] = _status;\n', '        emit SetTokenStatusUpdated(_setToken, _status);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE ONLY: Toggle whether any SetToken is allowed to initialize this module. Only callable by governance.\n', '     *\n', '     * @param _anySetAllowed             Bool indicating whether allowedSetTokens is enabled\n', '     */\n', '    function updateAnySetAllowed(bool _anySetAllowed) external onlyOwner {\n', '        anySetAllowed = _anySetAllowed;\n', '        emit AnySetAllowedUpdated(_anySetAllowed);\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE ONLY: Add Compound market to module with stored underlying to cToken mapping in case of market additions to Compound.\n', '     *\n', '     * // importANT: Validations are skipped in order to get contract under bytecode limit \n', '     *\n', '     * @param _cToken                   Address of cToken to add\n', '     * @param _underlying               Address of underlying token that maps to cToken\n', '     */\n', '    function addCompoundMarket(ICErc20 _cToken, IERC20 _underlying) external onlyOwner {\n', '        require(address(underlyingToCToken[_underlying]) == address(0), "Already added");\n', '        underlyingToCToken[_underlying] = _cToken;\n', '    }\n', '\n', '    /**\n', '     * GOVERNANCE ONLY: Remove Compound market on stored underlying to cToken mapping in case of market removals\n', '     *\n', '     * // importANT: Validations are skipped in order to get contract under bytecode limit \n', '     *\n', '     * @param _underlying               Address of underlying token to remove\n', '     */\n', '    function removeCompoundMarket(IERC20 _underlying) external onlyOwner {\n', '        require(address(underlyingToCToken[_underlying]) != address(0), "Not added");\n', '        delete underlyingToCToken[_underlying];\n', '    }\n', '\n', '    /**\n', '     * MODULE ONLY: Hook called prior to issuance to sync positions on SetToken. Only callable by valid module.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     */\n', '    function moduleIssueHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external onlyModule(_setToken) {\n', '        sync(_setToken, false);\n', '    }\n', '\n', '    /**\n', '     * MODULE ONLY: Hook called prior to redemption to sync positions on SetToken. For redemption, always use current borrowed balance after interest accrual.\n', '     * Only callable by valid module.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     */\n', '    function moduleRedeemHook(ISetToken _setToken, uint256 /* _setTokenQuantity */) external onlyModule(_setToken) {\n', '        sync(_setToken, true);\n', '    }\n', '\n', '    /**\n', '     * MODULE ONLY: Hook called prior to looping through each component on issuance. Invokes borrow in order for module to return debt to issuer. Only callable by valid module.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _setTokenQuantity     Quantity of SetToken\n', '     * @param _component            Address of component\n', '     */\n', '    function componentIssueHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool /* _isEquity */) external onlyModule(_setToken) {\n', '        int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\n', '\n', '        require(componentDebt < 0, "Component must be negative");\n', '\n', '        uint256 notionalDebt = componentDebt.mul(-1).toUint256().preciseMul(_setTokenQuantity);\n', '\n', '        _borrow(_setToken, underlyingToCToken[_component], notionalDebt);\n', '    }\n', '\n', '    /**\n', '     * MODULE ONLY: Hook called prior to looping through each component on redemption. Invokes repay after issuance module transfers debt from issuer. Only callable by valid module.\n', '     *\n', '     * @param _setToken             Instance of the SetToken\n', '     * @param _setTokenQuantity     Quantity of SetToken\n', '     * @param _component            Address of component\n', '     */\n', '    function componentRedeemHook(ISetToken _setToken, uint256 _setTokenQuantity, IERC20 _component, bool /* _isEquity */) external onlyModule(_setToken) {\n', '        int256 componentDebt = _setToken.getExternalPositionRealUnit(address(_component), address(this));\n', '\n', '        require(componentDebt < 0, "Component must be negative");\n', '\n', '        uint256 notionalDebt = componentDebt.mul(-1).toUint256().preciseMulCeil(_setTokenQuantity);\n', '\n', '        _repayBorrow(_setToken, underlyingToCToken[_component], _component, notionalDebt);\n', '    }\n', '\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Get enabled assets for SetToken. Returns an array of enabled cTokens that are collateral assets and an\n', '     * array of underlying that are borrow assets.\n', '     *\n', '     * @return                    Collateral cToken assets that are enabled\n', '     * @return                    Underlying borrowed assets that are enabled.\n', '     */\n', '    function getEnabledAssets(ISetToken _setToken) external view returns(address[] memory, address[] memory) {\n', '        return (\n', '            enabledAssets[_setToken].collateralCTokens,\n', '            enabledAssets[_setToken].borrowAssets\n', '        );\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Mints the specified cToken from the underlying of the specified notional quantity. If cEther, the WETH must be \n', '     * unwrapped as it only accepts the underlying ETH.\n', '     */\n', '    function _mintCToken(ISetToken _setToken, ICErc20 _cToken, IERC20 _underlyingToken, uint256 _mintNotional) internal {\n', '        if (_cToken == cEther) {\n', '            _setToken.invokeUnwrapWETH(address(weth), _mintNotional);\n', '\n', '            _setToken.invokeMintCEther(_cToken, _mintNotional);\n', '        } else {\n', '            _setToken.invokeApprove(address(_underlyingToken), address(_cToken), _mintNotional);\n', '\n', '            _setToken.invokeMintCToken(_cToken, _mintNotional);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Invoke redeem from SetToken. If cEther, then also wrap ETH into WETH.\n', '     */\n', '    function _redeemUnderlying(ISetToken _setToken, ICErc20 _cToken, uint256 _redeemNotional) internal {\n', '        _setToken.invokeRedeemUnderlying(_cToken, _redeemNotional);\n', '\n', '        if (_cToken == cEther) {\n', '            _setToken.invokeWrapWETH(address(weth), _redeemNotional);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Invoke repay from SetToken. If cEther then unwrap WETH into ETH.\n', '     */\n', '    function _repayBorrow(ISetToken _setToken, ICErc20 _cToken, IERC20 _underlyingToken, uint256 _repayNotional) internal {\n', '        if (_cToken == cEther) {\n', '            _setToken.invokeUnwrapWETH(address(weth), _repayNotional);\n', '\n', '            _setToken.invokeRepayBorrowCEther(_cToken, _repayNotional);\n', '        } else {\n', '            // Approve to cToken\n', '            _setToken.invokeApprove(address(_underlyingToken), address(_cToken), _repayNotional);\n', '            _setToken.invokeRepayBorrowCToken(_cToken, _repayNotional);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * Invoke the SetToken to interact with the specified cToken to borrow the cToken's underlying of the specified borrowQuantity.\n", '     */\n', '    function _borrow(ISetToken _setToken, ICErc20 _cToken, uint256 _notionalBorrowQuantity) internal {\n', '        _setToken.invokeBorrow(_cToken, _notionalBorrowQuantity);\n', '        if (_cToken == cEther) {\n', '            _setToken.invokeWrapWETH(address(weth), _notionalBorrowQuantity);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Invokes approvals, gets trade call data from exchange adapter and invokes trade from SetToken\n', '     */\n', '    function _executeTrade(\n', '        ActionInfo memory _actionInfo,\n', '        IERC20 _sendToken,\n', '        IERC20 _receiveToken,\n', '        bytes memory _data\n', '    )\n', '        internal\n', '        returns (uint256)\n', '    {\n', '         ISetToken setToken = _actionInfo.setToken;\n', '         uint256 notionalSendQuantity = _actionInfo.notionalSendQuantity;\n', '\n', '         setToken.invokeApprove(\n', '            address(_sendToken),\n', '            _actionInfo.exchangeAdapter.getSpender(),\n', '            notionalSendQuantity\n', '        );\n', '\n', '        (\n', '            address targetExchange,\n', '            uint256 callValue,\n', '            bytes memory methodData\n', '        ) = _actionInfo.exchangeAdapter.getTradeCalldata(\n', '            address(_sendToken),\n', '            address(_receiveToken),\n', '            address(setToken),\n', '            notionalSendQuantity,\n', '            _actionInfo.minNotionalReceiveQuantity,\n', '            _data\n', '        );\n', '\n', '        setToken.invoke(targetExchange, callValue, methodData);\n', '\n', '        uint256 receiveTokenQuantity = _receiveToken.balanceOf(address(setToken)).sub(_actionInfo.preTradeReceiveTokenBalance);\n', '        require(\n', '            receiveTokenQuantity >= _actionInfo.minNotionalReceiveQuantity,\n', '            "Slippage too high"\n', '        );\n', '\n', '        return receiveTokenQuantity;\n', '    }\n', '\n', '    /**\n', '     * Calculates protocol fee on module and pays protocol fee from SetToken\n', '     */\n', '    function _accrueProtocolFee(ISetToken _setToken, IERC20 _receiveToken, uint256 _exchangedQuantity) internal returns(uint256) {\n', '        uint256 protocolFeeTotal = getModuleFee(PROTOCOL_TRADE_FEE_INDEX, _exchangedQuantity);\n', '        \n', '        payProtocolFeeFromSetToken(_setToken, address(_receiveToken), protocolFeeTotal);\n', '\n', '        return protocolFeeTotal;\n', '    }\n', '\n', '    function _updateLeverPositions(ActionInfo memory actionInfo, IERC20 _borrowAsset) internal {\n', '        _updateCollateralPosition(\n', '            actionInfo.setToken,\n', '            actionInfo.collateralCTokenAsset,\n', '            _getCollateralPosition(\n', '                actionInfo.setToken,\n', '                actionInfo.collateralCTokenAsset,\n', '                actionInfo.setTotalSupply\n', '            )\n', '        );\n', '\n', '        _updateBorrowPosition(\n', '            actionInfo.setToken,\n', '            _borrowAsset,\n', '            _getBorrowPosition(\n', '                actionInfo.setToken,\n', '                actionInfo.borrowCTokenAsset,\n', '                actionInfo.setTotalSupply,\n', '                false // Do not accrue interest\n', '            )\n', '        );\n', '    }\n', '\n', '    function _updateCollateralPosition(ISetToken _setToken, ICErc20 _cToken, uint256 _newPositionUnit) internal {\n', '        _setToken.editDefaultPosition(address(_cToken), _newPositionUnit);\n', '    }\n', '\n', '    function _updateBorrowPosition(ISetToken _setToken, IERC20 _underlyingToken, int256 _newPositionUnit) internal {\n', '        _setToken.editExternalPosition(address(_underlyingToken), address(this), _newPositionUnit, "");\n', '    }\n', '\n', '    /**\n', '     * Construct the ActionInfo struct for lever and delever\n', '     */\n', '    function _createAndValidateActionInfo(\n', '        ISetToken _setToken,\n', '        IERC20 _sendToken,\n', '        IERC20 _receiveToken,\n', '        uint256 _sendQuantityUnits,\n', '        uint256 _minReceiveQuantityUnits,\n', '        string memory _tradeAdapterName,\n', '        bool _isLever\n', '    )\n', '        internal\n', '        view\n', '        returns(ActionInfo memory)\n', '    {\n', '        uint256 totalSupply = _setToken.totalSupply();\n', '\n', '        return _createAndValidateActionInfoNotional(\n', '            _setToken,\n', '            _sendToken,\n', '            _receiveToken,\n', '            _sendQuantityUnits.preciseMul(totalSupply),\n', '            _minReceiveQuantityUnits.preciseMul(totalSupply),\n', '            _tradeAdapterName,\n', '            _isLever\n', '        );\n', '    }\n', '\n', '    /**\n', '     * Construct the ActionInfo struct for lever and delever accepting notional units\n', '     */\n', '    function _createAndValidateActionInfoNotional(\n', '        ISetToken _setToken,\n', '        IERC20 _sendToken,\n', '        IERC20 _receiveToken,\n', '        uint256 _notionalSendQuantity,\n', '        uint256 _minNotionalReceiveQuantity,\n', '        string memory _tradeAdapterName,\n', '        bool _isLever\n', '    )\n', '        internal\n', '        view\n', '        returns(ActionInfo memory)\n', '    {\n', '        uint256 totalSupply = _setToken.totalSupply();\n', '        ActionInfo memory actionInfo = ActionInfo ({\n', '            exchangeAdapter: IExchangeAdapter(getAndValidateAdapter(_tradeAdapterName)),\n', '            setToken: _setToken,\n', '            collateralCTokenAsset: _isLever ? underlyingToCToken[_receiveToken] : underlyingToCToken[_sendToken],\n', '            borrowCTokenAsset: _isLever ? underlyingToCToken[_sendToken] : underlyingToCToken[_receiveToken],\n', '            setTotalSupply: totalSupply,\n', '            notionalSendQuantity: _notionalSendQuantity,\n', '            minNotionalReceiveQuantity: _minNotionalReceiveQuantity,\n', '            preTradeReceiveTokenBalance: IERC20(_receiveToken).balanceOf(address(_setToken))\n', '        });\n', '\n', '        _validateCommon(actionInfo);\n', '\n', '        return actionInfo;\n', '    }\n', '\n', '\n', '\n', '    function _validateCommon(ActionInfo memory _actionInfo) internal view {\n', '        require(collateralCTokenEnabled[_actionInfo.setToken][_actionInfo.collateralCTokenAsset], "Collateral not enabled");\n', '        require(borrowCTokenEnabled[_actionInfo.setToken][_actionInfo.borrowCTokenAsset], "Borrow not enabled");\n', '        require(_actionInfo.collateralCTokenAsset != _actionInfo.borrowCTokenAsset, "Must be different");\n', '        require(_actionInfo.notionalSendQuantity > 0, "Quantity is 0");\n', '    }\n', '\n', '    function _getCollateralPosition(ISetToken _setToken, ICErc20 _cToken, uint256 _setTotalSupply) internal view returns (uint256) {\n', '        uint256 collateralNotionalBalance = _cToken.balanceOf(address(_setToken));\n', '        return collateralNotionalBalance.preciseDiv(_setTotalSupply);\n', '    }\n', '\n', '    /**\n', '     * Get borrow position. If should accrue interest is true, then accrue interest on Compound and use current borrow balance, else use the stored value to save gas.\n', '     * Use the current value for debt redemption, when we need to calculate the exact units of debt that needs to be repaid.\n', '     */\n', '    function _getBorrowPosition(ISetToken _setToken, ICErc20 _cToken, uint256 _setTotalSupply, bool _shouldAccrueInterest) internal returns (int256) {\n', '        uint256 borrowNotionalBalance = _shouldAccrueInterest ? _cToken.borrowBalanceCurrent(address(_setToken)) : _cToken.borrowBalanceStored(address(_setToken));\n', '        // Round negative away from 0\n', '        int256 borrowPositionUnit = borrowNotionalBalance.preciseDivCeil(_setTotalSupply).toInt256().mul(-1);\n', '\n', '        return borrowPositionUnit;\n', '    }\n', '}']