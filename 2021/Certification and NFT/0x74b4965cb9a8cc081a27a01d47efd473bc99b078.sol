['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-28\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity >=0.4.0 <0.7.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'interface ERC20Interface {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address tokenOwner) external view returns (uint balance);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint remaining);\n', '    function transfer(address to, uint tokens) external returns (bool success);\n', '    function approve(address spender, uint tokens) external returns (bool success);\n', '    function transferFrom(address from, address to, uint tokens) external returns (bool success);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '}\n', '\n', 'contract SimpCoin is ERC20Interface {\n', '    \n', '    string public constant name = "Simp Coin";\n', '    string public constant symbol = "SIMP";\n', '    uint8 public constant decimals = 18;\n', '    \n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '    event RegistrationSuccessful(uint256 nonce);\n', '    event RegistrationFailed(uint256 nonce);\n', '    \n', '    mapping(address => uint256) balances;\n', '\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '    uint256 totalSupply_ = 1337000000000000000000000000;\n', '    \n', '    mapping (string => address) addressTable;\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    constructor() public{\n', '\t    balances[msg.sender] = totalSupply_;\n', '\t    emit Transfer(address(0), msg.sender, totalSupply_);\n', '    }\n', '    \n', '    function totalSupply() public override view returns (uint256) {\n', '\t    return totalSupply_;\n', '    }\n', '    \n', '    function balanceOf(address tokenOwner) public override view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '    \n', '    function balanceOf(string memory tokenOwner) public view returns (uint) {\n', '        address userAddress;\n', '        userAddress = addressTable[tokenOwner];\n', '        return balances[userAddress];\n', '    }\n', '    \n', '    function transfer(address receiver, uint numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function transfer(string memory receiver, uint numTokens) public returns (bool) {\n', '        address receiverAddress;\n', '        receiverAddress = addressTable[receiver];\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiverAddress] = balances[receiverAddress].add(numTokens);\n', '        emit Transfer(msg.sender, receiverAddress, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(address delegate, uint numTokens) public override returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function approve(string memory delegate, uint numTokens) public returns (bool) {\n', '        address delegateAddress;\n', '        delegateAddress = addressTable[delegate];\n', '        allowed[msg.sender][delegateAddress] = numTokens;\n', '        emit Approval(msg.sender, delegateAddress, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function allowance(address owner, address delegate) public override view returns (uint) {\n', '        return allowed[owner][delegate];\n', '    }\n', '    \n', '    function allowance(string memory owner, string memory delegate) public view returns (uint) {\n', '        address ownerAddress;\n', '        ownerAddress = addressTable[owner];\n', '        address delegateAddress;\n', '        delegateAddress = addressTable[delegate];\n', '        return allowed[ownerAddress][delegateAddress];\n', '    }\n', '    \n', '     function transferFrom(address owner, address buyer, uint numTokens) public override returns (bool) {\n', '        require(numTokens <= balances[owner]);    \n', '        require(numTokens <= allowed[owner][msg.sender]);\n', '    \n', '        balances[owner] = balances[owner].sub(numTokens);\n', '        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function transferFrom(string memory owner, string memory buyer, uint numTokens) public returns (bool) {\n', '        address ownerAddress;\n', '        ownerAddress = addressTable[owner];\n', '        address buyerAddress;\n', '        buyerAddress = addressTable[buyer];\n', '        \n', '        require(numTokens <= balances[ownerAddress]);    \n', '        require(numTokens <= allowed[ownerAddress][msg.sender]);\n', '    \n', '        balances[ownerAddress] = balances[ownerAddress].sub(numTokens);\n', '        allowed[ownerAddress][msg.sender] = allowed[ownerAddress][msg.sender].sub(numTokens);\n', '        balances[buyerAddress] = balances[buyerAddress].add(numTokens);\n', '        emit Transfer(ownerAddress, buyerAddress, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    function registerUser(string memory user, uint256 nonce) public returns (bool) {\n', '        if (addressTable[user] == address(0)) {\n', '            addressTable[user] = msg.sender;\n', '            emit RegistrationSuccessful(nonce);\n', '            return true;\n', '        } else {\n', '            emit RegistrationFailed(nonce);\n', '            return false;\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath { \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}']