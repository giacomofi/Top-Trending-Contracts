['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-08\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/sakeswap/interfaces/ISakeSwapFactory.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ISakeSwapFactory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setMigrator(address) external;\n', '}\n', '\n', '// File: contracts/sakeswap/interfaces/ISakeSwapRouter.sol\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface ISakeSwapRouter {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB\n', '        );\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH\n', '        );\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB\n', '        );\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH\n', '        );\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline,\n', '        bool ifmint\n', '    ) external;\n', '}\n', '\n', '// File: contracts/sakeswap/interfaces/ISakeSwapPair.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface ISakeSwapPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function stoken() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '    function dealSlippageWithIn(address[] calldata path, uint amountIn, address to, bool ifmint) external returns (uint amountOut);\n', '    function dealSlippageWithOut(address[] calldata path, uint amountOut, address to, bool ifmint) external returns (uint extra);\n', '    function getAmountOutMarket(address token, uint amountIn) external view returns (uint _out, uint t0Price);\n', '    function getAmountInMarket(address token, uint amountOut) external view returns (uint _in, uint t0Price);\n', '    function getAmountOutFinal(address token, uint256 amountIn) external view returns (uint256 amountOut, uint256 stokenAmount);\n', '    function getAmountInFinal(address token, uint256 amountOut) external view returns (uint256 amountIn, uint256 stokenAmount);\n', '    function getTokenMarketPrice(address token) external view returns (uint price);\n', '}\n', '\n', '// File: contracts/sakeswap/interfaces/IWETH.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '// File: contracts/sakeswap/libraries/TransferHelper.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: contracts/ILO/SakeILO.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SakeILO is Ownable, Pausable, ReentrancyGuard{\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '   \n', '    address public WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public SAKE = 0x066798d9ef0833ccc719076Dab77199eCbd178b0; \n', '    ISakeSwapFactory public sakeFactory = ISakeSwapFactory(0x75e48C954594d64ef9613AeEF97Ad85370F13807);\n', '    ISakeSwapRouter public sakeRouter = ISakeSwapRouter(0x9C578b573EdE001b95d51a55A3FAfb45f5608b1f);\n', '\n', '    IERC20 public projectPartyToken;\n', '    IERC20 public contributionToken;\n', '\n', '    uint256 public fundraisingStartTimestamp;\n', '    uint256 public fundraisingDurationDays;\n', '\n', '    uint256 public totalProjectPartyFund;   // amount of project party token, set ratio \n', '    uint256 public maxPoolContribution;     // hard cap\n', '    uint256 public minPoolContribution;     // soft cap\n', '    uint256 public minInvestorContribution; // min amount for each investor to contribute\n', '    uint256 public maxInvestorContribution; // max amount for each investor to contribute\n', '    uint256 public minSakeHolder;\n', '\n', '    address public projectPartyAddress;\n', '    bool public projectPartyFundDone = false;\n', '    bool public projectPartyRefundDone = false; \n', '    uint256 public totalInvestorContributed = 0;\n', '    mapping (address => uint256) public investorContributed; // how much each investor contributed\n', '    uint256 public investorsCount;\n', '    uint256 public transfersCount; \n', ' \n', '    uint256 public lpLockPeriod;\n', '    uint256 public lpUnlockFrequency;\n', '    uint256 public lpUnlockFeeRatio;\n', '    address public feeAddress;\n', '\n', '    uint256 public totalLPCreated = 0;  // lp created amount by add liquidity to sakeswap  \n', '    uint256 public perUnlockLP = 0;     // lp unlock amount each time\n', '    uint256 public lpUnlockStartTimestamp = 0;\n', '    mapping (address => uint256) public investorUnlockedLPTimes;  // how many times to unlock lp of each adddress  \n', '    uint256 public projectPartUnlockedLPTimes;\n', '\n', '    address public factory;\n', '\n', '    event Contribution(address indexed user, uint256 value);\n', '    event UnlockLP(address indexed user, uint256 lpAmount, uint256 feeAmount);\n', '    event Refund(address indexed user, uint256 value);\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\n', '    }\n', '\n', '    constructor() public {\n', '        factory = msg.sender;\n', '    }\n', '\n', '    function initialize(address _projectPartyToken, address _contributionToken, uint256 _fundraisingDurationDays, \n', '        uint256 _totalProjectPartyFund, uint256 _maxPoolContribution, uint256 _minPoolContribution, address _owner) external whenNotPaused {\n', '\n', '        require(msg.sender == factory, "not factory address");\n', '        projectPartyToken = IERC20(_projectPartyToken);\n', '        contributionToken = IERC20(_contributionToken);\n', '        fundraisingDurationDays = _fundraisingDurationDays * 1 days;\n', '        totalProjectPartyFund = _totalProjectPartyFund;\n', '        maxPoolContribution = _maxPoolContribution;\n', '        minPoolContribution = _minPoolContribution;\n', '        transferOwnership(_owner);\n', '    }\n', '\n', '    function setParams(uint256 minInContribution, uint256 maxInContribution, uint256 lockPeriod, uint256 unlockFrequency, uint256 feeRatio, \n', '        address feeTo, uint256 minSake, uint256 startTimestamp) external onlyOwner whenNotPaused {\n', '\n', '        require(lpUnlockStartTimestamp == 0, "add liquidity finished");\n', '        require(minInContribution <= maxInContribution && minInContribution > 0, "invalid investor contribution");\n', '        require(lockPeriod > 0 && unlockFrequency > 0 , "zero period");\n', '        require(lockPeriod >= unlockFrequency, "invalid period");\n', '        require(startTimestamp > block.timestamp, "invalid start time");\n', '        require(feeRatio >= 0 && feeRatio < 100, "invalid fee ratio");\n', '        minInvestorContribution = minInContribution;\n', '        maxInvestorContribution = maxInContribution;\n', '        lpLockPeriod = lockPeriod * 1 days;\n', '        lpUnlockFrequency = unlockFrequency * 1 days;\n', '        lpUnlockFeeRatio = feeRatio; \n', '        feeAddress = feeTo;\n', '        minSakeHolder = minSake;\n', '        fundraisingStartTimestamp = startTimestamp;\n', '    }\n', '\n', '    function setPoolParams(uint256 _fundraisingDurationDays,  uint256 _totalProjectPartyFund, uint256 _maxPoolContribution, uint256 _minPoolContribution)  external onlyOwner whenNotPaused {\n', '        require(projectPartyFundDone == false, "project party fund done");\n', '        require(_totalProjectPartyFund > 0, "invalid project party fund");\n', '        require(_maxPoolContribution >= _minPoolContribution && _minPoolContribution > 0, "invalid pool contribution");\n', '        require(_fundraisingDurationDays > 0, "invalid period");\n', '\n', '        fundraisingDurationDays = _fundraisingDurationDays * 1 days;\n', '        totalProjectPartyFund = _totalProjectPartyFund;\n', '        maxPoolContribution = _maxPoolContribution;\n', '        minPoolContribution = _minPoolContribution;\n', '    } \n', '\n', '    /**\n', '     * @dev project party contribute token to contract\n', '     * project party should appove token to contract in advance\n', '     * project party must call this function before fundraising begin\n', '     * Emits a {Contribution} event.\n', '     */\n', '    function projectPartyFund() external nonReentrant whenNotPaused {\n', '        require(isFundraisingFinished() == false, "fundraising already finished");\n', '        require(projectPartyFundDone == false, "repeatedly operation");\n', '          \n', '        projectPartyAddress = msg.sender;\n', '        projectPartyFundDone = true;\n', '        projectPartyToken.safeTransferFrom(msg.sender, address(this), totalProjectPartyFund);\n', '        emit Contribution(msg.sender, totalProjectPartyFund);  \n', '    }\n', '\n', '    /**\n', '     * @dev investor contribute eth to contract\n', '     * Emits a {Contribution} event.\n', '     * msg.value is amount to contribute\n', '     */\n', '    function contributeETH() external whenNotPaused nonReentrant  payable {\n', '        require(WETH == address(contributionToken), "invalid token");\n', '        uint256 cAmount =  contributeInternal(msg.value);\n', '        IWETH(WETH).deposit{value: cAmount}();\n', '        if (msg.value > cAmount){\n', '            TransferHelper.safeTransferETH(msg.sender, msg.value.sub(cAmount));\n', '        } \n', '        emit Contribution(msg.sender, cAmount);  \n', '    }\n', '\n', '    /**\n', '     * @dev investor contribute eth to contract\n', '     * investor should appove token to contract in advance\n', '     * Emits a {Contribution} event.\n', '     *\n', '     * Parameters:\n', '     * - `amount` is amount to contribute \n', '     */\n', '    function contributeToken(uint256 amount) external nonReentrant whenNotPaused {\n', '        require(WETH != address(contributionToken), "invalid token");\n', '        uint256 cAmount = contributeInternal(amount);\n', '        contributionToken.safeTransferFrom(msg.sender, address(this), cAmount);\n', '        emit Contribution(msg.sender, cAmount);  \n', '    }\n', '\n', '    function contributeInternal(uint256 amount) internal returns (uint256)  {\n', '        require(isFundraisingStarted() == true, "fundraising not started");\n', '        require(isFundraisingFinished() == false, "fundraising already finished");\n', '        uint256 contributed = investorContributed[msg.sender];\n', '        require(contributed.add(amount) >= minInvestorContribution && contributed.add(amount) <= maxInvestorContribution, "invalid amount");\n', '        if (minSakeHolder > 0) {\n', '            uint256 sakeAmount = IERC20(SAKE).balanceOf(msg.sender);\n', '            require(sakeAmount >= minSakeHolder, "sake insufficient");\n', '        }\n', '        if (contributed == 0) {\n', '            investorsCount = investorsCount + 1; \n', '        }\n', '        transfersCount = transfersCount + 1;  \n', '\n', '        if (totalInvestorContributed.add(amount) <= maxPoolContribution) {\n', '            investorContributed[msg.sender] = contributed.add(amount); \n', '            totalInvestorContributed = totalInvestorContributed.add(amount); \n', '            return amount;\n', '        }else{\n', '            uint256 cAmount = maxPoolContribution.sub(totalInvestorContributed);\n', '            investorContributed[msg.sender] = contributed.add(cAmount); \n', '            totalInvestorContributed = maxPoolContribution;\n', '            return cAmount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev whether fundraising is started\n', '     *\n', '     */\n', '    function isFundraisingStarted() public view returns (bool) {\n', '        return projectPartyFundDone && block.timestamp >= fundraisingStartTimestamp; \n', '    }\n', '\n', '    /**\n', '     * @dev whether fundraising is finished\n', '     *\n', '     */\n', '    function isFundraisingFinished()  public view returns (bool) {\n', '        if (block.timestamp >= fundraisingStartTimestamp.add(fundraisingDurationDays)) {\n', '            return true;\n', '        }\n', '        if (maxPoolContribution == totalInvestorContributed && projectPartyFundDone) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev whether fundraising is succeed\n', '     *\n', '     */\n', '    function isFundraisingSucceed()  public view returns (bool) {\n', '        require(isFundraisingFinished() == true, "fundraising not finished");\n', '        return projectPartyFundDone && totalInvestorContributed >= minPoolContribution;\n', '    } \n', '\n', '    /**\n', '     * @dev when fundraising is succeed, add liquidity to sakeswap\n', '     * Only callable by the Owner.\n', '     *\n', '     */\n', '    function addLiquidityToSakeSwap() external onlyOwner nonReentrant whenNotPaused {\n', '        require(lpUnlockStartTimestamp == 0, "repeatedly operation");\n', '        require(isFundraisingSucceed() == true, "fundraising not succeeded");\n', '\n', '        lpUnlockStartTimestamp = block.timestamp;\n', '\n', '        uint256 projectPartyAmount = 0;\n', '        uint256 contributionAmount = 0;\n', '        if (totalInvestorContributed == maxPoolContribution) {\n', '            projectPartyAmount = totalProjectPartyFund;\n', '            contributionAmount = maxPoolContribution; \n', '        }else{\n', '            projectPartyAmount = totalProjectPartyFund.mul(totalInvestorContributed).div(maxPoolContribution);\n', '            uint256 redundant = totalProjectPartyFund.sub(projectPartyAmount); \n', '            contributionAmount = totalInvestorContributed;\n', '            projectPartyToken.transfer(projectPartyAddress, redundant);  \n', '        }\n', '        projectPartyToken.approve(address(sakeRouter), projectPartyAmount);\n', '        contributionToken.approve(address(sakeRouter), contributionAmount);\n', '        (, , totalLPCreated) = sakeRouter.addLiquidity(\n', '            address(projectPartyToken),\n', '            address(contributionToken),\n', '            projectPartyAmount,\n', '            contributionAmount,\n', '            0,\n', '            0,\n', '            address(this),\n', '            now + 60\n', '        );\n', '        require(totalLPCreated != 0 , "add liquidity failed");\n', '        perUnlockLP = totalLPCreated.div(lpLockPeriod.div(lpUnlockFrequency));\n', '    }\n', '\n', '    function setSakeAddress(address _sakeRouter, address _sakeFactory, address _weth, address _sake) external onlyOwner {\n', '        sakeFactory = ISakeSwapFactory(_sakeFactory);\n', '        sakeRouter = ISakeSwapRouter(_sakeRouter);\n', '        WETH = _weth;\n', '        SAKE = _sake;\n', '    } \n', '\n', '    /**\n', "     * @dev if fundraising is fail, refund project party's token\n", '     *\n', '     */\n', '    function projectPartyRefund() external nonReentrant whenNotPaused {\n', '        require(msg.sender == projectPartyAddress, "invalid address");\n', '        require(projectPartyRefundDone == false, "repeatedly operation");\n', '        require(isFundraisingSucceed() == false, "fundraising succeed");\n', '        projectPartyRefundDone = true;\n', '        projectPartyToken.transfer(msg.sender, totalProjectPartyFund); \n', '    }\n', '\n', '    /**\n', "     * @dev if fundraising is fail, refund investor's token\n", '     *\n', '     */\n', '    function investorRefund() external nonReentrant whenNotPaused {\n', '        require(isFundraisingSucceed() == false, "fundraising succeed");\n', '\n', '        uint256 amount = investorContributed[msg.sender];\n', '        require(amount > 0, "zero amount");\n', '\n', '        investorContributed[msg.sender] = 0; \n', '        if (WETH == address(contributionToken)){\n', '            IWETH(WETH).withdraw(amount);\n', '            TransferHelper.safeTransferETH(msg.sender, amount);\n', '        }else{\n', '            contributionToken.transfer(msg.sender, amount);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev after add liquidity to sakeswap, project party unlock LP periodicity\n', '     *\n', '     */\n', '    function projectPartyUnlockLP() external nonReentrant whenNotPaused {\n', '        require(msg.sender == projectPartyAddress, "invalid address");\n', '        (uint256 availableTimes, uint256 amount) = getUnlockLPAmount(false, msg.sender);\n', '        projectPartUnlockedLPTimes = projectPartUnlockedLPTimes.add(availableTimes);\n', '        unlockLP(amount);\n', '    } \n', '\n', '    /**\n', '     * @dev after investor to sakeswap, investor unlock LP periodicity\n', '     *\n', '     */\n', '    function investorUnlockLP() external nonReentrant whenNotPaused {\n', '        require(investorContributed[msg.sender] > 0, "invalid address");\n', '        (uint256 availableTimes, uint256 amount) = getUnlockLPAmount(true, msg.sender);\n', '        investorUnlockedLPTimes[msg.sender] = investorUnlockedLPTimes[msg.sender].add(availableTimes);\n', '        unlockLP(amount);\n', '    } \n', '\n', '\n', '    /**\n', '     * @dev Get LP amount to unlock\n', '     * Emits a {UnlockLP} event.\n', '     *\n', '     * Parameters:\n', '     * - `isInvestor` whether caller is project party or investor\n', '     *\n', '     * Returns:\n', '     * - `availableTimes` is frequency times to unlock\n', '     * - `amount` is lp amount to unlock \n', '     */\n', '    function getUnlockLPAmount(bool isInvestor, address user) public view returns (uint256 availableTimes, uint256 amount) {\n', '        require(lpUnlockStartTimestamp > 0, "add liquidity not finished");\n', '\n', '        uint256 totalTimes = 0; \n', '        if (block.timestamp > lpUnlockStartTimestamp.add(lpLockPeriod)){\n', '            totalTimes = lpLockPeriod.div(lpUnlockFrequency);\n', '        }else{\n', '            totalTimes = (block.timestamp.sub(lpUnlockStartTimestamp)).div(lpUnlockFrequency);      \n', '        }\n', '\n', '        if (isInvestor){\n', '            availableTimes = totalTimes.sub(investorUnlockedLPTimes[user]);\n', '            require(availableTimes > 0, "zero amount to unlock");\n', '\n', '            uint256 totalRelease = perUnlockLP.mul(availableTimes);\n', '            amount = totalRelease.div(2).mul(investorContributed[user]).div(totalInvestorContributed);\n', '        }else{\n', '            availableTimes = totalTimes.sub(projectPartUnlockedLPTimes);\n', '            require(availableTimes > 0, "zero amount to unlock");\n', '\n', '            uint256 totalRelease = perUnlockLP.mul(availableTimes);\n', '            amount = totalRelease.div(2);    \n', '        }\n', '    } \n', '\n', '    function unlockLP(uint256 amount) internal {\n', '        uint256 feeAmount = amount.mul(lpUnlockFeeRatio).div(100);\n', '        ISakeSwapPair pair = ISakeSwapPair(sakeFactory.getPair(address(projectPartyToken), address(contributionToken)));\n', '        require(pair != ISakeSwapPair(address(0)), "invalid sake pair");\n', '        require(pair.transfer(feeAddress, feeAmount), "transfer fee fail");\n', '        require(pair.transfer(msg.sender, amount.sub(feeAmount)), "transfer fail");\n', '        emit UnlockLP(msg.sender, amount.sub(feeAmount), feeAmount);\n', '    }\n', '\n', '    function setPaused(bool bPause) external nonReentrant onlyOwner {\n', '        if(bPause){\n', '            _pause();\n', '        } else {\n', '            _unpause();\n', '        }\n', '    }\n', '}']