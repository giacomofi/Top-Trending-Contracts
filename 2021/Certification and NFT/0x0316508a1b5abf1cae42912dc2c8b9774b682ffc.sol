['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.7.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '    //     require(address(this).balance >= value, "Address: insufficient balance for call");\n', '    //     return _functionCallWithValue(target, data, value, errorMessage);\n', '    // }\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '\n', '  /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '\n', '    function addressToString(address _address) internal pure returns(string memory) {\n', '        bytes32 _bytes = bytes32(uint256(_address));\n', '        bytes memory HEX = "0123456789abcdef";\n', '        bytes memory _addr = new bytes(42);\n', '\n', "        _addr[0] = '0';\n", "        _addr[1] = 'x';\n", '\n', '        for(uint256 i = 0; i < 20; i++) {\n', '            _addr[2+i*2] = HEX[uint8(_bytes[i + 12] >> 4)];\n', '            _addr[3+i*2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n', '        }\n', '\n', '        return string(_addr);\n', '\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IOwnable {\n', '  function policy() external view returns (address);\n', '\n', '  function renounceManagement() external;\n', '  \n', '  function pushManagement( address newOwner_ ) external;\n', '  \n', '  function pullManagement() external;\n', '}\n', '\n', 'contract Ownable is IOwnable {\n', '\n', '    address internal _owner;\n', '    address internal _newOwner;\n', '\n', '    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n', '    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipPushed( address(0), _owner );\n', '    }\n', '\n', '    function policy() public view override returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyPolicy() {\n', '        require( _owner == msg.sender, "Ownable: caller is not the owner" );\n', '        _;\n', '    }\n', '\n', '    function renounceManagement() public virtual override onlyPolicy() {\n', '        emit OwnershipPushed( _owner, address(0) );\n', '        _owner = address(0);\n', '    }\n', '\n', '    function pushManagement( address newOwner_ ) public virtual override onlyPolicy() {\n', '        require( newOwner_ != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipPushed( _owner, newOwner_ );\n', '        _newOwner = newOwner_;\n', '    }\n', '    \n', '    function pullManagement() public virtual override {\n', '        require( msg.sender == _newOwner, "Ownable: must be new owner to pull");\n', '        emit OwnershipPulled( _owner, _newOwner );\n', '        _owner = _newOwner;\n', '    }\n', '}\n', '\n', 'interface IMasterChef {\n', '    function pendingSushi(uint256 _pid, address _user) external view returns (uint256);\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '    function emergencyWithdraw(uint256 _pid) external;\n', '}\n', '\n', 'interface ISushiBar {\n', '    function enter(uint256 _amount) external;\n', '    function leave(uint256 _share) external;\n', '}\n', '\n', 'interface ITreasury {\n', '    function deposit( uint _amount, address _token, uint _profit ) external returns ( uint send_ );\n', '    function manage( address _token, uint _amount ) external;\n', '    function valueOf( address _token, uint _amount ) external view returns ( uint value_ );\n', '}\n', '\n', '/**\n', ' *  Contract deploys liquidity from treasury into the Onsen program,\n', ' *  earning $SUSHI that can be staked and/or deposited into the treasury.\n', ' */\n', '\n', 'contract OnsenAllocator is Ownable {\n', '    \n', '    /* ========== DEPENDENCIES ========== */\n', '    \n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '\n', '\n', '    /* ========== STATE VARIABLES ========== */\n', '\n', '    uint[] public pids; // Pool IDs\n', '    mapping( uint => address ) public pools; // Pool Addresses index by PID\n', '\n', '    address immutable sushi; // $SUSHI token\n', '    address immutable xSushi; // $xSUSHI token\n', '    \n', '    address immutable masterChef; // Onsen contract\n', '\n', '    address immutable treasury; // Olympus Treasury\n', '\n', '    uint public totalValueDeployed; // Total RFV deployed\n', '\n', '\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    constructor( \n', '        address _chef, \n', '        address _treasury, \n', '        address _sushi, \n', '        address _xSushi \n', '    ) {\n', '        require( _chef != address(0) );\n', '        masterChef = _chef;\n', '        require( _treasury != address(0) );\n', '        treasury = _treasury;\n', '        require( _sushi != address(0) );\n', '        sushi = _sushi;\n', '        require( _xSushi != address(0) );\n', '        xSushi = _xSushi;\n', '    }\n', '\n', '\n', '\n', '    /* ========== OPEN FUNCTIONS ========== */\n', '\n', '    /**\n', '     * @notice harvest Onsen rewards from all pools\n', '     * @param _stake bool\n', '     */\n', '    function harvest( bool _stake ) external {\n', '        for( uint i = 0; i < pids.length; i++ ) {\n', '            uint pid = pids[i];\n', '            if ( pid != 0 ) { // pid of 0 is invalid\n', '                IMasterChef( masterChef ).withdraw( pid, 0 ); // withdrawing 0 harvests rewards\n', '            }\n', '        }\n', '        enterSushiBar( _stake );\n', '    }\n', '\n', '\n', '\n', '    /* ========== INTERNAL FUNCTIONS ========== */\n', '\n', '    /**\n', '     * @notice stake sushi rewards if enter is true. return funds to treasury.\n', '     * @param _stake bool\n', '     */\n', '    function enterSushiBar( bool _stake ) internal {\n', '        uint balance = IERC20( sushi ).balanceOf( address(this) );\n', '        if ( balance > 0 ) {\n', '            if ( !_stake ) {\n', '                IERC20( sushi ).safeTransfer( treasury, balance ); // transfer sushi to treasury\n', '            } else {\n', '                IERC20( sushi ).approve( xSushi, balance );\n', '                ISushiBar( xSushi ).enter( balance ); // stake sushi\n', '\n', '                uint xBalance = IERC20( xSushi ).balanceOf( address(this) );\n', '                IERC20( xSushi ).safeTransfer( treasury, xBalance ); // transfer xSushi to treasury\n', '            }\n', '        }\n', '    }\n', '\n', '\n', '\n', '    /* ========== VIEW FUNCTIONS ========== */\n', '\n', '    /**\n', '     *  @notice pending $SUSHI rewards\n', '     *  @return uint\n', '     */\n', '    function pendingSushi() external view returns ( uint ) {\n', '        uint pending;\n', '        for ( uint i = 0; i < pids.length; i++ ) {\n', '            uint pid = pids[i];\n', '            if ( pid != 0 ) {\n', '                pending = pending.add( IMasterChef( masterChef ).pendingSushi( pid, address(this) ) );\n', '            }\n', '        }\n', '        return pending;\n', '    }\n', '\n', '\n', '\n', '    /* ========== POLICY FUNCTIONS ========== */\n', '\n', '    /**\n', '     * @notice deposit LP from treasury to Onsen and collect rewards\n', '     * @param _amount uint\n', '     * @param _stake bool\n', '     */\n', '    function deposit( uint _pid, uint _amount, bool _stake ) external onlyPolicy() {\n', '        address LP = pools[ _pid ];\n', '        require( LP != address(0) );\n', '\n', '        ITreasury( treasury ).manage( LP, _amount ); // retrieve LP from treasury\n', '        \n', '        IERC20( LP ).approve( masterChef, _amount );\n', '        IMasterChef( masterChef ).deposit( _pid, _amount ); // deposit into Onsen\n', '\n', '        uint value = ITreasury( treasury ).valueOf( LP, _amount );\n', '        totalValueDeployed = totalValueDeployed.add( value ); // add to deployed value tracker\n', '        \n', '        enterSushiBar( _stake ); // manage rewards \n', '    }\n', '\n', '    /**\n', '     * @notice collect rewards and withdraw LP from Onsen and return to treasury.\n', '     * @param _amount uint\n', '     * @param _stake bool\n', '     */\n', '    function withdraw( uint _pid, uint _amount, bool _stake ) external onlyPolicy() {\n', '        address LP = pools[ _pid ];\n', '        require( LP != address(0) );\n', '\n', '        IMasterChef( masterChef ).withdraw( _pid, _amount ); // withdraw from Onsen\n', '\n', '        uint value = ITreasury( treasury ).valueOf( LP, _amount );\n', '        // remove from deployed value tracker\n', '        if ( value < totalValueDeployed ) {\n', '            totalValueDeployed = totalValueDeployed.sub( value ); \n', '        } else { // LP value grows from fees and may exceed total deployed\n', '            totalValueDeployed = 0;\n', '        }\n', '        \n', '        // approve and deposit LP into treasury\n', '        IERC20( LP ).approve( treasury, _amount );\n', '        // use value for profit so that no OHM is minted\n', '        ITreasury( treasury ).deposit( _amount, LP, value );\n', '        \n', '        enterSushiBar( _stake ); // manage rewards\n', '    }\n', '\n', '    /**\n', '     * @notice withdraw Sushi from treasury and stake to xSushi\n', '     * @param _amount uint\n', '     */\n', '    function enterSushiBarFromTreasury( uint _amount ) external onlyPolicy() {\n', '        ITreasury( treasury ).manage( sushi, _amount ); // retrieve $SUSHI from treasury\n', '        \n', '        enterSushiBar( true ); // stake $SUSHI\n', '    }\n', '    \n', '    /**\n', '     * @notice withdraw xSushi from treasury and unstake to sushi\n', '     * @param _amount uint\n', '     */\n', '    function exitSushiBar( uint _amount ) external onlyPolicy() {\n', '        ITreasury( treasury ).manage( xSushi, _amount ); // retrieve $xSUSHI from treasury\n', '        \n', '        ISushiBar( xSushi ).leave( _amount ); // unstake $xSUSHI\n', '        \n', '        IERC20( sushi ).safeTransfer( treasury, IERC20( sushi ).balanceOf( address(this) ) ); // return $SUSHI to treasury\n', '    }\n', '\n', '    /**\n', '     *  @notice add new PID and corresponding liquidity pool\n', '     *  @param _pool address\n', '     *  @param _pid uint\n', '     */\n', '    function addPool( address _pool, uint _pid ) external onlyPolicy() {\n', '        require( _pool != address(0) );\n', '        require( pools[ _pid ] == address(0) );\n', '\n', '        pids.push( _pid );\n', '        pools[ _pid ] = _pool;\n', '    }\n', '\n', '    /**\n', '     *  @notice remove liquidity pool and corresponding PID\n', '     *  @param _pool address\n', '     *  @param _index uint\n', '     */\n', '    function removePool( address _pool, uint _index ) external onlyPolicy() {\n', '        uint pid = pids[_index];\n', '        require( pools[ pid ] == _pool );\n', '\n', '        pids[ _index ] = 0;\n', '        pools[ pid ] = address(0);\n', '    }\n', '\n', '    /**\n', '     *  @notice withdraw liquidity without regard for rewards\n', '     *  @param _pid uint\n', '     */\n', '    function emergencyWithdraw( uint _pid ) external onlyPolicy() {\n', '        address LP = pools[ _pid ];\n', '\n', '        IMasterChef( masterChef ).emergencyWithdraw( _pid ); // withdraws LP without returning rewards\n', '\n', '        uint balance = IERC20( LP ).balanceOf( address(this) );\n', '        uint value = ITreasury( treasury ).valueOf( LP, balance );\n', '        if ( value < totalValueDeployed ) {\n', '            totalValueDeployed = totalValueDeployed.sub( value ); // remove from value deployed tracker\n', '        } else { // value increases with fees and would otherwise cause underflow\n', '            totalValueDeployed = 0;\n', '        }\n', '\n', '        // approve and deposit LP into treasury\n', '        IERC20( LP ).approve( treasury, balance );\n', '        // use value for profit so that no OHM is minted\n', '        ITreasury( treasury ).deposit( balance, LP, value ); \n', '    }\n', '}']