['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'contract State {\n', '\n', '    mapping (address => uint256) _largeBalances;\n', '    mapping (address => mapping (address => uint256)) _allowances;\n', '\n', '    // Supported pools and data for measuring mint & burn factors\n', '    struct PoolCounter {\n', '        address pairToken;\n', '        uint256 tokenBalance;\n', '        uint256 pairTokenBalance;\n', '        uint256 lpBalance;\n', '        uint256 startTokenBalance;\n', '        uint256 startPairTokenBalance;\n', '    }\n', '    address[] _supportedPools;\n', '    mapping (address => PoolCounter) _poolCounters;\n', '    mapping (address => bool) _isSupportedPool;\n', '    address _mainPool;\n', '\n', '    uint256 _currentEpoch;\n', '    \n', '    //Creating locked balances\n', '    struct LockBox {\n', '        address beneficiary;\n', '        uint256 lockedBalance;\n', '        uint256 unlockTime;\n', '        bool locked;\n', '    }\n', '    LockBox[] _lockBoxes;\n', '    mapping(address => uint256) _lockedBalance;\n', '    mapping(address => bool) _hasLockedBalance;\n', '    uint256 _totalLockedBalance;\n', ' \n', '    uint256 _largeTotal;\n', '    uint256 _totalSupply;\n', '\n', '    address _liquidityReserve;\n', '    address _stabilizer;\n', '\n', '    bool _presaleDone;\n', '    address _presaleCon;\n', '    \n', '    bool _paused;\n', '    \n', '    bool _taxLess;\n', '    mapping(address=>bool) _isTaxlessSetter;\n', '}\n', '\n', '\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'library Constants {\n', '    uint256 private constant MAX = ~uint256(0);\n', '    uint8 private constant _decimals = 18;\n', '\n', '    uint256 private constant _launchSupply = 9500 * 10 ** uint256(_decimals);\n', '    uint256 private constant _largeTotal = (MAX - (MAX % _launchSupply));\n', '\n', '    uint256 private constant _baseExpansionFactor = 100;\n', '    uint256 private constant _baseContractionFactor = 100;\n', '    uint256 private constant _incentivePot = 50;\n', '    uint256 private constant _baseUtilityFee = 50;\n', '    uint256 private constant _baseContractionCap = 1000;\n', '\n', '    uint256 private constant _stabilizerFee = 250;\n', '    uint256 private constant _stabilizationLowerBound = 50;\n', '    uint256 private constant _stabilizationLowerReset = 75;\n', '    uint256 private constant _stabilizationUpperBound = 150;\n', '    uint256 private constant _stabilizationUpperReset = 125;\n', '    uint256 private constant _stabilizePercent = 10;\n', '\n', '    uint256 private constant _treasuryFee = 250;\n', '\n', '    uint256 private constant _epochLength = 4 hours;\n', '\n', '    uint256 private constant _liquidityReward = 25 * 10**uint256(_decimals);\n', '    uint256 private constant _minForLiquidity = 500 * 10**uint256(_decimals);\n', '    uint256 private constant _minForCallerLiquidity = 500 * 10**uint256(_decimals);\n', '\n', '    address private constant _routerAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant _factoryAddress = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\n', '    string private constant _name = "gxs-protocol.net";\n', '    string private constant _symbol = "GXS";\n', '\n', '    /****** Getters *******/\n', '    function getLaunchSupply() internal pure returns (uint256) {\n', '        return _launchSupply;\n', '    }\n', '    function getLargeTotal() internal pure returns (uint256) {\n', '        return _largeTotal;\n', '    }\n', '    function getBaseExpansionFactor() internal pure returns (uint256) {\n', '        return _baseExpansionFactor;\n', '    }\n', '    function getBaseContractionFactor() internal pure returns (uint256) {\n', '        return _baseContractionFactor;\n', '    }\n', '    function getIncentivePot() internal pure returns (uint256) {\n', '        return _incentivePot;\n', '    }\n', '    function getBaseContractionCap() internal pure returns (uint256) {\n', '        return _baseContractionCap;\n', '    }\n', '    function getBaseUtilityFee() internal pure returns (uint256) {\n', '        return _baseUtilityFee;\n', '    }\n', '    function getStabilizerFee() internal pure returns (uint256) {\n', '        return _stabilizerFee;\n', '    }\n', '    function getStabilizationLowerBound() internal pure returns (uint256) {\n', '        return _stabilizationLowerBound;\n', '    }\n', '    function getStabilizationLowerReset() internal pure returns (uint256) {\n', '        return _stabilizationLowerReset;\n', '    }\n', '    function getStabilizationUpperBound() internal pure returns (uint256) {\n', '        return _stabilizationUpperBound;\n', '    }\n', '    function getStabilizationUpperReset() internal pure returns (uint256) {\n', '        return _stabilizationUpperReset;\n', '    }\n', '    function getStabilizePercent() internal pure returns (uint256) {\n', '        return _stabilizePercent;\n', '    }\n', '    function getTreasuryFee() internal pure returns (uint256) {\n', '        return _treasuryFee;\n', '    }\n', '    function getEpochLength() internal pure returns (uint256) {\n', '        return _epochLength;\n', '    }\n', '    function getLiquidityReward() internal pure returns (uint256) {\n', '        return _liquidityReward;\n', '    }\n', '    function getMinForLiquidity() internal pure returns (uint256) {\n', '        return _minForLiquidity;\n', '    }\n', '    function getMinForCallerLiquidity() internal pure returns (uint256) {\n', '        return _minForCallerLiquidity;\n', '    }\n', '    function getRouterAdd() internal pure returns (address) {\n', '        return _routerAddress;\n', '    }\n', '    function getFactoryAdd() internal pure returns (address) {\n', '        return _factoryAddress;\n', '    }\n', '    function getName() internal pure returns (string memory)  {\n', '        return _name;\n', '    }\n', '    function getSymbol() internal pure returns (string memory) {\n', '        return _symbol;\n', '    }\n', '    function getDecimals() internal pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract Getters is State {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '    function getPoolCounters(address pool) public view returns (address, uint256, uint256, uint256, uint256, uint256) {\n', '        PoolCounter memory pc = _poolCounters[pool];\n', '        return (pc.pairToken, pc.tokenBalance, pc.pairTokenBalance, pc.lpBalance, pc.startTokenBalance, pc.startPairTokenBalance);\n', '    }\n', '    function isTaxlessSetter(address account) public view returns (bool) {\n', '        return _isTaxlessSetter[account];\n', '    }\n', '    function getUniswapRouter() public view returns (IUniswapV2Router02) {\n', '        return IUniswapV2Router02(Constants.getRouterAdd());\n', '    }\n', '    function getUniswapFactory() public view returns (IUniswapV2Factory) {\n', '        return IUniswapV2Factory(Constants.getFactoryAdd());\n', '    }\n', '    function getFactor() public view returns(uint256) {\n', '        if (_presaleDone) {\n', '            return _largeTotal.div(_totalSupply);\n', '        } else {\n', '            return _largeTotal.div(Constants.getLaunchSupply());\n', '        }\n', '    }\n', '    function getUpdatedPoolCounters(address pool, address pairToken) public view returns (uint256, uint256, uint256) {\n', '        uint256 lpBalance = IERC20(pool).totalSupply();\n', '        uint256 tokenBalance = IERC20(address(this)).balanceOf(pool);\n', '        uint256 pairTokenBalance = IERC20(address(pairToken)).balanceOf(pool);\n', '        return (tokenBalance, pairTokenBalance, lpBalance);\n', '    }\n', '    function getMintValue(address sender, uint256 amount) internal view returns(uint256, uint256, uint256) {\n', '        uint256 mintAmount = amount.mul(1).div(100);\n', '        return (0,0,mintAmount);\n', '    }\n', '\n', '    function getBurnValues(address recipient, uint256 amount) internal view returns(uint256, uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 burnAmount = amount.mul(5).div(1000);\n', '        return (burnAmount, burnAmount.mul(currentFactor));\n', '    }\n', '\n', '    function getUtilityFee(uint256 amount) internal view returns(uint256, uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 utilityFee = amount.mul(5).div(100);\n', '        return (utilityFee, utilityFee.mul(currentFactor));\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = msg.sender;\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract Setters is State, Getters {\n', '    function updatePresaleAddress(address presaleAddress) internal {\n', '        _presaleCon = presaleAddress;\n', '    }\n', '    function setAllowances(address owner, address spender, uint256 amount) internal {\n', '        _allowances[owner][spender] = amount;\n', '    }\n', '    function addToAccount(address account, uint256 amount) internal {\n', '        uint256 currentFactor = getFactor();\n', '        uint256 largeAmount = amount.mul(currentFactor);\n', '        _largeBalances[account] = _largeBalances[account].add(largeAmount);\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function addToAll(uint256 amount) internal {\n', '        _totalSupply = _totalSupply.add(amount);\n', '    }\n', '    function initializeEpoch() internal {\n', '        _currentEpoch = now;\n', '    }\n', '    function updateEpoch() internal {\n', '        initializeEpoch();\n', '        for (uint256 i=0; i<_supportedPools.length; i++) {\n', '            _poolCounters[_supportedPools[i]].startTokenBalance = _poolCounters[_supportedPools[i]].tokenBalance;\n', '            _poolCounters[_supportedPools[i]].startPairTokenBalance = _poolCounters[_supportedPools[i]].pairTokenBalance;\n', '        }\n', '    }\n', '    function initializeLargeTotal() internal {\n', '        _largeTotal = Constants.getLargeTotal();\n', '    }\n', '    function syncPair(address pool) internal returns(bool) {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        bool lpBurn = lpBalance < _poolCounters[pool].lpBalance;\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '        return (lpBurn);\n', '    }\n', '    function silentSyncPair(address pool) public {\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, _poolCounters[pool].pairToken);\n', '        _poolCounters[pool].lpBalance = lpBalance;\n', '        _poolCounters[pool].tokenBalance = tokenBalance;\n', '        _poolCounters[pool].pairTokenBalance = pairTokenBalance;\n', '    }\n', '    function addSupportedPool(address pool, address pairToken) internal {\n', '        require(!_isSupportedPool[pool],"This pool is already supported");\n', '        _isSupportedPool[pool] = true;\n', '        _supportedPools.push(pool);\n', '        (uint256 tokenBalance, uint256 pairTokenBalance, uint256 lpBalance) = getUpdatedPoolCounters(pool, pairToken);\n', '        _poolCounters[pool] = PoolCounter(pairToken, tokenBalance, pairTokenBalance, lpBalance, tokenBalance, pairTokenBalance);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', 'library UniswapV2Library {\n', '    using SafeMathUpgradeable for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '}\n', '\n', 'contract GXS is Setters, Initializable, IERC20Upgradeable, OwnableUpgradeable {\n', '    using SafeMathUpgradeable for uint256;\n', '    using AddressUpgradeable for address;\n', '    \n', '    mapping(address => uint256) public refunds;\n', '    mapping(address => bool) public whitelist;\n', '    mapping(address => uint256) public bots;\n', '\n', '    \n', '    uint256 public refundCooldown = 5 minutes;\n', '    uint256 public minEthThreshold = 0.3 ether;\n', '    uint256 public gasPrice = 100e9;\n', '    uint256 public refundFrac = 50;\n', '    uint256 public minRefund = 0.001 ether;\n', '    uint256 public maxRefund = 0.025 ether;\n', '    uint256 public gasRefund = 0.025 ether;\n', '    uint256 public lastFund = 0;\n', '    uint256 public fundCooldown = 5 minutes;\n', '    uint256 public minFundThreshold = 0;\n', '    uint256 public holdLimit = 200 * 10 ** 18;\n', '    uint256 public botCount = 5;\n', '    uint256 public botDelay = 45 minutes;\n', '    bool public limitHold = true;\n', '    bool public delayQuick = true;\n', '    bool public delayWhitelist = true;\n', '    \n', '\n', '    address public uniswapPair;\n', '    // address public stub;\n', '\n', '    bool public isThisToken0;\n', '\n', '    /// @notice last TWAP update time\n', '    uint32 public blockTimestampLast;\n', '\n', '    /// @notice last TWAP cumulative price\n', '    uint256 public priceCumulativeLast;\n', '\n', '    /// @notice last TWAP average price\n', '    uint256 public priceAverageLast;\n', '\n', '    /// @notice TWAP min delta (10-min)\n', '    uint256 public minDeltaTwap;\n', '    \n', '    bool private _inInternalSell = false;\n', '\n', '    event TwapUpdated(uint256 priceCumulativeLast, uint256 blockTimestampLast, uint256 priceAverageLast);\n', '    event GasRefunded(address to, uint256 amount);\n', '\n', '    modifier setInternalSell {\n', '        _inInternalSell = true;\n', '        _;\n', '        _inInternalSell = false;\n', '    }\n', '\n', '    modifier onlyTaxless {\n', '        require(isTaxlessSetter(msg.sender),"not taxless");\n', '        _;\n', '    }\n', '    modifier onlyPresale {\n', '        require(msg.sender==_presaleCon,"not presale");\n', '        require(!_presaleDone, "Presale over");\n', '        _;\n', '    }\n', '    modifier pausable {\n', '        require(!_paused, "Paused");\n', '        _;\n', '    }\n', '    modifier taxlessTx {\n', '        _taxLess = true;\n', '        _;\n', '        _taxLess = false;\n', '    }\n', '\n', '\n', '    function name() public view returns (string memory) {\n', '        return Constants.getName();\n', '    }\n', '    \n', '    function symbol() public view returns (string memory) {\n', '        return Constants.getSymbol();\n', '    }\n', '    \n', '    function decimals() public view returns (uint8) {\n', '        return Constants.getDecimals();\n', '    }\n', '    \n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '    \n', '    function circulatingSupply() public view returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        return _totalSupply.sub(_totalLockedBalance.div(currentFactor)).sub(balanceOf(address(this))).sub(balanceOf(_stabilizer));\n', '    }\n', '    \n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        if (_hasLockedBalance[account]) return (_largeBalances[account].add(_lockedBalance[account]).div(currentFactor));\n', '        return _largeBalances[account].div(currentFactor);\n', '    }\n', '    \n', '    function unlockedBalanceOf(address account) public view returns (uint256) {\n', '        uint256 currentFactor = getFactor();\n', '        return _largeBalances[account].div(currentFactor); \n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function mint(address to, uint256 amount) public onlyPresale {\n', '        addToAccount(to,amount);\n', '        emit Transfer(address(0),to,amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '        setAllowances(owner, spender, amount);\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) private {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Amount must be greater than zero");\n', '        require(amount <= balanceOf(sender),"Amount exceeds balance");\n', '        require(amount <= unlockedBalanceOf(sender),"Amount exceeds unlocked balance");\n', '        require(_presaleDone,"Presale yet to close");\n', '        uint256 startGas = gasleft();\n', '        bool takeFunds = owner() != sender && owner() != recipient && !_inInternalSell;\n', '        bool funded = false;\n', '        \n', '        if (blockTimestampLast == 0 && balanceOf(uniswapPair) > 0) {\n', '            initializeTwap();\n', '        }\n', '        \n', '        if (delayWhitelist && whitelist[sender]) {\n', "            revert('GXS: hold');\n", '        }\n', '        \n', '        if (sender == address(this)) {\n', '            basicTransfer(sender,recipient,amount);\n', '            return;\n', '        }\n', '        \n', '        if (delayQuick) {\n', '            if (sender == uniswapPair) {\n', '               if (botCount > 0) {\n', '                   botCount -= 1;\n', '                   bots[recipient] = block.timestamp;\n', '               }\n', '                \n', '            } else if (recipient == uniswapPair && block.timestamp - bots[sender] < botDelay) {\n', "                revert('GXS: too quick');\n", '            }\n', '        }\n', '        \n', '        if (limitHold && uniswapPair == sender) {\n', '            if (balanceOf(recipient) + amount > holdLimit) {\n', "                revert('GXS: too much');\n", '            }\n', '        }\n', '        \n', '        if (!_inInternalSell && sender != uniswapPair && now - lastFund > fundCooldown && balanceOf(_stabilizer) > minFundThreshold) {\n', '            lastFund = now;\n', '            funded = true;\n', '            fundTreasury();\n', '        }\n', '        \n', '        if (now > _currentEpoch.add(Constants.getEpochLength())) updateEpoch();\n', '        uint256 currentFactor = getFactor();\n', '        uint256 txType;\n', '        if (_taxLess || sender == owner()) {\n', '            txType = 3;\n', '        } else {\n', '            bool lpBurn;\n', '            if (_isSupportedPool[sender]) {\n', '                lpBurn = syncPair(sender);\n', '            } else if (_isSupportedPool[recipient]){\n', '                silentSyncPair(recipient);\n', '            } else {\n', '                silentSyncPair(_mainPool);\n', '            }\n', '            txType = _getTxType(sender, recipient, lpBurn);\n', '        }\n', '\n', '        // Buy Transaction from supported pools - requires mint, no utility fee\n', '        if (txType == 1) {\n', '            (uint256 stabilizerMint, uint256 treasuryMint, uint256 totalMint) = getMintValue(sender, amount);\n', '            uint256 treasuryFee = amount.mul(4).div(100);\n', '            uint256 actualTransferAmount = amount.sub(treasuryFee);\n', '\n', '            basicTransfer(sender, recipient, actualTransferAmount);\n', '            \n', '            treasuryFee = treasuryFee.add(stabilizerMint).add(treasuryMint);\n', '            _largeBalances[_stabilizer] = _largeBalances[_stabilizer].add(treasuryFee.mul(currentFactor));\n', '            _totalSupply = _totalSupply.add(totalMint);\n', '            emit Transfer(sender, recipient, actualTransferAmount);\n', '            emit Transfer(address(0),_stabilizer,treasuryFee);\n', '        }\n', '        // Sells to supported pools or unsupported transfer - requires exit burn and utility fee\n', '        else if (txType == 2) {\n', '            (uint256 burnSize, uint256 largeBurnSize) = getBurnValues(recipient, amount);\n', '            (uint256 utilityFee, uint256 largeUtilityFee) = getUtilityFee(amount);\n', '            uint256 actualTransferAmount = amount.sub(burnSize).sub(utilityFee);\n', '            basicTransfer(sender, recipient, actualTransferAmount);\n', '            _largeBalances[_stabilizer] = _largeBalances[_stabilizer].add(largeUtilityFee);\n', '            _totalSupply = _totalSupply.sub(burnSize);\n', '            _largeTotal = _largeTotal.sub(largeBurnSize);\n', '            emit Transfer(sender, recipient, actualTransferAmount);\n', '            emit Transfer(sender, address(0), burnSize);\n', '        } \n', '        // Add Liquidity via interface or Remove Liquidity Transaction to supported pools - no fee of any sort\n', '        else if (txType == 3) {\n', '            basicTransfer(sender, recipient, amount);\n', '            emit Transfer(sender, recipient, amount);\n', '        }\n', '        \n', '        if (!_inInternalSell && owner() != sender && !funded) {\n', '            if (shouldRefundGas(sender, recipient, amount)) {\n', '                uint256 gasUsed = startGas.sub(gasleft());\n', '                refundGas(gasUsed);\n', '            }\n', '            \n', '            _updateTwap();\n', '        }\n', '    }\n', '\n', '    function _getTxType(address sender, address recipient, bool lpBurn) private returns(uint256) {\n', '        uint256 txType = 2;\n', '        if (_isSupportedPool[sender]) {\n', '            if (lpBurn) {\n', '                txType = 3;\n', '            } else {\n', '                txType = 1;\n', '            }\n', '        } else if (sender == Constants.getRouterAdd()) {\n', '            txType = 3;\n', '        }\n', '        return txType;\n', '    }\n', '\n', '    function setPresale(address presaleAdd) public onlyOwner() {\n', '        require(!_presaleDone, "Presale is already completed");\n', '        updatePresaleAddress(presaleAdd);\n', '    }\n', '    function setDelayQuicksell(bool flag) external onlyOwner() {\n', '        delayQuick = flag;\n', '    }\n', '    function setDelayWhitelist(bool flag) external onlyOwner() {\n', '        delayWhitelist = flag;\n', '    }\n', '    function setLimitHold(bool flag) external onlyOwner() {\n', '        limitHold = flag;\n', '    }\n', '    function setRefundPolicy(\n', '    uint256 _minEth, \n', '    uint256 _gasPrice,\n', '    uint256 _refundFrac,\n', '    uint256 _minRefund,\n', '    uint256 _maxRefund,\n', '    uint256 _gasRefund) external onlyOwner() {\n', '         minEthThreshold = _minEth;\n', '         gasPrice = _gasPrice;\n', '         refundFrac = _refundFrac;\n', '         minRefund = _minRefund;\n', '         maxRefund = _maxRefund;\n', '         gasRefund = _gasRefund;\n', '    }\n', '\n', '    function setPresaleDone() public payable onlyPresale {\n', '        require(!_presaleDone);\n', '        _presaleDone = true;\n', '        createEthPool();\n', '    }\n', '\n', '    function createEthPool() private onlyOwner() taxlessTx {\n', '        IUniswapV2Router02 uniswapRouterV2 = getUniswapRouter();\n', '        IUniswapV2Factory uniswapFactory = getUniswapFactory();\n', '        address tokenUniswapPair;\n', '        if (uniswapFactory.getPair(address(uniswapRouterV2.WETH()), address(this)) == address(0)) {\n', '            tokenUniswapPair = uniswapFactory.createPair(\n', '            address(uniswapRouterV2.WETH()), address(this));\n', '        } else {\n', '            tokenUniswapPair = uniswapFactory.getPair(address(this),uniswapRouterV2.WETH());\n', '        }\n', '        _approve(msg.sender, address(uniswapRouterV2), ~uint256(0));\n', '        \n', '        addSupportedPool(tokenUniswapPair, address(uniswapRouterV2.WETH()));\n', '        _mainPool = tokenUniswapPair;\n', '    }\n', '\n', '    function setTaxlessSetter(address cont) external onlyOwner() {\n', '        require(!isTaxlessSetter(cont),"already setter");\n', '        _isTaxlessSetter[cont] = true;\n', '    }\n', '\n', '    function setTaxless(bool flag) public onlyTaxless {\n', '        _taxLess = flag;\n', '    }\n', '\n', '    function removeTaxlessSetter(address cont) external onlyOwner() {\n', '        require(isTaxlessSetter(cont),"not setter");\n', '        _isTaxlessSetter[cont] = false;\n', '    }\n', '\n', '\n', '    function setStabilizer(address reserve) external onlyOwner() taxlessTx {\n', '        _isTaxlessSetter[_stabilizer] = false;\n', '        uint256 oldBalance = balanceOf(_stabilizer);\n', '        if (oldBalance > 0) {\n', '            _transfer(_stabilizer, reserve, oldBalance);\n', '            emit Transfer(_stabilizer, reserve, oldBalance);\n', '        }\n', '        _stabilizer = reserve;\n', '        _isTaxlessSetter[reserve] = true;\n', '        _approve(_stabilizer, address(this), ~uint256(0));\n', '    }\n', '\n', '    \n', '    /**\n', '     * @dev Min time elapsed before twap is updated.\n', '     */\n', '    function setMinDeltaTwap(uint256 _minDeltaTwap) public onlyOwner {\n', '        minDeltaTwap = _minDeltaTwap;\n', '    }\n', '\n', '    /**\n', '     * @dev Initializes the TWAP cumulative values for the burn curve.\n', '     */\n', '    function initializeTwap() public {\n', '        require(blockTimestampLast == 0, "twap already initialized");\n', '        require(balanceOf(uniswapPair) > 0);\n', '        (uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = \n', '            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '\n', '        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\n', '        \n', '        blockTimestampLast = blockTimestamp;\n', '        priceCumulativeLast = priceCumulative;\n', '    }\n', '\n', '    function _initializePair() internal {\n', '        (address token0, address token1) = UniswapV2Library.sortTokens(address(this), address(getUniswapRouter().WETH()));\n', '        isThisToken0 = (token0 == address(this));\n', '        uniswapPair = UniswapV2Library.pairFor(address(getUniswapFactory()), token0, token1);\n', '    }\n', '    \n', '    \n', '    function _updateTwap() internal virtual returns (uint256) {\n', '        if (blockTimestampLast == 0 && balanceOf(uniswapPair) == 0) {\n', '            // we are not initialized yet\n', '            return 0;\n', '        }\n', '\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \n', '            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        if (timeElapsed > minDeltaTwap) {\n', '            uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\n', '\n', '            // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '            FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '                uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '            );\n', '\n', '            priceCumulativeLast = priceCumulative;\n', '            blockTimestampLast = blockTimestamp;\n', '\n', '            priceAverageLast = FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\n', '\n', '            emit TwapUpdated(priceCumulativeLast, blockTimestampLast, priceAverageLast);\n', '        }\n', '\n', '        return priceAverageLast;\n', '    }\n', '\n', '    function shouldRefundGas(address from, address to, uint256 amount) private view returns(bool) {\n', '        if (uniswapPair != from) {\n', '            return false;\n', '        }\n', '        \n', '        if (now - refunds[to] < refundCooldown) {\n', '            return false;\n', '        }\n', '        \n', '        uint256 currentPrice = getCurrentTwap();\n', '        uint256 ethVal = amount.mul(1 ether).div(currentPrice);\n', '        \n', '        if (ethVal < minEthThreshold) {\n', '            return false;\n', '        }\n', '        \n', '        return true;\n', '    }\n', '    \n', '    function refundGas(uint256 gasUsed) private setInternalSell {\n', '        uint256 refund = gasRefund;\n', '        if (address(this).balance < refund) {\n', '            refund = address(this).balance.div(10);\n', '        }\n', '        \n', '        if (refund > maxRefund) {\n', '            refund = maxRefund;\n', '        }\n', '        \n', '        if (refund < minRefund) {\n', '            return;\n', '        }\n', '        \n', '        tx.origin.transfer(refund);\n', '        refunds[tx.origin] = now;\n', '        \n', '        emit GasRefunded(tx.origin, refund);\n', '    }\n', '\n', '    function getCurrentTwap() public view returns (uint256) {\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = \n', '            UniswapV2OracleLibrary.currentCumulativePrices(uniswapPair);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '\n', '        uint256 priceCumulative = isThisToken0 ? price1Cumulative : price0Cumulative;\n', '\n', '        FixedPoint.uq112x112 memory priceAverage = FixedPoint.uq112x112(\n', '            uint224((priceCumulative - priceCumulativeLast) / timeElapsed)\n', '        );\n', '\n', '        return FixedPoint.decode144(FixedPoint.mul(priceAverage, 1 ether));\n', '    }\n', '\n', '    function getLastTwap() public view returns (uint256) {\n', '        return priceAverageLast;\n', '    }\n', '    \n', '    function basicTransfer(address from, address to, uint256 amount) private {\n', '        uint256 largeAmount = getFactor().mul(amount);\n', '        _largeBalances[from] = _largeBalances[from].sub(largeAmount);\n', '        _largeBalances[to] = _largeBalances[to].add(largeAmount);\n', '    }\n', '    \n', '    function fundTreasury() private setInternalSell {\n', '        address payable stab = payable(_stabilizer);\n', '        uint256 tokenAmount = balanceOf(stab);\n', '        if (tokenAmount == 0) {\n', '            return;\n', '        }\n', '        \n', '        basicTransfer(stab, address(this), tokenAmount);\n', '        \n', '        address[] memory path = new address[](2);\n', '        path[0] = address(this);\n', '        path[1] = getUniswapRouter().WETH();\n', '\n', '        getUniswapRouter().swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '            tokenAmount,\n', '            0, // accept any amount of ETH\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '        \n', '        uint256 treasuryFee = address(this).balance;\n', '        if (treasuryFee > 0 && stab != address(0)) {\n', '            treasuryFee = treasuryFee.mul(7).div(10);\n', '            stab.transfer(treasuryFee);\n', '        }\n', '    }\n', '    \n', '    function multiTransfer(address[] memory addresses, uint256 amount) external {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            basicTransfer(msg.sender, addresses[i], amount);\n', '            emit Transfer(msg.sender, addresses[i], amount);\n', '        }\n', '    }\n', '\n', '    function multiWhitelistAdd(address[] memory addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = true;\n', '        }\n', '    }\n', '\n', '    function multiWhitelistRemove(address[] memory addresses) external onlyOwner {\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            whitelist[addresses[i]] = false;\n', '        }\n', '    }\n', '    \n', '    constructor() public {\n', '        __Ownable_init();\n', '        updateEpoch();\n', '        initializeLargeTotal();\n', '        setPresale(owner());\n', '        \n', '        _stabilizer = 0x9f8fEd32E39A957b8108480555839cB0e2C05d0E;\n', '        \n', '        setMinDeltaTwap(2 minutes);\n', '        _initializePair();\n', ' \n', '        // Skip uniswap approve\n', '        _approve(owner(), address(getUniswapRouter()), ~uint256(0));\n', '        _approve(address(this), address(getUniswapRouter()), ~uint256(0));\n', '\n', '        \n', '        // Allow this contract to handle stab\n', '        _approve(_stabilizer, address(this), ~uint256(0));\n', '        \n', '        uint256 tokens = Constants.getLaunchSupply();\n', '        addToAccount(msg.sender, tokens);\n', '        emit Transfer(address(0),msg.sender,tokens);\n', '    }\n', '    \n', '    receive() external payable {\n', '        \n', '    }\n', '}']