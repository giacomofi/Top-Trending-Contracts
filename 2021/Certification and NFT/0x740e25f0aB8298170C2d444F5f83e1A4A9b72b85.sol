['// SPDX-License-Identifier: MIT\n', '\n', '// Contract for an ENMT token (ERC20 compliant Non-Mintable Token). Fully compliant with the ERC20 specification.\n', '\n', '// TOKEN SPECIFICATIONS:\n', '// - Total supply set upon creation.\n', '// - No new tokens can ever be minted.\n', '// - Tokens can be burnt by any user to reduce total supply.\n', '// - Fully ERC20 compliant.\n', '// - This token has no owner, no admin functions, and is fully decentralised.\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20.sol";\n', '\n', '// A fully ERC20 Compliant Non Mintable Token (ENMT)\n', 'contract ENMT is ERC20 {\n', '    \n', '    // Defines how to read the TokenInfo ABI, as well as the capabilities of the token\n', '    uint256 public TOKEN_TYPE = 1;\n', '    \n', '    struct TokenInfo {\n', '        uint8 decimals;\n', '        address creator;\n', '    }\n', '    \n', '    TokenInfo public INFO;\n', '    \n', '    constructor(string memory _name, string memory _symbol, uint8 _decimals, address _creator, uint256 _totalSupply) ERC20(_name, _symbol) {\n', '        _mint(msg.sender, _totalSupply);\n', '        INFO = TokenInfo(_decimals, _creator);\n', '    }\n', '    \n', '    function decimals() public view virtual override returns (uint8) {\n', '        return INFO.decimals;\n', '    }\n', '\n', '    function burn(uint256 amount) public virtual {\n', '        _burn(_msgSender(), amount);\n', '    }\n', '    \n', '}']