['pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'import "./interfaces/IDDP.sol";\n', 'import "./interfaces/IAllowList.sol";\n', 'import "./interfaces/ISecurityAssetToken.sol";\n', 'import "./OperatorVote.sol";\n', 'import "./templates/Initializable.sol";\n', '\n', '\n', 'contract MultiSignature is OperatorVote, Initializable {\n', '    /// KYC address list\n', '    address private _allowList;\n', '    /// DDP contract address\n', '    address private _ddp;\n', '    /// Security Asset token contract address\n', '    address private _sat;\n', '\n', '    constructor (\n', '        address[] memory founders,\n', '        uint256 votesThreshold\n', '        ) public OperatorVote(founders, votesThreshold)\n', '    {\n', '    }\n', '\n', '    function configure(\n', '        address allowList,\n', '        address ddp,\n', '        address sat\n', '    ) external initializer\n', '    {\n', '        _allowList = allowList;\n', '        _ddp = ddp;\n', '        _sat = sat;\n', '    }\n', '\n', '    function allowAccount (address account) external onlyOperator {\n', '        IAllowListChange(_allowList).allowAccount(account);\n', '    }\n', '\n', '    function disallowAccount(address account) external onlyOperator {\n', '        IAllowListChange(_allowList).disallowAccount(account);\n', '    }\n', '\n', '    function mintSecurityAssetToken(\n', '        address to,\n', '        uint256 value,\n', '        uint256 maturity) external onlyOperator\n', '    {\n', '        ISecurityAssetToken(_sat).mint(to, value, maturity);\n', '    }\n', '\n', '    function burnSecurityAssetToken(uint256 tokenId) external onlyOperator {\n', '        ISecurityAssetToken(_sat).burn(tokenId);\n', '    }\n', '\n', '    function transferSecurityAssetToken(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId) external onlyOperator\n', '    {\n', '        ISecurityAssetToken(_sat).transferFrom(from, to, tokenId);\n', '    }\n', '\n', '    function setClaimPeriod(uint256 claimPeriod) external onlyOperator {\n', '        IDDP(_ddp).setClaimPeriod(claimPeriod);\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'import "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '\n', '/**\n', ' * @title OperatorVote contract\n', ' * @dev Vote for operator address\n', ' */\n', 'contract OperatorVote is Context {\n', '    event AddedFounders(address[] founders);\n', '    event OperatorChanged(address oldOperator, address newOperator);\n', '\n', '    address private _operator;\n', '    uint256 private _votesThreshold;\n', '\n', '    mapping(address => bool) private _founders;\n', '    mapping(address => address[]) private _candidates;\n', '\n', '    constructor(address[] memory founders, uint256 votesThreshold) public {\n', '        _votesThreshold = votesThreshold;\n', '\n', '        for (uint256 i = 0; i < founders.length; i++) {\n', '            _founders[founders[i]] = true;\n', '        }\n', '\n', '        address msgSender = _msgSender();\n', '        _operator = msgSender;\n', '\n', '        emit AddedFounders(founders);\n', '        emit OperatorChanged(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws out if the address is not the founder\n', '     */\n', '    modifier onlyFounders() {\n', '        require(_founders[_msgSender()], "user is not a founder");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the operator.\n', '     */\n', '    modifier onlyOperator() {\n', '        require(_msgSender() == _operator, "user is not the operator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the number of votes for the operator\n', '     * @param candidate address of operator candidate\n', '     * @return number of votes\n', '     */\n', '    function getNumberVotes(address candidate) external view returns (uint256) {\n', '        return _candidates[candidate].length;\n', '    }\n', '\n', '    /**\n', '     * @dev Get the vote number threshold\n', '     * @return votes threshold\n', '     */\n', '    function getThreshold() external view returns (uint256) {\n', '        return _votesThreshold;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns current operator address.\n', '     */\n', '    function getOperator() external view returns (address) {\n', '        return _operator;\n', '    }\n', '\n', '    /**\n', '     * @dev Operator vote\n', '     * @param candidate operator candidate address\n', '     */\n', '    function voteOperator(address candidate) external onlyFounders {\n', '        require(candidate != address(0), "candidate is the zero address");\n', '\n', '        address sender = _msgSender();\n', '\n', '        for (uint256 i = 0; i < _candidates[candidate].length; i++) {\n', '            require(\n', '                _candidates[candidate][i] != sender,\n', '                "you have already voted"\n', '            );\n', '        }\n', '\n', '        if ((_candidates[candidate].length + 1) >= _votesThreshold) {\n', '            delete _candidates[candidate];\n', '\n', '            _operator = candidate;\n', '            emit OperatorChanged(_operator, candidate);\n', '        } else {\n', '            _candidates[candidate].push(sender);\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface IAllowList {\n', '    function isAllowedAccount(address account) external view returns (bool);\n', '}\n', '\n', 'interface IAllowListChange {\n', '    function allowAccount(address account) external;\n', '\n', '    function disallowAccount(address account) external;\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'interface IDDP {\n', '    function deposit(\n', '        uint256 tokenId,\n', '        uint256 value,\n', '        uint256 maturity,\n', '        address to\n', '    ) external;\n', '\n', '    function setClaimPeriod(uint256 claimPeriod) external;\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title ISecurityAssetToken\n', ' * @dev SecurityAssetToken interface\n', ' */\n', 'interface ISecurityAssetToken {\n', '    function mint(\n', '        address to,\n', '        uint256 value,\n', '        uint256 maturity\n', '    ) external;\n', '\n', '    function burn(uint256 tokenId) external;\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '}\n', '\n', 'pragma solidity >=0.6.0 <0.7.0;\n', '\n', 'import "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '\n', '/**\n', ' * @title Initializable allows to create initializable contracts\n', ' * so that only deployer can initialize contract and only once\n', ' */\n', 'contract Initializable is Context {\n', '    bool private _isContractInitialized;\n', '    address private _deployer;\n', '\n', '    constructor() public {\n', '        _deployer = _msgSender();\n', '    }\n', '\n', '    modifier initializer {\n', '        require(_msgSender() == _deployer, "user not allowed to initialize");\n', '        require(!_isContractInitialized, "contract already initialized");\n', '        _;\n', '        _isContractInitialized = true;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}']