['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/root.sol\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity >=0.5.15 >=0.6.12;\n', '\n', '////// lib/tinlake-auth/src/auth.sol\n', '// Copyright (C) Centrifuge 2020, based on MakerDAO dss https://github.com/makerdao/dss\n', '/* pragma solidity >=0.5.15; */\n', '\n', 'contract Auth {\n', '    mapping (address => uint256) public wards;\n', '    \n', '    event Rely(address indexed usr);\n', '    event Deny(address indexed usr);\n', '\n', '    function rely(address usr) external auth {\n', '        wards[usr] = 1;\n', '        emit Rely(usr);\n', '    }\n', '    function deny(address usr) external auth {\n', '        wards[usr] = 0;\n', '        emit Deny(usr);\n', '    }\n', '\n', '    modifier auth {\n', '        require(wards[msg.sender] == 1, "not-authorized");\n', '        _;\n', '    }\n', '\n', '}\n', '\n', '////// src/root.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', '/* import "tinlake-auth/auth.sol"; */\n', '\n', 'interface AuthLike_3 {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface DependLike_3 {\n', '    function depend(bytes32, address) external;\n', '}\n', '\n', 'interface BorrowerDeployerLike {\n', '    function collector() external returns (address);\n', '    function feed() external returns (address);\n', '    function shelf() external returns (address);\n', '    function title() external returns (address);\n', '}\n', '\n', 'interface LenderDeployerLike_1 {\n', '    function assessor() external returns (address);\n', '    function reserve() external returns (address);\n', '    function poolAdmin() external returns (address);\n', '}\n', '\n', 'interface PoolAdminLike {\n', '    function rely(address) external;\n', '    function relyAdmin(address) external;\n', '}\n', '\n', 'contract TinlakeRoot is Auth {\n', '    BorrowerDeployerLike public borrowerDeployer;\n', '    LenderDeployerLike_1 public  lenderDeployer;\n', '\n', '    bool public             deployed;\n', '    address public          deployUsr;\n', '    address public          governance;\n', '\n', '    address public          oracle;\n', '    address[] public        poolAdmins;\n', '\n', '    constructor (address deployUsr_, address governance_) {\n', '        deployUsr = deployUsr_;\n', '        governance = governance_;\n', '        wards[governance] = 1;\n', '    }\n', '\n', '    // --- Prepare ---\n', '    // Sets the two deployer dependencies. This needs to be called by the deployUsr\n', '    function prepare(address lender_, address borrower_, address oracle_, address[] memory poolAdmins_) public {\n', '        require(deployUsr == msg.sender);\n', '        \n', '        borrowerDeployer = BorrowerDeployerLike(borrower_);\n', '        lenderDeployer = LenderDeployerLike_1(lender_);\n', '        oracle = oracle_;\n', '        poolAdmins = poolAdmins_;\n', '\n', '        deployUsr = address(0); // disallow the deploy user to call this more than once.\n', '    }\n', '\n', '    function prepare(address lender_, address borrower_) public {\n', '        prepare(lender_, borrower_, address(0), new address[](0));\n', '    }\n', '\n', '    // --- Deploy ---\n', '    // After going through the deploy process on the lender and borrower method, this method is called to connect\n', '    // lender and borrower contracts.\n', '    function deploy() public {\n', '        require(address(borrowerDeployer) != address(0) && address(lenderDeployer) != address(0) && deployed == false);\n', '        deployed = true;\n', '\n', '        address reserve_ = lenderDeployer.reserve();\n', '        address shelf_ = borrowerDeployer.shelf();\n', '\n', '        // Borrower depends\n', '        DependLike_3(borrowerDeployer.collector()).depend("reserve", reserve_);\n', '        DependLike_3(borrowerDeployer.shelf()).depend("lender", reserve_);\n', '        DependLike_3(borrowerDeployer.shelf()).depend("reserve", reserve_);\n', '\n', '        // Lender depends\n', '        address navFeed = borrowerDeployer.feed();\n', '\n', '        DependLike_3(reserve_).depend("shelf", shelf_);\n', '        DependLike_3(lenderDeployer.assessor()).depend("navFeed", navFeed);\n', '\n', '        // Lender wards\n', '        if (oracle != address(0)) AuthLike_3(navFeed).rely(oracle);\n', '\n', '        // directly relying governance so it can be used to directly add/remove pool admins without going through the root\n', '        PoolAdminLike poolAdmin = PoolAdminLike(lenderDeployer.poolAdmin());\n', '        PoolAdminLike(poolAdmin).rely(governance);\n', '\n', '        for (uint i = 0; i < poolAdmins.length; i++) {\n', '            PoolAdminLike(poolAdmin).relyAdmin(poolAdmins[i]);\n', '        }\n', '    }\n', '    \n', '    // --- Governance Functions ---\n', '    // `relyContract` & `denyContract` can be called by any ward on the TinlakeRoot\n', '    // contract to make an arbitrary address a ward on any contract the TinlakeRoot\n', '    // is a ward on.\n', '    function relyContract(address target, address usr) public auth {\n', '        AuthLike_3(target).rely(usr);\n', '    }\n', '\n', '    function denyContract(address target, address usr) public auth {\n', '        AuthLike_3(target).deny(usr);\n', '    }\n', '\n', '}']