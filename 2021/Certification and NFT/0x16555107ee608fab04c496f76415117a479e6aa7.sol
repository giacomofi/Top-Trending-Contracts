['/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-31\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', 'contract BIOPToken is ERC20 {\n', '    using SafeMath for uint256;\n', '    address public binaryOptions = 0x0000000000000000000000000000000000000000;\n', '    address public gov;\n', '    address public owner;\n', '    uint256 public earlyClaimsAvailable = 450000000000000000000000000000;\n', '    uint256 public totalClaimsAvailable = 750000000000000000000000000000;\n', '    bool public earlyClaims = true;\n', '    bool public binaryOptionsSet = false;\n', '\n', '    constructor(string memory name_, string memory symbol_) public ERC20(name_, symbol_) {\n', '      owner = msg.sender;\n', '    }\n', '    \n', '    modifier onlyBinaryOptions() {\n', '        require(binaryOptions == msg.sender, "Ownable: caller is not the Binary Options Contract");\n', '        _;\n', '    }\n', '    modifier onlyOwner() {\n', '        require(binaryOptions == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function updateEarlyClaim(uint256 amount) external onlyBinaryOptions {\n', '        require(totalClaimsAvailable.sub(amount) >= 0, "insufficent claims available");\n', '        if (earlyClaims) {\n', '            earlyClaimsAvailable = earlyClaimsAvailable.sub(amount);\n', '            _mint(tx.origin, amount);\n', '            if (earlyClaimsAvailable <= 0) {\n', '                earlyClaims = false;\n', '            }\n', '        } else {\n', '            updateClaim(amount.div(4));\n', '        }\n', '    }\n', '\n', '     function updateClaim( uint256 amount) internal {\n', '        require(totalClaimsAvailable.sub(amount) >= 0, "insufficent claims available");\n', '        totalClaimsAvailable.sub(amount);\n', '        _mint(tx.origin, amount);\n', '    }\n', '\n', '    function setupBinaryOptions(address payable options_) external {\n', '        require(binaryOptionsSet != true, "binary options is already set");\n', '        binaryOptions = options_;\n', '    }\n', '\n', '    function setupGovernance(address payable gov_) external onlyOwner {\n', '        _mint(owner, 100000000000000000000000000000);\n', '        _mint(gov_, 450000000000000000000000000000);\n', '        owner = 0x0000000000000000000000000000000000000000;\n', '    }\n', '}\n', '\n', '\n', ' /**\n', ' * @title Power function by Bancor\n', ' * @dev https://github.com/bancorprotocol/contracts\n', ' *\n', ' * Modified from the original by Slava Balasanov & Tarrence van As\n', ' *\n', ' * Split Power.sol out from BancorFormula.sol\n', ' * https://github.com/bancorprotocol/contracts/blob/c9adc95e82fdfb3a0ada102514beb8ae00147f5d/solidity/contracts/converter/BancorFormula.sol\n', ' *\n', ' * Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;\n', ' * and to You under the Apache License, Version 2.0. "\n', ' */\n', 'contract Power {\n', '    string public version = "0.3";\n', '\n', '    uint256 private constant ONE = 1;\n', '    uint32 private constant MAX_WEIGHT = 1000000;\n', '    uint8 private constant MIN_PRECISION = 32;\n', '    uint8 private constant MAX_PRECISION = 127;\n', '\n', '    /**\n', '      The values below depend on MAX_PRECISION. If you choose to change it:\n', "      Apply the same change in file 'PrintIntScalingFactors.py', run it and paste the results below.\n", '    */\n', '    uint256 private constant FIXED_1 = 0x080000000000000000000000000000000;\n', '    uint256 private constant FIXED_2 = 0x100000000000000000000000000000000;\n', '    uint256 private constant MAX_NUM = 0x200000000000000000000000000000000;\n', '\n', '    /**\n', "        Auto-generated via 'PrintLn2ScalingFactors.py'\n", '    */\n', '    uint256 private constant LN2_NUMERATOR   = 0x3f80fe03f80fe03f80fe03f80fe03f8;\n', '    uint256 private constant LN2_DENOMINATOR = 0x5b9de1d10bf4103d647b0955897ba80;\n', '\n', '    /**\n', "        Auto-generated via 'PrintFunctionOptimalLog.py' and 'PrintFunctionOptimalExp.py'\n", '    */\n', '    uint256 private constant OPT_LOG_MAX_VAL = 0x15bf0a8b1457695355fb8ac404e7a79e3;\n', '    uint256 private constant OPT_EXP_MAX_VAL = 0x800000000000000000000000000000000;\n', '\n', '    /**\n', '      The values below depend on MIN_PRECISION and MAX_PRECISION. If you choose to change either one of them:\n', "      Apply the same change in file 'PrintFunctionBancorFormula.py', run it and paste the results below.\n", '    */\n', '    uint256[128] private maxExpArray;\n', '\n', '    constructor() public {\n', '    //  maxExpArray[0] = 0x6bffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[1] = 0x67ffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[2] = 0x637fffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[3] = 0x5f6fffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[4] = 0x5b77ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[5] = 0x57b3ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[6] = 0x5419ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[7] = 0x50a2ffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[8] = 0x4d517fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[9] = 0x4a233fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[10] = 0x47165fffffffffffffffffffffffffffff;\n', '    //  maxExpArray[11] = 0x4429afffffffffffffffffffffffffffff;\n', '    //  maxExpArray[12] = 0x415bc7ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[13] = 0x3eab73ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[14] = 0x3c1771ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[15] = 0x399e96ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[16] = 0x373fc47fffffffffffffffffffffffffff;\n', '    //  maxExpArray[17] = 0x34f9e8ffffffffffffffffffffffffffff;\n', '    //  maxExpArray[18] = 0x32cbfd5fffffffffffffffffffffffffff;\n', '    //  maxExpArray[19] = 0x30b5057fffffffffffffffffffffffffff;\n', '    //  maxExpArray[20] = 0x2eb40f9fffffffffffffffffffffffffff;\n', '    //  maxExpArray[21] = 0x2cc8340fffffffffffffffffffffffffff;\n', '    //  maxExpArray[22] = 0x2af09481ffffffffffffffffffffffffff;\n', '    //  maxExpArray[23] = 0x292c5bddffffffffffffffffffffffffff;\n', '    //  maxExpArray[24] = 0x277abdcdffffffffffffffffffffffffff;\n', '    //  maxExpArray[25] = 0x25daf6657fffffffffffffffffffffffff;\n', '    //  maxExpArray[26] = 0x244c49c65fffffffffffffffffffffffff;\n', '    //  maxExpArray[27] = 0x22ce03cd5fffffffffffffffffffffffff;\n', '    //  maxExpArray[28] = 0x215f77c047ffffffffffffffffffffffff;\n', '    //  maxExpArray[29] = 0x1fffffffffffffffffffffffffffffffff;\n', '    //  maxExpArray[30] = 0x1eaefdbdabffffffffffffffffffffffff;\n', '    //  maxExpArray[31] = 0x1d6bd8b2ebffffffffffffffffffffffff;\n', '        maxExpArray[32] = 0x1c35fedd14ffffffffffffffffffffffff;\n', '        maxExpArray[33] = 0x1b0ce43b323fffffffffffffffffffffff;\n', '        maxExpArray[34] = 0x19f0028ec1ffffffffffffffffffffffff;\n', '        maxExpArray[35] = 0x18ded91f0e7fffffffffffffffffffffff;\n', '        maxExpArray[36] = 0x17d8ec7f0417ffffffffffffffffffffff;\n', '        maxExpArray[37] = 0x16ddc6556cdbffffffffffffffffffffff;\n', '        maxExpArray[38] = 0x15ecf52776a1ffffffffffffffffffffff;\n', '        maxExpArray[39] = 0x15060c256cb2ffffffffffffffffffffff;\n', '        maxExpArray[40] = 0x1428a2f98d72ffffffffffffffffffffff;\n', '        maxExpArray[41] = 0x13545598e5c23fffffffffffffffffffff;\n', '        maxExpArray[42] = 0x1288c4161ce1dfffffffffffffffffffff;\n', '        maxExpArray[43] = 0x11c592761c666fffffffffffffffffffff;\n', '        maxExpArray[44] = 0x110a688680a757ffffffffffffffffffff;\n', '        maxExpArray[45] = 0x1056f1b5bedf77ffffffffffffffffffff;\n', '        maxExpArray[46] = 0x0faadceceeff8bffffffffffffffffffff;\n', '        maxExpArray[47] = 0x0f05dc6b27edadffffffffffffffffffff;\n', '        maxExpArray[48] = 0x0e67a5a25da4107fffffffffffffffffff;\n', '        maxExpArray[49] = 0x0dcff115b14eedffffffffffffffffffff;\n', '        maxExpArray[50] = 0x0d3e7a392431239fffffffffffffffffff;\n', '        maxExpArray[51] = 0x0cb2ff529eb71e4fffffffffffffffffff;\n', '        maxExpArray[52] = 0x0c2d415c3db974afffffffffffffffffff;\n', '        maxExpArray[53] = 0x0bad03e7d883f69bffffffffffffffffff;\n', '        maxExpArray[54] = 0x0b320d03b2c343d5ffffffffffffffffff;\n', '        maxExpArray[55] = 0x0abc25204e02828dffffffffffffffffff;\n', '        maxExpArray[56] = 0x0a4b16f74ee4bb207fffffffffffffffff;\n', '        maxExpArray[57] = 0x09deaf736ac1f569ffffffffffffffffff;\n', '        maxExpArray[58] = 0x0976bd9952c7aa957fffffffffffffffff;\n', '        maxExpArray[59] = 0x09131271922eaa606fffffffffffffffff;\n', '        maxExpArray[60] = 0x08b380f3558668c46fffffffffffffffff;\n', '        maxExpArray[61] = 0x0857ddf0117efa215bffffffffffffffff;\n', '        maxExpArray[62] = 0x07ffffffffffffffffffffffffffffffff;\n', '        maxExpArray[63] = 0x07abbf6f6abb9d087fffffffffffffffff;\n', '        maxExpArray[64] = 0x075af62cbac95f7dfa7fffffffffffffff;\n', '        maxExpArray[65] = 0x070d7fb7452e187ac13fffffffffffffff;\n', '        maxExpArray[66] = 0x06c3390ecc8af379295fffffffffffffff;\n', '        maxExpArray[67] = 0x067c00a3b07ffc01fd6fffffffffffffff;\n', '        maxExpArray[68] = 0x0637b647c39cbb9d3d27ffffffffffffff;\n', '        maxExpArray[69] = 0x05f63b1fc104dbd39587ffffffffffffff;\n', '        maxExpArray[70] = 0x05b771955b36e12f7235ffffffffffffff;\n', '        maxExpArray[71] = 0x057b3d49dda84556d6f6ffffffffffffff;\n', '        maxExpArray[72] = 0x054183095b2c8ececf30ffffffffffffff;\n', '        maxExpArray[73] = 0x050a28be635ca2b888f77fffffffffffff;\n', '        maxExpArray[74] = 0x04d5156639708c9db33c3fffffffffffff;\n', '        maxExpArray[75] = 0x04a23105873875bd52dfdfffffffffffff;\n', '        maxExpArray[76] = 0x0471649d87199aa990756fffffffffffff;\n', '        maxExpArray[77] = 0x04429a21a029d4c1457cfbffffffffffff;\n', '        maxExpArray[78] = 0x0415bc6d6fb7dd71af2cb3ffffffffffff;\n', '        maxExpArray[79] = 0x03eab73b3bbfe282243ce1ffffffffffff;\n', '        maxExpArray[80] = 0x03c1771ac9fb6b4c18e229ffffffffffff;\n', '        maxExpArray[81] = 0x0399e96897690418f785257fffffffffff;\n', '        maxExpArray[82] = 0x0373fc456c53bb779bf0ea9fffffffffff;\n', '        maxExpArray[83] = 0x034f9e8e490c48e67e6ab8bfffffffffff;\n', '        maxExpArray[84] = 0x032cbfd4a7adc790560b3337ffffffffff;\n', '        maxExpArray[85] = 0x030b50570f6e5d2acca94613ffffffffff;\n', '        maxExpArray[86] = 0x02eb40f9f620fda6b56c2861ffffffffff;\n', '        maxExpArray[87] = 0x02cc8340ecb0d0f520a6af58ffffffffff;\n', '        maxExpArray[88] = 0x02af09481380a0a35cf1ba02ffffffffff;\n', '        maxExpArray[89] = 0x0292c5bdd3b92ec810287b1b3fffffffff;\n', '        maxExpArray[90] = 0x0277abdcdab07d5a77ac6d6b9fffffffff;\n', '        maxExpArray[91] = 0x025daf6654b1eaa55fd64df5efffffffff;\n', '        maxExpArray[92] = 0x0244c49c648baa98192dce88b7ffffffff;\n', '        maxExpArray[93] = 0x022ce03cd5619a311b2471268bffffffff;\n', '        maxExpArray[94] = 0x0215f77c045fbe885654a44a0fffffffff;\n', '        maxExpArray[95] = 0x01ffffffffffffffffffffffffffffffff;\n', '        maxExpArray[96] = 0x01eaefdbdaaee7421fc4d3ede5ffffffff;\n', '        maxExpArray[97] = 0x01d6bd8b2eb257df7e8ca57b09bfffffff;\n', '        maxExpArray[98] = 0x01c35fedd14b861eb0443f7f133fffffff;\n', '        maxExpArray[99] = 0x01b0ce43b322bcde4a56e8ada5afffffff;\n', '        maxExpArray[100] = 0x019f0028ec1fff007f5a195a39dfffffff;\n', '        maxExpArray[101] = 0x018ded91f0e72ee74f49b15ba527ffffff;\n', '        maxExpArray[102] = 0x017d8ec7f04136f4e5615fd41a63ffffff;\n', '        maxExpArray[103] = 0x016ddc6556cdb84bdc8d12d22e6fffffff;\n', '        maxExpArray[104] = 0x015ecf52776a1155b5bd8395814f7fffff;\n', '        maxExpArray[105] = 0x015060c256cb23b3b3cc3754cf40ffffff;\n', '        maxExpArray[106] = 0x01428a2f98d728ae223ddab715be3fffff;\n', '        maxExpArray[107] = 0x013545598e5c23276ccf0ede68034fffff;\n', '        maxExpArray[108] = 0x01288c4161ce1d6f54b7f61081194fffff;\n', '        maxExpArray[109] = 0x011c592761c666aa641d5a01a40f17ffff;\n', '        maxExpArray[110] = 0x0110a688680a7530515f3e6e6cfdcdffff;\n', '        maxExpArray[111] = 0x01056f1b5bedf75c6bcb2ce8aed428ffff;\n', '        maxExpArray[112] = 0x00faadceceeff8a0890f3875f008277fff;\n', '        maxExpArray[113] = 0x00f05dc6b27edad306388a600f6ba0bfff;\n', '        maxExpArray[114] = 0x00e67a5a25da41063de1495d5b18cdbfff;\n', '        maxExpArray[115] = 0x00dcff115b14eedde6fc3aa5353f2e4fff;\n', '        maxExpArray[116] = 0x00d3e7a3924312399f9aae2e0f868f8fff;\n', '        maxExpArray[117] = 0x00cb2ff529eb71e41582cccd5a1ee26fff;\n', '        maxExpArray[118] = 0x00c2d415c3db974ab32a51840c0b67edff;\n', '        maxExpArray[119] = 0x00bad03e7d883f69ad5b0a186184e06bff;\n', '        maxExpArray[120] = 0x00b320d03b2c343d4829abd6075f0cc5ff;\n', '        maxExpArray[121] = 0x00abc25204e02828d73c6e80bcdb1a95bf;\n', '        maxExpArray[122] = 0x00a4b16f74ee4bb2040a1ec6c15fbbf2df;\n', '        maxExpArray[123] = 0x009deaf736ac1f569deb1b5ae3f36c130f;\n', '        maxExpArray[124] = 0x00976bd9952c7aa957f5937d790ef65037;\n', '        maxExpArray[125] = 0x009131271922eaa6064b73a22d0bd4f2bf;\n', '        maxExpArray[126] = 0x008b380f3558668c46c91c49a2f8e967b9;\n', '        maxExpArray[127] = 0x00857ddf0117efa215952912839f6473e6;\n', '    }\n', '\n', '    /**\n', '      General Description:\n', '          Determine a value of precision.\n', '          Calculate an integer approximation of (_baseN / _baseD) ^ (_expN / _expD) * 2 ^ precision.\n', '          Return the result along with the precision used.\n', '      Detailed Description:\n', '          Instead of calculating "base ^ exp", we calculate "e ^ (log(base) * exp)".\n', '          The value of "log(base)" is represented with an integer slightly smaller than "log(base) * 2 ^ precision".\n', '          The larger "precision" is, the more accurately this value represents the real value.\n', '          However, the larger "precision" is, the more bits are required in order to store this value.\n', '          And the exponentiation function, which takes "x" and calculates "e ^ x", is limited to a maximum exponent (maximum value of "x").\n', '          This maximum exponent depends on the "precision" used, and it is given by "maxExpArray[precision] >> (MAX_PRECISION - precision)".\n', '          Hence we need to determine the highest precision which can be used for the given input, before calling the exponentiation function.\n', '          This allows us to compute "base ^ exp" with maximum accuracy and without exceeding 256 bits in any of the intermediate computations.\n', '          This functions assumes that "_expN < 2 ^ 256 / log(MAX_NUM - 1)", otherwise the multiplication should be replaced with a "safeMul".\n', '    */\n', '    function power(\n', '        uint256 _baseN,\n', '        uint256 _baseD,\n', '        uint32 _expN,\n', '        uint32 _expD\n', '    ) internal view returns (uint256, uint8)\n', '    {\n', '        require(_baseN < MAX_NUM, "baseN exceeds max value.");\n', '        require(_baseN >= _baseD, "Bases < 1 are not supported.");\n', '\n', '        uint256 baseLog;\n', '        uint256 base = _baseN * FIXED_1 / _baseD;\n', '        if (base < OPT_LOG_MAX_VAL) {\n', '            baseLog = optimalLog(base);\n', '        } else {\n', '            baseLog = generalLog(base);\n', '        }\n', '\n', '        uint256 baseLogTimesExp = baseLog * _expN / _expD;\n', '        if (baseLogTimesExp < OPT_EXP_MAX_VAL) {\n', '            return (optimalExp(baseLogTimesExp), MAX_PRECISION);\n', '        } else {\n', '            uint8 precision = findPositionInMaxExpArray(baseLogTimesExp);\n', '            return (generalExp(baseLogTimesExp >> (MAX_PRECISION - precision), precision), precision);\n', '        }\n', '    }\n', '\n', '    /**\n', '        Compute log(x / FIXED_1) * FIXED_1.\n', '        This functions assumes that "x >= FIXED_1", because the output would be negative otherwise.\n', '    */\n', '    function generalLog(uint256 _x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '        uint256 x = _x;\n', '\n', '        // If x >= 2, then we compute the integer part of log2(x), which is larger than 0.\n', '        if (x >= FIXED_2) {\n', '            uint8 count = floorLog2(x / FIXED_1);\n', '            x >>= count; // now x < 2\n', '            res = count * FIXED_1;\n', '        }\n', '\n', '        // If x > 1, then we compute the fraction part of log2(x), which is larger than 0.\n', '        if (x > FIXED_1) {\n', '            for (uint8 i = MAX_PRECISION; i > 0; --i) {\n', '                x = (x * x) / FIXED_1; // now 1 < x < 4\n', '                if (x >= FIXED_2) {\n', '                    x >>= 1; // now 1 < x < 2\n', '                    res += ONE << (i - 1);\n', '                }\n', '            }\n', '        }\n', '\n', '        return res * LN2_NUMERATOR / LN2_DENOMINATOR;\n', '    }\n', '\n', '    /**\n', '      Compute the largest integer smaller than or equal to the binary logarithm of the input.\n', '    */\n', '    function floorLog2(uint256 _n) internal pure returns (uint8) {\n', '        uint8 res = 0;\n', '        uint256 n = _n;\n', '\n', '        if (n < 256) {\n', '            // At most 8 iterations\n', '            while (n > 1) {\n', '                n >>= 1;\n', '                res += 1;\n', '            }\n', '        } else {\n', '            // Exactly 8 iterations\n', '            for (uint8 s = 128; s > 0; s >>= 1) {\n', '                if (n >= (ONE << s)) {\n', '                    n >>= s;\n', '                    res |= s;\n', '                }\n', '            }\n', '        }\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '        The global "maxExpArray" is sorted in descending order, and therefore the following statements are equivalent:\n', '        - This function finds the position of [the smallest value in "maxExpArray" larger than or equal to "x"]\n', '        - This function finds the highest position of [a value in "maxExpArray" larger than or equal to "x"]\n', '    */\n', '    function findPositionInMaxExpArray(uint256 _x)\n', '    internal view returns (uint8)\n', '    {\n', '        uint8 lo = MIN_PRECISION;\n', '        uint8 hi = MAX_PRECISION;\n', '\n', '        while (lo + 1 < hi) {\n', '            uint8 mid = (lo + hi) / 2;\n', '            if (maxExpArray[mid] >= _x)\n', '                lo = mid;\n', '            else\n', '                hi = mid;\n', '        }\n', '\n', '        if (maxExpArray[hi] >= _x)\n', '            return hi;\n', '        if (maxExpArray[lo] >= _x)\n', '            return lo;\n', '\n', '        assert(false);\n', '        return 0;\n', '    }\n', '\n', '    /* solhint-disable */\n', '    /**\n', "        This function can be auto-generated by the script 'PrintFunctionGeneralExp.py'.\n", '        It approximates "e ^ x" via maclaurin summation: "(x^0)/0! + (x^1)/1! + ... + (x^n)/n!".\n', '        It returns "e ^ (x / 2 ^ precision) * 2 ^ precision", that is, the result is upshifted for accuracy.\n', '        The global "maxExpArray" maps each "precision" to "((maximumExponent + 1) << (MAX_PRECISION - precision)) - 1".\n', '        The maximum permitted value for "x" is therefore given by "maxExpArray[precision] >> (MAX_PRECISION - precision)".\n', '    */\n', '    function generalExp(uint256 _x, uint8 _precision) internal pure returns (uint256) {\n', '        uint256 xi = _x;\n', '        uint256 res = 0;\n', '\n', '        xi = (xi * _x) >> _precision; res += xi * 0x3442c4e6074a82f1797f72ac0000000; // add x^02 * (33! / 02!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x116b96f757c380fb287fd0e40000000; // add x^03 * (33! / 03!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x045ae5bdd5f0e03eca1ff4390000000; // add x^04 * (33! / 04!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00defabf91302cd95b9ffda50000000; // add x^05 * (33! / 05!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x002529ca9832b22439efff9b8000000; // add x^06 * (33! / 06!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00054f1cf12bd04e516b6da88000000; // add x^07 * (33! / 07!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000a9e39e257a09ca2d6db51000000; // add x^08 * (33! / 08!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000012e066e7b839fa050c309000000; // add x^09 * (33! / 09!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000001e33d7d926c329a1ad1a800000; // add x^10 * (33! / 10!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000002bee513bdb4a6b19b5f800000; // add x^11 * (33! / 11!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000003a9316fa79b88eccf2a00000; // add x^12 * (33! / 12!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000048177ebe1fa812375200000; // add x^13 * (33! / 13!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000005263fe90242dcbacf00000; // add x^14 * (33! / 14!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000057e22099c030d94100000; // add x^15 * (33! / 15!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000057e22099c030d9410000; // add x^16 * (33! / 16!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000052b6b54569976310000; // add x^17 * (33! / 17!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000004985f67696bf748000; // add x^18 * (33! / 18!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000003dea12ea99e498000; // add x^19 * (33! / 19!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000031880f2214b6e000; // add x^20 * (33! / 20!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000025bcff56eb36000; // add x^21 * (33! / 21!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000001b722e10ab1000; // add x^22 * (33! / 22!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000001317c70077000; // add x^23 * (33! / 23!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000cba84aafa00; // add x^24 * (33! / 24!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000082573a0a00; // add x^25 * (33! / 25!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000005035ad900; // add x^26 * (33! / 26!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x000000000000000000000002f881b00; // add x^27 * (33! / 27!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000001b29340; // add x^28 * (33! / 28!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x00000000000000000000000000efc40; // add x^29 * (33! / 29!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000007fe0; // add x^30 * (33! / 30!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000420; // add x^31 * (33! / 31!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000021; // add x^32 * (33! / 32!)\n', '        xi = (xi * _x) >> _precision; res += xi * 0x0000000000000000000000000000001; // add x^33 * (33! / 33!)\n', '\n', '        return res / 0x688589cc0e9505e2f2fee5580000000 + _x + (ONE << _precision); // divide by 33! and then add x^1 / 1! + x^0 / 0!\n', '    }\n', '\n', '    /**\n', '        Return log(x / FIXED_1) * FIXED_1\n', '        Input range: FIXED_1 <= x <= LOG_EXP_MAX_VAL - 1\n', "        Auto-generated via 'PrintFunctionOptimalLog.py'\n", '    */\n', '    function optimalLog(uint256 x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '\n', '        uint256 y;\n', '        uint256 z;\n', '        uint256 w;\n', '\n', '        if (x >= 0xd3094c70f034de4b96ff7d5b6f99fcd8) {res += 0x40000000000000000000000000000000; x = x * FIXED_1 / 0xd3094c70f034de4b96ff7d5b6f99fcd8;}\n', '        if (x >= 0xa45af1e1f40c333b3de1db4dd55f29a7) {res += 0x20000000000000000000000000000000; x = x * FIXED_1 / 0xa45af1e1f40c333b3de1db4dd55f29a7;}\n', '        if (x >= 0x910b022db7ae67ce76b441c27035c6a1) {res += 0x10000000000000000000000000000000; x = x * FIXED_1 / 0x910b022db7ae67ce76b441c27035c6a1;}\n', '        if (x >= 0x88415abbe9a76bead8d00cf112e4d4a8) {res += 0x08000000000000000000000000000000; x = x * FIXED_1 / 0x88415abbe9a76bead8d00cf112e4d4a8;}\n', '        if (x >= 0x84102b00893f64c705e841d5d4064bd3) {res += 0x04000000000000000000000000000000; x = x * FIXED_1 / 0x84102b00893f64c705e841d5d4064bd3;}\n', '        if (x >= 0x8204055aaef1c8bd5c3259f4822735a2) {res += 0x02000000000000000000000000000000; x = x * FIXED_1 / 0x8204055aaef1c8bd5c3259f4822735a2;}\n', '        if (x >= 0x810100ab00222d861931c15e39b44e99) {res += 0x01000000000000000000000000000000; x = x * FIXED_1 / 0x810100ab00222d861931c15e39b44e99;}\n', '        if (x >= 0x808040155aabbbe9451521693554f733) {res += 0x00800000000000000000000000000000; x = x * FIXED_1 / 0x808040155aabbbe9451521693554f733;}\n', '\n', '        z = y = x - FIXED_1;\n', '        w = y * y / FIXED_1;\n', '        res += z * (0x100000000000000000000000000000000 - y) / 0x100000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x0aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa - y) / 0x200000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x099999999999999999999999999999999 - y) / 0x300000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x092492492492492492492492492492492 - y) / 0x400000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x08e38e38e38e38e38e38e38e38e38e38e - y) / 0x500000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x08ba2e8ba2e8ba2e8ba2e8ba2e8ba2e8b - y) / 0x600000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x089d89d89d89d89d89d89d89d89d89d89 - y) / 0x700000000000000000000000000000000; z = z * w / FIXED_1;\n', '        res += z * (0x088888888888888888888888888888888 - y) / 0x800000000000000000000000000000000;\n', '\n', '        return res;\n', '    }\n', '\n', '    /**\n', '        Return e ^ (x / FIXED_1) * FIXED_1\n', '        Input range: 0 <= x <= OPT_EXP_MAX_VAL - 1\n', "        Auto-generated via 'PrintFunctionOptimalExp.py'\n", '    */\n', '    function optimalExp(uint256 x) internal pure returns (uint256) {\n', '        uint256 res = 0;\n', '\n', '        uint256 y;\n', '        uint256 z;\n', '\n', '        z = y = x % 0x10000000000000000000000000000000;\n', '        z = z * y / FIXED_1; res += z * 0x10e1b3be415a0000; // add y^02 * (20! / 02!)\n', '        z = z * y / FIXED_1; res += z * 0x05a0913f6b1e0000; // add y^03 * (20! / 03!)\n', '        z = z * y / FIXED_1; res += z * 0x0168244fdac78000; // add y^04 * (20! / 04!)\n', '        z = z * y / FIXED_1; res += z * 0x004807432bc18000; // add y^05 * (20! / 05!)\n', '        z = z * y / FIXED_1; res += z * 0x000c0135dca04000; // add y^06 * (20! / 06!)\n', '        z = z * y / FIXED_1; res += z * 0x0001b707b1cdc000; // add y^07 * (20! / 07!)\n', '        z = z * y / FIXED_1; res += z * 0x000036e0f639b800; // add y^08 * (20! / 08!)\n', '        z = z * y / FIXED_1; res += z * 0x00000618fee9f800; // add y^09 * (20! / 09!)\n', '        z = z * y / FIXED_1; res += z * 0x0000009c197dcc00; // add y^10 * (20! / 10!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000e30dce400; // add y^11 * (20! / 11!)\n', '        z = z * y / FIXED_1; res += z * 0x000000012ebd1300; // add y^12 * (20! / 12!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000017499f00; // add y^13 * (20! / 13!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000001a9d480; // add y^14 * (20! / 14!)\n', '        z = z * y / FIXED_1; res += z * 0x00000000001c6380; // add y^15 * (20! / 15!)\n', '        z = z * y / FIXED_1; res += z * 0x000000000001c638; // add y^16 * (20! / 16!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000001ab8; // add y^17 * (20! / 17!)\n', '        z = z * y / FIXED_1; res += z * 0x000000000000017c; // add y^18 * (20! / 18!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000000014; // add y^19 * (20! / 19!)\n', '        z = z * y / FIXED_1; res += z * 0x0000000000000001; // add y^20 * (20! / 20!)\n', '        res = res / 0x21c3677c82b40000 + y + FIXED_1; // divide by 20! and then add y^1 / 1! + y^0 / 0!\n', '\n', '        if ((x & 0x010000000000000000000000000000000) != 0) res = res * 0x1c3d6a24ed82218787d624d3e5eba95f9 / 0x18ebef9eac820ae8682b9793ac6d1e776;\n', '        if ((x & 0x020000000000000000000000000000000) != 0) res = res * 0x18ebef9eac820ae8682b9793ac6d1e778 / 0x1368b2fc6f9609fe7aceb46aa619baed4;\n', '        if ((x & 0x040000000000000000000000000000000) != 0) res = res * 0x1368b2fc6f9609fe7aceb46aa619baed5 / 0x0bc5ab1b16779be3575bd8f0520a9f21f;\n', '        if ((x & 0x080000000000000000000000000000000) != 0) res = res * 0x0bc5ab1b16779be3575bd8f0520a9f21e / 0x0454aaa8efe072e7f6ddbab84b40a55c9;\n', '        if ((x & 0x100000000000000000000000000000000) != 0) res = res * 0x0454aaa8efe072e7f6ddbab84b40a55c5 / 0x00960aadc109e7a3bf4578099615711ea;\n', '        if ((x & 0x200000000000000000000000000000000) != 0) res = res * 0x00960aadc109e7a3bf4578099615711d7 / 0x0002bf84208204f5977f9a8cf01fdce3d;\n', '        if ((x & 0x400000000000000000000000000000000) != 0) res = res * 0x0002bf84208204f5977f9a8cf01fdc307 / 0x0000003c6ab775dd0b95b4cbee7e65d11;\n', '\n', '        return res;\n', '    }\n', '    /* solhint-enable */\n', '}\n', '\n', '\n', '/**\n', '* @title Bancor formula by Bancor\n', '*\n', '* Licensed to the Apache Software Foundation (ASF) under one or more contributor license agreements;\n', '* and to You under the Apache License, Version 2.0. "\n', '*/\n', 'contract BancorFormula is Power {\n', '    using SafeMath for uint256;\n', '    uint32 private constant MAX_RESERVE_RATIO = 1000000;\n', '\n', '    /**\n', '    * @dev given a continuous token supply, reserve token balance, reserve ratio, and a deposit amount (in the reserve token),\n', '    * calculates the return for a given conversion (in the continuous token)\n', '    *\n', '    * Formula:\n', '    * Return = _supply * ((1 + _depositAmount / _reserveBalance) ^ (_reserveRatio / MAX_RESERVE_RATIO) - 1)\n', '    *\n', '    * @param _supply              continuous token total supply\n', '    * @param _reserveBalance    total reserve token balance\n', '    * @param _reserveRatio     reserve ratio, represented in ppm, 1-1000000\n', '    * @param _depositAmount       deposit amount, in reserve token\n', '    *\n', '    *  @return purchase return amount\n', '    */\n', '    function calculatePurchaseReturn(\n', '        uint256 _supply,\n', '        uint256 _reserveBalance,\n', '        uint32 _reserveRatio,\n', '        uint256 _depositAmount) public view returns (uint256)\n', '    {\n', '        // validate input\n', '        require(_supply > 0 && _reserveBalance > 0 && _reserveRatio > 0 && _reserveRatio <= MAX_RESERVE_RATIO, "Invalid inputs.");\n', '        // special case for 0 deposit amount\n', '        if (_depositAmount == 0) {\n', '            return 0;\n', '        }\n', '        // special case if the ratio = 100%\n', '        if (_reserveRatio == MAX_RESERVE_RATIO) {\n', '            return _supply.mul(_depositAmount).div(_reserveBalance);\n', '        }\n', '        uint256 result;\n', '        uint8 precision;\n', '        uint256 baseN = _depositAmount.add(_reserveBalance);\n', '        (result, precision) = power(\n', '            baseN, _reserveBalance, _reserveRatio, MAX_RESERVE_RATIO\n', '        );\n', '        uint256 newTokenSupply = _supply.mul(result) >> precision;\n', '        return newTokenSupply.sub(_supply);\n', '    }\n', '\n', '    /**\n', '    * @dev given a continuous token supply, reserve token balance, reserve ratio and a sell amount (in the continuous token),\n', '    * calculates the return for a given conversion (in the reserve token)\n', '    *\n', '    * Formula:\n', '    * Return = _reserveBalance * (1 - (1 - _sellAmount / _supply) ^ (1 / (_reserveRatio / MAX_RESERVE_RATIO)))\n', '    *\n', '    * @param _supply              continuous token total supply\n', '    * @param _reserveBalance    total reserve token balance\n', '    * @param _reserveRatio     constant reserve ratio, represented in ppm, 1-1000000\n', '    * @param _sellAmount          sell amount, in the continuous token itself\n', '    *\n', '    * @return sale return amount\n', '    */\n', '    function calculateSaleReturn(\n', '        uint256 _supply,\n', '        uint256 _reserveBalance,\n', '        uint32 _reserveRatio,\n', '        uint256 _sellAmount) public view returns (uint256)\n', '    {\n', '        // validate input\n', '        require(_supply > 0 && _reserveBalance > 0 && _reserveRatio > 0 && _reserveRatio <= MAX_RESERVE_RATIO && _sellAmount <= _supply, "Invalid inputs.");\n', '        // special case for 0 sell amount\n', '        if (_sellAmount == 0) {\n', '            return 0;\n', '        }\n', '        // special case for selling the entire supply\n', '        if (_sellAmount == _supply) {\n', '            return _reserveBalance;\n', '        }\n', '        // special case if the ratio = 100%\n', '        if (_reserveRatio == MAX_RESERVE_RATIO) {\n', '            return _reserveBalance.mul(_sellAmount).div(_supply);\n', '        }\n', '        uint256 result;\n', '        uint8 precision;\n', '        uint256 baseD = _supply.sub(_sellAmount);\n', '        (result, precision) = power(\n', '            _supply, baseD, MAX_RESERVE_RATIO, _reserveRatio\n', '        );\n', '        uint256 oldBalance = _reserveBalance.mul(result);\n', '        uint256 newBalance = _reserveBalance << precision;\n', '        return oldBalance.sub(newBalance).div(result);\n', '    }\n', '}\n', '\n', '\n', 'interface IBondingCurve {\n', '    /**\n', '    * @dev Given a reserve token amount, calculates the amount of continuous tokens returned.\n', '    */\n', '    function getContinuousMintReward(uint _reserveTokenAmount) external view returns (uint);\n', '\n', '    /**\n', '    * @dev Given a continuous token amount, calculates the amount of reserve tokens returned.\n', '    */  \n', '    function getContinuousBurnRefund(uint _continuousTokenAmount) external view returns (uint);\n', '}\n', '\n', '\n', 'abstract contract BancorBondingCurve is IBondingCurve, BancorFormula {\n', '    /*\n', '        reserve ratio, represented in ppm, 1-1000000\n', '        1/3 corresponds to y= multiple * x^2\n', '        1/2 corresponds to y= multiple * x\n', '        2/3 corresponds to y= multiple * x^1/2\n', '    */\n', '    uint32 public reserveRatio;\n', '\n', '    constructor(uint32 _reserveRatio) public {\n', '        reserveRatio = _reserveRatio;\n', '    }\n', '\n', '    function getContinuousMintReward(uint _reserveTokenAmount) public override view returns (uint) {\n', '        return calculatePurchaseReturn(continuousSupply(), reserveBalance(), reserveRatio, _reserveTokenAmount);\n', '    }\n', '\n', '    function getContinuousBurnRefund(uint _continuousTokenAmount) public override view returns (uint) {\n', '        return calculateSaleReturn(continuousSupply(), reserveBalance(), reserveRatio, _continuousTokenAmount);\n', '    }\n', '\n', '    /**\n', '    * @dev Abstract method that returns continuous token supply\n', '    */\n', '    function continuousSupply() public virtual view returns (uint);\n', '\n', '    /**\n', '    * @dev Abstract method that returns reserve token balance\n', '    */    \n', '    function reserveBalance() public virtual view returns (uint);\n', '}\n', '\n', 'contract BIOPTokenV3 is BancorBondingCurve, ERC20 {\n', '    using SafeMath for uint256;\n', '    address public bO = 0x0000000000000000000000000000000000000000;//binary options\n', '    address payable gov = 0x0000000000000000000000000000000000000000;\n', '    address payable owner;\n', '    address public v2;\n', '    uint256 lEnd;//launch end\n', '    uint256 public tCA = 750000000000000000000000000000;//total claims available\n', '    uint256 public tbca =                 400000000000000000000000000000;//total bonding curve available\n', '                             \n', '    bool public binaryOptionsSet = false;\n', '\n', '    uint256 public soldAmount = 0;\n', '    uint256 public buyFee = 2;//10th of percent\n', '    uint256 public sellFee = 0;//10th of percent\n', '\n', '    constructor(string memory name_, string memory symbol_, address v2_,  uint32 _reserveRatio) public ERC20(name_, symbol_) BancorBondingCurve(_reserveRatio) {\n', '      owner = msg.sender;\n', '      v2 = v2_;\n', '      lEnd = block.timestamp + 3 days;\n', '      _mint(msg.sender, 100000);\n', '      soldAmount = 100000;\n', '    }\n', '\n', '\n', '    \n', '    modifier onlyBinaryOptions() {\n', '        require(bO == msg.sender, "Ownable: caller is not the Binary Options Contract");\n', '        _;\n', '    }\n', '    modifier onlyGov() {\n', '        if (gov == 0x0000000000000000000000000000000000000000) {\n', '            require(owner == msg.sender, "Ownable: caller is not the owner");\n', '        } else {\n', '            require(gov == msg.sender, "Ownable: caller is not the owner");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /** \n', '     * @dev a one time function to setup governance\n', '     * @param g_ the new governance address\n', '     */\n', '    function transferGovernance(address payable g_) external onlyGov {\n', '        require(gov == 0x0000000000000000000000000000000000000000);\n', '        require(g_ != 0x0000000000000000000000000000000000000000);\n', '        gov = g_;\n', '    }\n', '\n', '    /** \n', '     * @dev set the fee users pay in ETH to buy BIOP from the bonding curve\n', '     * @param newFee_ the new fee (in tenth percent) for buying on the curve\n', '     */\n', '    function updateBuyFee(uint256 newFee_) external onlyGov {\n', '        require(newFee_ > 0 && newFee_ < 40, "invalid fee");\n', '        buyFee = newFee_;\n', '    }\n', '\n', '    /**\n', '     * @dev set the fee users pay in ETH to sell BIOP to the bonding curve\n', '     * @param newFee_ the new fee (in tenth percent) for selling on the curve\n', '     **/\n', '    function updateSellFee(uint256 newFee_) external onlyGov {\n', '        require(newFee_ > 0 && newFee_ < 40, "invalid fee");\n', '        sellFee = newFee_;\n', '    } \n', '\n', '    /**\n', '     * @dev called by the binary options contract to update a users Reward claim\n', '     * @param amount the amount in BIOP to add to this users pending claims\n', '     **/\n', '    function updateEarlyClaim(uint256 amount) external onlyBinaryOptions {\n', '        require(tCA.sub(amount) >= 0, "insufficent claims available");\n', '        if (lEnd < block.timestamp) {\n', '            tCA = tCA.sub(amount);\n', '            _mint(tx.origin, amount.mul(4));\n', '        } else {\n', '            tCA.sub(amount);\n', '            _mint(tx.origin, amount);\n', '        }\n', '    }\n', '     /**\n', '     * @notice one time function used at deployment to configure the connected binary options contract\n', '     * @param options_ the address of the binary options contract\n', '     */\n', '    function setupBinaryOptions(address payable options_) external {\n', '        require(binaryOptionsSet != true, "binary options is already set");\n', '        bO = options_;\n', '        binaryOptionsSet = true;\n', '    }\n', '\n', '    /**\n', '     * @dev one time swap of v2 to v3 tokens\n', '     * @notice all v2 tokens will be swapped to v3. This cannot be undone\n', '     */\n', '    function swapv2v3() external {\n', '        BIOPToken b2 = BIOPToken(v2);\n', '        uint256 balance = b2.balanceOf(msg.sender);\n', '        require(balance >= 0, "insufficent biopv2 balance");\n', '        require(b2.transferFrom(msg.sender, address(this), balance), "staking failed");\n', '        _mint(msg.sender, balance);\n', '    }\n', '\n', '\n', '    \n', '\n', '\n', '    //bonding curve functions\n', '\n', '     /**\n', '    * @dev method that returns BIOP amount sold by curve\n', '    */   \n', '    function continuousSupply() public override view returns (uint) {\n', '        return soldAmount;\n', '    }\n', '\n', '    /**\n', '    * @dev method that returns curves ETH (reserve) balance\n', '    */    \n', '    function reserveBalance() public override view returns (uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    /**\n', '     * @notice purchase BIOP from the bonding curve. \n', '     the amount you get is based on the amount in the pool and the amount of eth u send.\n', '     */\n', '     function buy() public payable {\n', '        uint256 purchaseAmount = msg.value;\n', '        \n', '         if (buyFee > 0) {\n', '            uint256 fee = purchaseAmount.div(buyFee).div(100);\n', '            if (gov == 0x0000000000000000000000000000000000000000) {\n', '                require(owner.send(fee), "buy fee transfer failed");\n', '            } else {\n', '                require(gov.send(fee), "buy fee transfer failed");\n', '            }\n', '            purchaseAmount = purchaseAmount.sub(fee);\n', '        } \n', '        uint rewardAmount = getContinuousMintReward(purchaseAmount);\n', '        require(soldAmount.add(rewardAmount) <= tbca, "maximum curve minted");\n', '        \n', '        _mint(msg.sender, rewardAmount);\n', '        soldAmount = soldAmount.add(rewardAmount);\n', '    }\n', '\n', '    \n', '     /**\n', '     * @notice sell BIOP to the bonding curve\n', '     * @param amount the amount of BIOP to sell\n', '     */\n', '     function sell(uint256 amount) public returns (uint256){\n', '        require(balanceOf(msg.sender) >= amount, "insufficent BIOP balance");\n', '\n', '        uint256 ethToSend = getContinuousBurnRefund(amount);\n', '        if (sellFee > 0) {\n', '            uint256 fee = ethToSend.div(buyFee).div(100);\n', '            if (gov == 0x0000000000000000000000000000000000000000) {\n', '                require(owner.send(fee), "buy fee transfer failed");\n', '            } else {\n', '                require(gov.send(fee), "buy fee transfer failed");\n', '            }\n', '            ethToSend = ethToSend.sub(fee);\n', '        }\n', '        soldAmount = soldAmount.sub(amount);\n', '        _burn(msg.sender, amount);\n', '        require(msg.sender.send(ethToSend), "transfer failed");\n', '        return ethToSend;\n', '        }\n', '}']