['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library SafeERC20 {\n', '    function _safeApprove(IERC20 token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), '!TransferHelper: APPROVE_FAILED');\n", '    }\n', '    function safeApprove(IERC20 token, address to, uint value) internal {\n', '        if (value > 0) _safeApprove(token, to, 0);\n', '        return _safeApprove(token, to, value);\n', '    }\n', '\n', '    function safeTransfer(IERC20 token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), '!TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), '!TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, '!TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IMintERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address recipient, uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '    function burnFrom(address sender, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-14\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function withdraw(uint) external;\n', '}\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IWETHelper {\n', '    function withdraw(uint) external;\n', '}\n', '\n', 'contract WETHelper {\n', '    receive() external payable {\n', '    }\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, '!WETHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '    function withdraw(address _eth, address _to, uint256 _amount) public {\n', '        IWETHelper(_eth).withdraw(_amount);\n', '        safeTransferETH(_to, _amount);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface IUniswapV2Router02Api {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}\n', '\n', 'library UniTools {\n', '    function swapExactTokensForTokens(\n', '             address _uniRouter,\n', '             address _fromToken,\n', '             address _toToken,\n', '             uint256 _amount) internal returns (uint256) {\n', '        if (_fromToken == _toToken || _amount == 0) return _amount;\n', '        address[] memory path = new address[](2);\n', '        path[0] = _fromToken;\n', '        path[1] = _toToken;\n', '        uint[] memory amount = IUniswapV2Router02Api(_uniRouter).swapExactTokensForTokens(\n', '                      _amount, 0, path, address(this), 0xffffffff);\n', '        return amount[amount.length - 1];\n', '    }\n', '    function swapExactTokensForTokens(\n', '             address _fromToken,\n', '             address _toToken,\n', '             uint256 _amount) internal returns (uint256) {\n', '        return swapExactTokensForTokens(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, _fromToken, _toToken, _amount);\n', '    }\n', '\n', '    function swapExactTokensForTokens3(\n', '             address _uniRouter,\n', '             address _fromToken,\n', '             address _midToken,\n', '             address _toToken,\n', '             uint256 _amount) internal returns (uint256) {\n', '        address[] memory path;\n', '        if (_midToken == address(0)) {\n', '            path = new address[](2);\n', '            path[0] = _fromToken;\n', '            path[1] = _toToken;\n', '        } else { \n', '            path = new address[](3);\n', '            path[0] = _fromToken;\n', '            path[1] = _midToken;\n', '            path[2] = _toToken;\n', '        }\n', '        uint[] memory amount = IUniswapV2Router02Api(_uniRouter).swapExactTokensForTokens(\n', '                      _amount, 0, path, address(this), 0xffffffff);\n', '        return amount[amount.length - 1];\n', '    }\n', '    function swapExactTokensForTokens3(\n', '             address _fromToken,\n', '             address _midToken,\n', '             address _toToken,\n', '             uint256 _amount) internal returns (uint256) {\n', '        return swapExactTokensForTokens3(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D, _fromToken, _midToken, _toToken, _amount);\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IMigratorChef {\n', '    // Perform LP token migration from legacy UniswapV2 to SushiSwap.\n', '    // Take the current LP token address and return the new LP token address.\n', "    // Migrator should have full access to the caller's LP token.\n", '    // Return the new LP token address.\n', '    //\n', '    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\n', '    // SushiSwap must mint EXACTLY the same amount of SushiSwap LP tokens or\n', '    // else something bad will happen. Traditional UniswapV2 does not\n', '    // do that so be careful!\n', '    function migrate(IERC20 token) external returns (IERC20);\n', '}\n', '\n', '// MasterChef is the master of Sushi. He can make Sushi and he is a fair guy.\n', '//\n', "// Note that it's ownable and the owner wields tremendous power. The ownership\n", '// will be transferred to a governance smart contract once SUSHI is sufficiently\n', '// distributed and the community can show to govern itself.\n', '//\n', "// Have fun reading it. Hopefully it's bug-free. God bless.\n", 'contract MasterChef is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    using SafeERC20 for IMintERC20;\n', '\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 amount;     // How many LP tokens the user has provided.\n', '        uint256 lpAmount;   // Single token, swap to LP token.\n', '        uint256 rewardDebt; // Reward debt. See explanation below.\n', '        //\n', '        // We do some fancy math here. Basically, any point in time, the amount of SUSHIs\n', '        // entitled to a user but is pending to be distributed is:\n', '        //\n', '        //   pending reward = (user.amount * pool.accSushiPerShare) - user.rewardDebt\n', '        //\n', "        // Whenever a user deposits or withdraws LP tokens to a pool. Here's what happens:\n", "        //   1. The pool's `accSushiPerShare` (and `lastRewardBlock`) gets updated.\n", '        //   2. User receives the pending reward sent to his/her address.\n', "        //   3. User's `amount` gets updated.\n", "        //   4. User's `rewardDebt` gets updated.\n", '    }\n', '\n', '    // Info of each pool.\n', '    struct PoolInfo {\n', '        IERC20 lpToken;           // Address of LP token contract.\n', '        uint256 allocPoint;       // How many allocation points assigned to this pool. SUSHIs to distribute per block.\n', '        uint256 poolType;         // Pool type\n', '        uint256 amount;           // User deposit amount\n', '        uint256 lpAmount;         // ETH/Token convert to uniswap liq amount\n', '        address routerv2;         // RouterV2\n', '        address moneyToken;       // Money Token, USDT, BUSD, ETH, BNB, BTC\n', '        uint256 lastRewardBlock;  // Last block number that SUSHIs distribution occurs.\n', '        uint256 accSushiPerShare; // Accumulated SUSHIs per share, times 1e12. See below.\n', '    }\n', '\n', '    // Pool type.\n', '    uint256 internal constant POOL_THISLPTOKEN = 0;\n', '    uint256 internal constant POOL_TOKEN = 1;\n', '    uint256 internal constant POOL_LPTOKEN = 2;\n', '    uint256 internal constant POOL_SLPTOKEN = 3;\n', '    uint256 internal constant POOL_SLPLPTOKEN = 4;\n', '    uint256 internal constant POOL_UNSUPPORT = 5;\n', '\n', '    // ETH Mainnet\n', '    address public constant UNIV2ROUTER2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address public constant SLPV2ROUTER2 = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n', '    address public constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // The SUSHI TOKEN!\n', '    IMintERC20 public sushi;\n', '    // Dev address.\n', '    address public devaddr;\n', '    // Block number when bonus SUSHI period ends.\n', '    uint256 public bonusEndBlock;\n', '    // SUSHI tokens created per block.\n', '    uint256 public sushiPerBlock;\n', '    // Bonus muliplier for early sushi makers.\n', '    uint256 public constant BONUS_MULTIPLIER = 5;\n', '    // Info of each pool.\n', '    PoolInfo[] public poolInfo;\n', '    // Info of each user that stakes LP tokens.\n', '    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n', '    // Total allocation poitns. Must be the sum of all allocation points in all pools.\n', '    uint256 public totalAllocPoint = 0;\n', '    // The block number when SUSHI mining starts.\n', '    uint256 public startBlock;\n', '    // Treasury address;\n', '    address public treasury;\n', '    uint256 public mintReward;\n', '    address public pairaddr;\n', '    // ETH Helper for the transfer, stateless.\n', '    WETHelper public wethelper;\n', '\n', '    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, uint256 liquidity);\n', '    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, uint256 liquidity);\n', '    event Mint(address indexed to, uint256 amount, uint256 devamount);\n', '\n', '    function initialize(\n', '        IMintERC20 _sushi,\n', '        address _devaddr,\n', '        address _treasury,\n', '        uint256 _sushiPerBlock,\n', '        uint256 _startBlock,\n', '        uint256 _bonusEndBlock\n', '    ) public initializer {\n', '        Ownable.__Ownable_init();\n', '        sushi = _sushi;\n', '        devaddr = _devaddr;\n', '        treasury = _treasury;\n', '        sushiPerBlock = _sushiPerBlock;\n', '        startBlock = _startBlock;\n', '        bonusEndBlock = _bonusEndBlock;\n', '        wethelper = new WETHelper();\n', '    }\n', '\n', '    receive() external payable {\n', '        assert(msg.sender == WETH);\n', '    }\n', '\n', '    function setPair(address _pairaddr) public onlyOwner {\n', '        pairaddr = _pairaddr;\n', '\n', '        IERC20(pairaddr).safeApprove(UNIV2ROUTER2, uint(-1));\n', '        IERC20(WETH).safeApprove(UNIV2ROUTER2, uint(-1));\n', '        IERC20(address(sushi)).safeApprove(UNIV2ROUTER2, uint(-1));\n', '    }\n', '\n', '    function poolLength() external view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    // Add a new lp to the pool. Can only be called by the owner.\n', '    function add(uint256 _allocPoint, IERC20 _lpToken, address _moneyToken, bool _withUpdate, uint256 _type) public {\n', '        require(msg.sender == owner() || msg.sender == devaddr, "!dev addr");\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        uint256 lastRewardBlock = block.number > startBlock ? block.number : startBlock;\n', '        address routerv2 = UNIV2ROUTER2;\n', '        if (_type == POOL_SLPTOKEN || _type == POOL_SLPLPTOKEN) {\n', '            routerv2 = SLPV2ROUTER2;\n', '        }\n', '        totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '        poolInfo.push(PoolInfo({\n', '            lpToken: _lpToken,\n', '            allocPoint: _allocPoint,\n', '            poolType: _type,\n', '            amount: 0,\n', '            lpAmount: 0,\n', '            routerv2: routerv2,\n', '            moneyToken: _moneyToken,\n', '            lastRewardBlock: lastRewardBlock,\n', '            accSushiPerShare: 0\n', '        }));\n', '\n', '        _lpToken.safeApprove(UNIV2ROUTER2, uint(-1));\n', '        _lpToken.safeApprove(SLPV2ROUTER2, uint(-1));\n', '    }\n', '\n', "    // Update the given pool's SUSHI allocation point. Can only be called by the owner.\n", '    function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate, uint256 _type) public {\n', '        require(msg.sender == owner() || msg.sender == devaddr, "!dev addr");\n', '        if (_withUpdate) {\n', '            massUpdatePools();\n', '        }\n', '        address routerv2 = UNIV2ROUTER2;\n', '        if (_type == POOL_SLPTOKEN || _type == POOL_SLPLPTOKEN) {\n', '            routerv2 = SLPV2ROUTER2;\n', '        }\n', '        totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '        poolInfo[_pid].allocPoint = _allocPoint;\n', '        poolInfo[_pid].routerv2 = routerv2;\n', '    }\n', '\n', '    // Return reward multiplier over the given _from to _to block.\n', '    function getMultiplier(uint256 _from, uint256 _to) public view returns (uint256) {\n', '        if (_to <= bonusEndBlock) {\n', '            return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '        } else if (_from >= bonusEndBlock) {\n', '            return _to.sub(_from);\n', '        } else {\n', '            return bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n', '                _to.sub(bonusEndBlock)\n', '            );\n', '        }\n', '    }\n', '\n', '    // View function to see pending SUSHIs on frontend.\n', '    function pendingSushi(uint256 _pid, address _user) external view returns (uint256) {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][_user];\n', '        uint256 accSushiPerShare = pool.accSushiPerShare;\n', '        uint256 lpSupply = pool.amount;\n', '        if (block.number > pool.lastRewardBlock && lpSupply != 0) {\n', '            uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '            uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '            accSushiPerShare = accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n', '        }\n', '        return user.amount.mul(accSushiPerShare).div(1e12).sub(user.rewardDebt);\n', '    }\n', '\n', '    // Update reward variables for all pools. Be careful of gas spending!\n', '    function massUpdatePools() public {\n', '        uint256 length = poolInfo.length;\n', '        for (uint256 pid = 0; pid < length; ++pid) {\n', '            updatePool(pid);\n', '        }\n', '    }\n', '\n', '    // Update reward variables of the given pool to be up-to-date.\n', '    function updatePool(uint256 _pid) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        if (block.number <= pool.lastRewardBlock) {\n', '            return;\n', '        }\n', '        uint256 lpSupply = pool.amount;\n', '        if (lpSupply == 0) {\n', '            pool.lastRewardBlock = block.number;\n', '            return;\n', '        }\n', '        uint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\n', '        uint256 sushiReward = multiplier.mul(sushiPerBlock).mul(pool.allocPoint).div(totalAllocPoint);\n', '        mint(devaddr, sushiReward, sushiReward.div(100));\n', '        mintReward.add(sushiReward);\n', '        pool.accSushiPerShare = pool.accSushiPerShare.add(sushiReward.mul(1e12).div(lpSupply));\n', '        pool.lastRewardBlock = block.number;\n', '\n', '        \n', '\n', '    }\n', '\n', '    // Deposit LP tokens to MasterChef for SUSHI allocation.\n', '    function deposit(uint256 _pid, uint256 _amount) public payable {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        uint256 liquidity;\n', '        updatePool(_pid);\n', '        if (user.amount > 0) {\n', '            uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n', '            if(pending > 0) {\n', '                safeSushiTransfer(msg.sender, pending);\n', '            }\n', '        }\n', '        if (msg.value > 0) {\n', '            IWETH(WETH).deposit{value: msg.value}();\n', '        }\n', '        if (address(pool.lpToken) == WETH) {\n', '            if(_amount > 0) {\n', '                pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '            }\n', '            if (msg.value > 0) {\n', '                _amount = _amount.add(msg.value);\n', '            }\n', '        } else if(_amount > 0) {\n', '            pool.lpToken.safeTransferFrom(address(msg.sender), address(this), _amount);\n', '        }\n', '\n', '        if(_amount > 0) {\n', '            if (pool.poolType == POOL_TOKEN || pool.poolType == POOL_SLPTOKEN) {\n', '                liquidity = tokenToLp(pool.routerv2, pool.lpToken, pool.moneyToken, _amount);\n', '                user.lpAmount = user.lpAmount.add(liquidity);\n', '                pool.lpAmount = pool.lpAmount.add(liquidity);\n', '            }\n', '            pool.amount = pool.amount.add(_amount);\n', '            user.amount = user.amount.add(_amount);\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n', '        emit Deposit(msg.sender, _pid, _amount, liquidity);\n', '    }\n', '\n', '    // Withdraw LP tokens from MasterChef.\n', '    function withdraw(uint256 _pid, uint256 _amount) public {\n', '        PoolInfo storage pool = poolInfo[_pid];\n', '        UserInfo storage user = userInfo[_pid][msg.sender];\n', '        require(user.amount >= _amount, "withdraw: not good");\n', '        updatePool(_pid);\n', '        uint256 pending = user.amount.mul(pool.accSushiPerShare).div(1e12).sub(user.rewardDebt);\n', '        if(pending > 0) {\n', '            safeSushiTransfer(msg.sender, pending);\n', '        }\n', '        uint256 liquidity;\n', '        if(_amount > 0) {\n', '\n', '            user.amount = user.amount.sub(_amount);\n', '            pool.amount = pool.amount.sub(_amount);\n', '\n', '            if (pool.poolType == POOL_TOKEN || pool.poolType == POOL_SLPTOKEN) {\n', '                liquidity = user.lpAmount.mul(_amount).div(user.amount.add(_amount));\n', '                uint256 amount2 = lpToToken(pool.routerv2, pool.lpToken, pool.moneyToken, liquidity);\n', '                if (amount2 < _amount) _amount = amount2;\n', '                user.lpAmount = user.lpAmount.sub(liquidity);\n', '                pool.lpAmount = pool.lpAmount.sub(liquidity);\n', '            }\n', '            \n', '            uint256 _withdrawAmount = _amount;\n', '            if(block.number <= bonusEndBlock){\n', '                _withdrawAmount = _amount.mul(9).div(10);\n', '                uint256 toLamount = _amount - _withdrawAmount;\n', '                liquidity = tokenToLp(pool.routerv2, pool.lpToken, pool.moneyToken, toLamount);\n', '                pool.lpAmount = pool.lpAmount.add(liquidity);\n', '            }\n', '\n', '            if (address(pool.lpToken) == WETH) {\n', '                withdrawEth(address(msg.sender), _withdrawAmount, false);\n', '            } else {\n', '                pool.lpToken.safeTransfer(address(msg.sender), _withdrawAmount);\n', '            }\n', '        }\n', '        user.rewardDebt = user.amount.mul(pool.accSushiPerShare).div(1e12);\n', '        emit Withdraw(msg.sender, _pid, _amount, liquidity);\n', '    }\n', '\n', '    // Safe sushi transfer function, just in case if rounding error causes pool to not have enough SUSHIs.\n', '    function safeSushiTransfer(address _to, uint256 _amount) internal {\n', '        uint256 sushiBal = sushi.balanceOf(address(this));\n', '        if (_amount > sushiBal) {\n', '            sushi.transfer(_to, sushiBal);\n', '        } else {\n', '            sushi.transfer(_to, _amount);\n', '        }\n', '    }\n', '\n', '    // Update dev address by the previous dev.\n', '    function dev(address _devaddr) public {\n', '        require(msg.sender == devaddr, "dev: wut?");\n', '        devaddr = _devaddr;\n', '    }\n', '    // Update Treasury contract address;\n', '    function setTreasury(address _treasury) public {\n', '        require(msg.sender == owner() || msg.sender == devaddr, "!dev addr");\n', '        treasury = _treasury;\n', '    }\n', '\n', '    function tokenToLp(address _uniRouter, IERC20 _token, address _moneyToken, uint256 _amount) internal returns (uint256 liq) {\n', '        if (_amount == 0) return 0;\n', '\n', '        if (address(_token) != WETH) {\n', '            _amount = UniTools.swapExactTokensForTokens3(_uniRouter, address(_token), _moneyToken, WETH, _amount);\n', '        }\n', '\n', '        uint256 amountBuy = _amount.mul(5025).div(10000);\n', '        uint256 amountEth = _amount.sub(amountBuy);\n', '        uint256 amountToken = UniTools.swapExactTokensForTokens(WETH, address(sushi), amountEth);\n', '\n', '        (,, liq) = IUniswapV2Router02(UNIV2ROUTER2).addLiquidity(\n', '                WETH, address(sushi), amountEth, amountToken, 0, 0, address(this), 0xffffffff);\n', '    }\n', '    function lpToToken(address _uniRouter, IERC20 _token, address _moneyToken, uint256 _liquidity) internal returns (uint256 amountAsset){\n', '        if (_liquidity == 0) return 0;\n', '        (uint256 amountToken, uint256 amountEth) = IUniswapV2Router02(UNIV2ROUTER2).removeLiquidity(\n', '            address(sushi), WETH, _liquidity, 0, 0, address(this), 0xffffffff);\n', '        amountEth = amountEth.add(UniTools.swapExactTokensForTokens(address(sushi), WETH, amountToken));\n', '\n', '        if (address(_token) == WETH) {\n', '            amountAsset = amountEth;\n', '        } else {\n', '            amountAsset = UniTools.swapExactTokensForTokens3(_uniRouter, WETH, _moneyToken, address(_token), amountEth);\n', '        }\n', '    }\n', '\n', '    function withdrawEth(address _to, uint256 _amount, bool _isWeth) internal {\n', '        if (_isWeth) {\n', '            IERC20(WETH).safeTransfer(_to, _amount);\n', '        } else {\n', '\t\t    IERC20(WETH).safeTransfer(address(wethelper), _amount);\n', '\t\t    wethelper.withdraw(WETH, _to, _amount);\n', '        }\n', '    }\n', '\n', '    function mint(address devto, uint256 rewardAmount, uint256 devRewardAmount) internal {\n', '        if (rewardAmount == 0) {\n', '            emit Mint(devto, 0, 0);\n', '            return;\n', '        }\n', '\n', "        require(sushi.transfer(devto, devRewardAmount), '!sushi transfer of pool failed');\n", '        emit Mint(devto, rewardAmount, devRewardAmount);\n', '    }\n', '}']