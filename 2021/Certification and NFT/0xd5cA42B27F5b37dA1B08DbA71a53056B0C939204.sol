['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '// ___________________________________\n', '// |#######====================#######|\n', '// |#(1)*   Mirror Treasury V1   *(1)#|\n', '// |#**          /===\\             **#|\n', '// |*# {M}      |     |             #*|\n', '// |#*          |     |    O N E    *#|\n', '// |#(1)         \\===/            (1)#|\n', '// |##=========VERSION ONE==========##|\n', '// ------------------------------------\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.8.5;\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '}\n', '\n', 'interface IFeeProducer {\n', '    function updateTreasury(address payable newTreasury) external;\n', '\n', '    function queueFeeUpdate(uint16 newFee) external;\n', '\n', '    function executeFeeUpdate() external;\n', '}\n', '\n', 'contract MirrorTreasuryV1 {\n', '    // ============ Mutable Ownership Configuration ============\n', '\n', '    address public owner;\n', '    /**\n', '     * @dev Allows for two-step ownership transfer, whereby the next owner\n', '     * needs to accept the ownership transfer explicitly.\n', '     */\n', '    address public nextOwner;\n', '\n', '    // ============ Events ============\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event ERC20Transfer(\n', '        address indexed token,\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "caller is not the owner.");\n', '        _;\n', '    }\n', '\n', '    modifier onlyNextOwner() {\n', '        require(isNextOwner(), "current owner must set caller as next owner.");\n', '        _;\n', '    }\n', '\n', '    // ============ Constructor ============\n', '\n', '    constructor(address owner_) {\n', '        owner = owner_;\n', '        emit OwnershipTransferred(address(0), owner);\n', '    }\n', '\n', '    // ============ Ownership ============\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the next owner.\n', '     */\n', '    function isNextOwner() public view returns (bool) {\n', '        return msg.sender == nextOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows a new account (`newOwner`) to accept ownership.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address nextOwner_) external onlyOwner {\n', '        require(nextOwner_ != address(0), "Next owner is the zero address.");\n', '\n', '        nextOwner = nextOwner_;\n', '    }\n', '\n', '    /**\n', '     * @dev Cancel a transfer of ownership to a new account.\n', '     * Can only be called by the current owner.\n', '     */\n', '    function cancelOwnershipTransfer() external onlyOwner {\n', '        delete nextOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to the caller.\n', '     * Can only be called by a new potential owner set by the current owner.\n', '     */\n', '    function acceptOwnership() external onlyNextOwner {\n', '        delete nextOwner;\n', '\n', '        emit OwnershipTransferred(owner, msg.sender);\n', '\n', '        owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() external onlyOwner {\n', '        emit OwnershipTransferred(owner, address(0));\n', '        owner = address(0);\n', '    }\n', '\n', '    // ============ Funds Administration ============\n', '\n', '    function transferFunds(address payable to, uint256 value)\n', '        external\n', '        onlyOwner\n', '    {\n', '        _sendFunds(to, value);\n', '        emit Transfer(address(this), to, value);\n', '    }\n', '\n', '    function transferERC20(\n', '        address token,\n', '        address payable to,\n', '        uint256 value\n', '    ) external onlyOwner {\n', '        IERC20(token).transfer(to, value);\n', '        emit ERC20Transfer(token, address(this), to, value);\n', '    }\n', '\n', '    // ============ Producer Administration ============\n', '\n', '    function updateProducerTreasury(\n', '        address producer,\n', '        address payable newTreasury\n', '    ) public {\n', '        IFeeProducer(producer).updateTreasury(newTreasury);\n', '    }\n', '\n', '    function queueProducerFeeUpdate(address producer, uint16 newFee) public {\n', '        IFeeProducer(producer).queueFeeUpdate(newFee);\n', '    }\n', '\n', '    function executeProducerFeeUpdate(address producer) public {\n', '        IFeeProducer(producer).executeFeeUpdate();\n', '    }\n', '\n', '    // ============ Private Utils ============\n', '\n', '    function _sendFunds(address payable recipient, uint256 amount) private {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Insufficient balance for send"\n', '        );\n', '\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Unable to send value: recipient may have reverted");\n', '    }\n', '}']