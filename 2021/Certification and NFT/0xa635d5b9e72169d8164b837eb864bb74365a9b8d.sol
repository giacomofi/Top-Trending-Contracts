['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Arrays.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to array types.\n', ' */\n', 'library Arrays {\n', '   /**\n', '     * @dev Searches a sorted `array` and returns the first index that contains\n', '     * a value greater or equal to `element`. If no such index exists (i.e. all\n', '     * values in the array are strictly less than `element`), the array length is\n', '     * returned. Time complexity O(log n).\n', '     *\n', '     * `array` is expected to be sorted in ascending order, and to contain no\n', '     * repeated elements.\n', '     */\n', '    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n', '        if (array.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 low = 0;\n', '        uint256 high = array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n', '            // because Math.average rounds down (it does integer division with truncation).\n', '            if (array[mid] > element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n', '        if (low > 0 && array[low - 1] == element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' *\n', ' * _Since v2.5.0:_ this module is now much more gas efficient, given net gas\n', ' * metering changes introduced in the Istanbul hardfork.\n', ' */\n', 'contract ReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    constructor () internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Roles.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev Give an account access to this role.\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev Remove an account's access to this role.\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if an account has this role.\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/roles/PauserRole.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', 'contract PauserRole is Context {\n', '    using Roles for Roles.Role;\n', '\n', '    event PauserAdded(address indexed account);\n', '    event PauserRemoved(address indexed account);\n', '\n', '    Roles.Role private _pausers;\n', '\n', '    constructor () internal {\n', '        _addPauser(_msgSender());\n', '    }\n', '\n', '    modifier onlyPauser() {\n', '        require(isPauser(_msgSender()), "PauserRole: caller does not have the Pauser role");\n', '        _;\n', '    }\n', '\n', '    function isPauser(address account) public view returns (bool) {\n', '        return _pausers.has(account);\n', '    }\n', '\n', '    function addPauser(address account) public onlyPauser {\n', '        _addPauser(account);\n', '    }\n', '\n', '    function renouncePauser() public {\n', '        _removePauser(_msgSender());\n', '    }\n', '\n', '    function _addPauser(address account) internal {\n', '        _pausers.add(account);\n', '        emit PauserAdded(account);\n', '    }\n', '\n', '    function _removePauser(address account) internal {\n', '        _pausers.remove(account);\n', '        emit PauserRemoved(account);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/lifecycle/Pausable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context, PauserRole {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by a pauser (`account`).\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by a pauser (`account`).\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state. Assigns the Pauser role\n', '     * to the deployer.\n', '     */\n', '    constructor () internal {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to pause, triggers stopped state.\n', '     */\n', '    function pause() public onlyPauser whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Called by a pauser to unpause, returns to normal state.\n', '     */\n', '    function unpause() public onlyPauser whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IVAILockup.sol\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'interface IVAILockup {\n', '\n', '    function beneficiaryCurrentAmount(address beneficiary) external view returns (uint256);\n', '\n', '    function stake(address beneficiary, uint256 stakeAmount) external;\n', '\n', '    function unstake(address beneficiary, uint256 stakeAmount, uint256 rewardsAmount) external;\n', '}\n', '\n', '// File: contracts/PreStakingContract.sol\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract PreStakingContract is Pausable, ReentrancyGuard, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    using Math for uint256;\n', '    using Address for address;\n', '    using Arrays for uint256[];\n', '\n', '    enum ContractStatus {Setup, Running, RewardsDisabled}\n', '\n', '\n', '    // EVENTS\n', '    event StakeDeposited(address indexed account, uint256 amount);\n', '    event LockupStakeDeposited(address indexed account, uint256 amount);\n', '    event WithdrawExecuted(address indexed account, uint256 amount, uint256 reward);\n', '    event LockupWithdrawExecuted(address indexed account, uint256 amount, uint256 reward);\n', '    event LockupAddressSet(address indexed account);\n', '\n', '    // STRUCT DECLARATIONS\n', '    struct StakeDeposit {\n', '        uint256 amount;\n', '        uint256 startDate;\n', '        uint256 endDate;\n', '        uint256 startCheckpointIndex;\n', '        uint256 endCheckpointIndex;\n', '        bool exists;\n', '        bool lockup;\n', '    }\n', '\n', '    struct SetupState {\n', '        bool staking;\n', '        bool rewards;\n', '    }\n', '\n', '    struct StakingLimitConfig {\n', '        uint256[] amounts;\n', '        uint256 daysInterval;\n', '    }\n', '\n', '    struct BaseRewardCheckpoint {\n', '        uint256 baseRewardIndex;\n', '        uint256 startTimestamp;\n', '        uint256 endTimestamp;\n', '        uint256 fromBlock;\n', '    }\n', '\n', '    struct BaseReward {\n', '        uint256 anualRewardRate;\n', '        uint256 lowerBound;\n', '        uint256 upperBound;\n', '    }\n', '\n', '    struct RewardConfig {\n', '        BaseReward[] baseRewards;\n', '        uint256[] upperBounds;\n', '        uint256 multiplier; // percent of the base reward applicable\n', '    }\n', '\n', '    // CONTRACT STATE VARIABLES\n', '    IVAILockup public ivaiLockup;\n', '    IERC20 public token;\n', '    ContractStatus public currentContractStatus;\n', '\n', '    SetupState public setupState;\n', '    StakingLimitConfig public stakingLimitConfig;\n', '    RewardConfig public rewardConfig;\n', '\n', '    address public rewardsAddress;\n', '\n', '    uint256 public launchTimestamp;\n', '    uint256 public currentTotalStake;\n', '\n', '    mapping(address => StakeDeposit) private _stakeDeposits;\n', '    BaseRewardCheckpoint[] private _baseRewardHistory;\n', '\n', '    // MODIFIERS\n', '    modifier guardMaxStakingLimit(uint256 amount)\n', '    {\n', '        uint256 resultedStakedAmount = currentTotalStake.add(amount);\n', '        uint256 currentStakingLimit = _computeCurrentStakingLimit();\n', '        require(resultedStakedAmount <= currentStakingLimit, "[Deposit] Your deposit would exceed the current staking limit");\n', '        _;\n', '    }\n', '\n', '    modifier onlyContract(address account)\n', '    {\n', '        require(account.isContract(), "[Validation] The address does not contain a contract");\n', '        _;\n', '    }\n', '\n', '    modifier onlyDuringSetup()\n', '    {\n', '        require(currentContractStatus == ContractStatus.Setup, "[Lifecycle] Setup is already done");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterSetup()\n', '    {\n', '        require(currentContractStatus != ContractStatus.Setup, "[Lifecycle] Setup is not done");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterSettingIVAILockup() {\n', '        require(address(ivaiLockup) != address(0), "[Validation] The IVAILockup is not set");\n', '        _;\n', '    }\n', '\n', '    // PUBLIC FUNCTIONS\n', '    constructor(address _token, address _rewardsAddress)\n', '    onlyContract(_token) Ownable()\n', '    public\n', '    {\n', '        require(_rewardsAddress != address(0), "[Validation] _rewardsAddress is the zero address");\n', '\n', '        token = IERC20(_token);\n', '        rewardsAddress = _rewardsAddress;\n', '        launchTimestamp = now;\n', '        currentContractStatus = ContractStatus.Setup;\n', '        pause();\n', '    }\n', '\n', '    function deposit(uint256 amount)\n', '    public\n', '    nonReentrant\n', '    onlyAfterSetup\n', '    whenNotPaused\n', '    guardMaxStakingLimit(amount)\n', '    {\n', '        require(amount > 0, "[Validation] The stake deposit has to be larger than 0");\n', '        require(!_stakeDeposits[msg.sender].exists, "[Deposit] You already have a stake");\n', '\n', '        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\n', '        stakeDeposit.amount = stakeDeposit.amount.add(amount);\n', '        stakeDeposit.startDate = now;\n', '        stakeDeposit.startCheckpointIndex = _baseRewardHistory.length - 1;\n', '        stakeDeposit.exists = true;\n', '        stakeDeposit.lockup = false;\n', '\n', '        currentTotalStake = currentTotalStake.add(amount);\n', '        _updateBaseRewardHistory();\n', '\n', '        // Transfer the Tokens to this contract\n', '        require(token.transferFrom(msg.sender, address(this), amount), "[Deposit] Something went wrong during the token transfer");\n', '        emit StakeDeposited(msg.sender, amount);\n', '    }\n', '\n', '    function depositLockup(uint256 amount)\n', '    public\n', '    nonReentrant\n', '    onlyAfterSetup\n', '    onlyAfterSettingIVAILockup\n', '    whenNotPaused\n', '    {\n', '        require(amount > 0, "[Validation] The stake deposit has to be larger than 0");\n', '        require(!_stakeDeposits[msg.sender].exists, "[Deposit] You already have a stake");\n', '        require(ivaiLockup.beneficiaryCurrentAmount(msg.sender) >= amount, "[Validation] You don\'t have enough funds");\n', '        \n', '        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\n', '        stakeDeposit.amount = stakeDeposit.amount.add(amount);\n', '        stakeDeposit.startDate = now;\n', '        stakeDeposit.startCheckpointIndex = _baseRewardHistory.length - 1;\n', '        stakeDeposit.exists = true;\n', '        stakeDeposit.lockup = true;\n', '\n', '        currentTotalStake = currentTotalStake.add(amount);\n', '        _updateBaseRewardHistory();\n', '\n', '        // Transfer the Tokens to this contract\n', '        require(token.transferFrom(address(ivaiLockup), address(this), amount), "[Deposit] Something went wrong during the token transfer");\n', '        \n', '        ivaiLockup.stake(msg.sender, amount);\n', '\n', '        emit LockupStakeDeposited(msg.sender, amount);\n', '    }\n', '\n', '    function executeWithdrawal()\n', '    external\n', '    nonReentrant\n', '    whenNotPaused\n', '    onlyAfterSetup\n', '    {\n', '        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\n', '        require(stakeDeposit.exists && stakeDeposit.amount != 0, "[Withdraw] There is no stake deposit for this account");\n', '        require(stakeDeposit.lockup == false, "[Withdraw] This deposit is lockup");\n', '       \n', '        stakeDeposit.endDate = now;\n', '        stakeDeposit.endCheckpointIndex = _baseRewardHistory.length - 1;\n', '\n', '        uint256 amount = stakeDeposit.amount;\n', '        uint256 reward = _computeReward(stakeDeposit);\n', '\n', '        stakeDeposit.amount = 0;\n', '        stakeDeposit.startDate = 0;\n', '        stakeDeposit.endDate = 0;\n', '        stakeDeposit.startCheckpointIndex = 0;\n', '        stakeDeposit.endCheckpointIndex = 0;\n', '        stakeDeposit.exists = false;\n', '\n', '        currentTotalStake = currentTotalStake.sub(amount);\n', '        _updateBaseRewardHistory();\n', '\n', '        require(token.transfer(msg.sender, amount), "[Withdraw] Something went wrong while transferring your initial deposit");\n', '        require(token.transferFrom(rewardsAddress, msg.sender, reward), "[Withdraw] Something went wrong while transferring your reward");\n', '\n', '        emit WithdrawExecuted(msg.sender, amount, reward);\n', '    }\n', '\n', '    function withdrawLockup()\n', '    external\n', '    nonReentrant\n', '    whenNotPaused\n', '    onlyAfterSetup\n', '    onlyAfterSettingIVAILockup\n', '    {\n', '        StakeDeposit storage stakeDeposit = _stakeDeposits[msg.sender];\n', '        require(stakeDeposit.exists && stakeDeposit.amount != 0, "[Withdraw] There is no stake deposit for this account");\n', '        require(stakeDeposit.lockup == true, "[Withdraw] This deposit is not lockup");\n', '       \n', '        stakeDeposit.endDate = now;\n', '        stakeDeposit.endCheckpointIndex = _baseRewardHistory.length - 1;\n', '\n', '        uint256 amount = stakeDeposit.amount;\n', '        uint256 reward = _computeReward(stakeDeposit);\n', '\n', '        stakeDeposit.amount = 0;\n', '        stakeDeposit.startDate = 0;\n', '        stakeDeposit.endDate = 0;\n', '        stakeDeposit.startCheckpointIndex = 0;\n', '        stakeDeposit.endCheckpointIndex = 0;\n', '        stakeDeposit.exists = false;\n', '\n', '        currentTotalStake = currentTotalStake.sub(amount);\n', '        _updateBaseRewardHistory();\n', '\n', '        require(token.transfer(address(ivaiLockup), amount), "[Withdraw] Something went wrong while transferring your initial deposit");\n', '        require(token.transferFrom(rewardsAddress, address(ivaiLockup), reward), "[Withdraw] Something went wrong while transferring your reward");\n', '\n', '        ivaiLockup.unstake(msg.sender, amount, reward);\n', '\n', '        emit LockupWithdrawExecuted(msg.sender, amount, reward);\n', '    }\n', '\n', '    function toggleRewards(bool enabled)\n', '    external\n', '    onlyOwner\n', '    onlyAfterSetup\n', '    {\n', '        ContractStatus newContractStatus = enabled ? ContractStatus.Running : ContractStatus.RewardsDisabled;\n', '        require(currentContractStatus != newContractStatus, "[ToggleRewards] This status is already set");\n', '\n', '        uint256 index;\n', '\n', '        if (newContractStatus == ContractStatus.RewardsDisabled) {\n', '            index = rewardConfig.baseRewards.length - 1;\n', '        }\n', '\n', '        if (newContractStatus == ContractStatus.Running) {\n', '            index = _computeCurrentBaseReward();\n', '        }\n', '\n', '        _insertNewCheckpoint(index);\n', '\n', '        currentContractStatus = newContractStatus;\n', '    }\n', '\n', '    // VIEW FUNCTIONS FOR HELPING THE USER AND CLIENT INTERFACE\n', '    function isLockup(address account)\n', '    public\n', '    onlyAfterSetup\n', '    view\n', '    returns (bool)\n', '    {\n', '        StakeDeposit memory stakeDeposit = _stakeDeposits[account];\n', '        return stakeDeposit.lockup;\n', '    }\n', '\n', '    function currentStakingLimit()\n', '    public\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _computeCurrentStakingLimit();\n', '    }\n', '\n', '    function earned(address account)\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        if (!_stakeDeposits[account].exists || _stakeDeposits[account].amount == 0) {\n', '            return 0;\n', '        }\n', '        StakeDeposit memory stakeDeposit = _stakeDeposits[account];\n', '        stakeDeposit.endDate = now;\n', '        stakeDeposit.endCheckpointIndex = _baseRewardHistory.length - 1;\n', '\n', '        return (_computeReward(stakeDeposit));\n', '    }\n', '\n', '    function balanceOf(address account)\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        StakeDeposit memory stakeDeposit = _stakeDeposits[account];\n', '        return stakeDeposit.amount;\n', '    }\n', '\n', '    function getStakeDeposit()\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256 amount, uint256 startDate, uint256 endDate, uint256 startCheckpointIndex, uint256 endCheckpointIndex)\n', '    {\n', '        require(_stakeDeposits[msg.sender].exists, "[Validation] This account doesn\'t have a stake deposit");\n', '        StakeDeposit memory s = _stakeDeposits[msg.sender];\n', '\n', '        return (s.amount, s.startDate, s.endDate, s.startCheckpointIndex, s.endCheckpointIndex);\n', '    }\n', '\n', '    function rewardRate()\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        BaseReward memory br = rewardConfig.baseRewards[_baseRewardHistory[_baseRewardHistory.length - 1].baseRewardIndex];\n', '\n', '        return br.anualRewardRate;\n', '    }\n', '\n', '    function baseRewardsLength()\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return rewardConfig.baseRewards.length;\n', '    }\n', '\n', '    function baseReward(uint256 index)\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256, uint256, uint256)\n', '    {\n', '        BaseReward memory br = rewardConfig.baseRewards[index];\n', '\n', '        return (br.anualRewardRate, br.lowerBound, br.upperBound);\n', '    }\n', '\n', '    function baseRewardHistoryLength()\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _baseRewardHistory.length;\n', '    }\n', '\n', '    function baseRewardHistory(uint256 index)\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256, uint256, uint256, uint256)\n', '    {\n', '        BaseRewardCheckpoint memory c = _baseRewardHistory[index];\n', '\n', '        return (c.baseRewardIndex, c.startTimestamp, c.endTimestamp, c.fromBlock);\n', '    }\n', '\n', '    function baseRewardIndex(uint256 index)\n', '    external\n', '    onlyAfterSetup\n', '    view\n', '    returns (uint256)\n', '    {\n', '        BaseRewardCheckpoint memory c = _baseRewardHistory[index];\n', '\n', '        return (c.baseRewardIndex);\n', '    }\n', '\n', '    function getLimitAmounts()\n', '    external\n', '    view\n', '    returns(uint256[] memory) {\n', '        return stakingLimitConfig.amounts;\n', '    }\n', '\n', '    // OWNER SETUP\n', '    function setupStakingLimit(uint256[] calldata amounts, uint256 daysInterval)\n', '    external\n', '    onlyOwner\n', '    whenPaused\n', '    onlyDuringSetup\n', '    {\n', '        for (uint256 i = 0; i < amounts.length; i++) {\n', '            require(amounts[i] > 0, "[Validation] some of amounts are 0");\n', '            if (i != 0) {\n', '                require(amounts[i] > amounts[i-1], "[Validation] rewards should be in ascending order");\n', '            }\n', '        }\n', '      \n', '        require(daysInterval > 0, "[Validation] Some parameters are 0");\n', '\n', '        for (uint256 i = 0; i < amounts.length; i++) {\n', '            stakingLimitConfig.amounts.push(amounts[i]);\n', '        }\n', '        stakingLimitConfig.daysInterval = daysInterval;\n', '\n', '        setupState.staking = true;\n', '        _updateSetupState();\n', '    }\n', '\n', '    function setupRewards(\n', '        uint256 multiplier,\n', '        uint256[] calldata anualRewardRates,\n', '        uint256[] calldata lowerBounds,\n', '        uint256[] calldata upperBounds\n', '    )\n', '    external\n', '    onlyOwner\n', '    whenPaused\n', '    onlyDuringSetup\n', '    {\n', '        _validateSetupRewardsParameters(multiplier, anualRewardRates, lowerBounds, upperBounds);\n', '\n', '        // Setup rewards\n', '        rewardConfig.multiplier = multiplier;\n', '\n', '        for (uint256 i = 0; i < anualRewardRates.length; i++) {\n', '            _addBaseReward(anualRewardRates[i], lowerBounds[i], upperBounds[i]);\n', '        }\n', '\n', '        uint256 highestUpperBound = upperBounds[upperBounds.length - 1];\n', '\n', '        // Add the zero annual reward rate\n', '        _addBaseReward(0, highestUpperBound, highestUpperBound + 10);\n', '\n', '        // initiate baseRewardHistory with the first one which should start from 0\n', '        _initBaseRewardHistory();\n', '\n', '        setupState.rewards = true;\n', '        _updateSetupState();\n', '    }\n', '\n', '    function setLockupAddress(address lockup)\n', '    public\n', '    onlyOwner\n', '    whenPaused\n', '    onlyDuringSetup\n', '    {\n', '        ivaiLockup = IVAILockup(lockup);\n', '        emit LockupAddressSet(lockup);\n', '    }\n', '\n', '    // INTERNAL\n', '    function _updateSetupState()\n', '    private\n', '    {\n', '        if (!setupState.rewards || !setupState.staking) {\n', '            return;\n', '        }\n', '\n', '        currentContractStatus = ContractStatus.Running;\n', '    }\n', '\n', '    function _computeCurrentStakingLimit()\n', '    private\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 intervalsPassed = _getIntervalsPassed();\n', '        return stakingLimitConfig.amounts[intervalsPassed];\n', '    }\n', '\n', '    function _getIntervalsPassed()\n', '    private\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 daysPassed = (now - launchTimestamp) / 1 days;\n', '        return daysPassed / stakingLimitConfig.daysInterval;\n', '    }\n', '\n', '    function _computeReward(StakeDeposit memory stakeDeposit)\n', '    private\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 scale = 10 ** 18;\n', '        (uint256 weightedSum, uint256 stakingPeriod) = _computeRewardRatesWeightedSum(stakeDeposit);\n', '\n', '        if (stakingPeriod == 0) {\n', '            return 0;\n', '        }\n', '        // scaling weightedSum and stakingPeriod because the weightedSum is in the thousands magnitude\n', '        // and we risk losing detail while rounding\n', '        weightedSum = weightedSum.mul(scale);\n', '\n', '        uint256 weightedAverage = weightedSum.div(stakingPeriod);\n', '\n', '        // rewardConfig.multiplier is a percentage expressed in 1/10 (a tenth) of a percent hence we divide by 1000\n', '        uint256 accumulator = rewardConfig.multiplier.mul(weightedSum).div(1000);\n', '        uint256 effectiveRate = weightedAverage.add(accumulator);\n', '        uint256 denominator = scale.mul(36500);\n', '\n', '        return stakeDeposit.amount.mul(effectiveRate).mul(stakingPeriod).div(denominator);\n', '    }\n', '\n', '    function _computeRewardRatesWeightedSum(StakeDeposit memory stakeDeposit)\n', '    private\n', '    view\n', '    returns (uint256, uint256)\n', '    {\n', '        uint256 stakingPeriod = (stakeDeposit.endDate - stakeDeposit.startDate) / 1 days;\n', '        uint256 weight;\n', '        uint256 rate;\n', '\n', '        // The contract never left the first checkpoint\n', '        if (stakeDeposit.startCheckpointIndex == stakeDeposit.endCheckpointIndex) {\n', '            rate = _baseRewardFromHistoryIndex(stakeDeposit.startCheckpointIndex).anualRewardRate;\n', '\n', '            return (rate.mul(stakingPeriod), stakingPeriod);\n', '        }\n', '\n', '        // Computing the first segment base reward\n', '        // User could deposit in the middle of the segment so we need to get the segment from which the user deposited\n', '        // to the moment the base reward changes\n', '        weight = (_baseRewardHistory[stakeDeposit.startCheckpointIndex].endTimestamp - stakeDeposit.startDate) / 1 days;\n', '        rate = _baseRewardFromHistoryIndex(stakeDeposit.startCheckpointIndex).anualRewardRate;\n', '        uint256 weightedSum = rate.mul(weight);\n', '\n', '        // Starting from the second checkpoint because the first one is already computed\n', '        for (uint256 i = stakeDeposit.startCheckpointIndex + 1; i < stakeDeposit.endCheckpointIndex; i++) {\n', '            weight = (_baseRewardHistory[i].endTimestamp - _baseRewardHistory[i].startTimestamp) / 1 days;\n', '            rate = _baseRewardFromHistoryIndex(i).anualRewardRate;\n', '            weightedSum = weightedSum.add(rate.mul(weight));\n', '        }\n', '\n', '        // Computing the base reward for the last segment\n', '        // days between start timestamp of the last checkpoint to the moment he initialized the withdrawal\n', '        weight = (stakeDeposit.endDate - _baseRewardHistory[stakeDeposit.endCheckpointIndex].startTimestamp) / 1 days;\n', '        rate = _baseRewardFromHistoryIndex(stakeDeposit.endCheckpointIndex).anualRewardRate;\n', '        weightedSum = weightedSum.add(weight.mul(rate));\n', '\n', '        return (weightedSum, stakingPeriod);\n', '    }\n', '\n', '    function _addBaseReward(uint256 anualRewardRate, uint256 lowerBound, uint256 upperBound)\n', '    private\n', '    {\n', '        rewardConfig.baseRewards.push(BaseReward(anualRewardRate, lowerBound, upperBound));\n', '        rewardConfig.upperBounds.push(upperBound);\n', '    }\n', '\n', '    function _initBaseRewardHistory()\n', '    private\n', '    {\n', '        require(_baseRewardHistory.length == 0, "[Logical] Base reward history has already been initialized");\n', '\n', '        _baseRewardHistory.push(BaseRewardCheckpoint(0, now, 0, block.number));\n', '    }\n', '\n', '    function _updateBaseRewardHistory()\n', '    private\n', '    {\n', '        if (currentContractStatus == ContractStatus.RewardsDisabled) {\n', '            return;\n', '        }\n', '\n', '        BaseReward memory currentBaseReward = _currentBaseReward();\n', '\n', '        // Do nothing if currentTotalStake is in the current base reward bounds or lower\n', '        if (currentTotalStake <= currentBaseReward.upperBound) {\n', '            return;\n', '        }\n', '\n', '        uint256 newIndex = _computeCurrentBaseReward();\n', '        _insertNewCheckpoint(newIndex);\n', '    }\n', '\n', '    function _insertNewCheckpoint(uint256 newIndex)\n', '    private\n', '    {\n', '        BaseRewardCheckpoint storage oldCheckPoint = _lastBaseRewardCheckpoint();\n', '\n', '        if (oldCheckPoint.fromBlock < block.number) {\n', '            oldCheckPoint.endTimestamp = now;\n', '            _baseRewardHistory.push(BaseRewardCheckpoint(newIndex, now, 0, block.number));\n', '        } else {\n', '            oldCheckPoint.baseRewardIndex = newIndex;\n', '        }\n', '    }\n', '\n', '    function _currentBaseReward()\n', '    private\n', '    view\n', '    returns (BaseReward memory)\n', '    {\n', '        // search for the current base reward from current total staked amount\n', '        uint256 currentBaseRewardIndex = _lastBaseRewardCheckpoint().baseRewardIndex;\n', '\n', '        return rewardConfig.baseRewards[currentBaseRewardIndex];\n', '    }\n', '\n', '    function _baseRewardFromHistoryIndex(uint256 index)\n', '    private\n', '    view\n', '    returns (BaseReward memory)\n', '    {\n', '        return rewardConfig.baseRewards[_baseRewardHistory[index].baseRewardIndex];\n', '    }\n', '\n', '    function _lastBaseRewardCheckpoint()\n', '    private\n', '    view\n', '    returns (BaseRewardCheckpoint storage)\n', '    {\n', '        return _baseRewardHistory[_baseRewardHistory.length - 1];\n', '    }\n', '\n', '    function _computeCurrentBaseReward()\n', '    private\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint256 index = rewardConfig.upperBounds.findUpperBound(currentTotalStake);\n', '\n', '        require(index < rewardConfig.upperBounds.length, "[NotFound] The current total staked is out of bounds");\n', '\n', '        return index;\n', '    }\n', '\n', '    function _validateSetupRewardsParameters\n', '    (\n', '        uint256 multiplier,\n', '        uint256[] memory anualRewardRates,\n', '        uint256[] memory lowerBounds,\n', '        uint256[] memory upperBounds\n', '    )\n', '    private\n', '    pure\n', '    {\n', '        require(\n', '            anualRewardRates.length > 0 && lowerBounds.length > 0 && upperBounds.length > 0,\n', '            "[Validation] All parameters must have at least one element"\n', '        );\n', '        require(\n', '            anualRewardRates.length == lowerBounds.length && lowerBounds.length == upperBounds.length,\n', '            "[Validation] All parameters must have the same number of elements"\n', '        );\n', '        require(lowerBounds[0] == 0, "[Validation] First lower bound should be 0");\n', '        require(\n', '            (multiplier < 100) && (uint256(100).mod(multiplier) == 0),\n', '            "[Validation] Multiplier should be smaller than 100 and divide it equally"\n', '        );\n', '    }\n', '}']