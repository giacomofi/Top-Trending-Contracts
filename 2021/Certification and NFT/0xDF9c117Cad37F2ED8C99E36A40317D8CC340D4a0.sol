['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', '// SPDX-License-Identifier: Apache-2.0.\n', 'pragma solidity ^0.6.11;\n', '\n', 'import "PerpetualEscapes.sol";\n', 'import "UpdatePerpetualState.sol";\n', 'import "Configuration.sol";\n', 'import "Freezable.sol";\n', 'import "KeyGetters.sol";\n', 'import "MainGovernance.sol";\n', 'import "Operator.sol";\n', 'import "AcceptModifications.sol";\n', 'import "ForcedTradeActionState.sol";\n', 'import "ForcedWithdrawalActionState.sol";\n', 'import "StateRoot.sol";\n', 'import "TokenQuantization.sol";\n', 'import "IFactRegistry.sol";\n', 'import "SubContractor.sol";\n', '\n', 'contract PerpetualState is\n', '    MainGovernance,\n', '    SubContractor,\n', '    Configuration,\n', '    Operator,\n', '    Freezable,\n', '    AcceptModifications,\n', '    TokenQuantization,\n', '    ForcedTradeActionState,\n', '    ForcedWithdrawalActionState,\n', '    StateRoot,\n', '    PerpetualEscapes,\n', '    UpdatePerpetualState,\n', '    KeyGetters\n', '{\n', '    // Empty state is 8 words (256 bytes) To pass as uint[] we need also head & len fields (64).\n', '    uint256 constant INITIALIZER_SIZE = 384; // Padded address(32), uint(32), Empty state(256+64).\n', '\n', '    /*\n', '      Initialization flow:\n', '      1. Extract initialization parameters from data.\n', '      2. Call internalInitializer with those parameters.\n', '    */\n', '    function initialize(bytes calldata data) external override {\n', '        // This initializer sets roots etc. It must not be applied twice.\n', '        // I.e. it can run only when the state is still empty.\n', '        require(sharedStateHash == bytes32(0x0), "STATE_ALREADY_INITIALIZED");\n', '        require(configurationHash[GLOBAL_CONFIG_KEY] == bytes32(0x0), "STATE_ALREADY_INITIALIZED");\n', '\n', '        require(data.length == INITIALIZER_SIZE, "INCORRECT_INIT_DATA_SIZE_384");\n', '\n', '        (\n', '            IFactRegistry escapeVerifier,\n', '            uint256 initialSequenceNumber,\n', '            uint256[] memory initialState\n', '        ) = abi.decode(\n', '            data,\n', '            (IFactRegistry, uint256, uint256[])\n', '        );\n', '\n', '        initGovernance();\n', '        Configuration.initialize(PERPETUAL_CONFIGURATION_DELAY);\n', '        Operator.initialize();\n', '        StateRoot.initialize(\n', '            initialSequenceNumber,\n', '            initialState[0],\n', '            initialState[2],\n', '            initialState[1],\n', '            initialState[3]\n', '        );\n', '        sharedStateHash = keccak256(abi.encodePacked(initialState));\n', '        PerpetualEscapes.initialize(escapeVerifier);\n', '    }\n', '\n', '    /*\n', '      The call to initializerSize is done from MainDispatcherBase using delegatecall,\n', '      thus the existing state is already accessible.\n', '    */\n', '    function initializerSize() external view override returns (uint256) {\n', '        return INITIALIZER_SIZE;\n', '    }\n', '\n', '    function identify() external pure override returns (string memory) {\n', '        return "StarkWare_PerpetualState_2020_1";\n', '    }\n', '}']