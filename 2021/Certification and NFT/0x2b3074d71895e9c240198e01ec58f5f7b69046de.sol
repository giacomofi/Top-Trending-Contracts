['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'interface IERC20 {\n', '    // ERC20 Optional Views\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    // Views\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    // Mutative functions\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) external returns (bool);\n', '\n', '    // Events\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '\n', '// https://docs.synthetix.io/contracts/source/contracts/owned\n', 'contract Owned {\n', '    address public owner;\n', '    address public nominatedOwner;\n', '\n', '    constructor(address _owner) public {\n', '        require(_owner != address(0), "Owner address cannot be 0");\n', '        owner = _owner;\n', '        emit OwnerChanged(address(0), _owner);\n', '    }\n', '\n', '    function nominateNewOwner(address _owner) external onlyOwner {\n', '        nominatedOwner = _owner;\n', '        emit OwnerNominated(_owner);\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == nominatedOwner, "You must be nominated before you can accept ownership");\n', '        emit OwnerChanged(owner, nominatedOwner);\n', '        owner = nominatedOwner;\n', '        nominatedOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        _onlyOwner();\n', '        _;\n', '    }\n', '\n', '    function _onlyOwner() private view {\n', '        require(msg.sender == owner, "Only the contract owner may perform this action");\n', '    }\n', '\n', '    event OwnerNominated(address newOwner);\n', '    event OwnerChanged(address oldOwner, address newOwner);\n', '}\n', '\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'contract RewardsDistribution is Owned {\n', '\n', '    /**\n', '     * @notice Authorised address able to call distributeReward\n', '     */\n', '    address public authority;\n', '\n', '    /**\n', '     * @notice Address of reward token\n', '     */\n', '    address public rewardAddress;\n', '\n', '    constructor(\n', '        address _owner,\n', '        address _authority,\n', '        address _rewardAddress\n', '    ) public Owned(_owner) {\n', '        authority = _authority;\n', '        rewardAddress = _rewardAddress;\n', '    }\n', '\n', '    // ========== EXTERNAL SETTERS ==========\n', '\n', '    function setRewardAddress(address _rewardAddress) public onlyOwner {\n', '        rewardAddress = _rewardAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice Set the address of the contract authorised to call distributeReward()\n', '     * @param _authority Address of the authorised calling contract.\n', '     */\n', '    function setAuthority(address _authority) public onlyOwner {\n', '        authority = _authority;\n', '    }\n', '\n', '    function distributeReward(address destination, uint amount) public returns (bool) {\n', '        require(amount > 0, "Nothing to distribute");\n', '        require(destination != address(0), "destination address is not set");\n', '        require(msg.sender == authority, "Caller is not authorised");\n', '        require(rewardAddress != address(0), "reward address is not set");\n', '        require(\n', '            IERC20(rewardAddress).balanceOf(address(this)) >= amount,\n', '            "RewardsDistribution contract does not have enough tokens to distribute"\n', '        );\n', '\n', '        // Transfer the reward token\n', '        IERC20(rewardAddress).transfer(destination, amount);\n', '        // If the contract implements RewardsDistributionRecipient.sol, inform it how many reward token its received.\n', '        bytes memory payload = abi.encodeWithSignature("notifyRewardAmount(uint256)", amount);\n', '        // solhint-disable avoid-low-level-calls\n', '        bool success = destination.call(payload);\n', '        if (!success) {\n', "            // Note: we're ignoring the return value as it will fail for contracts that do not implement RewardsDistributionRecipient.sol\n", '        }\n', '        emit RewardsDistributed(amount);\n', '        return true;\n', '    }\n', '\n', '    /* ========== Events ========== */\n', '    event RewardsDistributed(uint amount);\n', '}']