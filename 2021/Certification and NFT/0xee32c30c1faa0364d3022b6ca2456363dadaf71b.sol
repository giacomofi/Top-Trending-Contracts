['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '// import "@openzeppelin/contracts/GSN/Context.sol";\n', '// import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '// File: contracts/Unifarm.sol\n', '\n', 'contract Admin is Ownable {\n', '    struct tokenInfo {\n', '        bool isExist;\n', '        uint8 decimal;\n', '        uint256 userStakeLimit;\n', '        uint256 maxStake;\n', '    }\n', '\n', '    address[] public tokens;\n', '    mapping(address => address[]) public tokensSequenceList;\n', '    mapping(address => tokenInfo) public tokenDetails;\n', '    mapping(address => mapping(address => uint256))\n', '        public tokenDailyDistribution;\n', '    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '    uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\n', '    uint256 public stakeDuration = 90 days;\n', '\n', '    event TokenDetails(\n', '        address indexed tokenAddress,\n', '        uint256 userStakeimit,\n', '        uint256 totalStakeLimit,\n', '        uint256 Time\n', '    );\n', '\n', '    function addToken(\n', '        address tokenAddress,\n', '        uint256 userMaxStake,\n', '        uint256 totalStake,\n', '        uint8 decimal\n', '    ) public onlyOwner returns (bool) {\n', '        if (tokenDetails[tokenAddress].isExist == false)\n', '            tokens.push(tokenAddress);\n', '\n', '        tokenDetails[tokenAddress].isExist = true;\n', '        tokenDetails[tokenAddress].decimal = decimal;\n', '        tokenDetails[tokenAddress].userStakeLimit = userMaxStake;\n', '        tokenDetails[tokenAddress].maxStake = totalStake;\n', '\n', '        emit TokenDetails(\n', '            tokenAddress,\n', '            userMaxStake,\n', '            totalStake,\n', '            block.timestamp\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function setDailyDistribution(\n', '        address[] memory stakedToken,\n', '        address[] memory rewardToken,\n', '        uint256[] memory dailyDistribution\n', '    ) public onlyOwner {\n', '        require(\n', '            stakedToken.length == rewardToken.length &&\n', '                rewardToken.length == dailyDistribution.length,\n', '            "Invalid Input"\n', '        );\n', '\n', '        for (uint8 i = 0; i < stakedToken.length; i++) {\n', '            require(\n', '                tokenDetails[stakedToken[i]].isExist == true &&\n', '                    tokenDetails[rewardToken[i]].isExist == true,\n', '                "Token not exist"\n', '            );\n', '            tokenDailyDistribution[stakedToken[i]][\n', '                rewardToken[i]\n', '            ] = dailyDistribution[i];\n', '        }\n', '    }\n', '\n', '    function updateSequence(\n', '        address stakedToken,\n', '        address[] memory rewardTokenSequence\n', '    ) public onlyOwner {\n', '        tokensSequenceList[stakedToken] = new address[](0);\n', '\n', '        for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\n', '            require(\n', '                rewardTokenSequence.length <= tokens.length,\n', '                " Invalid Index"\n', '            );\n', '            require(\n', '                tokenDetails[rewardTokenSequence[i]].isExist == true,\n', '                "Token Not Exist"\n', '            );\n', '            tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\n', '        }\n', '    }\n', '\n', '    function updateToken(\n', '        address tokenAddress,\n', '        uint256 userMaxStake,\n', '        uint256 totalStake\n', '    ) public onlyOwner {\n', '        require(tokenDetails[tokenAddress].isExist == true, "Token Not Exist");\n', '        tokenDetails[tokenAddress].userStakeLimit = userMaxStake;\n', '        tokenDetails[tokenAddress].maxStake = totalStake;\n', '        emit TokenDetails(\n', '            tokenAddress,\n', '            userMaxStake,\n', '            totalStake,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function updateStakeDuration(uint256 durationTime) public onlyOwner {\n', '        stakeDuration = durationTime;\n', '    }\n', '\n', '    function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\n', '        intervalDays = new uint256[](0);\n', '\n', '        for (uint8 i = 0; i < _interval.length; i++) {\n', '            require(stakeDuration > _interval[i], "Invalid Interval Day");\n', '            intervalDays.push(_interval[i]);\n', '        }\n', '    }\n', '\n', '    function changeTokenBlockedStatus(\n', '        address stakedToken,\n', '        address rewardToken,\n', '        bool status\n', '    ) public onlyOwner {\n', '        require(\n', '            tokenDetails[stakedToken].isExist == true &&\n', '                tokenDetails[rewardToken].isExist == true,\n', '            "Token not exist"\n', '        );\n', '        tokenBlockedStatus[stakedToken][rewardToken] = status;\n', '        emit TokenDetails(\n', '            stakedToken,\n', '            tokenDetails[stakedToken].userStakeLimit,\n', '            tokenDetails[stakedToken].maxStake,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function safeWithdraw(address tokenAddress, uint256 amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(\n', '            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '            "Insufficient Balance"\n', '        );\n', '        IERC20(tokenAddress).transfer(owner(), amount);\n', '    }\n', '}\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', 'contract Unifarm is Admin {\n', '    using SafeMath for uint256;\n', '\n', '    struct stakeInfo {\n', '        address user;\n', '        address[] tokenAddress;\n', '        bool[] isActive;\n', '        uint256[] stakeId;\n', '        uint256[] stakedAmount;\n', '        uint256[] startTime;\n', '        uint256[] endTime;\n', '    }\n', '\n', '    mapping(address => stakeInfo) public stakingDetails;\n', '    mapping(address => uint256) public totalStaking;\n', '    mapping(address => mapping(address => uint256)) public tokenRewardsEarned;\n', '    uint256 public constant DAYS = 1 days;\n', '\n', '    event Stake(\n', '        address indexed userAddress,\n', '        address indexed tokenAddress,\n', '        uint256 stakedAmount,\n', '        uint256 Time\n', '    );\n', '    event Claim(\n', '        address indexed userAddress,\n', '        address indexed stakedTokenAddress,\n', '        address indexed tokenAddress,\n', '        uint256 claimRewards,\n', '        uint256 Time\n', '    );\n', '    event UnStake(\n', '        address indexed userAddress,\n', '        address indexed unStakedtokenAddress,\n', '        uint256 unStakedAmount,\n', '        uint256 Time\n', '    );\n', '\n', '    function stake(address tokenAddress, uint256 amount) external {\n', '        require(\n', '            tokenDetails[tokenAddress].isExist == true,\n', '            "STAKE : Token is not Exist"\n', '        );\n', '        require(\n', '            amount <= tokenDetails[tokenAddress].userStakeLimit,\n', '            "STAKE : Amount should be within permit"\n', '        );\n', '        require(\n', '            totalStaking[tokenAddress].add(amount) <=\n', '                tokenDetails[tokenAddress].maxStake,\n', '            "STAKE : Maxlimit exceeds"\n', '        );\n', '\n', '        stakingDetails[msg.sender].stakeId.push(\n', '            stakingDetails[msg.sender].stakeId.length\n', '        );\n', '        stakingDetails[msg.sender].isActive.push(true);\n', '        stakingDetails[msg.sender].user = msg.sender;\n', '        stakingDetails[msg.sender].tokenAddress.push(tokenAddress);\n', '        stakingDetails[msg.sender].stakedAmount.push(amount);\n', '        stakingDetails[msg.sender].startTime.push(block.timestamp);\n', '        stakingDetails[msg.sender].endTime.push(\n', '            block.timestamp.add(stakeDuration)\n', '        );\n', '\n', '        totalStaking[tokenAddress] = totalStaking[tokenAddress].add(amount);\n', '        IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\n', '        emit Stake(msg.sender, tokenAddress, amount, block.timestamp);\n', '    }\n', '\n', '    function viewAvailableRewards(\n', '        address user,\n', '        uint256 stakeId,\n', '        address rewardTokenAddress\n', '    ) public view returns (uint256 availStake, uint256 availReward) {\n', '        require(\n', '            stakingDetails[user].stakedAmount[stakeId] > 0,\n', '            "CLAIM : Insufficient Staked Amount"\n', '        );\n', '\n', '        uint256 rewardsEarned;\n', '        uint256 interval;\n', '        uint256 noOfDays;\n', '\n', '        if (stakingDetails[user].endTime[stakeId] > block.timestamp) {\n', '            uint256 endOfProfit = block.timestamp;\n', '            interval = endOfProfit.sub(stakingDetails[user].startTime[stakeId]);\n', '        } else if (stakingDetails[user].endTime[stakeId] <= block.timestamp) {\n', '            uint256 endOfProfit = stakingDetails[user].endTime[stakeId];\n', '            interval = endOfProfit.sub(stakingDetails[user].startTime[stakeId]);\n', '        }\n', '\n', '        if (interval >= DAYS) {\n', '            noOfDays = interval.div(DAYS);\n', '            rewardsEarned = noOfDays.mul(\n', '                getOneDayReward(\n', '                    stakingDetails[user].stakedAmount[stakeId],\n', '                    stakingDetails[user].tokenAddress[stakeId],\n', '                    stakingDetails[user].tokenAddress[stakeId]\n', '                )\n', '            );\n', '\n', '            availStake = rewardsEarned;\n', '\n', '            uint8 i = 1;\n', '            while (i < intervalDays.length) {\n', '                if (noOfDays >= intervalDays[i]) {\n', '                    uint256 balDays = (noOfDays.sub(intervalDays[i].sub(1)));\n', '\n', '                    address rewardToken =\n', '                        tokensSequenceList[\n', '                            stakingDetails[user].tokenAddress[stakeId]\n', '                        ][i];\n', '\n', '                    if (\n', '                        rewardToken !=\n', '                        stakingDetails[user].tokenAddress[stakeId] &&\n', '                        tokenBlockedStatus[\n', '                            stakingDetails[user].tokenAddress[stakeId]\n', '                        ][rewardToken] ==\n', '                        false\n', '                    ) {\n', '                        if (rewardToken == rewardTokenAddress) {\n', '                            rewardsEarned = balDays.mul(\n', '                                getOneDayReward(\n', '                                    stakingDetails[user].stakedAmount[stakeId],\n', '                                    stakingDetails[user].tokenAddress[stakeId],\n', '                                    rewardToken\n', '                                )\n', '                            );\n', '\n', '                            availReward = rewardsEarned;\n', '                            return (availStake, availReward);\n', '                        }\n', '                    }\n', '                    i = i + 1; \n', '                } else {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function claimRewards(uint256 stakeId) internal {\n', '        require(\n', '            stakingDetails[msg.sender].stakedAmount[stakeId] > 0,\n', '            "CLAIM : Insufficient Staked Amount"\n', '        );\n', '\n', '        uint256 rewardsEarned;\n', '        uint256 interval;\n', '        uint256 noOfDays;\n', '\n', '        if (stakingDetails[msg.sender].endTime[stakeId] > block.timestamp) {\n', '            uint256 endOfProfit = block.timestamp;\n', '            interval = endOfProfit.sub(\n', '                stakingDetails[msg.sender].startTime[stakeId]\n', '            );\n', '        } else if (\n', '            stakingDetails[msg.sender].endTime[stakeId] <= block.timestamp\n', '        ) {\n', '            uint256 endOfProfit = stakingDetails[msg.sender].endTime[stakeId];\n', '            interval = endOfProfit.sub(\n', '                stakingDetails[msg.sender].startTime[stakeId]\n', '            );\n', '        }\n', '\n', '        if (interval >= DAYS) {\n', '            noOfDays = interval.div(DAYS);\n', '            rewardsEarned = noOfDays.mul(\n', '                getOneDayReward(\n', '                    stakingDetails[msg.sender].stakedAmount[stakeId],\n', '                    stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                    stakingDetails[msg.sender].tokenAddress[stakeId]\n', '                )\n', '            );\n', '            sendToken(\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                rewardsEarned\n', '            );\n', '            uint8 i = 1;\n', '            while (i < intervalDays.length) {\n', '                if (noOfDays >= intervalDays[i]) {\n', '                    uint256 balDays = (noOfDays.sub(intervalDays[i].sub(1)));\n', '\n', '                    address rewardToken =\n', '                        tokensSequenceList[\n', '                            stakingDetails[msg.sender].tokenAddress[stakeId]\n', '                        ][i];\n', '\n', '                    if (\n', '                        rewardToken !=\n', '                        stakingDetails[msg.sender].tokenAddress[stakeId] &&\n', '                        tokenBlockedStatus[\n', '                            stakingDetails[msg.sender].tokenAddress[stakeId]\n', '                        ][rewardToken] ==\n', '                        false\n', '                    ) {\n', '                        rewardsEarned = balDays.mul(\n', '                            getOneDayReward(\n', '                                stakingDetails[msg.sender].stakedAmount[\n', '                                    stakeId\n', '                                ],\n', '                                stakingDetails[msg.sender].tokenAddress[\n', '                                    stakeId\n', '                                ],\n', '                                rewardToken\n', '                            )\n', '                        );\n', '                        sendToken(\n', '                            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                            rewardToken,\n', '                            rewardsEarned\n', '                        );\n', '                    }\n', '                    i = i + 1;\n', '                } else {\n', '                    break;\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    function getOneDayReward(\n', '        uint256 _stakedAmount,\n', '        address _stakedToken,\n', '        address _rewardToken\n', '    ) public view returns (uint256 reward) {\n', '        reward = (\n', '            _stakedAmount.mul(\n', '                tokenDailyDistribution[_stakedToken][_rewardToken]\n', '            )\n', '        )\n', '            .div(tokenDetails[_stakedToken].maxStake);\n', '    }\n', '\n', '    function sendToken(\n', '        address stakedToken,\n', '        address tokenAddress,\n', '        uint256 amount\n', '    ) internal {\n', '        if (tokenAddress != address(0)) {\n', '            require(\n', '                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '                "SEND : Insufficient Balance"\n', '            );\n', '            IERC20(tokenAddress).transfer(msg.sender, amount);\n', '\n', '            emit Claim(\n', '                msg.sender,\n', '                stakedToken,\n', '                tokenAddress,\n', '                amount,\n', '                block.timestamp\n', '            );\n', '        }\n', '    }\n', '\n', '    function unStake(uint256 stakeId) external returns (bool) {\n', '        claimRewards(stakeId);\n', '\n', '        if (stakingDetails[msg.sender].stakedAmount[stakeId] > 0) {\n', '            require(\n', '                IERC20(stakingDetails[msg.sender].tokenAddress[stakeId])\n', '                    .balanceOf(address(this)) >=\n', '                    stakingDetails[msg.sender].stakedAmount[stakeId],\n', '                "UNSTAKE : Insufficient Balance"\n', '            );\n', '            IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).transfer(\n', '                msg.sender,\n', '                stakingDetails[msg.sender].stakedAmount[stakeId]\n', '            );\n', '            stakingDetails[msg.sender].stakedAmount[stakeId] = 0;\n', '            stakingDetails[msg.sender].isActive[stakeId] = false;\n', '            stakingDetails[msg.sender].endTime[stakeId] = block.timestamp;\n', '\n', '            emit UnStake(\n', '                msg.sender,\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                stakingDetails[msg.sender].stakedAmount[stakeId],\n', '                block.timestamp\n', '            );\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function viewStakingDetails(address _user)\n', '        public\n', '        view\n', '        returns (\n', '            address[] memory,\n', '            bool[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory\n', '        )\n', '    {\n', '        return (\n', '            stakingDetails[_user].tokenAddress,\n', '            stakingDetails[_user].isActive,\n', '            stakingDetails[_user].stakeId,\n', '            stakingDetails[_user].stakedAmount,\n', '            stakingDetails[_user].startTime,\n', '            stakingDetails[_user].endTime\n', '        );\n', '    }\n', '}']