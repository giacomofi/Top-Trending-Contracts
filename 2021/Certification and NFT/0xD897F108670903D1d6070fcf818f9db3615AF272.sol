['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', '// hevm: flattened sources of src/VoteDelegateFactory.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity =0.6.12;\n', '\n', '////// src/VoteDelegate.sol\n', '\n', '// Copyright (C) 2021 Dai Foundation\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '// VoteDelegate - delegate your vote\n', '/* pragma solidity 0.6.12; */\n', '\n', 'interface TokenLike_1 {\n', '    function approve(address, uint256) external returns (bool);\n', '    function pull(address, uint256) external;\n', '    function push(address, uint256) external;\n', '}\n', '\n', 'interface ChiefLike_1 {\n', '    function GOV() external view returns (TokenLike_1);\n', '    function IOU() external view returns (TokenLike_1);\n', '    function lock(uint256) external;\n', '    function free(uint256) external;\n', '    function vote(address[] calldata) external returns (bytes32);\n', '    function vote(bytes32) external;\n', '}\n', '\n', 'interface PollingLike {\n', '    function withdrawPoll(uint256) external;\n', '    function vote(uint256, uint256) external;\n', '    function withdrawPoll(uint256[] calldata) external;\n', '    function vote(uint256[] calldata, uint256[] calldata) external;\n', '}\n', '\n', 'contract VoteDelegate {\n', '    mapping(address => uint256) public stake;\n', '    address     public immutable delegate;\n', '    TokenLike_1   public immutable gov;\n', '    TokenLike_1   public immutable iou;\n', '    ChiefLike_1   public immutable chief;\n', '    PollingLike public immutable polling;\n', '    uint256     public immutable expiration;\n', '\n', '    event Lock(address indexed usr, uint256 wad);\n', '    event Free(address indexed usr, uint256 wad);\n', '\n', '    constructor(address _chief, address _polling, address _delegate) public {\n', '        chief = ChiefLike_1(_chief);\n', '        polling = PollingLike(_polling);\n', '        delegate = _delegate;\n', '        expiration = block.timestamp + 365 days;\n', '\n', '        TokenLike_1 _gov = gov = ChiefLike_1(_chief).GOV();\n', '        TokenLike_1 _iou = iou = ChiefLike_1(_chief).IOU();\n', '\n', '        _gov.approve(_chief, type(uint256).max);\n', '        _iou.approve(_chief, type(uint256).max);\n', '    }\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "VoteDelegate/add-overflow");\n', '    }\n', '\n', '    modifier delegate_auth() {\n', '        require(msg.sender == delegate, "VoteDelegate/sender-not-delegate");\n', '        _;\n', '    }\n', '\n', '    modifier live() {\n', '        require(block.timestamp < expiration, "VoteDelegate/delegation-contract-expired");\n', '        _;\n', '    }\n', '\n', '    function lock(uint256 wad) external live {\n', '        stake[msg.sender] = add(stake[msg.sender], wad);\n', '        gov.pull(msg.sender, wad);\n', '        chief.lock(wad);\n', '        iou.push(msg.sender, wad);\n', '\n', '        emit Lock(msg.sender, wad);\n', '    }\n', '\n', '    function free(uint256 wad) external {\n', '        require(stake[msg.sender] >= wad, "VoteDelegate/insufficient-stake");\n', '\n', '        stake[msg.sender] -= wad;\n', '        iou.pull(msg.sender, wad);\n', '        chief.free(wad);\n', '        gov.push(msg.sender, wad);\n', '\n', '        emit Free(msg.sender, wad);\n', '    }\n', '\n', '    function vote(address[] memory yays) external delegate_auth live returns (bytes32 result) {\n', '        result = chief.vote(yays);\n', '    }\n', '\n', '    function vote(bytes32 slate) external delegate_auth live {\n', '        chief.vote(slate);\n', '    }\n', '\n', '    // Polling vote\n', '    function votePoll(uint256 pollId, uint256 optionId) external delegate_auth live {\n', '        polling.vote(pollId, optionId);\n', '    }\n', '\n', '    function votePoll(uint256[] calldata pollIds, uint256[] calldata optionIds) external delegate_auth live {\n', '        polling.vote(pollIds, optionIds);\n', '    }\n', '}\n', '\n', '////// src/VoteDelegateFactory.sol\n', '\n', '// Copyright (C) 2021 Dai Foundation\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '// VoteDelegateFactory - create and keep record of delegats\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import "./VoteDelegate.sol"; */\n', '\n', 'contract VoteDelegateFactory {\n', '    address public immutable chief;\n', '    address public immutable polling;\n', '    mapping(address => address) public delegates;\n', '\n', '    event CreateVoteDelegate(\n', '        address indexed delegate,\n', '        address indexed voteDelegate\n', '    );\n', '\n', '    constructor(address _chief, address _polling) public {\n', '        chief = _chief;\n', '        polling = _polling;\n', '    }\n', '\n', '    function isDelegate(address guy) public view returns (bool) {\n', '        return delegates[guy] != address(0);\n', '    }\n', '\n', '    function create() external returns (address voteDelegate) {\n', '        require(!isDelegate(msg.sender), "VoteDelegateFactory/sender-is-already-delegate");\n', '\n', '        voteDelegate = address(new VoteDelegate(chief, polling, msg.sender));\n', '        delegates[msg.sender] = voteDelegate;\n', '        emit CreateVoteDelegate(msg.sender, voteDelegate);\n', '    }\n', '}']