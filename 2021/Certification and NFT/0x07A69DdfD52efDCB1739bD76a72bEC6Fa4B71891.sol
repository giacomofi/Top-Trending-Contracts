['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract FundRaising is Ownable {\n', '\n', '    // use mantissa (ori * 10**18) to reserve precision\n', '    // price means x usdt per token\n', '    mapping(uint256 => uint256) public prices;\n', '    \n', '  \n', '    \n', '    address public usdt;\n', '    address public mis;\n', '\n', '    struct Round {\n', '        uint256 price;\n', '        uint start;\n', '        uint duration;\n', '        uint usdtMin;\n', '        uint usdtMax;\n', '        uint supply;\n', '    }\n', '    \n', '    struct Record {\n', '        uint256 lockedAmount;\n', '        uint256 lockStartTs;\n', '        bool useUnlockB;\n', '    }\n', '    // user => record amount\n', '    mapping(address => uint256) public recordsLen;\n', '    mapping(address => mapping(uint256 => Record)) public records;\n', '    // round, account => paid\n', '    mapping(uint => mapping(address => bool)) public paid;\n', '    Round[] public rounds;\n', '    // round => bought\n', '    mapping(uint256 => uint256) public bought;\n', '\n', '    // ============ Init ============ //\n', '    \n', '    constructor(address usdt_, address mis_) {\n', '        usdt = usdt_;\n', '        mis = mis_;\n', '\n', '        uint256 usdtDecimals = IERC20Metadata(usdt).decimals();\n', '        uint256 misDecimals = IERC20Metadata(mis).decimals();\n', '        \n', '        // 150 * 10**16 means 1.5 * 10**18\n', '\n', '        rounds.push(Round(\n', '            150 * 10**(16 + usdtDecimals - misDecimals),\n', '            1619161200, // start\n', '            72 * 3600,\n', '            20000 * 10**usdtDecimals,\n', '            50000 * 10**usdtDecimals,\n', '            270000 * 10**usdtDecimals // token supply in usdt\n', '        ));\n', '        rounds.push(Round(\n', '            200 * 10**(16 + usdtDecimals - misDecimals),\n', '            1619420400, // start\n', '            72 * 3600,\n', '            100 * 10**usdtDecimals,\n', '            1000 * 10**usdtDecimals,\n', '            216000 * 10**usdtDecimals // token supply in usdt\n', '        ));\n', '        rounds.push(Round(\n', '            250 * 10**(16 + usdtDecimals - misDecimals),\n', '            1619679600, // start\n', '            72 * 3600,\n', '            100 * 10**usdtDecimals,\n', '            1000 * 10**usdtDecimals,\n', '            180000 * 10**usdtDecimals // token supply in usdt\n', '        ));\n', '    }\n', '\n', '    // ============ Lock Rules ============ //\n', '    \n', '    // cliff\n', '    // n: now\n', '    // t: release ts\n', '    // a: total amount\n', '    // r: release rate\n', '    function cliff(uint256 n, uint256 t, uint256 a, uint256 r) internal pure returns(uint256) {\n', '        uint256 total = a * r / 10**18;\n', '        return n >= t ? total : 0;\n', '    }\n', '    \n', '    // linear\n', '    // n: now\n', '    // t0: release start ts\n', '    // t1: release end ts\n', '    // s: step length\n', '    // a: total amount\n', '    // r: release rate\n', '    function linear(uint256 n, uint256 t0, uint256 t1, uint256 s, uint256 a, uint256 r) internal pure returns(uint256) {\n', '        uint256 total = a * r / 10**18;\n', '        if (n < t0) {\n', '            return 0;\n', '        }\n', '        else if (n >= t1) {\n', '            return total;\n', '        }\n', '        else {\n', '            uint256 perStep = total / ((t1 - t0) / s);\n', '            uint passedSteps = (n - t0) / s;\n', '            return perStep * passedSteps;\n', '        }\n', '    }\n', '\n', '    function getUnlockA(uint totalLocked, uint lockStartTs) internal view returns(uint) {\n', '        uint256 n = block.timestamp;\n', '        uint256 t0 = lockStartTs + 1 * 30 * 86400;\n', '        uint256 t1 = lockStartTs + 6 * 30 * 86400;\n', '        uint256 r0 = 50 * 10**16;\n', '        uint256 r1 = 50 * 10**16;\n', '        uint256 s = 30 * 86400;\n', '        return cliff(n, t0, totalLocked, r0) + linear(n, t0, t1, s, totalLocked, r1);\n', '    }\n', '    \n', '    function getUnlockB(uint totalLocked, uint lockStartTs) internal view returns(uint) {\n', '        uint256 n = block.timestamp;\n', '        uint256 t0 = lockStartTs;\n', '        uint256 t1 = lockStartTs + 10 * 30 * 86400;\n', '        uint256 r = 100 * 10**16;\n', '        uint256 s = 30 * 86400;\n', '        return linear(n, t0, t1, s, totalLocked, r);\n', '    }\n', '\n', '    // ============ Admin ============ //\n', '\n', '    function deposit(address token, uint256 amount) public onlyOwner {\n', '        safeTransferFrom(token, msg.sender, address(this), amount);\n', '    }\n', '\n', '    function withdraw(address token, uint256 amount) public onlyOwner {\n', '        safeTransfer(token, msg.sender, amount);\n', '    }\n', '\n', '    function updateRound(\n', '        uint256 index,\n', '        uint256 price,\n', '        uint256 start,\n', '        uint256 duration,\n', '        uint256 usdtMin,\n', '        uint256 usdtMax,\n', '        uint256 supply\n', '    ) public onlyOwner {\n', '        Round memory round = Round(price, start, duration, usdtMin, usdtMax, supply);\n', '        if (index >= 0 && index < rounds.length) {\n', '            rounds[index] = round;\n', '        }\n', '        else {\n', '            rounds.push(round);\n', '        }\n', '    }\n', '    \n', '    // ============ Anyone ============ //    \n', '\n', '    function _useUnlockPlanB(uint256 usdtAmount) public view returns(bool) {\n', '        return usdtAmount >= 20000 * 10**IERC20Metadata(usdt).decimals();\n', '    }\n', '    \n', '    function buy(uint256 roundId, uint256 usdtAmount) public {\n', '        \n', '        require(roundId < rounds.length, "WRONG_ROUND_ID");\n', '        require(!paid[roundId][msg.sender], "ALREADY_BOUGHT");\n', '        Round storage round = rounds[roundId];\n', '        require(usdtAmount >= round.usdtMin, "LESS_THAN_MIN");\n', '        require(usdtAmount <= round.usdtMax, "MORE_THAN_MAX");\n', '        require(bought[roundId] + usdtAmount <= round.supply, "EXCEED_SUPPLY");\n', '        \n', '        // transfer\n', '        safeTransferFrom(usdt,msg.sender, address(this), usdtAmount);\n', '        \n', '        // record\n', '        \n', '        records[msg.sender][recordsLen[msg.sender]] = Record(\n', '            10**18 * usdtAmount / round.price,\n', '            round.start + round.duration,\n', '            _useUnlockPlanB(usdtAmount)\n', '        );\n', '        recordsLen[msg.sender] += 1;\n', '        \n', '        // post\n', '        paid[roundId][msg.sender] = true;\n', '        bought[roundId] += usdtAmount;\n', '    }\n', '    \n', '    mapping(address => uint256) public claimed;\n', '    \n', '    function available(address account) public view returns(uint256) {\n', '        uint len = recordsLen[account];\n', '        uint total = 0;\n', '        for(uint256 i=0;i< len;i++) {\n', '            Record storage record = records[account][i];\n', '            if (record.useUnlockB) {\n', '                total += getUnlockB(record.lockedAmount, record.lockStartTs);\n', '            }\n', '            else {\n', '                total += getUnlockA(record.lockedAmount, record.lockStartTs);\n', '            }\n', '        }\n', '        return total - claimed[account];\n', '    }\n', '    \n', '    function claim() public {\n', '        uint a = available(msg.sender);\n', '        require(a > 0, "NOTHING_TO_CLAIM");\n', '        safeTransfer(mis, msg.sender, a);\n', '        claimed[msg.sender] += a;\n', '    }\n', '\n', '    function safeApprove(address token, address to, uint value) public {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) public {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) public {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) public {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}']