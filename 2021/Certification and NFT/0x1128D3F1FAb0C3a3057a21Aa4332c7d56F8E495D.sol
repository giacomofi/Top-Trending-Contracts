['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-12\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() internal {\n', '    _owner = msg.sender;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @return the address of the owner.\n', '   */\n', '  function owner() public view returns(address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(isOwner());\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @return true if `msg.sender` is the owner of the contract.\n', '   */\n', '  function isOwner() public view returns(bool) {\n', '    return msg.sender == _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   * @notice Renouncing to ownership will leave the contract without an owner.\n', '   * It will not be possible to call the functions with the `onlyOwner`\n', '   * modifier anymore.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    _transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address newOwner) internal {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File: market-oracle/contracts/MedianOracle.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'interface IOracle {\n', '    function getData() external returns (uint256, bool);\n', '}\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * @title Median Oracle\n', ' *\n', " * @notice Provides a value onchain that's aggregated from a whitelisted set of\n", ' *         providers.\n', ' */\n', 'contract MarketPriceOracle is Ownable, IOracle {\n', '    \n', '    uint256 public currentMarketPrice;\n', '    /**\n', '     * @notice Pushes a targetPrice\n', '     * @param currentMarketPrice_ is expected to be 18 decimal fixed point number in WEI\n', '     */\n', '    function pushReport(uint256 currentMarketPrice_) external onlyOwner\n', '    {\n', '        //\n', '        currentMarketPrice = currentMarketPrice_;\n', '    }\n', '\n', '    /**\n', '    * @return AggregatedValue: return the reported values.\n', '    *         valid: Boolean indicating an aggregated value was computed successfully.\n', '    */\n', '    function getData()\n', '        external\n', '        returns (uint256, bool)\n', '    {\n', '        \n', '        return (currentMarketPrice, true);\n', '    }\n', '\n', '}']