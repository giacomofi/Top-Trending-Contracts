['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-29\n', '*/\n', '\n', '//\n', '//        __  __    __  ________  _______    ______   ________ \n', '//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n', '//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \n', '//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \n', '// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \n', '// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \n', '// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \n', '// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n', '//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \n', '//\n', '// dHEDGE DAO - https://dhedge.org\n', '//\n', '// MIT License\n', '// ===========\n', '//\n', '// Copyright (c) 2020-2021 dHEDGE DAO\n', '//\n', '// Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// of this software and associated documentation files (the "Software"), to deal\n', '// in the Software without restriction, including without limitation the rights\n', '// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// copies of the Software, and to permit persons to whom the Software is\n', '// furnished to do so, subject to the following conditions:\n', '//\n', '// The above copyright notice and this permission notice shall be included in all\n', '// copies or substantial portions of the Software.\n', '//\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '//\n', '\n', '// File: contracts/ISynthetix.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface ISynthetix {\n', '    function exchange(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeWithTracking(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function synths(bytes32 key)\n', '        external\n', '        view\n', '        returns (address synthTokenAddress);\n', '\n', '    function settle(bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint256 reclaimed,\n', '            uint256 refunded,\n', '            uint256 numEntriesSettled\n', '        );\n', '}\n', '\n', '// File: contracts/ISynth.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface ISynth {\n', '    function proxy() external view returns (address);\n', '\n', '    // Mutative functions\n', '    function transferAndSettle(address to, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function transferFromAndSettle(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '}\n', '\n', '// File: contracts/IAddressResolver.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IAddressResolver {\n', '    function getAddress(bytes32 name) external view returns (address);\n', '}\n', '\n', '// File: contracts/IExchanger.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IExchanger {\n', '\n', '    function settle(address from, bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint reclaimed,\n', '            uint refunded,\n', '            uint numEntries\n', '        );\n', '\n', '    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey) external view returns (uint);\n', '\n', '    function settlementOwing(address account, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (\n', '            uint reclaimAmount,\n', '            uint rebateAmount,\n', '            uint numEntries\n', '        );\n', '\n', '}\n', '\n', '// File: contracts/IExchangeRates.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IExchangeRates {\n', '    function effectiveValue(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external view returns (uint256);\n', '\n', '    function rateForCurrency(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', '// File: contracts/IDHedge.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IDHedge {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function getSupportedAssets() external view returns (bytes32[] memory);\n', '    function assetValue(bytes32 key) external view returns (uint256);\n', '    function getAssetProxy(bytes32 key) external view returns (address);\n', '    function setLastDeposit(address investor) external;\n', '    function tokenPriceAtLastFeeMint() external view returns (uint256);\n', '    function availableManagerFee() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/IPoolDirectory.sol\n', '\n', '//\n', '//        __  __    __  ________  _______    ______   ________ \n', '//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n', '//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \n', '//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \n', '// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \n', '// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \n', '// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \n', '// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n', '//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \n', '//\n', '// dHEDGE DAO - https://dhedge.org\n', '//\n', '// MIT License\n', '// ===========\n', '//\n', '// Copyright (c) 2020 dHEDGE DAO\n', '//\n', '// Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// of this software and associated documentation files (the "Software"), to deal\n', '// in the Software without restriction, including without limitation the rights\n', '// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// copies of the Software, and to permit persons to whom the Software is\n', '// furnished to do so, subject to the following conditions:\n', '//\n', '// The above copyright notice and this permission notice shall be included in all\n', '// copies or substantial portions of the Software.\n', '//\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '//\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IPoolDirectory {\n', '    function isPool(address pool) external view returns (bool);\n', '}\n', '\n', '// File: contracts/IHasFeeInfo.sol\n', '\n', '//\n', '//        __  __    __  ________  _______    ______   ________ \n', '//       /  |/  |  /  |/        |/       \\  /      \\ /        |\n', '//   ____$$ |$$ |  $$ |$$$$$$$$/ $$$$$$$  |/$$$$$$  |$$$$$$$$/ \n', '//  /    $$ |$$ |__$$ |$$ |__    $$ |  $$ |$$ | _$$/ $$ |__    \n', '// /$$$$$$$ |$$    $$ |$$    |   $$ |  $$ |$$ |/    |$$    |   \n', '// $$ |  $$ |$$$$$$$$ |$$$$$/    $$ |  $$ |$$ |$$$$ |$$$$$/    \n', '// $$ \\__$$ |$$ |  $$ |$$ |_____ $$ |__$$ |$$ \\__$$ |$$ |_____ \n', '// $$    $$ |$$ |  $$ |$$       |$$    $$/ $$    $$/ $$       |\n', '//  $$$$$$$/ $$/   $$/ $$$$$$$$/ $$$$$$$/   $$$$$$/  $$$$$$$$/ \n', '//\n', '// dHEDGE DAO - https://dhedge.org\n', '//\n', '// MIT License\n', '// ===========\n', '//\n', '// Copyright (c) 2020 dHEDGE DAO\n', '//\n', '// Permission is hereby granted, free of charge, to any person obtaining a copy\n', '// of this software and associated documentation files (the "Software"), to deal\n', '// in the Software without restriction, including without limitation the rights\n', '// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '// copies of the Software, and to permit persons to whom the Software is\n', '// furnished to do so, subject to the following conditions:\n', '//\n', '// The above copyright notice and this permission notice shall be included in all\n', '// copies or substantial portions of the Software.\n', '//\n', '// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '//\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IHasFeeInfo {\n', '    // Manager fee\n', '    function getPoolManagerFee(address pool) external view returns (uint256, uint256);\n', '    function setPoolManagerFeeNumerator(address pool, uint256 numerator) external;\n', '\n', '    function getMaximumManagerFeeNumeratorChange() external view returns (uint256);\n', '    function getManagerFeeNumeratorChangeDelay() external view returns (uint256);\n', '   \n', '    // Exit fee\n', '    function getExitFee() external view returns (uint256, uint256);\n', '    function getExitFeeCooldown() external view returns (uint256);\n', '\n', '    // Synthetix tracking\n', '    function getTrackingCode() external view returns (bytes32);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/Initializable.sol\n', '\n', 'pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeSafe is Initializable, ContextUpgradeSafe {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '\n', '\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '// File: @openzeppelin/contracts-ethereum-package/contracts/cryptography/ECDSA.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n', '            revert("ECDSA: invalid signature \'s\' value");\n', '        }\n', '\n', '        if (v != 27 && v != 28) {\n', '            revert("ECDSA: invalid signature \'v\' value");\n', '        }\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: contracts/DHPTSwap.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DHPTSwap is Initializable, OwnableUpgradeSafe {\n', '    using SafeMath for uint256;\n', '\n', '    IAddressResolver public addressResolver;\n', '    address public factory;\n', '    address public oracle;\n', '\n', '    bool public enableBuy;\n', '    bool public enableSell;\n', '    bool public enableOracleBuy;\n', '    bool public enableOracleSell;\n', '    \n', '    uint8 public oracleBlockBias;\n', '\n', '    mapping(address => uint256) public dhptWhitelist;\n', '\n', '    bytes32 private constant _EXCHANGE_RATES_KEY = "ExchangeRates";\n', '    bytes32 private constant _EXCHANGER_KEY = "Exchanger";\n', '    bytes32 private constant _SYNTHETIX_KEY = "Synthetix";\n', '    bytes32 private constant _SUSD_KEY = "sUSD";\n', '    address public dao;\n', '    mapping(bytes32 => bool) public dhptFromEnabled;\n', '    mapping(address => uint8) public stableCoins;\n', '\n', '    event SellDHPT(\n', '        address fundAddress,\n', '        address investor,\n', '        uint256 susdAmount,\n', '        uint256 dhptAmount,\n', '        uint256 tokenPrice,\n', '        uint256 time,\n', '        bool oracleSwap\n', '    );\n', '\n', '    event BuyDHPT(\n', '        address fundAddress,\n', '        address investor,\n', '        uint256 susdAmount,\n', '        uint256 dhptAmount,\n', '        uint256 tokenPrice,\n', '        uint256 time,\n', '        bool oracleSwap\n', '    );\n', '\n', '    event SwapDHPT(\n', '        address fundAddressA,\n', '        uint256 tokenPriceA,\n', '        uint256 amountA,\n', '        address fundAddressB,\n', '        uint256 tokenPriceB,\n', '        uint256 amountB,\n', '        address investor,\n', '        uint256 time,\n', '        bool oracleSwap\n', '    );\n', '\n', '    function initialize(IAddressResolver _addressResolver, address _factory, address _oracle) public initializer {\n', '        OwnableUpgradeSafe.__Ownable_init();\n', '\n', '        enableBuy = true;\n', '        enableSell = true;\n', '        enableOracleBuy = false;\n', '        enableOracleSell = false;\n', '\n', '        addressResolver = _addressResolver;\n', '        factory = _factory;\n', '        oracle = _oracle;\n', '        oracleBlockBias = 25;\n', '    }\n', '\n', '    function setStableCoin(address stableCoin, uint8 tokenPrecision) public onlyOwner {\n', '        stableCoins[stableCoin] = tokenPrecision;\n', '    }\n', '\n', '    // BUY & SELL\n', '\n', '    // user selling DHPT for sUSD\n', '    function sellDHPT(address poolAddress, uint256 dhptAmount, address stableCoin) public {\n', '        uint8 stableCoinPrecision = stableCoins[stableCoin];\n', '        require(stableCoinPrecision > 0, "selected stable coin is disabled");\n', '\n', '        require(enableSell, "sell disabled");\n', '        require(_canSellDhpt(poolAddress, dhptAmount), "unable to sell tokens");\n', '        require(dhptAmount > 10000, "amount too small");\n', '       \n', '        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\n', '        require(poolPrice > 0, "poolPrice is not valid value");\n', '\n', '        require(\n', '            IERC20(poolAddress).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                dhptAmount\n', '            ),\n', '            "token transfer failed"\n', '        );\n', '\n', '        uint256 precisionDiff = uint(18+18-stableCoinPrecision);\n', '        uint256 stableCoinAmount = dhptAmount.mul(poolPrice).div(10**uint(precisionDiff));\n', '\n', '        require(\n', '            IERC20(stableCoin).transfer(\n', '                msg.sender, stableCoinAmount\n', '            ),\n', '            "stable coin transfer failed"\n', '        );\n', '        \n', '        emit SellDHPT(\n', '            poolAddress,\n', '            msg.sender,\n', '            stableCoinAmount,\n', '            dhptAmount,\n', '            poolPrice,\n', '            block.timestamp,\n', '            false\n', '        );\n', '    }\n', '\n', '    // user buying DHPT for sUSD. consider DHPT 24h lockup\n', '    function buyDHPT(address poolAddress, address stableCoin, uint256 stableCoinAmount) public {\n', '        uint8 stableCoinPrecision = stableCoins[stableCoin];\n', '        require(stableCoinPrecision > 0, "selected stable coin is disabled");\n', '        \n', '        require(enableBuy, "buy disabled");\n', '        require(dhptWhitelist[poolAddress] > 0, "pool not whitelisted");\n', '        require(stableCoinAmount > 10000, "amount too small");\n', '\n', '        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\n', '        uint256 precisionDiff = uint(18+18-stableCoinPrecision);\n', '        uint256 dhptAmount = stableCoinAmount.mul(10**uint(precisionDiff)).div(poolPrice);\n', '        IDHedge(poolAddress).setLastDeposit(msg.sender);\n', '        \n', '        require(\n', '            IERC20(stableCoin).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                stableCoinAmount\n', '            ),\n', '            "stable coin transfer failed"\n', '        );\n', '      \n', '        require(\n', '            IERC20(poolAddress).transfer(msg.sender, dhptAmount),\n', '            "pool-token transfer failed"\n', '        );\n', '\n', '        emit BuyDHPT(\n', '            poolAddress,\n', '            msg.sender,\n', '            stableCoinAmount,\n', '            dhptAmount,\n', '            poolPrice,\n', '            block.timestamp,\n', '            false\n', '        );\n', '    }\n', '    \n', '    // user buying DHPT for sUSD. consider DHPT 24h lockup\n', '    function swapDHPT(address poolAddressA, uint256 poolAmountA, address poolAddressB) public {\n', '       require(enableBuy, "buy disabled");\n', '       require(enableSell, "sell disabled");\n', '       require(dhptWhitelist[poolAddressA] > 0, "from-token not whitelisted");\n', '       require(poolAmountA > 10000, "amount too small");\n', '       require(dhptWhitelist[poolAddressB] > 0, "to-token not whitelisted");\n', '\n', '       uint256 poolPriceA = tokenPriceWithSettle(poolAddressA);\n', '       uint256 sUsdAmount = poolAmountA.mul(poolPriceA).div(10**18);\n', '\n', '       uint256 poolPriceB = tokenPriceWithSettle(poolAddressB);\n', '       uint256 poolAmountB = sUsdAmount.mul(10**18).div(poolPriceB);\n', '       IDHedge(poolAddressB).setLastDeposit(msg.sender);\n', '\n', '        require(\n', '            IERC20(poolAddressA).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                poolAmountA\n', '            ),\n', '            "from-token transfer failed"\n', '        );\n', '      \n', '        require(\n', '            IERC20(poolAddressB).transfer(msg.sender, poolAmountB),\n', '            "to-token transfer failed"\n', '        );\n', '\n', '        emit SwapDHPT(\n', '            poolAddressA,\n', '            poolPriceA,\n', '            poolAmountA,\n', '            poolAddressB,\n', '            poolPriceB,\n', '            poolAmountB,\n', '            msg.sender,\n', '            block.timestamp,\n', '            false\n', '        );\n', '    }\n', '    \n', '\n', '    // ORACLE FUNCTIONS\n', '    \n', '    function oracleBuyDHPT(address poolAddress, address stableCoin, uint256 stableCoinAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature)\n', '       public\n', '    {\n', '        _requireOracle(enableOracleBuy, stableCoinAmount, blockNumber);\n', '        uint8 stableCoinPrecision = stableCoins[stableCoin];\n', '        require(stableCoinPrecision > 0, "selected stable coin is disabled");\n', '        \n', '        require(dhptWhitelist[poolAddress] > 0, "pool not whitelisted");\n', '        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, stableCoinAmount, signature), "signature invalid");\n', '        uint256 precisionDiff = uint(18+18-stableCoinPrecision);\n', '        uint256 dhptAmount = stableCoinAmount.mul(10**uint(precisionDiff)).div(poolPrice);\n', '        IDHedge(poolAddress).setLastDeposit(msg.sender);\n', '        \n', '        require(\n', '            IERC20(stableCoin).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                stableCoinAmount\n', '            ),\n', '            "stable coin transfer failed"\n', '        );\n', '\n', '        require(\n', '            IERC20(poolAddress).transfer(msg.sender, dhptAmount),\n', '            "token transfer failed"\n', '        );\n', '\n', '        emit BuyDHPT(\n', '            poolAddress,\n', '            msg.sender,\n', '            stableCoinAmount,\n', '            dhptAmount,\n', '            poolPrice,\n', '            block.timestamp,\n', '            true\n', '        );\n', '        \n', '    }\n', '    \n', '    function oracleSellDHPT(address poolAddress, address stableCoin, uint256 dhptAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature)\n', '       public\n', '    {\n', '        _requireOracle(enableOracleSell, dhptAmount, blockNumber);\n', '        uint8 stableCoinPrecision = stableCoins[stableCoin];\n', '        require(stableCoinPrecision > 0, "selected stable coin is disabled");        \n', '        require(_canSellDhpt(poolAddress, dhptAmount), "unable to sell tokens");\n', '       \n', '        uint256 precisionDiff = uint(18+18-stableCoinPrecision);\n', '        uint256 stableCoinAmount = dhptAmount.mul(poolPrice).div(10**uint(precisionDiff));\n', '        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, stableCoinAmount, signature), "signature invalid");\n', '        \n', '        require(\n', '            IERC20(poolAddress).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                dhptAmount\n', '            ),\n', '            "token transfer failed"\n', '        );\n', '\n', '       \n', '        require(\n', '            IERC20(stableCoin).transfer(\n', '                msg.sender, stableCoinAmount\n', '            ),\n', '            "stable coin transfer failed"\n', '        );\n', '\n', '        emit SellDHPT(\n', '            poolAddress,\n', '            msg.sender,\n', '            stableCoinAmount,\n', '            dhptAmount,\n', '            poolPrice,\n', '            block.timestamp,\n', '            true\n', '        );\n', '    }\n', '\n', '    // oracle swap buy DHPT from external sources of DHPT liquidity\n', '    function oracleBuyDHPTFrom(address poolAddress, address fromAddress, uint256 susdAmount, uint256 blockNumber, uint256 poolPrice, bytes memory signature) \n', '        public\n', '    {\n', '        _requireOracle(enableOracleBuy, susdAmount, blockNumber);\n', '        require(_isOracleSigValid(msg.sender, blockNumber, poolAddress, poolPrice, susdAmount, signature), "signature invalid");\n', '        require(dhptWhitelist[poolAddress] > 0, "pool not whitelisted");\n', '\n', '        uint256 dhptAmount = susdAmount.mul(10**18).div(poolPrice);\n', '        require(_dhptFromEnabled(poolAddress, fromAddress), "source liquidity disabled");\n', '        IDHedge(poolAddress).setLastDeposit(msg.sender);\n', '\n', '        require(\n', '            IERC20(_getAssetProxy(_SUSD_KEY)).transferFrom(\n', '                msg.sender,\n', '                fromAddress,\n', '                susdAmount\n', '            ),\n', '            "susd transfer failed"\n', '        );\n', '\n', '        require(\n', '            IERC20(poolAddress).transferFrom(\n', '                fromAddress,\n', '                msg.sender,\n', '                dhptAmount\n', '            ),\n', '            "token transfer failed"\n', '        );\n', '\n', '        emit BuyDHPT(\n', '            poolAddress,\n', '            msg.sender,\n', '            susdAmount,\n', '            dhptAmount,\n', '            poolPrice,\n', '            block.timestamp,\n', '            true\n', '        );\n', '    }\n', '\n', '    function oracleSwapDHPT(address poolAddressA, uint256 poolAmountA, uint256 poolPriceA, address poolAddressB,\n', '                             uint256 poolPriceB, uint256 blockNumber, bytes memory signature)\n', '        public\n', '    {\n', '        _requireOracle(enableOracleBuy && enableOracleSell, poolAmountA, blockNumber);\n', '        require(_canSellDhpt(poolAddressA, poolAmountA), "unable to sell tokens");\n', '        require(dhptWhitelist[poolAddressB] > 0, "pool not whitelisted");\n', '\n', '       //swap logic starts here\n', '       require(_isOracleSwapSigValid(msg.sender, blockNumber, poolAddressA, poolPriceA, poolAmountA, poolAddressB, poolPriceB, signature), "signature invalid");\n', '\n', '        require(\n', '            IERC20(poolAddressA).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                poolAmountA\n', '            ),\n', '            "from-token transfer failed"\n', '        );\n', '\n', '        uint256 poolAmountB = (poolAmountA.mul(poolPriceA)).div(poolPriceB);\n', '\n', '        require(\n', '            IERC20(poolAddressB).transfer(msg.sender, poolAmountB),\n', '            "to-token transfer failed"\n', '        );\n', '\n', '        emit SwapDHPT(\n', '            poolAddressA,\n', '            poolPriceA,\n', '            poolAmountA,\n', '            poolAddressB,\n', '            poolPriceB,\n', '            poolAmountB,\n', '            msg.sender,\n', '            block.timestamp,\n', '            true\n', '        );\n', '    }\n', '\n', '    function _requireOracle(bool enableOracle, uint256 amount, uint256 blockNumber)\n', '        internal\n', '        view\n', '    {\n', '        require(blockNumber.add(oracleBlockBias) > block.number, "transaction timed out");\n', '        require(enableOracle, "oracle disabled");\n', '        require(amount > 10000, "amount too small");\n', '        require(blockNumber <= block.number, "invalid block number");\n', '    }\n', '    \n', '    function _isOracleSigValid(address sender, uint256 blockNumber, address poolAddress, uint256 poolPrice, uint256 amount, bytes memory signature)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 hash = keccak256(abi.encodePacked(sender, blockNumber, poolAddress, poolPrice, amount));\n', '        bytes32 ethHash = ECDSA.toEthSignedMessageHash(hash);\n', '        \n', '        if (ECDSA.recover(ethHash, signature) == oracle) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _isOracleSwapSigValid(address sender, uint256 blockNumber, address poolAddressA, uint256 poolPriceA, uint256 poolAmountA, address poolAddressB, uint256 poolPriceB, bytes memory signature)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 hash = keccak256(abi.encodePacked(sender, blockNumber, poolAddressA, poolPriceA, poolAmountA, poolAddressB, poolPriceB ));\n', '        bytes32 ethHash = ECDSA.toEthSignedMessageHash(hash);\n', '        \n', '        if (ECDSA.recover(ethHash, signature) == oracle) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function dhptFromLiquidity(address poolAddress, address fromAddress)\n', '    public\n', '    view\n', '    returns (uint256)\n', '    {\n', '        if (_dhptFromEnabled(poolAddress, fromAddress)) {\n', '            return IERC20(poolAddress).allowance(fromAddress, address(this));\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function enableLiquidity(address[] memory poolAddresses, bool[] memory enabled)\n', '        public\n', '    {\n', '        require(poolAddresses.length == enabled.length, "invalid input lengths");\n', '\n', '        for (uint256 i = 0; i < poolAddresses.length; i++) {\n', '            bytes32 hash = keccak256(abi.encodePacked(poolAddresses[i], msg.sender));\n', '            dhptFromEnabled[hash] = enabled[i];\n', '        }\n', '    }\n', '\n', '    function _dhptFromEnabled(address poolAddress, address fromAddress)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        bytes32 hash = keccak256(abi.encodePacked(poolAddress, fromAddress));\n', '        return dhptFromEnabled[hash];\n', '    }\n', '\n', '\n', '    // ADMIN\n', '\n', '    // whitelist dHEDGE pools the contract will accept tokens from\n', '    function whitelistDhpt(address[] memory addresses, uint256[] memory amounts)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(addresses.length == amounts.length, "invalid input lengths");\n', '\n', '        for (uint256 i = 0; i < addresses.length; i++) {\n', '            require(IPoolDirectory(factory).isPool(addresses[i]), "not a pool");\n', '\n', '            dhptWhitelist[addresses[i]] = amounts[i];\n', '        }\n', '    }\n', '\n', '    function setAddressResolver(IAddressResolver _addressResolver)\n', '        public\n', '        onlyOwner\n', '    {\n', '        addressResolver = _addressResolver;\n', '    }\n', '    \n', '    function setFactory(address _factory)\n', '        public\n', '        onlyOwner\n', '    {\n', '        factory = _factory;\n', '    }\n', '\n', '    function setDao(address _dao)\n', '        public\n', '        onlyOwner\n', '    {\n', '        dao = _dao;\n', '    }\n', '    \n', '    function setOracle(address _oracle)\n', '        public\n', '        onlyOwner\n', '    {\n', '        oracle = _oracle;\n', '    }\n', '    \n', '    function setOracleBlockBias(uint8 _oracleBlockBias)\n', '        public\n', '        onlyOwner\n', '    {\n', '        oracleBlockBias = _oracleBlockBias;\n', '    }\n', '\n', '    function withdrawToken(address tokenAddress, uint256 amount)\n', '        public\n', '        onlyDao\n', '    {\n', '        require(\n', '            IERC20(tokenAddress).transfer(\n', '                dao,\n', '                amount\n', '            ),\n', '            "token transfer failed"\n', '        );\n', '    }\n', '\n', '    function withdrawTokenTo(address tokenAddress, uint256 amount, address toAddress)\n', '        public\n', '        onlyDao\n', '    {\n', '        require(\n', '            IERC20(tokenAddress).transfer(\n', '                toAddress,\n', '                amount\n', '                ),\n', '            "token transfer failed"\n', '            );\n', '    }\n', '\n', '    function enableBuySell(bool _enableBuy, bool _enableSell, bool _enableOracleBuy, bool _enableOracleSell)\n', '        public\n', '        onlyOwner\n', '    {\n', '        enableBuy = _enableBuy;\n', '        enableSell = _enableSell;\n', '        enableOracleBuy = _enableOracleBuy;\n', '        enableOracleSell = _enableOracleSell;\n', '    }\n', '    \n', '\n', '    // VIEWS\n', '\n', '    function _canSellDhpt(address poolAddress, uint256 dhptAmount)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 dhptBalance = tokenBalanceOf(poolAddress);\n', '        if (dhptWhitelist[poolAddress] >= dhptBalance.add(dhptAmount)) {\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function tokenBalanceOf(address tokenAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return IERC20(tokenAddress).balanceOf(address(this));\n', '    }\n', '\n', '    function _availDhptToSell(address poolAddress)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 dhptBalance = tokenBalanceOf(poolAddress);\n', '        return dhptWhitelist[poolAddress].sub(dhptBalance);\n', '    }\n', '\n', '    // maximum DHPT that can be sold by the user taking into account contract sUSD balance\n', '    function maxDhptToSell(address poolAddress) public view returns (uint256) {\n', '        uint256 availDhpt = _availDhptToSell(poolAddress);\n', '        uint256 susdBalance = IERC20(_getAssetProxy(_SUSD_KEY)).balanceOf(\n', '            address(this)\n', '        );\n', '        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\n', '        require(poolPrice > 0, "invalid pool price");\n', '        // how much DHPT the contract can buy with its sUSD balance\n', '        uint256 susdForDhpt = susdBalance.mul(10**18).div(poolPrice);\n', '\n', '        if (susdForDhpt > availDhpt) {\n', '            return availDhpt;\n', '        } else {\n', '            return susdForDhpt;\n', '        }\n', '    }\n', '\n', '    // maximum sUSD that can be sold by the user taking into account contract DHPT balance\n', '    function maxSusdToSell(address poolAddress) public view returns (uint256) {\n', '        uint256 dhptBalance = IERC20(poolAddress).balanceOf(address(this));\n', '        uint256 poolPrice = tokenPriceWithSettle(poolAddress);\n', '        require(poolPrice > 0, "invalid pool price");\n', '        // how much sUSD the contract can buy with its DHPT balance\n', '        uint256 dhptForSusd = dhptBalance.mul(poolPrice).div(10**18);\n', '\n', '        return dhptForSusd;\n', '    }\n', '\n', '    // returns token price accounting for any pending Synthetix settlement amounts and manager fees\n', '    function tokenPriceWithSettle(address poolAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        IDHedge dhpool = IDHedge(poolAddress);\n', '        IExchanger ex = IExchanger(addressResolver.getAddress(_EXCHANGER_KEY));\n', '\n', '        uint256 totalValue = 0;\n', '        bytes32[] memory supportedAssets = dhpool.getSupportedAssets();\n', '        uint256 totalSupply = dhpool.totalSupply();\n', '\n', '        require(totalSupply > 0, "pool is empty");\n', '\n', '        for (uint256 i = 0; i < supportedAssets.length; i++) {\n', '            uint256 assetTotal = IERC20(_getAssetProxy(supportedAssets[i]))\n', '                .balanceOf(poolAddress);\n', '\n', '            if (assetTotal > 0) {\n', '                uint256 waitingPeriod = ex.maxSecsLeftInWaitingPeriod(\n', '                    poolAddress,\n', '                    supportedAssets[i]\n', '                );\n', '                require(waitingPeriod == 0, "wait for settlement");\n', '\n', '                (\n', '                    uint256 reclaimAmount,\n', '                    uint256 rebateAmount,\n', '                    /*uint256 entries*/\n', '                ) = ex.settlementOwing(poolAddress, supportedAssets[i]);\n', '\n', '                if (rebateAmount > 0) {\n', '                    assetTotal = assetTotal.add(rebateAmount);\n', '                }\n', '                if (reclaimAmount > 0) {\n', '                    assetTotal = assetTotal.sub(reclaimAmount);\n', '                }\n', '\n', '                IExchangeRates exchangeRates = IExchangeRates(\n', '                    addressResolver.getAddress(_EXCHANGE_RATES_KEY)\n', '                );\n', '                totalValue = totalValue.add(\n', '                    exchangeRates\n', '                        .rateForCurrency(supportedAssets[i])\n', '                        .mul(assetTotal)\n', '                        .div(10**18)\n', '                );\n', '            }\n', '        }\n', '        uint256 lastFeeMintPrice = dhpool.tokenPriceAtLastFeeMint();\n', '        uint256 tokenPrice = totalValue.mul(10**18).div(totalSupply);\n', '\n', '        if (lastFeeMintPrice.add(1000) < tokenPrice) {\n', '            return tokenPrice.mul(totalSupply).div(_getTotalSupplyPostMint(poolAddress, tokenPrice, lastFeeMintPrice, totalSupply));\n', '        } else {\n', '            return tokenPrice;\n', '        }\n', '    }\n', '    \n', "    // token price at which the manager's fee was last minted\n", '    function getLastFeeMintPrice(address poolAddress) public view returns (uint256) {\n', '        IDHedge dhpool = IDHedge(poolAddress);\n', '        return dhpool.tokenPriceAtLastFeeMint();\n', '    }\n', '\n', '    // token supply after manager fee minting\n', '    function _getTotalSupplyPostMint(address poolAddress, uint256 tokenPrice, uint256 lastFeeMintPrice, uint256 totalSupply) internal view returns (uint256) {\n', '        uint256 managerFeeNumerator;\n', '        uint256 managerFeeDenominator;\n', '        (managerFeeNumerator, managerFeeDenominator) = IHasFeeInfo(factory).getPoolManagerFee(poolAddress);\n', '        uint256 priceFraction = tokenPrice.sub(lastFeeMintPrice).mul(managerFeeNumerator).div(managerFeeDenominator);\n', '        return priceFraction.mul(totalSupply).div(tokenPrice).add(totalSupply);\n', '    }\n', '\n', '    function _getAssetProxy(bytes32 key) internal view returns (address) {\n', '        address synth = ISynthetix(addressResolver.getAddress(_SYNTHETIX_KEY))\n', '            .synths(key);\n', '        require(synth != address(0), "invalid key");\n', '        address proxy = ISynth(synth).proxy();\n', '        require(proxy != address(0), "invalid proxy");\n', '        return proxy;\n', '    }\n', '\n', '    // MODIFIERS\n', '    modifier onlyDao() {\n', '        require(msg.sender == dao, "only dao");\n', '        _;\n', '    }\n', '\n', '}']