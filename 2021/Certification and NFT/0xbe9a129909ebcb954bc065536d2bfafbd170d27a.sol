['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', '// SPDX-License-Identifier: Apache-2.0.\n', 'pragma solidity ^0.6.11;\n', '\n', 'import "FactRegistry.sol";\n', 'import "Identity.sol";\n', 'import "Common.sol";\n', 'import "IERC20.sol";\n', '\n', 'contract TransferRegistry is FactRegistry, Identity {\n', '\n', '    event LogRegisteredTransfer(\n', '        address recipient,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 salt\n', '    );\n', '\n', '    using Addresses for address;\n', '\n', '    function identify()\n', '        external pure virtual override\n', '        returns(string memory)\n', '    {\n', '        return "StarkWare_TransferRegistry_2020_1";\n', '    }\n', '\n', '    /*\n', '      The actual transfer is extracted to a function, so that we can easily mock the contract.\n', '    */\n', '    function performEthTransfer(address recipient, uint256 value)\n', '        internal\n', '        virtual {\n', '        recipient.performEthTransfer(value);\n', '    }\n', '\n', '    /*\n', '      The actual transfer is extracted to a function, so that we can easily mock the contract.\n', '    */\n', '    function performErc20Transfer(address recipient, address erc20, uint256 amount)\n', '        internal\n', '        virtual {\n', '        erc20.safeTokenContractCall(\n', '            abi.encodeWithSelector(IERC20(0).transferFrom.selector, msg.sender, recipient, amount)\n', '        );\n', '    }\n', '\n', '    /*\n', '      Passes on the transaction ETH value onto the recipient address,\n', '      and register the associated fact.\n', '      Reverts if the fact has already been registered.\n', '    */\n', '    function transfer(address recipient, uint256 salt) // NOLINT: erc20-interface.\n', '        external\n', '        payable {\n', '        bytes32 transferFact = keccak256(\n', '            abi.encodePacked(recipient, msg.value, address(0x0), salt));\n', '        require(!_factCheck(transferFact), "TRANSFER_ALREADY_REGISTERED");\n', '        registerFact(transferFact);\n', '        emit LogRegisteredTransfer(recipient, address(0x0), msg.value, salt);\n', '        performEthTransfer(recipient, msg.value);\n', '    }\n', '\n', '    /*\n', "      Transfer the specified amount of erc20 tokens from msg.sender balance to the recipient's\n", '      balance.\n', '      Pre-conditions to successful transfer are that the msg.sender has sufficient balance,\n', '      and the the approval (for the transfer) was granted to this contract.\n', '      A fact with the transfer details is registered upon success.\n', '      Reverts if the fact has already been registered.\n', '    */\n', '    function transferERC20(address recipient, address erc20, uint256 amount, uint256 salt)\n', '        external {\n', '        bytes32 transferFact = keccak256(\n', '            abi.encodePacked(recipient, amount, erc20, salt));\n', '        require(!_factCheck(transferFact), "TRANSFER_ALREADY_REGISTERED");\n', '        registerFact(transferFact);\n', '        emit LogRegisteredTransfer(recipient, erc20, amount, salt);\n', '        performErc20Transfer(recipient, erc20, amount);\n', '    }\n', '\n', '}']