['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-15\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '\n', 'pragma solidity 0.8.0;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface MassetStructs {\n', '    struct BassetPersonal {\n', '        // Address of the bAsset\n', '        address addr;\n', '        // Address of the bAsset\n', '        address integrator;\n', '        // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n', '        bool hasTxFee; // takes a byte in storage\n', '        // Status of the bAsset\n', '        BassetStatus status;\n', '    }\n', '\n', '    struct BassetData {\n', '        // 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '        // If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '        // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '        uint128 ratio;\n', '        // Amount of the Basset that is held in Collateral\n', '        uint128 vaultBalance;\n', '    }\n', '\n', '    // Status of the Basset - has it broken its peg?\n', '    enum BassetStatus {\n', '        Default,\n', '        Normal,\n', '        BrokenBelowPeg,\n', '        BrokenAbovePeg,\n', '        Blacklisted,\n', '        Liquidating,\n', '        Liquidated,\n', '        Failed\n', '    }\n', '\n', '    struct BasketState {\n', '        bool undergoingRecol;\n', '        bool failed;\n', '    }\n', '\n', '    struct InvariantConfig {\n', '        uint256 a;\n', '        WeightLimits limits;\n', '    }\n', '\n', '    struct WeightLimits {\n', '        uint128 min;\n', '        uint128 max;\n', '    }\n', '\n', '    struct AmpData {\n', '        uint64 initialA;\n', '        uint64 targetA;\n', '        uint64 rampStartTime;\n', '        uint64 rampEndTime;\n', '    }\n', '}\n', '\n', 'abstract contract IInvariantValidator is MassetStructs {\n', '    // Mint\n', '    function computeMint(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint256 _rawInput,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    function computeMintMulti(\n', '        BassetData[] calldata _bAssets,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _rawInputs,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    // Swap\n', '    function computeSwap(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint8 _o,\n', '        uint256 _rawInput,\n', '        uint256 _feeRate,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256, uint256);\n', '\n', '    // Redeem\n', '    function computeRedeem(\n', '        BassetData[] calldata _bAssets,\n', '        uint8 _i,\n', '        uint256 _mAssetQuantity,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '\n', '    function computeRedeemExact(\n', '        BassetData[] calldata _bAssets,\n', '        uint8[] calldata _indices,\n', '        uint256[] calldata _rawOutputs,\n', '        InvariantConfig memory _config\n', '    ) external view virtual returns (uint256);\n', '}\n', '\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    // constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract ERC205 is Context, IERC20 {\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '\n', '        uint256 currentAllowance = _allowances[sender][_msgSender()];\n', '        require(currentAllowance >= amount, "ERC20: transfer amount exceeds allowance");\n', '        _approve(sender, _msgSender(), currentAllowance - amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        uint256 currentAllowance = _allowances[_msgSender()][spender];\n', '        require(currentAllowance >= subtractedValue, "ERC20: decreased allowance below zero");\n', '        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        uint256 senderBalance = _balances[sender];\n', '        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[sender] = senderBalance - amount;\n', '        _balances[recipient] += amount;\n', '\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _totalSupply += amount;\n', '        _balances[account] += amount;\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        uint256 accountBalance = _balances[account];\n', '        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");\n', '        _balances[account] = accountBalance - amount;\n', '        _totalSupply -= amount;\n', '\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '}\n', '\n', 'abstract contract InitializableERC20Detailed is IERC20 {\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for `name`, `symbol`, and `decimals`. All three of\n', '     * these values are immutable: they can only be set once during\n', '     * construction.\n', '     * @notice To avoid variable shadowing appended `Arg` after arguments name.\n', '     */\n', '    function _initialize(\n', '        string memory nameArg,\n', '        string memory symbolArg,\n', '        uint8 decimalsArg\n', '    ) internal {\n', '        _name = nameArg;\n', '        _symbol = symbolArg;\n', '        _decimals = decimalsArg;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '}\n', '\n', 'abstract contract InitializableToken is ERC205, InitializableERC20Detailed {\n', '    /**\n', '     * @dev Initialization function for implementing contract\n', '     * @notice To avoid variable shadowing appended `Arg` after arguments name.\n', '     */\n', '    function _initialize(string memory _nameArg, string memory _symbolArg) internal {\n', '        InitializableERC20Detailed._initialize(_nameArg, _symbolArg, 18);\n', '    }\n', '}\n', '\n', 'contract ModuleKeys {\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE =\n', '        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING =\n', '        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN =\n', '        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB =\n', '        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER =\n', '        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER =\n', '        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN =\n', '        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER =\n', '        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR =\n', '        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '\n', '    function cancelProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '\n', '    function cancelLockModule(bytes32 _key) external;\n', '\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'abstract contract ImmutableModule is ModuleKeys {\n', '    INexus public immutable nexus;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        _onlyGovernor();\n', '        _;\n', '    }\n', '\n', '    function _onlyGovernor() internal view {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'contract InitializableReentrancyGuard {\n', '    bool private _notEntered;\n', '\n', '    function _initializeReentrancyGuard() internal {\n', '        // Storing an initial non-zero value makes deployment a bit more\n', '        // expensive, but in exchange the refund on every call to nonReentrant\n', '        // will be lower in amount. Since refunds are capped to a percetange of\n', "        // the total transaction's gas, it is best to keep them low in cases\n", '        // like this one, to increase the likelihood of the full refund coming\n', '        // into effect.\n', '        _notEntered = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_notEntered, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _notEntered = false;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _notEntered = true;\n', '    }\n', '}\n', '\n', 'abstract contract IMasset is MassetStructs {\n', '    // Mint\n', '    function mint(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function mintMulti(\n', '        address[] calldata _inputs,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function getMintOutput(address _input, uint256 _inputQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    // Swaps\n', '    function swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 swapOutput);\n', '\n', '    function getSwapOutput(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity\n', '    ) external view virtual returns (uint256 swapOutput);\n', '\n', '    // Redemption\n', '    function redeem(\n', '        address _output,\n', '        uint256 _mAssetQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 outputQuantity);\n', '\n', '    function redeemMasset(\n', '        uint256 _mAssetQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) external virtual returns (uint256[] memory outputQuantities);\n', '\n', '    function redeemExactBassets(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mAssetRedeemed);\n', '\n', '    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 bAssetOutput);\n', '\n', '    function getRedeemExactBassetsOutput(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities\n', '    ) external view virtual returns (uint256 mAssetAmount);\n', '\n', '    // Views\n', '    function getBasket() external view virtual returns (bool, bool);\n', '\n', '    function getBasset(address _token)\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal memory personal, BassetData memory data);\n', '\n', '    function getBassets()\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal[] memory personal, BassetData[] memory data);\n', '\n', '    function bAssetIndexes(address) external view virtual returns (uint8);\n', '\n', '    // SavingsManager\n', '    function collectInterest() external virtual returns (uint256 swapFeesGained, uint256 newSupply);\n', '\n', '    function collectPlatformInterest()\n', '        external\n', '        virtual\n', '        returns (uint256 mintAmount, uint256 newSupply);\n', '\n', '    // Admin\n', '    function setCacheSize(uint256 _cacheSize) external virtual;\n', '\n', '    function upgradeForgeValidator(address _newForgeValidator) external virtual;\n', '\n', '    function setFees(uint256 _swapFee, uint256 _redemptionFee) external virtual;\n', '\n', '    function setTransferFeesFlag(address _bAsset, bool _flag) external virtual;\n', '\n', '    function migrateBassets(address[] calldata _bAssets, address _newIntegration) external virtual;\n', '}\n', '\n', 'abstract contract Deprecated_BasketManager is MassetStructs {}\n', '\n', 'library SafeCast {\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', 'library StableMath {\n', '    /**\n', '     * @dev Scaling unit for use in specific calculations,\n', "     * where 1 * 10**18, or 1e18 represents a unit '1'\n", '     */\n', '    uint256 private constant FULL_SCALE = 1e18;\n', '\n', '    /**\n', '     * @dev Token Ratios are used when converting between units of bAsset, mAsset and MTA\n', '     * Reasoning: Takes into account token decimals, and difference in base unit (i.e. grams to Troy oz for gold)\n', '     * bAsset ratio unit for use in exact calculations,\n', '     * where (1 bAsset unit * bAsset.ratio) / ratioScale == x mAsset unit\n', '     */\n', '    uint256 private constant RATIO_SCALE = 1e8;\n', '\n', '    /**\n', '     * @dev Provides an interface to the scaling unit\n', '     * @return Scaling unit (1e18 or 1 * 10**18)\n', '     */\n', '    function getFullScale() internal pure returns (uint256) {\n', '        return FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Provides an interface to the ratio unit\n', '     * @return Ratio scale unit (1e8 or 1 * 10**8)\n', '     */\n', '    function getRatioScale() internal pure returns (uint256) {\n', '        return RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Scales a given integer to the power of the full scale.\n', '     * @param x   Simple uint256 to scale\n', '     * @return    Scaled value a to an exact number\n', '     */\n', '    function scaleInteger(uint256 x) internal pure returns (uint256) {\n', '        return x * FULL_SCALE;\n', '    }\n', '\n', '    /***************************************\n', '              PRECISE ARITHMETIC\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncate(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return mulTruncateScale(x, y, FULL_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the given scale. For example,\n', '     * when calculating 90% of 10e18, (10e18 * 9e17) / 1e18 = (9e36) / 1e18 = 9e18\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @param scale Scale unit\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit\n', '     */\n', '    function mulTruncateScale(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 scale\n', '    ) internal pure returns (uint256) {\n', '        // e.g. assume scale = fullScale\n', '        // z = 10e18 * 9e17 = 9e36\n', '        // return 9e38 / 1e18 = 9e18\n', '        return (x * y) / scale;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two precise units, and then truncates by the full scale, rounding up the result\n', '     * @param x     Left hand input to multiplication\n', '     * @param y     Right hand input to multiplication\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              scale unit, rounded up to the closest base unit.\n', '     */\n', '    function mulTruncateCeil(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e17 * 17268172638 = 138145381104e17\n', '        uint256 scaled = x * y;\n', '        // e.g. 138145381104e17 + 9.99...e17 = 138145381113.99...e17\n', '        uint256 ceil = scaled + FULL_SCALE - 1;\n', '        // e.g. 13814538111.399...e18 / 1e18 = 13814538111\n', '        return ceil / FULL_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two units, by first scaling the left hand operand. Useful\n', '     *      for finding percentage weightings, i.e. 8e18/10e18 = 80% (or 8e17)\n', '     * @param x     Left hand input to division\n', '     * @param y     Right hand input to division\n', '     * @return      Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divPrecisely(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        // e.g. 8e18 * 1e18 = 8e36\n', '        // e.g. 8e36 / 10e18 = 8e17\n', '        return (x * FULL_SCALE) / y;\n', '    }\n', '\n', '    /***************************************\n', '                  RATIO FUNCS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, essentially flooring the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand operand to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the two inputs and then dividing by the ratio scale\n', '     */\n', '    function mulRatioTruncate(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        return mulTruncateScale(x, ratio, RATIO_SCALE);\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies and truncates a token ratio, rounding up the result\n', '     *      i.e. How much mAsset is this bAsset worth?\n', '     * @param x     Left hand input to multiplication (i.e Exact quantity)\n', '     * @param ratio bAsset ratio\n', '     * @return      Result after multiplying the two inputs and then dividing by the shared\n', '     *              ratio scale, rounded up to the closest base unit.\n', '     */\n', '    function mulRatioTruncateCeil(uint256 x, uint256 ratio) internal pure returns (uint256) {\n', '        // e.g. How much mAsset should I burn for this bAsset (x)?\n', '        // 1e18 * 1e8 = 1e26\n', '        uint256 scaled = x * ratio;\n', '        // 1e26 + 9.99e7 = 100..00.999e8\n', '        uint256 ceil = scaled + RATIO_SCALE - 1;\n', '        // return 100..00.999e8 / 1e8 = 1e18\n', '        return ceil / RATIO_SCALE;\n', '    }\n', '\n', '    /**\n', '     * @dev Precisely divides two ratioed units, by first scaling the left hand operand\n', '     *      i.e. How much bAsset is this mAsset worth?\n', '     * @param x     Left hand operand in division\n', '     * @param ratio bAsset ratio\n', '     * @return c    Result after multiplying the left operand by the scale, and\n', '     *              executing the division on the right hand input.\n', '     */\n', '    function divRatioPrecisely(uint256 x, uint256 ratio) internal pure returns (uint256 c) {\n', '        // e.g. 1e14 * 1e8 = 1e22\n', '        // return 1e22 / 1e12 = 1e10\n', '        return (x * RATIO_SCALE) / ratio;\n', '    }\n', '\n', '    /***************************************\n', '                    HELPERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Calculates minimum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Minimum of the two inputs\n', '     */\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? y : x;\n', '    }\n', '\n', '    /**\n', '     * @dev Calculated maximum of two numbers\n', '     * @param x     Left hand input\n', '     * @param y     Right hand input\n', '     * @return      Maximum of the two inputs\n', '     */\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256) {\n', '        return x > y ? x : y;\n', '    }\n', '\n', '    /**\n', '     * @dev Clamps a value to an upper bound\n', '     * @param x           Left hand input\n', '     * @param upperBound  Maximum possible value to return\n', '     * @return            Input x clamped to a maximum value, upperBound\n', '     */\n', '    function clamp(uint256 x, uint256 upperBound) internal pure returns (uint256) {\n', '        return x > upperBound ? upperBound : x;\n', '    }\n', '}\n', '\n', 'interface IPlatformIntegration {\n', '    /**\n', '     * @dev Deposit the given bAsset to Lending platform\n', '     * @param _bAsset bAsset address\n', '     * @param _amount Amount to deposit\n', '     */\n', '    function deposit(\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool isTokenFeeCharged\n', '    ) external returns (uint256 quantityDeposited);\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from Lending platform\n', '     */\n', '    function withdraw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount,\n', '        uint256 _totalAmount,\n', '        bool _hasTxFee\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraw given bAsset from the cache\n', '     */\n', '    function withdrawRaw(\n', '        address _receiver,\n', '        address _bAsset,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the current balance of the given bAsset\n', '     */\n', '    function checkBalance(address _bAsset) external returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the pToken\n', '     */\n', '    function bAssetToPToken(address _bAsset) external returns (address pToken);\n', '}\n', '\n', 'interface IBasicToken {\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library MassetHelpers {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function transferReturnBalance(\n', '        address _sender,\n', '        address _recipient,\n', '        address _bAsset,\n', '        uint256 _qty\n', '    ) internal returns (uint256 receivedQty, uint256 recipientBalance) {\n', '        uint256 balBefore = IERC20(_bAsset).balanceOf(_recipient);\n', '        IERC20(_bAsset).safeTransferFrom(_sender, _recipient, _qty);\n', '        recipientBalance = IERC20(_bAsset).balanceOf(_recipient);\n', '        receivedQty = recipientBalance - balBefore;\n', '    }\n', '\n', '    function safeInfiniteApprove(address _asset, address _spender) internal {\n', '        IERC20(_asset).safeApprove(_spender, 0);\n', '        IERC20(_asset).safeApprove(_spender, 2**256 - 1);\n', '    }\n', '}\n', '\n', 'library Manager {\n', '    using SafeERC20 for IERC20;\n', '    using StableMath for uint256;\n', '\n', '    event BassetsMigrated(address[] bAssets, address newIntegrator);\n', '    event TransferFeeEnabled(address indexed bAsset, bool enabled);\n', '    event BassetAdded(address indexed bAsset, address integrator);\n', '    event BassetStatusChanged(address indexed bAsset, MassetStructs.BassetStatus status);\n', '    event BasketStatusChanged();\n', '    event StartRampA(uint256 currentA, uint256 targetA, uint256 startTime, uint256 rampEndTime);\n', '    event StopRampA(uint256 currentA, uint256 time);\n', '\n', '    uint256 private constant MIN_RAMP_TIME = 1 days;\n', '    uint256 private constant MAX_A = 1e6;\n', '\n', '    /**\n', '     * @notice Adds a bAsset to the given personal, data and mapping, provided it is valid\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetData       Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _maxBassets       Max size of the basket\n', '     * @param _bAsset           Address of the ERC20 token to add to the Basket\n', '     * @param _integration      Address of the Platform Integration\n', '     * @param _mm               Base 1e8 var to determine measurement ratio\n', '     * @param _hasTxFee         Are transfer fees charged on this bAsset (e.g. USDT)\n', '     */\n', '    function addBasset(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        MassetStructs.BassetData[] storage _bAssetData,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        uint8 _maxBassets,\n', '        address _bAsset,\n', '        address _integration,\n', '        uint256 _mm,\n', '        bool _hasTxFee\n', '    ) external {\n', '        require(_bAsset != address(0), "bAsset address must be valid");\n', '        uint8 bAssetCount = uint8(_bAssetPersonal.length);\n', '        require(bAssetCount < _maxBassets, "Max bAssets in Basket");\n', '\n', '        uint8 idx = _bAssetIndexes[_bAsset];\n', '        require(\n', '            bAssetCount == 0 || _bAssetPersonal[idx].addr != _bAsset,\n', '            "bAsset already exists in Basket"\n', '        );\n', '\n', '        // Should fail if bAsset is not added to integration\n', '        // Programmatic enforcement of bAsset validity should service through decentralised feed\n', '        if (_integration != address(0)) {\n', '            IPlatformIntegration(_integration).checkBalance(_bAsset);\n', '        }\n', '\n', '        uint256 bAssetDecimals = IBasicToken(_bAsset).decimals();\n', '        require(\n', '            bAssetDecimals >= 4 && bAssetDecimals <= 18,\n', '            "Token must have sufficient decimal places"\n', '        );\n', '\n', '        uint256 delta = uint256(18) - bAssetDecimals;\n', '        uint256 ratio = _mm * (10**delta);\n', '\n', '        _bAssetIndexes[_bAsset] = bAssetCount;\n', '\n', '        _bAssetPersonal.push(\n', '            MassetStructs.BassetPersonal({\n', '                addr: _bAsset,\n', '                integrator: _integration,\n', '                hasTxFee: _hasTxFee,\n', '                status: MassetStructs.BassetStatus.Normal\n', '            })\n', '        );\n', '        _bAssetData.push(\n', '            MassetStructs.BassetData({ ratio: SafeCast.toUint128(ratio), vaultBalance: 0 })\n', '        );\n', '\n', '        emit BassetAdded(_bAsset, _integration);\n', '    }\n', '\n', '    /**\n', '     * @dev Collects the interest generated from the Basket, minting a relative\n', '     *      amount of mAsset and sending it over to the SavingsManager.\n', '     * @param _bAssetPersonal   Basset personal storage array\n', '     * @param _bAssetData       Basset data storage array\n', '     * @param _forgeValidator   Link to the current InvariantValidator\n', '     * @return mintAmount       Lending market interest collected\n', '     * @return rawGains         Raw increases in vault Balance\n', '     */\n', '    function collectPlatformInterest(\n', '        MassetStructs.BassetPersonal[] memory _bAssetPersonal,\n', '        MassetStructs.BassetData[] storage _bAssetData,\n', '        IInvariantValidator _forgeValidator,\n', '        MassetStructs.InvariantConfig memory _config\n', '    ) external returns (uint256 mintAmount, uint256[] memory rawGains) {\n', '        // Get basket details\n', '        MassetStructs.BassetData[] memory bAssetData_ = _bAssetData;\n', '        uint256 count = bAssetData_.length;\n', '        uint8[] memory indices = new uint8[](count);\n', '        rawGains = new uint256[](count);\n', '        // 1. Calculate rawGains in each bAsset, in comparison to current vault balance\n', '        for (uint256 i = 0; i < count; i++) {\n', '            indices[i] = uint8(i);\n', '            MassetStructs.BassetPersonal memory bPersonal = _bAssetPersonal[i];\n', '            MassetStructs.BassetData memory bData = bAssetData_[i];\n', '            // If there is no integration, then nothing can have accrued\n', '            if (bPersonal.integrator == address(0)) continue;\n', '            uint256 lending =\n', '                IPlatformIntegration(bPersonal.integrator).checkBalance(bPersonal.addr);\n', '            uint256 cache = 0;\n', '            if (!bPersonal.hasTxFee) {\n', '                cache = IERC20(bPersonal.addr).balanceOf(bPersonal.integrator);\n', '            }\n', '            uint256 balance = lending + cache;\n', '            uint256 oldVaultBalance = bData.vaultBalance;\n', '            if (\n', '                balance > oldVaultBalance && bPersonal.status == MassetStructs.BassetStatus.Normal\n', '            ) {\n', '                _bAssetData[i].vaultBalance = SafeCast.toUint128(balance);\n', '                uint256 interestDelta = balance - oldVaultBalance;\n', '                rawGains[i] = interestDelta;\n', '            } else {\n', '                rawGains[i] = 0;\n', '            }\n', '        }\n', '        mintAmount = _forgeValidator.computeMintMulti(bAssetData_, indices, rawGains, _config);\n', '    }\n', '\n', '    /**\n', '     * @dev Update transfer fee flag for a given bAsset, should it change its fee practice\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAsset   bAsset address\n', "     * @param _flag         Charge transfer fee when its set to 'true', otherwise 'false'\n", '     */\n', '    function setTransferFeesFlag(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset,\n', '        bool _flag\n', '    ) external {\n', '        uint256 index = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '        _bAssetPersonal[index].hasTxFee = _flag;\n', '\n', '        if (_flag) {\n', '            // if token has tx fees, it can no longer operate with a cache\n', '            address integration = _bAssetPersonal[index].integrator;\n', '            if (integration != address(0)) {\n', '                uint256 bal = IERC20(_bAsset).balanceOf(integration);\n', '                if (bal > 0) {\n', '                    IPlatformIntegration(integration).deposit(_bAsset, bal, true);\n', '                }\n', '            }\n', '        }\n', '\n', '        emit TransferFeeEnabled(_bAsset, _flag);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers all collateral from one lending market to another - used initially\n', '     *      to handle the migration between Aave V1 and Aave V2. Note - only supports non\n', '     *      tx fee enabled assets. Supports going from no integration to integration, but\n', '     *      not the other way around.\n', '     * @param _bAssetPersonal   Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAssets          Array of basket assets to migrate\n', '     * @param _newIntegration   Address of the new platform integration\n', '     */\n', '    function migrateBassets(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address[] calldata _bAssets,\n', '        address _newIntegration\n', '    ) external {\n', '        uint256 len = _bAssets.length;\n', '        require(len > 0, "Must migrate some bAssets");\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            // 1. Check that the bAsset is in the basket\n', '            address bAsset = _bAssets[i];\n', '            uint256 index = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, bAsset);\n', '            require(!_bAssetPersonal[index].hasTxFee, "A bAsset has a transfer fee");\n', '\n', '            // 2. Withdraw everything from the old platform integration\n', '            address oldAddress = _bAssetPersonal[index].integrator;\n', '            require(oldAddress != _newIntegration, "Must transfer to new integrator");\n', '            (uint256 cache, uint256 lendingBal) = (0, 0);\n', '            if (oldAddress == address(0)) {\n', '                cache = IERC20(bAsset).balanceOf(address(this));\n', '            } else {\n', '                IPlatformIntegration oldIntegration = IPlatformIntegration(oldAddress);\n', '                cache = IERC20(bAsset).balanceOf(address(oldIntegration));\n', '                // 2.1. Withdraw from the lending market\n', '                lendingBal = oldIntegration.checkBalance(bAsset);\n', '                if (lendingBal > 0) {\n', '                    oldIntegration.withdraw(address(this), bAsset, lendingBal, false);\n', '                }\n', '                // 2.2. Withdraw from the cache, if any\n', '                if (cache > 0) {\n', '                    oldIntegration.withdrawRaw(address(this), bAsset, cache);\n', '                }\n', '            }\n', '            uint256 sum = lendingBal + cache;\n', '\n', '            // 3. Update the integration address for this bAsset\n', '            _bAssetPersonal[index].integrator = _newIntegration;\n', '\n', '            // 4. Deposit everything into the new\n', '            //    This should fail if we did not receive the full amount from the platform withdrawal\n', '            // 4.1. Deposit all bAsset\n', '            IERC20(bAsset).safeTransfer(_newIntegration, sum);\n', '            IPlatformIntegration newIntegration = IPlatformIntegration(_newIntegration);\n', '            if (lendingBal > 0) {\n', '                newIntegration.deposit(bAsset, lendingBal, false);\n', '            }\n', '            // 4.2. Check balances\n', '            uint256 newLendingBal = newIntegration.checkBalance(bAsset);\n', '            uint256 newCache = IERC20(bAsset).balanceOf(address(newIntegration));\n', '            uint256 upperMargin = 10001e14;\n', '            uint256 lowerMargin = 9999e14;\n', '\n', '            require(\n', '                newLendingBal >= lendingBal.mulTruncate(lowerMargin) &&\n', '                    newLendingBal <= lendingBal.mulTruncate(upperMargin),\n', '                "Must transfer full amount"\n', '            );\n', '            require(\n', '                newCache >= cache.mulTruncate(lowerMargin) &&\n', '                    newCache <= cache.mulTruncate(upperMargin),\n', '                "Must transfer full amount"\n', '            );\n', '        }\n', '\n', '        emit BassetsMigrated(_bAssets, _newIntegration);\n', '    }\n', '\n', '    /**\n', '     * @dev Executes the Auto Redistribution event by isolating the bAsset from the Basket\n', '     * @param _basket          Struct containing core basket info\n', '     * @param _bAssetPersonal  Basset data storage array\n', '     * @param _bAsset          Address of the ERC20 token to isolate\n', '     * @param _belowPeg        Bool to describe whether the bAsset deviated below peg (t)\n', '     *                         or above (f)\n', '     */\n', '    function handlePegLoss(\n', '        MassetStructs.BasketState storage _basket,\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset,\n', '        bool _belowPeg\n', '    ) external {\n', '        require(!_basket.failed, "Basket must be alive");\n', '\n', '        uint256 i = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '\n', '        MassetStructs.BassetStatus newStatus =\n', '            _belowPeg\n', '                ? MassetStructs.BassetStatus.BrokenBelowPeg\n', '                : MassetStructs.BassetStatus.BrokenAbovePeg;\n', '        _bAssetPersonal[i].status = newStatus;\n', '\n', '        _basket.undergoingRecol = true;\n', '\n', '        emit BassetStatusChanged(_bAsset, newStatus);\n', '    }\n', '\n', '    /**\n', '     * @dev Negates the isolation of a given bAsset\n', '     * @param _basket          Struct containing core basket info\n', '     * @param _bAssetPersonal  Basset data storage array\n', '     * @param _bAssetIndexes    Mapping of bAsset address to their index\n', '     * @param _bAsset Address of the bAsset\n', '     */\n', '    function negateIsolation(\n', '        MassetStructs.BasketState storage _basket,\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _bAsset\n', '    ) external {\n', '        uint256 i = _getAssetIndex(_bAssetPersonal, _bAssetIndexes, _bAsset);\n', '\n', '        _bAssetPersonal[i].status = MassetStructs.BassetStatus.Normal;\n', '\n', '        bool undergoingRecol = false;\n', '        for (uint256 j = 0; j < _bAssetPersonal.length; j++) {\n', '            if (_bAssetPersonal[j].status != MassetStructs.BassetStatus.Normal) {\n', '                undergoingRecol = true;\n', '                break;\n', '            }\n', '        }\n', '        _basket.undergoingRecol = undergoingRecol;\n', '\n', '        emit BassetStatusChanged(_bAsset, MassetStructs.BassetStatus.Normal);\n', '    }\n', '\n', '    /**\n', '     * @dev Starts changing of the amplification var A\n', '     * @param _targetA      Target A value\n', '     * @param _rampEndTime  Time at which A will arrive at _targetA\n', '     */\n', '    function startRampA(\n', '        MassetStructs.AmpData storage _ampData,\n', '        uint256 _targetA,\n', '        uint256 _rampEndTime,\n', '        uint256 _currentA,\n', '        uint256 _precision\n', '    ) external {\n', '        require(\n', '            block.timestamp >= (_ampData.rampStartTime + MIN_RAMP_TIME),\n', '            "Sufficient period of previous ramp has not elapsed"\n', '        );\n', '        require(_rampEndTime >= (block.timestamp + MIN_RAMP_TIME), "Ramp time too short");\n', '        require(_targetA > 0 && _targetA < MAX_A, "A target out of bounds");\n', '\n', '        uint256 preciseTargetA = _targetA * _precision;\n', '\n', '        if (preciseTargetA > _currentA) {\n', '            require(preciseTargetA <= _currentA * 10, "A target increase too big");\n', '        } else {\n', '            require(preciseTargetA >= _currentA / 10, "A target decrease too big");\n', '        }\n', '\n', '        _ampData.initialA = SafeCast.toUint64(_currentA);\n', '        _ampData.targetA = SafeCast.toUint64(preciseTargetA);\n', '        _ampData.rampStartTime = SafeCast.toUint64(block.timestamp);\n', '        _ampData.rampEndTime = SafeCast.toUint64(_rampEndTime);\n', '\n', '        emit StartRampA(_currentA, preciseTargetA, block.timestamp, _rampEndTime);\n', '    }\n', '\n', '    /**\n', '     * @dev Stops the changing of the amplification var A, setting\n', '     * it to whatever the current value is.\n', '     */\n', '    function stopRampA(MassetStructs.AmpData storage _ampData, uint256 _currentA) external {\n', '        require(block.timestamp < _ampData.rampEndTime, "Amplification not changing");\n', '\n', '        _ampData.initialA = SafeCast.toUint64(_currentA);\n', '        _ampData.targetA = SafeCast.toUint64(_currentA);\n', '        _ampData.rampStartTime = SafeCast.toUint64(block.timestamp);\n', '        _ampData.rampEndTime = SafeCast.toUint64(block.timestamp);\n', '\n', '        emit StopRampA(_currentA, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a bAsset index from storage\n', '     * @param _asset      Address of the asset\n', '     * @return idx        Index of the asset\n', '     */\n', '    function _getAssetIndex(\n', '        MassetStructs.BassetPersonal[] storage _bAssetPersonal,\n', '        mapping(address => uint8) storage _bAssetIndexes,\n', '        address _asset\n', '    ) internal view returns (uint8 idx) {\n', '        idx = _bAssetIndexes[_asset];\n', '        require(_bAssetPersonal[idx].addr == _asset, "Invalid asset input");\n', '    }\n', '\n', '    /***************************************\n', '                    FORGING\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Deposits a given asset to the system. If there is sufficient room for the asset\n', '     * in the cache, then just transfer, otherwise reset the cache to the desired mid level by\n', '     * depositing the delta in the platform\n', '     */\n', '    function depositTokens(\n', '        MassetStructs.BassetPersonal memory _bAsset,\n', '        uint256 _bAssetRatio,\n', '        uint256 _quantity,\n', '        uint256 _maxCache\n', '    ) external returns (uint256 quantityDeposited) {\n', '        // 0. If integration is 0, short circuit\n', '        if (_bAsset.integrator == address(0)) {\n', '            (uint256 received, ) =\n', '                MassetHelpers.transferReturnBalance(\n', '                    msg.sender,\n', '                    address(this),\n', '                    _bAsset.addr,\n', '                    _quantity\n', '                );\n', '            return received;\n', '        }\n', '\n', '        // 1 - Send all to PI, using the opportunity to get the cache balance and net amount transferred\n', '        uint256 cacheBal;\n', '        (quantityDeposited, cacheBal) = MassetHelpers.transferReturnBalance(\n', '            msg.sender,\n', '            _bAsset.integrator,\n', '            _bAsset.addr,\n', '            _quantity\n', '        );\n', '\n', '        // 2 - Deposit X if necessary\n', '        // 2.1 - Deposit if xfer fees\n', '        if (_bAsset.hasTxFee) {\n', '            uint256 deposited =\n', '                IPlatformIntegration(_bAsset.integrator).deposit(\n', '                    _bAsset.addr,\n', '                    quantityDeposited,\n', '                    true\n', '                );\n', '\n', '            return StableMath.min(deposited, quantityDeposited);\n', '        }\n', '        // 2.2 - Else Deposit X if Cache > %\n', '        // This check is in place to ensure that any token with a txFee is rejected\n', '        require(quantityDeposited == _quantity, "Asset not fully transferred");\n', '\n', '        uint256 relativeMaxCache = _maxCache.divRatioPrecisely(_bAssetRatio);\n', '\n', '        if (cacheBal > relativeMaxCache) {\n', '            uint256 delta = cacheBal - (relativeMaxCache / 2);\n', '            IPlatformIntegration(_bAsset.integrator).deposit(_bAsset.addr, delta, false);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraws a given asset from its platformIntegration. If there is sufficient liquidity\n', '     * in the cache, then withdraw from there, otherwise withdraw from the lending market and reset the\n', '     * cache to the mid level.\n', '     */\n', '    function withdrawTokens(\n', '        uint256 _quantity,\n', '        MassetStructs.BassetPersonal memory _personal,\n', '        MassetStructs.BassetData memory _data,\n', '        address _recipient,\n', '        uint256 _maxCache\n', '    ) external {\n', '        if (_quantity == 0) return;\n', '\n', '        // 1.0 If there is no integrator, send from here\n', '        if (_personal.integrator == address(0)) {\n', '            IERC20(_personal.addr).safeTransfer(_recipient, _quantity);\n', '        }\n', '        // 1.1 If txFee then short circuit - there is no cache\n', '        else if (_personal.hasTxFee) {\n', '            IPlatformIntegration(_personal.integrator).withdraw(\n', '                _recipient,\n', '                _personal.addr,\n', '                _quantity,\n', '                _quantity,\n', '                true\n', '            );\n', '        }\n', '        // 1.2. Else, withdraw from either cache or main vault\n', '        else {\n', '            uint256 cacheBal = IERC20(_personal.addr).balanceOf(_personal.integrator);\n', '            // 2.1 - If balance b in cache, simply withdraw\n', '            if (cacheBal >= _quantity) {\n', '                IPlatformIntegration(_personal.integrator).withdrawRaw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity\n', '                );\n', '            }\n', '            // 2.2 - Else reset the cache to X, or as far as possible\n', '            //       - Withdraw X+b from platform\n', '            //       - Send b to user\n', '            else {\n', '                uint256 relativeMidCache = _maxCache.divRatioPrecisely(_data.ratio) / 2;\n', '                uint256 totalWithdrawal =\n', '                    StableMath.min(\n', '                        relativeMidCache + _quantity - cacheBal,\n', '                        _data.vaultBalance - SafeCast.toUint128(cacheBal)\n', '                    );\n', '\n', '                IPlatformIntegration(_personal.integrator).withdraw(\n', '                    _recipient,\n', '                    _personal.addr,\n', '                    _quantity,\n', '                    totalWithdrawal,\n', '                    false\n', '                );\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'struct Basket {\n', '    Basset[] bassets;\n', '    uint8 maxBassets;\n', '    bool undergoingRecol;\n', '    bool failed;\n', '    uint256 collateralisationRatio;\n', '\n', '}\n', '\n', 'interface IBasketManager {\n', '    function getBassetIntegrator(address _bAsset)\n', '        external\n', '        view\n', '        returns (address integrator);\n', '\n', '    function getBasket()\n', '        external\n', '        view\n', '        returns (Basket memory b);\n', '}\n', '\n', 'struct Basset {\n', '    address addr;\n', '    BassetStatus status;\n', '    bool isTransferFeeCharged;\n', '    uint256 ratio;\n', '    uint256 maxWeight;\n', '    uint256 vaultBalance;\n', '\n', '}\n', '\n', 'library Migrator {\n', '\n', '    function upgrade(\n', '        IBasketManager basketManager,\n', '        MassetStructs.BassetPersonal[] storage bAssetPersonal,\n', '        MassetStructs.BassetData[] storage bAssetData,\n', '        mapping(address => uint8) storage bAssetIndexes\n', '    ) external {\n', '        Basket memory importedBasket = basketManager.getBasket();\n', '\n', '        uint256 len = importedBasket.bassets.length;\n', '        uint256[] memory scaledVaultBalances = new uint[](len);\n', '        uint256 maxScaledVaultBalance;\n', '        for (uint8 i = 0; i < len; i++) {\n', '            Basset memory bAsset = importedBasket.bassets[i];\n', '            address bAssetAddress = bAsset.addr;\n', '            bAssetIndexes[bAssetAddress] = i;\n', '\n', '            address integratorAddress = basketManager.getBassetIntegrator(bAssetAddress);\n', '            bAssetPersonal.push(\n', '                MassetStructs.BassetPersonal({\n', '                    addr: bAssetAddress,\n', '                    integrator: integratorAddress,\n', '                    hasTxFee: false,\n', '                    status: MassetStructs.BassetStatus.Normal\n', '                })\n', '            );\n', '\n', '            uint128 ratio = SafeCast.toUint128(bAsset.ratio);\n', '            uint128 vaultBalance = SafeCast.toUint128(bAsset.vaultBalance);\n', '            bAssetData.push(\n', '                MassetStructs.BassetData({ ratio: ratio, vaultBalance: vaultBalance })\n', '            );\n', '\n', '            // caclulate scaled vault bAsset balance and totoal vault balance\n', '            uint128 scaledVaultBalance = (vaultBalance * ratio) / 1e8;\n', '            scaledVaultBalances[i] = scaledVaultBalance;\n', '            maxScaledVaultBalance += scaledVaultBalance;\n', '        }\n', '\n', '        // Check each bAsset is under 25.01% weight\n', '        uint256 maxWeight = 2501;\n', '        if(len == 3){\n', '            maxWeight = 3334;\n', '        } else if (len != 4){\n', '            revert("Invalid length");\n', '        }\n', '        maxScaledVaultBalance = maxScaledVaultBalance * 2501 / 10000;\n', '        for (uint8 i = 0; i < len; i++) {\n', '            require(scaledVaultBalances[i] < maxScaledVaultBalance, "imbalanced");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @notice  Is the Masset V2.0 structs used in the upgrade of mUSD from V2.0 to V3.0.\n', ' * @author  mStable\n', ' * @dev     VERSION: 2.0\n', ' *          DATE:    2021-02-23\n', ' */\n', '/** @dev Stores high level basket info */\n', '/** @dev Stores bAsset info. The struct takes 5 storage slots per Basset */\n', '/** @dev Status of the Basset - has it broken its peg? */\n', 'enum BassetStatus {\n', '    Default,\n', '    Normal,\n', '    BrokenBelowPeg,\n', '    BrokenAbovePeg,\n', '    Blacklisted,\n', '    Liquidating,\n', '    Liquidated,\n', '    Failed\n', '}\n', '\n', '/** @dev Internal details on Basset */\n', 'struct BassetDetails {\n', '    Basset bAsset;\n', '    address integrator;\n', '    uint8 index;\n', '}\n', '\n', 'contract InitializableModuleKeysV2 {\n', '    // Governance                             // Phases\n', '    bytes32 private KEY_GOVERNANCE_DEPRICATED;          // 2.x\n', '    bytes32 private KEY_STAKING_DEPRICATED;             // 1.2\n', '    bytes32 private KEY_PROXY_ADMIN_DEPRICATED;         // 1.0\n', '\n', '    // mStable\n', '    bytes32 private KEY_ORACLE_HUB_DEPRICATED;          // 1.2\n', '    bytes32 private KEY_MANAGER_DEPRICATED;             // 1.2\n', '    bytes32 private KEY_RECOLLATERALISER_DEPRICATED;    // 2.x\n', '    bytes32 private KEY_META_TOKEN_DEPRICATED;          // 1.1\n', '    bytes32 private KEY_SAVINGS_MANAGER_DEPRICATED;     // 1.0\n', '}\n', '\n', 'contract InitializableModuleV2 is InitializableModuleKeysV2 {\n', '    address private nexus_depricated;\n', '}\n', '\n', '// External\n', '// Internal\n', '// Libs\n', '// Legacy\n', '/**\n', ' * @title   Masset used to migrate mUSD from V2.0 to V3.0\n', ' * @author  mStable\n', ' * @notice  An incentivised constant sum market maker with hard limits at max region. This supports\n', ' *          low slippage swaps and applies penalties towards min and max regions. AMM produces a\n', ' *          stablecoin (mAsset) and redirects lending market interest and swap fees to the savings\n', ' *          contract, producing a second yield bearing asset.\n', ' * @dev     VERSION: 3.0\n', ' *          DATE:    2021-01-22\n', ' */\n', 'contract MusdV3 is\n', '    IMasset,\n', '    Initializable,\n', '    InitializableToken,\n', '    InitializableModuleV2,\n', '    InitializableReentrancyGuard,\n', '    ImmutableModule\n', '{\n', '    using StableMath for uint256;\n', '\n', '    // Forging Events\n', '    event Minted(\n', '        address indexed minter,\n', '        address recipient,\n', '        uint256 mAssetQuantity,\n', '        address input,\n', '        uint256 inputQuantity\n', '    );\n', '    event MintedMulti(\n', '        address indexed minter,\n', '        address recipient,\n', '        uint256 mAssetQuantity,\n', '        address[] inputs,\n', '        uint256[] inputQuantities\n', '    );\n', '    event Swapped(\n', '        address indexed swapper,\n', '        address input,\n', '        address output,\n', '        uint256 outputAmount,\n', '        uint256 scaledFee,\n', '        address recipient\n', '    );\n', '    event Redeemed(\n', '        address indexed redeemer,\n', '        address recipient,\n', '        uint256 mAssetQuantity,\n', '        address output,\n', '        uint256 outputQuantity,\n', '        uint256 scaledFee\n', '    );\n', '    event RedeemedMulti(\n', '        address indexed redeemer,\n', '        address recipient,\n', '        uint256 mAssetQuantity,\n', '        address[] outputs,\n', '        uint256[] outputQuantity,\n', '        uint256 scaledFee\n', '    );\n', '\n', '    // State Events\n', '    event CacheSizeChanged(uint256 cacheSize);\n', '    event FeesChanged(uint256 swapFee, uint256 redemptionFee);\n', '    event WeightLimitsChanged(uint128 min, uint128 max);\n', '    event ForgeValidatorChanged(address forgeValidator);\n', '\n', '    // Release 1.0 VARS\n', '    IInvariantValidator public forgeValidator;\n', '    bool private forgeValidatorLocked;\n', '    // Deprecated - maintain for storage layout in mUSD\n', '    address private deprecated_basketManager;\n', '\n', '    // Basic redemption fee information\n', '    uint256 public swapFee;\n', '    uint256 private MAX_FEE;\n', '\n', '    // Release 1.1 VARS\n', '    uint256 public redemptionFee;\n', '\n', '    // Release 2.0 VARS\n', '    uint256 public cacheSize;\n', '    uint256 public surplus;\n', '\n', '    // Release 3.0 VARS\n', '    // Struct holding Basket details\n', '    BassetPersonal[] public bAssetPersonal;\n', '    BassetData[] public bAssetData;\n', '    mapping(address => uint8) public override bAssetIndexes;\n', '    uint8 public maxBassets;\n', '    BasketState public basket;\n', '    // Amplification Data\n', '    uint256 private constant A_PRECISION = 100;\n', '    AmpData public ampData;\n', '    WeightLimits public weightLimits;\n', '\n', '    /**\n', '     * @dev Constructor to set immutable bytecode\n', '     * @param _nexus   Nexus address\n', '     */\n', '    constructor(address _nexus) ImmutableModule(_nexus) {}\n', '\n', '    /**\n', '     * @dev Upgrades mUSD from v2.0 to v3.0.\n', '     *      This function should be called via Proxy just after the proxy has been updated.\n', '     * @param _forgeValidator  Address of the AMM implementation\n', '     * @param _config          Configutation for the invariant validator including the\n', '     *                         amplification coefficient (A) and weight limits\n', '     */\n', '    function upgrade(\n', '        address _forgeValidator,\n', '        InvariantConfig memory _config\n', '    ) public {\n', '        // prevent upgrade being run again by checking the old basket manager\n', '        require(deprecated_basketManager != address(0), "already upgraded");\n', "        // Read the Basket Manager details from the mUSD proxy's storage into memory\n", '        IBasketManager basketManager = IBasketManager(deprecated_basketManager);\n', '        // Update the storage of the Basket Manager in the mUSD Proxy\n', '        deprecated_basketManager = address(0);\n', '        // Set the state to be undergoingRecol in order to pause after upgrade\n', '        basket.undergoingRecol = true;\n', '\n', '        forgeValidator = IInvariantValidator(_forgeValidator);\n', '\n', '        Migrator.upgrade(basketManager, bAssetPersonal, bAssetData, bAssetIndexes);\n', '\n', '        // Set new V3.0 storage variables\n', '        maxBassets = 10;\n', '        uint64 startA = SafeCast.toUint64(_config.a * A_PRECISION);\n', '        ampData = AmpData(startA, startA, 0, 0);\n', '        weightLimits = _config.limits;\n', '    }\n', '\n', '    /**\n', '     * @dev Verifies that the caller is the Savings Manager contract\n', '     */\n', '    modifier onlySavingsManager() {\n', '        _isSavingsManager();\n', '        _;\n', '    }\n', '\n', '    // Internal fn for modifier to reduce deployment size\n', '    function _isSavingsManager() internal view {\n', '        require(_savingsManager() == msg.sender, "Must be savings manager");\n', '    }\n', '\n', '    /**\n', '     * @dev Requires the overall basket composition to be healthy\n', '     */\n', '    modifier whenHealthy() {\n', '        _isHealthy();\n', '        _;\n', '    }\n', '\n', '    // Internal fn for modifier to reduce deployment size\n', '    function _isHealthy() internal view {\n', '        BasketState memory basket_ = basket;\n', '        require(!basket_.undergoingRecol && !basket_.failed, "Unhealthy");\n', '    }\n', '\n', '    /**\n', '     * @dev Requires the basket not to be undergoing recollateralisation\n', '     */\n', '    modifier whenNoRecol() {\n', '        _noRecol();\n', '        _;\n', '    }\n', '\n', '    // Internal fn for modifier to reduce deployment size\n', '    function _noRecol() internal view {\n', '        BasketState memory basket_ = basket;\n', '        require(!basket_.undergoingRecol, "In recol");\n', '    }\n', '\n', '    /***************************************\n', '                MINTING (PUBLIC)\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Mint a single bAsset, at a 1:1 ratio with the bAsset. This contract\n', '     *      must have approval to spend the senders bAsset\n', '     * @param _input             Address of the bAsset to deposit for the minted mAsset.\n', '     * @param _inputQuantity     Quantity in bAsset units\n', '     * @param _minOutputQuantity Minimum mAsset quanity to be minted. This protects against slippage.\n', '     * @param _recipient         Receipient of the newly minted mAsset tokens\n', '     * @return mintOutput        Quantity of newly minted mAssets for the deposited bAsset.\n', '     */\n', '    function mint(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external override nonReentrant whenHealthy returns (uint256 mintOutput) {\n', '        mintOutput = _mintTo(_input, _inputQuantity, _minOutputQuantity, _recipient);\n', '    }\n', '\n', '    /**\n', '     * @dev Mint with multiple bAssets, at a 1:1 ratio to mAsset. This contract\n', '     *      must have approval to spend the senders bAssets\n', '     * @param _inputs            Non-duplicate address array of bASset addresses to deposit for the minted mAsset tokens.\n', '     * @param _inputQuantities   Quantity of each bAsset to deposit for the minted mAsset.\n', '     *                           Order of array should mirror the above bAsset addresses.\n', '     * @param _minOutputQuantity Minimum mAsset quanity to be minted. This protects against slippage.\n', '     * @param _recipient         Address to receive the newly minted mAsset tokens\n', '     * @return mintOutput    Quantity of newly minted mAssets for the deposited bAssets.\n', '     */\n', '    function mintMulti(\n', '        address[] calldata _inputs,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external override nonReentrant whenHealthy returns (uint256 mintOutput) {\n', '        mintOutput = _mintMulti(_inputs, _inputQuantities, _minOutputQuantity, _recipient);\n', '    }\n', '\n', '    /**\n', '     * @dev Get the projected output of a given mint\n', '     * @param _input             Address of the bAsset to deposit for the minted mAsset\n', '     * @param _inputQuantity     Quantity in bAsset units\n', '     * @return mintOutput        Estimated mint output in mAsset terms\n', '     */\n', '    function getMintOutput(address _input, uint256 _inputQuantity)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256 mintOutput)\n', '    {\n', '        require(_inputQuantity > 0, "Qty==0");\n', '\n', '        (uint8 idx, ) = _getAsset(_input);\n', '\n', '        mintOutput = forgeValidator.computeMint(bAssetData, idx, _inputQuantity, _getConfig());\n', '    }\n', '\n', '    /**\n', '     * @dev Get the projected output of a given mint\n', '     * @param _inputs            Non-duplicate address array of addresses to bAssets to deposit for the minted mAsset tokens.\n', '     * @param _inputQuantities  Quantity of each bAsset to deposit for the minted mAsset.\n', '     * @return mintOutput        Estimated mint output in mAsset terms\n', '     */\n', '    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256 mintOutput)\n', '    {\n', '        uint256 len = _inputQuantities.length;\n', '        require(len > 0 && len == _inputs.length, "Input array mismatch");\n', '        (uint8[] memory indexes, ) = _getBassets(_inputs);\n', '        return forgeValidator.computeMintMulti(bAssetData, indexes, _inputQuantities, _getConfig());\n', '    }\n', '\n', '    /***************************************\n', '              MINTING (INTERNAL)\n', '    ****************************************/\n', '\n', '    /** @dev Mint Single */\n', '    function _mintTo(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minMassetQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 mAssetMinted) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        require(_inputQuantity > 0, "Qty==0");\n', '        BassetData[] memory allBassets = bAssetData;\n', '        (uint8 bAssetIndex, BassetPersonal memory personal) = _getAsset(_input);\n', '        Cache memory cache = _getCacheDetails();\n', '        // Transfer collateral to the platform integration address and call deposit\n', '        uint256 quantityDeposited =\n', '            Manager.depositTokens(\n', '                personal,\n', '                allBassets[bAssetIndex].ratio,\n', '                _inputQuantity,\n', '                cache.maxCache\n', '            );\n', '        // Validation should be after token transfer, as bAssetQty is unknown before\n', '        mAssetMinted = forgeValidator.computeMint(\n', '            allBassets,\n', '            bAssetIndex,\n', '            quantityDeposited,\n', '            _getConfig()\n', '        );\n', '        require(mAssetMinted >= _minMassetQuantity, "Mint quantity < min qty");\n', '        // Log the Vault increase - can only be done when basket is healthy\n', '        bAssetData[bAssetIndex].vaultBalance =\n', '            allBassets[bAssetIndex].vaultBalance +\n', '            SafeCast.toUint128(quantityDeposited);\n', '        // Mint the Masset\n', '        _mint(_recipient, mAssetMinted);\n', '        emit Minted(msg.sender, _recipient, mAssetMinted, _input, quantityDeposited);\n', '    }\n', '\n', '    /** @dev Mint Multi */\n', '    function _mintMulti(\n', '        address[] memory _inputs,\n', '        uint256[] memory _inputQuantities,\n', '        uint256 _minMassetQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 mAssetMinted) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        uint256 len = _inputQuantities.length;\n', '        require(len > 0 && len == _inputs.length, "Input array mismatch");\n', '        // Load bAssets from storage into memory\n', '        (uint8[] memory indexes, BassetPersonal[] memory personals) = _getBassets(_inputs);\n', '        BassetData[] memory allBassets = bAssetData;\n', '        Cache memory cache = _getCacheDetails();\n', '        uint256[] memory quantitiesDeposited = new uint256[](len);\n', '        // Transfer the Bassets to the integrator, update storage and calc MassetQ\n', '        for (uint256 i = 0; i < len; i++) {\n', '            uint256 bAssetQuantity = _inputQuantities[i];\n', '            if (bAssetQuantity > 0) {\n', '                uint8 idx = indexes[i];\n', '                BassetData memory data = allBassets[idx];\n', '                BassetPersonal memory personal = personals[i];\n', '                uint256 quantityDeposited =\n', '                    Manager.depositTokens(personal, data.ratio, bAssetQuantity, cache.maxCache);\n', '                quantitiesDeposited[i] = quantityDeposited;\n', '                bAssetData[idx].vaultBalance =\n', '                    data.vaultBalance +\n', '                    SafeCast.toUint128(quantityDeposited);\n', '            }\n', '        }\n', '        // Validate the proposed mint, after token transfer\n', '        mAssetMinted = forgeValidator.computeMintMulti(\n', '            allBassets,\n', '            indexes,\n', '            quantitiesDeposited,\n', '            _getConfig()\n', '        );\n', '        require(mAssetMinted >= _minMassetQuantity, "Mint quantity < min qty");\n', '        require(mAssetMinted > 0, "Zero mAsset quantity");\n', '\n', '        // Mint the Masset\n', '        _mint(_recipient, mAssetMinted);\n', '        emit MintedMulti(msg.sender, _recipient, mAssetMinted, _inputs, _inputQuantities);\n', '    }\n', '\n', '    /***************************************\n', '                SWAP (PUBLIC)\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Swaps one bAsset for another bAsset using the bAsset addresses.\n', '     * bAsset <> bAsset swaps will incur a small fee (swapFee()).\n', '     * @param _input             Address of bAsset to deposit\n', '     * @param _output            Address of bAsset to receive\n', '     * @param _inputQuantity     Units of input bAsset to swap\n', '     * @param _minOutputQuantity Minimum quantity of the swap output asset. This protects against slippage\n', '     * @param _recipient         Address to transfer output asset to\n', '     * @return swapOutput        Quantity of output asset returned from swap\n', '     */\n', '    function swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external override nonReentrant whenHealthy returns (uint256 swapOutput) {\n', '        swapOutput = _swap(_input, _output, _inputQuantity, _minOutputQuantity, _recipient);\n', '    }\n', '\n', '    /**\n', '     * @dev Determines both if a trade is valid, and the expected fee or output.\n', '     * Swap is valid if it does not result in the input asset exceeding its maximum weight.\n', '     * @param _input             Address of bAsset to deposit\n', '     * @param _output            Address of bAsset to receive\n', '     * @param _inputQuantity     Units of input bAsset to swap\n', '     * @return swapOutput        Quantity of output asset returned from swap\n', '     */\n', '    function getSwapOutput(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity\n', '    ) external view override returns (uint256 swapOutput) {\n', '        require(_input != _output, "Invalid pair");\n', '        require(_inputQuantity > 0, "Invalid swap quantity");\n', '\n', '        // 1. Load the bAssets from storage into memory\n', '        BassetData[] memory allBassets = bAssetData;\n', '        (uint8 inputIdx, ) = _getAsset(_input);\n', '        (uint8 outputIdx, ) = _getAsset(_output);\n', '\n', '        // 2. If a bAsset swap, calculate the validity, output and fee\n', '        (swapOutput, ) = forgeValidator.computeSwap(\n', '            allBassets,\n', '            inputIdx,\n', '            outputIdx,\n', '            _inputQuantity,\n', '            swapFee,\n', '            _getConfig()\n', '        );\n', '    }\n', '\n', '    /***************************************\n', '              SWAP (INTERNAL)\n', '    ****************************************/\n', '\n', '    /** @dev Swap single */\n', '    function _swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 swapOutput) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        require(_input != _output, "Invalid pair");\n', '        require(_inputQuantity > 0, "Invalid swap quantity");\n', '\n', '        // 1. Load the bAssets from storage into memory\n', '        BassetData[] memory allBassets = bAssetData;\n', '        (uint8 inputIdx, BassetPersonal memory inputPersonal) = _getAsset(_input);\n', '        (uint8 outputIdx, BassetPersonal memory outputPersonal) = _getAsset(_output);\n', '        // 2. Load cache\n', '        Cache memory cache = _getCacheDetails();\n', '        // 3. Deposit the input tokens\n', '        uint256 quantityDeposited =\n', '            Manager.depositTokens(\n', '                inputPersonal,\n', '                allBassets[inputIdx].ratio,\n', '                _inputQuantity,\n', '                cache.maxCache\n', '            );\n', '        // 3.1. Update the input balance\n', '        bAssetData[inputIdx].vaultBalance =\n', '            allBassets[inputIdx].vaultBalance +\n', '            SafeCast.toUint128(quantityDeposited);\n', '\n', '        // 3. Validate the swap\n', '        uint256 scaledFee;\n', '        (swapOutput, scaledFee) = forgeValidator.computeSwap(\n', '            allBassets,\n', '            inputIdx,\n', '            outputIdx,\n', '            quantityDeposited,\n', '            swapFee,\n', '            _getConfig()\n', '        );\n', '        require(swapOutput >= _minOutputQuantity, "Output qty < minimum qty");\n', '        require(swapOutput > 0, "Zero output quantity");\n', '        //4. Settle the swap\n', '        //4.1. Decrease output bal\n', '        Manager.withdrawTokens(\n', '            swapOutput,\n', '            outputPersonal,\n', '            allBassets[outputIdx],\n', '            _recipient,\n', '            cache.maxCache\n', '        );\n', '        bAssetData[outputIdx].vaultBalance =\n', '            allBassets[outputIdx].vaultBalance -\n', '            SafeCast.toUint128(swapOutput);\n', '        // Save new surplus to storage\n', '        surplus = cache.surplus + scaledFee;\n', '        emit Swapped(\n', '            msg.sender,\n', '            inputPersonal.addr,\n', '            outputPersonal.addr,\n', '            swapOutput,\n', '            scaledFee,\n', '            _recipient\n', '        );\n', '    }\n', '\n', '    /***************************************\n', '                REDEMPTION (PUBLIC)\n', '    ****************************************/\n', '\n', '    /**\n', '     * @notice Redeems a specified quantity of mAsset in return for a bAsset specified by bAsset address.\n', '     * The bAsset is sent to the specified recipient.\n', '     * The bAsset quantity is relative to current vault balance levels and desired mAsset quantity.\n', '     * The quantity of mAsset is burnt as payment.\n', '     * A minimum quantity of bAsset is specified to protect against price slippage between the mAsset and bAsset.\n', '     * @param _output            Address of the bAsset to receive\n', '     * @param _mAssetQuantity    Quantity of mAsset to redeem\n', '     * @param _minOutputQuantity Minimum bAsset quantity to receive for the burnt mAssets. This protects against slippage.\n', '     * @param _recipient         Address to transfer the withdrawn bAssets to.\n', '     * @return outputQuantity    Quanity of bAsset units received for the burnt mAssets\n', '     */\n', '    function redeem(\n', '        address _output,\n', '        uint256 _mAssetQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external override nonReentrant whenNoRecol returns (uint256 outputQuantity) {\n', '        outputQuantity = _redeem(_output, _mAssetQuantity, _minOutputQuantity, _recipient);\n', '    }\n', '\n', '    /**\n', '     * @dev Credits a recipient with a proportionate amount of bAssets, relative to current vault\n', '     * balance levels and desired mAsset quantity. Burns the mAsset as payment.\n', '     * @param _mAssetQuantity       Quantity of mAsset to redeem\n', '     * @param _minOutputQuantities  Min units of output to receive\n', '     * @param _recipient            Address to credit the withdrawn bAssets\n', '     */\n', '    function redeemMasset(\n', '        uint256 _mAssetQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) external override nonReentrant whenNoRecol returns (uint256[] memory outputQuantities) {\n', '        outputQuantities = _redeemMasset(_mAssetQuantity, _minOutputQuantities, _recipient);\n', '    }\n', '\n', '    /**\n', '     * @dev Credits a recipient with a certain quantity of selected bAssets, in exchange for burning the\n', '     *      relative Masset quantity from the sender. Sender also incurs a small fee on the outgoing asset.\n', '     * @param _outputs           Addresses of the bAssets to receive\n', '     * @param _outputQuantities  Units of the bAssets to redeem\n', '     * @param _maxMassetQuantity Maximum mAsset quantity to burn for the received bAssets. This protects against slippage.\n', '     * @param _recipient         Address to receive the withdrawn bAssets\n', '     * @return mAssetQuantity    Quantity of mAsset units burned plus the swap fee to pay for the redeemed bAssets\n', '     */\n', '    function redeemExactBassets(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) external override nonReentrant whenNoRecol returns (uint256 mAssetQuantity) {\n', '        mAssetQuantity = _redeemExactBassets(\n', '            _outputs,\n', '            _outputQuantities,\n', '            _maxMassetQuantity,\n', '            _recipient\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the estimated output from a given redeem\n', '     * @param _output            Address of the bAsset to receive\n', '     * @param _mAssetQuantity    Quantity of mAsset to redeem\n', '     * @return bAssetOutput      Estimated quantity of bAsset units received for the burnt mAssets\n', '     */\n', '    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256 bAssetOutput)\n', '    {\n', '        require(_mAssetQuantity > 0, "Qty==0");\n', '\n', '        (uint8 idx, ) = _getAsset(_output);\n', '\n', '        uint256 scaledFee = _mAssetQuantity.mulTruncate(swapFee);\n', '        bAssetOutput = forgeValidator.computeRedeem(\n', '            bAssetData,\n', '            idx,\n', '            _mAssetQuantity - scaledFee,\n', '            _getConfig()\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the estimated output from a given redeem\n', '     * @param _outputs           Addresses of the bAsset to receive\n', '     * @param _outputQuantities  Quantities of bAsset to redeem\n', '     * @return mAssetQuantity    Estimated quantity of mAsset units needed to burn to receive output\n', '     */\n', '    function getRedeemExactBassetsOutput(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities\n', '    ) external view override returns (uint256 mAssetQuantity) {\n', '        uint256 len = _outputQuantities.length;\n', '        require(len > 0 && len == _outputs.length, "Invalid array input");\n', '\n', '        (uint8[] memory indexes, ) = _getBassets(_outputs);\n', '\n', '        // calculate the value of mAssets need to cover the value of bAssets being redeemed\n', '        uint256 mAssetRedeemed =\n', '            forgeValidator.computeRedeemExact(bAssetData, indexes, _outputQuantities, _getConfig());\n', '        mAssetQuantity = mAssetRedeemed.divPrecisely(1e18 - swapFee) + 1;\n', '    }\n', '\n', '    /***************************************\n', '                REDEMPTION (INTERNAL)\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Redeem mAsset for a single bAsset\n', '     */\n', '    function _redeem(\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 bAssetQuantity) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        require(_inputQuantity > 0, "Qty==0");\n', '\n', '        // Load the bAsset data from storage into memory\n', '        BassetData[] memory allBassets = bAssetData;\n', '        (uint8 bAssetIndex, BassetPersonal memory personal) = _getAsset(_output);\n', '        // Calculate redemption quantities\n', '        uint256 scaledFee = _inputQuantity.mulTruncate(swapFee);\n', '        bAssetQuantity = forgeValidator.computeRedeem(\n', '            allBassets,\n', '            bAssetIndex,\n', '            _inputQuantity - scaledFee,\n', '            _getConfig()\n', '        );\n', '        require(bAssetQuantity >= _minOutputQuantity, "bAsset qty < min qty");\n', '        require(bAssetQuantity > 0, "Output == 0");\n', '        // Apply fees, burn mAsset and return bAsset to recipient\n', '        // 1.0. Burn the full amount of Masset\n', '        _burn(msg.sender, _inputQuantity);\n', '        surplus += scaledFee;\n', '        Cache memory cache = _getCacheDetails();\n', '        // 2.0. Transfer the Bassets to the recipient\n', '        Manager.withdrawTokens(\n', '            bAssetQuantity,\n', '            personal,\n', '            allBassets[bAssetIndex],\n', '            _recipient,\n', '            cache.maxCache\n', '        );\n', '        // 3.0. Set vault balance\n', '        bAssetData[bAssetIndex].vaultBalance =\n', '            allBassets[bAssetIndex].vaultBalance -\n', '            SafeCast.toUint128(bAssetQuantity);\n', '\n', '        emit Redeemed(\n', '            msg.sender,\n', '            _recipient,\n', '            _inputQuantity,\n', '            personal.addr,\n', '            bAssetQuantity,\n', '            scaledFee\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Redeem mAsset for proportional amount of bAssets\n', '     */\n', '    function _redeemMasset(\n', '        uint256 _inputQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) internal returns (uint256[] memory outputQuantities) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        require(_inputQuantity > 0, "Qty==0");\n', '\n', '        // Calculate mAsset redemption quantities\n', '        uint256 scaledFee = _inputQuantity.mulTruncate(redemptionFee);\n', '        uint256 mAssetRedemptionAmount = _inputQuantity - scaledFee;\n', '\n', '        // Burn mAsset quantity\n', '        _burn(msg.sender, _inputQuantity);\n', '        surplus += scaledFee;\n', '\n', '        // Calc cache and total mAsset circulating\n', '        Cache memory cache = _getCacheDetails();\n', '        // Total mAsset = (totalSupply + _inputQuantity - scaledFee) + surplus\n', '        uint256 totalMasset = cache.vaultBalanceSum + mAssetRedemptionAmount;\n', '\n', '        // Load the bAsset data from storage into memory\n', '        BassetData[] memory allBassets = bAssetData;\n', '\n', '        uint256 len = allBassets.length;\n', '        address[] memory outputs = new address[](len);\n', '        outputQuantities = new uint256[](len);\n', '        for (uint256 i = 0; i < len; i++) {\n', '            // Get amount out, proportionate to redemption quantity\n', '            // Use `cache.sum` here as the total mAsset supply is actually totalSupply + surplus\n', '            uint256 amountOut = (allBassets[i].vaultBalance * mAssetRedemptionAmount) / totalMasset;\n', '            require(amountOut > 1, "Output == 0");\n', '            amountOut -= 1;\n', '            require(amountOut >= _minOutputQuantities[i], "bAsset qty < min qty");\n', '            // Set output in array\n', '            (outputQuantities[i], outputs[i]) = (amountOut, bAssetPersonal[i].addr);\n', '            // Transfer the bAsset to the recipient\n', '            Manager.withdrawTokens(\n', '                amountOut,\n', '                bAssetPersonal[i],\n', '                allBassets[i],\n', '                _recipient,\n', '                cache.maxCache\n', '            );\n', '            // reduce vaultBalance\n', '            bAssetData[i].vaultBalance = allBassets[i].vaultBalance - SafeCast.toUint128(amountOut);\n', '        }\n', '\n', '        emit RedeemedMulti(\n', '            msg.sender,\n', '            _recipient,\n', '            _inputQuantity,\n', '            outputs,\n', '            outputQuantities,\n', '            scaledFee\n', '        );\n', '    }\n', '\n', '    /** @dev Redeem mAsset for one or more bAssets */\n', '    function _redeemExactBassets(\n', '        address[] memory _outputs,\n', '        uint256[] memory _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) internal returns (uint256 mAssetQuantity) {\n', '        require(_recipient != address(0), "Invalid recipient");\n', '        uint256 len = _outputQuantities.length;\n', '        require(len > 0 && len == _outputs.length, "Invalid array input");\n', '        require(_maxMassetQuantity > 0, "Qty==0");\n', '\n', '        (uint8[] memory indexes, BassetPersonal[] memory personal) = _getBassets(_outputs);\n', '        // Load bAsset data from storage to memory\n', '        BassetData[] memory allBassets = bAssetData;\n', '        // Validate redemption\n', '        uint256 mAssetRequired =\n', '            forgeValidator.computeRedeemExact(allBassets, indexes, _outputQuantities, _getConfig());\n', '        mAssetQuantity = mAssetRequired.divPrecisely(1e18 - swapFee);\n', '        uint256 fee = mAssetQuantity - mAssetRequired;\n', '        require(mAssetQuantity > 0, "Must redeem some mAssets");\n', '        mAssetQuantity += 1;\n', '        require(mAssetQuantity <= _maxMassetQuantity, "Redeem mAsset qty > max quantity");\n', '        // Apply fees, burn mAsset and return bAsset to recipient\n', '        // 1.0. Burn the full amount of Masset\n', '        _burn(msg.sender, mAssetQuantity);\n', '        surplus += fee;\n', '        Cache memory cache = _getCacheDetails();\n', '        // 2.0. Transfer the Bassets to the recipient and count fees\n', '        for (uint256 i = 0; i < len; i++) {\n', '            uint8 idx = indexes[i];\n', '            Manager.withdrawTokens(\n', '                _outputQuantities[i],\n', '                personal[i],\n', '                allBassets[idx],\n', '                _recipient,\n', '                cache.maxCache\n', '            );\n', '            bAssetData[idx].vaultBalance =\n', '                allBassets[idx].vaultBalance -\n', '                SafeCast.toUint128(_outputQuantities[i]);\n', '        }\n', '        emit RedeemedMulti(\n', '            msg.sender,\n', '            _recipient,\n', '            mAssetQuantity,\n', '            _outputs,\n', '            _outputQuantities,\n', '            fee\n', '        );\n', '    }\n', '\n', '    /***************************************\n', '                    GETTERS\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Get basket details for `Masset_MassetStructs.Basket`\n', '     * @return b   Basket struct\n', '     */\n', '    function getBasket() external view override returns (bool, bool) {\n', '        return (basket.undergoingRecol, basket.failed);\n', '    }\n', '\n', '    /**\n', '     * @dev Get data for a all bAssets in basket\n', '     * @return personal  Struct[] with full bAsset data\n', '     * @return data      Number of bAssets in the Basket\n', '     */\n', '    function getBassets()\n', '        external\n', '        view\n', '        override\n', '        returns (BassetPersonal[] memory personal, BassetData[] memory data)\n', '    {\n', '        return (bAssetPersonal, bAssetData);\n', '    }\n', '\n', '    /**\n', '     * @dev Get data for a specific bAsset, if it exists\n', '     * @param _bAsset   Address of bAsset\n', '     * @return personal  Struct with full bAsset data\n', '     * @return data  Struct with full bAsset data\n', '     */\n', '    function getBasset(address _bAsset)\n', '        external\n', '        view\n', '        override\n', '        returns (BassetPersonal memory personal, BassetData memory data)\n', '    {\n', '        uint8 idx = bAssetIndexes[_bAsset];\n', '        personal = bAssetPersonal[idx];\n', '        require(personal.addr == _bAsset, "Invalid asset");\n', '        data = bAssetData[idx];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all config needed for general InvariantValidator calls\n', '     */\n', '    function getConfig() external view returns (InvariantConfig memory config) {\n', '        return _getConfig();\n', '    }\n', '\n', '    /***************************************\n', '                GETTERS - INTERNAL\n', '    ****************************************/\n', '\n', '    /**\n', "     * vaultBalanceSum = totalSupply + 'surplus'\n", '     * maxCache = vaultBalanceSum * (cacheSize / 1e18)\n', '     * surplus is simply surplus, to reduce SLOADs\n', '     */\n', '    struct Cache {\n', '        uint256 vaultBalanceSum;\n', '        uint256 maxCache;\n', '        uint256 surplus;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the supply and cache details for the mAsset, taking into account the surplus\n', '     * @return Cache containing (tracked) sum of vault balances, ideal cache size and surplus\n', '     */\n', '    function _getCacheDetails() internal view returns (Cache memory) {\n', '        // read surplus from storage into memory\n', '        uint256 _surplus = surplus;\n', '        uint256 sum = totalSupply() + _surplus;\n', '        return Cache(sum, sum.mulTruncate(cacheSize), _surplus);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a bAsset from storage\n', '     * @param _asset        Address of the asset\n', '     * @return idx        Index of the asset\n', '     * @return personal   Personal details for the asset\n', '     */\n', '    function _getAsset(address _asset)\n', '        internal\n', '        view\n', '        returns (uint8 idx, BassetPersonal memory personal)\n', '    {\n', '        idx = bAssetIndexes[_asset];\n', '        personal = bAssetPersonal[idx];\n', '        require(personal.addr == _asset, "Invalid asset");\n', '    }\n', '\n', '    /**\n', '     * @dev Gets a an array of bAssets from storage and protects against duplicates\n', '     * @param _bAssets    Addresses of the assets\n', '     * @return indexes    Indexes of the assets\n', '     * @return personal   Personal details for the assets\n', '     */\n', '    function _getBassets(address[] memory _bAssets)\n', '        internal\n', '        view\n', '        returns (uint8[] memory indexes, BassetPersonal[] memory personal)\n', '    {\n', '        uint256 len = _bAssets.length;\n', '\n', '        indexes = new uint8[](len);\n', '        personal = new BassetPersonal[](len);\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            (indexes[i], personal[i]) = _getAsset(_bAssets[i]);\n', '\n', '            for (uint256 j = i + 1; j < len; j++) {\n', '                require(_bAssets[i] != _bAssets[j], "Duplicate asset");\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Gets all config needed for general InvariantValidator calls\n', '     */\n', '    function _getConfig() internal view returns (InvariantConfig memory) {\n', '        return InvariantConfig(_getA(), weightLimits);\n', '    }\n', '\n', '    /**\n', '     * @dev Gets current amplification var A\n', '     */\n', '    function _getA() internal view returns (uint256) {\n', '        AmpData memory ampData_ = ampData;\n', '\n', '        uint64 endA = ampData_.targetA;\n', '        uint64 endTime = ampData_.rampEndTime;\n', '\n', '        // If still changing, work out based on current timestmap\n', '        if (block.timestamp < endTime) {\n', '            uint64 startA = ampData_.initialA;\n', '            uint64 startTime = ampData_.rampStartTime;\n', '\n', '            (uint256 elapsed, uint256 total) = (block.timestamp - startTime, endTime - startTime);\n', '\n', '            if (endA > startA) {\n', '                return startA + (((endA - startA) * elapsed) / total);\n', '            } else {\n', '                return startA - (((startA - endA) * elapsed) / total);\n', '            }\n', '        }\n', '        // Else return final value\n', '        else {\n', '            return endA;\n', '        }\n', '    }\n', '\n', '    /***************************************\n', '                    YIELD\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Converts recently accrued swap and redeem fees into mAsset\n', '     * @return mintAmount   mAsset units generated from swap and redeem fees\n', '     * @return newSupply    mAsset total supply after mint\n', '     */\n', '    function collectInterest()\n', '        external\n', '        override\n', '        onlySavingsManager\n', '        returns (uint256 mintAmount, uint256 newSupply)\n', '    {\n', '        // Set the surplus variable to 1 to optimise for SSTORE costs.\n', '        // If setting to 0 here, it would save 5k per savings deposit, but cost 20k for the\n', '        // first surplus call (a SWAP or REDEEM).\n', '        uint256 surplusFees = surplus;\n', '        if (surplusFees > 1) {\n', '            mintAmount = surplusFees - 1;\n', '            surplus = 1;\n', '\n', '            // mint new mAsset to savings manager\n', '            _mint(msg.sender, mintAmount);\n', '            emit MintedMulti(\n', '                address(this),\n', '                msg.sender,\n', '                mintAmount,\n', '                new address[](0),\n', '                new uint256[](0)\n', '            );\n', '        }\n', '        newSupply = totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @dev Collects the interest generated from the Basket, minting a relative\n', '     *      amount of mAsset and sends it over to the SavingsManager.\n', '     * @return mintAmount   mAsset units generated from interest collected from lending markets\n', '     * @return newSupply    mAsset total supply after mint\n', '     */\n', '    function collectPlatformInterest()\n', '        external\n', '        override\n', '        onlySavingsManager\n', '        whenHealthy\n', '        nonReentrant\n', '        returns (uint256 mintAmount, uint256 newSupply)\n', '    {\n', '        uint256[] memory gains;\n', '        (mintAmount, gains) = Manager.collectPlatformInterest(\n', '            bAssetPersonal,\n', '            bAssetData,\n', '            forgeValidator,\n', '            _getConfig()\n', '        );\n', '\n', '        require(mintAmount > 0, "Must collect something");\n', '\n', '        _mint(msg.sender, mintAmount);\n', '        emit MintedMulti(address(this), msg.sender, mintAmount, new address[](0), gains);\n', '\n', '        newSupply = totalSupply();\n', '    }\n', '\n', '    /***************************************\n', '                    STATE\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Sets the MAX cache size for each bAsset. The cache will actually revolve around\n', '     *      _cacheSize * totalSupply / 2 under normal circumstances.\n', '     * @param _cacheSize Maximum percent of total mAsset supply to hold for each bAsset\n', '     */\n', '    function setCacheSize(uint256 _cacheSize) external override onlyGovernor {\n', '        require(_cacheSize <= 2e17, "Must be <= 20%");\n', '\n', '        cacheSize = _cacheSize;\n', '\n', '        emit CacheSizeChanged(_cacheSize);\n', '    }\n', '\n', '    /**\n', '     * @dev Upgrades the version of ForgeValidator protocol. Governor can do this\n', '     *      only while ForgeValidator is unlocked.\n', '     * @param _newForgeValidator Address of the new ForgeValidator\n', '     */\n', '    function upgradeForgeValidator(address _newForgeValidator) external override onlyGovernor {\n', '        require(!forgeValidatorLocked, "ForgeVal locked");\n', '        require(_newForgeValidator != address(0), "Null address");\n', '\n', '        forgeValidator = IInvariantValidator(_newForgeValidator);\n', '\n', '        emit ForgeValidatorChanged(_newForgeValidator);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the ecosystem fee for sewapping bAssets or redeeming specific bAssets\n', '     * @param _swapFee Fee calculated in (%/100 * 1e18)\n', '     */\n', '    function setFees(uint256 _swapFee, uint256 _redemptionFee) external override onlyGovernor {\n', '        require(_swapFee <= MAX_FEE, "Swap rate oob");\n', '        require(_redemptionFee <= MAX_FEE, "Redemption rate oob");\n', '\n', '        swapFee = _swapFee;\n', '        redemptionFee = _redemptionFee;\n', '\n', '        emit FeesChanged(_swapFee, _redemptionFee);\n', '    }\n', '\n', '    /**\n', '     * @dev Set the maximum weight for a given bAsset\n', '     * @param _min Weight where 100% = 1e18\n', '     * @param _max Weight where 100% = 1e18\n', '     */\n', '    function setWeightLimits(uint128 _min, uint128 _max) external onlyGovernor {\n', '        require(_min <= 1e18 / (bAssetData.length * 2), "Min weight oob");\n', '        require(_max >= 1e18 / (bAssetData.length - 1), "Max weight oob");\n', '\n', '        weightLimits = WeightLimits(_min, _max);\n', '\n', '        emit WeightLimitsChanged(_min, _max);\n', '    }\n', '\n', '    /**\n', '     * @dev Update transfer fee flag for a given bAsset, should it change its fee practice\n', '     * @param _bAsset   bAsset address\n', "     * @param _flag         Charge transfer fee when its set to 'true', otherwise 'false'\n", '     */\n', '    function setTransferFeesFlag(address _bAsset, bool _flag) external override onlyGovernor {\n', '        Manager.setTransferFeesFlag(bAssetPersonal, bAssetIndexes, _bAsset, _flag);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers all collateral from one lending market to another - used initially\n', '     *      to handle the migration between Aave V1 and Aave V2. Note - only supports non\n', '     *      tx fee enabled assets. Supports going from no integration to integration, but\n', '     *      not the other way around.\n', '     * @param _bAssets Array of basket assets to migrate\n', '     * @param _newIntegration Address of the new platform integration\n', '     */\n', '    function migrateBassets(address[] calldata _bAssets, address _newIntegration)\n', '        external\n', '        override\n', '        onlyGovernor\n', '    {\n', '        Manager.migrateBassets(bAssetPersonal, bAssetIndexes, _bAssets, _newIntegration);\n', '    }\n', '\n', '    /**\n', '     * @dev Executes the Auto Redistribution event by isolating the bAsset from the Basket\n', '     * @param _bAsset          Address of the ERC20 token to isolate\n', '     * @param _belowPeg        Bool to describe whether the bAsset deviated below peg (t)\n', '     *                         or above (f)\n', '     */\n', '    function handlePegLoss(address _bAsset, bool _belowPeg) external onlyGovernor {\n', '        Manager.handlePegLoss(basket, bAssetPersonal, bAssetIndexes, _bAsset, _belowPeg);\n', '    }\n', '\n', '    /**\n', '     * @dev Negates the isolation of a given bAsset\n', '     * @param _bAsset Address of the bAsset\n', '     */\n', '    function negateIsolation(address _bAsset) external onlyGovernor {\n', '        Manager.negateIsolation(basket, bAssetPersonal, bAssetIndexes, _bAsset);\n', '    }\n', '\n', '    /**\n', '     * @dev Starts changing of the amplification var A\n', '     * @param _targetA      Target A value\n', '     * @param _rampEndTime  Time at which A will arrive at _targetA\n', '     */\n', '    function startRampA(uint256 _targetA, uint256 _rampEndTime) external onlyGovernor {\n', '        Manager.startRampA(ampData, _targetA, _rampEndTime, _getA(), A_PRECISION);\n', '    }\n', '\n', '    /**\n', '     * @dev Stops the changing of the amplification var A, setting\n', '     * it to whatever the current value is.\n', '     */\n', '    function stopRampA() external onlyGovernor {\n', '        Manager.stopRampA(ampData, _getA());\n', '    }\n', '}']