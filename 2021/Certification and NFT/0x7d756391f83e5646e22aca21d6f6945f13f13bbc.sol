['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-09\n', '*/\n', '\n', '//SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library Address {\n', '\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            \n', '            if (returndata.length > 0) {\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'contract CSDCrowdsale is Context, ReentrancyGuard, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', ' \n', '    // The token being sold\n', '    IERC20 internal _token;\n', ' \n', '    // Address where funds are collected\n', '    address payable internal _wallet;\n', ' \n', '    // How many token units a buyer gets per wei.\n', '    // The rate is the conversion between wei and the smallest and indivisible token unit.\n', '    // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK\n', '    // 1 wei will give you 1 unit, or 0.001 TOK.\n', '    uint256 internal _rate;\n', '    uint256 internal initialrate;\n', ' \n', '    // Amount of wei raised\n', '    uint256 internal _weiRaised;\n', '\n', '    uint256 public maxAmountToBuyPerTransaction = 10**6 * 10**18;\n', '    uint256 public maxAmountToSell = 10**3 * 10**6 * 10**18;\n', '    uint256 public totalAmount;\n', '    uint256 public step;\n', '    uint256 public sellAmount;\n', '\n', '    mapping(address => uint256) public holders;\n', ' \n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param value weis paid for purchase\n', '     * @param amount amount of tokens purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n', ' \n', '    constructor (uint256 tokenrate, address payable fundswallet, IERC20 tokenAddress, uint256 amount) {\n', '        require(tokenrate > 0, "Crowdsale: rate is 0");\n', '        require(fundswallet != address(0), "Crowdsale: wallet is the zero address");\n', '        require(address(tokenAddress) != address(0), "Crowdsale: token is the zero address");\n', '        require(amount > 0, "Crowdsale: token amount is zero");\n', ' \n', '        _rate = tokenrate;\n', '        initialrate = tokenrate;\n', '        _wallet = fundswallet;\n', '        _token = tokenAddress;\n', '        totalAmount = amount;\n', '        step = 1;\n', '        sellAmount = 0;\n', '    }\n', ' \n', '    receive () external payable {\n', '        buyTokens(_msgSender());\n', '    }\n', ' \n', '    /**\n', '     * @return the token being sold.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', ' \n', '    /**\n', '     * @return the address where funds are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', ' \n', '    /**\n', '     * @return the number of token units a buyer gets per wei.\n', '     */\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', ' \n', '    /**\n', '     * @return the amount of wei raised.\n', '     */\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '\n', '    function setFundsWallet(address payable fundswallet) external onlyOwner {\n', '        _wallet = fundswallet;\n', '    }\n', '\n', '    function setMaxAmountToBuyPerTransaction(uint256 _amount) external onlyOwner {\n', '        maxAmountToBuyPerTransaction = _amount;\n', '    }\n', '\n', '    function setMaxAmountToSell(uint256 _amount) external onlyOwner {\n', '        maxAmountToSell = _amount;\n', '    }\n', '\n', '    function setRate(uint256 fundsrate) external onlyOwner {\n', '        _rate = fundsrate;\n', '    }\n', ' \n', '    /**\n', '     * @dev low level token purchase ***DO NOT OVERRIDE***\n', "     * This function has a non-reentrancy guard, so it shouldn't be called by\n", '     * another `nonReentrant` function.\n', '     * @param beneficiary Recipient of the token purchase\n', '     */\n', '    function buyTokens(address beneficiary) public nonReentrant payable {\n', '        uint256 weiAmount = msg.value;\n', '        _preValidatePurchase(beneficiary, weiAmount);\n', ' \n', '        // calculate token amount to be created\n', '        uint256 tokens = _getTokenAmount(weiAmount);\n', '\n', '        validatePurchase(beneficiary, tokens);\n', ' \n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', ' \n', '        _processPurchase(beneficiary, tokens);\n', '        emit TokensPurchased(_msgSender(), beneficiary, weiAmount, tokens);\n', '\n', '        holders[beneficiary] = holders[beneficiary].add(tokens);\n', ' \n', '        _updatePurchasingState(tokens);\n', ' \n', '        _forwardFunds();\n', '        _postValidatePurchase(beneficiary, weiAmount);\n', '    }\n', ' \n', '    function validatePurchase(address beneficiary, uint256 tokenAmount) internal view {\n', '        require(tokenAmount <= maxAmountToBuyPerTransaction, "Crowdsale: Buy amount exceeds the maxBuyPerTransactionAmount.");\n', '        require(holders[beneficiary].add(tokenAmount) <= maxAmountToSell, "Crowdsale: Buy total amount exceeds the maxAmountToSell.");\n', '        this;\n', '    }\n', '\n', '    /**\n', '     * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met.\n', '     * Use `super` in contracts that inherit from Crowdsale to extend their validations.\n', "     * Example from CappedCrowdsale.sol's _preValidatePurchase method:\n", '     *     super._preValidatePurchase(beneficiary, weiAmount);\n', '     *     require(weiRaised().add(weiAmount) <= cap);\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _preValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        require(beneficiary != address(0), "Crowdsale: beneficiary is the zero address");\n', '        require(weiAmount != 0, "Crowdsale: weiAmount is 0");\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    }\n', ' \n', '    /**\n', '     * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid\n', '     * conditions are not met.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param weiAmount Value in wei involved in the purchase\n', '     */\n', '    function _postValidatePurchase(address beneficiary, uint256 weiAmount) internal view {\n', '        // solhint-disable-previous-line no-empty-blocks\n', '    }\n', ' \n', '    /**\n', '     * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends\n', '     * its tokens.\n', '     * @param beneficiary Address performing the token purchase\n', '     * @param tokenAmount Number of tokens to be emitted\n', '     */\n', '    function _deliverTokens(address beneficiary, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(beneficiary, tokenAmount);\n', '    }\n', ' \n', '    /**\n', "     * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send\n", '     * tokens.\n', '     * @param beneficiary Address receiving the tokens\n', '     * @param tokenAmount Number of tokens to be purchased\n', '     */\n', '    function _processPurchase(address beneficiary, uint256 tokenAmount) internal {\n', '        _deliverTokens(beneficiary, tokenAmount);\n', '    }\n', ' \n', '    function _updatePurchasingState(uint256 tokenAmount) internal {\n', '        sellAmount = sellAmount.add(tokenAmount);\n', '        if (sellAmount >= totalAmount.div(10).mul(step)) {\n', '            step = step.add(1);\n', '            _rate = _rate.sub(initialrate.div(4));\n', '            if (sellAmount >= totalAmount.div(10).mul(step)) {\n', '                step = step.add(1);\n', '                _rate = _rate.sub(initialrate.div(4));\n', '            }\n', '        }\n', '    }\n', ' \n', '    /**\n', '     * @dev Override to extend the way in which ether is converted to tokens.\n', '     * @param weiAmount Value in wei to be converted into tokens\n', '     * @return Number of tokens that can be purchased with the specified _weiAmount\n', '     */\n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', ' \n', '    /**\n', '     * @dev Determines how ETH is stored/forwarded on purchases.\n', '     */\n', '    function _forwardFunds() internal {\n', '        _wallet.transfer(msg.value);\n', '    }\n', '\n', '    function sendToken(address toAddress, uint256 amount) public onlyOwner {\n', '        _deliverTokens(toAddress, amount);\n', '        _updatePurchasingState(amount);\n', '    }\n', '}']