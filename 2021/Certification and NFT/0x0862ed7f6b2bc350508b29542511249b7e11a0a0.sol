['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File contracts/access/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT;\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '  function _msgSender() internal view virtual returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '// File contracts/security/Pausable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', '\n', 'abstract contract Pausable is Context {\n', '  /**\n', '   * @dev Emitted when the pause is triggered by `account`.\n', '   */\n', '  event Paused(address account);\n', '\n', '  /**\n', '   * @dev Emitted when the pause is lifted by `account`.\n', '   */\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  /**\n', '   * @dev Initializes the contract in unpaused state.\n', '   */\n', '  constructor() {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns true if the contract is paused, and false otherwise.\n', '   */\n', '  function paused() public view virtual returns (bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must not be paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused(), "Pausable: paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must be paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused(), "Pausable: not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Triggers stopped state.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must not be paused.\n', '   */\n', '  function _pause() internal virtual whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(_msgSender());\n', '  }\n', '\n', '  /**\n', '   * @dev Returns to normal state.\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The contract must be paused.\n', '   */\n', '  function _unpause() internal virtual whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(_msgSender());\n', '  }\n', '}\n', '\n', '// File contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', '\n', 'contract Ownable is Pausable {\n', '  address public _owner;\n', '  address public _admin;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor(address ownerAddress) {\n', '    _owner = msg.sender;\n', '    _admin = ownerAddress;\n', '    emit OwnershipTransferred(address(0), _owner);\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyAdmin() {\n', '    require(_admin == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Leaves the contract without owner. It will not be possible to call\n', '   * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '   *\n', '   * NOTE: Renouncing ownership will leave the contract without an owner,\n', '   * thereby removing any functionality that is only available to the owner.\n', '   */\n', '  function renounceOwnership() public onlyAdmin {\n', '    emit OwnershipTransferred(_owner, _admin);\n', '    _owner = _admin;\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '// File contracts/abstract/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '  /**\n', '   * @dev Returns the amount of tokens in existence.\n', '   */\n', '  function totalSupply() external view returns (uint256);\n', '\n', '  /**\n', '   * @dev Returns the amount of tokens owned by `account`.\n', '   */\n', '  function balanceOf(address account) external view returns (uint256);\n', '\n', '  /**\n', "   * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Returns the remaining number of tokens that `spender` will be\n', '   * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '   * zero by default.\n', '   *\n', '   * This value changes when {approve} or {transferFrom} are called.\n', '   */\n', '  function allowance(address owner, address spender)\n', '    external\n', '    view\n', '    returns (uint256);\n', '\n', '  /**\n', "   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '   * that someone may use both the old and the new allowance by unfortunate\n', '   * transaction ordering. One possible solution to mitigate this race\n', "   * condition is to first reduce the spender's allowance to 0 and set the\n", '   * desired value afterwards:\n', '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   *\n', '   * Emits an {Approval} event.\n', '   */\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '  /**\n', '   * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "   * allowance mechanism. `amount` is then deducted from the caller's\n", '   * allowance.\n', '   *\n', '   * Returns a boolean value indicating whether the operation succeeded.\n', '   *\n', '   * Emits a {Transfer} event.\n', '   */\n', '  function transferFrom(\n', '    address sender,\n', '    address recipient,\n', '    uint256 amount\n', '  ) external returns (bool);\n', '\n', '  /**\n', '   * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '   * another (`to`).\n', '   *\n', '   * Note that `value` may be zero.\n', '   */\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '  /**\n', '   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '   * a call to {approve}. `value` is the new allowance.\n', '   */\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File contracts/legacy/UnifarmV1.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'abstract contract Admin {\n', '  struct tokenInfo {\n', '    bool isExist;\n', '    uint8 decimal;\n', '    uint256 userStakeLimit;\n', '    uint256 maxStake;\n', '  }\n', '\n', '  uint256 public stakeDuration;\n', '\n', '  mapping(address => address[]) public tokensSequenceList;\n', '  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\n', '  mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '  mapping(address => tokenInfo) public tokenDetails;\n', '}\n', '\n', 'abstract contract UnifarmV1 is Admin {\n', '  mapping(address => uint256) public totalStaking;\n', '\n', '  function viewStakingDetails(address _user)\n', '    external\n', '    view\n', '    virtual\n', '    returns (\n', '      address[] memory,\n', '      bool[] memory,\n', '      uint256[] memory,\n', '      uint256[] memory,\n', '      uint256[] memory\n', '    );\n', '}\n', '\n', '// File contracts/proxy/AdminV1Proxy.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract AdminV1Proxy {\n', '  mapping(address => uint256) public totalUnStakingB;\n', '  mapping(address => uint256) public totalUnStakingA;\n', '  mapping(address => mapping(uint256 => bool)) public unstakeStatus;\n', '\n', '  function safeWithdraw(address tokenAddress, uint256 amount) external virtual;\n', '\n', '  function transferOwnership(address newOwner) external virtual;\n', '\n', '  function owner() external virtual returns (address);\n', '}\n', '\n', '// File contracts/proxy/U1Proxy.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract U1Proxy is AdminV1Proxy {}\n', '\n', '// File contracts/U1ProxyUpgradeAdmin.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract U1ProxyUpgradeAdmin is Ownable {\n', '  /// @notice u1 Instance\n', '  UnifarmV1 public u1;\n', '\n', '  /// @notice u1Proxy Instance\n', '  U1Proxy public u1Proxy;\n', '\n', '  mapping(address => address[]) public tokensSequenceList;\n', '\n', '  mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\n', '\n', '  uint256[] public intervalDays = [1, 8, 15, 22, 29];\n', '\n', '  /// @notice poolStartTime when pool starts\n', '  uint256 public poolStartTime;\n', '\n', '  event TokenDetails(\n', '    address indexed tokenAddress,\n', '    uint256 userStakeimit,\n', '    uint256 totalStakeLimit,\n', '    uint256 Time\n', '  );\n', '\n', '  event WithdrawDetails(\n', '    address indexed tokenAddress,\n', '    uint256 withdrawalAmount,\n', '    uint256 time\n', '  );\n', '\n', '  constructor() Ownable(msg.sender) {}\n', '\n', '  function setDailyDistribution(\n', '    address[] memory stakedToken,\n', '    address[] memory rewardToken,\n', '    uint256[] memory dailyDistribution\n', '  ) public onlyOwner {\n', '    require(\n', '      stakedToken.length == rewardToken.length &&\n', '        rewardToken.length == dailyDistribution.length,\n', '      "Invalid Input"\n', '    );\n', '\n', '    for (uint8 i = 0; i < stakedToken.length; i++) {\n', '      tokenDailyDistribution[stakedToken[i]][\n', '        rewardToken[i]\n', '      ] = dailyDistribution[i];\n', '    }\n', '  }\n', '\n', '  function updateSequence(\n', '    address stakedToken,\n', '    address[] memory rewardTokenSequence\n', '  ) public onlyOwner {\n', '    tokensSequenceList[stakedToken] = new address[](0);\n', '\n', '    for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\n', '      require(\n', '        rewardTokenSequence.length <= intervalDays.length,\n', '        " Invalid Index"\n', '      );\n', '      tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\n', '    }\n', '  }\n', '\n', '  function safeWithdraw(address tokenAddress, uint256 amount)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(\n', '      IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '      "SAFEWITHDRAW: Insufficient Balance"\n', '    );\n', '\n', '    require(\n', '      IERC20(tokenAddress).transfer(_owner, amount) == true,\n', '      "SAFEWITHDRAW: Transfer failed"\n', '    );\n', '\n', '    emit WithdrawDetails(tokenAddress, amount, block.timestamp);\n', '  }\n', '\n', '  function setPoolStartTime(uint256 epoch) external onlyOwner returns (bool) {\n', '    poolStartTime = epoch;\n', '    return true;\n', '  }\n', '\n', '  function setLegacyU1Addresses(address u1_, address u1Proxy_)\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    u1 = UnifarmV1(u1_);\n', '    u1Proxy = U1Proxy(u1Proxy_);\n', '    return true;\n', '  }\n', '}\n', '\n', '// File contracts/U1ProxyUpgradablity.sol\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract U1ProxyUpgradablity is U1ProxyUpgradeAdmin {\n', '  /// @notice SafeMath using for arithmatic operations\n', '  using SafeMath for uint256;\n', '\n', '  /// @notice DAYS stand 86400 seconds\n', '  uint256 public constant DAYS = 1 days;\n', '\n', '  /// @notice u1UpgradeTotalUnstaking to update totalUnStaking in U1Upgrade;\n', '  mapping(address => uint256) public u1UpgradeTotalUnStaking;\n', '\n', '  /// @notice u1UnstakeStatus return true or false basis of you active staking.\n', '  mapping(address => mapping(uint256 => bool)) public u1UnstakeStatus;\n', '\n', '  /// @notice event IntervalDaysDetails emit on every update of Intervaldays.\n', '  event IntervalDaysDetails(uint256[] updatedIntervals, uint256 time);\n', '\n', '  event Claim(\n', '    address indexed userAddress,\n', '    address indexed stakedTokenAddress,\n', '    address indexed tokenAddress,\n', '    uint256 claimRewards,\n', '    uint256 time\n', '  );\n', '\n', '  event UnStake(\n', '    address indexed userAddress,\n', '    address indexed unStakedtokenAddress,\n', '    uint256 unStakedAmount,\n', '    uint256 time,\n', '    uint256 stakeID\n', '  );\n', '\n', '  function init(address[] memory tokenAddress)\n', '    external\n', '    onlyOwner\n', '    returns (bool)\n', '  {\n', '    for (uint256 i = 0; i < tokenAddress.length; i++) {\n', '      safeTransfer(tokenAddress[i]);\n', '    }\n', '\n', '    return true;\n', '  }\n', '\n', '  function safeTransfer(address tokenAddress) internal {\n', '    uint256 bal = IERC20(tokenAddress).balanceOf(address(u1Proxy));\n', '    if (bal > 0) u1Proxy.safeWithdraw(tokenAddress, bal);\n', '  }\n', '\n', '  function updateIntervalDays(uint256[] memory _interval) external onlyOwner {\n', '    intervalDays = new uint256[](0);\n', '\n', '    for (uint8 i = 0; i < _interval.length; i++) {\n', '      uint256 noD = u1.stakeDuration().div(DAYS);\n', '      require(noD > _interval[i], "Invalid Interval Day");\n', '      intervalDays.push(_interval[i]);\n', '    }\n', '    emit IntervalDaysDetails(intervalDays, block.timestamp);\n', '  }\n', '\n', '  function transferV1ProxyOwnership(address newOwner) external onlyOwner {\n', '    u1Proxy.transferOwnership(newOwner);\n', '  }\n', '\n', '  /**\n', '   * @notice Get rewards for one day\n', '   * @param stakedAmount Stake amount of the user\n', '   * @param stakedToken Staked token address of the user\n', '   * @param rewardToken Reward token address\n', '   * @param totalStake Reward token address\n', '   * @return reward One dayh reward for the user\n', '   */\n', '\n', '  function getOneDayReward(\n', '    uint256 stakedAmount,\n', '    address stakedToken,\n', '    address rewardToken,\n', '    uint256 totalStake\n', '  ) public view returns (uint256 reward) {\n', '    reward = (\n', '      stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])\n', '    )\n', '    .div(totalStake);\n', '    return reward;\n', '  }\n', '\n', '  /**\n', '   * @notice send rewards\n', '   * @param stakedToken Stake amount of the user\n', '   * @param tokenAddress Reward token address\n', '   * @param amount Amount to be transferred as reward\n', '   */\n', '\n', '  function sendToken(\n', '    address user,\n', '    address stakedToken,\n', '    address tokenAddress,\n', '    uint256 amount\n', '  ) internal {\n', '    // Checks\n', '\n', '    if (tokenAddress != address(0)) {\n', '      require(\n', '        IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '        "SEND : Insufficient Balance"\n', '      );\n', '      // Transfer of rewards\n', '      require(IERC20(tokenAddress).transfer(user, amount), "Transfer failed");\n', '      // Emit state changes\n', '      emit Claim(user, stakedToken, tokenAddress, amount, block.timestamp);\n', '    }\n', '  }\n', '\n', '  function totalStaking(address tokenAddress) public view returns (uint256) {\n', '    uint256 actualUnStaking = u1UpgradeTotalUnStaking[tokenAddress]\n', '    .add(u1Proxy.totalUnStakingB(tokenAddress))\n', '    .add(u1Proxy.totalUnStakingA(tokenAddress));\n', '    return u1.totalStaking(tokenAddress).sub(actualUnStaking);\n', '  }\n', '\n', '  /**\n', '   * @notice Unstake and claim rewards\n', '   * @param stakeId Stake ID of the user\n', '   */\n', '  function unStake(address user, uint256 stakeId) external whenNotPaused {\n', '    require(\n', '      msg.sender == user || msg.sender == _owner,\n', '      "UNSTAKE: Invalid User Entry"\n', '    );\n', '\n', '    (\n', '      address[] memory tokenAddress,\n', '      bool[] memory activeStatus,\n', '      ,\n', '      uint256[] memory stakedAmount,\n', '      uint256[] memory startTime\n', '    ) = (u1.viewStakingDetails(user));\n', '\n', '    bool isAlreadyUnstaked = u1Proxy.unstakeStatus(user, stakeId);\n', '\n', '    // Checks\n', '    if (\n', '      u1UnstakeStatus[user][stakeId] == false &&\n', '      activeStatus[stakeId] == true &&\n', '      isAlreadyUnstaked == false\n', '    ) u1UnstakeStatus[user][stakeId] = true;\n', '    else revert("UNSTAKE : Unstaked Already");\n', '\n', '    // State updation\n', '    uint256 actualStaking = totalStaking(tokenAddress[stakeId]);\n', '\n', '    // increase total unstaking\n', '    u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[\n', '      tokenAddress[stakeId]\n', '    ]\n', '    .add(stakedAmount[stakeId]);\n', '\n', '    // Balance check\n', '    require(\n', '      IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\n', '        stakedAmount[stakeId],\n', '      "UNSTAKE : Insufficient Balance"\n', '    );\n', '\n', '    IERC20(tokenAddress[stakeId]).transfer(user, stakedAmount[stakeId]);\n', '\n', '    if (startTime[stakeId] < poolStartTime.add(u1.stakeDuration())) {\n', '      claimRewards(\n', '        user,\n', '        startTime[stakeId],\n', '        stakedAmount[stakeId],\n', '        tokenAddress[stakeId],\n', '        actualStaking\n', '      );\n', '    }\n', '\n', '    // emit state changes\n', '    emit UnStake(\n', '      user,\n', '      tokenAddress[stakeId],\n', '      stakedAmount[stakeId],\n', '      block.timestamp,\n', '      stakeId\n', '    );\n', '  }\n', '\n', '  function claimRewards(\n', '    address user,\n', '    uint256 stakeTime,\n', '    uint256 stakedAmount,\n', '    address stakedToken,\n', '    uint256 totalStake\n', '  ) internal {\n', '    // Local variables\n', '    uint256 interval;\n', '    uint256 endOfProfit;\n', '\n', '    interval = poolStartTime.add(u1.stakeDuration());\n', '\n', '    if (interval > block.timestamp) endOfProfit = block.timestamp;\n', '    else endOfProfit = interval;\n', '\n', '    interval = endOfProfit.sub(stakeTime);\n', '    // Reward calculation\n', '\n', '    if (interval >= DAYS)\n', '      _rewardCalculation(user, stakedAmount, interval, stakedToken, totalStake);\n', '  }\n', '\n', '  function _rewardCalculation(\n', '    address user,\n', '    uint256 stakedAmount,\n', '    uint256 interval,\n', '    address stakedToken,\n', '    uint256 totalStake\n', '  ) internal {\n', '    uint256 rewardsEarned;\n', '    uint256 noOfDays;\n', '\n', '    noOfDays = interval.div(DAYS);\n', '    rewardsEarned = noOfDays.mul(\n', '      getOneDayReward(stakedAmount, stakedToken, stakedToken, totalStake)\n', '    );\n', '\n', '    //  send reward\n', '    sendToken(user, stakedToken, stakedToken, rewardsEarned);\n', '\n', '    uint8 i = 1;\n', '    while (i < intervalDays.length) {\n', '      if (noOfDays >= intervalDays[i]) {\n', '        uint256 balDays = noOfDays.sub((intervalDays[i].sub(1)));\n', '\n', '        address rewardToken = tokensSequenceList[stakedToken][i];\n', '\n', '        if (\n', '          rewardToken != stakedToken &&\n', '          u1.tokenBlockedStatus(stakedToken, rewardToken) == false\n', '        ) {\n', '          rewardsEarned = balDays.mul(\n', '            getOneDayReward(stakedAmount, stakedToken, rewardToken, totalStake)\n', '          );\n', '          // send reward\n', '          sendToken(user, stakedToken, rewardToken, rewardsEarned);\n', '        }\n', '        i = i + 1;\n', '      } else {\n', '        break;\n', '      }\n', '    }\n', '  }\n', '\n', '  function emergencyUnstake(\n', '    uint256 stakeId,\n', '    address userAddress,\n', '    address[] memory rewardtokens,\n', '    uint256[] memory amount\n', '  ) external onlyOwner {\n', '    (\n', '      address[] memory tokenAddress,\n', '      bool[] memory activeStatus,\n', '      ,\n', '      uint256[] memory stakedAmount,\n', '\n', '    ) = (u1.viewStakingDetails(userAddress));\n', '\n', '    bool isAlreadyUnstaked = u1Proxy.unstakeStatus(userAddress, stakeId);\n', '\n', '    if (\n', '      u1UnstakeStatus[userAddress][stakeId] == false &&\n', '      isAlreadyUnstaked == false &&\n', '      activeStatus[stakeId] == true\n', '    ) u1UnstakeStatus[userAddress][stakeId] = true;\n', '    else revert("EMERGENCY: Unstaked Already");\n', '\n', '    // Balance check\n', '    require(\n', '      IERC20(tokenAddress[stakeId]).balanceOf(address(this)) >=\n', '        stakedAmount[stakeId],\n', '      "EMERGENCY : Insufficient Balance"\n', '    );\n', '\n', '    IERC20(tokenAddress[stakeId]).transfer(userAddress, stakedAmount[stakeId]);\n', '\n', '    for (uint256 i; i < rewardtokens.length; i++) {\n', '      require(\n', '        IERC20(rewardtokens[i]).balanceOf(address(this)) >= amount[i],\n', '        "EMERGENCY : Insufficient Reward Balance"\n', '      );\n', '      sendToken(userAddress, tokenAddress[stakeId], rewardtokens[i], amount[i]);\n', '    }\n', '\n', '    u1UpgradeTotalUnStaking[tokenAddress[stakeId]] = u1UpgradeTotalUnStaking[\n', '      tokenAddress[stakeId]\n', '    ]\n', '    .add(stakedAmount[stakeId]);\n', '\n', '    // Emit state changes\n', '    emit UnStake(\n', '      userAddress,\n', '      tokenAddress[stakeId],\n', '      stakeId,\n', '      stakedAmount[stakeId],\n', '      block.timestamp\n', '    );\n', '  }\n', '\n', '  function lockContract(bool pauseStatus) external onlyOwner {\n', '    if (pauseStatus == true) _pause();\n', '    else if (pauseStatus == false) _unpause();\n', '  }\n', '}']