['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-02\n', '*/\n', '\n', '/***\n', '* Shoutouts:\n', '*\n', '* Bytecode origin https://www.reddit.com/r/ethereum/comments/6ic49q/any_assembly_programmers_willing_to_write_a/dj5ceuw/\n', "* Modified version of Vitalik's https://www.reddit.com/r/ethereum/comments/6c1jui/delegatecall_forwarders_how_to_save_5098_on/\n", '* Credits to Jorge Izquierdo (@izqui) for coming up with this design here: https://gist.github.com/izqui/7f904443e6d19c1ab52ec7f5ad46b3a8\n', '* Credits to Stefan George (@Georgi87) for inspiration for many of the improvements from Gnosis Safe: https://github.com/gnosis/gnosis-safe-contracts\n', '*\n', "* This version has many improvements over the original @izqui's library like using REVERT instead of THROWing on failed calls.\n", '* It also implements the awesome design pattern for initializing code as seen in Gnosis Safe Factory: https://github.com/gnosis/gnosis-safe-contracts/blob/master/contracts/ProxyFactory.sol\n', "* but unlike this last one it doesn't require that you waste storage on both the proxy and the proxied contracts (v. https://github.com/gnosis/gnosis-safe-contracts/blob/master/contracts/Proxy.sol#L8 & https://github.com/gnosis/gnosis-safe-contracts/blob/master/contracts/GnosisSafe.sol#L14)\n", '*\n', '*\n', '* v0.0.2\n', '* The proxy is now only 60 bytes long in total. Constructor included.\n', '* No functionalities were added. The change was just to make the proxy leaner.\n', '*\n', '* v0.0.3\n', '* Thanks @dacarley for noticing the incorrect check for the subsequent call to the proxy. ðŸ™Œ\n', "* Note: I'm creating a new version of this that doesn't need that one call.\n", '*       Will add tests and put this in its own repository soonâ„¢.\n', '*\n', '* v0.0.4\n', "* All the merit in this fix + update of the factory is @dacarley 's. ðŸ™Œ\n", '* Thank you! ðŸ˜„\n', '*\n', '* Potential updates can be found at https://gist.github.com/GNSPS/ba7b88565c947cfd781d44cf469c2ddb\n', '*\n', '***/\n', '\n', 'pragma solidity ^0.4.18;\n', '\n', '/**\n', ' * @title Proxy\n', ' * @dev Gives the possibility to delegate any call to a foreign implementation.\n', ' */\n', 'contract Proxy {\n', '  address public implementation;\n', '  constructor(address _implementation) {\n', '    implementation = _implementation;\n', '  }\n', '\n', '  /**\n', '  * @dev Fallback function allowing to perform a delegatecall to the given implementation.\n', '  * This function will return whatever the implementation call returns\n', '  */\n', '  function () payable public {\n', '    address _impl = implementation;\n', '    require(_impl != address(0));\n', '\n', '    assembly {\n', '      let ptr := mload(0x40)\n', '      calldatacopy(ptr, 0, calldatasize)\n', '      let result := delegatecall(gas, _impl, ptr, calldatasize, 0, 0)\n', '      let size := returndatasize\n', '      returndatacopy(ptr, 0, size)\n', '\n', '      switch result\n', '      case 0 { revert(ptr, size) }\n', '      default { return(ptr, size) }\n', '    }\n', '  }\n', '}\n', 'pragma solidity ^0.4.19;\n', '\n', '\n', 'interface IDoneth {\n', '  function init() public;\n', '}\n', '\n', '/* solhint-disable no-inline-assembly, indent, state-visibility, avoid-low-level-calls */\n', '\n', 'contract ProxyFactory {\n', '\n', '    address public target;\n', '    function ProxyFactory() public {}\n', '\n', '    event ProxyDeployed(address proxyAddress, address targetAddress);\n', '\n', '    function createProxy(address _target)\n', '        public\n', '        payable\n', '        returns (address proxyContract)\n', '    {\n', '        Proxy prox = new Proxy(_target);\n', '        IDoneth(address(prox)).init();\n', '        ProxyDeployed(address(prox), _target);\n', '    }\n', '}']