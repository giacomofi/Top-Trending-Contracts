['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '  /**\n', '   * @dev Indicates that the contract has been initialized.\n', '   */\n', '  bool private initialized;\n', '\n', '  /**\n', '   * @dev Indicates that the contract is in the process of being initialized.\n', '   */\n', '  bool private initializing;\n', '\n', '  /**\n', '   * @dev Modifier to use in the initializer function of a contract.\n', '   */\n', '  modifier initializer() {\n', '    require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '    bool isTopLevelCall = !initializing;\n', '    if (isTopLevelCall) {\n', '      initializing = true;\n', '      initialized = true;\n', '    }\n', '\n', '    _;\n', '\n', '    if (isTopLevelCall) {\n', '      initializing = false;\n', '    }\n', '  }\n', '\n', '  /// @dev Returns true if and only if the function is running in the constructor\n', '  function isConstructor() private view returns (bool) {\n', '    // extcodesize checks the size of the code stored in an address, and\n', '    // address returns the current address. Since the code is still not\n', '    // deployed when running a constructor, any checks on its code size will\n', '    // yield zero, making it an effective way to detect if a contract is\n', '    // under construction or not.\n', '    address self = address(this);\n', '    uint256 cs;\n', '    assembly { cs := extcodesize(self) }\n', '    return cs == 0;\n', '  }\n', '\n', '  // Reserved storage space to allow for layout changes in the future.\n', '  uint256[50] private ______gap;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract ContextUpgradeSafe is Initializable {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '\n', '\n', '    }\n', '\n', '\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub0(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a > b ? a - b : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20MinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20UpgradeSafe is Initializable, ContextUpgradeSafe, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '\n', '    function __ERC20_init(string memory name, string memory symbol) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20_init_unchained(name, symbol);\n', '    }\n', '\n', '    function __ERC20_init_unchained(string memory name, string memory symbol) internal initializer {\n', '\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '\n', '    uint256[44] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Extension of {ERC20} that adds a cap to the supply of tokens.\n', ' */\n', 'abstract contract ERC20CappedUpgradeSafe is Initializable, ERC20UpgradeSafe {\n', '    uint256 private _cap;\n', '\n', '    /**\n', '     * @dev Sets the value of the `cap`. This value is immutable, it can only be\n', '     * set once during construction.\n', '     */\n', '\n', '    function __ERC20Capped_init(uint256 cap) internal initializer {\n', '        __Context_init_unchained();\n', '        __ERC20Capped_init_unchained(cap);\n', '    }\n', '\n', '    function __ERC20Capped_init_unchained(uint256 cap) internal initializer {\n', '\n', '\n', '        require(cap > 0, "ERC20Capped: cap is 0");\n', '        _cap = cap;\n', '\n', '    }\n', '\n', '\n', '    /**\n', "     * @dev Returns the cap on the token's total supply.\n", '     */\n', '    function cap() public view returns (uint256) {\n', '        return _cap;\n', '    }\n', '\n', '    /**\n', '     * @dev See {ERC20-_beforeTokenTransfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - minted tokens must not cause the total supply to go over the cap.\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, amount);\n', '\n', '        if (from == address(0)) { // When minting tokens\n', '            require(totalSupply().add(amount) <= _cap, "ERC20Capped: cap exceeded");\n', '        }\n', '    }\n', '\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'contract Governable is Initializable {\n', '    address public governor;\n', '\n', '    event GovernorshipTransferred(address indexed previousGovernor, address indexed newGovernor);\n', '\n', '    /**\n', '     * @dev Contract initializer.\n', '     * called once by the factory at time of deployment\n', '     */\n', '    function __Governable_init_unchained(address governor_) virtual public initializer {\n', '        governor = governor_;\n', '        emit GovernorshipTransferred(address(0), governor);\n', '    }\n', '\n', '    modifier governance() {\n', '        require(msg.sender == governor);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to relinquish control of the contract.\n', '     * @notice Renouncing to governorship will leave the contract without an governor.\n', '     * It will not be possible to call the functions with the `governance`\n', '     * modifier anymore.\n', '     */\n', '    function renounceGovernorship() public governance {\n', '        emit GovernorshipTransferred(governor, address(0));\n', '        governor = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current governor to transfer control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function transferGovernorship(address newGovernor) public governance {\n', '        _transferGovernorship(newGovernor);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newGovernor.\n', '     * @param newGovernor The address to transfer governorship to.\n', '     */\n', '    function _transferGovernorship(address newGovernor) internal {\n', '        require(newGovernor != address(0));\n', '        emit GovernorshipTransferred(governor, newGovernor);\n', '        governor = newGovernor;\n', '    }\n', '}\n', '\n', '\n', 'contract Configurable is Governable {\n', '\n', '    mapping (bytes32 => uint) internal config;\n', '    \n', '    function getConfig(bytes32 key) public view returns (uint) {\n', '        return config[key];\n', '    }\n', '    function getConfig(bytes32 key, uint index) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ index)];\n', '    }\n', '    function getConfig(bytes32 key, address addr) public view returns (uint) {\n', '        return config[bytes32(uint(key) ^ uint(addr))];\n', '    }\n', '\n', '    function _setConfig(bytes32 key, uint value) internal {\n', '        if(config[key] != value)\n', '            config[key] = value;\n', '    }\n', '    function _setConfig(bytes32 key, uint index, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function _setConfig(bytes32 key, address addr, uint value) internal {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '    \n', '    function setConfig(bytes32 key, uint value) external governance {\n', '        _setConfig(key, value);\n', '    }\n', '    function setConfig(bytes32 key, uint index, uint value) external governance {\n', '        _setConfig(bytes32(uint(key) ^ index), value);\n', '    }\n', '    function setConfig(bytes32 key, address addr, uint value) public governance {\n', '        _setConfig(bytes32(uint(key) ^ uint(addr)), value);\n', '    }\n', '}\n', '\n', '\n', 'contract Offering is Configurable {\n', '\tusing SafeMath for uint;\n', '\tusing SafeERC20 for IERC20;\n', '\t\n', "\tbytes32 internal constant _quota_           = 'quota';\n", "\tbytes32 internal constant _volume_          = 'volume';\n", "\tbytes32 internal constant _unlocked_        = 'unlocked';\n", "\tbytes32 internal constant _ratioUnlockFirst_= 'ratioUnlockFirst';\n", "\tbytes32 internal constant _ratio_           = 'ratio';\n", "\tbytes32 internal constant _isSeed_          = 'isSeed';\n", "\tbytes32 internal constant _public_          = 'public';\n", "\tbytes32 internal constant _recipient_       = 'recipient';\n", "\tbytes32 internal constant _time_            = 'time';\n", '\tuint internal constant _timeOfferBegin_     = 0;\n', '\tuint internal constant _timeOfferEnd_       = 1;\n', '\tuint internal constant _timeUnlockFirst_    = 2;\n', '\tuint internal constant _timeUnlockBegin_    = 3;\n', '\tuint internal constant _timeUnlockEnd_      = 4;\n', '\t\n', '\tIERC20 public currency;\n', '\tIERC20 public token;\n', '\n', '\tfunction __Offering_init(address governor_, address currency_, address token_, address public_, address recipient_, uint[5] memory times_) external initializer {\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__Offering_init_unchained(currency_, token_, public_, recipient_, times_);\n', '\t}\n', '\t\n', '\tfunction __Offering_init_unchained(address currency_, address token_, address public_, address recipient_, uint[5] memory times_) public governance {\n', '\t\tcurrency = IERC20(currency_);\n', '\t\ttoken = IERC20(token_);\n', '\t\t_setConfig(_ratio_, 0, 28818181818181);     // for private\n', '\t\t_setConfig(_ratio_, 1, 54333333333333);     // for seed\n', '\t\t_setConfig(_public_, uint(public_));\n', '\t\t_setConfig(_recipient_, uint(recipient_));\n', '\t\t_setConfig(_ratioUnlockFirst_, 0.25 ether); // 25%\n', '\t\tfor(uint i=0; i<times_.length; i++)\n', '\t\t    _setConfig(_time_, i, times_[i]);\n', '\t}\n', '\t\n', '    function setQuota(address addr, uint amount, bool isSeed) public governance {\n', '        uint oldVol = getConfig(_quota_, addr).mul(getConfig(_ratio_, getConfig(_isSeed_, addr)));\n', '        \n', '        _setConfig(_quota_, addr, amount);\n', '        if(isSeed)\n', '            _setConfig(_isSeed_, addr, 1);\n', '            \n', '        uint volume = amount.mul(getConfig(_ratio_, isSeed ? 1 : 0));\n', '        uint totalVolume = getConfig(_volume_, address(0)).add(volume).sub(oldVol);\n', "        require(totalVolume <= token.balanceOf(address(this)), 'out of quota');\n", '        _setConfig(_volume_, address(0), totalVolume);\n', '    }\n', '    \n', '    function setQuotas(address[] memory addrs, uint[] memory amounts, bool isSeed) public {\n', '        for(uint i=0; i<addrs.length; i++)\n', '            setQuota(addrs[i], amounts[i], isSeed);\n', '    }\n', '    \n', '    function getQuota(address addr) public view returns (uint) {\n', '        return getConfig(_quota_, addr);\n', '    }\n', '\n', '\tfunction offer() external {\n', "\t\trequire(now >= getConfig(_time_, _timeOfferBegin_), 'Not begin');\n", '\t\tif(now > getConfig(_time_, _timeOfferEnd_))                                                 // todo timeOfferEnd should be -1\n', '\t\t\tif(token.balanceOf(address(this)) > 0)\n', '\t\t\t\ttoken.safeTransfer(address(config[_public_]), token.balanceOf(address(this)));\n', '\t\t\telse\n', "\t\t\t\trevert('offer over');\n", '\t\tuint quota = getConfig(_quota_, msg.sender);\n', "\t\trequire(quota > 0, 'no quota');\n", "\t\trequire(currency.allowance(msg.sender, address(this)) >= quota, 'allowance not enough');\n", "\t\trequire(currency.balanceOf(msg.sender) >= quota, 'balance not enough');\n", "\t\trequire(getConfig(_volume_, msg.sender) == 0, 'offered already');\n", '\t\t\n', '\t\tcurrency.safeTransferFrom(msg.sender, address(config[_recipient_]), quota);\n', '\t\t_setConfig(_volume_, msg.sender, quota.mul(getConfig(_ratio_, getConfig(_isSeed_, msg.sender))));\n', '\t}\n', '\t\n', '\tfunction getVolume(address addr) public view returns (uint) {\n', '\t    return getConfig(_volume_, addr);\n', '\t}\n', '\t\n', '    function unlockCapacity(address addr) public view returns (uint c) {\n', '        uint timeUnlockFirst    = getConfig(_time_, _timeUnlockFirst_);\n', '        if(timeUnlockFirst == 0 || now < timeUnlockFirst)\n', '            return 0;\n', '        uint timeUnlockBegin    = getConfig(_time_, _timeUnlockBegin_);\n', '        uint timeUnlockEnd      = getConfig(_time_, _timeUnlockEnd_);\n', '        uint volume             = getConfig(_volume_, addr);\n', '        uint ratioUnlockFirst   = getConfig(_ratioUnlockFirst_);\n', '\n', '        c = volume.mul(ratioUnlockFirst).div(1e18);\n', '        if(now >= timeUnlockEnd)\n', '            c = volume;\n', '        else if(now > timeUnlockBegin)\n', '            c = volume.sub(c).mul(now.sub(timeUnlockBegin)).div(timeUnlockEnd.sub(timeUnlockBegin)).add(c);\n', '        return c.sub(getConfig(_unlocked_, addr));\n', '    }\n', '    \n', '    function unlock() public {\n', '        uint c = unlockCapacity(msg.sender);\n', '        _setConfig(_unlocked_, msg.sender, getConfig(_unlocked_, msg.sender).add(c));\n', '        _setConfig(_unlocked_, address(0), getConfig(_unlocked_, address(0)).add(c));\n', '        token.safeTransfer(msg.sender, c);\n', '    }\n', '    \n', '    function unlocked(address addr) public view returns (uint) {\n', '        return getConfig(_unlocked_, addr);\n', '    }\n', '    \n', '    fallback() external {\n', '        unlock();\n', '    }\n', '}\n', '\n', '\n', 'contract Timelock is Configurable {\n', '\tusing SafeMath for uint;\n', '\tusing SafeERC20 for IERC20;\n', '\t\n', '\tIERC20 public token;\n', '\taddress public recipient;\n', '\tuint public begin;\n', '\tuint public span;\n', '\tuint public times;\n', '\tuint public total;\n', '\t\n', '\tfunction start(address _token, address _recipient, uint _begin, uint _span, uint _times) external governance {\n', "\t\trequire(address(token) == address(0), 'already start');\n", '\t\ttoken = IERC20(_token);\n', '\t\trecipient = _recipient;\n', '\t\tbegin = _begin;\n', '\t\tspan = _span;\n', '\t\ttimes = _times;\n', '\t\ttotal = token.balanceOf(address(this));\n', '\t}\n', '\n', '    function unlockCapacity() public view returns (uint) {\n', '       if(begin == 0 || now < begin)\n', '            return 0;\n', '            \n', '        for(uint i=1; i<=times; i++)\n', '            if(now < span.mul(i).div(times).add(begin))\n', '                return token.balanceOf(address(this)).sub(total.mul(times.sub(i)).div(times));\n', '                \n', '        return token.balanceOf(address(this));\n', '    }\n', '    \n', '    function unlock() public {\n', '        token.safeTransfer(recipient, unlockCapacity());\n', '    }\n', '    \n', '    fallback() external {\n', '        unlock();\n', '    }\n', '}\n', '\n', '\n', 'contract AuthQuota is Configurable {\n', '\tusing SafeMath for uint;\n', '\n', "    bytes32 internal constant _authQuota_       = 'authQuota';\n", '    \n', '    function authQuotaOf(address signatory) virtual public view returns (uint) {\n', '        return getConfig(_authQuota_, signatory);\n', '    }\n', '    \n', '    function increaseAuthQuota(address signatory, uint increment) virtual external governance returns (uint quota) {\n', '        quota = getConfig(_authQuota_, signatory).add(increment);\n', '        _setConfig(_authQuota_, signatory, quota);\n', '        emit IncreaseAuthQuota(signatory, increment, quota);\n', '    }\n', '    event IncreaseAuthQuota(address indexed signatory, uint increment, uint quota);\n', '    \n', '    function decreaseAuthQuota(address signatory, uint decrement) virtual external governance returns (uint quota) {\n', '        quota = getConfig(_authQuota_, signatory);\n', '        if(quota < decrement)\n', '            decrement = quota;\n', '        return _decreaseAuthQuota(signatory, decrement);\n', '    }\n', '    \n', '    function _decreaseAuthQuota(address signatory, uint decrement) virtual internal returns (uint quota) {\n', '        quota = getConfig(_authQuota_, signatory).sub(decrement);\n', '        _setConfig(_authQuota_, signatory, quota);\n', '        emit DecreaseAuthQuota(signatory, decrement, quota);\n', '    }\n', '    event DecreaseAuthQuota(address indexed signatory, uint decrement, uint quota);\n', '}    \n', '    \n', '    \n', 'contract TokenMapped is ContextUpgradeSafe, AuthQuota {\n', '    using SafeERC20 for IERC20;\n', '    \n', '    bytes32 public constant REDEEM_TYPEHASH = keccak256("Redeem(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    mapping (uint => bool) public redeemed;\n', '    \n', '    address public token;\n', '    \n', '\tfunction __TokenMapped_init(address governor_, address token_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__TokenMapped_init_unchained(token_);\n', '\t}\n', '\t\n', '\tfunction __TokenMapped_init_unchained(address token_) public governance {\n', '        token = token_;\n', '        \n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(ERC20UpgradeSafe(token).name())), chainId, address(this)));\n', '\t}\n', '\t\n', '    function totalMapped() virtual public view returns (uint) {\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '    \n', '    function stake(uint volume, uint chainId, address to) virtual external {\n', '        IERC20(token).safeTransferFrom(_msgSender(), address(this), volume);\n', '        emit Stake(_msgSender(), volume, chainId, to);\n', '    }\n', '    event Stake(address indexed from, uint volume, uint indexed chainId, address indexed to);\n', '    \n', '    function _redeem(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {\n', "        require(!redeemed[chainId ^ txHash], 'redeemed already');\n", '        redeemed[chainId ^ txHash] = true;\n', '        _decreaseAuthQuota(authorizer, volume);\n', '        IERC20(token).safeTransfer(to, volume);\n', '        emit Redeem(authorizer, to, volume, chainId, txHash);\n', '    }\n', '    event Redeem(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);\n', '    \n', '    function redeem(address to, uint volume, uint chainId, uint txHash) virtual external {\n', '        _redeem(_msgSender(), to, volume, chainId, txHash);\n', '    }\n', '    \n', '    function redeem(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {\n', '        bytes32 structHash = keccak256(abi.encode(REDEEM_TYPEHASH, authorizer, to, volume, chainId, txHash));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "invalid signature");\n', '        require(signatory == authorizer, "unauthorized");\n', '\n', '        _redeem(authorizer, to, volume, chainId, txHash);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'interface IPermit {\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '}\n', '\n', '\n', 'contract MappableToken is ERC20UpgradeSafe, AuthQuota, IPermit {\n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '    bytes32 public constant REDEEM_TYPEHASH = keccak256("Redeem(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    mapping (address => uint) public nonces;\n', '    mapping (uint => bool) public redeemed;\n', '    \n', '    address public token;\n', '\n', '\tfunction __MappableToken_init(address governor_, string memory name_, string memory symbol_, uint8 decimals_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained(name_, symbol_);\n', '\t\t_setupDecimals(decimals_);\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__MappableToken_init_unchained();\n', '\t}\n', '\t\n', '\tfunction __MappableToken_init_unchained() public governance {\n', '        token = address(this);\n', '        \n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), chainId, address(this)));\n', '\t}\n', '\t\n', '    function totalMapped() virtual public view returns (uint) {\n', '        return balanceOf(address(this));\n', '    }\n', '    \n', '    function stake(uint volume, uint chainId, address to) virtual external {\n', '        _transfer(_msgSender(), address(this), volume);\n', '        emit Stake(_msgSender(), volume, chainId, to);\n', '    }\n', '    event Stake(address indexed from, uint volume, uint indexed chainId, address indexed to);\n', '    \n', '    function _redeem(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {\n', "        require(!redeemed[chainId ^ txHash], 'redeemed already');\n", '        redeemed[chainId ^ txHash] = true;\n', '        _decreaseAuthQuota(authorizer, volume);\n', '        _transfer(address(this), to, volume);\n', '        emit Redeem(authorizer, to, volume, chainId, txHash);\n', '    }\n', '    event Redeem(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);\n', '    \n', '    function redeem(address to, uint volume, uint chainId, uint txHash) virtual external {\n', '        _redeem(_msgSender(), to, volume, chainId, txHash);\n', '    }\n', '    \n', '    function redeem(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {\n', '        bytes32 structHash = keccak256(abi.encode(REDEEM_TYPEHASH, authorizer, to, volume, chainId, txHash));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "invalid signature");\n', '        require(signatory == authorizer, "unauthorized");\n', '\n', '        _redeem(authorizer, to, volume, chainId, txHash);\n', '    }\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\n', "        require(deadline >= block.timestamp, 'permit EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '    \n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'contract MappingToken is ERC20CappedUpgradeSafe, AuthQuota, IPermit {\n', '    bytes32 public constant MINT_TYPEHASH = keccak256("Mint(address authorizer,address to,uint256 volume,uint256 chainId,uint256 txHash)");\n', '    bytes32 public constant DOMAIN_TYPEHASH = keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '    bytes32 public DOMAIN_SEPARATOR;\n', '    mapping (address => uint) public nonces;\n', '    mapping (uint => bool) public minted;\n', '\n', '\tfunction __MappingToken_init(address governor_, uint cap_, string memory name_, string memory symbol_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained(name_, symbol_);\n', '\t\t__ERC20Capped_init_unchained(cap_);\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__MappingToken_init_unchained();\n', '\t}\n', '\t\n', '\tfunction __MappingToken_init_unchained() public governance {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        DOMAIN_SEPARATOR = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), chainId, address(this)));\n', '\t}\n', '\t\n', '    function _mint(address authorizer, address to, uint volume, uint chainId, uint txHash) virtual internal {\n', "        require(!minted[chainId ^ txHash], 'minted already');\n", '        minted[chainId ^ txHash] = true;\n', '        _decreaseAuthQuota(authorizer, volume);\n', '        _mint(to, volume);\n', '        emit Mint(authorizer, to, volume, chainId, txHash);\n', '    }\n', '    event Mint(address indexed signatory, address indexed to, uint volume, uint chainId, uint indexed txHash);\n', '    \n', '    function mint(address to, uint volume, uint chainId, uint txHash) virtual external {\n', '        _mint(_msgSender(), to, volume, chainId, txHash);\n', '    }\n', '    \n', '    function mint(address authorizer, address to, uint256 volume, uint256 chainId, uint256 txHash, uint8 v, bytes32 r, bytes32 s) external virtual {\n', '        bytes32 structHash = keccak256(abi.encode(MINT_TYPEHASH, authorizer, to, volume, chainId, txHash));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "invalid signature");\n', '        require(signatory == authorizer, "unauthorized");\n', '\n', '        _mint(authorizer, to, volume, chainId, txHash);\n', '    }\n', '\n', '    function burn(uint volume, uint chainId, address to) virtual external {\n', '        _burn(_msgSender(), volume);\n', '        emit Burn(_msgSender(), volume, chainId, to);\n', '    }\n', '    event Burn(address indexed from, uint volume, uint indexed chainId, address indexed to);\n', '    \n', '    // keccak256("Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)");\n', '    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) override external {\n', "        require(deadline >= block.timestamp, 'permit EXPIRED');\n", '        bytes32 digest = keccak256(\n', '            abi.encodePacked(\n', "                '\\x19\\x01',\n", '                DOMAIN_SEPARATOR,\n', '                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline))\n', '            )\n', '        );\n', '        address recoveredAddress = ecrecover(digest, v, r, s);\n', "        require(recoveredAddress != address(0) && recoveredAddress == owner, 'permit INVALID_SIGNATURE');\n", '        _approve(owner, spender, value);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', 'contract MappingMATTER is MappingToken {\n', '\tfunction __MappingMATTER_init(address governor_, uint cap_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained("Antimatter.Finance Mapping Token", "MATTER");\n', '\t\t__ERC20Capped_init_unchained(cap_);\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__MappingToken_init_unchained();\n', '\t\t__MappingMATTER_init_unchained();\n', '\t}\n', '\t\n', '\tfunction __MappingMATTER_init_unchained() public governance {\n', '\t}\n', '}\t\n', '\n', '\n', 'contract MATTER is MappableToken {\n', '\tfunction __MATTER_init(address governor_, address offering_, address public_, address team_, address fund_, address mine_, address liquidity_) external initializer {\n', '        __Context_init_unchained();\n', '\t\t__ERC20_init_unchained("Antimatter.Finance Governance Token", "MATTER");\n', '\t\t__Governable_init_unchained(governor_);\n', '\t\t__MappableToken_init_unchained();\n', '\t\t__MATTER_init_unchained(offering_, public_, team_, fund_, mine_, liquidity_);\n', '\t}\n', '\t\n', '\tfunction __MATTER_init_unchained(address offering_, address public_, address team_, address fund_, address mine_, address liquidity_) public initializer {\n', '\t\t_mint(offering_,    24_000_000 * 10 ** uint256(decimals()));\n', '\t\t_mint(public_,       1_000_000 * 10 ** uint256(decimals()));\n', '\t\t_mint(team_,        10_000_000 * 10 ** uint256(decimals()));\n', '\t\t_mint(fund_,        10_000_000 * 10 ** uint256(decimals()));\n', '\t\t_mint(mine_,        50_000_000 * 10 ** uint256(decimals()));\n', '\t\t_mint(liquidity_,    5_000_000 * 10 ** uint256(decimals()));\n', '\t}\n', '}']