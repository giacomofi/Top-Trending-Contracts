['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '\n', '/// DssDeploy.sol\n', '\n', '// Copyright (C) 2018-2020 Maker Ecosystem Growth Holdings, INC.\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity >=0.5.12;\n', '\n', 'interface GemLike {\n', '    function balanceOf(address) external view returns (uint256);\n', '    function burn(uint256) external;\n', '    function transfer(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '}\n', '\n', 'interface EndLike {\n', '    function live() external view returns (uint256);\n', '    function vat()  external view returns (address);\n', '    function cage() external;\n', '}\n', '\n', 'interface DenyLike {\n', '    function deny(address) external;\n', '}\n', '\n', 'contract ESM {\n', '    GemLike public immutable gem;   // collateral (MKR token)\n', '    EndLike public immutable end;   // cage module\n', '    address public immutable proxy; // Pause proxy\n', '    uint256 public immutable min;   // minimum activation threshold [wad]\n', '\n', '    mapping(address => uint256) public sum; // per-address balance\n', '    uint256 public Sum; // total balance\n', '\n', '    event Fire();\n', '    event Join(address indexed usr, uint256 wad);\n', '\n', '    constructor(address gem_, address end_, address proxy_, uint256 min_) public {\n', '        gem = GemLike(gem_);\n', '        end = EndLike(end_);\n', '        proxy = proxy_;\n', '        min = min_;\n', '    }\n', '\n', '    function revokesGovernanceAccess() external view returns (bool ret) {\n', '        ret = proxy != address(0);\n', '    }\n', '\n', '    // -- math --\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = x + y;\n', '        require(z >= x);\n', '    }\n', '\n', '    function fire() external {\n', '        require(Sum >= min,  "ESM/min-not-reached");\n', '\n', '        if (proxy != address(0)) {\n', '            DenyLike(end.vat()).deny(proxy);\n', '        }\n', '        end.cage();\n', '\n', '        emit Fire();\n', '    }\n', '\n', '    function deny(address target) external {\n', '        require(Sum >= min,  "ESM/min-not-reached");\n', '\n', '        DenyLike(target).deny(proxy);\n', '    }\n', '\n', '    function join(uint256 wad) external {\n', '        require(end.live() == 1, "ESM/system-already-shutdown");\n', '\n', '        sum[msg.sender] = add(sum[msg.sender], wad);\n', '        Sum = add(Sum, wad);\n', '\n', '        require(gem.transferFrom(msg.sender, address(this), wad), "ESM/transfer-failed");\n', '        emit Join(msg.sender, wad);\n', '    }\n', '\n', '    function burn() external {\n', '        gem.burn(gem.balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '\n', 'contract ESMFab {\n', '    function newESM(address gov, address end, address proxy, uint min) public returns (ESM esm) {\n', '        esm = new ESM(gov, end, proxy, min);\n', '    }\n', '}']