['pragma solidity ^0.8.0;\n', '\n', 'import "Ownable.sol";\n', 'import "ERC721.sol";\n', '\n', '/**\n', ' * @title BDDPixelFactory\n', ' * @dev implments the pixel nft logic for BillionDollarDapp.com\n', ' */\n', 'contract BDDPixelFactory is ERC721, Ownable {\n', '\n', '  // Global Pixel Info\n', '  uint8 public rentalCommissionPercent;     // 0-50\n', '  uint8 public maxAltTextLength;            // 0-255\n', '  uint16 public maxTotalSupply;              // 10000\n', '  uint16 public currentTokenId;              //\n', '  uint16 public minimumRentalTimeUnit;       // ~1 hr = 3600 seconds (uint16 up to 65535)\n', '  uint16 public maximumRentalTimeUnits;       // ~1 mo = 1hr * 24hr / day * 30 days / mo = 720\n', '  uint256 public maximumCreationPrice;        // The price of the last pixel.  Price of pixel is _pixelId/totalPixels * maximumCreationPrice\n', '  uint256 public rentalFeeForMinimumTimeUnit; // ~$10 USD?\n', '\n', '  struct Pixel {\n', '    string color;         // the color of the pixel\n', '    string ownerAlt;      // owner alt text.\n', '    string rentalColor;   // show this color up until rental period ends.\n', '    string rentalAlt;     // renter alt text.\n', '    uint32 rentTimeEnd;  // the time when the pixel can change again\n', '    uint256 totalRentalRevenue;\n', '  }\n', '\n', '  Pixel[] public pixels;\n', '\n', '  //mapping (uint256 => Pixel) public pixels;\n', '  //mapping (uint256 => address) public pixelToOwner;\n', '  //mapping (address => uint) ownerPixelCount;\n', '\n', '  // Events\n', '  event PixelCreated(address indexed pixelOwner, uint256 indexed pixelId, uint256 creationPricePaid);\n', '  event PixelOwnerChangedColor(address indexed pixelOwner, uint256 indexed pixelId, string newColor);\n', '  event PixelOwnerChangedAlt(address indexed pixelOwner, uint256 indexed pixelId, string newAlt);\n', '  event PixelRented(address indexed pixelRenter, uint256 indexed pixelId, uint256 endTime, string rentalColor, string rentalAlt);\n', '\n', '  // Modifiers\n', '  modifier onlyOwnerOfPixel(uint16 _pixelId) {\n', '    require(msg.sender == ownerOf(_pixelId), "Not authorized. Must be the owner of the BDDPixel NFT.");\n', '    _;\n', '  }\n', '\n', '  // Constructor\n', '  constructor() ERC721("BillionDollarDapp Pixel", "BDDPixel") {\n', '    maxTotalSupply = 10000; // 100*100 = 10000\n', '    currentTokenId = 0;\n', '    minimumRentalTimeUnit = 3600; // seconds; 60 = 1min; 600 = 10min; 3600 = 1hr;\n', '    maximumRentalTimeUnits = 720; // max number of minimumRentalTimeUnit to allow (e.g., 720 hr ~ 1 mo)\n', '    maximumCreationPrice = 1 ether; // The maximum price paid to contract owner to mint a pixel.  Formula: maximumCreationPrice * pixelId / totalPixels;\n', '    rentalFeeForMinimumTimeUnit = 0.001 ether; // $2 USD?\n', '    rentalCommissionPercent = 33; // The amount of a rental sent to the contract owner.\n', '    maxAltTextLength = 50; // Maximum of characters allowed for alt text.\n', '  }\n', '\n', '  function _baseURI() internal view override returns (string memory) {\n', "    return 'http://nft.billiondollardapp.com/';\n", '  }\n', '\n', '  function getTokenIdForNextAvailablePixel() public view returns (uint16) {\n', '    require((currentTokenId + 1 <= maxTotalSupply), "No more pixels are available for creation.");\n', '    return (currentTokenId + 1);\n', '  }\n', '\n', '  function getCreationPriceForNextAvailablePixel() public view returns (uint256) {\n', '    require((currentTokenId + 1 <= maxTotalSupply), "No more pixels are available for creation.");\n', '    return (maximumCreationPrice * (currentTokenId) / maxTotalSupply);\n', '  }\n', '\n', '  function getAllPixels() public view returns(Pixel[] memory) {\n', '      return pixels;\n', '  }\n', '\n', '  // MINT TOKEN FUNCTIONS\n', '  //function anyoneCreatePixel(string memory _color) external payable returns (uint256) {\n', '  function anyoneCreatePixel(string memory _color) external payable {\n', '    require(msg.value >= getCreationPriceForNextAvailablePixel(), "Creation price not sufficient.");\n', '    require(bytes(_color).length == 7, "Color is wrong length; it must be a hex code in the format #RRGGBB.");\n', '    require(currentTokenId < maxTotalSupply, "No more Pixels are available to mint.");\n', '\n', '    currentTokenId++;\n', '    uint256 _newPixelId = currentTokenId;\n', '    _mint(msg.sender, _newPixelId);\n', '\n', '    pixels.push(Pixel(_color, "", "", "", 0, 0));\n', '\n', '    //pixelToOwner[currentTokenId] = msg.sender;\n', '    //ownerPixelCount[msg.sender]++;\n', '\n', '    // TODO : Figure out URI and MetaData?\n', '    //_setTokenURI();\n', '\n', '    //event PixelCreated(address indexed pixelOwner, uint256 indexed pixelId, uint256 creationPricePaid);\n', '    emit PixelCreated(msg.sender, currentTokenId, msg.value);\n', '    //return newPixelId;\n', '  }\n', '\n', '  function pixelOwnerUpdatePixelColor(uint16 _pixelId, string calldata _newColor) external onlyOwnerOfPixel(_pixelId) {\n', '    require(_pixelId <= currentTokenId, "That pixel does not exist"); // require valid _pixelId\n', '    require(bytes(_newColor).length == 7, "Color is wrong length; it must be a hex code in the format #RRGGBB."); // require color length be right for "#rrggbb"\n', '\n', '    // NOTE: pixel array is zero index so must subtract one from the pixelId to get the correct value.\n', '    pixels[_pixelId - 1].color = _newColor;\n', '\n', '    emit PixelOwnerChangedColor(msg.sender, _pixelId, _newColor);\n', '  }\n', '\n', '  function pixelOwnerUpdatePixelAlt(uint16 _pixelId, string calldata _newAlt) external onlyOwnerOfPixel(_pixelId) {\n', '    require(_pixelId <= currentTokenId, "That pixel does not exist"); // require valid _pixelId\n', '    require(bytes(_newAlt).length <= maxAltTextLength, "Alt is wrong length. Must be <= maxAltTextLength."); // require og tweet sized alt text\n', '\n', '    // NOTE: pixel array is zero index so must subtract one from the pixelId to get the correct value.\n', '    pixels[_pixelId - 1].ownerAlt = _newAlt;\n', '\n', '    emit PixelOwnerChangedAlt(msg.sender, _pixelId, _newAlt);\n', '  }\n', '\n', '  // ===== MINT TOKEN FUNCTIONS =====\n', '  function contractOwnerUpdateMaximumCreationPrice(uint256 _newMaximumCreationPrice) external onlyOwner() {\n', '    maximumCreationPrice = _newMaximumCreationPrice;\n', '  }\n', '\n', '  // ===== RENT TOKEN FUNCTIONS =====\n', '\n', '  function contractOwnerUpdateMaxTotalSupply(uint16 _newMaxTotalSupply) external onlyOwner() {\n', '    require(_newMaxTotalSupply <= 10000, "Can not set maxTotalSupply to a value higher than 10000.");\n', '    require(_newMaxTotalSupply >= currentTokenId, "Can not set maxTotalSupply to a value lower than currentTokenId.");\n', '    maxTotalSupply = _newMaxTotalSupply;\n', '  }\n', '\n', '  function contractOwnerUpdateMinimumRentalTimeUnit(uint16 _newMinimumTimeUnit) external onlyOwner() {\n', '    minimumRentalTimeUnit = _newMinimumTimeUnit; // seconds\n', '  }\n', '\n', '  function contractOwnerUpdateMaximumRentalTimeUnits(uint16 _newMaximumRentalTimeUnits) external onlyOwner() {\n', '    maximumRentalTimeUnits = _newMaximumRentalTimeUnits;\n', '  }\n', '\n', '  function contractOwnerUpdateRentalPrice(uint256 _newRentalFeeForMinimumTimeUnit) external onlyOwner() {\n', '    rentalFeeForMinimumTimeUnit = _newRentalFeeForMinimumTimeUnit;\n', '  }\n', '\n', '  function contractOwnerUpdateAltTextLength(uint8 _newAltTextLength) external onlyOwner() {\n', '    require(_newAltTextLength >= 0, "Alt text length must be greater than or equal to 0.");\n', '    require(_newAltTextLength <= 255, "Alt text length must be less than or equal to 255.");\n', '    maxAltTextLength = _newAltTextLength;\n', '  }\n', '\n', '  function contractOwnerUpdateRentalCommissionPercent(uint8 _newRentalCommissionPercent) external onlyOwner() {\n', '    require(_newRentalCommissionPercent >= 0, "Commission must be greater than or equal to 0.");\n', '    require(_newRentalCommissionPercent <= 50, "Commission must be less than or equal to 50.");\n', '    rentalCommissionPercent = _newRentalCommissionPercent;\n', '  }\n', '\n', '  function getCurrentRentalPriceForTimeUnits(uint16 _desiredTimeUnits) public view returns (uint256) {\n', '    require(_desiredTimeUnits <= maximumRentalTimeUnits, "Maximum time units is maximumRentalTimeUnits.");\n', '    return (rentalFeeForMinimumTimeUnit * _desiredTimeUnits);\n', '  }\n', '\n', '  function _pixelSetRentTimeEnd(Pixel storage _pixel, uint32 _timeUnits) internal {\n', '    require(_timeUnits <= maximumRentalTimeUnits, "Maximum time units is maximumRentalTimeUnits.");\n', '    _pixel.rentTimeEnd = uint32(block.timestamp + (_timeUnits * minimumRentalTimeUnit));\n', '  }\n', '\n', '  function _pixelIsAvailableToRent(Pixel storage _pixel) internal view returns (bool) {\n', '      return (_pixel.rentTimeEnd <= block.timestamp);\n', '  }\n', '\n', '  function isPixelAvailableToRent(uint16 _pixelId) external view returns (bool) {\n', '      Pixel storage _pixel = pixels[_pixelId - 1];\n', '      return (_pixel.rentTimeEnd <= block.timestamp);\n', '  }\n', '\n', '  // TODO: Rent pixel function\n', '  function anyoneRentPixel(uint16 _pixelId, uint16 _timeUnits, string calldata _rentalColor, string calldata _rentalAlt) external payable {\n', '    require(_pixelId <= currentTokenId, "That pixel does not exist."); // require valid _pixelId\n', '    require(bytes(_rentalColor).length == 7, "Color is wrong length; it must be a hex code in the format #RRGGBB."); // require color length be right for "#rrggbb"\n', '    require(bytes(_rentalAlt).length <= maxAltTextLength, "Alt is wrong length. Must be <= maxAltTextLength."); // require color length be right for "#rrggbb"\n', '    require(_timeUnits > 0, "Time units must be at least 1.");\n', '    require(_timeUnits <= maximumRentalTimeUnits, "Maximum time units is maximumRentalTimeUnits");\n', '\n', '    // require that the current time > the current pixelRentTimeEnd\n', '    // require that the payment be sufficient.\n', '    require(msg.value >= getCurrentRentalPriceForTimeUnits(_timeUnits));\n', '\n', '    Pixel storage desiredPixel = pixels[_pixelId - 1];\n', '    require(_pixelIsAvailableToRent(desiredPixel));\n', '    desiredPixel.rentalColor = _rentalColor;\n', '    desiredPixel.rentalAlt = _rentalAlt;\n', '    _pixelSetRentTimeEnd(desiredPixel, _timeUnits);\n', '    desiredPixel.totalRentalRevenue += msg.value;\n', '\n', '    // send money to pixel owner minus commission\n', '    uint256 _contractPayment = msg.value * rentalCommissionPercent / 100;\n', '    uint256 _pixelOwnerPayment = msg.value - _contractPayment;\n', '    payable(address(ownerOf(_pixelId))).transfer(_pixelOwnerPayment);\n', '\n', '    //event PixelRented(address indexed pixelRenter, uint256 indexed pixelId, uint256 endTime, string rentalColor);\n', '    emit PixelRented(msg.sender, _pixelId, desiredPixel.rentTimeEnd, _rentalColor, _rentalAlt);\n', '  }\n', '\n', '  // FINANCIAL\n', '  function contractOwnerWithdraw() external onlyOwner() {\n', '    address payable _owner = payable(this.owner());\n', '    _owner.transfer(address(this).balance);\n', '  }\n', '\n', '/*\n', '  function contractOwnerPayDividendToPixelOwners(uint256 _profit) external onlyOwner() {\n', '    // make sure we have enough money\n', '    require(_profit <= address(this).balance);\n', '    // money to distribute\n', '    for (uint16 _pixelId = 1; _pixelId <= currentTokenId; _pixelId++) {  //for loop example\n', '         // get owner of pixel Id\n', '         address payable _pixelOwner = payable(ownerOf(_pixelId));\n', '         // transfer owner 1/currentTokenId of balance\n', '         _pixelOwner.transfer(_profit / currentTokenId);\n', '    }\n', '  }\n', '\n', '  function anyoneTipPixelOwners(string calldata _message) external payable {\n', '    // make sure we have enough money to split up\n', '    require(msg.value >= currentTokenId, "Must tip at least currentTokenId Wei.");\n', '    // require the message to be sized to maxAltTextLength\n', '    require(bytes(_message).length <= maxAltTextLength, "Message too long. Must be <= maxAltTextLength.");\n', '\n', '    // money to distribute\n', '    for (uint16 _pixelId = 1; _pixelId <= currentTokenId; _pixelId++) {  //for loop example\n', '         // get owner of pixel Id\n', '         address payable _pixelOwner = payable(ownerOf(_pixelId));\n', '         // transfer owner 1/currentTokenId of balance\n', '         _pixelOwner.transfer(msg.value / currentTokenId);\n', '    }\n', '\n', '    emit PixelOwnersTipped(msg.sender, msg.value, _message);\n', '  }\n', '*/\n', '  // END OF LIFE\n', '  function contractOwnerDestroyContract() external onlyOwner() {\n', '    address payable _owner = payable(this.owner());\n', '    selfdestruct(_owner);\n', '  }\n', '}']