['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '// Copyright 2020 Compound Labs, Inc.\n', '//\n', '// Redistribution and use in source and binary forms, with or without\n', '// modification, are permitted provided that the following conditions are met:\n', '//\n', '// 1. Redistributions of source code must retain the above copyright notice,\n', '// this list of conditions and the following disclaimer.\n', '// 2. Redistributions in binary form must reproduce the above copyright notice,\n', '// this list of conditions and the following disclaimer in the documentation\n', '// and/or other materials provided with the distribution.\n', '// 3. Neither the name of the copyright holder nor the names of its\n', '// contributors may be used to endorse or promote products derived from this\n', '// software without specific prior written permission.\n', '//\n', '// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n', '// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n', '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n', '// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n', '// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n', '// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n', '// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n', '// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n', '// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n', '// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n', '// POSSIBILITY OF SUCH DAMAGE.\n', '\n', 'pragma solidity ^0.7.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Governor {\n', '    /// @notice The name of this contract\n', '    string public constant NAME = "Radicle Governor";\n', '\n', '    /// @notice The number of votes in support of a proposal required in order for a quorum to be reached and for a vote to succeed\n', '    function quorumVotes() public pure returns (uint256) {\n', '        return 4000000e18;\n', '    } // 4,000,000 = 4% of Token\n', '\n', '    /// @notice The number of votes required in order for a voter to become a proposer\n', '    function proposalThreshold() public pure returns (uint256) {\n', '        return 1000000e18;\n', '    } // 1,000,000 = 1% of Token\n', '\n', '    /// @notice The maximum number of actions that can be included in a proposal\n', '    function proposalMaxOperations() public pure returns (uint256) {\n', '        return 10;\n', '    } // 10 actions\n', '\n', '    /// @notice The delay before voting on a proposal may take place, once proposed\n', '    function votingDelay() public pure returns (uint256) {\n', '        return 1;\n', '    } // 1 block\n', '\n', '    /// @notice The duration of voting on a proposal, in blocks\n', '    function votingPeriod() public pure returns (uint256) {\n', '        return 17280;\n', '    } // ~3 days in blocks (assuming 15s blocks)\n', '\n', '    /// @notice The address of the Radicle Protocol Timelock\n', '    TimelockInterface public immutable timelock;\n', '\n', '    /// @notice The address of the Radicle governance token\n', '    TokenInterface public immutable token;\n', '\n', '    /// @notice The address of the Governor Guardian\n', '    address public guardian;\n', '\n', '    /// @notice The total number of proposals\n', '    uint256 public proposalCount;\n', '\n', '    /// @notice Change proposal\n', '    struct Proposal {\n', '        // Creator of the proposal\n', '        address proposer;\n', '        // The timestamp that the proposal will be available for execution, set once the vote succeeds\n', '        uint256 eta;\n', '        // the ordered list of target addresses for calls to be made\n', '        address[] targets;\n', '        // The ordered list of values (i.e. msg.value) to be passed to the calls to be made\n', '        uint256[] values;\n', '        // The ordered list of function signatures to be called\n', '        string[] signatures;\n', '        // The ordered list of calldata to be passed to each call\n', '        bytes[] calldatas;\n', '        // The block at which voting begins: holders must delegate their votes prior to this block\n', '        uint256 startBlock;\n', '        // The block at which voting ends: votes must be cast prior to this block\n', '        uint256 endBlock;\n', '        // Current number of votes in favor of this proposal\n', '        uint256 forVotes;\n', '        // Current number of votes in opposition to this proposal\n', '        uint256 againstVotes;\n', '        // Flag marking whether the proposal has been canceled\n', '        bool canceled;\n', '        // Flag marking whether the proposal has been executed\n', '        bool executed;\n', '        // Receipts of ballots for the entire set of voters\n', '        mapping(address => Receipt) receipts;\n', '    }\n', '\n', '    /// @notice Ballot receipt record for a voter\n', '    struct Receipt {\n', '        // Whether or not a vote has been cast\n', '        bool hasVoted;\n', '        // Whether or not the voter supports the proposal\n', '        bool support;\n', '        // The number of votes the voter had, which were cast\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice Possible states that a proposal may be in\n', '    enum ProposalState {Pending, Active, Canceled, Defeated, Succeeded, Queued, Expired, Executed}\n', '\n', '    /// @notice The official record of all proposals ever proposed\n', '    mapping(uint256 => Proposal) public proposals;\n', '\n', '    /// @notice The latest proposal for each proposer\n', '    mapping(address => uint256) public latestProposalIds;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH =\n', '        keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the ballot struct used by the contract\n', '    bytes32 public constant BALLOT_TYPEHASH = keccak256("Ballot(uint256 proposalId,bool support)");\n', '\n', '    /// @notice An event emitted when a new proposal is created\n', '    event ProposalCreated(\n', '        uint256 id,\n', '        address proposer,\n', '        address[] targets,\n', '        uint256[] values,\n', '        string[] signatures,\n', '        bytes[] calldatas,\n', '        uint256 startBlock,\n', '        uint256 endBlock,\n', '        string description\n', '    );\n', '\n', '    /// @notice An event emitted when a vote has been cast on a proposal\n', '    event VoteCast(address voter, uint256 proposalId, bool support, uint256 votes);\n', '\n', '    /// @notice An event emitted when a proposal has been canceled\n', '    event ProposalCanceled(uint256 id);\n', '\n', '    /// @notice An event emitted when a proposal has been queued in the Timelock\n', '    event ProposalQueued(uint256 id, uint256 eta);\n', '\n', '    /// @notice An event emitted when a proposal has been executed in the Timelock\n', '    event ProposalExecuted(uint256 id);\n', '\n', '    constructor(\n', '        address timelock_,\n', '        address token_,\n', '        address guardian_\n', '    ) {\n', '        timelock = TimelockInterface(timelock_);\n', '        token = TokenInterface(token_);\n', '        guardian = guardian_;\n', '    }\n', '\n', '    function propose(\n', '        address[] memory targets,\n', '        uint256[] memory values,\n', '        string[] memory signatures,\n', '        bytes[] memory calldatas,\n', '        string memory description\n', '    ) public returns (uint256) {\n', '        require(\n', '            token.getPriorVotes(msg.sender, sub256(block.number, 1)) >= proposalThreshold(),\n', '            "Governor::propose: proposer votes below proposal threshold"\n', '        );\n', '        require(\n', '            targets.length == values.length &&\n', '                targets.length == signatures.length &&\n', '                targets.length == calldatas.length,\n', '            "Governor::propose: proposal function information arity mismatch"\n', '        );\n', '        require(targets.length != 0, "Governor::propose: must provide actions");\n', '        require(targets.length <= proposalMaxOperations(), "Governor::propose: too many actions");\n', '\n', '        uint256 latestProposalId = latestProposalIds[msg.sender];\n', '        if (latestProposalId != 0) {\n', '            ProposalState proposersLatestProposalState = state(latestProposalId);\n', '            require(\n', '                proposersLatestProposalState != ProposalState.Active,\n', '                "Governor::propose: one live proposal per proposer, found an already active proposal"\n', '            );\n', '            require(\n', '                proposersLatestProposalState != ProposalState.Pending,\n', '                "Governor::propose: one live proposal per proposer, found an already pending proposal"\n', '            );\n', '        }\n', '\n', '        uint256 startBlock = add256(block.number, votingDelay());\n', '        uint256 endBlock = add256(startBlock, votingPeriod());\n', '\n', '        proposalCount++;\n', '        Proposal storage newProposal = proposals[proposalCount];\n', '\n', '        uint256 proposalId = proposalCount;\n', '\n', '        newProposal.proposer = msg.sender;\n', '        newProposal.eta = 0;\n', '        newProposal.targets = targets;\n', '        newProposal.values = values;\n', '        newProposal.signatures = signatures;\n', '        newProposal.calldatas = calldatas;\n', '        newProposal.startBlock = startBlock;\n', '        newProposal.endBlock = endBlock;\n', '        newProposal.forVotes = 0;\n', '        newProposal.againstVotes = 0;\n', '        newProposal.canceled = false;\n', '        newProposal.executed = false;\n', '\n', '        latestProposalIds[newProposal.proposer] = proposalId;\n', '\n', '        emit ProposalCreated(\n', '            proposalId,\n', '            msg.sender,\n', '            targets,\n', '            values,\n', '            signatures,\n', '            calldatas,\n', '            startBlock,\n', '            endBlock,\n', '            description\n', '        );\n', '        return proposalId;\n', '    }\n', '\n', '    function queue(uint256 proposalId) public {\n', '        require(\n', '            state(proposalId) == ProposalState.Succeeded,\n', '            "Governor::queue: proposal can only be queued if it is succeeded"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        uint256 eta = add256(block.timestamp, timelock.delay());\n', '        for (uint256 i = 0; i < proposal.targets.length; i++) {\n', '            _queueOrRevert(\n', '                proposal.targets[i],\n', '                proposal.values[i],\n', '                proposal.signatures[i],\n', '                proposal.calldatas[i],\n', '                eta\n', '            );\n', '        }\n', '        proposal.eta = eta;\n', '        emit ProposalQueued(proposalId, eta);\n', '    }\n', '\n', '    function _queueOrRevert(\n', '        address target,\n', '        uint256 value,\n', '        string memory signature,\n', '        bytes memory data,\n', '        uint256 eta\n', '    ) internal {\n', '        require(\n', '            !timelock.queuedTransactions(\n', '                keccak256(abi.encode(target, value, signature, data, eta))\n', '            ),\n', '            "Governor::_queueOrRevert: proposal action already queued at eta"\n', '        );\n', '        timelock.queueTransaction(target, value, signature, data, eta);\n', '    }\n', '\n', '    function execute(uint256 proposalId) public payable {\n', '        require(\n', '            state(proposalId) == ProposalState.Queued,\n', '            "Governor::execute: proposal can only be executed if it is queued"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        proposal.executed = true;\n', '        for (uint256 i = 0; i < proposal.targets.length; i++) {\n', '            timelock.executeTransaction{value: proposal.values[i]}(\n', '                proposal.targets[i],\n', '                proposal.values[i],\n', '                proposal.signatures[i],\n', '                proposal.calldatas[i],\n', '                proposal.eta\n', '            );\n', '        }\n', '        emit ProposalExecuted(proposalId);\n', '    }\n', '\n', '    function cancel(uint256 proposalId) public {\n', '        ProposalState _state = state(proposalId);\n', '        require(\n', '            _state != ProposalState.Executed,\n', '            "Governor::cancel: cannot cancel executed proposal"\n', '        );\n', '\n', '        Proposal storage proposal = proposals[proposalId];\n', '        require(\n', '            msg.sender == guardian ||\n', '                // Allows anyone to cancel a proposal if the voting power of the\n', '                // proposer dropped below the threshold after the proposal was\n', '                // submitted.\n', '                token.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\n', '                proposalThreshold(),\n', '            "Governor::cancel: cannot cancel unless proposer is below threhsold"\n', '        );\n', '\n', '        proposal.canceled = true;\n', '        for (uint256 i = 0; i < proposal.targets.length; i++) {\n', '            timelock.cancelTransaction(\n', '                proposal.targets[i],\n', '                proposal.values[i],\n', '                proposal.signatures[i],\n', '                proposal.calldatas[i],\n', '                proposal.eta\n', '            );\n', '        }\n', '\n', '        emit ProposalCanceled(proposalId);\n', '    }\n', '\n', '    function getActions(uint256 proposalId)\n', '        public\n', '        view\n', '        returns (\n', '            address[] memory targets,\n', '            uint256[] memory values,\n', '            string[] memory signatures,\n', '            bytes[] memory calldatas\n', '        )\n', '    {\n', '        Proposal storage p = proposals[proposalId];\n', '        return (p.targets, p.values, p.signatures, p.calldatas);\n', '    }\n', '\n', '    function getReceipt(uint256 proposalId, address voter) public view returns (Receipt memory) {\n', '        return proposals[proposalId].receipts[voter];\n', '    }\n', '\n', '    function state(uint256 proposalId) public view returns (ProposalState) {\n', '        require(\n', '            proposalCount >= proposalId && proposalId > 0,\n', '            "Governor::state: invalid proposal id"\n', '        );\n', '        Proposal storage proposal = proposals[proposalId];\n', '        if (proposal.canceled) {\n', '            return ProposalState.Canceled;\n', '        } else if (block.number <= proposal.startBlock) {\n', '            return ProposalState.Pending;\n', '        } else if (block.number <= proposal.endBlock) {\n', '            return ProposalState.Active;\n', '        } else if (\n', '            proposal.forVotes <= proposal.againstVotes || proposal.forVotes < quorumVotes()\n', '        ) {\n', '            return ProposalState.Defeated;\n', '        } else if (proposal.eta == 0) {\n', '            return ProposalState.Succeeded;\n', '        } else if (proposal.executed) {\n', '            return ProposalState.Executed;\n', '        } else if (block.timestamp >= add256(proposal.eta, timelock.gracePeriod())) {\n', '            return ProposalState.Expired;\n', '        } else {\n', '            return ProposalState.Queued;\n', '        }\n', '    }\n', '\n', '    function castVote(uint256 proposalId, bool support) public {\n', '        return _castVote(msg.sender, proposalId, support);\n', '    }\n', '\n', '    function castVoteBySig(\n', '        uint256 proposalId,\n', '        bool support,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        bytes32 domainSeparator =\n', '            keccak256(\n', '                abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainId(), address(this))\n', '            );\n', '        bytes32 structHash = keccak256(abi.encode(BALLOT_TYPEHASH, proposalId, support));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", domainSeparator, structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "Governor::castVoteBySig: invalid signature");\n', '        return _castVote(signatory, proposalId, support);\n', '    }\n', '\n', '    function _castVote(\n', '        address voter,\n', '        uint256 proposalId,\n', '        bool support\n', '    ) internal {\n', '        require(state(proposalId) == ProposalState.Active, "Governor::_castVote: voting is closed");\n', '        Proposal storage proposal = proposals[proposalId];\n', '        Receipt storage receipt = proposal.receipts[voter];\n', '        require(receipt.hasVoted == false, "Governor::_castVote: voter already voted");\n', '        uint96 votes = token.getPriorVotes(voter, proposal.startBlock);\n', '\n', '        if (support) {\n', '            proposal.forVotes = add256(proposal.forVotes, votes);\n', '        } else {\n', '            proposal.againstVotes = add256(proposal.againstVotes, votes);\n', '        }\n', '\n', '        receipt.hasVoted = true;\n', '        receipt.support = support;\n', '        receipt.votes = votes;\n', '\n', '        emit VoteCast(voter, proposalId, support, votes);\n', '    }\n', '\n', '    function __acceptAdmin() public {\n', '        require(msg.sender == guardian, "Governor::__acceptAdmin: sender must be gov guardian");\n', '        timelock.acceptAdmin();\n', '    }\n', '\n', '    function __abdicate() public {\n', '        require(msg.sender == guardian, "Governor::__abdicate: sender must be gov guardian");\n', '        guardian = address(0);\n', '    }\n', '\n', '    function __queueSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::__queueSetTimelockPendingAdmin: sender must be gov guardian"\n', '        );\n', '        timelock.queueTransaction(\n', '            address(timelock),\n', '            0,\n', '            "setPendingAdmin(address)",\n', '            abi.encode(newPendingAdmin),\n', '            eta\n', '        );\n', '    }\n', '\n', '    function __executeSetTimelockPendingAdmin(address newPendingAdmin, uint256 eta) public {\n', '        require(\n', '            msg.sender == guardian,\n', '            "Governor::__executeSetTimelockPendingAdmin: sender must be gov guardian"\n', '        );\n', '        timelock.executeTransaction(\n', '            address(timelock),\n', '            0,\n', '            "setPendingAdmin(address)",\n', '            abi.encode(newPendingAdmin),\n', '            eta\n', '        );\n', '    }\n', '\n', '    function add256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "addition overflow");\n', '        return c;\n', '    }\n', '\n', '    function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "subtraction underflow");\n', '        return a - b;\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        // solhint-disable no-inline-assembly\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '}\n', '\n', 'interface TimelockInterface {\n', '    function delay() external view returns (uint256);\n', '\n', '    function gracePeriod() external view returns (uint256);\n', '\n', '    function acceptAdmin() external;\n', '\n', '    function queuedTransactions(bytes32 hash) external view returns (bool);\n', '\n', '    function queueTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external returns (bytes32);\n', '\n', '    function cancelTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external;\n', '\n', '    function executeTransaction(\n', '        address target,\n', '        uint256 value,\n', '        string calldata signature,\n', '        bytes calldata data,\n', '        uint256 eta\n', '    ) external payable returns (bytes memory);\n', '}\n', '\n', 'interface TokenInterface {\n', '    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint96);\n', '}']