['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-12\n', '*/\n', '\n', 'pragma solidity 0.5.12;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error.\n', ' */\n', 'library SafeMath {\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '\n', '    address internal _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor(address initialOwner) internal {\n', '        require(initialOwner != address(0));\n', '        _owner = initialOwner;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SetterRole\n', ' */\n', 'contract SetterRole is Ownable {\n', '    using Roles for Roles.Role;\n', '\n', '    event SetterAdded(address indexed account);\n', '    event SetterRemoved(address indexed account);\n', '\n', '    Roles.Role private _setters;\n', '\n', '    modifier onlySetter() {\n', '        require(isSetter(msg.sender), "Caller has no permission");\n', '        _;\n', '    }\n', '\n', '    function isSetter(address account) public view returns (bool) {\n', '        return(_setters.has(account) || account == _owner);\n', '    }\n', '\n', '    function addSetter(address account) public onlyOwner {\n', '        _setters.add(account);\n', '        emit SetterAdded(account);\n', '    }\n', '\n', '    function removeSetter(address account) public onlyOwner {\n', '        _setters.remove(account);\n', '        emit SetterRemoved(account);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', ' interface IERC20 {\n', '     function transfer(address to, uint256 value) external returns (bool);\n', '     function approve(address spender, uint256 value) external returns (bool);\n', '     function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '     function totalSupply() external view returns (uint256);\n', '     function balanceOf(address who) external view returns (uint256);\n', '     function allowance(address owner, address spender) external view returns (uint256);\n', '     function mint(address to, uint256 value) external returns (bool);\n', '     function burnFrom(address from, uint256 value) external;\n', ' }\n', '\n', ' interface IUSDT {\n', '     function totalSupply() external view returns (uint256);\n', '     function balanceOf(address account) external view returns (uint256);\n', '     function transfer(address recipient, uint256 amount) external;\n', '     function allowance(address owner, address spender) external view returns (uint256);\n', '     function approve(address spender, uint256 amount) external;\n', '     function transferFrom(address sender, address recipient, uint256 amount) external;\n', '     function decimals() external view returns(uint8);\n', ' }\n', '\n', '/**\n', ' * @title MF TokenSale contract\n', ' * @author https://grox.solutions\n', ' */\n', 'contract TokenSale is SetterRole {\n', '    using SafeMath for uint256;\n', '\n', '    IUSDT public USDT;\n', '    IERC20 public TOKEN;\n', '\n', '    uint256 public FEE_PERCENT = 500;\n', '    uint256 public REF_PERCENT = 2000;\n', '    uint256 public FUND_PERCENT = 7500;\n', '    uint256 public PERCENT_DIV = 10000;\n', '\n', '    uint256 internal rateMul;\n', '    uint256 internal rateDiv;\n', '    bool public rateChangeable;\n', '    bool public withdrawable;\n', '\n', '    struct User {\n', '        uint256 purchased;\n', '\n', '        address referrer;\n', '        address[] referrals;\n', '        uint256 refPercent;\n', '        uint256 totalBonuses;\n', '    }\n', '\n', '    mapping (address => User) public users;\n', '\n', '    address public fundWallet;\n', '    address public feeWallet;\n', '\n', '    address public defaultRef;\n', '\n', '    uint256 internal _tokensSold;\n', '\n', '    event Purchased(address indexed account, uint256 usdt, uint256 tokens);\n', '    event RefBonus(address indexed account, address indexed referral, uint256 refPercent, uint256 amount);\n', '    event RateChanged(uint256 oldRateMul, uint256 oldRateDiv, uint256 newRateMul, uint256 newRateDiv);\n', '    event FeeWalletChanged(address oldFeeWallet, address newFeeWallet);\n', '    event FundWalletChanged(address oldFundWallet, address newFundWallet);\n', '\n', '    constructor(address USDTAddr, address TOKENAddr, address initialOwner, address initialFeeWallet, address initialFundWallet, address defaultReferrer, uint256 _rateMul, uint256 _rateDiv, bool _rateChangeable, bool _withdrawable) public Ownable(initialOwner) {\n', '        require(USDTAddr != address(0) && TOKENAddr != address(0) && initialFeeWallet != address(0) && initialFundWallet != address(0) && defaultReferrer != address(0));\n', '\n', '        USDT = IUSDT(USDTAddr);\n', '        TOKEN = IERC20(TOKENAddr);\n', '\n', '        feeWallet = initialFeeWallet;\n', '        fundWallet = initialFundWallet;\n', '        defaultRef = defaultReferrer;\n', '\n', '        rateMul = _rateMul;\n', '        rateDiv = _rateDiv;\n', '\n', '        rateChangeable = _rateChangeable;\n', '        withdrawable = _withdrawable;\n', '\n', '        emit RateChanged(0, 0, rateMul, rateDiv);\n', '    }\n', '\n', '    function buyToken(uint256 usdtAmount, address referrer) public {\n', '        require(usdtAmount >= 100e6, "Minimum purchase is 100$");\n', '        require(USDT.allowance(msg.sender, address(this)) >= usdtAmount, "Approve USDT to this contract first");\n', '\n', '        if (users[msg.sender].referrer == address(0)) {\n', '            if (referrer == address(0)) {\n', '                referrer = defaultRef;\n', '            }\n', '            users[msg.sender].referrer = referrer;\n', '            users[referrer].referrals.push(msg.sender);\n', '        }\n', '\n', '        USDT.transferFrom(msg.sender, address(this), usdtAmount);\n', '\n', '        uint256 refBonus;\n', '        if (users[msg.sender].referrer != address(0)) {\n', '            uint256 refPercent = users[users[msg.sender].referrer].refPercent > 0 ? users[users[msg.sender].referrer].refPercent : REF_PERCENT;\n', '            refBonus = usdtAmount * refPercent / PERCENT_DIV;\n', '            USDT.transfer(users[msg.sender].referrer, refBonus);\n', '            users[msg.sender].totalBonuses = users[msg.sender].totalBonuses.add(refBonus);\n', '            emit RefBonus(users[msg.sender].referrer, msg.sender, refPercent, refBonus);\n', '        }\n', '\n', '        uint256 fee = usdtAmount.mul(FEE_PERCENT + REF_PERCENT).div(PERCENT_DIV);\n', '        if (fee.sub(refBonus) > 0) {\n', '            USDT.transfer(feeWallet, fee.sub(refBonus));\n', '        }\n', '\n', '        USDT.transfer(fundWallet, usdtAmount.mul(FUND_PERCENT).div(PERCENT_DIV));\n', '\n', '        uint256 tokens = getEstimation(usdtAmount);\n', '\n', '        TOKEN.transfer(msg.sender, tokens);\n', '\n', '        _tokensSold = _tokensSold.add(tokens);\n', '        users[msg.sender].purchased = users[msg.sender].purchased.add(tokens);\n', '\n', '        emit Purchased(msg.sender, usdtAmount, tokens);\n', '    }\n', '\n', '    function withdrawERC20(address ERC20Token, address recipient) external onlyOwner {\n', '        if (ERC20Token == address(TOKEN)) {\n', '            require(withdrawable);\n', '        }\n', '\n', '        uint256 amount = IERC20(ERC20Token).balanceOf(address(this));\n', '        IERC20(ERC20Token).transfer(recipient, amount);\n', '\n', '    }\n', '\n', '    function usdtBalanceOf(address account) public view returns(uint256 usdt) {\n', '        return USDT.balanceOf(account);\n', '    }\n', '\n', '    function tokenBalanceOf(address account) public view returns(uint256 tokens) {\n', '        return TOKEN.balanceOf(account);\n', '    }\n', '\n', '    function getPurchasedOf(address account) public view returns(uint256 tokens) {\n', '        return users[account].purchased;\n', '    }\n', '\n', '    function getEstimation(uint256 usdt) public view returns(uint256 tokens) {\n', '        require(usdt >= 100e6, "Minimum purchase is 100$");\n', '        return usdt.mul(rateMul).div(rateDiv);\n', '    }\n', '\n', '    function getAvailableTokens() public view returns(uint256 tokens) {\n', '        return TOKEN.balanceOf(address(this));\n', '    }\n', '\n', '    function getSoldTokens() public view returns(uint256 tokens) {\n', '        return _tokensSold;\n', '    }\n', '\n', '    function getReferrerInfo(address account) public view returns(address referrer, uint256 refPercent, uint256 amountOfReferrals, uint256 totalBonuses) {\n', '        referrer = users[account].referrer;\n', '        refPercent = users[account].refPercent > 0 ? users[account].refPercent : REF_PERCENT;\n', '        amountOfReferrals = users[account].referrals.length;\n', '        totalBonuses = users[account].totalBonuses;\n', '    }\n', '\n', '    function getReferralInfo(address account, uint256 from, uint256 to) public view returns(address[] memory referrals, uint256[] memory bonuses) {\n', '        uint256 amountOfReferrals = users[account].referrals.length;\n', '\n', '        if (to > amountOfReferrals) {\n', '            to = amountOfReferrals;\n', '        }\n', '\n', '        require(to >= from);\n', '\n', '        uint256 length = to - from;\n', '\n', '        referrals = new address[](length);\n', '        bonuses = new uint256[](length);\n', '\n', '        for (uint256 i = 0; i < length; i++) {\n', '            referrals[i] = users[account].referrals[from + i];\n', '            bonuses[i] = users[referrals[i]].totalBonuses;\n', '        }\n', '    }\n', '\n', '    function setParameters(bool _withdrawable, bool _rateChangeable) public onlyOwner {\n', '        if (withdrawable && !_withdrawable) {\n', '            withdrawable = false;\n', '        }\n', '        if (rateChangeable && !_rateChangeable) {\n', '            rateChangeable = false;\n', '        }\n', '    }\n', '\n', '    function setReferrer(address ref, uint256 refPercent) public onlySetter {\n', '        require(ref != address(0) && refPercent <= FEE_PERCENT + REF_PERCENT);\n', '        users[ref].refPercent = refPercent;\n', '    }\n', '\n', '    function setRate(uint256 newRateMul, uint256 newRateDiv) public onlySetter {\n', '        require(rateChangeable && newRateMul >= 1 && newRateDiv >= 1);\n', '\n', '        emit RateChanged(rateMul, rateDiv, newRateMul, newRateDiv);\n', '\n', '        rateMul = newRateMul;\n', '        rateDiv = newRateDiv;\n', '    }\n', '\n', '    function _bytesToAddress(bytes memory source) internal pure returns(address parsedreferrer) {\n', '        assembly {\n', '            parsedreferrer := mload(add(source,0x14))\n', '        }\n', '    }\n', '\n', '}']