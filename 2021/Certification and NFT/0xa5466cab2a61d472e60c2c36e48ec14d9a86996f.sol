['pragma solidity 0.5.7;\n', '// Copyright BigchainDB GmbH and Ocean Protocol contributors\n', '// SPDX-License-Identifier: (Apache-2.0 AND CC-BY-4.0)\n', '// Code is Apache-2.0 and docs are CC-BY-4.0\n', '\n', "import './IERC20Template.sol';\n", "import './SafeMath.sol';\n", '\n', '/**\n', ' * @title FixedRateExchange\n', ' * @dev FixedRateExchange is a fixed rate exchange Contract\n', ' *      Marketplaces uses this contract to allow consumers \n', ' *      exchanging datatokens with ocean token using a fixed \n', ' *      exchange rate.\n', ' */\n', 'contract FixedRateExchange {\n', '    using SafeMath for uint256;\n', '    uint256 private constant BASE = 10 ** 18;\n', '    struct Exchange {\n', '        bool active;\n', '        address exchangeOwner;\n', '        address dataToken;\n', '        address baseToken;\n', '        uint256 fixedRate;\n', '    }\n', '\n', '    // maps an exchangeId to an exchange\n', '    mapping(bytes32 => Exchange) private exchanges;\n', '    bytes32[] private exchangeIds;\n', '\n', '    modifier onlyActiveExchange(\n', '        bytes32 exchangeId\n', '    )\n', '    {\n', '        require(\n', '            exchanges[exchangeId].fixedRate != 0 &&\n', '            exchanges[exchangeId].active == true,\n', "            'FixedRateExchange: Exchange does not exist!'\n", '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyExchangeOwner(\n', '        bytes32 exchangeId\n', '    )\n', '    {\n', '        require(\n', '            exchanges[exchangeId].exchangeOwner == msg.sender,\n', "            'FixedRateExchange: invalid exchange owner'\n", '        );\n', '        _;\n', '    }\n', '\n', '    event ExchangeCreated(\n', '        bytes32 indexed exchangeId,\n', '        address indexed baseToken,\n', '        address indexed dataToken,\n', '        address exchangeOwner,\n', '        uint256 fixedRate\n', '    );\n', '\n', '    event ExchangeRateChanged(\n', '        bytes32 indexed exchangeId,\n', '        address indexed exchangeOwner,\n', '        uint256 newRate\n', '    );\n', '\n', '    event ExchangeActivated(\n', '        bytes32 indexed exchangeId,\n', '        address indexed exchangeOwner\n', '    );\n', '\n', '    event ExchangeDeactivated(\n', '        bytes32 indexed exchangeId,\n', '        address indexed exchangeOwner\n', '    );\n', '\n', '    event Swapped(\n', '        bytes32 indexed exchangeId,\n', '        address indexed by,\n', '        uint256 baseTokenSwappedAmount,\n', '        uint256 dataTokenSwappedAmount\n', '    );\n', '\n', '    /**\n', '     * @dev create\n', '     *      creates new exchange pairs between base token\n', '     *      (ocean token) and data tokens.\n', '     * @param baseToken refers to a ocean token contract address\n', '     * @param dataToken refers to a data token contract address\n', '     * @param fixedRate refers to the exact fixed exchange rate in wei\n', '     */\n', '    function create(\n', '        address baseToken,\n', '        address dataToken,\n', '        uint256 fixedRate\n', '    )\n', '        external\n', '    {\n', '        require(\n', '            baseToken != address(0),\n', "            'FixedRateExchange: Invalid basetoken,  zero address'\n", '        );\n', '        require(\n', '            dataToken != address(0),\n', "            'FixedRateExchange: Invalid datatoken,  zero address'\n", '        );\n', '        require(\n', '            baseToken != dataToken,\n', "            'FixedRateExchange: Invalid datatoken,  equals basetoken'\n", '        );\n', '        require(\n', '            fixedRate != 0, \n', "            'FixedRateExchange: Invalid exchange rate value'\n", '        );\n', '        bytes32 exchangeId = generateExchangeId(\n', '            baseToken,\n', '            dataToken,\n', '            msg.sender\n', '        );\n', '        require(\n', '            exchanges[exchangeId].fixedRate == 0,\n', "            'FixedRateExchange: Exchange already exists!'\n", '        );\n', '        exchanges[exchangeId] = Exchange({\n', '            active: true,\n', '            exchangeOwner: msg.sender,\n', '            dataToken: dataToken,\n', '            baseToken: baseToken,\n', '            fixedRate: fixedRate\n', '        });\n', '        exchangeIds.push(exchangeId);\n', '\n', '        emit ExchangeCreated(\n', '            exchangeId,\n', '            baseToken,\n', '            dataToken,\n', '            msg.sender,\n', '            fixedRate\n', '        );\n', '\n', '        emit ExchangeActivated(\n', '            exchangeId,\n', '            msg.sender\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev generateExchangeId\n', '     *      creates unique exchange identifier for two token pairs.\n', '     * @param baseToken refers to a ocean token contract address\n', '     * @param dataToken refers to a data token contract address\n', '     * @param exchangeOwner exchange owner address\n', '     */\n', '    function generateExchangeId(\n', '        address baseToken,\n', '        address dataToken,\n', '        address exchangeOwner\n', '    )\n', '        public\n', '        pure\n', '        returns (bytes32)\n', '    {\n', '        return keccak256(\n', '            abi.encode(\n', '                baseToken,\n', '                dataToken,\n', '                exchangeOwner\n', '            )\n', '        );\n', '    }\n', '    \n', '    /**\n', '     * @dev CalcInGivenOut\n', '     *      Calculates how many basetokens are needed to get specifyed amount of datatokens\n', '     * @param exchangeId a unique exchange idnetifier \n', '     * @param dataTokenAmount the amount of data tokens to be exchanged\n', '     */\n', '    function CalcInGivenOut(\n', '        bytes32 exchangeId,\n', '        uint256 dataTokenAmount\n', '    )\n', '        public\n', '        view\n', '        onlyActiveExchange(\n', '            exchangeId\n', '        )\n', '        returns (uint256 baseTokenAmount)\n', '    {\n', '        baseTokenAmount = dataTokenAmount.mul(\n', '            exchanges[exchangeId].fixedRate).div(BASE);\n', '    }\n', '    \n', '    /**\n', '     * @dev swap\n', '     *      atomic swap between two registered fixed rate exchange.\n', '     * @param exchangeId a unique exchange idnetifier \n', '     * @param dataTokenAmount the amount of data tokens to be exchanged\n', '     */\n', '    function swap(\n', '        bytes32 exchangeId,\n', '        uint256 dataTokenAmount\n', '    )\n', '        external\n', '        onlyActiveExchange(\n', '            exchangeId\n', '        )\n', '    {\n', '        require(\n', '            dataTokenAmount != 0,\n', "            'FixedRateExchange: zero data token amount'\n", '        );\n', '        uint256 baseTokenAmount = CalcInGivenOut(exchangeId,dataTokenAmount);\n', '        require(\n', '            IERC20Template(exchanges[exchangeId].baseToken).transferFrom(\n', '                msg.sender,\n', '                exchanges[exchangeId].exchangeOwner,\n', '                baseTokenAmount\n', '            ),\n', "            'FixedRateExchange: transferFrom failed in the baseToken contract'\n", '        );\n', '        require(\n', '            IERC20Template(exchanges[exchangeId].dataToken).transferFrom(\n', '                exchanges[exchangeId].exchangeOwner,\n', '                msg.sender,\n', '                dataTokenAmount\n', '            ),\n', "            'FixedRateExchange: transferFrom failed in the dataToken contract'\n", '        );\n', '\n', '        emit Swapped(\n', '            exchangeId,\n', '            msg.sender,\n', '            baseTokenAmount,\n', '            dataTokenAmount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev getNumberOfExchanges\n', '     *      gets the total number of registered exchanges\n', '     * @return total number of registered exchange IDs\n', '     */\n', '    function getNumberOfExchanges()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return exchangeIds.length;\n', '    }\n', '\n', '    /**\n', '     * @dev setRate\n', '     *      changes the fixed rate for an exchange with a new rate\n', '     * @param exchangeId a unique exchange idnetifier\n', '     * @param newRate new fixed rate value\n', '     */\n', '    function setRate(\n', '        bytes32 exchangeId,\n', '        uint256 newRate\n', '    )\n', '        external\n', '        onlyExchangeOwner(exchangeId)\n', '    {\n', '        require(\n', '            newRate != 0,\n', "            'FixedRateExchange: Ratio must be >0'\n", '        );\n', '\n', '        exchanges[exchangeId].fixedRate = newRate;\n', '        emit ExchangeRateChanged(\n', '            exchangeId,\n', '            msg.sender,\n', '            newRate\n', '        );\n', '    }\n', '\n', '     /**\n', '     * @dev toggleExchangeState\n', '     *      toggles the active state of an existing exchange\n', '     * @param exchangeId a unique exchange idnetifier\n', '     */\n', '    function toggleExchangeState(\n', '        bytes32 exchangeId\n', '    )\n', '        external\n', '        onlyExchangeOwner(exchangeId)\n', '    {\n', '        if(exchanges[exchangeId].active){\n', '            exchanges[exchangeId].active = false;\n', '            emit ExchangeDeactivated(\n', '                exchangeId,\n', '                msg.sender\n', '            );\n', '        } else {\n', '            exchanges[exchangeId].active = true;\n', '            emit ExchangeActivated(\n', '                exchangeId,\n', '                msg.sender\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev getRate\n', '     *      gets the current fixed rate for an exchange\n', '     * @param exchangeId a unique exchange idnetifier\n', '     * @return fixed rate value\n', '     */\n', '    function getRate(\n', '        bytes32 exchangeId\n', '    )\n', '        external\n', '        view\n', '        returns(uint256)\n', '    {\n', '        return exchanges[exchangeId].fixedRate;\n', '    }\n', '\n', '    /**\n', '     * @dev getSupply\n', '     *      gets the current supply of datatokens in an fixed\n', '     *      rate exchagne\n', '     * @param  exchangeId the exchange ID\n', '     * @return supply\n', '     */\n', '    function getSupply(bytes32 exchangeId)\n', '        public\n', '        view\n', '        returns (uint256 supply)\n', '    {\n', '        if(exchanges[exchangeId].active == false)\n', '            supply = 0;\n', '        else {\n', '            uint256 balance = IERC20Template(exchanges[exchangeId].dataToken)\n', '                .balanceOf(exchanges[exchangeId].exchangeOwner);\n', '            uint256 allowance = IERC20Template(exchanges[exchangeId].dataToken)\n', '                .allowance(exchanges[exchangeId].exchangeOwner, address(this));\n', '            if(balance < allowance)\n', '                supply = balance;\n', '            else\n', '                supply = allowance;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev getExchange\n', '     *      gets all the exchange details\n', '     * @param exchangeId a unique exchange idnetifier\n', '     * @return all the exchange details including  the exchange Owner\n', '     *         the dataToken contract address, the base token address, the \n', '     *         fixed rate, whether the exchange is active and the supply or the \n', '     *         the current data token liquidity.\n', '     */\n', '    function getExchange(\n', '        bytes32 exchangeId\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            address exchangeOwner,\n', '            address dataToken,\n', '            address baseToken,\n', '            uint256 fixedRate,\n', '            bool active,\n', '            uint256 supply\n', '        )\n', '    {\n', '        Exchange memory exchange = exchanges[exchangeId];\n', '        exchangeOwner = exchange.exchangeOwner;\n', '        dataToken = exchange.dataToken;\n', '        baseToken = exchange.baseToken;\n', '        fixedRate = exchange.fixedRate;\n', '        active = exchange.active;\n', '        supply = getSupply(exchangeId);\n', '    }\n', '\n', '    /**\n', '     * @dev getExchanges\n', '     *      gets all the exchanges list\n', '     * @return a list of all registered exchange Ids\n', '     */\n', '    function getExchanges()\n', '        external \n', '        view \n', '        returns (bytes32[] memory)\n', '    {\n', '        return exchangeIds;\n', '    }\n', '\n', '    /**\n', '     * @dev isActive\n', '     *      checks whether exchange is active\n', '     * @param exchangeId a unique exchange idnetifier\n', '     * @return true if exchange is true, otherwise returns false\n', '     */\n', '    function isActive(\n', '        bytes32 exchangeId\n', '    )\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return exchanges[exchangeId].active;\n', '    }\n', '}']