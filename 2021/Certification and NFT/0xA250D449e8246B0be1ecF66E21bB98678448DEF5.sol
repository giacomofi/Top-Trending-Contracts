['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.7.6;\n', '\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IWETH {\n', '    function allowance(address, address) public virtual view returns (uint256);\n', '\n', '    function balanceOf(address) public virtual view returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) public virtual returns (bool);\n', '\n', '    function deposit() public payable virtual;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TokenUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function approveToken(\n', '        address _tokenAddr,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_tokenAddr == ETH_ADDR) return;\n', '\n', '        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n', '            IERC20(_tokenAddr).safeApprove(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function pullTokensIfNeeded(\n', '        address _token,\n', '        address _from,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        // handle max uint amount\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, _from);\n', '        }\n', '\n', '        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n', '            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawTokens(\n', '        address _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, address(this));\n', '        }\n', '\n', '        if (_to != address(0) && _to != address(this) && _amount != 0) {\n', '            if (_token != ETH_ADDR) {\n', '                IERC20(_token).safeTransfer(_to, _amount);\n', '            } else {\n', '                payable(_to).transfer(_amount);\n', '            }\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function depositWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).deposit{value: _amount}();\n', '    }\n', '\n', '    function withdrawWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).withdraw(_amount);\n', '    }\n', '\n', '    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n', '        if (_tokenAddr == ETH_ADDR) {\n', '            return _acc.balance;\n', '        } else {\n', '            return IERC20(_tokenAddr).balanceOf(_acc);\n', '        }\n', '    }\n', '\n', '    function getTokenDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == ETH_ADDR) return 18;\n', '\n', '        return IERC20(_token).decimals();\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'interface IExchangeV3 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external returns (uint);\n', '}\n', '\n', '\n', '\n', '\n', 'interface IUniswapV3SwapCallback {\n', '    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n', '    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n', '    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n', '    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n', '    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n', '    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n', '    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n', '    function uniswapV3SwapCallback(\n', '        int256 amount0Delta,\n', '        int256 amount1Delta,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', 'interface ISwapRouter is IUniswapV3SwapCallback {\n', '    struct ExactInputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactInputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactOutputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n', '\n', '    struct ExactOutputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n', '}\n', '\n', '\n', '\n', '\n', 'interface IQuoter {\n', '    /// @notice Returns the amount out received for a given exact input swap without executing the swap\n', '    /// @param path The path of the swap, i.e. each token pair and the pool fee\n', '    /// @param amountIn The amount of the first token to swap\n', '    /// @return amountOut The amount of the last token that would be received\n', '    function quoteExactInput(bytes memory path, uint256 amountIn) external returns (uint256 amountOut);\n', '\n', '    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\n', '    /// @param tokenIn The token being swapped in\n', '    /// @param tokenOut The token being swapped out\n', '    /// @param fee The fee of the token pool to consider for the pair\n', '    /// @param amountIn The desired input amount\n', '    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n', '    /// @return amountOut The amount of `tokenOut` that would be received\n', '    function quoteExactInputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountIn,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external returns (uint256 amountOut);\n', '\n', '    /// @notice Returns the amount in required for a given exact output swap without executing the swap\n', '    /// @param path The path of the swap, i.e. each token pair and the pool fee\n', '    /// @param amountOut The amount of the last token to receive\n', '    /// @return amountIn The amount of first token required to be paid\n', '    function quoteExactOutput(bytes memory path, uint256 amountOut) external returns (uint256 amountIn);\n', '\n', '    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\n', '    /// @param tokenIn The token being swapped in\n', '    /// @param tokenOut The token being swapped out\n', '    /// @param fee The fee of the token pool to consider for the pair\n', '    /// @param amountOut The desired output amount\n', '    /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\n', '    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\n', '    function quoteExactOutputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountOut,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external returns (uint256 amountIn);\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "");\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IDFSRegistry {\n', ' \n', '    function getAddr(bytes32 _id) public view virtual returns (address);\n', '\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public virtual;\n', '\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n', '\n', '    function approveContractChange(bytes32 _id) public virtual;\n', '\n', '    function cancelContractChange(bytes32 _id) public virtual;\n', '\n', '    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n', '}\n', '\n', '\n', '\n', '\n', '\n', 'contract AdminVault {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function changeOwner(address _owner) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function changeAdmin(address _admin) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        admin = _admin;\n', '    }\n', '\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract AdminAuth {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant ADMIN_VAULT_ADDR = 0xCCf3d848e08b94478Ed8f46fFead3008faF581fD;\n', '\n', '    AdminVault public constant adminVault = AdminVault(ADMIN_VAULT_ADDR);\n', '\n', '    modifier onlyOwner() {\n', '        require(adminVault.owner() == msg.sender, "msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(adminVault.admin() == msg.sender, "msg.sender not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(_receiver).transfer(_amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyAdmin {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract UniV3WrapperV3 is DSMath, IExchangeV3, AdminAuth {\n', '    \n', '    using TokenUtils for address;\n', '    using SafeERC20 for IERC20;\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    ISwapRouter public constant router = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n', '    IQuoter public constant quoter = IQuoter(0xb27308f9F90D607463bb33eA1BeBb41C27CE5AB6);\n', '    /// @notice Sells _srcAmount of tokens at UniswapV3\n', '    /// @param _srcAddr From token\n', '    /// @param _srcAmount From amount\n', '    /// @param _additionalData Path for swapping\n', '    /// @return uint amount of tokens received from selling\n', '    function sell(address _srcAddr, address, uint _srcAmount, bytes calldata _additionalData) external override returns (uint) {\n', '        IERC20(_srcAddr).safeApprove(address(router), _srcAmount);\n', '\n', '        ISwapRouter.ExactInputParams memory params = \n', '            ISwapRouter.ExactInputParams({\n', '                path: _additionalData,\n', '                recipient: msg.sender,\n', '                deadline: block.timestamp + 1,\n', '                amountIn: _srcAmount,\n', '                amountOutMinimum: 1\n', '            });\n', '        uint amountOut = router.exactInput(params);\n', '        return amountOut;\n', '    }\n', '    /// @notice Buys _destAmount of tokens at UniswapV3\n', '    /// @param _srcAddr From token\n', '    /// @param _destAmount To amount\n', '    /// @param _additionalData Path for swapping\n', '    /// @return uint amount of _srcAddr tokens sent for transaction\n', '    function buy(address _srcAddr, address, uint _destAmount, bytes calldata _additionalData) external override returns(uint) {\n', '        uint srcAmount = _srcAddr.getBalance(address(this));\n', '        IERC20(_srcAddr).safeApprove(address(router), srcAmount);\n', '        ISwapRouter.ExactOutputParams memory params = \n', '            ISwapRouter.ExactOutputParams({\n', '                path: _additionalData,\n', '                recipient: msg.sender,\n', '                deadline: block.timestamp + 1,\n', '                amountOut: _destAmount,\n', '                amountInMaximum: type(uint).max\n', '            });\n', '        uint amountIn = router.exactOutput(params);\n', '        sendLeftOver(_srcAddr);\n', '        return amountIn;\n', '    }\n', '\n', '    /// @notice Return a rate for which we can sell an amount of tokens\n', '    /// @param _srcAmount From amount\n', '    /// @param _additionalData path object (encoded path_fee_path_fee_path etc.)\n', '    /// @return uint Rate (price)\n', '    function getSellRate(address, address, uint _srcAmount, bytes memory _additionalData) public override returns (uint) {\n', '        uint amountOut = quoter.quoteExactInput(_additionalData, _srcAmount);\n', '        return wdiv(amountOut, _srcAmount);\n', '    }\n', '\n', '    /// @notice Return a rate for which we can buy an amount of tokens\n', '    /// @param _destAmount To amount\n', '    /// @param _additionalData path object (encoded path_fee_path_fee_path etc.)\n', '    /// @return uint Rate (price)\n', '    function getBuyRate(address, address, uint _destAmount, bytes memory _additionalData) public override returns (uint) {\n', '        uint amountIn = quoter.quoteExactOutput(_additionalData, _destAmount);\n', '        return wdiv(_destAmount, amountIn);\n', '    }\n', '\n', '    /// @notice Send any leftover tokens, we use to clear out srcTokens after buy\n', '    /// @param _srcAddr Source token address\n', '    function sendLeftOver(address _srcAddr) internal {\n', '        msg.sender.transfer(address(this).balance);\n', '\n', '        if (_srcAddr != KYBER_ETH_ADDRESS) {\n', '            IERC20(_srcAddr).safeTransfer(msg.sender, IERC20(_srcAddr).balanceOf(address(this)));\n', '        }\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external payable {}\n', '}']