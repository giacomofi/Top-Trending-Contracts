['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-27\n', '*/\n', '\n', 'pragma solidity 0.5.17;\n', '\n', '\n', '// SPDX-License-Identifier: MIT\n', 'interface IProxyAdmin {\n', '    function getProxyImplementation(address proxy) external view returns (address);\n', '    function isOwner() external view returns (bool);\n', '    function owner() external view returns (address);\n', '    function getProxyAdmin(address proxy) external view returns (address);\n', '\n', '    function changeProxyAdmin(address proxy, address newAdmin) external;\n', '    function upgradeAndCall(address proxy, address implementation, bytes calldata data) external payable;\n', '    function upgrade(address proxy, address implementation) external;\n', '    function transferOwnership(address newOwner) external;\n', '}\n', '\n', 'interface IAdminUpgradeabilityProxy {\n', '    function changeAdmin(address newAdmin) external;\n', '}\n', '\n', 'contract ProxyAdminRelayer {\n', '    address public multiSig;\n', '    address public upgrader;\n', '    address public proxyAdmin;\n', '\n', '    constructor(address _proxyAdmin, address _multiSig) public {\n', '        proxyAdmin = _proxyAdmin;\n', '        multiSig = _multiSig;\n', '        upgrader = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the multiSig.\n', '     */\n', '    modifier onlyMultiSig() {\n', '        require(isMultiSig());\n', '        _;\n', '    }\n', '\n', '    modifier onlyUpgrader() {\n', '        require(msg.sender == upgrader, "require upgrader");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the multiSig of the contract.\n', '     */\n', '    function isMultiSig() public view returns (bool) {\n', '        return msg.sender == multiSig;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current upgrader to transfer control of the contract to a newUpgrader.\n', '     * @param newUpgrader The address to transfer upgradership to.\n', '     */\n', '    function transferUpgrader(address newUpgrader) public onlyMultiSig {\n', '        upgrader = newUpgrader;\n', '    }\n', '\n', '    function setProxyAdmin(address newProxyAdmin) public onlyMultiSig {\n', '        proxyAdmin = newProxyAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current multiSig to transfer control of the contract to a multiSig.\n', '     * @param _multiSig The address to transfer multiSig to.\n', '     */\n', '    function transferMultiSig(address _multiSig) public onlyMultiSig {\n', '        multiSig = _multiSig;\n', '    }\n', '\n', '    function getProxyImplementation(address proxy) external view returns (address) {\n', '        return IProxyAdmin(proxyAdmin).getProxyImplementation(proxy);\n', '    }\n', '\n', '    function isOwner() external view returns (bool) {\n', '        return IProxyAdmin(proxyAdmin).isOwner();\n', '    }\n', '\n', '    function owner() external view returns (address) {\n', '        return IProxyAdmin(proxyAdmin).owner();\n', '    }\n', '\n', '    function getProxyAdmin(address proxy) external view returns (address) {\n', '        return IProxyAdmin(proxyAdmin).getProxyAdmin(proxy);\n', '    }\n', '\n', '    function changeProxyAdmin(address proxy, address newAdmin) external onlyMultiSig {\n', '        return IProxyAdmin(proxyAdmin).changeProxyAdmin(proxy, newAdmin);\n', '    }\n', '    \n', '    function upgradeAndCall(address proxy, address implementation, bytes calldata data) external payable onlyUpgrader{\n', '        return IProxyAdmin(proxyAdmin).upgradeAndCall.value(msg.value)(proxy, implementation, data);\n', '    }\n', '\n', '    function upgrade(address proxy, address implementation) external onlyUpgrader {\n', '        return IProxyAdmin(proxyAdmin).upgrade(proxy, implementation);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) external onlyMultiSig {\n', '        return IProxyAdmin(proxyAdmin).transferOwnership(newOwner);\n', '    }\n', '    \n', '    // 防止使用SDK新建合约时，未填入正确的proxyAdmin地址，此方法用于修正\n', '    // Prevent creating a new contract with the SDK by not filling in the correct ProxyAdmin address.\n', '    // This method is used to fix this\n', '    function fixProxyAdmin(address proxy, address originalProxyAdmin) external onlyMultiSig {\n', '        IAdminUpgradeabilityProxy(proxy).changeAdmin(originalProxyAdmin);\n', '    }\n', '}']