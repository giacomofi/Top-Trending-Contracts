['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-13\n', '*/\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '// OpenZeppelin Upgradeability contracts modified by Sam Porter. Proxy for Nameless Protocol contracts\n', '// You can find original set of contracts here: https://github.com/OpenZeppelin/openzeppelin-contracts/tree/master/contracts/proxy\n', '\n', "// Had to pack OpenZeppelin upgradeability contracts in one single contract for readability. It's basically the same OpenZeppelin functions \n", '// but in one contract with some differences:\n', "// 1. DEADLINE is a block after which it becomes impossible to upgrade the contract. Defined in constructor and here it's ~2 years.\n", '// Maybe not even required for most contracts, but I kept it in case if something happens to developers.\n', '// 2. PROPOSE_BLOCK defines how often the contract can be upgraded. Defined in _setNextLogic() function and the interval here is set\n', '// to 172800 blocks ~1 month.\n', '// 3. Admin rights are burnable. Rather not do that without deadline\n', '// 4. prolongLock() allows to add to PROPOSE_BLOCK. Basically allows to prolong lock. For example if there no upgrades planned soon,\n', "// then this function could be called to set next upgrade being possible only in a year, so investors won't need to monitor the code too closely\n", '// all the time. Could prolong to maximum solidity number so the deadline might not be needed \n', "// 5. logic contract is not being set suddenly. it's being stored in NEXT_LOGIC_SLOT for a month and only after that it can be set as LOGIC_SLOT.\n", '// Users have time to decide on if the deployer or the governance is malicious and exit safely.\n', '// 6. constructor does not require arguments\n', '\n', '// It fixes "upgradeability bug" I believe. Also I sincerely believe that upgradeability is not about fixing bugs, but about upgradeability,\n', '// so yeah, proposed logic has to be clean.\n', "// In my heart it exists as eip-1984 but it's too late for that number. https://ethereum-magicians.org/t/trust-minimized-proxy/5742/2\n", '\n', 'contract StakingTrustMinimizedProxy{\n', '\tevent Upgraded(address indexed toLogic);\n', '\tevent AdminChanged(address indexed previousAdmin, address indexed newAdmin);\n', '\tevent NextLogicDefined(address indexed nextLogic, uint timeOfArrivalBlock);\n', '\tevent UpgradesRestrictedUntil(uint block);\n', '\tevent NextLogicCanceled(address indexed toLogic);\n', '\t\n', '\tbytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\tbytes32 internal constant LOGIC_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n', '\tbytes32 internal constant NEXT_LOGIC_SLOT = 0xb182d207b11df9fb38eec1e3fe4966cf344774ba58fb0e9d88ea35ad46f3601e;\n', '\tbytes32 internal constant NEXT_LOGIC_BLOCK_SLOT = 0x96de003e85302815fe026bddb9630a50a1d4dc51c5c355def172204c3fd1c733;\n', '\tbytes32 internal constant PROPOSE_BLOCK_SLOT = 0xbc9d35b69e82e85049be70f91154051f5e20e574471195334bde02d1a9974c90;\n', '//\tbytes32 internal constant DEADLINE_SLOT = 0xb124b82d2ac46ebdb08de751ebc55102cc7325d133e09c1f1c25014e20b979ad;\n', '\n', '\tconstructor() payable {\n', "\t//\trequire(ADMIN_SLOT == bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1) && LOGIC_SLOT==bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1) // this require is simply against human error, can be removed if you know what you are doing\n", "\t//\t&& NEXT_LOGIC_SLOT == bytes32(uint256(keccak256('eip1984.proxy.nextLogic')) - 1) && NEXT_LOGIC_BLOCK_SLOT == bytes32(uint256(keccak256('eip1984.proxy.nextLogicBlock')) - 1)\n", "\t//\t&& PROPOSE_BLOCK_SLOT == bytes32(uint256(keccak256('eip1984.proxy.proposeBlock')) - 1)/* && DEADLINE_SLOT == bytes32(uint256(keccak256('eip1984.proxy.deadline')) - 1)*/);\n", '\t\t_setAdmin(msg.sender);\n', '//\t\tuint deadline = block.number + 4204800; // ~2 years as default\n', '//\t\tassembly {sstore(DEADLINE_SLOT,deadline)}\n', '\t}\n', '\n', '\tmodifier ifAdmin() {if (msg.sender == _admin()) {_;} else {_fallback();}}\n', '\tfunction _logic() internal view returns (address logic) {assembly { logic := sload(LOGIC_SLOT) }}\n', '\tfunction _proposeBlock() internal view returns (uint bl) {assembly { bl := sload(PROPOSE_BLOCK_SLOT) }}\n', '\tfunction _nextLogicBlock() internal view returns (uint bl) {assembly { bl := sload(NEXT_LOGIC_BLOCK_SLOT) }}\n', '//\tfunction _deadline() internal view returns (uint bl) {assembly { bl := sload(DEADLINE_SLOT) }}\n', '\tfunction _admin() internal view returns (address adm) {assembly { adm := sload(ADMIN_SLOT) }}\n', '\tfunction _isContract(address account) internal view returns (bool b) {uint256 size;assembly {size := extcodesize(account)}return size > 0;}\n', '\tfunction _setAdmin(address newAdm) internal {assembly {sstore(ADMIN_SLOT, newAdm)}}\n', '\tfunction changeAdmin(address newAdm) external ifAdmin {emit AdminChanged(_admin(), newAdm);_setAdmin(newAdm);}\n', '\tfunction upgrade() external ifAdmin {require(block.number>=_nextLogicBlock());address logic;assembly {logic := sload(NEXT_LOGIC_SLOT) sstore(LOGIC_SLOT,logic)}emit Upgraded(logic);}\n', '\tfallback () external payable {_fallback();}\n', '\treceive () external payable {_fallback();}\n', '\tfunction _fallback() internal {require(msg.sender != _admin());_delegate(_logic());}\n', '\tfunction cancelUpgrade() external ifAdmin {address logic; assembly {logic := sload(LOGIC_SLOT)sstore(NEXT_LOGIC_SLOT, logic)}emit NextLogicCanceled(logic);}\n', '\n', '\tfunction proposeTo(address newLogic) external ifAdmin {\n', '\t\tif (_logic() == address(0)) {_updateBlockSlots();assembly {sstore(LOGIC_SLOT,newLogic)}emit Upgraded(newLogic);} else{_setNextLogic(newLogic);}\n', '\t}\n', '\t\n', '\tfunction prolongLock(uint block_) external ifAdmin {\n', '\t\tuint pb; assembly {pb := sload(PROPOSE_BLOCK_SLOT) pb := add(pb,block_) sstore(PROPOSE_BLOCK_SLOT,pb)}emit UpgradesRestrictedUntil(pb);\n', '\t}\n', '\t\n', '\tfunction proposeToAndCall(address newLogic, bytes calldata data) payable external ifAdmin {\n', '\t\tif (_logic() == address(0)) {_updateBlockSlots();assembly {sstore(LOGIC_SLOT,newLogic)}}else{_setNextLogic(newLogic);}\n', '\t\t(bool success,) = newLogic.delegatecall(data);require(success);\n', '\t}\n', '\n', '\tfunction _setNextLogic(address nextLogic) internal {\n', '\t\trequire(block.number >= _proposeBlock() && _isContract(nextLogic));\n', '\t\t_updateBlockSlots();\n', '\t\tassembly { sstore(NEXT_LOGIC_SLOT, nextLogic)}\n', '\t\temit NextLogicDefined(nextLogic,block.number + 172800);\n', '\t}\n', '\n', '\tfunction _updateBlockSlots() internal {\n', '\t    uint proposeBlock = block.number + 172800;uint nextLogicBlock = block.number + 172800; assembly {sstore(NEXT_LOGIC_BLOCK_SLOT,nextLogicBlock) sstore(PROPOSE_BLOCK_SLOT,proposeBlock)}\n', '\t}\n', '\n', '\tfunction _delegate(address logic_) internal {\n', '\t\tassembly {\n', '\t\t\tcalldatacopy(0, 0, calldatasize())\n', '\t\t\tlet result := delegatecall(gas(), logic_, 0, calldatasize(), 0, 0)\n', '\t\t\treturndatacopy(0, 0, returndatasize())\n', '\t\t\tswitch result\n', '\t\t\tcase 0 { revert(0, returndatasize()) }\n', '\t\t\tdefault { return(0, returndatasize()) }\n', '\t\t}\n', '\t}\n', '}']