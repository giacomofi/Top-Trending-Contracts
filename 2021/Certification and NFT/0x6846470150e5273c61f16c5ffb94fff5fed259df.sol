['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/maker/IMakerDAO.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ManagerLike {\n', '    function cdpCan(\n', '        address,\n', '        uint256,\n', '        address\n', '    ) external view returns (uint256);\n', '\n', '    function ilks(uint256) external view returns (bytes32);\n', '\n', '    function owns(uint256) external view returns (address);\n', '\n', '    function urns(uint256) external view returns (address);\n', '\n', '    function vat() external view returns (address);\n', '\n', '    function open(bytes32, address) external returns (uint256);\n', '\n', '    function give(uint256, address) external;\n', '\n', '    function cdpAllow(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function urnAllow(address, uint256) external;\n', '\n', '    function frob(\n', '        uint256,\n', '        int256,\n', '        int256\n', '    ) external;\n', '\n', '    function flux(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function move(\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function exit(\n', '        address,\n', '        uint256,\n', '        address,\n', '        uint256\n', '    ) external;\n', '\n', '    function quit(uint256, address) external;\n', '\n', '    function enter(address, uint256) external;\n', '\n', '    function shift(uint256, uint256) external;\n', '}\n', '\n', 'interface VatLike {\n', '    function can(address, address) external view returns (uint256);\n', '\n', '    function ilks(bytes32)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function dai(address) external view returns (uint256);\n', '\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '\n', '    function frob(\n', '        bytes32,\n', '        address,\n', '        address,\n', '        address,\n', '        int256,\n', '        int256\n', '    ) external;\n', '\n', '    function hope(address) external;\n', '\n', '    function nope(address) external;\n', '\n', '    function move(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) external;\n', '}\n', '\n', 'interface GemJoinLike {\n', '    function dec() external view returns (uint256);\n', '\n', '    function gem() external view returns (address);\n', '\n', '    function ilk() external view returns (bytes32);\n', '\n', '    function join(address, uint256) external payable;\n', '\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface DaiJoinLike {\n', '    function vat() external returns (VatLike);\n', '\n', '    function dai() external view returns (address);\n', '\n', '    function join(address, uint256) external payable;\n', '\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface JugLike {\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface SpotterLike {\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '}\n', '\n', '// File: contracts/interfaces/vesper/ICollateralManager.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICollateralManager {\n', '    function addGemJoin(address[] calldata gemJoins) external;\n', '\n', '    function mcdManager() external view returns (address);\n', '\n', '    function borrow(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function depositCollateral(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function getVaultBalance(uint256 vaultNum) external view returns (uint256 collateralLocked);\n', '\n', '    function getVaultDebt(uint256 vaultNum) external view returns (uint256 daiDebt);\n', '\n', '    function getVaultInfo(uint256 vaultNum)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        );\n', '\n', '    function payback(uint256 vaultNum, uint256 amount) external;\n', '\n', '    function registerVault(uint256 vaultNum, bytes32 collateralType) external;\n', '\n', '    function vaultOwner(uint256 vaultNum) external returns (address owner);\n', '\n', '    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        );\n', '\n', '    function withdrawCollateral(uint256 vaultNum, uint256 amount) external;\n', '}\n', '\n', '// File: contracts/interfaces/vesper/IController.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IController {\n', '    function aaveReferralCode() external view returns (uint16);\n', '\n', '    function feeCollector(address) external view returns (address);\n', '\n', '    function founderFee() external view returns (uint256);\n', '\n', '    function founderVault() external view returns (address);\n', '\n', '    function interestFee(address) external view returns (uint256);\n', '\n', '    function isPool(address) external view returns (bool);\n', '\n', '    function pools() external view returns (address);\n', '\n', '    function strategy(address) external view returns (address);\n', '\n', '    function rebalanceFriction(address) external view returns (uint256);\n', '\n', '    function poolRewards(address) external view returns (address);\n', '\n', '    function treasuryPool() external view returns (address);\n', '\n', '    function uniswapRouter() external view returns (address);\n', '\n', '    function withdrawFee(address) external view returns (uint256);\n', '}\n', '\n', '// File: contracts/strategies/CollateralManager.sol\n', '\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DSMath {\n', '    uint256 internal constant RAY = 10**27;\n', '    uint256 internal constant WAD = 10**18;\n', '\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "math-not-safe");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "sub-overflow");\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "math-not-safe");\n', '    }\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function toInt(uint256 x) internal pure returns (int256 y) {\n', '        y = int256(x);\n', '        require(y >= 0, "int-overflow");\n', '    }\n', '\n', '    function toRad(uint256 wad) internal pure returns (uint256 rad) {\n', '        rad = mul(wad, RAY);\n', '    }\n', '\n', '    /**\n', '     * @notice It will work only if _dec < 18\n', '     */\n', '    function convertTo18(uint256 _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '        amt = mul(_amt, 10**(18 - _dec));\n', '    }\n', '}\n', '\n', 'contract CollateralManager is ICollateralManager, DSMath, ReentrancyGuard {\n', '    using SafeERC20 for IERC20;\n', '    mapping(uint256 => address) public override vaultOwner;\n', '    mapping(bytes32 => address) public mcdGemJoin;\n', '    mapping(uint256 => bytes32) public vaultType;\n', '    address public constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address public override mcdManager = 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n', '    address public mcdDaiJoin = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n', '    address public mcdSpot = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address public mcdJug = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    uint256 internal constant MAX_UINT_VALUE = uint256(-1);\n', '    IController public immutable controller;\n', '\n', '    modifier onlyVaultOwner(uint256 vaultNum) {\n', '        require(msg.sender == vaultOwner[vaultNum], "Not a vault owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyController() {\n', '        require(msg.sender == address(controller), "Not a controller");\n', '        _;\n', '    }\n', '\n', '    constructor(address _controller) public {\n', '        require(_controller != address(0), "_controller is zero");\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    /**\n', '     * @dev Add gemJoin adapter address from Maker in mapping\n', '     * @param gemJoins Array of gem join addresses\n', '     */\n', '    function addGemJoin(address[] calldata gemJoins) external override onlyController {\n', '        require(gemJoins.length != 0, "No gemJoin address");\n', '        for (uint256 i; i < gemJoins.length; i++) {\n', '            address gemJoin = gemJoins[i];\n', '            bytes32 ilk = GemJoinLike(gemJoin).ilk();\n', '            mcdGemJoin[ilk] = gemJoin;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Store vault info.\n', '     * @param vaultNum Vault number.\n', '     * @param collateralType Collateral type of vault.\n', '     */\n', '    function registerVault(uint256 vaultNum, bytes32 collateralType) external override {\n', '        require(msg.sender == ManagerLike(mcdManager).owns(vaultNum), "Not a vault owner");\n', '        vaultOwner[vaultNum] = msg.sender;\n', '        vaultType[vaultNum] = collateralType;\n', '    }\n', '\n', '    /**\n', '     * @dev Update MCD addresses.\n', '     */\n', '    function updateMCDAddresses(\n', '        address _mcdManager,\n', '        address _mcdDaiJoin,\n', '        address _mcdSpot,\n', '        address _mcdJug\n', '    ) external onlyController {\n', '        mcdManager = _mcdManager;\n', '        mcdDaiJoin = _mcdDaiJoin;\n', '        mcdSpot = _mcdSpot;\n', '        mcdJug = _mcdJug;\n', '    }\n', '\n', '    /**\n', '     * @dev Deposit ERC20 collateral.\n', '     * @param vaultNum Vault number.\n', '     * @param amount ERC20 amount to deposit.\n', '     */\n', '    function depositCollateral(uint256 vaultNum, uint256 amount)\n', '        external\n', '        override\n', '        nonReentrant\n', '        onlyVaultOwner(vaultNum)\n', '    {\n', '        // Receives Gem amount, approve and joins it into the vat.\n', '        // Also convert amount to 18 decimal\n', '        amount = joinGem(mcdGemJoin[vaultType[vaultNum]], amount);\n', '\n', '        ManagerLike manager = ManagerLike(mcdManager);\n', '        // Locks Gem amount into the CDP\n', '        VatLike(manager.vat()).frob(\n', '            vaultType[vaultNum],\n', '            manager.urns(vaultNum),\n', '            address(this),\n', '            address(this),\n', '            toInt(amount),\n', '            0\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw collateral.\n', '     * @param vaultNum Vault number.\n', '     * @param amount Collateral amount to withdraw.\n', '     */\n', '    function withdrawCollateral(uint256 vaultNum, uint256 amount)\n', '        external\n', '        override\n', '        nonReentrant\n', '        onlyVaultOwner(vaultNum)\n', '    {\n', '        ManagerLike manager = ManagerLike(mcdManager);\n', '        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[vaultType[vaultNum]]);\n', '\n', '        uint256 amount18 = convertTo18(gemJoin.dec(), amount);\n', '\n', '        // Unlocks Gem amount18 from the CDP\n', '        manager.frob(vaultNum, -toInt(amount18), 0);\n', '\n', '        // Moves Gem amount18 from the CDP urn to this address\n', '        manager.flux(vaultNum, address(this), amount18);\n', '\n', '        // Exits Gem amount to this address as a token\n', '        gemJoin.exit(address(this), amount);\n', '\n', "        // Send Gem to pool's address\n", '        IERC20(gemJoin.gem()).safeTransfer(vaultOwner[vaultNum], amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Payback borrowed DAI.\n', '     * @param vaultNum Vault number.\n', '     * @param amount Dai amount to payback.\n', '     */\n', '    function payback(uint256 vaultNum, uint256 amount) external override onlyVaultOwner(vaultNum) {\n', '        ManagerLike manager = ManagerLike(mcdManager);\n', '        address urn = manager.urns(vaultNum);\n', '        address vat = manager.vat();\n', '        bytes32 ilk = vaultType[vaultNum];\n', '\n', '        // Calculate dai debt\n', '        uint256 _daiDebt = _getVaultDebt(ilk, urn, vat);\n', '        require(_daiDebt >= amount, "paying-excess-debt");\n', '\n', '        // Approve and join dai in vat\n', '        joinDai(urn, amount);\n', '        manager.frob(vaultNum, 0, _getWipeAmount(ilk, urn, vat));\n', '    }\n', '\n', '    /**\n', '     * @notice Borrow DAI.\n', '     * @dev In edge case, when we hit DAI mint limit, we might end up borrowing\n', '     * less than what is being asked.\n', '     * @param vaultNum Vault number.\n', '     * @param amount Dai amount to borrow. Actual borrow amount may be less than "amount"\n', '     */\n', '    function borrow(uint256 vaultNum, uint256 amount) external override onlyVaultOwner(vaultNum) {\n', '        ManagerLike manager = ManagerLike(mcdManager);\n', '        address vat = manager.vat();\n', '        // Safety check in scenario where current debt and request borrow will exceed max dai limit\n', '        uint256 _maxAmount = maxAvailableDai(vat, vaultNum);\n', '        if (amount > _maxAmount) {\n', '            amount = _maxAmount;\n', '        }\n', '\n', '        // Generates debt in the CDP\n', '        manager.frob(vaultNum, 0, _getBorrowAmount(vat, manager.urns(vaultNum), vaultNum, amount));\n', "        // Moves the DAI amount (balance in the vat in rad) to pool's address\n", '        manager.move(vaultNum, address(this), toRad(amount));\n', "        // Allows adapter to access to pool's DAI balance in the vat\n", '        if (VatLike(vat).can(address(this), mcdDaiJoin) == 0) {\n', '            VatLike(vat).hope(mcdDaiJoin);\n', '        }\n', "        // Exits DAI as a token to user's address\n", '        DaiJoinLike(mcdDaiJoin).exit(msg.sender, amount);\n', '    }\n', '\n', '    /// @dev sweep given ERC20 token to treasury pool\n', '    function sweepErc20(address fromToken) external {\n', '        uint256 amount = IERC20(fromToken).balanceOf(address(this));\n', '        address treasuryPool = controller.treasuryPool();\n', '        IERC20(fromToken).safeTransfer(treasuryPool, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get current dai debt of vault.\n', '     * @param vaultNum Vault number.\n', '     */\n', '    function getVaultDebt(uint256 vaultNum) external view override returns (uint256 daiDebt) {\n', '        address urn = ManagerLike(mcdManager).urns(vaultNum);\n', '        address vat = ManagerLike(mcdManager).vat();\n', '        bytes32 ilk = vaultType[vaultNum];\n', '\n', '        daiDebt = _getVaultDebt(ilk, urn, vat);\n', '    }\n', '\n', '    /**\n', '     * @dev Get current collateral balance of vault.\n', '     * @param vaultNum Vault number.\n', '     */\n', '    function getVaultBalance(uint256 vaultNum)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256 collateralLocked)\n', '    {\n', '        address vat = ManagerLike(mcdManager).vat();\n', '        address urn = ManagerLike(mcdManager).urns(vaultNum);\n', '        (collateralLocked, ) = VatLike(vat).urns(vaultType[vaultNum], urn);\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate state based on withdraw amount.\n', '     * @param vaultNum Vault number.\n', '     * @param amount Collateral amount to withraw.\n', '     */\n', '    function whatWouldWithdrawDo(uint256 vaultNum, uint256 amount)\n', '        external\n', '        view\n', '        override\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        )\n', '    {\n', '        (collateralLocked, daiDebt, collateralUsdRate, collateralRatio, minimumDebt) = getVaultInfo(\n', '            vaultNum\n', '        );\n', '\n', '        GemJoinLike gemJoin = GemJoinLike(mcdGemJoin[vaultType[vaultNum]]);\n', '        uint256 amount18 = convertTo18(gemJoin.dec(), amount);\n', '        require(amount18 <= collateralLocked, "insufficient collateral locked");\n', '        collateralLocked = sub(collateralLocked, amount18);\n', '        collateralRatio = getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n', '    }\n', '\n', '    /**\n', '     * @dev Get vault info\n', '     * @param vaultNum Vault number.\n', '     */\n', '    function getVaultInfo(uint256 vaultNum)\n', '        public\n', '        view\n', '        override\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 daiDebt,\n', '            uint256 collateralUsdRate,\n', '            uint256 collateralRatio,\n', '            uint256 minimumDebt\n', '        )\n', '    {\n', '        (collateralLocked, collateralUsdRate, daiDebt, minimumDebt) = _getVaultInfo(vaultNum);\n', '        collateralRatio = getCollateralRatio(collateralLocked, collateralUsdRate, daiDebt);\n', '    }\n', '\n', '    /**\n', '     * @dev Get available DAI amount based on current DAI debt and limit for given vault type.\n', '     * @param vat Vat address\n', '     * @param vaultNum Vault number.\n', '     */\n', '    function maxAvailableDai(address vat, uint256 vaultNum) public view returns (uint256) {\n', '        // Get stable coin Art(debt) [wad], rate [ray], line [rad]\n', '        //solhint-disable-next-line var-name-mixedcase\n', '        (uint256 Art, uint256 rate, , uint256 line, ) = VatLike(vat).ilks(vaultType[vaultNum]);\n', '        // Calculate total issued debt is Art * rate [rad]\n', '        // Calcualte total available dai [wad]\n', '        uint256 _totalAvailableDai = sub(line, mul(Art, rate)) / RAY;\n', '        // For safety reason, return 99% of available\n', '        return mul(_totalAvailableDai, 99) / 100;\n', '    }\n', '\n', '    function joinDai(address urn, uint256 amount) internal {\n', '        DaiJoinLike daiJoin = DaiJoinLike(mcdDaiJoin);\n', '        // Transfer Dai from strategy or pool to here\n', '        IERC20(DAI).safeTransferFrom(msg.sender, address(this), amount);\n', '        // Approves adapter to move dai.\n', '        IERC20(DAI).safeApprove(mcdDaiJoin, 0);\n', '        IERC20(DAI).safeApprove(mcdDaiJoin, amount);\n', '        // Joins DAI into the vat\n', '        daiJoin.join(urn, amount);\n', '    }\n', '\n', '    function joinGem(address adapter, uint256 amount) internal returns (uint256) {\n', '        GemJoinLike gemJoin = GemJoinLike(adapter);\n', '\n', '        IERC20 token = IERC20(gemJoin.gem());\n', '        // Transfer token from strategy or pool to here\n', '        token.safeTransferFrom(msg.sender, address(this), amount);\n', '        // Approves adapter to take the Gem amount\n', '        token.safeApprove(adapter, 0);\n', '        token.safeApprove(adapter, amount);\n', '        // Joins Gem collateral into the vat\n', '        gemJoin.join(address(this), amount);\n', '        // Convert amount to 18 decimal\n', '        return convertTo18(gemJoin.dec(), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Get borrow dai amount.\n', '     */\n', '    function _getBorrowAmount(\n', '        address vat,\n', '        address urn,\n', '        uint256 vaultNum,\n', '        uint256 wad\n', '    ) internal returns (int256 amount) {\n', '        // Updates stability fee rate\n', '        uint256 rate = JugLike(mcdJug).drip(vaultType[vaultNum]);\n', '\n', '        // Gets DAI balance of the urn in the vat\n', '        uint256 dai = VatLike(vat).dai(urn);\n', '\n', '        // If there was already enough DAI in the vat balance, just exits it without adding more debt\n', '        if (dai < mul(wad, RAY)) {\n', '            // Calculates the needed amt so together with the existing dai in the vat is enough to exit wad amount of DAI tokens\n', '            amount = toInt(sub(mul(wad, RAY), dai) / rate);\n', '            // This is neeeded due lack of precision. It might need to sum an extra amt wei (for the given DAI wad amount)\n', '            amount = mul(uint256(amount), rate) < mul(wad, RAY) ? amount + 1 : amount;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Get collateral ratio\n', '     */\n', '    function getCollateralRatio(\n', '        uint256 collateralLocked,\n', '        uint256 collateralRate,\n', '        uint256 daiDebt\n', '    ) internal pure returns (uint256) {\n', '        if (collateralLocked == 0) {\n', '            return 0;\n', '        }\n', '\n', '        if (daiDebt == 0) {\n', '            return MAX_UINT_VALUE;\n', '        }\n', '\n', '        require(collateralRate != 0, "Collateral rate is zero");\n', '        return wdiv(wmul(collateralLocked, collateralRate), daiDebt);\n', '    }\n', '\n', '    /**\n', '     * @dev Get Vault Debt Amount.\n', '     */\n', '    function _getVaultDebt(\n', '        bytes32 ilk,\n', '        address urn,\n', '        address vat\n', '    ) internal view returns (uint256 wad) {\n', '        // Get normalised debt [wad]\n', '        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n', '        // Get stable coin rate [ray]\n', '        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n', '        // Get balance from vat [rad]\n', '        uint256 dai = VatLike(vat).dai(urn);\n', '\n', '        wad = _getVaultDebt(art, rate, dai);\n', '    }\n', '\n', '    function _getVaultDebt(\n', '        uint256 art,\n', '        uint256 rate,\n', '        uint256 dai\n', '    ) internal pure returns (uint256 wad) {\n', '        if (dai < mul(art, rate)) {\n', '            uint256 rad = sub(mul(art, rate), dai);\n', '            wad = rad / RAY;\n', '            wad = mul(wad, RAY) < rad ? wad + 1 : wad;\n', '        } else {\n', '            wad = 0;\n', '        }\n', '    }\n', '\n', '    function _getVaultInfo(uint256 vaultNum)\n', '        internal\n', '        view\n', '        returns (\n', '            uint256 collateralLocked,\n', '            uint256 collateralUsdRate,\n', '            uint256 daiDebt,\n', '            uint256 minimumDebt\n', '        )\n', '    {\n', '        address urn = ManagerLike(mcdManager).urns(vaultNum);\n', '        address vat = ManagerLike(mcdManager).vat();\n', '        bytes32 ilk = vaultType[vaultNum];\n', '\n', '        // Get minimum liquidation ratio [ray]\n', '        (, uint256 mat) = SpotterLike(mcdSpot).ilks(ilk);\n', '\n', '        // Get collateral locked and normalised debt [wad] [wad]\n', '        (uint256 ink, uint256 art) = VatLike(vat).urns(ilk, urn);\n', '        // Get stable coin and collateral rate  and min debt [ray] [ray] [rad]\n', '        (, uint256 rate, uint256 spot, , uint256 dust) = VatLike(vat).ilks(ilk);\n', '        // Get balance from vat [rad]\n', '\n', '        collateralLocked = ink;\n', '        daiDebt = _getVaultDebt(art, rate, VatLike(vat).dai(urn));\n', '        minimumDebt = dust / RAY;\n', '        // Calculate collateral rate in 18 decimals\n', '        collateralUsdRate = rmul(mat, spot) / 10**9;\n', '    }\n', '\n', '    /**\n', '     * @dev Get Payback amount.\n', '     * @notice We need to fetch latest art, rate and dai to calcualte payback amount.\n', '     */\n', '    function _getWipeAmount(\n', '        bytes32 ilk,\n', '        address urn,\n', '        address vat\n', '    ) internal view returns (int256 amount) {\n', '        // Get normalize debt, rate and dai balance from Vat\n', '        (, uint256 art) = VatLike(vat).urns(ilk, urn);\n', '        (, uint256 rate, , , ) = VatLike(vat).ilks(ilk);\n', '        uint256 dai = VatLike(vat).dai(urn);\n', '\n', '        // Uses the whole dai balance in the vat to reduce the debt\n', '        amount = toInt(dai / rate);\n', '        // Checks the calculated amt is not higher than urn.art (total debt), otherwise uses its value\n', '        amount = uint256(amount) <= art ? -amount : -toInt(art);\n', '    }\n', '}']