['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract MarketRegistry is Ownable {\n', '    \n', '    enum MarketType {Buy, Sell, Both}\n', '    enum CurrencySupported {Eth, Erc20}\n', '    \n', '    struct BuyDetails {\n', '        uint256 marketId;\n', '        bytes buyData;\n', '    }\n', '\n', '    struct SellDetails {\n', '        uint256 marketId;\n', '        bytes sellData;\n', '    }\n', '\n', '    struct Market {\n', '        MarketType marketType;\n', '        CurrencySupported currencySupported;\n', '        address proxy;\n', '        bool isActive;\n', '    }\n', '\n', '    Market[] public markets;\n', '\n', '    constructor(\n', '        MarketType[] memory marketTypes,\n', '        CurrencySupported[] memory currenciesSupported, \n', '        address[] memory proxies\n', '    ) {\n', '        for (uint256 i = 0; i < marketTypes.length; i++) {\n', '            markets.push(Market(marketTypes[i], currenciesSupported[i], proxies[i], true));    \n', '        }\n', '    }\n', '\n', '    function addMarket(\n', '        MarketType marketType, \n', '        CurrencySupported currencySupported, \n', '        address proxy\n', '    ) external onlyOwner {\n', '        markets.push(Market(marketType, currencySupported, proxy, true));\n', '    }\n', '\n', '    function setMarketStatus(uint256 marketId, bool newStatus) external onlyOwner {\n', '        Market storage market = markets[marketId];\n', '        market.isActive = newStatus;\n', '    }\n', '\n', '    function setMarketProxy(uint256 marketId, address newProxy) external onlyOwner {\n', '        Market storage market = markets[marketId];\n', '        market.proxy = newProxy;\n', '    }\n', '}']