['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '// SPDX-License-Identifier: Unlicensed\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '  function totalSupply() external view returns (uint256);\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function transfer(address recipient, uint256 amount) external returns (bool);\n', '  function allowance(address owner, address spender) external view returns (uint256);\n', '  function approve(address spender, uint256 amount) external returns (bool);\n', '  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '  event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '  /**\n', '    * @dev Returns true if `account` is a contract.\n', '    *\n', '    * [IMPORTANT]\n', '    * ====\n', '    * It is unsafe to assume that an address for which this function returns\n', '    * false is an externally-owned account (EOA) and not a contract.\n', '    *\n', '    * Among others, `isContract` will return false for the following\n', '    * types of addresses:\n', '    *\n', '    *  - an externally-owned account\n', '    *  - a contract in construction\n', '    *  - an address where a contract will be created\n', '    *  - an address where a contract lived, but was destroyed\n', '    * ====\n', '    */\n', '  function isContract(address account) internal view returns (bool) {\n', '    // This method relies in extcodesize, which returns 0 for contracts in\n', '    // construction, since the code is only stored at the end of the\n', '    // constructor execution.\n', '\n', '    uint256 size;\n', '    // solhint-disable-next-line no-inline-assembly\n', '    assembly { size := extcodesize(account) }\n', '    return size > 0;\n', '  }\n', '\n', '  /**\n', "    * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '    * `recipient`, forwarding all available gas and reverting on errors.\n', '    *\n', '    * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '    * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '    * imposed by `transfer`, making them unable to receive funds via\n', '    * `transfer`. {sendValue} removes this limitation.\n', '    *\n', '    * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '    *\n', '    * IMPORTANT: because control is transferred to `recipient`, care must be\n', '    * taken to not create reentrancy vulnerabilities. Consider using\n', '    * {ReentrancyGuard} or the\n', '    * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '    */\n', '  function sendValue(address payable recipient, uint256 amount) internal {\n', '    require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '    (bool success, ) = recipient.call{ value: amount }("");\n', '    require(success, "Address: unable to send value, recipient may have reverted");\n', '  }\n', '\n', '  /**\n', '    * @dev Performs a Solidity function call using a low level `call`. A\n', '    * plain`call` is an unsafe replacement for a function call: use this\n', '    * function instead.\n', '    *\n', '    * If `target` reverts with a revert reason, it is bubbled up by this\n', '    * function (like regular Solidity function calls).\n', '    *\n', '    * Returns the raw returned data. To convert to the expected return value,\n', '    * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `target` must be a contract.\n', '    * - calling `target` with `data` must not revert.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '    return functionCall(target, data, "Address: low-level call failed");\n', '  }\n', '\n', '  /**\n', '    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '    * `errorMessage` as a fallback revert reason when `target` reverts.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '    return _functionCallWithValue(target, data, 0, errorMessage);\n', '  }\n', '\n', '  /**\n', '    * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '    * but also transferring `value` wei to `target`.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - the calling contract must have an ETH balance of at least `value`.\n', '    * - the called Solidity function must be `payable`.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '    return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '  }\n', '\n', '  /**\n', '    * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '    * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '    *\n', '    * _Available since v3.1._\n', '    */\n', '  function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '    require(address(this).balance >= value, "Address: insufficient balance for call");\n', '    return _functionCallWithValue(target, data, value, errorMessage);\n', '  }\n', '\n', '  function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '    require(isContract(target), "Address: call to non-contract");\n', '\n', '    // solhint-disable-next-line avoid-low-level-calls\n', '    (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '    if (success) {\n', '      return returndata;\n', '    } else {\n', '      // Look for revert reason and bubble it up if present\n', '      if (returndata.length > 0) {\n', '          // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '          // solhint-disable-next-line no-inline-assembly\n', '          assembly {\n', '              let returndata_size := mload(returndata)\n', '              revert(add(32, returndata), returndata_size)\n', '          }\n', '      } else {\n', '          revert(errorMessage);\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '    * @dev Returns the addition of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `+` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Addition cannot overflow.\n', '    */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    require(c >= a, "SafeMath: addition overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return sub(a, b, "SafeMath: subtraction overflow");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '    * overflow (when the result is negative).\n', '    *\n', "    * Counterpart to Solidity's `-` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Subtraction cannot overflow.\n', '    */\n', '  function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the multiplication of two unsigned integers, reverting on\n', '    * overflow.\n', '    *\n', "    * Counterpart to Solidity's `*` operator.\n", '    *\n', '    * Requirements:\n', '    *\n', '    * - Multiplication cannot overflow.\n', '    */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '        return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', '    require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return div(a, b, "SafeMath: division by zero");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '    * division by zero. The result is rounded towards zero.\n', '    *\n', "    * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '    * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '    * uses an invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    return mod(a, b, "SafeMath: modulo by zero");\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '    * Reverts with custom message when dividing by zero.\n', '    *\n', "    * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '    * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '    * invalid opcode to revert (consuming all remaining gas).\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The divisor cannot be zero.\n', '    */\n', '  function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '  }\n', '\n', '  /**\n', '    * @dev Deprecated. This function has issues similar to the ones found in\n', '    * {IERC20-approve}, and its usage is discouraged.\n', '    *\n', '    * Whenever possible, use {safeIncreaseAllowance} and\n', '    * {safeDecreaseAllowance} instead.\n', '    */\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    // solhint-disable-next-line max-line-length\n', '    require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '        "SafeERC20: approve from non-zero to non-zero allowance"\n', '    );\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  /**\n', '    * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '    * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '    * @param token The token targeted by the call.\n', '    * @param data The call data (encoded using abi.encode or one of its variants).\n', '    */\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '    // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '    bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '    if (returndata.length > 0) { // Return data is optional\n', '      // solhint-disable-next-line max-line-length\n', '      require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '    }\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 with Burning method\n', ' */\n', 'interface IERC20Burnable is IERC20 {\n', '  function burn(uint256 amount) external;\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '  function _msgSender() internal view virtual returns (address payable) {\n', '    return msg.sender;\n', '  }\n', '\n', '  function _msgData() internal view virtual returns (bytes memory) {\n', '    this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '    return msg.data;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Contract where tokens are blocked forever\n', ' */\n', 'contract BurnValley {\n', '  event TokensDestroyed(address burner, uint256 amount);\n', '\n', '  /**\n', '    * @dev Method for burning any token from contract balance.\n', '    * All tokens which will be sent here should be locked forever or burned\n', '    * For better transparency everybody can call this method and burn tokens\n', '    * Emits a {TokensDestroyed} event.\n', '    */\n', '  function burnAllTokens(address _token) external {\n', '    IERC20Burnable token = IERC20Burnable(_token);\n', '\n', '    uint256 balance = token.balanceOf(address(this));\n', '    token.burn(balance);\n', '\n', '    emit TokensDestroyed(msg.sender, balance);\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '  /**\n', '    * @dev Initializes the contract setting the deployer as the initial owner.\n', '    */\n', '  constructor () internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the address of the current owner.\n', '    */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '    * @dev Throws if called by any account other than the owner.\n', '    */\n', '  modifier onlyOwner() {\n', '    require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Leaves the contract without owner. It will not be possible to call\n', '    * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '    *\n', '    * NOTE: Renouncing ownership will leave the contract without an owner,\n', '    * thereby removing any functionality that is only available to the owner.\n', '    */\n', '  function renounceOwnership() public virtual onlyOwner {\n', '    emit OwnershipTransferred(_owner, address(0));\n', '    _owner = address(0);\n', '  }\n', '\n', '  /**\n', '    * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '    * Can only be called by the current owner.\n', '    */\n', '  function transferOwnership(address newOwner) public virtual onlyOwner {\n', '    require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract Pausable is Context {\n', '  /**\n', '    * @dev Emitted when the pause is triggered by `account`.\n', '    */\n', '  event Paused(address account);\n', '\n', '  /**\n', '    * @dev Emitted when the pause is lifted by `account`.\n', '    */\n', '  event Unpaused(address account);\n', '\n', '  bool private _paused;\n', '\n', '  /**\n', '    * @dev Initializes the contract in unpaused state.\n', '    */\n', '  constructor () internal {\n', '    _paused = false;\n', '  }\n', '\n', '  /**\n', '    * @dev Returns true if the contract is paused, and false otherwise.\n', '    */\n', '  function paused() public view returns (bool) {\n', '    return _paused;\n', '  }\n', '\n', '  /**\n', '    * @dev Modifier to make a function callable only when the contract is not paused.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The contract must not be paused.\n', '    */\n', '  modifier whenNotPaused() {\n', '    require(!_paused, "Pausable: paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Modifier to make a function callable only when the contract is paused.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The contract must be paused.\n', '    */\n', '  modifier whenPaused() {\n', '    require(_paused, "Pausable: not paused");\n', '    _;\n', '  }\n', '\n', '  /**\n', '    * @dev Triggers stopped state.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The contract must not be paused.\n', '    */\n', '  function _pause() internal virtual whenNotPaused {\n', '    _paused = true;\n', '    emit Paused(_msgSender());\n', '  }\n', '\n', '  /**\n', '    * @dev Returns to normal state.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - The contract must be paused.\n', '    */\n', '  function _unpause() internal virtual whenPaused {\n', '    _paused = false;\n', '    emit Unpaused(_msgSender());\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev EVOT tokens swap contract\n', ' */\n', 'contract Swap is Ownable, Pausable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  address public immutable burnValley;\n', '  uint256 public constant MIN_EVOT = 40 * 10**18;\n', '\n', '  IERC20 public constant EVOT = IERC20(0x5dE805154A24Cb824Ea70F9025527f35FaCD73a1);\n', '  IERC20 public constant USDC = IERC20(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '\n', '  mapping(address => uint256) public usdcPerUser;\n', '\n', '  event UsersRemoved(address[] users);\n', '  event UsersWhitelisted(address[] users, uint256[] amounts);\n', '  event TokensSwapped(address indexed user, uint256 evotAmount, uint256 usdcAmount);\n', '\n', '\n', '  //  ------------------------\n', '  //  CONSTRUCTOR\n', '  //  ------------------------\n', '\n', '\n', '\tconstructor() public {\n', '    // Deploy burn valley contract for locking tokens\n', '    burnValley = address(new BurnValley());\n', '\t}\n', '\n', '\n', '  //  ------------------------\n', '  //  USER METHODS\n', '  //  ------------------------\n', '\n', '\tfunction swap(uint256 evotAmount) external whenNotPaused {\n', '\t\trequire(evotAmount >= MIN_EVOT, "swap: Less EVOT then required!");\n', '\n', '    address user = _msgSender();\n', '    require(usdcPerUser[user] > 0, "swap: User not allowed to swap!");\n', '\n', '    // Transfer user tokens to burn valley contract\n', '    EVOT.safeTransferFrom(user, burnValley, evotAmount);\n', '\n', '    // Save amount which user will receive\n', '    uint256 usdcAmount = usdcPerUser[user];\n', '    usdcPerUser[user] = 0;\n', '\n', '    USDC.safeTransfer(user, usdcAmount);\n', '\n', '    // Transfer new tokens to sender\n', '\t\temit TokensSwapped(user, evotAmount, usdcAmount);\n', '\t}\n', '\n', '  //  ------------------------\n', '  //  OWNER METHODS\n', '  //  ------------------------\n', '\n', '  function whitelistUsers(address[] calldata users, uint256[] calldata amounts) external onlyOwner {\n', '    uint256 usersCount = users.length;\n', '    require(usersCount == amounts.length, "whitelistUsers: Arrays are not equal!");\n', '    require(usersCount > 0, "whitelistUsers: Empty arrays!");\n', '\n', '    for (uint256 i = 0; i < usersCount; i++) {\n', '      address user = users[i];\n', '      uint256 amount = amounts[i];\n', '\n', '      // Update contract storage with provided values\n', '      usdcPerUser[user] = amount;\n', '    }\n', '\n', '    emit UsersWhitelisted(users, amounts);\n', '  }\n', '\n', '  function removeUsers(address[] calldata users) external onlyOwner {\n', '    uint256 usersCount = users.length;\n', '    require(usersCount > 0, "removeUsers: Empty array!");\n', '\n', '    for (uint256 i = 0; i < usersCount; i++) {\n', '      address user = users[i];\n', '      usdcPerUser[user] = 0;\n', '    }\n', '\n', '    emit UsersRemoved(users);\n', '  }\n', '\n', '  function pause() external onlyOwner whenNotPaused {\n', '    _pause();\n', '  }\n', '\n', '  function unpause() external onlyOwner whenPaused {\n', '    _unpause();\n', '  }\n', '\n', '  function withdrawUsdc(address receiver) external onlyOwner {\n', '    USDC.safeTransfer(receiver, USDC.balanceOf(address(this)));\n', '  }\n', '\n', '  function withdrawUsdc(address receiver, uint256 amount) external onlyOwner {\n', '    USDC.safeTransfer(receiver, amount);\n', '  }\n', '}']