['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-02\n', '*/\n', '\n', '// SPDX-License-Identifier: GNU AGPLv3\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'interface ILookRevTree {\n', '    function addLeafToOpenBranch(uint256 genesisBranch, uint256 tokenID) external returns (uint256);\n', '    function addLeavesToOpenBranches(uint256[] calldata tokenIDs) external returns (uint256);\n', '}\n', '\n', '\n', 'interface ILookRevLeafNFT {\n', '    function getNFTTokenRecipient(uint256 tokenID) external view returns (address);\n', '    function redeemCredits(address recipient) external returns (uint256);\n', '    function rewardTokenID(uint256[] calldata tokenIDs, uint256[] calldata amount) external;\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    // silence state mutability warning without generating bytecode\n', '    // see https://github.com/ethereum/solidity/issues/2691\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File: node_modules\\@openzeppelin\\contracts\\math\\SafeMath.sol\n', '\n', '/**\n', " * @dev Patched. Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks. Patched.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a && c >= b, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '                \n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', '\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '    * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '    * by `operator` from `from`, this function is called.\n', '    *\n', '    * It must return its Solidity selector to confirm the token transfer.\n', '    * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '    *\n', '    * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '    */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '        \n', '        \n', '/**\n', ' * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n', ' * the Metadata extension, but not including the Enumerable extension, which is available separately as\n', ' * {ERC721Enumerable}.\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n', '    using Address for address;\n', '    using Strings for uint256;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '            \n', '    // Patched with default value. Base URI\n', '    string private _baseURI = "https://lookscoin.com/nft/";\n', '            \n', '    // Optional mapping for token URIs\n', '    mapping(uint256 => string) private _tokenURIs;\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping (uint256 => address) private _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping (address => uint256) private _balances;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '    \n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", "     *     bytes4(keccak256('tokenURI(uint256)')) == 0xc87b56dd\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 ^ 0xc87b56dd == 0x5b5e139f\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x5b5e139f;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        \n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Patched. Returns custom token uri or generic token uri.\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view virtual override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        // If there is custom token URI, return the custom URI.\n', '        if (bytes(_tokenURIs[tokenId]).length > 0) {\n', '            return _tokenURIs[tokenId];\n', '        }\n', '        // returns generic token URI\n', '        return bytes(_baseURI).length > 0\n', '            ? string(abi.encodePacked(_baseURI, tokenId.toString()))\n', "            : '';\n", '    }\n', '\n', '    \n', '    /**\n', '     * @dev Internal function to set the token URI for a given token.\n', '     *\n', '     * Reverts if the token ID does not exist.\n', '     *\n', '     * TIP: If all token IDs share a prefix (for example, if your URIs look like\n', '     * `https://api.myproject.com/token/<id>`), use {_setBaseURI} to store\n', '     * it and save gas.\n', '     */\n', '    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\n', '        require(_exists(tokenId), "ERC721Metadata: URI set of nonexistent token");\n', '        _tokenURIs[tokenId] = _tokenURI;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the base URI for all token IDs. It is\n', '     * automatically added as a prefix to the value returned in {tokenURI},\n', '     * or to the token ID if {tokenURI} is empty.\n', '     */\n', '    function _setBaseURI(string memory baseURI) internal virtual {\n', '        _baseURI = baseURI;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        // Clear metadata (if any)\n', '        if (bytes(_tokenURIs[tokenId]).length != 0) {\n', '            delete _tokenURIs[tokenId];\n', '        }\n', '        \n', '        _balances[owner] -= 1;\n', '        delete _owners[tokenId];\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve `to` to operate on `tokenId`\n', '     *\n', '     * Emits a {Approval} event.\n', '     */\n', '    function _approve(address to, uint256 tokenId) internal virtual {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        internal returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n', '            return retval == IERC721Receiver(to).onERC721Received.selector;\n', '        } catch (bytes memory reason) {\n', '            if (reason.length == 0) {\n', '                revert("ERC721: transfer to non ERC721Receiver implementer");\n', '            } else {\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    revert(add(32, reason), mload(reason))\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '}\n', '\n', '\n', '/// LookRevLeafNFT is ERC721\n', 'contract LookRevLeafNFT is\n', '    ERC721,\n', '    ILookRevLeafNFT\n', '    {\n', '    mapping (address => uint256[]) private ownerNFTTokens;\n', '    mapping (uint256 => uint256) public tokenCredits;\n', '\n', '    uint256 public nextTokenId = 1;\n', '\n', '    /// inital conversion rate is 1 ETH = 200,000 LooksCoin\n', '    uint256 public COIN_RATE = 200000;\n', '\n', '    /// LooksCoin credit for new LeafNFT token\n', '    uint256 constant public INIT_CREDIT = 10 ** 15;\n', '\n', '    /// Cost of leafNFT changes with the growth of the tree\n', '    /// Initial cost of leafNFT is 0.05 ETH\n', '    uint256 public averageCost = 5 * 10 ** 16;\n', '    /// Maximum amount of LeafNFT allowed to mint at a time\n', '    uint256 public maxBatchCount = 10;\n', '    \n', '    address private admin;\n', '    address private ceo;\n', '    address private cfo;\n', '    address private treeStorage;\n', '\n', '    /// LooksCoin contract\n', '    IERC20 public _looksCoin;\n', '    /// LookRevTree contract\n', '    ILookRevTree public _lrTree;\n', '    address[] private treeVersions;\n', '    address[] private tokenVersions;\n', '    \n', '    event CreditRedeemed(\n', '        string indexed str,\n', '        address indexed recipient,\n', '        uint256 indexed amount\n', '    );\n', '    \n', '    event RoleUpdated(\n', '        string indexed str,\n', '        address indexed newaddress\n', '    );\n', '\n', '    /// constructor\n', '    constructor() ERC721("LookRev LeafNFT", "LOOKNFT") {\n', '        admin = msg.sender;\n', '    }\n', '\n', '    /// @dev Mint yourself a leafNFT\n', '    /// @dev Check averageCost to get cost of leaf on the branch.\n', '    /// This function is going to mint a NFTToken on the open branch of the specified genesis branch.\n', '    /// If the amount sent is more than the cost of the leaf, the remaining amount will be minted into\n', "    /// LooksCoin ERC20 tokens, which will be deposited at the recipient's address.\n", '    /// @param genesisBranch is the id of the genesis branch, new leaf is added to its open branch\n', '    /// @param recipient is the recipient wallet address for receiving ERC721 leafNFT token and\n', '    /// LooksCoin ERC20 tokens.\n', '    function mintLeafNFT(uint256 genesisBranch, address recipient) external payable {\n', '        require(recipient != address(0), "LookRevLeafNFT: recipient needs valid wallet address");\n', '        require(msg.value > averageCost, "LookRevLeafNFT: Amount sent is too small");\n', '        \n', '        _safeMint(recipient, nextTokenId);\n', '        ownerNFTTokens[recipient].push(nextTokenId);\n', '        // Add LooksCoin credits for recipient. Use the redeemCredits method to redeem\n', '        uint256 _creditamt = SafeMath.sub(msg.value, averageCost) + INIT_CREDIT;\n', '        tokenCredits[nextTokenId] = SafeMath.add(tokenCredits[nextTokenId], _creditamt);\n', '        nextTokenId += 1;\n', '\n', '        averageCost = _lrTree.addLeafToOpenBranch(genesisBranch, nextTokenId - 1);\n', '    }\n', '\n', '    /// @dev Mint leaves on open branches, starting from genesis branches\n', '    /// Can mint up to 10 leafNFT at a time.\n', '    /// @dev Use averageCost to estimate cost of leaf\n', '    /// This function is going to add new leaves on the open branches on the tree\n', '    /// @dev If the amount sent is more than the cost of leaves, the recipient will receive credits\n', '    /// stored in NFTTokens\n', '    /// @param recipient is the recipient wallet address for receiving ERC721 leafNFT token and\n', '    ///  ERC20 LooksCoin tokens.\n', '    function mintLeafNFTTokens(address recipient) external payable {\n', '        require(recipient != address(0), "LookRevLeafNFT: recipient needs valid wallet address");\n', '        require(msg.value > averageCost, "LookRevLeafNFT: Amount sent is too small");\n', '        \n', '        uint256 _creditamt = 0;\n', '        uint256 _count = 0;\n', '        if (msg.value > averageCost * maxBatchCount) {\n', '            _count = maxBatchCount;\n', '            _creditamt = SafeMath.sub(msg.value, averageCost * maxBatchCount);\n', '        } else {\n', '            _count = SafeMath.div(msg.value, averageCost);\n', '            _creditamt = SafeMath.sub(msg.value, _count * averageCost);\n', '        }\n', '\n', '        uint256[] memory _tokens = new uint256[](_count);\n', '        for (uint256 i = 0; i < _count; i++) {\n', '            ownerNFTTokens[recipient].push(nextTokenId);\n', '            tokenCredits[nextTokenId] = SafeMath.add(tokenCredits[nextTokenId], INIT_CREDIT);\n', '            _tokens[i] = nextTokenId;\n', '            _safeMint(recipient, nextTokenId);\n', '            nextTokenId += 1;\n', '        }\n', '        \n', '        if (_creditamt > 0) {\n', '            tokenCredits[nextTokenId - 1] = SafeMath.add(tokenCredits[nextTokenId - 1], _creditamt);\n', '        }\n', '        \n', '        /// After successfully minted token for user, add them on the tree\n', '        averageCost = _lrTree.addLeavesToOpenBranches(_tokens);\n', '    }\n', '\n', '    /// Let token owner to redeem coin credits from credits stored in LeafNFT tokens\n', '    /// @dev Requires refilling the tree escrow as needed\n', '    /// @param recipient is the LeafNFT token owner wallet address\n', '    /// @return uint256 amount of LooksCoin ERC20 token redeemed for token owner\n', '    function redeemCredits(address recipient) external override returns (uint256) {\n', '        require(msg.sender == recipient || msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        require(recipient != address(0), "LookRevLeafNFT: recipient needs valid wallet address");\n', '        require(Address.isContract(recipient) == false, "LookRevLeafNFT: recipient can not be a contract");\n', '        uint256[] memory _tokenIDs = ownerNFTTokens[recipient];\n', '        if (_tokenIDs.length < 1) {\n', '            return 0;\n', '        }\n', '        uint256 _amt = 0;\n', '        // prevent reentry\n', '        for (uint256 i = 0; i < _tokenIDs.length; i++) {\n', '            uint256 _c = tokenCredits[_tokenIDs[i]];\n', '            if (_c > 0) {\n', '                tokenCredits[_tokenIDs[i]] = 0;\n', '                _amt = SafeMath.add(_amt, _c);\n', '            }\n', '        }\n', '        if (_amt <= 0) {\n', '            return 0;\n', '        }\n', '        uint256 _coinamt = SafeMath.mul(_amt, COIN_RATE);\n', '        if (_looksCoin.balanceOf(address(this)) >= _coinamt) {\n', '            _looksCoin.transfer(recipient, _coinamt);\n', '            emit CreditRedeemed("Credit Redeemed", recipient, _coinamt);\n', '        } else {\n', '            emit CreditRedeemed("Error redeem credit. Need to refill escrow", msg.sender, _coinamt);\n', '            revert("LookRevLeafNFT: Need to refill tree escrow");\n', '        }\n', '        return _coinamt;\n', '    }\n', '    \n', '    function getNFTTokenRecipient(uint256 tokenID) external override view returns (address) {\n', '        require(tokenID > 0 && tokenID < nextTokenId, "LookRevLeafNFT: tokenID out of range");\n', '        return ERC721.ownerOf(tokenID);\n', '    }\n', '    \n', '    ///===============================\n', '    /// Maintenance methods for admin\n', '    ///===============================\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual override {\n', '        ERC721._beforeTokenTransfer(from, to, tokenId);\n', '        if (tokenId < 1 || tokenId >= nextTokenId) {\n', '            return;\n', '        }\n', '        if (from != address(0)) {\n', '            for (uint256 i = 0; i < ownerNFTTokens[from].length; i++) {\n', '                if (ownerNFTTokens[from][i] == tokenId) {\n', '                    delete ownerNFTTokens[from][i];\n', '                }\n', '            }\n', '        }\n', '        if (to != address(0)) {\n', '            ownerNFTTokens[to].push(tokenId);\n', '        }\n', '    }\n', '            \n', '    // Reward contribution for team on off-chain project development\n', '    function rewardTokenID(uint256[] calldata tokenIDs, uint256[] calldata amount) external override {\n', '        require(msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        for (uint256 i = 0; i < tokenIDs.length; i++) {\n', '            uint256 _c = tokenIDs[i];\n', '            if(_c > 0 && _c < nextTokenId) {\n', '                tokenCredits[_c] = SafeMath.add(tokenCredits[_c], amount[i]);\n', '            }\n', '        }\n', '    }\n', '        \n', '    /// @dev Set the custom token uri\n', '    function setTokenURI(uint256 tokenId, string memory tokenURI) public {\n', '        require(msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        _setTokenURI(tokenId, tokenURI);\n', '    }\n', '    \n', '    /// @dev Withdraw from this contract to fund projects on tree branches\n', '    function withdraw() public {\n', '        require(msg.sender == admin|| msg.sender == ceo || msg.sender == cfo, "LookRevLeafNFT: Not authorized");\n', '        require(treeStorage != address(0), "LookRevLeafNFT: Set storage first");\n', '        payable(treeStorage).transfer(address(this).balance);\n', '    }\n', '\n', '    function updateRole(uint256 _role, address _new) public {\n', '        require(msg.sender == admin || msg.sender == ceo || msg.sender == cfo, "LookRevLeafNFT: Not authorized");\n', '        if (_role == 1) {\n', '            admin = _new;\n', '            emit RoleUpdated("admin", _new);\n', '        } else if (_role == 2) {\n', '            ceo = _new;\n', '            emit RoleUpdated("ceo", _new);\n', '        } else if (_role == 3) {\n', '            cfo = _new;\n', '            emit RoleUpdated("cfo", _new);\n', '        } else if (_role == 4) {\n', '            treeStorage = _new;\n', '            emit RoleUpdated("storage", _new);\n', '        } else if (_role == 5) {\n', '            _lrTree = ILookRevTree(_new);\n', '            treeVersions.push(_new);\n', '            emit RoleUpdated("tree", _new);\n', '        }\n', '    }\n', '\n', '    function getRoles() public view returns (address[] memory) {\n', '        require(msg.sender == admin || msg.sender == ceo || msg.sender == cfo, "LookRevLeafNFT: Not authorized");\n', '        address[] memory _roles = new address[](5);\n', '        _roles[0] = admin;\n', '        _roles[1] = ceo;\n', '        _roles[2] = cfo;\n', '        _roles[3] = treeStorage;\n', '        _roles[4] = address(_lrTree);\n', '        return _roles;\n', '    }\n', '        \n', '    function updateCoinVersion(address _token, uint256 rate) public {\n', '        require(msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        _looksCoin = IERC20(_token);\n', '        tokenVersions.push(_token);\n', '        COIN_RATE = rate;\n', '        emit RoleUpdated("Coin Version Updated", _token);\n', '    }\n', '\n', '    function getTreeVersions() public view returns (address[] memory) {\n', '        require(msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        return treeVersions;\n', '    }\n', '        \n', '    function getTokenVersions() public view returns (address[] memory) {\n', '        require(msg.sender == admin, "LookRevLeafNFT: Not authorized");\n', '        return tokenVersions;\n', '    }\n', '}']