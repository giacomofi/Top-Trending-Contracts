['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-06\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-08\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/PaymentHandler.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '// import "./PaymentMaster.sol";\n', '\n', '\n', '\n', '\n', '/**\n', ' * The payment handler is responsible for receiving payments.\n', " * If the payment is in ETH, it auto forwards to its parent master's owner.\n", ' * If the payment is in ERC20, it holds the tokens until it is asked to sweep.\n', " * It can only sweep ERC20s to the parent master's owner.\n", ' */\n', 'contract PaymentHandler {\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\t// a boolean to track whether a Proxied instance of this contract has been initialized\n', '\tbool public initialized = false;\n', '\n', '\t// Keep track of the parent master contract - cannot be changed once set\n', '\tPaymentMaster public master;\n', '\n', '\t/**\n', '\t * General constructor called by the master\n', '\t */\n', '\tfunction initialize(PaymentMaster _master) public {\n', "\t\trequire(initialized == false, 'Contract is already initialized');\n", '\t\tinitialized = true;\n', '\t\tmaster = _master;\n', '\t}\n', '\n', '\t/**\n', "\t * Helper function to return the parent master's address\n", '\t */\n', '\tfunction getMasterAddress() public view returns (address) {\n', '\t\treturn address(master);\n', '\t}\n', '\n', '\t/**\n', '\t * Default payable function - forwards to the owner and triggers event\n', '\t */\n', '\tfunction() external payable {\n', "\t\t// Get the parent master's owner address - explicity convert to payable\n", '\t\taddress payable ownerAddress = address(uint160(master.owner()));\n', '\n', '\t\t// Forward the funds to the owner\n', '\t\tAddress.sendValue(ownerAddress, msg.value);\n', '\n', '\t\t// Trigger the event notification in the parent master\n', '\t\tmaster.firePaymentReceivedEvent(address(this), msg.sender, msg.value);\n', '\t}\n', '\n', '\t/**\n', '\t * Sweep any tokens to the owner of the master\n', '\t */\n', '\tfunction sweepTokens(IERC20 token) public {\n', '\t\t// Get the owner address\n', '\t\taddress ownerAddress = master.owner();\n', '\n', '\t\t// Get the current balance\n', '\t\tuint balance = token.balanceOf(address(this));\n', '\n', '\t\t// Transfer to the owner\n', '\t\ttoken.safeTransfer(ownerAddress, balance);\n', '\t}\n', '\n', '}\n', '\n', '// File: contracts/Proxy.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'contract Proxy {\n', '    // Code position in storage is keccak256("PROXIABLE") = "0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7"\n', '    // constructor(bytes memory constructData, address contractLogic) public {\n', '    constructor(address contractLogic) public {\n', '        // save the code address\n', '        assembly { // solium-disable-line\n', '            sstore(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7, contractLogic)\n', '        }\n', '    }\n', '\n', '    function() external payable {\n', '        assembly { // solium-disable-line\n', '            let contractLogic := sload(0xc5f16f0fcc639fa48a6947836d9850f504798523bf8c9a3a87d5876cf622bcf7)\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0x0, calldatasize)\n', '            let success := delegatecall(gas, contractLogic, ptr, calldatasize, 0, 0)\n', '            let retSz := returndatasize\n', '            returndatacopy(ptr, 0, retSz)\n', '            switch success\n', '            case 0 {\n', '                revert(ptr, retSz)\n', '            }\n', '            default {\n', '                return(ptr, retSz)\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/PaymentMaster.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";\n', '\n', '/**\n', ' * The PaymentMaster sits above the payment handler contracts.\n', ' * It deploys and keeps track of all the handlers.\n', ' * It can trigger events by child handlers when they receive ETH.\n', ' * It allows ERC20 tokens to be swept in bulk to the owner account.\n', ' */\n', 'contract PaymentMaster {\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\taddress public owner;\n', '\n', '\t// payment handler logic contract address\n', '\taddress public handlerLogicAddress ;\n', '\n', '\t// A list of handler addresses for retrieval\n', '  address[] public handlerList;\n', '\n', '\t// A mapping of handler addresses for lookups\n', '\tmapping(address => bool) public handlerMap;\n', '\n', '\t// Events triggered for listeners\n', '\tevent HandlerCreated(address indexed _addr);\n', '\tevent EthPaymentReceived(address indexed _to, address indexed _from, uint256 _amount);\n', '\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\tbool initialized = false;\n', '\n', '\tfunction initialize(address _owner, address _handlerLogicAddress) public {\n', '\t\trequire(initialized == false, "Already initialized");\n', '\t\tinitialized = true;\n', '\n', '\t\thandlerLogicAddress = _handlerLogicAddress;\n', '\t\towner = _owner;\n', '\t}\n', '\n', '\t/**\n', '\t * Anyone can call the function to deploy a new payment handler.\n', '\t * The new contract will be created, added to the list, and an event fired.\n', '\t */\n', '\tfunction deployNewHandler() public {\n', '\t\t// Deploy the new Proxy contract with the handler logic address\n', '\t\tProxy createdProxy = new Proxy(handlerLogicAddress);\n', '\n', '\t\t// instantiate a PaymentHandler contract at the created Proxy address\n', '\t\tPaymentHandler proxyHandler = PaymentHandler(address(createdProxy));\n', '\n', "\t\t// initialize the Proxy with this contract's address\n", '\t\tproxyHandler.initialize(this);\n', '\n', '\t\t// Add it to the list and the mapping\n', '\t\thandlerList.push(address(createdProxy));\n', '\t\thandlerMap[address(createdProxy)] = true;\n', '\n', '\t\t// Emit event to let watchers know that a new handler was created\n', '\t\temit HandlerCreated(address(createdProxy));\n', '\t}\n', '\n', '\t/**\n', '\t * Allows caller to determine how long the handler list is for convenience\n', '\t */\n', '\tfunction getHandlerListLength() public view returns (uint) {\n', '\t\treturn handlerList.length;\n', '\t}\n', '\n', '\t/**\n', '\t * This function is called by handlers when they receive ETH payments.\n', '\t */\n', '\tfunction firePaymentReceivedEvent(address to, address from, uint256 amount) public {\n', '\t\t// Verify the call is coming from a handler\n', '\t\trequire(handlerMap[msg.sender], "Only payment handlers are allowed to trigger payment events.");\n', '\n', '\t\t// Emit the event\n', '\t\temit EthPaymentReceived(to, from, amount);\n', '\t}\n', '\n', '\t/**\n', '\t * Allows a caller to sweep multiple handlers in one transaction\n', '\t */\n', '\tfunction multiHandlerSweep(address[] memory handlers, IERC20 tokenContract) public {\n', '\t\tfor (uint i = 0; i < handlers.length; i++) {\n', '\n', '\t\t\t// Whitelist calls to only handlers\n', '\t\t\trequire(handlerMap[handlers[i]], "Only payment handlers are valid sweep targets.");\n', '\n', '\t\t\t// Trigger sweep\n', '\t\t\tPaymentHandler(address(uint160(handlers[i]))).sweepTokens(tokenContract);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * Safety function to allow sweep of ERC20s if accidentally sent to this contract\n', '\t */\n', '\tfunction sweepTokens(IERC20 token) public {\n', '\t\t// Get the current balance\n', '\t\tuint balance = token.balanceOf(address(this));\n', '\n', '\t\t// Transfer to the owner\n', '\t\ttoken.safeTransfer(owner, balance);\n', '\t}\n', '\n', '\tfunction transferOwnership(address newOwner) public {\n', '\t\trequire(msg.sender == owner, "Not owner");\n', '\t\towner = newOwner;\n', '\t\temit OwnershipTransferred(msg.sender, newOwner);\n', '\t}\n', '}\n', '\n', '// File: contracts/PaymentMasterFactory.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', '// import "./Proxy.sol";\n', '\n', '/**\n', 'Deploys new instances of the Payment Master\n', ' */\n', 'contract PaymentMasterFactory {\n', '\n', '\t// payment master logic contract address\n', '\taddress public masterLogicAddress ;\n', '\taddress public handlerLogicAddress;\n', '\n', '\t// Events triggered for listeners\n', '\tevent MasterCreated(address indexed _addr);\n', '\n', '\t/** Deploy the payment handler logic contract */\n', '\tconstructor() public {\n', '\t\tdeployLogic();\n', '\t}\n', '\n', '\t/**\n', '\t * Called by the constructor this function deploys impl contracts\n', '\t */\n', '\tfunction deployLogic() internal {\n', '\t\t// Deploy the new master contract\n', '\t\tPaymentMaster createdMaster = new PaymentMaster();\n', '\t\tmasterLogicAddress = address(createdMaster);\n', '\n', '\t\t// Deploy the new handler contract\n', '\t\tPaymentHandler createdHandler = new PaymentHandler();\n', '\t\thandlerLogicAddress = address(createdHandler);\n', '\n', '\t\t// initialize the deployed contracts - not needed but just in case\n', '\t\tcreatedHandler.initialize(createdMaster);\n', '\t\tcreatedMaster.initialize(msg.sender, address(handlerLogicAddress));\n', '\t}\n', '\n', '\t/**\n', '\tCalled to create a new payment master and emit an event\n', '\t */\n', '\tfunction deployNewMaster(address owner) public {\n', '\t\t// Deploy the new Proxy contract with the handler logic address\n', '\t\tProxy createdProxy = new Proxy(masterLogicAddress);\n', '\n', '\t\t// instantiate a PaymentMaster contract at the created Proxy address\n', '\t\tPaymentMaster proxyMaster = PaymentMaster(address(createdProxy));\n', '\n', '\t\t// Initialize with the owner address and logic impl address\n', '\t\tproxyMaster.initialize(owner, address(handlerLogicAddress));\n', '\n', '\t\t// Emit the event that a new master was deployed\n', '\t\temit MasterCreated(address(proxyMaster));\n', '\t}\n', '}']