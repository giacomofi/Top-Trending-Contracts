['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-21\n', '*/\n', '\n', '// File: contracts/handlers/uniswapv3/libraries/BytesLib.sol\n', '\n', '// SPDX-License-Identifier: GPL-2.0-or-later\n', '/*\n', ' * @title Solidity Bytes Arrays Utils\n', ' * @author Gonçalo Sá <[email\xa0protected]>\n', ' *\n', ' * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n', ' *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n', ' */\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'library BytesLib {\n', '    function slice(\n', '        bytes memory _bytes,\n', '        uint256 _start,\n', '        uint256 _length\n', '    ) internal pure returns (bytes memory) {\n', '        require(_length + 31 >= _length, "slice_overflow");\n', '        require(_start + _length >= _start, "slice_overflow");\n', '        require(_bytes.length >= _start + _length, "slice_outOfBounds");\n', '\n', '        bytes memory tempBytes;\n', '\n', '        assembly {\n', '            switch iszero(_length)\n', '                case 0 {\n', '                    // Get a location of some free memory and store it in tempBytes as\n', '                    // Solidity does for memory variables.\n', '                    tempBytes := mload(0x40)\n', '\n', '                    // The first word of the slice result is potentially a partial\n', '                    // word read from the original array. To read it, we calculate\n', '                    // the length of that partial word and start copying that many\n', '                    // bytes into the array. The first word we copy will start with\n', "                    // data we don't care about, but the last `lengthmod` bytes will\n", '                    // land at the beginning of the contents of the new array. When\n', "                    // we're done copying, we overwrite the full first word with\n", '                    // the actual length of the slice.\n', '                    let lengthmod := and(_length, 31)\n', '\n', '                    // The multiplication in the next line is necessary\n', '                    // because when slicing multiples of 32 bytes (lengthmod == 0)\n', "                    // the following copy loop was copying the origin's length\n", '                    // and then ending prematurely not copying everything it should.\n', '                    let mc := add(\n', '                        add(tempBytes, lengthmod),\n', '                        mul(0x20, iszero(lengthmod))\n', '                    )\n', '                    let end := add(mc, _length)\n', '\n', '                    for {\n', '                        // The multiplication in the next line has the same exact purpose\n', '                        // as the one above.\n', '                        let cc := add(\n', '                            add(\n', '                                add(_bytes, lengthmod),\n', '                                mul(0x20, iszero(lengthmod))\n', '                            ),\n', '                            _start\n', '                        )\n', '                    } lt(mc, end) {\n', '                        mc := add(mc, 0x20)\n', '                        cc := add(cc, 0x20)\n', '                    } {\n', '                        mstore(mc, mload(cc))\n', '                    }\n', '\n', '                    mstore(tempBytes, _length)\n', '\n', '                    //update free-memory pointer\n', '                    //allocating the array padded to 32 bytes like the compiler does now\n', '                    mstore(0x40, and(add(mc, 31), not(31)))\n', '                }\n', "                //if we want a zero-length slice let's just return a zero-length array\n", '                default {\n', '                    tempBytes := mload(0x40)\n', '                    //zero out the 32 bytes slice we are about to return\n', '                    //we need to do it because Solidity does not garbage collect\n', '                    mstore(tempBytes, 0)\n', '\n', '                    mstore(0x40, add(tempBytes, 0x20))\n', '                }\n', '        }\n', '\n', '        return tempBytes;\n', '    }\n', '\n', '    function toAddress(bytes memory _bytes, uint256 _start)\n', '        internal\n', '        pure\n', '        returns (address)\n', '    {\n', '        require(_start + 20 >= _start, "toAddress_overflow");\n', '        require(_bytes.length >= _start + 20, "toAddress_outOfBounds");\n', '        address tempAddress;\n', '\n', '        assembly {\n', '            tempAddress := div(\n', '                mload(add(add(_bytes, 0x20), _start)),\n', '                0x1000000000000000000000000\n', '            )\n', '        }\n', '\n', '        return tempAddress;\n', '    }\n', '\n', '    function toUint24(bytes memory _bytes, uint256 _start)\n', '        internal\n', '        pure\n', '        returns (uint24)\n', '    {\n', '        require(_start + 3 >= _start, "toUint24_overflow");\n', '        require(_bytes.length >= _start + 3, "toUint24_outOfBounds");\n', '        uint24 tempUint;\n', '\n', '        assembly {\n', '            tempUint := mload(add(add(_bytes, 0x3), _start))\n', '        }\n', '\n', '        return tempUint;\n', '    }\n', '}\n', '\n', '// File: @uniswap/v3-core/contracts/interfaces/callback/IUniswapV3SwapCallback.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '/// @title Callback for IUniswapV3PoolActions#swap\n', '/// @notice Any contract that calls IUniswapV3PoolActions#swap must implement this interface\n', 'interface IUniswapV3SwapCallback {\n', '    /// @notice Called to `msg.sender` after executing a swap via IUniswapV3Pool#swap.\n', '    /// @dev In the implementation you must pay the pool tokens owed for the swap.\n', '    /// The caller of this method must be checked to be a UniswapV3Pool deployed by the canonical UniswapV3Factory.\n', '    /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\n', '    /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\n', '    /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\n', '    /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\n', '    /// @param data Any data passed through by the caller via the IUniswapV3PoolActions#swap call\n', '    function uniswapV3SwapCallback(\n', '        int256 amount0Delta,\n', '        int256 amount1Delta,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '// File: contracts/handlers/uniswapv3/ISwapRouter.sol\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '/// @title Periphery Payments\n', '/// @notice Functions to ease deposits and withdrawals of ETH\n', 'interface IPeripheryPayments {\n', "    /// @notice Unwraps the contract's WETH9 balance and sends it to recipient as ETH.\n", '    /// @dev The amountMinimum parameter prevents malicious contracts from stealing WETH9 from users.\n', '    /// @param amountMinimum The minimum amount of WETH9 to unwrap\n', '    /// @param recipient The address receiving ETH\n', '    function unwrapWETH9(uint256 amountMinimum, address recipient) external payable;\n', '\n', '    /// @notice Refunds any ETH balance held by this contract to the `msg.sender`\n', '    /// @dev Useful for bundling with mint or increase liquidity that uses ether, or exact output swaps\n', '    /// that use ether for the input amount\n', '    function refundETH() external payable;\n', '\n', '    /// @notice Transfers the full amount of a token held by this contract to recipient\n', '    /// @dev The amountMinimum parameter prevents malicious contracts from stealing the token from users\n', '    /// @param token The contract address of the token which will be transferred to `recipient`\n', '    /// @param amountMinimum The minimum amount of token required for a transfer\n', '    /// @param recipient The destination address of the token\n', '    function sweepToken(\n', '        address token,\n', '        uint256 amountMinimum,\n', '        address recipient\n', '    ) external payable;\n', '}\n', '\n', '/// @title Router token swapping functionality\n', '/// @notice Functions for swapping tokens via Uniswap V3\n', 'interface ISwapRouter is IUniswapV3SwapCallback, IPeripheryPayments {\n', '    struct ExactInputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInputSingle(ExactInputSingleParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactInputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountIn;\n', '        uint256 amountOutMinimum;\n', '    }\n', '\n', '    /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\n', '    /// @return amountOut The amount of the received token\n', '    function exactInput(ExactInputParams calldata params) external payable returns (uint256 amountOut);\n', '\n', '    struct ExactOutputSingleParams {\n', '        address tokenIn;\n', '        address tokenOut;\n', '        uint24 fee;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '        uint160 sqrtPriceLimitX96;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another token\n', '    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutputSingle(ExactOutputSingleParams calldata params) external payable returns (uint256 amountIn);\n', '\n', '    struct ExactOutputParams {\n', '        bytes path;\n', '        address recipient;\n', '        uint256 deadline;\n', '        uint256 amountOut;\n', '        uint256 amountInMaximum;\n', '    }\n', '\n', '    /// @notice Swaps as little as possible of one token for `amountOut` of another along the specified path (reversed)\n', '    /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactOutputParams` in calldata\n', '    /// @return amountIn The amount of the input token\n', '    function exactOutput(ExactOutputParams calldata params) external payable returns (uint256 amountIn);\n', '}\n', '\n', '// File: contracts/handlers/weth/IWETH9.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IWETH9 {\n', '    fallback() external payable;\n', '    function deposit() external payable;\n', '    function withdraw(uint256 wad) external;\n', '}\n', '\n', '// File: contracts/lib/LibStack.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'library LibStack {\n', '    function setAddress(bytes32[] storage _stack, address _input) internal {\n', '        _stack.push(bytes32(uint256(uint160(_input))));\n', '    }\n', '\n', '    function set(bytes32[] storage _stack, bytes32 _input) internal {\n', '        _stack.push(_input);\n', '    }\n', '\n', '    function setHandlerType(bytes32[] storage _stack, Config.HandlerType _input)\n', '        internal\n', '    {\n', '        _stack.push(bytes12(uint96(_input)));\n', '    }\n', '\n', '    function getAddress(bytes32[] storage _stack)\n', '        internal\n', '        returns (address ret)\n', '    {\n', '        ret = address(uint160(uint256(peek(_stack))));\n', '        _stack.pop();\n', '    }\n', '\n', '    function getSig(bytes32[] storage _stack) internal returns (bytes4 ret) {\n', '        ret = bytes4(peek(_stack));\n', '        _stack.pop();\n', '    }\n', '\n', '    function get(bytes32[] storage _stack) internal returns (bytes32 ret) {\n', '        ret = peek(_stack);\n', '        _stack.pop();\n', '    }\n', '\n', '    function peek(bytes32[] storage _stack)\n', '        internal\n', '        view\n', '        returns (bytes32 ret)\n', '    {\n', '        require(_stack.length > 0, "stack empty");\n', '        ret = _stack[_stack.length - 1];\n', '    }\n', '}\n', '\n', '// File: contracts/lib/LibCache.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library LibCache {\n', '    function set(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        bytes32 _value\n', '    ) internal {\n', '        _cache[_key] = _value;\n', '    }\n', '\n', '    function setAddress(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        address _value\n', '    ) internal {\n', '        _cache[_key] = bytes32(uint256(uint160(_value)));\n', '    }\n', '\n', '    function setUint256(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key,\n', '        uint256 _value\n', '    ) internal {\n', '        _cache[_key] = bytes32(_value);\n', '    }\n', '\n', '    function getAddress(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key\n', '    ) internal view returns (address ret) {\n', '        ret = address(uint160(uint256(_cache[_key])));\n', '    }\n', '\n', '    function getUint256(\n', '        mapping(bytes32 => bytes32) storage _cache,\n', '        bytes32 _key\n', '    ) internal view returns (uint256 ret) {\n', '        ret = uint256(_cache[_key]);\n', '    }\n', '\n', '    function get(mapping(bytes32 => bytes32) storage _cache, bytes32 _key)\n', '        internal\n', '        view\n', '        returns (bytes32 ret)\n', '    {\n', '        ret = _cache[_key];\n', '    }\n', '}\n', '\n', '// File: contracts/Storage.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/// @notice A cache structure composed by a bytes32 array\n', 'contract Storage {\n', '    using LibCache for mapping(bytes32 => bytes32);\n', '    using LibStack for bytes32[];\n', '\n', '    bytes32[] public stack;\n', '    mapping(bytes32 => bytes32) public cache;\n', '\n', '    // keccak256 hash of "msg.sender"\n', '    // prettier-ignore\n', '    bytes32 public constant MSG_SENDER_KEY = 0xb2f2618cecbbb6e7468cc0f2aa43858ad8d153e0280b22285e28e853bb9d453a;\n', '\n', '    // keccak256 hash of "cube.counter"\n', '    // prettier-ignore\n', '    bytes32 public constant CUBE_COUNTER_KEY = 0xf9543f11459ccccd21306c8881aaab675ff49d988c1162fd1dd9bbcdbe4446be;\n', '\n', '    modifier isStackEmpty() {\n', '        require(stack.length == 0, "Stack not empty");\n', '        _;\n', '    }\n', '\n', '    modifier isCubeCounterZero() {\n', '        require(_getCubeCounter() == 0, "Cube counter not zero");\n', '        _;\n', '    }\n', '\n', '    modifier isInitialized() {\n', '        require(_getSender() != address(0), "Sender is not initialized");\n', '        _;\n', '    }\n', '\n', '    modifier isNotInitialized() {\n', '        require(_getSender() == address(0), "Sender is initialized");\n', '        _;\n', '    }\n', '\n', '    function _setSender() internal isNotInitialized {\n', '        cache.setAddress(MSG_SENDER_KEY, msg.sender);\n', '    }\n', '\n', '    function _resetSender() internal {\n', '        cache.setAddress(MSG_SENDER_KEY, address(0));\n', '    }\n', '\n', '    function _getSender() internal view returns (address) {\n', '        return cache.getAddress(MSG_SENDER_KEY);\n', '    }\n', '\n', '    function _addCubeCounter() internal {\n', '        cache.setUint256(CUBE_COUNTER_KEY, _getCubeCounter() + 1);\n', '    }\n', '\n', '    function _resetCubeCounter() internal {\n', '        cache.setUint256(CUBE_COUNTER_KEY, 0);\n', '    }\n', '\n', '    function _getCubeCounter() internal view returns (uint256) {\n', '        return cache.getUint256(CUBE_COUNTER_KEY);\n', '    }\n', '}\n', '\n', '// File: contracts/Config.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'contract Config {\n', '    // function signature of "postProcess()"\n', '    bytes4 public constant POSTPROCESS_SIG = 0xc2722916;\n', '\n', '    // The base amount of percentage function\n', '    uint256 public constant PERCENTAGE_BASE = 1 ether;\n', '\n', '    // Handler post-process type. Others should not happen now.\n', '    enum HandlerType {Token, Custom, Others}\n', '}\n', '\n', '// File: contracts/interface/IERC20Usdt.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IERC20Usdt {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external;\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external;\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external;\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/handlers/HandlerBase.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'abstract contract HandlerBase is Storage, Config {\n', '    using SafeERC20 for IERC20;\n', '\n', '    function postProcess() external payable virtual {\n', '        revert("Invalid post process");\n', '        /* Implementation template\n', '        bytes4 sig = stack.getSig();\n', '        if (sig == bytes4(keccak256(bytes("handlerFunction_1()")))) {\n', '            // Do something\n', '        } else if (sig == bytes4(keccak256(bytes("handlerFunction_2()")))) {\n', '            bytes32 temp = stack.get();\n', '            // Do something\n', '        } else revert("Invalid post process");\n', '        */\n', '    }\n', '\n', '    function _updateToken(address token) internal {\n', '        stack.setAddress(token);\n', '        // Ignore token type to fit old handlers\n', '        // stack.setHandlerType(uint256(HandlerType.Token));\n', '    }\n', '\n', '    function _updatePostProcess(bytes32[] memory params) internal {\n', '        for (uint256 i = params.length; i > 0; i--) {\n', '            stack.set(params[i - 1]);\n', '        }\n', '        stack.set(msg.sig);\n', '        stack.setHandlerType(HandlerType.Custom);\n', '    }\n', '\n', '    function getContractName() public pure virtual returns (string memory);\n', '\n', '    function _revertMsg(string memory functionName, string memory reason)\n', '        internal\n', '        view\n', '    {\n', '        revert(\n', '            string(\n', '                abi.encodePacked(\n', '                    _uint2String(_getCubeCounter()),\n', '                    "_",\n', '                    getContractName(),\n', '                    "_",\n', '                    functionName,\n', '                    ": ",\n', '                    reason\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    function _revertMsg(string memory functionName) internal view {\n', '        _revertMsg(functionName, "Unspecified");\n', '    }\n', '\n', '    function _uint2String(uint256 n) internal pure returns (string memory) {\n', '        if (n == 0) {\n', '            return "0";\n', '        } else {\n', '            uint256 len = 0;\n', '            for (uint256 temp = n; temp > 0; temp /= 10) {\n', '                len++;\n', '            }\n', '            bytes memory str = new bytes(len);\n', '            for (uint256 i = len; i > 0; i--) {\n', '                str[i - 1] = bytes1(uint8(48 + (n % 10)));\n', '                n /= 10;\n', '            }\n', '            return string(str);\n', '        }\n', '    }\n', '\n', '    function _getBalance(address token, uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (amount != uint256(-1)) {\n', '            return amount;\n', '        }\n', '\n', '        // ETH case\n', '        if (\n', '            token == address(0) ||\n', '            token == address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE)\n', '        ) {\n', '            return address(this).balance;\n', '        }\n', '        // ERC20 token case\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '\n', '    function _tokenApprove(\n', '        address token,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        try IERC20Usdt(token).approve(spender, amount) {} catch {\n', '            IERC20(token).safeApprove(spender, 0);\n', '            IERC20(token).safeApprove(spender, amount);\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/handlers/uniswapv3/HUniswapV3.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract HUniswapV3 is HandlerBase {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using BytesLib for bytes;\n', '\n', '    // prettier-ignore\n', '    ISwapRouter public constant ROUTER = ISwapRouter(0xE592427A0AEce92De3Edee1F18E0157C05861564);\n', '    // prettier-ignore\n', '    IWETH9 public constant WETH = IWETH9(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '\n', '    uint256 private constant PATH_SIZE = 43; // address + address + uint24\n', '    uint256 private constant ADDRESS_SIZE = 20;\n', '\n', '    function getContractName() public pure override returns (string memory) {\n', '        return "HUniswapV3";\n', '    }\n', '\n', '    function exactInputSingleFromEther(\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputSingleParams memory params;\n', '        params.tokenIn = address(WETH);\n', '        params.tokenOut = tokenOut;\n', '        params.fee = fee;\n', '        params.amountIn = _getBalance(address(0), amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        amountOut = _exactInputSingle(params.amountIn, params);\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactInputSingleToEther(\n', '        address tokenIn,\n', '        uint24 fee,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputSingleParams memory params;\n', '        params.tokenIn = tokenIn;\n', '        params.tokenOut = address(WETH);\n', '        params.fee = fee;\n', '        params.amountIn = _getBalance(tokenIn, amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\n', '        amountOut = _exactInputSingle(0, params);\n', '        WETH.withdraw(amountOut);\n', '    }\n', '\n', '    function exactInputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputSingleParams memory params;\n', '        params.tokenIn = tokenIn;\n', '        params.tokenOut = tokenOut;\n', '        params.fee = fee;\n', '        params.amountIn = _getBalance(tokenIn, amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\n', '        amountOut = _exactInputSingle(0, params);\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactInputFromEther(\n', '        bytes memory path,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Extract tokenIn and tokenOut\n', '        address tokenIn = _getFirstToken(path);\n', '        address tokenOut = _getLastToken(path);\n', '        // Input token must be WETH\n', '        if (tokenIn != address(WETH))\n', '            _revertMsg("exactInputFromEther", "Input not WETH");\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputParams memory params;\n', '        params.path = path;\n', '        params.amountIn = _getBalance(address(0), amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '\n', '        amountOut = _exactInput(params.amountIn, params);\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactInputToEther(\n', '        bytes memory path,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Extract tokenIn and tokenOut\n', '        address tokenIn = _getFirstToken(path);\n', '        address tokenOut = _getLastToken(path);\n', '        // Output token must be WETH\n', '        if (tokenOut != address(WETH))\n', '            _revertMsg("exactInputToEther", "Output not WETH");\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputParams memory params;\n', '        params.path = path;\n', '        params.amountIn = _getBalance(tokenIn, amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\n', '        amountOut = _exactInput(0, params);\n', '\n', '        WETH.withdraw(amountOut);\n', '    }\n', '\n', '    function exactInput(\n', '        bytes memory path,\n', '        uint256 amountIn,\n', '        uint256 amountOutMinimum\n', '    ) external payable returns (uint256 amountOut) {\n', '        // Extract tokenIn and tokenOut\n', '        address tokenIn = _getFirstToken(path);\n', '        address tokenOut = _getLastToken(path);\n', '        // Build params for router call\n', '        ISwapRouter.ExactInputParams memory params;\n', '        params.path = path;\n', '        params.amountIn = _getBalance(tokenIn, amountIn);\n', '        params.amountOutMinimum = amountOutMinimum;\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountIn);\n', '        amountOut = _exactInput(0, params);\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactOutputSingleFromEther(\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputSingleParams memory params;\n', '        params.tokenIn = address(WETH);\n', '        params.tokenOut = tokenOut;\n', '        params.fee = fee;\n', '        params.amountOut = amountOut;\n', '        // if amount == uint256(-1) return balance of Proxy\n', '        params.amountInMaximum = _getBalance(address(0), amountInMaximum);\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        amountIn = _exactOutputSingle(params.amountInMaximum, params);\n', '        ROUTER.refundETH();\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactOutputSingleToEther(\n', '        address tokenIn,\n', '        uint24 fee,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputSingleParams memory params;\n', '        params.tokenIn = tokenIn;\n', '        params.tokenOut = address(WETH);\n', '        params.fee = fee;\n', '        params.amountOut = amountOut;\n', '        // if amount == uint256(-1) return balance of Proxy\n', '        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        // Approve token\n', '        _tokenApprove(params.tokenIn, address(ROUTER), params.amountInMaximum);\n', '        amountIn = _exactOutputSingle(0, params);\n', '        WETH.withdraw(params.amountOut);\n', '    }\n', '\n', '    function exactOutputSingle(\n', '        address tokenIn,\n', '        address tokenOut,\n', '        uint24 fee,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum,\n', '        uint160 sqrtPriceLimitX96\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputSingleParams memory params;\n', '        params.tokenIn = tokenIn;\n', '        params.tokenOut = tokenOut;\n', '        params.fee = fee;\n', '        params.amountOut = amountOut;\n', '        // if amount == uint256(-1) return balance of Proxy\n', '        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\n', '        params.sqrtPriceLimitX96 = sqrtPriceLimitX96;\n', '\n', '        // Approve token\n', '        _tokenApprove(params.tokenIn, address(ROUTER), params.amountInMaximum);\n', '        amountIn = _exactOutputSingle(0, params);\n', '\n', '        _updateToken(params.tokenOut);\n', '    }\n', '\n', '    function exactOutputFromEther(\n', '        bytes memory path,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Extract tokenIn and tokenOut\n', '        // Note that the first token is tokenOut in exactOutput functions, vice versa\n', '        address tokenIn = _getLastToken(path);\n', '        address tokenOut = _getFirstToken(path);\n', '        // Input token must be WETH\n', '        if (tokenIn != address(WETH))\n', '            _revertMsg("exactOutputFromEther", "Input not WETH");\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputParams memory params;\n', '        params.path = path;\n', '        params.amountOut = amountOut;\n', '        params.amountInMaximum = _getBalance(address(0), amountInMaximum);\n', '\n', '        amountIn = _exactOutput(params.amountInMaximum, params);\n', '        ROUTER.refundETH();\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function exactOutputToEther(\n', '        bytes memory path,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Extract tokenIn and tokenOut\n', '        // Note that the first token is tokenOut in exactOutput functions, vice versa\n', '        address tokenIn = _getLastToken(path);\n', '        address tokenOut = _getFirstToken(path);\n', '        // Out token must be WETH\n', '        if (tokenOut != address(WETH))\n', '            _revertMsg("exactOutputToEther", "Output not WETH");\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputParams memory params;\n', '        params.path = path;\n', '        params.amountOut = amountOut;\n', '        // if amount == uint256(-1) return balance of Proxy\n', '        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountInMaximum);\n', '        amountIn = _exactOutput(0, params);\n', '\n', '        WETH.withdraw(amountOut);\n', '    }\n', '\n', '    function exactOutput(\n', '        bytes memory path,\n', '        uint256 amountOut,\n', '        uint256 amountInMaximum\n', '    ) external payable returns (uint256 amountIn) {\n', '        // Extract tokenIn and tokenOut\n', '        // Note that the first token is tokenOut in exactOutput functions, vice versa\n', '        address tokenIn = _getLastToken(path);\n', '        address tokenOut = _getFirstToken(path);\n', '        // Build params for router call\n', '        ISwapRouter.ExactOutputParams memory params;\n', '        params.path = path;\n', '        params.amountOut = amountOut;\n', '        // if amount == uint256(-1) return balance of Proxy\n', '        params.amountInMaximum = _getBalance(tokenIn, amountInMaximum);\n', '\n', '        // Approve token\n', '        _tokenApprove(tokenIn, address(ROUTER), params.amountInMaximum);\n', '        amountIn = _exactOutput(0, params);\n', '\n', '        _updateToken(tokenOut);\n', '    }\n', '\n', '    function _getFirstToken(bytes memory path) internal pure returns (address) {\n', '        return path.toAddress(0);\n', '    }\n', '\n', '    function _getLastToken(bytes memory path) internal view returns (address) {\n', '        if (path.length < PATH_SIZE)\n', '            _revertMsg("General", "Path size too small");\n', '        return path.toAddress(path.length - ADDRESS_SIZE);\n', '    }\n', '\n', '    function _exactInputSingle(\n', '        uint256 value,\n', '        ISwapRouter.ExactInputSingleParams memory params\n', '    ) internal returns (uint256) {\n', '        params.deadline = now;\n', '        params.recipient = address(this);\n', '\n', '        try ROUTER.exactInputSingle{value: value}(params) returns (\n', '            uint256 amountOut\n', '        ) {\n', '            return amountOut;\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("exactInputSingle", reason);\n', '        } catch {\n', '            _revertMsg("exactInputSingle");\n', '        }\n', '    }\n', '\n', '    function _exactInput(\n', '        uint256 value,\n', '        ISwapRouter.ExactInputParams memory params\n', '    ) internal returns (uint256) {\n', '        params.deadline = now;\n', '        params.recipient = address(this);\n', '\n', '        try ROUTER.exactInput{value: value}(params) returns (\n', '            uint256 amountOut\n', '        ) {\n', '            return amountOut;\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("exactInput", reason);\n', '        } catch {\n', '            _revertMsg("exactInput");\n', '        }\n', '    }\n', '\n', '    function _exactOutputSingle(\n', '        uint256 value,\n', '        ISwapRouter.ExactOutputSingleParams memory params\n', '    ) internal returns (uint256) {\n', '        params.deadline = now;\n', '        params.recipient = address(this);\n', '\n', '        try ROUTER.exactOutputSingle{value: value}(params) returns (\n', '            uint256 amountIn\n', '        ) {\n', '            return amountIn;\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("exactOutputSingle", reason);\n', '        } catch {\n', '            _revertMsg("exactOutputSingle");\n', '        }\n', '    }\n', '\n', '    function _exactOutput(\n', '        uint256 value,\n', '        ISwapRouter.ExactOutputParams memory params\n', '    ) internal returns (uint256) {\n', '        params.deadline = now;\n', '        params.recipient = address(this);\n', '\n', '        try ROUTER.exactOutput{value: value}(params) returns (\n', '            uint256 amountIn\n', '        ) {\n', '            return amountIn;\n', '        } catch Error(string memory reason) {\n', '            _revertMsg("exactOutput", reason);\n', '        } catch {\n', '            _revertMsg("exactOutput");\n', '        }\n', '    }\n', '}']