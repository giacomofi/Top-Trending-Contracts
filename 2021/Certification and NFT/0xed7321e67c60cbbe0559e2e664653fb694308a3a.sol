['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-04\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity ^0.4.0;\n', '\n', 'contract profitSharing{\n', '    \n', '    address public owner;\n', '    uint public allPercent;\n', '    uint decimals = (10 ** 6);\n', '    \n', '    struct Addresses {\n', '        address userAddress;\n', '        uint percent;\n', '    }\n', '    \n', '    Addresses[] public addresses;\n', '    Addresses[] newAddr;\n', '    uint public payBalance = 0;\n', '    \n', '    modifier isOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    event Deposit(address indexed from, uint value);\n', '    \n', '    constructor () public {\n', '        owner = msg.sender;\n', '    }\n', '    \n', '    function() external payable {\n', '        if(address(this).balance >= payBalance * decimals){\n', '            payAll();\n', '        }\n', '    }\n', '    \n', '    function getBalance() public view returns(uint){\n', '        return address(this).balance;\n', '    } \n', '    \n', '    function setPayBalance(uint _payBalance) public isOwner{\n', '        payBalance = _payBalance;\n', '    }\n', '    \n', '    function payAll() public isOwner payable{\n', '        uint j = 0;\n', '        uint allBalance = address(this).balance;\n', '        for (j = 0; j < addresses.length; j++) {\n', '            addresses[j].userAddress.transfer((allBalance * addresses[j].percent) / 100);\n', '        }\n', '        //if(address(this).balance > 0){\n', '        //    owner.transfer(address(this).balance);\n', '        //}\n', '    }\n', '    \n', '    function getCount() public view returns(uint) {\n', '        return addresses.length;\n', '    }\n', '    \n', '    function getAdresses(uint j) public view returns(uint num, address addr, uint per){\n', '        num = j;\n', '        addr = addresses[j].userAddress;\n', '        per = addresses[j].percent;\n', '    }\n', '    \n', '    function setAddresses(address _userAddr, uint percent) public isOwner{ \n', '        addresses.push(Addresses(_userAddr, percent));\n', '        allPercent += percent;\n', '    }\n', '    \n', '    function updateAddresses(address _userAddr, uint percent, uint num) public isOwner{\n', '        uint old = allPercent - addresses[num].percent;\n', '        addresses[num] = Addresses(_userAddr, percent);\n', '        allPercent = old + percent;\n', '    }\n', '    \n', '    function deleteAddresses(uint num) public isOwner{\n', '        uint i = 0;\n', '        for(i = 0; i < addresses.length; i++){\n', '            if(i != num){\n', '                newAddr.push(addresses[i]);\n', '            }\n', '        }\n', '        addresses.length = 0;\n', '        addresses = newAddr;\n', '    }\n', '}']