['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', '/*\n', "    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\n", "    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\n", '    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\n', '    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\n', "    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\n", "    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\n", "    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\n", '              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\n', '             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\n', "          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\n", "        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\n", "       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\n", "      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\n", '     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\n', "    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\n", '   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\n', "    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\n", "       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\n", "          ...'..     .';;;;;;;;;;;;;;,,,'.\n", '                       ...............\n', '*/\n', '\n', '// https://github.com/trusttoken/smart-contracts\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/common/Initializable.sol\n', '\n', '// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/common/UpgradeableOwnable.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {Context} from "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '// import {Initializable} from "contracts/truefi/common/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ILoanToken.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface ILoanToken is IERC20 {\n', '    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\n', '\n', '    function borrower() external view returns (address);\n', '\n', '    function amount() external view returns (uint256);\n', '\n', '    function term() external view returns (uint256);\n', '\n', '    function apy() external view returns (uint256);\n', '\n', '    function start() external view returns (uint256);\n', '\n', '    function lender() external view returns (address);\n', '\n', '    function debt() external view returns (uint256);\n', '\n', '    function profit() external view returns (uint256);\n', '\n', '    function status() external view returns (Status);\n', '\n', '    function borrowerFee() external view returns (uint256);\n', '\n', '    function receivedAmount() external view returns (uint256);\n', '\n', '    function isLoanToken() external pure returns (bool);\n', '\n', '    function getParameters()\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function fund() external;\n', '\n', '    function withdraw(address _beneficiary) external;\n', '\n', '    function close() external;\n', '\n', '    function liquidate() external;\n', '\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function repay(address _sender, uint256 _amount) external;\n', '\n', '    function reclaim() external;\n', '\n', '    function allowTransfer(address account, bool _status) external;\n', '\n', '    function repaid() external view returns (uint256);\n', '\n', '    function balance() external view returns (uint256);\n', '\n', '    function value(uint256 _balance) external view returns (uint256);\n', '\n', '    function currencyToken() external view returns (IERC20);\n', '\n', '    function version() external pure returns (uint8);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueFiPool.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * TruePool is an ERC20 which represents a share of a pool\n', ' *\n', ' * This contract can be used to wrap opportunities to be compatible\n', ' * with TrueFi and allow users to directly opt-in through the TUSD contract\n', ' *\n', ' * Each TruePool is also a staking opportunity for TRU\n', ' */\n', 'interface ITrueFiPool is IERC20 {\n', '    /// @dev pool token (TUSD)\n', '    function currencyToken() external view returns (IERC20);\n', '\n', '    /// @dev stake token (TRU)\n', '    function stakeToken() external view returns (IERC20);\n', '\n', '    /**\n', '     * @dev join pool\n', '     * 1. Transfer TUSD from sender\n', '     * 2. Mint pool tokens based on value to sender\n', '     */\n', '    function join(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev exit pool\n', '     * 1. Transfer pool tokens from sender\n', '     * 2. Burn pool tokens\n', '     * 3. Transfer value of pool tokens in TUSD to sender\n', '     */\n', '    function exit(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev borrow from pool\n', '     * 1. Transfer TUSD to sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function borrow(uint256 amount, uint256 fee) external;\n', '\n', '    /**\n', '     * @dev join pool\n', '     * 1. Transfer TUSD from sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function repay(uint256 amount) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueLender.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ITrueLender {\n', '    function value() external view returns (uint256);\n', '\n', '    function distribute(\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueRatingAgency.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ITrueRatingAgency {\n', '    function getResults(address id)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function submit(address id) external;\n', '\n', '    function retract(address id) external;\n', '\n', '    function yes(address id, uint256 stake) external;\n', '\n', '    function no(address id, uint256 stake) external;\n', '\n', '    function withdraw(address id, uint256 stake) external;\n', '\n', '    function claim(address id, address voter) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/IStakingPool.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IStakingPool is IERC20 {\n', '    function stakeSupply() external view returns (uint256);\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function payFee(uint256 amount, uint256 endTime) external;\n', '}\n', '\n', '\n', '// Root file: contracts/truefi/TrueLender.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import {Ownable} from "contracts/truefi/common/UpgradeableOwnable.sol";\n', '// import {ILoanToken} from "contracts/truefi/interface/ILoanToken.sol";\n', '// import {ITrueFiPool} from "contracts/truefi/interface/ITrueFiPool.sol";\n', '// import {ITrueLender} from "contracts/truefi/interface/ITrueLender.sol";\n', '// import {ITrueRatingAgency} from "contracts/truefi/interface/ITrueRatingAgency.sol";\n', '// import {IStakingPool} from "contracts/truefi/interface/IStakingPool.sol";\n', '\n', '/**\n', ' * @title TrueLender v1.0\n', ' * @dev TrueFi Lending Strategy\n', ' * This contract implements the lending strategy for the TrueFi pool\n', ' * The strategy takes into account several parameters and consumes\n', ' * information from the prediction market in order to approve loans\n', ' *\n', ' * This strategy is conservative to avoid defaults.\n', ' * See: https://github.com/trusttoken/truefi-spec\n', ' *\n', ' * 1. Only approve loans which have the following inherent properties:\n', ' * - minAPY <= loanAPY <= maxAPY\n', ' * - minSize <= loanSize <= maxSize\n', ' * - minTerm <= loanTerm <= maxTerm\n', ' *\n', ' * 2. Only approve loans which have been rated in the prediction market under the conditions:\n', ' * - timeInMarket >= votingPeriod\n', ' * - stakedTRU > (participationFactor * loanSize)\n', ' * - 1 < ( interest * P(loan_repaid) - (loanSize * riskAversion * P(loan_defaults))\n', ' *\n', ' * Once a loan meets these requirements, fund() can be called to transfer\n', ' * funds from the pool to the LoanToken contract\n', ' */\n', 'contract TrueLender is ITrueLender, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    // ================ WARNING ==================\n', '    // ===== THIS CONTRACT IS INITIALIZABLE ======\n', '    // === STORAGE VARIABLES ARE DECLARED BELOW ==\n', '    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\n', '    // ========= IN STORAGE CORRUPTION ===========\n', '\n', '    mapping(address => bool) public allowedBorrowers;\n', '    ILoanToken[] _loans;\n', '\n', '    ITrueFiPool public pool;\n', '    IERC20 public currencyToken;\n', '    ITrueRatingAgency public ratingAgency;\n', '\n', '    uint256 private constant TOKEN_PRECISION_DIFFERENCE = 10**10;\n', '\n', '    // ===== Pool parameters =====\n', '\n', '    // bound on APY\n', '    uint256 public minApy;\n', '    uint256 public maxApy;\n', '\n', '    // How many votes in predction market\n', '    uint256 public participationFactor;\n', '\n', '    // How much worse is it to lose $1 TUSD than it is to gain $1 TUSD\n', '    uint256 public riskAversion;\n', '\n', '    // bound on min & max loan sizes\n', '    uint256 public minSize;\n', '    uint256 public maxSize;\n', '\n', '    // bound on min & max loan terms\n', '    uint256 public minTerm;\n', '    uint256 public maxTerm;\n', '\n', '    // minimum prediction market voting period\n', '    uint256 public votingPeriod;\n', '\n', '    // maximum amount of loans lender can handle at once\n', '    uint256 public maxLoans;\n', '\n', '    // implemented as an ERC20, will change after implementing stkPool\n', '    IStakingPool public stakingPool;\n', '\n', '    // ======= STORAGE DECLARATION END ============\n', '\n', '    /**\n', "     * @dev Emitted when a borrower's whitelist status changes\n", '     * @param who Address for which whitelist status has changed\n', '     * @param status New whitelist status\n', '     */\n', '    event Allowed(address indexed who, bool status);\n', '\n', '    /**\n', '     * @dev Emitted when APY bounds have changed\n', '     * @param minApy New minimum APY\n', '     * @param maxApy New maximum APY\n', '     */\n', '    event ApyLimitsChanged(uint256 minApy, uint256 maxApy);\n', '\n', '    /**\n', '     * @dev Emitted when participation factor changed\n', '     * @param participationFactor New participation factor\n', '     */\n', '    event ParticipationFactorChanged(uint256 participationFactor);\n', '\n', '    /**\n', '     * @dev Emitted when risk aversion changed\n', '     * @param riskAversion New risk aversion factor\n', '     */\n', '    event RiskAversionChanged(uint256 riskAversion);\n', '\n', '    /**\n', '     * @dev Emitted when the minimum voting period is changed\n', '     * @param votingPeriod New voting period\n', '     */\n', '    event VotingPeriodChanged(uint256 votingPeriod);\n', '\n', '    /**\n', '     * @dev Emitted when the loan size bounds are changed\n', '     * @param minSize New minimum loan size\n', '     * @param maxSize New maximum loan size\n', '     */\n', '    event SizeLimitsChanged(uint256 minSize, uint256 maxSize);\n', '\n', '    /**\n', '     * @dev Emitted when loan term bounds are changed\n', '     * @param minTerm New minimum loan term\n', '     * @param maxTerm New minimum loan term\n', '     */\n', '    event TermLimitsChanged(uint256 minTerm, uint256 maxTerm);\n', '\n', '    /**\n', '     * @dev Emitted when loans limit is changed\n', '     * @param maxLoans new maximum amount of loans\n', '     */\n', '    event LoansLimitChanged(uint256 maxLoans);\n', '\n', '    /**\n', '     * @dev Emitted when stakingPool address is changed\n', '     * @param pool new stakingPool address\n', '     */\n', '    event StakingPoolChanged(IStakingPool pool);\n', '\n', '    /**\n', '     * @dev Emitted when a loan is funded\n', '     * @param loanToken LoanToken contract which was funded\n', '     * @param amount Amount funded\n', '     */\n', '    event Funded(address indexed loanToken, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted when funds are reclaimed from the LoanToken contract\n', '     * @param loanToken LoanToken from which funds were reclaimed\n', '     * @param amount Amount repaid\n', '     */\n', '    event Reclaimed(address indexed loanToken, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted when rating agency contract is changed\n', '     * @param newRatingAgency Address of new rating agency\n', '     */\n', '    event RatingAgencyChanged(address newRatingAgency);\n', '\n', '    /**\n', '     * @dev Modifier for only lending pool\n', '     */\n', '    modifier onlyPool() {\n', '        require(msg.sender == address(pool), "TrueLender: Sender is not a pool");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initalize the contract with parameters\n', '     * @param _pool Lending pool address\n', '     * @param _ratingAgency Prediction market address\n', '     */\n', '    function initialize(\n', '        ITrueFiPool _pool,\n', '        ITrueRatingAgency _ratingAgency,\n', '        IStakingPool _stakingPool\n', '    ) public initializer {\n', '        Ownable.initialize();\n', '\n', '        pool = _pool;\n', '        currencyToken = _pool.currencyToken();\n', '        currencyToken.approve(address(_pool), uint256(-1));\n', '        ratingAgency = _ratingAgency;\n', '        stakingPool = _stakingPool;\n', '\n', '        minApy = 1000;\n', '        maxApy = 3000;\n', '        participationFactor = 10000;\n', '        riskAversion = 15000;\n', '        minSize = 1000000 ether;\n', '        maxSize = 10000000 ether;\n', '        minTerm = 182 days;\n', '        maxTerm = 3650 days;\n', '        votingPeriod = 7 days;\n', '\n', '        maxLoans = 100;\n', '    }\n', '\n', '    /**\n', '     * @dev set stake pool address\n', '     * @param newPool stake pool address to be set\n', '     */\n', '    function setStakingPool(IStakingPool newPool) public onlyOwner {\n', '        stakingPool = newPool;\n', '        emit StakingPoolChanged(newPool);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new bounds on loan size. Only owner can change parameters.\n', '     * @param min New minimum loan size\n', '     * @param max New maximum loan size\n', '     */\n', '    function setSizeLimits(uint256 min, uint256 max) external onlyOwner {\n', '        require(min > 0, "TrueLender: Minimal loan size cannot be 0");\n', '        require(max >= min, "TrueLender: Maximal loan size is smaller than minimal");\n', '        minSize = min;\n', '        maxSize = max;\n', '        emit SizeLimitsChanged(min, max);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new bounds on loan term length. Only owner can change parameters.\n', '     * @param min New minimum loan term\n', '     * @param max New maximum loan term\n', '     */\n', '    function setTermLimits(uint256 min, uint256 max) external onlyOwner {\n', '        require(max >= min, "TrueLender: Maximal loan term is smaller than minimal");\n', '        minTerm = min;\n', '        maxTerm = max;\n', '        emit TermLimitsChanged(min, max);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new bounds on loan APY. Only owner can change parameters.\n', '     * @param newMinApy New minimum loan APY\n', '     * @param newMaxApy New maximum loan APY\n', '     */\n', '    function setApyLimits(uint256 newMinApy, uint256 newMaxApy) external onlyOwner {\n', '        require(newMaxApy >= newMinApy, "TrueLender: Maximal APY is smaller than minimal");\n', '        minApy = newMinApy;\n', '        maxApy = newMaxApy;\n', '        emit ApyLimitsChanged(newMinApy, newMaxApy);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new minimum voting period in credit rating market.\n', '     * Only owner can change parameters\n', '     * @param newVotingPeriod new minimum voting period\n', '     */\n', '    function setVotingPeriod(uint256 newVotingPeriod) external onlyOwner {\n', '        votingPeriod = newVotingPeriod;\n', '        emit VotingPeriodChanged(newVotingPeriod);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new participation factor. Only owner can change parameters.\n', '     * @param newParticipationFactor New participation factor.\n', '     */\n', '    function setParticipationFactor(uint256 newParticipationFactor) external onlyOwner {\n', '        participationFactor = newParticipationFactor;\n', '        emit ParticipationFactorChanged(newParticipationFactor);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new risk aversion factor. Only owner can change parameters.\n', '     * @param newRiskAversion New risk aversion factor\n', '     */\n', '    function setRiskAversion(uint256 newRiskAversion) external onlyOwner {\n', '        riskAversion = newRiskAversion;\n', '        emit RiskAversionChanged(newRiskAversion);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new loans limit. Only owner can change parameters.\n', '     * @param newLoansLimit New loans limit\n', '     */\n', '    function setLoansLimit(uint256 newLoansLimit) external onlyOwner {\n', '        maxLoans = newLoansLimit;\n', '        emit LoansLimitChanged(maxLoans);\n', '    }\n', '\n', '    /**\n', '     * @dev Set new rating agency. Only owner can change parameters.\n', '     * @param newRatingAgency New rating agency.\n', '     */\n', '    function setRatingAgency(ITrueRatingAgency newRatingAgency) external onlyOwner {\n', '        ratingAgency = newRatingAgency;\n', '        emit RatingAgencyChanged(address(newRatingAgency));\n', '    }\n', '\n', '    /**\n', '     * @dev Get currently funded loans\n', '     * @return result Array of loans currently funded\n', '     */\n', '    function loans() public view returns (ILoanToken[] memory result) {\n', '        result = _loans;\n', '    }\n', '\n', '    /**\n', '     * @dev Fund a loan which meets the strategy requirements\n', '     * @param loanToken LoanToken to fund\n', '     */\n', '    function fund(ILoanToken loanToken) external {\n', '        require(loanToken.borrower() == msg.sender, "TrueLender: Sender is not borrower");\n', '        require(loanToken.isLoanToken(), "TrueLender: Only LoanTokens can be funded");\n', '        require(loanToken.currencyToken() == currencyToken, "TrueLender: Only the same currency LoanTokens can be funded");\n', '        require(_loans.length < maxLoans, "TrueLender: Loans number has reached the limit");\n', '\n', '        (uint256 amount, uint256 apy, uint256 term) = loanToken.getParameters();\n', '        uint256 receivedAmount = loanToken.receivedAmount();\n', '        (uint256 start, uint256 no, uint256 yes) = ratingAgency.getResults(address(loanToken));\n', '\n', '        require(loanSizeWithinBounds(amount), "TrueLender: Loan size is out of bounds");\n', '        require(loanTermWithinBounds(term), "TrueLender: Loan term is out of bounds");\n', '        require(loanIsAttractiveEnough(apy), "TrueLender: APY is out of bounds");\n', '        require(votingLastedLongEnough(start), "TrueLender: Voting time is below minimum");\n', '        require(votesThresholdReached(amount, yes), "TrueLender: Not enough votes given for the loan");\n', '        require(loanIsCredible(apy, term, yes, no), "TrueLender: Loan risk is too high");\n', '\n', '        _loans.push(loanToken);\n', '        pool.borrow(amount, amount.sub(receivedAmount));\n', '        currencyToken.approve(address(loanToken), receivedAmount);\n', '        loanToken.fund();\n', '\n', '        pool.approve(address(stakingPool), pool.balanceOf(address(this)));\n', '        stakingPool.payFee(pool.balanceOf(address(this)), block.timestamp.add(term));\n', '\n', '        emit Funded(address(loanToken), receivedAmount);\n', '    }\n', '\n', '    /**\n', '     * @dev Temporary fix for old LoanTokens with incorrect value calculation\n', '     * @param loan Loan to calculate value for\n', '     * @return value of a given loan\n', '     */\n', '    function loanValue(ILoanToken loan) public view returns (uint256) {\n', '        uint256 _balance = loan.balanceOf(address(this));\n', '        if (_balance == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 passed = block.timestamp.sub(loan.start());\n', '        if (passed > loan.term()) {\n', '            passed = loan.term();\n', '        }\n', '\n', '        uint256 helper = loan.amount().mul(loan.apy()).mul(passed).mul(_balance);\n', '        // assume year is 365 days\n', '        uint256 interest = helper.div(365 days).div(10000).div(loan.debt());\n', '\n', '        return loan.amount().mul(_balance).div(loan.debt()).add(interest);\n', '    }\n', '\n', '    /**\n', '     * @dev Loop through loan tokens and calculate theoretical value of all loans\n', '     * There should never be too many loans in the pool to run out of gas\n', '     * @return Theoretical value of all the loans funded by this strategy\n', '     */\n', '    function value() external override view returns (uint256) {\n', '        uint256 totalValue;\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            totalValue = totalValue.add(loanValue(_loans[index]));\n', '        }\n', '        return totalValue;\n', '    }\n', '\n', '    /**\n', '     * @dev For settled loans, redeem LoanTokens for underlying funds\n', '     * @param loanToken Loan to reclaim capital from (must be previously funded)\n', '     */\n', '    function reclaim(ILoanToken loanToken) external {\n', '        require(loanToken.isLoanToken(), "TrueLender: Only LoanTokens can be used to reclaimed");\n', '\n', '        ILoanToken.Status status = loanToken.status();\n', '        require(status >= ILoanToken.Status.Settled, "TrueLender: LoanToken is not closed yet");\n', '\n', '        if (status != ILoanToken.Status.Settled) {\n', '            require(msg.sender == owner(), "TrueLender: Only owner can reclaim from defaulted loan");\n', '        }\n', '\n', '        // call redeem function on LoanToken\n', '        uint256 balanceBefore = currencyToken.balanceOf(address(this));\n', '        loanToken.redeem(loanToken.balanceOf(address(this)));\n', '        uint256 balanceAfter = currencyToken.balanceOf(address(this));\n', '\n', '        // gets reclaimed amount and pays back to pool\n', '        uint256 fundsReclaimed = balanceAfter.sub(balanceBefore);\n', '        pool.repay(fundsReclaimed);\n', '\n', '        // remove loan from loan array\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            if (_loans[index] == loanToken) {\n', '                _loans[index] = _loans[_loans.length - 1];\n', '                _loans.pop();\n', '\n', '                emit Reclaimed(address(loanToken), fundsReclaimed);\n', '                return;\n', '            }\n', '        }\n', '        // If we reach this, it means loanToken was not present in _loans array\n', '        // This prevents invalid loans from being reclaimed\n', '        revert("TrueLender: This loan has not been funded by the lender");\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw a basket of tokens held by the pool\n', '     * When exiting the pool, the pool contract calls this function\n', '     * to withdraw a fraction of all the loans held by the pool\n', "     * Loop through recipient's share of LoanTokens and calculate versus total per loan.\n", '     * There should never be too many loans in the pool to run out of gas\n', '     *\n', '     * @param recipient Recipient of basket\n', '     * @param numerator Numerator of fraction to withdraw\n', '     * @param denominator Denominator of fraction to withdraw\n', '     */\n', '    function distribute(\n', '        address recipient,\n', '        uint256 numerator,\n', '        uint256 denominator\n', '    ) external override onlyPool {\n', '        for (uint256 index = 0; index < _loans.length; index++) {\n', '            _loans[index].transfer(recipient, numerator.mul(_loans[index].balanceOf(address(this))).div(denominator));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan is within APY bounds\n', '     * @param apy APY of loan\n', '     * @return Whether a loan is within APY bounds\n', '     */\n', '    function loanIsAttractiveEnough(uint256 apy) public view returns (bool) {\n', '        return apy >= minApy && apy <= maxApy;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan has been in the credit market long enough\n', '     * @param start Timestamp at which rating began\n', '     * @return Whether a loan has been rated for long enough\n', '     */\n', '    function votingLastedLongEnough(uint256 start) public view returns (bool) {\n', '        return start.add(votingPeriod) <= block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan is within size bounds\n', '     * @param amount Size of loan\n', '     * @return Whether a loan is within size bounds\n', '     */\n', '    function loanSizeWithinBounds(uint256 amount) public view returns (bool) {\n', '        return amount >= minSize && amount <= maxSize;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if loan term is within term bounds\n', '     * @param term Term of loan\n', '     * @return Whether loan term is within term bounds\n', '     */\n', '    function loanTermWithinBounds(uint256 term) public view returns (bool) {\n', '        return term >= minTerm && term <= maxTerm;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a loan is within APY bounds\n', '     * Minimum absolute value of yes votes, rather than ratio of yes to no\n', '     * @param amount Size of loan\n', '     * @param yesVotes Number of yes votes\n', '     * @return Whether a loan has reached the required voting threshold\n', '     */\n', '    function votesThresholdReached(uint256 amount, uint256 yesVotes) public view returns (bool) {\n', '        return amount.mul(participationFactor) <= yesVotes.mul(10000).mul(TOKEN_PRECISION_DIFFERENCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Use APY and term of loan to check expected value of a loan\n', '     * Expected value = profit - (default_loss * (no / yes))\n', '     * e.g. riskAversion = 10,000 => expected value of 1\n', '     * @param apy APY of loan\n', '     * @param term Term length of loan\n', '     * @param yesVotes Number of YES votes in credit market\n', '     * @param noVotes Number of NO votes in credit market\n', '     */\n', '    function loanIsCredible(\n', '        uint256 apy,\n', '        uint256 term,\n', '        uint256 yesVotes,\n', '        uint256 noVotes\n', '    ) public view returns (bool) {\n', '        return apy.mul(term).mul(yesVotes).div(365 days) >= noVotes.mul(riskAversion);\n', '    }\n', '}']