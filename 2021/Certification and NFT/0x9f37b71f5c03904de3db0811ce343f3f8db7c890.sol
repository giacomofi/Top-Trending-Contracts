['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', "    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    // uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return a / b;\n', '  }\n', '\n', '  /**\n', '  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '    c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/Ownable.sol\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner;\n', '\n', '\n', '  event OwnershipRenounced(address indexed previousOwner);\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() public {\n', '    owner = msg.sender;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to relinquish control of the contract.\n', '   */\n', '  function renounceOwnership() public onlyOwner {\n', '    emit OwnershipRenounced(owner);\n', '    owner = address(0);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address _newOwner) public onlyOwner {\n', '    _transferOwnership(_newOwner);\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers control of the contract to a newOwner.\n', '   * @param _newOwner The address to transfer ownership to.\n', '   */\n', '  function _transferOwnership(address _newOwner) internal {\n', '    require(_newOwner != address(0));\n', '    emit OwnershipTransferred(owner, _newOwner);\n', '    owner = _newOwner;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol\n', '\n', '/**\n', ' * @title ERC20Basic\n', ' * @dev Simpler version of ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/179\n', ' */\n', 'contract ERC20Basic {\n', '  function totalSupply() public view returns (uint256);\n', '  function balanceOf(address who) public view returns (uint256);\n', '  function transfer(address to, uint256 value) public returns (bool);\n', '  event Transfer(address indexed from, address indexed to, uint256 value);\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol\n', '\n', '/**\n', ' * @title Basic token\n', ' * @dev Basic version of StandardToken, with no allowances.\n', ' */\n', 'contract BasicToken is ERC20Basic {\n', '  using SafeMath for uint256;\n', '\n', '  mapping(address => uint256) balances;\n', '\n', '  uint256 totalSupply_;\n', '\n', '  /**\n', '  * @dev total number of tokens in existence\n', '  */\n', '  function totalSupply() public view returns (uint256) {\n', '    return totalSupply_;\n', '  }\n', '\n', '  /**\n', '  * @dev transfer token for a specified address\n', '  * @param _to The address to transfer to.\n', '  * @param _value The amount to be transferred.\n', '  */\n', '  function transfer(address _to, uint256 _value) public returns (bool) {\n', '    require(_to != address(0));\n', '    require(_value <= balances[msg.sender]);\n', '\n', '    balances[msg.sender] = balances[msg.sender].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    emit Transfer(msg.sender, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '  * @dev Gets the balance of the specified address.\n', '  * @param _owner The address to query the the balance of.\n', '  * @return An uint256 representing the amount owned by the passed address.\n', '  */\n', '  function balanceOf(address _owner) public view returns (uint256) {\n', '    return balances[_owner];\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol\n', '\n', '/**\n', ' * @title Burnable Token\n', ' * @dev Token that can be irreversibly burned (destroyed).\n', ' */\n', 'contract BurnableToken is BasicToken {\n', '\n', '  event Burn(address indexed burner, uint256 value);\n', '\n', '  /**\n', '   * @dev Burns a specific amount of tokens.\n', '   * @param _value The amount of token to be burned.\n', '   */\n', '  function burn(uint256 _value) public {\n', '    _burn(msg.sender, _value);\n', '  }\n', '\n', '  function _burn(address _who, uint256 _value) internal {\n', '    require(_value <= balances[_who]);\n', '    // no need to require value <= totalSupply, since that would imply the\n', "    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n", '\n', '    balances[_who] = balances[_who].sub(_value);\n', '    totalSupply_ = totalSupply_.sub(_value);\n', '    emit Burn(_who, _value);\n', '    emit Transfer(_who, address(0), _value);\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n', '\n', '/**\n', ' * @title ERC20 interface\n', ' * @dev see https://github.com/ethereum/EIPs/issues/20\n', ' */\n', 'contract ERC20 is ERC20Basic {\n', '  function allowance(address owner, address spender)\n', '    public view returns (uint256);\n', '\n', '  function transferFrom(address from, address to, uint256 value)\n', '    public returns (bool);\n', '\n', '  function approve(address spender, uint256 value) public returns (bool);\n', '  event Approval(\n', '    address indexed owner,\n', '    address indexed spender,\n', '    uint256 value\n', '  );\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/DetailedERC20.sol\n', '\n', '/**\n', ' * @title DetailedERC20 token\n', ' * @dev The decimals are only for visualization purposes.\n', ' * All the operations are done using the smallest and indivisible token unit,\n', ' * just as on Ethereum all the operations are done in wei.\n', ' */\n', 'contract DetailedERC20 is ERC20 {\n', '  string public name;\n', '  string public symbol;\n', '  uint8 public decimals;\n', '\n', '  constructor(string _name, string _symbol, uint8 _decimals) public {\n', '    name = _name;\n', '    symbol = _symbol;\n', '    decimals = _decimals;\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol\n', '\n', '/**\n', ' * @title Standard ERC20 token\n', ' *\n', ' * @dev Implementation of the basic standard token.\n', ' * @dev https://github.com/ethereum/EIPs/issues/20\n', ' * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n', ' */\n', 'contract StandardToken is ERC20, BasicToken {\n', '\n', '  mapping (address => mapping (address => uint256)) internal allowed;\n', '\n', '\n', '  /**\n', '   * @dev Transfer tokens from one address to another\n', '   * @param _from address The address which you want to send tokens from\n', '   * @param _to address The address which you want to transfer to\n', '   * @param _value uint256 the amount of tokens to be transferred\n', '   */\n', '  function transferFrom(\n', '    address _from,\n', '    address _to,\n', '    uint256 _value\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    require(_to != address(0));\n', '    require(_value <= balances[_from]);\n', '    require(_value <= allowed[_from][msg.sender]);\n', '\n', '    balances[_from] = balances[_from].sub(_value);\n', '    balances[_to] = balances[_to].add(_value);\n', '    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '    emit Transfer(_from, _to, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n', '   *\n', '   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n', '   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n', "   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n", '   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _value The amount of tokens to be spent.\n', '   */\n', '  function approve(address _spender, uint256 _value) public returns (bool) {\n', '    allowed[msg.sender][_spender] = _value;\n', '    emit Approval(msg.sender, _spender, _value);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n', '   * @param _owner address The address which owns the funds.\n', '   * @param _spender address The address which will spend the funds.\n', '   * @return A uint256 specifying the amount of tokens still available for the spender.\n', '   */\n', '  function allowance(\n', '    address _owner,\n', '    address _spender\n', '   )\n', '    public\n', '    view\n', '    returns (uint256)\n', '  {\n', '    return allowed[_owner][_spender];\n', '  }\n', '\n', '  /**\n', '   * @dev Increase the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To increment\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _addedValue The amount of tokens to increase the allowance by.\n', '   */\n', '  function increaseApproval(\n', '    address _spender,\n', '    uint _addedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    allowed[msg.sender][_spender] = (\n', '      allowed[msg.sender][_spender].add(_addedValue));\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n', '   *\n', '   * approve should be called when allowed[_spender] == 0. To decrement\n', '   * allowed value is better to use this function to avoid 2 calls (and wait until\n', '   * the first transaction is mined)\n', '   * From MonolithDAO Token.sol\n', '   * @param _spender The address which will spend the funds.\n', '   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n', '   */\n', '  function decreaseApproval(\n', '    address _spender,\n', '    uint _subtractedValue\n', '  )\n', '    public\n', '    returns (bool)\n', '  {\n', '    uint oldValue = allowed[msg.sender][_spender];\n', '    if (_subtractedValue > oldValue) {\n', '      allowed[msg.sender][_spender] = 0;\n', '    } else {\n', '      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n', '    }\n', '    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n', '    return true;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/token/ERC20/MintableToken.sol\n', '\n', '/**\n', ' * @title Mintable token\n', ' * @dev Simple ERC20 Token example, with mintable token creation\n', ' * @dev Issue: * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/120\n', ' * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n', ' */\n', 'contract MintableToken is StandardToken, Ownable {\n', '  event Mint(address indexed to, uint256 amount);\n', '  event MintFinished();\n', '\n', '  bool public mintingFinished = false;\n', '\n', '\n', '  modifier canMint() {\n', '    require(!mintingFinished);\n', '    _;\n', '  }\n', '\n', '  modifier hasMintPermission() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to mint tokens\n', '   * @param _to The address that will receive the minted tokens.\n', '   * @param _amount The amount of tokens to mint.\n', '   * @return A boolean that indicates if the operation was successful.\n', '   */\n', '  function mint(\n', '    address _to,\n', '    uint256 _amount\n', '  )\n', '    hasMintPermission\n', '    canMint\n', '    public\n', '    returns (bool)\n', '  {\n', '    totalSupply_ = totalSupply_.add(_amount);\n', '    balances[_to] = balances[_to].add(_amount);\n', '    emit Mint(_to, _amount);\n', '    emit Transfer(address(0), _to, _amount);\n', '    return true;\n', '  }\n', '\n', '  /**\n', '   * @dev Function to stop minting new tokens.\n', '   * @return True if the operation was successful.\n', '   */\n', '  function finishMinting() onlyOwner canMint public returns (bool) {\n', '    mintingFinished = true;\n', '    emit MintFinished();\n', '    return true;\n', '  }\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/introspection/ERC165.sol\n', '\n', '/**\n', ' * @title ERC165\n', ' * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md\n', ' */\n', 'interface ERC165 {\n', '\n', '  /**\n', '   * @notice Query if a contract implements an interface\n', '   * @param _interfaceId The interface identifier, as specified in ERC-165\n', '   * @dev Interface identification is specified in ERC-165. This function\n', '   * uses less than 30,000 gas.\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool);\n', '}\n', '\n', '// File: contracts/openzeppelin-origin/introspection/SupportsInterfaceWithLookup.sol\n', '\n', '/**\n', ' * @title SupportsInterfaceWithLookup\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Implements ERC165 using a lookup table.\n', ' */\n', 'contract SupportsInterfaceWithLookup is ERC165 {\n', '\n', '  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;\n', '  /**\n', '   * 0x01ffc9a7 ===\n', "   *   bytes4(keccak256('supportsInterface(bytes4)'))\n", '   */\n', '\n', '  /**\n', "   * @dev a mapping of interface id to whether or not it's supported\n", '   */\n', '  mapping(bytes4 => bool) internal supportedInterfaces;\n', '\n', '  /**\n', '   * @dev A contract implementing SupportsInterfaceWithLookup\n', '   * implement ERC165 itself\n', '   */\n', '  constructor()\n', '    public\n', '  {\n', '    _registerInterface(InterfaceId_ERC165);\n', '  }\n', '\n', '  /**\n', '   * @dev implement supportsInterface(bytes4) using a lookup table\n', '   */\n', '  function supportsInterface(bytes4 _interfaceId)\n', '    external\n', '    view\n', '    returns (bool)\n', '  {\n', '    return supportedInterfaces[_interfaceId];\n', '  }\n', '\n', '  /**\n', '   * @dev private method for registering an interface\n', '   */\n', '  function _registerInterface(bytes4 _interfaceId)\n', '    internal\n', '  {\n', '    require(_interfaceId != 0xffffffff);\n', '    supportedInterfaces[_interfaceId] = true;\n', '  }\n', '}\n', '\n', '// File: contracts/ERC2980/ERC2980.sol\n', '\n', 'interface ERC2980 {\n', '  \n', '  /// @dev This emits when funds are reassigned\n', '  event FundsReassigned(address from, address to, uint256 amount);\n', '\n', '  /// @dev This emits when funds are revoked\n', '  event FundsRevoked(address from, uint256 amount);\n', '\n', '  /// @dev This emits when an address is frozen\n', '  event FundsFrozen(address target);\n', '\n', '  /**\n', '  * @dev getter to determine if address is in frozenlist\n', '  */\n', '  function frozenlist(address _operator) external view returns (bool);\n', '\n', '  /**\n', '  * @dev getter to determine if address is in whitelist\n', '  */\n', '  function whitelist(address _operator) external view returns (bool);\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/Roles.sol\n', '\n', '/**\n', ' * @title Roles\n', ' * @author Francisco Giordano (@frangio)\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' *      See RBAC.sol for example usage.\n', ' */\n', 'library Roles {\n', '  struct Role {\n', '    mapping (address => bool) bearer;\n', '  }\n', '\n', '  /**\n', '   * @dev give an address access to this role\n', '   */\n', '  function add(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = true;\n', '  }\n', '\n', '  /**\n', "   * @dev remove an address' access to this role\n", '   */\n', '  function remove(Role storage role, address addr)\n', '    internal\n', '  {\n', '    role.bearer[addr] = false;\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * // reverts\n', '   */\n', '  function check(Role storage role, address addr)\n', '    view\n', '    internal\n', '  {\n', '    require(has(role, addr));\n', '  }\n', '\n', '  /**\n', '   * @dev check if an address has this role\n', '   * @return bool\n', '   */\n', '  function has(Role storage role, address addr)\n', '    view\n', '    internal\n', '    returns (bool)\n', '  {\n', '    return role.bearer[addr];\n', '  }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol\n', '\n', '/**\n', ' * @title RBAC (Role-Based Access Control)\n', ' * @author Matt Condon (@Shrugs)\n', ' * @dev Stores and provides setters and getters for roles and addresses.\n', ' * @dev Supports unlimited numbers of roles and addresses.\n', ' * @dev See //contracts/mocks/RBACMock.sol for an example of usage.\n', ' * This RBAC method uses strings to key roles. It may be beneficial\n', ' *  for you to write your own implementation of this interface using Enums or similar.\n', " * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,\n", ' *  to avoid typos.\n', ' */\n', 'contract RBAC {\n', '  using Roles for Roles.Role;\n', '\n', '  mapping (string => Roles.Role) private roles;\n', '\n', '  event RoleAdded(address addr, string roleName);\n', '  event RoleRemoved(address addr, string roleName);\n', '\n', '  /**\n', '   * @dev reverts if addr does not have role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  function checkRole(address addr, string roleName)\n', '    view\n', '    public\n', '  {\n', '    roles[roleName].check(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev determine if addr has role\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   * @return bool\n', '   */\n', '  function hasRole(address addr, string roleName)\n', '    view\n', '    public\n', '    returns (bool)\n', '  {\n', '    return roles[roleName].has(addr);\n', '  }\n', '\n', '  /**\n', '   * @dev add a role to an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function addRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].add(addr);\n', '    emit RoleAdded(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev remove a role from an address\n', '   * @param addr address\n', '   * @param roleName the name of the role\n', '   */\n', '  function removeRole(address addr, string roleName)\n', '    internal\n', '  {\n', '    roles[roleName].remove(addr);\n', '    emit RoleRemoved(addr, roleName);\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a single role (uses msg.sender as addr)\n', '   * @param roleName the name of the role\n', '   * // reverts\n', '   */\n', '  modifier onlyRole(string roleName)\n', '  {\n', '    checkRole(msg.sender, roleName);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)\n', '   * @param roleNames the names of the roles to scope access to\n', '   * // reverts\n', '   *\n', '   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this\n', '   *  see: https://github.com/ethereum/solidity/issues/2467\n', '   */\n', '  // modifier onlyRoles(string[] roleNames) {\n', '  //     bool hasAnyRole = false;\n', '  //     for (uint8 i = 0; i < roleNames.length; i++) {\n', '  //         if (hasRole(msg.sender, roleNames[i])) {\n', '  //             hasAnyRole = true;\n', '  //             break;\n', '  //         }\n', '  //     }\n', '\n', '  //     require(hasAnyRole);\n', '\n', '  //     _;\n', '  // }\n', '}\n', '\n', '// File: contracts/ERC2980/Issuable.sol\n', '\n', '/**\n', ' * @title Issuable\n', ' * @dev The Issuable contract defines the issuer role who can perform certain kind of actions\n', ' * even if he is not the owner.\n', ' * An issuer can transfer his role to a new address.\n', ' */\n', 'contract Issuable is Ownable, RBAC {\n', '  string public constant ROLE_ISSUER = "issuer";\n', '\n', '  /**\n', "   * @dev Throws if called by any account that's not a issuer.\n", '   */\n', '  modifier onlyIssuer() {\n', "    require(isIssuer(msg.sender), 'Issuable: caller is not the issuer');\n", '    _;\n', '  }\n', '\n', '  modifier onlyOwnerOrIssuer() {\n', "    require(msg.sender == owner || isIssuer(msg.sender), 'Issuable: caller is not the issuer or the owner');\n", '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address has issuer role\n', '   */\n', '  function isIssuer(address _addr) public view returns (bool) {\n', '    return hasRole(_addr, ROLE_ISSUER);\n', '  }\n', '\n', '  /**\n', '   * @dev add a new issuer address\n', '   * @param _operator address\n', '   * @return true if the address was not an issuer, false if the address was already an issuer\n', '   */\n', '  function addIssuer(address _operator) public onlyOwner {\n', '    addRole(_operator, ROLE_ISSUER);\n', '  }\n', '\n', '    /**\n', '   * @dev remove an address from issuers\n', '   * @param _operator address\n', '   * @return true if the address has been removed from issuers,\n', "   * false if the address wasn't in the issuer list in the first place\n", '   */\n', '  function removeIssuer(address _operator) public onlyOwner {\n', '    removeRole(_operator, ROLE_ISSUER);\n', '  }\n', '\n', '  /**\n', '   * @dev Allows the current issuer to transfer his role to a newIssuer.\n', '   * @param _newIssuer The address to transfer the issuer role to.\n', '   */\n', '  function transferIssuer(address _newIssuer) public onlyIssuer {\n', '    require(_newIssuer != address(0));\n', '    removeRole(msg.sender, ROLE_ISSUER);\n', '    addRole(_newIssuer, ROLE_ISSUER);\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/Frozenlist.sol\n', '\n', '/**\n', ' * @title Frozenlist\n', ' * @dev The Frozenlist contract has a frozen list of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', ' */\n', 'contract Frozenlist is Issuable {\n', '\n', '  event FundsFrozen(address target);\n', '\n', '  string public constant ROLE_FROZENLIST = "frozenlist";\n', '\n', '  /**\n', '   * @dev Throws if operator is frozen.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfNotFrozen(address _operator) {\n', '    require(!hasRole(_operator, ROLE_FROZENLIST), "Account frozen");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the frozenlist\n', '   * @param _operator address\n', '   * @return true if the address was added to the frozenlist, false if the address was already in the frozenlist\n', '   */\n', '  function addAddressToFrozenlist(address _operator) public onlyIssuer {\n', '    addRole(_operator, ROLE_FROZENLIST);\n', '    emit FundsFrozen(_operator);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in frozenlist\n', '   */\n', '  function frozenlist(address _operator) public view returns (bool) {\n', '    return hasRole(_operator, ROLE_FROZENLIST);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the frozenlist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the frozenlist,\n', '   * false if all addresses were already in the frozenlist\n', '   */\n', '  function addAddressesToFrozenlist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToFrozenlist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the frozenlist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the frozenlist,\n', "   * false if the address wasn't in the frozenlist in the first place\n", '   */\n', '  function removeAddressFromFrozenlist(address _operator) public onlyIssuer {\n', '    removeRole(_operator, ROLE_FROZENLIST);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the frozenlist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the frozenlist,\n', "   * false if all addresses weren't in the frozenlist in the first place\n", '   */\n', '  function removeAddressesFromFrozenlist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromFrozenlist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/Whitelist.sol\n', '\n', '/**\n', ' * @title Whitelist\n', ' * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.\n', ' * This simplifies the implementation of "user permissions".\n', '    By default whitelist in not enabled.\n', ' */\n', 'contract Whitelist is Issuable {\n', '  string public constant ROLE_WHITELISTED = "whitelist";\n', '  bool public whitelistEnabled;\n', '\n', '  constructor(bool enableWhitelist)\n', '    public {\n', '      whitelistEnabled = enableWhitelist;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if operator is not whitelisted and whitelist is enabled.\n', '   * @param _operator address\n', '   */\n', '  modifier onlyIfWhitelisted(address _operator) {\n', '    if(whitelistEnabled) {\n', '      checkRole(_operator, ROLE_WHITELISTED);\n', '    }\n', '    _;\n', '  }\n', '\n', '  function enableWhitelist() public onlyOwner {\n', '    whitelistEnabled = true;\n', '  }\n', '\n', '  function disableWhitelist() public onlyOwner {\n', '    whitelistEnabled = false;\n', '  }\n', '\n', '  /**\n', '   * @dev add an address to the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was added to the whitelist, false if the address was already in the whitelist\n', '   */\n', '  function addAddressToWhitelist(address _operator) public onlyIssuer {\n', '    addRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev getter to determine if address is in whitelist\n', '   */\n', '  function whitelist(address _operator) public view returns (bool) {\n', '    return hasRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev add addresses to the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was added to the whitelist,\n', '   * false if all addresses were already in the whitelist\n', '   */\n', '  function addAddressesToWhitelist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      addAddressToWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev remove an address from the whitelist\n', '   * @param _operator address\n', '   * @return true if the address was removed from the whitelist,\n', "   * false if the address wasn't in the whitelist in the first place\n", '   */\n', '  function removeAddressFromWhitelist(address _operator) public onlyIssuer {\n', '    removeRole(_operator, ROLE_WHITELISTED);\n', '  }\n', '\n', '  /**\n', '   * @dev remove addresses from the whitelist\n', '   * @param _operators addresses\n', '   * @return true if at least one address was removed from the whitelist,\n', "   * false if all addresses weren't in the whitelist in the first place\n", '   */\n', '  function removeAddressesFromWhitelist(address[] _operators) public onlyIssuer {\n', '    for (uint256 i = 0; i < _operators.length; i++) {\n', '      removeAddressFromWhitelist(_operators[i]);\n', '    }\n', '  }\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/BasicSecurityToken.sol\n', '\n', 'contract BasicSecurityToken is SupportsInterfaceWithLookup, ERC2980, Ownable, Issuable, DetailedERC20, MintableToken, BurnableToken, Frozenlist, Whitelist {\n', '\n', '    bytes4 internal constant InterfaceId_BasicSecurityToken = 0x4d1e390c;\n', '    /**\n', '    * 0x4d1e390c ===\n', "    *   bytes4(keccak256('revoke(address)')) ^\n", "    *   bytes4(keccak256('reassign(address,address)')) ^\n", "    *   bytes4(keccak256('frozenlist(address)'))\n", '    */\n', '\n', '    constructor(string memory name, string memory symbol, bool enableWhitelist)\n', '    Ownable()\n', '    DetailedERC20(name, symbol, 0)\n', '    Whitelist(enableWhitelist)\n', '    public {\n', '        _registerInterface(InterfaceId_BasicSecurityToken);\n', '        addIssuer(owner);\n', '        if(enableWhitelist) {\n', '            addAddressToWhitelist(owner);\n', '        }\n', '    }\n', '\n', '    //Modifiers\n', '\n', '    modifier onlyOwner() {\n', "        require(msg.sender == owner, 'Ownable: caller is not the owner');\n", '        _;\n', '    }\n', '    \n', '    //Public functions (place the view and pure functions last)\n', '\n', '    function mint(address account, uint256 amount) public onlyOwner onlyIfNotFrozen(account) onlyIfWhitelisted(account) returns (bool) {\n', '        super.mint(account, amount);\n', '        return true;\n', '    }\n', '\n', '    function burn(uint256 amount) public onlyIfNotFrozen(msg.sender) {\n', '        super._burn(msg.sender, amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public onlyOwner onlyIfNotFrozen(account) {\n', '        super._burn(account, amount);\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public onlyIfNotFrozen(msg.sender) onlyIfNotFrozen(recipient) onlyIfWhitelisted(recipient) returns (bool) {\n', '        require(super.transfer(recipient, amount), "Transfer failed");\n', '\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public onlyIfNotFrozen(sender) onlyIfNotFrozen(recipient) onlyIfWhitelisted(recipient) returns (bool) {\n', '        require(super.transferFrom(sender, recipient, amount), "Transfer failed");\n', '\n', '        return true;\n', '    }\n', '\n', '    function reassign(address from, address to) public onlyIssuer {\n', '        uint256 fundsReassigned = balanceOf(from);\n', '        _transfer(from, to, fundsReassigned);\n', '\n', '        emit FundsReassigned(from, to, fundsReassigned);\n', '    }\n', '\n', '    function revoke(address from) public onlyIssuer {\n', '        uint256 fundsRevoked = balanceOf(from);\n', '        _transfer(from, msg.sender, fundsRevoked);\n', '\n', '        emit FundsRevoked(from, fundsRevoked);\n', '    }\n', '\n', '      function transferOwnership(address _newOwner) public onlyOwner {\n', '        if(isIssuer(owner)) {\n', '            if(whitelistEnabled) {\n', '                removeAddressFromWhitelist(owner);\n', '                addAddressToWhitelist(_newOwner);\n', '            }\n', '            transferIssuer(_newOwner);\n', '        }\n', '        super.transferOwnership(_newOwner);\n', '    }\n', '\n', '      function renounceOwnership() public onlyOwner {        \n', '        if(whitelistEnabled) {\n', '            removeAddressFromWhitelist(owner);\n', '        }\n', '        removeIssuer(owner);\n', '        super.renounceOwnership();\n', '    }\n', '\n', '    //Internal functions\n', '\n', '    function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n', '        require(_value <= balances[_from]);\n', '        require(_to != address(0));\n', '\n', '        balances[_from] = balances[_from].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    //Private functions\n', '\n', '}\n', '\n', '// File: contracts/ERC2980/BasicSecurityTokenWithDecimals.sol\n', '\n', 'contract BasicSecurityTokenWithDecimals is BasicSecurityToken {\n', '\n', '    bytes4 internal constant InterfaceId_BasicSecurityTokenWithDecimals = 0x7c22dc6b;\n', '    /**\n', '    * 0x7c22dc6b ===\n', "    *   bytes4(keccak256('decimals()')) ^\n", "    *   bytes4(keccak256('revoke(address)')) ^\n", "    *   bytes4(keccak256('reassign(address,address)')) ^\n", "    *   bytes4(keccak256('frozenlist(address)'))\n", '    */\n', '\n', '    constructor(string memory name, string memory symbol, uint8 _decimals, bool enableWhitelist)\n', '    BasicSecurityToken(name, symbol, enableWhitelist)\n', '    public {\n', '        _registerInterface(InterfaceId_BasicSecurityTokenWithDecimals);\n', '        decimals = _decimals;\n', '    }\n', '}\n', '\n', '// File: contracts/NokuPricingPlan.sol\n', '\n', '/**\n', '* @dev The NokuPricingPlan contract defines the responsibilities of a Noku pricing plan.\n', '*/\n', 'contract NokuPricingPlan {\n', '    /**\n', '    * @dev Pay the fee for the service identified by the specified name.\n', '    * The fee amount shall already be approved by the client.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @param client The client of the target service.\n', '    * @return true if fee has been paid.\n', '    */\n', '    function payFee(bytes32 serviceName, uint256 multiplier, address client) public returns(bool paid);\n', '\n', '    /**\n', '    * @dev Get the usage fee for the service identified by the specified name.\n', '    * The returned fee amount shall be approved before using #payFee method.\n', '    * @param serviceName The name of the target service.\n', '    * @param multiplier The multiplier of the base service fee to apply.\n', '    * @return The amount to approve before really paying such fee.\n', '    */\n', '    function usageFee(bytes32 serviceName, uint256 multiplier) public constant returns(uint fee);\n', '}\n', '\n', '// File: contracts/NokuCustomToken.sol\n', '\n', 'contract NokuCustomToken is Ownable {\n', '\n', '    event LogBurnFinished();\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers for using Noku services\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    // The entity acting as Custom Token service provider i.e. Noku\n', '    address public serviceProvider;\n', '\n', '    // Flag indicating if Custom Token burning has been permanently finished or not.\n', '    bool public burningFinished;\n', '\n', '    /**\n', '    * @dev Modifier to make a function callable only by service provider i.e. Noku.\n', '    */\n', '    modifier onlyServiceProvider() {\n', '        require(msg.sender == serviceProvider, "caller is not service provider");\n', '        _;\n', '    }\n', '\n', '    modifier canBurn() {\n', '        require(!burningFinished, "burning finished");\n', '        _;\n', '    }\n', '\n', '    constructor(address _pricingPlan, address _serviceProvider) internal {\n', '        require(_pricingPlan != 0, "_pricingPlan is zero");\n', '        require(_serviceProvider != 0, "_serviceProvider is zero");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '        serviceProvider = _serviceProvider;\n', '    }\n', '\n', '    /**\n', '    * @dev Presence of this function indicates the contract is a Custom Token.\n', '    */\n', '    function isCustomToken() public pure returns(bool isCustom) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Stop burning new tokens.\n', '    * @return true if the operation was successful.\n', '    */\n', '    function finishBurning() public onlyOwner canBurn returns(bool finished) {\n', '        burningFinished = true;\n', '\n', '        emit LogBurnFinished();\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * @dev Change the pricing plan of service fee to be paid in NOKU tokens.\n', '    * @param _pricingPlan The pricing plan of NOKU token to be paid, zero means flat subscription.\n', '    */\n', '    function setPricingPlan(address _pricingPlan) public onlyServiceProvider {\n', '        require(_pricingPlan != 0, "_pricingPlan is 0");\n', '        require(_pricingPlan != address(pricingPlan), "_pricingPlan == pricingPlan");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: contracts/NokuCustomERC20Advanced.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC20AdvancedToken contract is a custom ERC20Advanced, a security token ERC20-compliant, token available in the Noku Service Platform (NSP).\n', '* The Noku customer is able to choose the token name, symbol, decimals, initial supply and to administer its lifecycle\n', '* by minting or burning tokens in order to increase or decrease the token supply.\n', '*/\n', 'contract NokuCustomERC20Advanced is NokuCustomToken, BasicSecurityTokenWithDecimals {\n', '    using SafeMath for uint256;\n', '\n', '    event LogNokuCustomERC20AdvancedCreated(\n', '        address indexed caller,\n', '        string indexed name,\n', '        string indexed symbol,\n', '        uint8 decimals,\n', '        address pricingPlan,\n', '        address serviceProvider\n', '    );\n', '    \n', '    constructor(\n', '        string _name,\n', '        string _symbol,\n', '        uint8 _decimals,\n', '        bool _enableWhitelist,\n', '        address _pricingPlan,\n', '        address _serviceProvider\n', '    )\n', '    NokuCustomToken(_pricingPlan, _serviceProvider)\n', '    BasicSecurityTokenWithDecimals(_name, _symbol, _decimals, _enableWhitelist) public\n', '    {\n', '        require(bytes(_name).length > 0, "_name is empty");\n', '        require(bytes(_symbol).length > 0, "_symbol is empty");\n', '        require(_decimals >= 0, "_decimals is less than zero");\n', '\n', '        emit LogNokuCustomERC20AdvancedCreated(\n', '            msg.sender,\n', '            _name,\n', '            _symbol,\n', '            _decimals,\n', '            _pricingPlan,\n', '            _serviceProvider\n', '        );\n', '    }\n', '\n', '    function burn(uint256 amount) public canBurn {\n', '        super.burn(amount);\n', '    }\n', '\n', '    function burnFrom(address account, uint256 amount) public canBurn {\n', '        super.burnFrom(account, amount);\n', '    }    \n', '\n', '    function mint(address account, uint256 amount) public canMint returns (bool) {\n', '        return super.mint(account, amount);\n', '    }\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/AddressUtils.sol\n', '\n', '/**\n', ' * Utility library of inline functions on addresses\n', ' */\n', 'library AddressUtils {\n', '\n', '  /**\n', '   * Returns whether the target address is a contract\n', '   * @dev This function will return false if invoked during the constructor of a contract,\n', '   *  as the code is not actually created until after the constructor finishes.\n', '   * @param addr address to check\n', '   * @return whether the target address is a contract\n', '   */\n', '  function isContract(address addr) internal view returns (bool) {\n', '    uint256 size;\n', '    // XXX Currently there is no better way to check if there is a contract in an address\n', '    // than to check the size of the code at that address.\n', '    // See https://ethereum.stackexchange.com/a/14016/36603\n', '    // for more details about how this works.\n', '    // TODO Check this again before the Serenity release, because all addresses will be\n', '    // contracts then.\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly { size := extcodesize(addr) }\n', '    return size > 0;\n', '  }\n', '\n', '}\n', '\n', '// File: node_modules/openzeppelin-solidity/contracts/lifecycle/Pausable.sol\n', '\n', '/**\n', ' * @title Pausable\n', ' * @dev Base contract which allows children to implement an emergency stop mechanism.\n', ' */\n', 'contract Pausable is Ownable {\n', '  event Pause();\n', '  event Unpause();\n', '\n', '  bool public paused = false;\n', '\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is not paused.\n', '   */\n', '  modifier whenNotPaused() {\n', '    require(!paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev Modifier to make a function callable only when the contract is paused.\n', '   */\n', '  modifier whenPaused() {\n', '    require(paused);\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to pause, triggers stopped state\n', '   */\n', '  function pause() onlyOwner whenNotPaused public {\n', '    paused = true;\n', '    emit Pause();\n', '  }\n', '\n', '  /**\n', '   * @dev called by the owner to unpause, returns to normal state\n', '   */\n', '  function unpause() onlyOwner whenPaused public {\n', '    paused = false;\n', '    emit Unpause();\n', '  }\n', '}\n', '\n', '// File: contracts/NokuCustomService.sol\n', '\n', 'contract NokuCustomService is Pausable {\n', '    using AddressUtils for address;\n', '\n', '    event LogPricingPlanChanged(address indexed caller, address indexed pricingPlan);\n', '\n', '    // The pricing plan determining the fee to be paid in NOKU tokens by customers\n', '    NokuPricingPlan public pricingPlan;\n', '\n', '    constructor(address _pricingPlan) internal {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '\n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '    }\n', '\n', '    function setPricingPlan(address _pricingPlan) public onlyOwner {\n', '        require(_pricingPlan.isContract(), "_pricingPlan is not contract");\n', '        require(NokuPricingPlan(_pricingPlan) != pricingPlan, "_pricingPlan equal to current");\n', '        \n', '        pricingPlan = NokuPricingPlan(_pricingPlan);\n', '\n', '        emit LogPricingPlanChanged(msg.sender, _pricingPlan);\n', '    }\n', '}\n', '\n', '// File: contracts/NokuCustomERC20AdvancedService.sol\n', '\n', '/**\n', '* @dev The NokuCustomERC20AdvancedService contract .\n', '*/\n', 'contract NokuCustomERC20AdvancedService is NokuCustomService {\n', '    event LogNokuCustomERC20AdvancedServiceCreated(address caller, address indexed _pricingPlan);\n', '\n', '    uint256 public constant CREATE_AMOUNT = 1 * 10**18;\n', '\n', '    bytes32 public constant CUSTOM_ERC20ADVANCED_CREATE_SERVICE_NAME = "NokuCustomERC20Advanced.create";\n', '\n', '    constructor(address _pricingPlan) NokuCustomService(_pricingPlan) public {\n', '        emit LogNokuCustomERC20AdvancedServiceCreated(msg.sender, _pricingPlan);\n', '    }\n', '\n', '    function createCustomToken(string _name, string _symbol, uint8 _decimals, bool _enableWhitelist, NokuPricingPlan _pricingPlan) public returns(NokuCustomERC20Advanced customToken) {\n', '        customToken = new NokuCustomERC20Advanced(\n', '            _name,\n', '            _symbol,\n', '            _decimals,\n', '            _enableWhitelist,\n', '            _pricingPlan,\n', '            owner\n', '        );\n', '\n', '        // Transfer NokuCustomERC20Advanced ownership to the client\n', '        customToken.transferOwnership(msg.sender);\n', '\n', '        require(_pricingPlan.payFee(CUSTOM_ERC20ADVANCED_CREATE_SERVICE_NAME, CREATE_AMOUNT, msg.sender), "fee payment failed");\n', '    }\n', '}']