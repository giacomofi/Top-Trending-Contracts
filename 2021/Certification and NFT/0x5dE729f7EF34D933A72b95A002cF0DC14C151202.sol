['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// Verified using https://dapp.tools\n', '\n', '// hevm: flattened sources of src/lender/deployer.sol\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', 'pragma solidity >=0.6.12;\n', '\n', '////// src/fixed_point.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', 'abstract contract FixedPoint {\n', '    struct Fixed27 {\n', '        uint value;\n', '    }\n', '}\n', '\n', '////// src/lender/fabs/interfaces.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', 'interface ReserveFabLike_1 {\n', '    function newReserve(address) external returns (address);\n', '}\n', '\n', 'interface AssessorFabLike_2 {\n', '    function newAssessor() external returns (address);\n', '}\n', '\n', 'interface TrancheFabLike_1 {\n', '    function newTranche(address, address) external returns (address);\n', '}\n', '\n', 'interface CoordinatorFabLike_2 {\n', '    function newCoordinator(uint) external returns (address);\n', '}\n', '\n', 'interface OperatorFabLike_1 {\n', '    function newOperator(address) external returns (address);\n', '}\n', '\n', 'interface MemberlistFabLike_1 {\n', '    function newMemberlist() external returns (address);\n', '}\n', '\n', 'interface RestrictedTokenFabLike_1 {\n', '    function newRestrictedToken(string calldata, string calldata) external returns (address);\n', '}\n', '\n', 'interface PoolAdminFabLike {\n', '    function newPoolAdmin() external returns (address);\n', '}\n', '\n', '\n', '\n', '////// src/lender/deployer.sol\n', '/* pragma solidity >=0.6.12; */\n', '\n', '/* import { ReserveFabLike, AssessorFabLike, TrancheFabLike, CoordinatorFabLike, OperatorFabLike, MemberlistFabLike, RestrictedTokenFabLike, PoolAdminFabLike } from "./fabs/interfaces.sol"; */\n', '\n', '/* import {FixedPoint}      from "./../fixed_point.sol"; */\n', '\n', '\n', 'interface DependLike_2 {\n', '    function depend(bytes32, address) external;\n', '}\n', '\n', 'interface AuthLike_2 {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface MemberlistLike_3 {\n', '    function updateMember(address, uint) external;\n', '}\n', '\n', 'interface FileLike_2 {\n', '    function file(bytes32 name, uint value) external;\n', '}\n', '\n', 'interface RootLike {\n', '    function governance() external returns (address);\n', '}\n', '\n', 'contract LenderDeployer is FixedPoint {\n', '    address public root;\n', '    address public currency;\n', '    address public governance;\n', '    address public memberAdmin;\n', '\n', '    // factory contracts\n', '    TrancheFabLike_1          public trancheFab;\n', '    ReserveFabLike_1          public reserveFab;\n', '    AssessorFabLike_2         public assessorFab;\n', '    CoordinatorFabLike_2      public coordinatorFab;\n', '    OperatorFabLike_1         public operatorFab;\n', '    MemberlistFabLike_1       public memberlistFab;\n', '    RestrictedTokenFabLike_1  public restrictedTokenFab;\n', '    PoolAdminFabLike        public poolAdminFab;\n', '\n', '    // lender state variables\n', '    Fixed27             public minSeniorRatio;\n', '    Fixed27             public maxSeniorRatio;\n', '    uint                public maxReserve;\n', '    uint                public challengeTime;\n', '    Fixed27             public seniorInterestRate;\n', '\n', '\n', '    // contract addresses\n', '    address             public assessor;\n', '    address             public poolAdmin;\n', '    address             public seniorTranche;\n', '    address             public juniorTranche;\n', '    address             public seniorOperator;\n', '    address             public juniorOperator;\n', '    address             public reserve;\n', '    address             public coordinator;\n', '\n', '    address             public seniorToken;\n', '    address             public juniorToken;\n', '\n', '    // token names\n', '    string              public seniorName;\n', '    string              public seniorSymbol;\n', '    string              public juniorName;\n', '    string              public juniorSymbol;\n', '    // restricted token member list\n', '    address             public seniorMemberlist;\n', '    address             public juniorMemberlist;\n', '\n', '    address             public deployer;\n', '\n', '    constructor(address root_, address currency_, address trancheFab_, address memberlistFab_, address restrictedtokenFab_, address reserveFab_, address assessorFab_, address coordinatorFab_, address operatorFab_, address poolAdminFab_, address memberAdmin_) {\n', '        deployer = msg.sender;\n', '        root = root_;\n', '        currency = currency_;\n', '        memberAdmin = memberAdmin_;\n', '\n', '        trancheFab = TrancheFabLike_1(trancheFab_);\n', '        memberlistFab = MemberlistFabLike_1(memberlistFab_);\n', '        restrictedTokenFab = RestrictedTokenFabLike_1(restrictedtokenFab_);\n', '        reserveFab = ReserveFabLike_1(reserveFab_);\n', '        assessorFab = AssessorFabLike_2(assessorFab_);\n', '        poolAdminFab = PoolAdminFabLike(poolAdminFab_);\n', '        coordinatorFab = CoordinatorFabLike_2(coordinatorFab_);\n', '        operatorFab = OperatorFabLike_1(operatorFab_);\n', '    }\n', '\n', '    function init(uint minSeniorRatio_, uint maxSeniorRatio_, uint maxReserve_, uint challengeTime_, uint seniorInterestRate_, string memory seniorName_, string memory seniorSymbol_, string memory juniorName_, string memory juniorSymbol_) public {\n', '        require(msg.sender == deployer);\n', '        challengeTime = challengeTime_;\n', '        minSeniorRatio = Fixed27(minSeniorRatio_);\n', '        maxSeniorRatio = Fixed27(maxSeniorRatio_);\n', '        maxReserve = maxReserve_;\n', '        seniorInterestRate = Fixed27(seniorInterestRate_);\n', '\n', '        // token names\n', '        seniorName = seniorName_;\n', '        seniorSymbol = seniorSymbol_;\n', '        juniorName = juniorName_;\n', '        juniorSymbol = juniorSymbol_;\n', '\n', '        deployer = address(1);\n', '    }\n', '\n', '    function deployJunior() public {\n', '        require(juniorTranche == address(0) && deployer == address(1));\n', '        juniorToken = restrictedTokenFab.newRestrictedToken(juniorName, juniorSymbol);\n', '        juniorTranche = trancheFab.newTranche(currency, juniorToken);\n', '        juniorMemberlist = memberlistFab.newMemberlist();\n', '        juniorOperator = operatorFab.newOperator(juniorTranche);\n', '        AuthLike_2(juniorMemberlist).rely(root);\n', '        AuthLike_2(juniorToken).rely(root);\n', '        AuthLike_2(juniorToken).rely(juniorTranche);\n', '        AuthLike_2(juniorOperator).rely(root);\n', '        AuthLike_2(juniorTranche).rely(root);\n', '    }\n', '\n', '    function deploySenior() public {\n', '        require(seniorTranche == address(0) && deployer == address(1));\n', '        seniorToken = restrictedTokenFab.newRestrictedToken(seniorName, seniorSymbol);\n', '        seniorTranche = trancheFab.newTranche(currency, seniorToken);\n', '        seniorMemberlist = memberlistFab.newMemberlist();\n', '        seniorOperator = operatorFab.newOperator(seniorTranche);\n', '        AuthLike_2(seniorMemberlist).rely(root);\n', '        AuthLike_2(seniorToken).rely(root);\n', '        AuthLike_2(seniorToken).rely(seniorTranche);\n', '        AuthLike_2(seniorOperator).rely(root);\n', '        AuthLike_2(seniorTranche).rely(root);\n', '\n', '    }\n', '\n', '    function deployReserve() public {\n', '        require(reserve == address(0) && deployer == address(1));\n', '        reserve = reserveFab.newReserve(currency);\n', '        AuthLike_2(reserve).rely(root);\n', '    }\n', '\n', '    function deployAssessor() public {\n', '        require(assessor == address(0) && deployer == address(1));\n', '        assessor = assessorFab.newAssessor();\n', '        AuthLike_2(assessor).rely(root);\n', '    }\n', '\n', '    function deployPoolAdmin() public {\n', '        require(poolAdmin == address(0) && deployer == address(1));\n', '        poolAdmin = poolAdminFab.newPoolAdmin();\n', '        AuthLike_2(poolAdmin).rely(root);\n', '    }\n', '\n', '    function deployCoordinator() public {\n', '        require(coordinator == address(0) && deployer == address(1));\n', '        coordinator = coordinatorFab.newCoordinator(challengeTime);\n', '        AuthLike_2(coordinator).rely(root);\n', '    }\n', '\n', '\n', '    function deploy() public virtual {\n', '        require(coordinator != address(0) && assessor != address(0) &&\n', '                reserve != address(0) && seniorTranche != address(0));\n', '\n', '        // required depends\n', '        // reserve\n', '        DependLike_2(reserve).depend("assessor", assessor);\n', '        AuthLike_2(reserve).rely(seniorTranche);\n', '        AuthLike_2(reserve).rely(juniorTranche);\n', '        AuthLike_2(reserve).rely(coordinator);\n', '        AuthLike_2(reserve).rely(assessor);\n', '\n', '\n', '        // tranches\n', '        DependLike_2(seniorTranche).depend("reserve",reserve);\n', '        DependLike_2(juniorTranche).depend("reserve",reserve);\n', '        AuthLike_2(seniorTranche).rely(coordinator);\n', '        AuthLike_2(juniorTranche).rely(coordinator);\n', '        AuthLike_2(seniorTranche).rely(seniorOperator);\n', '        AuthLike_2(juniorTranche).rely(juniorOperator);\n', '\n', '        // coordinator implements epoch ticker interface\n', '        DependLike_2(seniorTranche).depend("coordinator", coordinator);\n', '        DependLike_2(juniorTranche).depend("coordinator", coordinator);\n', '\n', '        //restricted token\n', '        DependLike_2(seniorToken).depend("memberlist", seniorMemberlist);\n', '        DependLike_2(juniorToken).depend("memberlist", juniorMemberlist);\n', '\n', '        //allow tinlake contracts to hold drop/tin tokens\n', '        MemberlistLike_3(juniorMemberlist).updateMember(juniorTranche, type(uint256).max);\n', '        MemberlistLike_3(seniorMemberlist).updateMember(seniorTranche, type(uint256).max);\n', '\n', '        // operator\n', '        DependLike_2(seniorOperator).depend("tranche", seniorTranche);\n', '        DependLike_2(juniorOperator).depend("tranche", juniorTranche);\n', '        DependLike_2(seniorOperator).depend("token", seniorToken);\n', '        DependLike_2(juniorOperator).depend("token", juniorToken);\n', '\n', '\n', '        // coordinator\n', '        DependLike_2(coordinator).depend("reserve", reserve);\n', '        DependLike_2(coordinator).depend("seniorTranche", seniorTranche);\n', '        DependLike_2(coordinator).depend("juniorTranche", juniorTranche);\n', '        DependLike_2(coordinator).depend("assessor", assessor);\n', '\n', '        // assessor\n', '        DependLike_2(assessor).depend("seniorTranche", seniorTranche);\n', '        DependLike_2(assessor).depend("juniorTranche", juniorTranche);\n', '        DependLike_2(assessor).depend("reserve", reserve);\n', '\n', '        AuthLike_2(assessor).rely(coordinator);\n', '        AuthLike_2(assessor).rely(reserve);\n', '        AuthLike_2(assessor).rely(poolAdmin);\n', '\n', '        // poolAdmin\n', '        DependLike_2(poolAdmin).depend("assessor", assessor);\n', '        DependLike_2(poolAdmin).depend("juniorMemberlist", juniorMemberlist);\n', '        DependLike_2(poolAdmin).depend("seniorMemberlist", seniorMemberlist);\n', '\n', '        AuthLike_2(juniorMemberlist).rely(poolAdmin);\n', '        AuthLike_2(seniorMemberlist).rely(poolAdmin);\n', '        if (memberAdmin != address(0)) AuthLike_2(juniorMemberlist).rely(memberAdmin);\n', '        if (memberAdmin != address(0)) AuthLike_2(seniorMemberlist).rely(memberAdmin);\n', '\n', '        FileLike_2(assessor).file("seniorInterestRate", seniorInterestRate.value);\n', '        FileLike_2(assessor).file("maxReserve", maxReserve);\n', '        FileLike_2(assessor).file("maxSeniorRatio", maxSeniorRatio.value);\n', '        FileLike_2(assessor).file("minSeniorRatio", minSeniorRatio.value);\n', '    }\n', '}']