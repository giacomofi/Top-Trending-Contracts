['/**\n', ' *Submitted for verification at Etherscan.io on 2021-01-31\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface AccessTiers {\n', '    /**\n', '     * @notice Returns the rate to pay out for a given amount\n', '     * @param power the amount of control held by user trying to access this action\n', '     * @param total the total amount of control available\n', '     * @return boolean of users access to this tier\n', '     */\n', '    function tier1(uint256 power, uint256 total) external returns (bool);\n', '\n', '    /**\n', '     * @notice Returns the rate to pay out for a given amount\n', '     * @param power the amount of control held by user trying to access this action\n', '     * @param total the total amount of control available\n', '     * @return boolean of users access to this tier\n', '     */\n', '    function tier2(uint256 power, uint256 total) external returns (bool);\n', '\n', '\n', '    /**\n', '     * @notice Returns the rate to pay out for a given amount\n', '     * @param power the amount of control held by user trying to access this action\n', '     * @param total the total amount of control available\n', '     * @return boolean of users access to this tier\n', '     */\n', '    function tier3(uint256 power, uint256 total) external returns (bool);\n', '\n', '\n', '    /**\n', '     * @notice Returns the rate to pay out for a given amount\n', '     * @param power the amount of control held by user trying to access this action\n', '     * @param total the total amount of control available\n', '     * @return boolean of users access to this tier\n', '     */\n', '    function tier4(uint256 power, uint256 total) external returns (bool);\n', '}\n', '\n', 'contract DelegatedAccessTiers is AccessTiers {\n', '    using SafeMath for uint256;\n', '    function tier1(uint256 power, uint256 total) external override returns (bool) {\n', '        uint256 half = total.div(2);\n', '        if (power >= half) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function tier2(uint256 power, uint256 total) external override returns (bool) {\n', '        uint256 twothirds = total.div(3).mul(2);\n', '        if (power >= twothirds) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function tier3(uint256 power, uint256 total) external override returns (bool) {\n', '        uint256 threeQuarters = total.div(4).mul(3);\n', '        if (power >= threeQuarters) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function tier4(uint256 power, uint256 total) external override returns (bool) {\n', '        uint256 ninety = total.div(10).mul(9);\n', '        if (power >= ninety) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '}']