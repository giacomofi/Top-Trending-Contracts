['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '// Copyright 2020 Compound Labs, Inc.\n', '//\n', '// Redistribution and use in source and binary forms, with or without\n', '// modification, are permitted provided that the following conditions are met:\n', '//\n', '// 1. Redistributions of source code must retain the above copyright notice,\n', '// this list of conditions and the following disclaimer.\n', '// 2. Redistributions in binary form must reproduce the above copyright notice,\n', '// this list of conditions and the following disclaimer in the documentation\n', '// and/or other materials provided with the distribution.\n', '// 3. Neither the name of the copyright holder nor the names of its\n', '// contributors may be used to endorse or promote products derived from this\n', '// software without specific prior written permission.\n', '//\n', '// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"\n', '// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n', '// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n', '// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE\n', '// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n', '// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n', '// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n', '// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n', '// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n', '// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n', '// POSSIBILITY OF SUCH DAMAGE.\n', '\n', 'pragma solidity ^0.7.5;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract RadicleToken {\n', '    /// @notice EIP-20 token name for this token\n', '    string public constant NAME = "Radicle";\n', '\n', '    /// @notice EIP-20 token symbol for this token\n', '    string public constant SYMBOL = "RAD";\n', '\n', '    /// @notice EIP-20 token decimals for this token\n', '    uint8 public constant DECIMALS = 18;\n', '\n', '    /// @notice Total number of tokens in circulation\n', '    uint256 public totalSupply = 100000000e18; // 100 million tokens\n', '\n', '    // Allowance amounts on behalf of others\n', '    mapping(address => mapping(address => uint96)) internal allowances;\n', '\n', '    // Official record of token balances for each account\n', '    mapping(address => uint96) internal balances;\n', '\n', '    /// @notice A record of each accounts delegate\n', '    mapping(address => address) public delegates;\n', '\n', '    /// @notice A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint32 fromBlock;\n', '        uint96 votes;\n', '    }\n', '\n', '    /// @notice A record of votes checkpoints for each account, by index\n', '    mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\n', '\n', '    /// @notice The number of checkpoints for each account\n', '    mapping(address => uint32) public numCheckpoints;\n', '\n', "    /// @notice The EIP-712 typehash for the contract's domain\n", '    bytes32 public constant DOMAIN_TYPEHASH =\n', '        keccak256("EIP712Domain(string name,uint256 chainId,address verifyingContract)");\n', '\n', '    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n', '    bytes32 public constant DELEGATION_TYPEHASH =\n', '        keccak256("Delegation(address delegatee,uint256 nonce,uint256 expiry)");\n', '\n', '    /// @notice The EIP-712 typehash for EIP-2612 permit\n', '    bytes32 public constant PERMIT_TYPEHASH =\n', '        keccak256(\n', '            "Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)"\n', '        );\n', '    /// @notice A record of states for signing / validating signatures\n', '    mapping(address => uint256) public nonces;\n', '\n', '    /// @notice An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(\n', '        address indexed delegator,\n', '        address indexed fromDelegate,\n', '        address indexed toDelegate\n', '    );\n', '\n', "    /// @notice An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(\n', '        address indexed delegate,\n', '        uint256 previousBalance,\n', '        uint256 newBalance\n', '    );\n', '\n', '    /// @notice The standard EIP-20 transfer event\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '\n', '    /// @notice The standard EIP-20 approval event\n', '    event Approval(address indexed owner, address indexed spender, uint256 amount);\n', '\n', '    /**\n', '     * @notice Construct a new token\n', '     * @param account The initial account to grant all the tokens\n', '     */\n', '    constructor(address account) {\n', '        balances[account] = uint96(totalSupply);\n', '        emit Transfer(address(0), account, totalSupply);\n', '    }\n', '\n', '    /* @notice Token name */\n', '    function name() public pure returns (string memory) {\n', '        return NAME;\n', '    }\n', '\n', '    /* @notice Token symbol */\n', '    function symbol() public pure returns (string memory) {\n', '        return SYMBOL;\n', '    }\n', '\n', '    /* @notice Token decimals */\n', '    function decimals() public pure returns (uint8) {\n', '        return DECIMALS;\n', '    }\n', '\n', '    /* @notice domainSeparator */\n', '    // solhint-disable func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() public view returns (bytes32) {\n', '        return\n', '            keccak256(\n', '                abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(NAME)), getChainId(), address(this))\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n', '     * @param account The address of the account holding the funds\n', '     * @param spender The address of the account spending the funds\n', '     * @return The number of tokens approved\n', '     */\n', '    function allowance(address account, address spender) external view returns (uint256) {\n', '        return allowances[account][spender];\n', '    }\n', '\n', '    /**\n', '     * @notice Approve `spender` to transfer up to `amount` from `src`\n', '     * @dev This will overwrite the approval amount for `spender`\n', '     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n', '     * @param spender The address of the account which may transfer tokens\n', '     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n', '     * @return Whether or not the approval succeeded\n', '     */\n', '    function approve(address spender, uint256 rawAmount) external returns (bool) {\n', '        _approve(msg.sender, spender, rawAmount);\n', '        return true;\n', '    }\n', '\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 rawAmount\n', '    ) internal {\n', '        uint96 amount;\n', '        if (rawAmount == uint256(-1)) {\n', '            amount = uint96(-1);\n', '        } else {\n', '            amount = safe96(rawAmount, "RadicleToken::approve: amount exceeds 96 bits");\n', '        }\n', '\n', '        allowances[owner][spender] = amount;\n', '\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Get the number of tokens held by the `account`\n', '     * @param account The address of the account to get the balance of\n', '     * @return The number of tokens held\n', '     */\n', '    function balanceOf(address account) external view returns (uint256) {\n', '        return balances[account];\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transfer(address dst, uint256 rawAmount) external returns (bool) {\n', '        uint96 amount = safe96(rawAmount, "RadicleToken::transfer: amount exceeds 96 bits");\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Transfer `amount` tokens from `src` to `dst`\n', '     * @param src The address of the source account\n', '     * @param dst The address of the destination account\n', '     * @param rawAmount The number of tokens to transfer\n', '     * @return Whether or not the transfer succeeded\n', '     */\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 rawAmount\n', '    ) external returns (bool) {\n', '        address spender = msg.sender;\n', '        uint96 spenderAllowance = allowances[src][spender];\n', '        uint96 amount = safe96(rawAmount, "RadicleToken::approve: amount exceeds 96 bits");\n', '\n', '        if (spender != src && spenderAllowance != uint96(-1)) {\n', '            uint96 newAllowance =\n', '                sub96(\n', '                    spenderAllowance,\n', '                    amount,\n', '                    "RadicleToken::transferFrom: transfer amount exceeds spender allowance"\n', '                );\n', '            allowances[src][spender] = newAllowance;\n', '\n', '            emit Approval(src, spender, newAllowance);\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice Burn `rawAmount` tokens from `account`\n', '     * @param account The address of the account to burn\n', '     * @param rawAmount The number of tokens to burn\n', '     */\n', '    function burnFrom(address account, uint256 rawAmount) public {\n', '        require(account != address(0), "RadicleToken::burnFrom: cannot burn from the zero address");\n', '        uint96 amount = safe96(rawAmount, "RadicleToken::burnFrom: amount exceeds 96 bits");\n', '\n', '        address spender = msg.sender;\n', '        uint96 spenderAllowance = allowances[account][spender];\n', '        if (spender != account && spenderAllowance != uint96(-1)) {\n', '            uint96 newAllowance =\n', '                sub96(\n', '                    spenderAllowance,\n', '                    amount,\n', '                    "RadicleToken::burnFrom: burn amount exceeds allowance"\n', '                );\n', '            allowances[account][spender] = newAllowance;\n', '            emit Approval(account, spender, newAllowance);\n', '        }\n', '\n', '        balances[account] = sub96(\n', '            balances[account],\n', '            amount,\n', '            "RadicleToken::burnFrom: burn amount exceeds balance"\n', '        );\n', '        emit Transfer(account, address(0), amount);\n', '\n', '        _moveDelegates(delegates[account], address(0), amount);\n', '\n', '        totalSupply -= rawAmount;\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee) public {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates votes from signatory to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     * @param nonce The contract state required to match the signature\n', '     * @param expiry The time at which to expire the signature\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function delegateBySig(\n', '        address delegatee,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR(), structHash));\n', '        address signatory = ecrecover(digest, v, r, s);\n', '        require(signatory != address(0), "RadicleToken::delegateBySig: invalid signature");\n', '        require(nonce == nonces[signatory]++, "RadicleToken::delegateBySig: invalid nonce");\n', '        require(block.timestamp <= expiry, "RadicleToken::delegateBySig: signature expired");\n', '        _delegate(signatory, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Approves spender to spend on behalf of owner.\n', '     * @param owner The signer of the permit\n', '     * @param spender The address to approve\n', '     * @param deadline The time at which the signature expires\n', '     * @param v The recovery byte of the signature\n', '     * @param r Half of the ECDSA signature pair\n', '     * @param s Half of the ECDSA signature pair\n', '     */\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        bytes32 structHash =\n', '            keccak256(\n', '                abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadline)\n', '            );\n', '        bytes32 digest = keccak256(abi.encodePacked("\\x19\\x01", DOMAIN_SEPARATOR(), structHash));\n', '        require(owner == ecrecover(digest, v, r, s), "RadicleToken::permit: invalid signature");\n', '        require(owner != address(0), "RadicleToken::permit: invalid signature");\n', '        require(block.timestamp <= deadline, "RadicleToken::permit: signature expired");\n', '        _approve(owner, spender, value);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint96) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\n', '        require(blockNumber < block.number, "RadicleToken::getPriorVotes: not yet determined");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = delegates[delegator];\n', '        uint96 delegatorBalance = balances[delegator];\n', '        delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _transferTokens(\n', '        address src,\n', '        address dst,\n', '        uint96 amount\n', '    ) internal {\n', '        require(\n', '            src != address(0),\n', '            "RadicleToken::_transferTokens: cannot transfer from the zero address"\n', '        );\n', '        require(\n', '            dst != address(0),\n', '            "RadicleToken::_transferTokens: cannot transfer to the zero address"\n', '        );\n', '\n', '        balances[src] = sub96(\n', '            balances[src],\n', '            amount,\n', '            "RadicleToken::_transferTokens: transfer amount exceeds balance"\n', '        );\n', '        balances[dst] = add96(\n', '            balances[dst],\n', '            amount,\n', '            "RadicleToken::_transferTokens: transfer amount overflows"\n', '        );\n', '        emit Transfer(src, dst, amount);\n', '\n', '        _moveDelegates(delegates[src], delegates[dst], amount);\n', '    }\n', '\n', '    function _moveDelegates(\n', '        address srcRep,\n', '        address dstRep,\n', '        uint96 amount\n', '    ) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint96 srcRepNew =\n', '                    sub96(srcRepOld, amount, "RadicleToken::_moveVotes: vote amount underflows");\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint96 dstRepNew =\n', '                    add96(dstRepOld, amount, "RadicleToken::_moveVotes: vote amount overflows");\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(\n', '        address delegatee,\n', '        uint32 nCheckpoints,\n', '        uint96 oldVotes,\n', '        uint96 newVotes\n', '    ) internal {\n', '        uint32 blockNumber =\n', '            safe32(block.number, "RadicleToken::_writeCheckpoint: block number exceeds 32 bits");\n', '\n', '        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '            numCheckpoints[delegatee] = nCheckpoints + 1;\n', '        }\n', '\n', '        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\n', '        require(n < 2**96, errorMessage);\n', '        return uint96(n);\n', '    }\n', '\n', '    function add96(\n', '        uint96 a,\n', '        uint96 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint96) {\n', '        uint96 c = a + b;\n', '        require(c >= a, errorMessage);\n', '        return c;\n', '    }\n', '\n', '    function sub96(\n', '        uint96 a,\n', '        uint96 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint96) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    function getChainId() internal pure returns (uint256) {\n', '        uint256 chainId;\n', '        // solhint-disable no-inline-assembly\n', '        assembly {\n', '            chainId := chainid()\n', '        }\n', '        return chainId;\n', '    }\n', '}']