['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-30\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '    function decimals() external view returns (uint8);\n', '    function description() external view returns (string memory);\n', '    function version() external view returns (uint256);\n', '\n', '    // getRoundData and latestRoundData should both raise "No data present"\n', '    // if they do not have data to report, instead of returning unset values\n', '    // which could be misinterpreted as actual reported values.\n', '    function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '    function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '/**\n', ' * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n', ' * the Metadata extension, but not including the Enumerable extension, which is available separately as\n', ' * {ERC721Enumerable}.\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n', '\n', '    using Strings for uint256;\n', '\n', '    AggregatorV3Interface internal priceFeed;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping (uint256 => address) private _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping (address => uint256) private _balances;\n', '\n', '    // Mapping tokenId to month\n', '    mapping (uint256 => uint8) private _tokenMonths;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    // How many NFTs have been issued for each period;\n', '    mapping (uint8 => uint16) public madePerPeriod;\n', '\n', '\n', '    // unix time stamps in seconds for each month for the next 50 months\n', '    // startTimes[49] means that you are predicting no flippening in the next 4 years\n', '    // GMT Time\n', '    uint32[] public startTimes = [1619827200, 1622505600, 1625097600, 1627776000, 1630454400, 1633046400,\n', '    1635724800, 1638320400, 1640998800, 1643677200, 1646096400, 1648771200, 1651363200, 1654041600, 1656633600, 1659312000,\n', '    1661990400, 1664582400, 1667260800, 1669856400, 1672534800, 1675213200, 1677632400, 1680307200, 1682899200, 1685577600,\n', '    1688169600, 1690848000, 1693526400, 1696118400, 1698796800, 1701392400, 1704070800, 1706749200, 1709254800, 1711929600,\n', '    1714521600, 1717200000, 1719792000, 1722470400, 1725148800, 1727740800, 1730419200, 1733014800, 1735693200, 1738371600,\n', '    1740790800, 1743465600, 1746057600, 1748736000];\n', '\n', '\n', '\t// prices[x] represents the price of the xth token purchased that month in wei\n', '    uint64[] public prices = [10000000000000000\n', '    , 12500000000000000\n', '    , 15000000000000000\n', '    , 17500000000000000\n', '    , 20000000000000000\n', '    , 25000000000000000\n', '    , 30000000000000000\n', '    , 35000000000000000\n', '    , 40000000000000000\n', '    , 47500000000000000\n', '    , 55000000000000000\n', '    , 62500000000000000\n', '    , 70000000000000000\n', '    , 80000000000000000\n', '    , 90000000000000000\n', '    , 100000000000000000\n', '    , 110000000000000000\n', '    , 122500000000000000\n', '    , 135000000000000000\n', '    , 147500000000000000\n', '    , 160000000000000000\n', '    , 175000000000000000\n', '    , 190000000000000000\n', '    , 205000000000000000\n', '    , 220000000000000000\n', '    , 237500000000000000\n', '    , 255000000000000000\n', '    , 272500000000000000\n', '    , 290000000000000000\n', '    , 310000000000000000\n', '    , 310000000000000000\n', '    ];\n', '\n', '   \n', '    uint256 public numTokens = 0;\n', '\n', '    // Which NFTs have already claimed their prize\n', '    mapping (uint256 => bool) idsClaimed;\n', '\n', '    // How Many NFTs have successfully claimed their prizes\n', '    uint8 tokenClaimCount;\n', '\n', '    address payable contractOwner;\n', '\n', '    // The unix timestamp of when the flippening has occured\n', '    // and the contract has been called, or 0.\n', '    uint64 public flippeningTime = 0;\n', '\n', '    // Amount [in wei] currently payable to winners\n', '    uint256 public payoutBalance = 0;\n', '\n', '    // Amount to be paid to devs and artists\n', '    uint256 public artistBalance = 0;\n', '\n', "\t// Address of gitcoin's multisig wallet\n", '\t// gitcoin balance can only be sent to this address.\n', '    address payable gitcoinMatchingMultiSig =  payable (0xde21F729137C5Af1b01d73aF1dC21eFfa2B8a0d6);\n', '\n', '    // Amount [in wei] currently payable to gitcoin matching funds\n', '    uint256 public gitcoinBalance = 0;\n', '    \n', '    // historical amount [in wei] already paid to gitcoin matching funds\n', '    uint256 public gitcoinHistorical = 0;\n', '\n', '    //price where ETH market cap flips Btc\n', '    // This is how many wei can be bought for 1 btc\n', '    int256 flippeningRatio = 6179713906000000000;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor () {\n', '        _name = "FlippeningNFT";\n', '        _symbol = "FLIP";\n', '\n', '        // https://data.chain.link/btc-eth\n', '\t\t// Mainnet chainlink address\n', '\t\t// https://etherscan.io/address/0xdeb288F737066589598e9214E782fa5A8eD689e8\n', '        priceFeed = AggregatorV3Interface(0xdeb288F737066589598e9214E782fa5A8eD689e8);\n', '        contractOwner = payable(msg.sender);\n', '    }\n', '\n', '\n', '    function getLatestPrice() public view returns (int) {\n', '        (\n', '        uint80 roundID,\n', '        int price,\n', '        uint startedAt,\n', '        uint timeStamp,\n', '        uint80 answeredInRound\n', '        ) = priceFeed.latestRoundData();\n', '        return price;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n', '        return interfaceId == type(IERC721).interfaceId\n', '        || interfaceId == type(IERC721Metadata).interfaceId\n', '        || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '\n', '    function monthOf(uint256 tokenId) public view returns (uint8) {\n', '        return _tokenMonths[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        string memory baseURI = _baseURI();\n', '        return bytes(baseURI).length > 0\n', '        ? string(abi.encodePacked(baseURI, tokenId.toString()))\n', "        : '';\n", '    }\n', '\n', '    /**\n', '     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n', '     * in child contracts.\n', '     */\n', '    function _baseURI() internal view virtual returns (string memory) {\n', '        return "https://www.ethflippening.com/uri/";\n', '    }\n', '\n', '    function createNFT(uint8 period) public payable {\n', '\n', '        // Calculate the price and make sure they have sent enough\n', "        require(msg.value >= prices[madePerPeriod[period]], 'You need to send at least the current price');\n", '\n', '        // Make sure that the maximum number of tokens have not already been created for that period.\n', "        require(madePerPeriod[period] < 31, 'Max tokens for that period already minted');\n", '\n', '        // Tokens can no longer be minted after the flippening has been recorded\n', "        require(flippeningTime == 0, 'Tokens must be created before flippening is recorded');\n", '        \n', '        // Only 50 periods are available\n', "        require(period < 50, 'Only 50 months are available');\n", '\n', '        // Create the token\n', '        _mint(msg.sender, numTokens);\n', '\n', '        // Update token month\n', '        _tokenMonths[numTokens] = period;\n', '\n', '        // Increment\n', '        numTokens ++;\n', '\n', '        // Update number per period\n', '        madePerPeriod[period] ++;\n', '\n', '        // Handle money sent\n', '        payoutBalance = payoutBalance + msg.value * 45 / 100;\n', '        gitcoinBalance = gitcoinBalance + msg.value * 6 / 100;\n', '        artistBalance = artistBalance + msg.value * 49 / 100;\n', '    }\n', '\n', '\n', '    // This function is called when someone claims a prize\n', '    // but can also be called by anyone to record the event\n', '    // without claiming.\n', '    function recordFlippening() public {\n', '        int256 ratio = getLatestPrice();\n', '     \n', '       \n', '\n', "        require(flippeningTime == 0, 'Flippening has already been recorded');\n", '\n', '        // Check if the flippening has happened via the ratio\n', '        // if so, record the current time\n', '        if (ratio <= flippeningRatio) {\n', '            flippeningTime = uint64(block.timestamp);\n', '        }\n', '\n', '        // Record the current time if we have already passed the end\n', '        // and no flippening has occured\n', '        if (flippeningTime == 0 && ratio > flippeningRatio && uint32(block.timestamp) > uint32(startTimes[49]) ) {\n', '            flippeningTime = uint64(block.timestamp);\n', '        }\n', '    }\n', '\n', '\n', '    function tokenClaimed(uint256 tokenId) public view returns(bool)  {\n', '        return idsClaimed[tokenId];\n', '    }\n', '\n', '    function claimPrize(uint256 tokenId) public {\n', '\n', "        require(msg.sender == ownerOf(tokenId), 'Only the token owner may claim');\n", '\n', "        require(idsClaimed[tokenId] == false, 'This token has already claimed the prize');\n", '\n', '        // Check if flippening has occured\n', '        // If so, set timestamp\n', '        if (flippeningTime == 0) {\n', '            recordFlippening();\n', '        }\n', '\n', '        // Make sure the token is in the correct period\n', '        // Either flippening time is greater than start time of the month you picked and less than the month you picked + 1\n', '        // Or, you have picked the last month and the flippening time is greater than this\n', '\n', '        require ((flippeningTime > startTimes[_tokenMonths[tokenId]] && flippeningTime < startTimes[_tokenMonths[tokenId] + 1]) ||\n', '            (flippeningTime > startTimes[49] && _tokenMonths[tokenId] == 49), "You have not won");\n', '\n', '        idsClaimed[tokenId] = true;\n', '\n', '        // Transfer prize amount to token owner\n', '        uint256 weiToSend = payoutBalance / (madePerPeriod[_tokenMonths[tokenId]] - tokenClaimCount);\n', '        tokenClaimCount++;\n', '        payoutBalance = payoutBalance - weiToSend;\n', '    \n', '        address payable winner = payable(msg.sender);\n', '        (bool success, ) = winner.call{value: weiToSend}("");\n', '        require(success, "Transfer failed.");\n', '       \n', '    }\n', '\n', '\n', "    // Anyone can call this function to send gitcoin's share to their multisig wallet\n", '    // This can be called with any balance, and the caller will be responsible for the\n', '    // gas fee\n', '\n', '    function donateToGitcoin() public {\n', '        if (gitcoinBalance > 0) {\n', '            uint256 toSend = gitcoinBalance;\n', '            gitcoinHistorical += gitcoinBalance;\n', '            gitcoinBalance = 0;\n', '            (bool success, ) = gitcoinMatchingMultiSig.call{value: toSend}("");\n', '            require(success, "Transfer failed.");\n', '        }\n', '\n', '    }\n', '\n', '    // If called by an owner, withdraw the approriate amount\n', '    function withdraw() public {\n', "        require(payable(msg.sender) == contractOwner, 'Only the owner may call this function');\n", '        uint256 toSend = artistBalance;\n', '        artistBalance = 0;\n', '        (bool success, ) = contractOwner.call{value: toSend}("");\n', '        require(success, "Transfer failed.");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    ///**\n', '    // * @dev See {IERC721-safeTransferFrom}.k\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve `to` to operate on `tokenId`\n', '     *\n', '     * Emits a {Approval} event.\n', '     */\n', '    function _approve(address to, uint256 tokenId) internal virtual {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n', '    }\n', '}']