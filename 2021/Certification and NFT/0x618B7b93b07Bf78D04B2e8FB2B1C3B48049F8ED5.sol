['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// File: contracts/interface/ICoFiXV2VaultForTrader.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXV2VaultForTrader {\n', '\n', '    event RouterAllowed(address router);\n', '    event RouterDisallowed(address router);\n', '\n', '    event ClearPendingRewardOfCNode(uint256 pendingAmount);\n', '    event ClearPendingRewardOfLP(uint256 pendingAmount);\n', '\n', '    function setGovernance(address gov) external;\n', '\n', '    function setCofiRate(uint256 cofiRate) external;\n', '\n', '    function allowRouter(address router) external;\n', '\n', '    function disallowRouter(address router) external;\n', '\n', '    function calcMiningRate(address pair, uint256 neededETHAmount) external view returns (uint256);\n', '\n', '    function calcNeededETHAmountForAdjustment(address pair, uint256 reserve0, uint256 reserve1, uint256 ethAmount, uint256 erc20Amount) external view returns (uint256);\n', '\n', '    function actualMiningAmount(address pair, uint256 reserve0, uint256 reserve1, uint256 ethAmount, uint256 erc20Amount) external view returns (uint256 amount, uint256 totalAccruedAmount, uint256 neededETHAmount);\n', '\n', '    function distributeReward(address pair, uint256 ethAmount, uint256 erc20Amount, address rewardTo) external;\n', '\n', '    function clearPendingRewardOfCNode() external;\n', '\n', '    function clearPendingRewardOfLP(address pair) external;\n', '\n', '    function getPendingRewardOfCNode() external view returns (uint256);\n', '\n', '    function getPendingRewardOfLP(address pair) external view returns (uint256);\n', '\n', '}\n', '\n', '// File: contracts/interface/ICoFiXV2Factory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXV2Factory {\n', '    // All pairs: {ETH <-> ERC20 Token}\n', '    event PairCreated(address indexed token, address pair, uint256);\n', '    event NewGovernance(address _new);\n', '    event NewController(address _new);\n', '    event NewFeeReceiver(address _new);\n', '    event NewFeeVaultForLP(address token, address feeVault);\n', '    event NewVaultForLP(address _new);\n', '    event NewVaultForTrader(address _new);\n', '    event NewVaultForCNode(address _new);\n', '    event NewDAO(address _new);\n', '\n', '    /// @dev Create a new token pair for trading\n', '    /// @param  token the address of token to trade\n', '    /// @param  initToken0Amount the initial asset ratio (initToken0Amount:initToken1Amount)\n', '    /// @param  initToken1Amount the initial asset ratio (initToken0Amount:initToken1Amount)\n', '    /// @return pair the address of new token pair\n', '    function createPair(\n', '        address token,\n', '\t    uint256 initToken0Amount,\n', '        uint256 initToken1Amount\n', '        )\n', '        external\n', '        returns (address pair);\n', '\n', '    function getPair(address token) external view returns (address pair);\n', '    function allPairs(uint256) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function getTradeMiningStatus(address token) external view returns (bool status);\n', '    function setTradeMiningStatus(address token, bool status) external;\n', '    function getFeeVaultForLP(address token) external view returns (address feeVault); // for LPs\n', '    function setFeeVaultForLP(address token, address feeVault) external;\n', '\n', '    function setGovernance(address _new) external;\n', '    function setController(address _new) external;\n', '    function setFeeReceiver(address _new) external;\n', '    function setVaultForLP(address _new) external;\n', '    function setVaultForTrader(address _new) external;\n', '    function setVaultForCNode(address _new) external;\n', '    function setDAO(address _new) external;\n', '    function getController() external view returns (address controller);\n', '    function getFeeReceiver() external view returns (address feeReceiver); // For CoFi Holders\n', '    function getVaultForLP() external view returns (address vaultForLP);\n', '    function getVaultForTrader() external view returns (address vaultForTrader);\n', '    function getVaultForCNode() external view returns (address vaultForCNode);\n', '    function getDAO() external view returns (address dao);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/ICoFiXStakingRewards.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXStakingRewards {\n', '    // Views\n', '\n', '    /// @dev The rewards vault contract address set in factory contract\n', '    /// @return Returns the vault address\n', '    function rewardsVault() external view returns (address);\n', '\n', '    /// @dev The lastBlock reward applicable\n', '    /// @return Returns the latest block.number on-chain\n', '    function lastBlockRewardApplicable() external view returns (uint256);\n', '\n', '    /// @dev Reward amount represents by per staking token\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    /// @dev How many reward tokens a user has earned but not claimed at present\n', '    /// @param  account The target account\n', '    /// @return The amount of reward tokens a user earned\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    /// @dev How many reward tokens accrued recently\n', '    /// @return The amount of reward tokens accrued recently\n', '    function accrued() external view returns (uint256);\n', '\n', '    /// @dev Get the latest reward rate of this mining pool (tokens amount per block)\n', '    /// @return The latest reward rate\n', '    function rewardRate() external view returns (uint256);\n', '\n', '    /// @dev How many stakingToken (XToken) deposited into to this reward pool (mining pool)\n', '    /// @return The total amount of XTokens deposited in this mining pool\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /// @dev How many stakingToken (XToken) deposited by the target account\n', '    /// @param  account The target account\n', '    /// @return The total amount of XToken deposited in this mining pool\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /// @dev Get the address of token for staking in this mining pool\n', '    /// @return The staking token address\n', '    function stakingToken() external view returns (address);\n', '\n', '    /// @dev Get the address of token for rewards in this mining pool\n', '    /// @return The rewards token address\n', '    function rewardsToken() external view returns (address);\n', '\n', '    // Mutative\n', '\n', '    /// @dev Stake/Deposit into the reward pool (mining pool)\n', '    /// @param  amount The target amount\n', '    function stake(uint256 amount) external;\n', '\n', '    /// @dev Stake/Deposit into the reward pool (mining pool) for other account\n', '    /// @param  other The target account\n', '    /// @param  amount The target amount\n', '    function stakeForOther(address other, uint256 amount) external;\n', '\n', '    /// @dev Withdraw from the reward pool (mining pool), get the original tokens back\n', '    /// @param  amount The target amount\n', '    function withdraw(uint256 amount) external;\n', '\n', '    /// @dev Withdraw without caring about rewards. EMERGENCY ONLY.\n', '    function emergencyWithdraw() external;\n', '\n', '    /// @dev Claim the reward the user earned\n', '    function getReward() external;\n', '\n', '    function getRewardAndStake() external;\n', '\n', "    /// @dev User exit the reward pool, it's actually withdraw and getReward\n", '    function exit() external;\n', '\n', '    /// @dev Add reward to the mining pool\n', '    function addReward(uint256 amount) external;\n', '\n', '    // Events\n', '    event RewardAdded(address sender, uint256 reward);\n', '    event Staked(address indexed user, uint256 amount);\n', '    event StakedForOther(address indexed user, address indexed other, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event EmergencyWithdraw(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '}\n', '// File: contracts/interface/ICoFiXVaultForLP.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXVaultForLP {\n', '\n', '    enum POOL_STATE {INVALID, ENABLED, DISABLED}\n', '\n', '    event NewPoolAdded(address pool, uint256 index);\n', '    event PoolEnabled(address pool);\n', '    event PoolDisabled(address pool);\n', '\n', '    function setGovernance(address _new) external;\n', '    function setInitCoFiRate(uint256 _new) external;\n', '    function setDecayPeriod(uint256 _new) external;\n', '    function setDecayRate(uint256 _new) external;\n', '\n', '    function addPool(address pool) external;\n', '    function enablePool(address pool) external;\n', '    function disablePool(address pool) external;\n', '    function setPoolWeight(address pool, uint256 weight) external;\n', '    function batchSetPoolWeight(address[] memory pools, uint256[] memory weights) external;\n', '    function distributeReward(address to, uint256 amount) external;\n', '\n', '    function getPendingRewardOfLP(address pair) external view returns (uint256);\n', '    function currentPeriod() external view returns (uint256);\n', '    function currentCoFiRate() external view returns (uint256);\n', '    function currentPoolRate(address pool) external view returns (uint256 poolRate);\n', '    function currentPoolRateByPair(address pair) external view returns (uint256 poolRate);\n', '\n', '    /// @dev Get the award staking pool address of pair (XToken)\n', '    /// @param  pair The address of XToken(pair) contract\n', '    /// @return pool The pool address\n', '    function stakingPoolForPair(address pair) external view returns (address pool);\n', '\n', '    function getPoolInfo(address pool) external view returns (POOL_STATE state, uint256 weight);\n', '    function getPoolInfoByPair(address pair) external view returns (POOL_STATE state, uint256 weight);\n', '\n', '    function getEnabledPoolCnt() external view returns (uint256);\n', '\n', '    function getCoFiStakingPool() external view returns (address pool);\n', '\n', '}\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interface/ICoFiToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiToken is IERC20 {\n', '\n', '    /// @dev An event thats emitted when a new governance account is set\n', '    /// @param  _new The new governance address\n', '    event NewGovernance(address _new);\n', '\n', '    /// @dev An event thats emitted when a new minter account is added\n', '    /// @param  _minter The new minter address added\n', '    event MinterAdded(address _minter);\n', '\n', '    /// @dev An event thats emitted when a minter account is removed\n', '    /// @param  _minter The minter address removed\n', '    event MinterRemoved(address _minter);\n', '\n', '    /// @dev Set governance address of CoFi token. Only governance has the right to execute.\n', '    /// @param  _new The new governance address\n', '    function setGovernance(address _new) external;\n', '\n', '    /// @dev Add a new minter account to CoFi token, who can mint tokens. Only governance has the right to execute.\n', '    /// @param  _minter The new minter address\n', '    function addMinter(address _minter) external;\n', '\n', '    /// @dev Remove a minter account from CoFi token, who can mint tokens. Only governance has the right to execute.\n', '    /// @param  _minter The minter address removed\n', '    function removeMinter(address _minter) external;\n', '\n', '    /// @dev mint is used to distribute CoFi token to users, minters are CoFi mining pools\n', '    /// @param  _to The receiver address\n', '    /// @param  _amount The amount of tokens minted\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '// File: contracts/lib/ABDKMath64x64.sol\n', '\n', '/*\n', ' * ABDK Math 64.64 Smart Contract Library.  Copyright © 2019 by ABDK Consulting.\n', ' * Author: Mikhail Vladimirov <[email\xa0protected]>\n', ' */\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', ' * Smart contract library of mathematical functions operating with signed\n', ' * 64.64-bit fixed point numbers.  Signed 64.64-bit fixed point number is\n', ' * basically a simple fraction whose numerator is signed 128-bit integer and\n', ' * denominator is 2^64.  As long as denominator is always the same, there is no\n', ' * need to store it, thus in Solidity signed 64.64-bit fixed point numbers are\n', ' * represented by int128 type holding only the numerator.\n', ' */\n', 'library ABDKMath64x64 {\n', '  /**\n', '   * @dev Minimum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MIN_64x64 = -0x80000000000000000000000000000000;\n', '\n', '  /**\n', '   * @dev Maximum value signed 64.64-bit fixed point number may have. \n', '   */\n', '  int128 private constant MAX_64x64 = 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF;\n', '\n', '  /**\n', '   * Convert signed 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromInt (int256 x) internal pure returns (int128) {\n', '    require (x >= -0x8000000000000000 && x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 64-bit integer number\n', '   * rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64-bit integer number\n', '   */\n', '  function toInt (int128 x) internal pure returns (int64) {\n', '    return int64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert unsigned 256-bit integer number into signed 64.64-bit fixed point\n', '   * number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function fromUInt (uint256 x) internal pure returns (int128) {\n', '    require (x <= 0x7FFFFFFFFFFFFFFF);\n', '    return int128 (x << 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into unsigned 64-bit integer\n', '   * number rounding down.  Revert on underflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return unsigned 64-bit integer number\n', '   */\n', '  function toUInt (int128 x) internal pure returns (uint64) {\n', '    require (x >= 0);\n', '    return uint64 (x >> 64);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 128.128 fixed point number into signed 64.64-bit fixed point\n', '   * number rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 128.128-bin fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function from128x128 (int256 x) internal pure returns (int128) {\n', '    int256 result = x >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Convert signed 64.64 fixed point number into signed 128.128 fixed point\n', '   * number.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 128.128 fixed point number\n', '   */\n', '  function to128x128 (int128 x) internal pure returns (int256) {\n', '    return int256 (x) << 64;\n', '  }\n', '\n', '  /**\n', '   * Calculate x + y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function add (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) + y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x - y.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sub (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) - y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function mul (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 result = int256(x) * y >> 64;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding towards zero, where x is signed 64.64 fixed point\n', '   * number and y is signed 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 256-bit integer number\n', '   */\n', '  function muli (int128 x, int256 y) internal pure returns (int256) {\n', '    if (x == MIN_64x64) {\n', '      require (y >= -0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF &&\n', '        y <= 0x1000000000000000000000000000000000000000000000000);\n', '      return -y << 63;\n', '    } else {\n', '      bool negativeResult = false;\n', '      if (x < 0) {\n', '        x = -x;\n', '        negativeResult = true;\n', '      }\n', '      if (y < 0) {\n', '        y = -y; // We rely on overflow behavior here\n', '        negativeResult = !negativeResult;\n', '      }\n', '      uint256 absoluteResult = mulu (x, uint256 (y));\n', '      if (negativeResult) {\n', '        require (absoluteResult <=\n', '          0x8000000000000000000000000000000000000000000000000000000000000000);\n', '        return -int256 (absoluteResult); // We rely on overflow behavior here\n', '      } else {\n', '        require (absoluteResult <=\n', '          0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '        return int256 (absoluteResult);\n', '      }\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x * y rounding down, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64 fixed point number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 256-bit integer number\n', '   */\n', '  function mulu (int128 x, uint256 y) internal pure returns (uint256) {\n', '    if (y == 0) return 0;\n', '\n', '    require (x >= 0);\n', '\n', '    uint256 lo = (uint256 (x) * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) >> 64;\n', '    uint256 hi = uint256 (x) * (y >> 128);\n', '\n', '    require (hi <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    hi <<= 64;\n', '\n', '    require (hi <=\n', '      0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF - lo);\n', '    return hi + lo;\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero.  Revert on overflow or when y is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function div (int128 x, int128 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    int256 result = (int256 (x) << 64) / y;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are signed 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x signed 256-bit integer number\n', '   * @param y signed 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divi (int256 x, int256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '\n', '    bool negativeResult = false;\n', '    if (x < 0) {\n', '      x = -x; // We rely on overflow behavior here\n', '      negativeResult = true;\n', '    }\n', '    if (y < 0) {\n', '      y = -y; // We rely on overflow behavior here\n', '      negativeResult = !negativeResult;\n', '    }\n', '    uint128 absoluteResult = divuu (uint256 (x), uint256 (y));\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function divu (uint256 x, uint256 y) internal pure returns (int128) {\n', '    require (y != 0);\n', '    uint128 result = divuu (x, y);\n', '    require (result <= uint128 (MAX_64x64));\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate -x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function neg (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return -x;\n', '  }\n', '\n', '  /**\n', '   * Calculate |x|.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function abs (int128 x) internal pure returns (int128) {\n', '    require (x != MIN_64x64);\n', '    return x < 0 ? -x : x;\n', '  }\n', '\n', '  /**\n', '   * Calculate 1 / x rounding towards zero.  Revert on overflow or when x is\n', '   * zero.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function inv (int128 x) internal pure returns (int128) {\n', '    require (x != 0);\n', '    int256 result = int256 (0x100000000000000000000000000000000) / x;\n', '    require (result >= MIN_64x64 && result <= MAX_64x64);\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate arithmetics average of x and y, i.e. (x + y) / 2 rounding down.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function avg (int128 x, int128 y) internal pure returns (int128) {\n', '    return int128 ((int256 (x) + int256 (y)) >> 1);\n', '  }\n', '\n', '  /**\n', '   * Calculate geometric average of x and y, i.e. sqrt (x * y) rounding down.\n', '   * Revert on overflow or in case x * y is negative.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function gavg (int128 x, int128 y) internal pure returns (int128) {\n', '    int256 m = int256 (x) * int256 (y);\n', '    require (m >= 0);\n', '    require (m <\n', '        0x4000000000000000000000000000000000000000000000000000000000000000);\n', '    return int128 (sqrtu (uint256 (m), uint256 (x) + uint256 (y) >> 1));\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is signed 64.64 fixed point number\n', '   * and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function pow (int128 x, uint256 y) internal pure returns (int128) {\n', '    uint256 absoluteResult;\n', '    bool negativeResult = false;\n', '    if (x >= 0) {\n', '      absoluteResult = powu (uint256 (x) << 63, y);\n', '    } else {\n', '      // We rely on overflow behavior here\n', '      absoluteResult = powu (uint256 (uint128 (-x)) << 63, y);\n', '      negativeResult = y & 1 > 0;\n', '    }\n', '\n', '    absoluteResult >>= 63;\n', '\n', '    if (negativeResult) {\n', '      require (absoluteResult <= 0x80000000000000000000000000000000);\n', '      return -int128 (absoluteResult); // We rely on overflow behavior here\n', '    } else {\n', '      require (absoluteResult <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '      return int128 (absoluteResult); // We rely on overflow behavior here\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down.  Revert if x < 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function sqrt (int128 x) internal pure returns (int128) {\n', '    require (x >= 0);\n', '    return int128 (sqrtu (uint256 (x) << 64, 0x10000000000000000));\n', '  }\n', '\n', '  /**\n', '   * Calculate binary logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function log_2 (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    int256 msb = 0;\n', '    int256 xc = x;\n', '    if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '    if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '    if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '    if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '    if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '    if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '    if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '    int256 result = msb - 64 << 64;\n', '    uint256 ux = uint256 (x) << 127 - msb;\n', '    for (int256 bit = 0x8000000000000000; bit > 0; bit >>= 1) {\n', '      ux *= ux;\n', '      uint256 b = ux >> 255;\n', '      ux >>= 127 + b;\n', '      result += bit * int256 (b);\n', '    }\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural logarithm of x.  Revert if x <= 0.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function ln (int128 x) internal pure returns (int128) {\n', '    require (x > 0);\n', '\n', '    return int128 (\n', '        uint256 (log_2 (x)) * 0xB17217F7D1CF79ABC9E3B39803F2F6AF >> 128);\n', '  }\n', '\n', '  /**\n', '   * Calculate binary exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp_2 (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    uint256 result = 0x80000000000000000000000000000000;\n', '\n', '    if (x & 0x8000000000000000 > 0)\n', '      result = result * 0x16A09E667F3BCC908B2FB1366EA957D3E >> 128;\n', '    if (x & 0x4000000000000000 > 0)\n', '      result = result * 0x1306FE0A31B7152DE8D5A46305C85EDEC >> 128;\n', '    if (x & 0x2000000000000000 > 0)\n', '      result = result * 0x1172B83C7D517ADCDF7C8C50EB14A791F >> 128;\n', '    if (x & 0x1000000000000000 > 0)\n', '      result = result * 0x10B5586CF9890F6298B92B71842A98363 >> 128;\n', '    if (x & 0x800000000000000 > 0)\n', '      result = result * 0x1059B0D31585743AE7C548EB68CA417FD >> 128;\n', '    if (x & 0x400000000000000 > 0)\n', '      result = result * 0x102C9A3E778060EE6F7CACA4F7A29BDE8 >> 128;\n', '    if (x & 0x200000000000000 > 0)\n', '      result = result * 0x10163DA9FB33356D84A66AE336DCDFA3F >> 128;\n', '    if (x & 0x100000000000000 > 0)\n', '      result = result * 0x100B1AFA5ABCBED6129AB13EC11DC9543 >> 128;\n', '    if (x & 0x80000000000000 > 0)\n', '      result = result * 0x10058C86DA1C09EA1FF19D294CF2F679B >> 128;\n', '    if (x & 0x40000000000000 > 0)\n', '      result = result * 0x1002C605E2E8CEC506D21BFC89A23A00F >> 128;\n', '    if (x & 0x20000000000000 > 0)\n', '      result = result * 0x100162F3904051FA128BCA9C55C31E5DF >> 128;\n', '    if (x & 0x10000000000000 > 0)\n', '      result = result * 0x1000B175EFFDC76BA38E31671CA939725 >> 128;\n', '    if (x & 0x8000000000000 > 0)\n', '      result = result * 0x100058BA01FB9F96D6CACD4B180917C3D >> 128;\n', '    if (x & 0x4000000000000 > 0)\n', '      result = result * 0x10002C5CC37DA9491D0985C348C68E7B3 >> 128;\n', '    if (x & 0x2000000000000 > 0)\n', '      result = result * 0x1000162E525EE054754457D5995292026 >> 128;\n', '    if (x & 0x1000000000000 > 0)\n', '      result = result * 0x10000B17255775C040618BF4A4ADE83FC >> 128;\n', '    if (x & 0x800000000000 > 0)\n', '      result = result * 0x1000058B91B5BC9AE2EED81E9B7D4CFAB >> 128;\n', '    if (x & 0x400000000000 > 0)\n', '      result = result * 0x100002C5C89D5EC6CA4D7C8ACC017B7C9 >> 128;\n', '    if (x & 0x200000000000 > 0)\n', '      result = result * 0x10000162E43F4F831060E02D839A9D16D >> 128;\n', '    if (x & 0x100000000000 > 0)\n', '      result = result * 0x100000B1721BCFC99D9F890EA06911763 >> 128;\n', '    if (x & 0x80000000000 > 0)\n', '      result = result * 0x10000058B90CF1E6D97F9CA14DBCC1628 >> 128;\n', '    if (x & 0x40000000000 > 0)\n', '      result = result * 0x1000002C5C863B73F016468F6BAC5CA2B >> 128;\n', '    if (x & 0x20000000000 > 0)\n', '      result = result * 0x100000162E430E5A18F6119E3C02282A5 >> 128;\n', '    if (x & 0x10000000000 > 0)\n', '      result = result * 0x1000000B1721835514B86E6D96EFD1BFE >> 128;\n', '    if (x & 0x8000000000 > 0)\n', '      result = result * 0x100000058B90C0B48C6BE5DF846C5B2EF >> 128;\n', '    if (x & 0x4000000000 > 0)\n', '      result = result * 0x10000002C5C8601CC6B9E94213C72737A >> 128;\n', '    if (x & 0x2000000000 > 0)\n', '      result = result * 0x1000000162E42FFF037DF38AA2B219F06 >> 128;\n', '    if (x & 0x1000000000 > 0)\n', '      result = result * 0x10000000B17217FBA9C739AA5819F44F9 >> 128;\n', '    if (x & 0x800000000 > 0)\n', '      result = result * 0x1000000058B90BFCDEE5ACD3C1CEDC823 >> 128;\n', '    if (x & 0x400000000 > 0)\n', '      result = result * 0x100000002C5C85FE31F35A6A30DA1BE50 >> 128;\n', '    if (x & 0x200000000 > 0)\n', '      result = result * 0x10000000162E42FF0999CE3541B9FFFCF >> 128;\n', '    if (x & 0x100000000 > 0)\n', '      result = result * 0x100000000B17217F80F4EF5AADDA45554 >> 128;\n', '    if (x & 0x80000000 > 0)\n', '      result = result * 0x10000000058B90BFBF8479BD5A81B51AD >> 128;\n', '    if (x & 0x40000000 > 0)\n', '      result = result * 0x1000000002C5C85FDF84BD62AE30A74CC >> 128;\n', '    if (x & 0x20000000 > 0)\n', '      result = result * 0x100000000162E42FEFB2FED257559BDAA >> 128;\n', '    if (x & 0x10000000 > 0)\n', '      result = result * 0x1000000000B17217F7D5A7716BBA4A9AE >> 128;\n', '    if (x & 0x8000000 > 0)\n', '      result = result * 0x100000000058B90BFBE9DDBAC5E109CCE >> 128;\n', '    if (x & 0x4000000 > 0)\n', '      result = result * 0x10000000002C5C85FDF4B15DE6F17EB0D >> 128;\n', '    if (x & 0x2000000 > 0)\n', '      result = result * 0x1000000000162E42FEFA494F1478FDE05 >> 128;\n', '    if (x & 0x1000000 > 0)\n', '      result = result * 0x10000000000B17217F7D20CF927C8E94C >> 128;\n', '    if (x & 0x800000 > 0)\n', '      result = result * 0x1000000000058B90BFBE8F71CB4E4B33D >> 128;\n', '    if (x & 0x400000 > 0)\n', '      result = result * 0x100000000002C5C85FDF477B662B26945 >> 128;\n', '    if (x & 0x200000 > 0)\n', '      result = result * 0x10000000000162E42FEFA3AE53369388C >> 128;\n', '    if (x & 0x100000 > 0)\n', '      result = result * 0x100000000000B17217F7D1D351A389D40 >> 128;\n', '    if (x & 0x80000 > 0)\n', '      result = result * 0x10000000000058B90BFBE8E8B2D3D4EDE >> 128;\n', '    if (x & 0x40000 > 0)\n', '      result = result * 0x1000000000002C5C85FDF4741BEA6E77E >> 128;\n', '    if (x & 0x20000 > 0)\n', '      result = result * 0x100000000000162E42FEFA39FE95583C2 >> 128;\n', '    if (x & 0x10000 > 0)\n', '      result = result * 0x1000000000000B17217F7D1CFB72B45E1 >> 128;\n', '    if (x & 0x8000 > 0)\n', '      result = result * 0x100000000000058B90BFBE8E7CC35C3F0 >> 128;\n', '    if (x & 0x4000 > 0)\n', '      result = result * 0x10000000000002C5C85FDF473E242EA38 >> 128;\n', '    if (x & 0x2000 > 0)\n', '      result = result * 0x1000000000000162E42FEFA39F02B772C >> 128;\n', '    if (x & 0x1000 > 0)\n', '      result = result * 0x10000000000000B17217F7D1CF7D83C1A >> 128;\n', '    if (x & 0x800 > 0)\n', '      result = result * 0x1000000000000058B90BFBE8E7BDCBE2E >> 128;\n', '    if (x & 0x400 > 0)\n', '      result = result * 0x100000000000002C5C85FDF473DEA871F >> 128;\n', '    if (x & 0x200 > 0)\n', '      result = result * 0x10000000000000162E42FEFA39EF44D91 >> 128;\n', '    if (x & 0x100 > 0)\n', '      result = result * 0x100000000000000B17217F7D1CF79E949 >> 128;\n', '    if (x & 0x80 > 0)\n', '      result = result * 0x10000000000000058B90BFBE8E7BCE544 >> 128;\n', '    if (x & 0x40 > 0)\n', '      result = result * 0x1000000000000002C5C85FDF473DE6ECA >> 128;\n', '    if (x & 0x20 > 0)\n', '      result = result * 0x100000000000000162E42FEFA39EF366F >> 128;\n', '    if (x & 0x10 > 0)\n', '      result = result * 0x1000000000000000B17217F7D1CF79AFA >> 128;\n', '    if (x & 0x8 > 0)\n', '      result = result * 0x100000000000000058B90BFBE8E7BCD6D >> 128;\n', '    if (x & 0x4 > 0)\n', '      result = result * 0x10000000000000002C5C85FDF473DE6B2 >> 128;\n', '    if (x & 0x2 > 0)\n', '      result = result * 0x1000000000000000162E42FEFA39EF358 >> 128;\n', '    if (x & 0x1 > 0)\n', '      result = result * 0x10000000000000000B17217F7D1CF79AB >> 128;\n', '\n', '    result >>= 63 - (x >> 64);\n', '    require (result <= uint256 (MAX_64x64));\n', '\n', '    return int128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate natural exponent of x.  Revert on overflow.\n', '   *\n', '   * @param x signed 64.64-bit fixed point number\n', '   * @return signed 64.64-bit fixed point number\n', '   */\n', '  function exp (int128 x) internal pure returns (int128) {\n', '    require (x < 0x400000000000000000); // Overflow\n', '\n', '    if (x < -0x400000000000000000) return 0; // Underflow\n', '\n', '    return exp_2 (\n', '        int128 (int256 (x) * 0x171547652B82FE1777D0FFDA0D23A7D12 >> 128));\n', '  }\n', '\n', '  /**\n', '   * Calculate x / y rounding towards zero, where x and y are unsigned 256-bit\n', '   * integer numbers.  Revert on overflow or when y is zero.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @param y unsigned 256-bit integer number\n', '   * @return unsigned 64.64-bit fixed point number\n', '   */\n', '  function divuu (uint256 x, uint256 y) private pure returns (uint128) {\n', '    require (y != 0);\n', '\n', '    uint256 result;\n', '\n', '    if (x <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\n', '      result = (x << 64) / y;\n', '    else {\n', '      uint256 msb = 192;\n', '      uint256 xc = x >> 192;\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      result = (x << 255 - msb) / ((y - 1 >> msb - 191) + 1);\n', '      require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 hi = result * (y >> 128);\n', '      uint256 lo = result * (y & 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '\n', '      uint256 xh = x >> 192;\n', '      uint256 xl = x << 64;\n', '\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '      lo = hi << 128;\n', '      if (xl < lo) xh -= 1;\n', '      xl -= lo; // We rely on overflow behavior here\n', '\n', '      assert (xh == hi >> 128);\n', '\n', '      result += xl / y;\n', '    }\n', '\n', '    require (result <= 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF);\n', '    return uint128 (result);\n', '  }\n', '\n', '  /**\n', '   * Calculate x^y assuming 0^0 is 1, where x is unsigned 129.127 fixed point\n', '   * number and y is unsigned 256-bit integer number.  Revert on overflow.\n', '   *\n', '   * @param x unsigned 129.127-bit fixed point number\n', '   * @param y uint256 value\n', '   * @return unsigned 129.127-bit fixed point number\n', '   */\n', '  function powu (uint256 x, uint256 y) private pure returns (uint256) {\n', '    if (y == 0) return 0x80000000000000000000000000000000;\n', '    else if (x == 0) return 0;\n', '    else {\n', '      int256 msb = 0;\n', '      uint256 xc = x;\n', '      if (xc >= 0x100000000000000000000000000000000) { xc >>= 128; msb += 128; }\n', '      if (xc >= 0x10000000000000000) { xc >>= 64; msb += 64; }\n', '      if (xc >= 0x100000000) { xc >>= 32; msb += 32; }\n', '      if (xc >= 0x10000) { xc >>= 16; msb += 16; }\n', '      if (xc >= 0x100) { xc >>= 8; msb += 8; }\n', '      if (xc >= 0x10) { xc >>= 4; msb += 4; }\n', '      if (xc >= 0x4) { xc >>= 2; msb += 2; }\n', '      if (xc >= 0x2) msb += 1;  // No need to shift xc anymore\n', '\n', '      int256 xe = msb - 127;\n', '      if (xe > 0) x >>= xe;\n', '      else x <<= -xe;\n', '\n', '      uint256 result = 0x80000000000000000000000000000000;\n', '      int256 re = 0;\n', '\n', '      while (y > 0) {\n', '        if (y & 1 > 0) {\n', '          result = result * x;\n', '          y -= 1;\n', '          re += xe;\n', '          if (result >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            result >>= 128;\n', '            re += 1;\n', '          } else result >>= 127;\n', '          if (re < -127) return 0; // Underflow\n', '          require (re < 128); // Overflow\n', '        } else {\n', '          x = x * x;\n', '          y >>= 1;\n', '          xe <<= 1;\n', '          if (x >=\n', '            0x8000000000000000000000000000000000000000000000000000000000000000) {\n', '            x >>= 128;\n', '            xe += 1;\n', '          } else x >>= 127;\n', '          if (xe < -127) return 0; // Underflow\n', '          require (xe < 128); // Overflow\n', '        }\n', '      }\n', '\n', '      if (re > 0) result <<= re;\n', '      else if (re < 0) result >>= -re;\n', '\n', '      return result;\n', '    }\n', '  }\n', '\n', '  /**\n', '   * Calculate sqrt (x) rounding down, where x is unsigned 256-bit integer\n', '   * number.\n', '   *\n', '   * @param x unsigned 256-bit integer number\n', '   * @return unsigned 128-bit integer number\n', '   */\n', '  function sqrtu (uint256 x, uint256 r) private pure returns (uint128) {\n', '    if (x == 0) return 0;\n', '    else {\n', '      require (r > 0);\n', '      while (true) {\n', '        uint256 rr = x / r;\n', '        if (r == rr || r + 1 == rr) return uint128 (r);\n', '        else if (r == rr + 1) return uint128 (rr);\n', '        r = r + rr + 1 >> 1;\n', '      }\n', '    }\n', '  }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/CoFiXV2VaultForLP.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// Reward Pool Controller for Liquidity Provider\n', 'contract CoFiXV2VaultForLP is ICoFiXVaultForLP, ReentrancyGuard {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // uint256 public constant RATE_BASE = 1e18;\n', '    uint256 public constant WEIGHT_BASE = 100;\n', '\n', '    address public immutable cofiToken;\n', '    address public immutable factory;\n', '\n', '    uint256 public genesisBlock;\n', '\n', '    // managed by governance\n', '    address public governance;\n', '\n', '    uint256 public initCoFiRate = 1.8*1e18; // yield per block  5*1e18 - 5*1e18/10\n', '    uint256 public decayPeriod = 2400000; // yield decays for every 2,400,000 blocks\n', '    uint256 public decayRate = 80;\n', '\n', '    address[] public allPools; // add every pool addr to record, make it easier to track\n', '\n', '    uint256 public enabledCnt;\n', '\n', '    struct PoolInfo {\n', '        POOL_STATE state;\n', '        uint256 weight;\n', '    }\n', '\n', '    mapping (address => PoolInfo) public poolInfo; // pool -> poolInfo\n', '\n', '    mapping (address => address) public pairToStakingPool; // pair -> staking pool\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance, "CVaultForLP: !governance");\n', '        _;\n', '    }\n', '\n', '    constructor(address cofi, address _factory) public {\n', '        cofiToken = cofi;\n', '        factory = _factory;\n', '        governance = msg.sender;\n', '        genesisBlock = block.number; // set v1 genesisBlock to genesisBlock later\n', '    }\n', '\n', '    // this is for mainnet\n', '    function setGenesisBlock() external {\n', '        genesisBlock = 11040688; // follow v1 \n', '    }\n', '\n', '    /* setters for protocol governance */\n', '    function setGovernance(address _new) external override onlyGovernance {\n', '        governance = _new;\n', '    }\n', '\n', '    function setInitCoFiRate(uint256 _new) external override onlyGovernance {\n', '        initCoFiRate = _new;\n', '    }\n', '\n', '    function setDecayPeriod(uint256 _new) external override onlyGovernance {\n', '        require(_new != 0, "CVaultForLP: wrong period setting");\n', '        decayPeriod = _new;\n', '    }\n', '\n', '    function setDecayRate(uint256 _new) external override onlyGovernance {\n', '        decayRate = _new;\n', '    }\n', '\n', '    function addPool(address pool) external override onlyGovernance {\n', '        require(poolInfo[pool].state == POOL_STATE.INVALID, "CVaultForLP: pool added"); // INVALID -> ENABLED\n', '        require(pool != address(0), "CVaultForTrader: invalid pool");\n', '        poolInfo[pool].state = POOL_STATE.ENABLED;\n', '        // default rate is zero, to ensure safety\n', '        enabledCnt = enabledCnt.add(1);\n', '        // set pair to reward pool map\n', '        address pair = ICoFiXStakingRewards(pool).stakingToken();\n', '        require(pairToStakingPool[pair] == address(0), "CVaultForLP: pair added");\n', '        pairToStakingPool[pair] = pool; // staking token is CoFiXPair (XToken)\n', '        allPools.push(pool); // add once never delete, using for track\n', '        emit NewPoolAdded(pool, allPools.length);\n', '    }\n', '\n', '    function enablePool(address pool) external override onlyGovernance {\n', '        require(poolInfo[pool].state == POOL_STATE.DISABLED, "CVaultForLP: pool not disabled"); // DISABLED -> ENABLED\n', '        require(pool != address(0), "CVaultForTrader: invalid pool");\n', '        poolInfo[pool].state = POOL_STATE.ENABLED;\n', '        enabledCnt = enabledCnt.add(1);\n', '        // set pair to reward pool map\n', '        address pair = ICoFiXStakingRewards(pool).stakingToken();\n', '        require(pairToStakingPool[pair] == address(0), "CVaultForLP: pair added");\n', '        pairToStakingPool[pair] = pool; // staking token is CoFiXPair (XToken)\n', '        emit PoolEnabled(pool);\n', '    }\n', '\n', '    function disablePool(address pool) external override onlyGovernance {\n', '        require(poolInfo[pool].state == POOL_STATE.ENABLED, "CVaultForLP: pool not enabled"); // ENABLED -> DISABLED\n', '        require(pool != address(0), "CVaultForTrader: invalid pool");\n', '        poolInfo[pool].state = POOL_STATE.DISABLED;\n', '        poolInfo[pool].weight = 0; // set pool weight to zero;\n', '        enabledCnt = enabledCnt.sub(1);\n', '        address pair = ICoFiXStakingRewards(pool).stakingToken();\n', '        pairToStakingPool[pair] = address(0); // set pair mapping to zero\n', '        emit PoolDisabled(pool);\n', '    }\n', '\n', '    function setPoolWeight(address pool, uint256 weight) public override onlyGovernance {\n', '        require(weight <= WEIGHT_BASE, "CVaultForLP: invalid weight");\n', '        require(pool != address(0), "CVaultForTrader: invalid pool");\n', '        require(poolInfo[pool].state == POOL_STATE.ENABLED, "CVaultForLP: pool not enabled"); // only set weight if pool is enabled\n', '        poolInfo[pool].weight = weight;\n', '    }\n', '\n', '    function batchSetPoolWeight(address[] memory pools, uint256[] memory weights) external override onlyGovernance {\n', '        uint256 cnt = pools.length;\n', '        require(cnt == weights.length, "CVaultForLP: mismatch len");\n', '        for (uint256 i = 0; i < cnt; i++) {\n', '            require(pools[i] != address(0), "CVaultForTrader: invalid pool");\n', '            require(weights[i] <= WEIGHT_BASE, "CVaultForLP: invalid weight");\n', '            require(poolInfo[pools[i]].state == POOL_STATE.ENABLED, "CVaultForLP: pool not enabled"); // only set weight if pool is enabled\n', '            poolInfo[pools[i]].weight = weights[i];\n', '        }\n', '        // governance should ensure total weights equal to WEIGHT_BASE\n', '    }\n', '    \n', '    function getPendingRewardOfLP(address pair) external override view returns (uint256) {\n', '        POOL_STATE poolState = poolInfo[msg.sender].state;\n', '        if (poolState == POOL_STATE.INVALID || poolState == POOL_STATE.DISABLED) {\n', "            return 0; // if pool is disabled, it can't mint by call distributeReward, so don't count on any reward for it\n", '        }\n', '        // if poolState is enabled, then go on\n', '        address vaultForTrader = ICoFiXV2Factory(factory).getVaultForTrader();\n', '        if (vaultForTrader == address(0)) {\n', '            return 0; // vaultForTrader is not set yet\n', '        }\n', '        uint256 pending = ICoFiXV2VaultForTrader(vaultForTrader).getPendingRewardOfLP(pair);\n', '        return pending;\n', '    }\n', '\n', '    function distributeReward(address to, uint256 amount) external override nonReentrant {\n', '        POOL_STATE poolState = poolInfo[msg.sender].state;\n', '        require(poolState != POOL_STATE.INVALID, "CVaultForLP: only pool valid");\n', '        if (poolState == POOL_STATE.DISABLED) {\n', '            return; // make sure tx would revert because user still want to withdraw and getReward\n', '        }\n', '        require(to != address(0), "CVaultForTrader: invalid to");\n', '        // if poolState is enabled, then go on. caution: be careful when adding new pool\n', '        address vaultForTrader = ICoFiXV2Factory(factory).getVaultForTrader();\n', '        if (vaultForTrader != address(0)) { // if equal, means vaultForTrader is not set yet\n', '            address pair = ICoFiXStakingRewards(msg.sender).stakingToken();\n', '            require(pair != address(0), "CVaultForTrader: invalid pair");\n', '            uint256 pending = ICoFiXV2VaultForTrader(vaultForTrader).getPendingRewardOfLP(pair);\n', '            if (pending > 0) {\n', '                ICoFiXV2VaultForTrader(vaultForTrader).clearPendingRewardOfLP(pair);\n', '            }\n', '        }\n', '        ICoFiToken(cofiToken).mint(to, amount); // allows zero\n', '    }\n', '\n', '    function currentPeriod() public override view returns (uint256) {\n', '        return (block.number).sub(genesisBlock).div(decayPeriod);\n', '    }\n', '\n', '    function currentCoFiRate() public override view returns (uint256) {\n', '        uint256 periodIdx = currentPeriod();\n', '        if (periodIdx > 4) {\n', '            periodIdx = 4; // after 5 years, the rate keep constant\n', '        }\n', '        uint256 cofiRate = initCoFiRate;\n', '        uint256 _decayRate = decayRate;\n', '        for (uint256 i = 0; i < periodIdx; i++) {\n', '            cofiRate = cofiRate.mul(_decayRate).div(100);\n', '        }\n', '        return cofiRate;\n', '    }\n', '\n', '    function currentPoolRate(address pool) public override view returns (uint256 poolRate) {\n', '        uint256 cnt = enabledCnt;\n', '        if (cnt == 0) {\n', '            return 0;\n', '        }\n', '        uint256 cofiRate = currentCoFiRate();\n', '        uint256 weight = poolInfo[pool].weight;\n', '        poolRate = cofiRate.mul(weight).div(WEIGHT_BASE);\n', '        return poolRate;\n', '    }\n', '\n', '    function currentPoolRateByPair(address pair) external override view returns (uint256 poolRate) {\n', '        address pool = pairToStakingPool[pair];\n', '        poolRate = currentPoolRate(pool);\n', '        return poolRate;\n', '    }\n', '\n', '    function stakingPoolForPair(address pair) external override view returns (address pool) {\n', '        return pairToStakingPool[pair];\n', '    }\n', '\n', '    function getPoolInfo(address pool) public override view returns (POOL_STATE state, uint256 weight) {\n', '        state = poolInfo[pool].state;\n', '        weight = poolInfo[pool].weight;\n', '        return (state, weight);\n', '    }\n', '\n', '    function getPoolInfoByPair(address pair) external override view returns (POOL_STATE state, uint256 weight) {\n', '        address pool = pairToStakingPool[pair];\n', '        return getPoolInfo(pool);\n', '    }\n', '\n', '    // pools in enabled state\n', '    function getEnabledPoolCnt() external override view returns (uint256) {\n', '        return enabledCnt;\n', '    }\n', '\n', '    function getCoFiStakingPool() external override view returns (address pool) {\n', '        return ICoFiXV2Factory(factory).getFeeReceiver();\n', '    }\n', '\n', '}']