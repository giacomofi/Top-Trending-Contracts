['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', 'pragma solidity 0.6.4;\n', '\n', '/**\n', ' * @title Manage the owner for the BulkSender contract.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor() public {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(this), _owner);\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _owner, "Ownable: the caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Sets the new address as the owner.\n', '     */\n', '    function transferOwnership(address newOwner) onlyOwner public {\n', '        require(newOwner != address(0), "Ownable: the new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Sending bulk transactions from the whitelisted wallets.\n', ' */\n', 'contract BulkSender is Ownable {\n', '\n', '    mapping(address => bool) whitelist;\n', '\n', '    /**\n', '     * Throws if called by any account other than the whitelisted address.\n', '     */\n', '    modifier onlyWhiteListed() {\n', '        require(whitelist[msg.sender], "Whitelist: the caller is not whitelisted");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Approves the address as the whitelisted address.\n', '     */\n', '    function approve(address addr) onlyOwner external {\n', '        whitelist[addr] = true;\n', '    }\n', '\n', '    /**\n', '     * Removes the whitelisted address from the whitelist.\n', '     */\n', '    function remove(address addr) onlyOwner external {\n', '        whitelist[addr] = false;\n', '    }\n', '\n', '    /**\n', '     * Returns true if the address is the whitelisted address.\n', '     */\n', '    function isWhiteListed(address addr) public view returns (bool) {\n', '        return whitelist[addr];\n', '    }\n', '\n', '    /**\n', '     * @dev Gets the list of addresses and the list of amounts to make bulk transactions.\n', '     * @param addresses - address[]\n', '     * @param amounts - uint256[]\n', '     */\n', '    function distribute(address[] calldata addresses, uint256[] calldata amounts) onlyWhiteListed external payable  {\n', '        require(addresses.length > 0, "BulkSender: the length of addresses should be greater than zero");\n', '        require(amounts.length == addresses.length, "BulkSender: the length of addresses is not equal the length of amounts");\n', '\n', '        for (uint256 i; i < addresses.length; i++) {\n', '            uint256 value = amounts[i];\n', '            require(value > 0, "BulkSender: the value should be greater then zero");\n', '            address payable _to = address(uint160(addresses[i]));\n', '            _to.transfer(value);\n', '        }\n', '\n', '        require(address(this).balance == 0, "All received funds must be transfered");\n', '    }\n', '\n', '    /**\n', "     * @dev This contract shouldn't accept payments.\n", '     */\n', '    receive() external payable {\n', '        revert("This contract shouldn\'t accept payments.");\n', '    }\n', '\n', '}']