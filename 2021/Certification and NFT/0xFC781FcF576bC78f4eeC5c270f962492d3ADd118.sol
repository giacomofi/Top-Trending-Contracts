['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/kaya/ISmartPool.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface ISmartPool{\n', '\n', '    function joinPool(uint256 amount) external;\n', '\n', '    function exitPool(uint256 amount) external;\n', '\n', '    function transferCash(address to,uint256 amount)external;\n', '\n', '    function token()external view returns(address);\n', '\n', '    function assets()external view returns(uint256);\n', '}\n', '\n', '// File: contracts/interfaces/kaya/IController.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface IController {\n', '\n', '    function invest(address, uint256) external;\n', '\n', '    function exec(\n', '        address _strategy,\n', '        bool _useToken,\n', '        uint256 _useAmount,\n', '        string memory _signature,\n', '        bytes memory _data) external;\n', '\n', '    function harvest(uint256) external;\n', '\n', '    function harvestAll(address _vault)external;\n', '\n', '    function assets() external view returns (uint256);\n', '\n', '    function vaults(address) external view returns(address);\n', '\n', '    function strategies(address) external view returns(address);\n', '\n', '    function inRegister() external view returns (bool);\n', '}\n', '\n', '// File: contracts/interfaces/balancer/IBPool.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IBPool {\n', '\n', '    function isPublicSwap() external view returns (bool);\n', '    function isFinalized() external view returns (bool);\n', '    function isBound(address t) external view returns (bool);\n', '    function getNumTokens() external view returns (uint);\n', '    function getCurrentTokens() external view returns (address[] memory tokens);\n', '    function getFinalTokens() external view returns (address[] memory tokens);\n', '    function getDenormalizedWeight(address token) external view returns (uint);\n', '    function getTotalDenormalizedWeight() external view returns (uint);\n', '    function getNormalizedWeight(address token) external view returns (uint);\n', '    function getBalance(address token) external view returns (uint);\n', '    function getSwapFee() external view returns (uint);\n', '    function getController() external view returns (address);\n', '\n', '    function setSwapFee(uint swapFee) external;\n', '    function setController(address manager) external;\n', '    function setPublicSwap(bool public_) external;\n', '    function finalize() external;\n', '    function bind(address token, uint balance, uint denorm) external;\n', '    function rebind(address token, uint balance, uint denorm) external;\n', '    function unbind(address token) external;\n', '    function gulp(address token) external;\n', '\n', '    function getSpotPrice(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '    function getSpotPriceSansFee(address tokenIn, address tokenOut) external view returns (uint spotPrice);\n', '\n', '    function joinPool(uint poolAmountOut, uint[] calldata maxAmountsIn) external;\n', '    function exitPool(uint poolAmountIn, uint[] calldata minAmountsOut) external;\n', '\n', '    function swapExactAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        address tokenOut,\n', '        uint minAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountOut, uint spotPriceAfter);\n', '\n', '    function swapExactAmountOut(\n', '        address tokenIn,\n', '        uint maxAmountIn,\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPrice\n', '    ) external returns (uint tokenAmountIn, uint spotPriceAfter);\n', '\n', '    function joinswapExternAmountIn(\n', '        address tokenIn,\n', '        uint tokenAmountIn,\n', '        uint minPoolAmountOut\n', '    ) external returns (uint poolAmountOut);\n', '\n', '    function joinswapPoolAmountOut(\n', '        address tokenIn,\n', '        uint poolAmountOut,\n', '        uint maxAmountIn\n', '    ) external returns (uint tokenAmountIn);\n', '\n', '    function exitswapPoolAmountIn(\n', '        address tokenOut,\n', '        uint poolAmountIn,\n', '        uint minAmountOut\n', '    ) external returns (uint tokenAmountOut);\n', '\n', '    function exitswapExternAmountOut(\n', '        address tokenOut,\n', '        uint tokenAmountOut,\n', '        uint maxPoolAmountIn\n', '    ) external returns (uint poolAmountIn);\n', '\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address whom) external view returns (uint);\n', '    function allowance(address src, address dst) external view returns (uint);\n', '\n', '    function approve(address dst, uint amt) external returns (bool);\n', '    function transfer(address dst, uint amt) external returns (bool);\n', '    function transferFrom(\n', '        address src, address dst, uint amt\n', '    ) external returns (bool);\n', '\n', '    function calcSpotPrice(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint swapFee\n', '    ) external pure returns (uint spotPrice);\n', '\n', '    function calcOutGivenIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '\n', '    function calcInGivenOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '\n', '    function calcPoolOutGivenSingleIn(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountOut);\n', '\n', '    function calcSingleInGivenPoolOut(\n', '        uint tokenBalanceIn,\n', '        uint tokenWeightIn,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountIn);\n', '\n', '    function calcSingleOutGivenPoolIn(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint poolAmountIn,\n', '        uint swapFee\n', '    ) external pure returns (uint tokenAmountOut);\n', '\n', '    function calcPoolInGivenSingleOut(\n', '        uint tokenBalanceOut,\n', '        uint tokenWeightOut,\n', '        uint poolSupply,\n', '        uint totalWeight,\n', '        uint tokenAmountOut,\n', '        uint swapFee\n', '    ) external pure returns (uint poolAmountIn);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/balancer/IBFactory.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'interface IBFactory {\n', '\n', '    function isBPool(address pool) external view returns (bool);\n', '    function newBPool() external returns (address);\n', '\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Pair.sol\n', '\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/libraries/UniswapV2Library.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Router01.sol\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/uniswap-v2/IUniswapV2Router02.sol\n', '\n', '\n', 'pragma solidity >=0.6.2;\n', '\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', '// File: contracts/libraries/UniswapV2ExpandLibrary.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', 'library UniswapV2ExpandLibrary{\n', '    using SafeERC20 for IERC20;\n', '\n', '    IUniswapV2Router02 constant public route=IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address,address) {\n', '       return UniswapV2Library.sortTokens(tokenA,tokenB);\n', '    }\n', '\n', '    function pairFor(address tokenA, address tokenB) internal pure returns (address) {\n', '        return UniswapV2Library.pairFor(route.factory(),tokenA,tokenB);\n', '    }\n', '\n', '    function getReserves(address tokenA, address tokenB) internal view returns (uint,uint) {\n', '        return UniswapV2Library.getReserves(route.factory(),tokenA,tokenB);\n', '    }\n', '\n', '    function quote(uint amountA,uint reserveA, uint reserveB) internal pure returns (uint) {\n', '        return UniswapV2Library.quote(amountA,reserveA,reserveB);\n', '    }\n', '\n', '    function getAmountIn(address inputToken,address outputToken,uint256 amountOut)internal view returns(uint256){\n', '        (uint reserveA, uint reserveB) = getReserves(inputToken, outputToken);\n', '        return UniswapV2Library.getAmountIn(amountOut,reserveA,reserveB);\n', '    }\n', '\n', '    function getAmountOut(address inputToken,address outputToken,uint256 amountIn)internal view returns(uint256){\n', '        (uint reserveA, uint reserveB) = getReserves(inputToken, outputToken);\n', '        return UniswapV2Library.getAmountOut(amountIn,reserveA,reserveB);\n', '    }\n', '\n', '    function getAmountsOut(uint amountIn, address[] memory path) internal view returns (uint[] memory) {\n', '        return UniswapV2Library.getAmountsOut(route.factory(),amountIn,path);\n', '    }\n', '\n', '    function getAmountsIn(uint amountOut, address[] memory path) internal view returns (uint[] memory) {\n', '        return UniswapV2Library.getAmountsIn(route.factory(),amountOut,path);\n', '    }\n', '\n', '    function swap(address to,address inputToken,address outputToken,uint256 amountIn,uint256 amountOut) internal{\n', '        IUniswapV2Pair pair=IUniswapV2Pair(pairFor(inputToken,outputToken));\n', '        IERC20(inputToken).safeTransfer(address(pair), amountIn);\n', '        (address token0,) = sortTokens(inputToken, outputToken);\n', '        (uint amount0Out, uint amount1Out) = inputToken == token0 ? (uint(0), amountOut) : (amountOut, uint(0));\n', '        pair.swap(amount0Out,amount1Out, to, new bytes(0));\n', '    }\n', '\n', '\n', '}\n', '\n', '// File: contracts/libraries/ExpandMath.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '// a library for performing various math operations\n', '\n', 'library ExpandMath {\n', '\n', '    uint256 internal constant BONE = 10**18;\n', '\n', '    // Add two numbers together checking for overflows\n', '    function badd(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "ERR_ADD_OVERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // subtract two numbers and return diffecerence when it underflows\n', '    function bsubSign(uint256 a, uint256 b) internal pure returns (uint256, bool) {\n', '        if (a >= b) {\n', '            return (a - b, false);\n', '        } else {\n', '            return (b - a, true);\n', '        }\n', '    }\n', '\n', '    // Subtract two numbers checking for underflows\n', '    function bsub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        (uint256 c, bool flag) = bsubSign(a, b);\n', '        require(!flag, "ERR_SUB_UNDERFLOW");\n', '        return c;\n', '    }\n', '\n', '    // Multiply two 18 decimals numbers\n', '    function bmul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c0 = a * b;\n', '        require(a == 0 || c0 / a == b, "ERR_MUL_OVERFLOW");\n', '        uint256 c1 = c0 + (BONE / 2);\n', '        require(c1 >= c0, "ERR_MUL_OVERFLOW");\n', '        uint256 c2 = c1 / BONE;\n', '        return c2;\n', '    }\n', '\n', '    // Divide two 18 decimals numbers\n', '    function bdiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "ERR_DIV_ZERO");\n', '        uint256 c0 = a * BONE;\n', '        require(a == 0 || c0 / a == BONE, "ERR_DIV_INTERNAL"); // bmul overflow\n', '        uint256 c1 = c0 + (b / 2);\n', '        require(c1 >= c0, "ERR_DIV_INTERNAL"); //  badd require\n', '        uint256 c2 = c1 / b;\n', '        return c2;\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        z = x < y ? x : y;\n', '    }\n', '\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/storage/GovIdentityStorage.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'library GovIdentityStorage {\n', '\n', '  bytes32 public constant govSlot = keccak256("GovIdentityStorage.storage.location");\n', '\n', '  struct Identity{\n', '    address governance;\n', '    address strategist;\n', '    address rewards;\n', '  }\n', '\n', '  function load() internal pure returns (Identity storage gov) {\n', '    bytes32 loc = govSlot;\n', '    assembly {\n', '      gov_slot := loc\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/GovIdentity.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', 'contract GovIdentity {\n', '\n', '    constructor() public {\n', '        _build();\n', '    }\n', '\n', '    function _build() internal{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = msg.sender;\n', '        identity.strategist = msg.sender;\n', '        identity.rewards = msg.sender;\n', '    }\n', '    modifier onlyGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategistOrGovernance() {\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        require(msg.sender == identity.strategist || msg.sender == identity.governance, "GovIdentity.onlyGovernance: !governance and !strategist");\n', '        _;\n', '    }\n', '\n', '    function setRewards(address _rewards) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.rewards = _rewards;\n', '    }\n', '\n', '    function setStrategist(address _strategist) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) public onlyGovernance{\n', '        GovIdentityStorage.Identity storage identity= GovIdentityStorage.load();\n', '        identity.governance = _governance;\n', '    }\n', '\n', '    function getRewards() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.rewards ;\n', '    }\n', '\n', '    function getStrategist() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.strategist;\n', '    }\n', '\n', '    function getGovernance() public pure returns(address){\n', '        GovIdentityStorage.Identity memory identity= GovIdentityStorage.load();\n', '        return identity.governance;\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/strategies/BalLiquidityStrategy.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract BalLiquidityStrategy is ERC20, GovIdentity {\n', '\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using ExpandMath for uint256;\n', '\n', '    uint256 constant public INIT_NUM=1;\n', '    uint256 constant public INIT_NUM_VALUE=INIT_NUM*(1e18);\n', '\n', '    uint256[] public weights;\n', '    uint256[] public amounts;\n', '    address[] public tokens;\n', '\n', '    IController public controller;\n', '    IBPool public bPool;\n', '\n', '    address constant public WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address constant public bFactory = address(0x9424B1412450D0f8Fc2255FAf6046b98213B76Bd);\n', '\n', '    constructor(\n', '        address _controller,\n', '        address[] memory _tokens,\n', '        uint256[] memory _weights,\n', '        uint256[] memory _amounts)\n', '    public\n', "    ERC20('Share Token', 'ST'){\n", "        require(_tokens.length == _weights.length && _weights.length == _amounts.length, 'Strategy: Parameter error');\n", '        tokens = _tokens;\n', '        weights = _weights;\n', '        amounts = _amounts;\n', '        controller = IController(_controller);\n', '    }\n', '\n', '    function getTokens()public view returns(address[] memory){\n', '       return tokens;\n', '    }\n', '\n', '    function getWeights()public view returns(uint256[] memory){\n', '        return weights;\n', '    }\n', '    function pullToken(address _token)internal returns(uint256 amount){\n', '        IERC20 token = IERC20(_token);\n', '        amount = token.balanceOf(msg.sender);\n', '        if(amount>0){\n', '            token.safeTransferFrom(msg.sender, address(this), amount);\n', '        }\n', '    }\n', '\n', '    function clearToken(address to,address _token) internal {\n', '        uint256 amountIn = IERC20(WETH).balanceOf(address(this));\n', '        if (amountIn > 0 && WETH != _token) {\n', '            uint256 amountOut = UniswapV2ExpandLibrary.getAmountOut(WETH, _token, amountIn);\n', '            UniswapV2ExpandLibrary.swap(address(this), WETH, _token, amountIn, amountOut);\n', '        }\n', '        IERC20(_token).safeTransfer(to, IERC20(_token).balanceOf(address(this)));\n', '    }\n', '\n', '    function swapToWeth(address _token, uint256 amountIn) internal returns(uint256 amountOut){\n', '        amountOut=amountIn;\n', '        if (amountIn > 0 && WETH != _token) {\n', '            amountOut = UniswapV2ExpandLibrary.getAmountOut(_token, WETH, amountIn);\n', '            UniswapV2ExpandLibrary.swap(address(this), _token, WETH, amountIn, amountOut);\n', '        }\n', '    }\n', '\n', '    function swapToToken(address _token, uint256 amountOut) internal returns(uint256 amountIn){\n', '        amountIn=amountOut;\n', '        if (amountOut > 0 && WETH != _token) {\n', '            amountIn = UniswapV2ExpandLibrary.getAmountIn(WETH, _token, amountOut);\n', '            UniswapV2ExpandLibrary.swap(address(this), WETH, _token, amountIn, amountOut);\n', '        }\n', '    }\n', '\n', '    function syncTokens()internal{\n', '        tokens=bPool.getCurrentTokens();\n', '        uint256 totalSupply = totalSupply();\n', '        for(uint256 i=0;i<tokens.length;i++){\n', '            weights[i]=bPool.getDenormalizedWeight(tokens[i]);\n', '            uint256 tbal = IERC20(tokens[i]).balanceOf(address(bPool));\n', '            uint256 initAmount = tbal.bdiv(totalSupply).mul(INIT_NUM);\n', '            amounts[i]=initAmount;\n', '        }\n', '    }\n', '\n', '    function vaultInfo() internal view returns (address, address){\n', '        address _vault = controller.vaults(address(this));\n', '        address _token = ISmartPool(_vault).token();\n', '        return (_vault, _token);\n', '    }\n', '\n', '    function calcOneShareAmount(uint256 direction) internal view returns (uint256 oneShareWethAmount, uint256[] memory oneShareAmounts){\n', '        uint256 totalSupply = totalSupply().sub(INIT_NUM_VALUE);\n', '        oneShareAmounts=new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 oneShareAmount;\n', '            if (totalSupply == 0) {\n', '                oneShareAmount = amounts[i];\n', '            } else {\n', '                uint256 tbal = IERC20(tokens[i]).balanceOf(address(bPool));\n', '                oneShareAmount = tbal.bdiv(totalSupply);\n', '            }\n', '            oneShareAmounts[i] = oneShareAmount;\n', '            if (tokens[i] != WETH) {\n', '                if(direction==0){\n', '                    oneShareAmount=UniswapV2ExpandLibrary.getAmountIn(WETH,tokens[i], oneShareAmount);\n', '                }else{\n', '                    oneShareAmount=UniswapV2ExpandLibrary.getAmountOut(tokens[i], WETH, oneShareAmount);\n', '                }\n', '            }\n', '            oneShareWethAmount = oneShareWethAmount.add(oneShareAmount);\n', '        }\n', '    }\n', '\n', '    function init() external {\n', "        require(address(bPool) == address(0), 'Strategy.init: already initialised');\n", "        require(msg.sender == address(controller), 'Strategy.init: !controller');\n", '        bPool = IBPool(IBFactory(bFactory).newBPool());\n', '        (,address _vaultToken) = vaultInfo();\n', '        uint256 amountIn=pullToken(_vaultToken);\n', '        swapToWeth(_vaultToken,amountIn);\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            swapToToken(tokens[i],amounts[i]);\n', '            //Approve the balancer pool\n', '            IERC20(tokens[i]).safeApprove(address(bPool), uint256(-1));\n', '            // Bind tokens\n', '            bPool.bind(tokens[i], amounts[i], weights[i]);\n', '        }\n', '        clearToken(msg.sender,_vaultToken);\n', '        _mint(address(this), INIT_NUM_VALUE);\n', '    }\n', '\n', '    function approveTokens() public {\n', "        require(address(bPool) != address(0), 'Strategy.approveTokens: not initialised');\n", '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            IERC20 token=IERC20(tokens[i]);\n', '            if(token.allowance(address(this),address(bPool))>0){\n', '                token.safeApprove(address(bPool), uint256(0));\n', '            }\n', '            token.safeApprove(address(bPool), uint256(-1));\n', '        }\n', '    }\n', '\n', '    function bind(address _token, uint256 _amount, uint256 _weight) external {\n', "        require(msg.sender == address(controller), 'Strategy.bind: !controller');\n", "        require(address(bPool) != address(0), 'Strategy.bind: not initialised');\n", "        require(!bPool.isBound(_token), 'Strategy.bind: the token is bound');\n", '        (address _vault,address _vaultToken) = vaultInfo();\n', '        uint256 amountIn= pullToken(_vaultToken);\n', '        swapToWeth(_vaultToken,amountIn);\n', '        swapToToken(_token,_amount);\n', '        IERC20 token=IERC20(_token);\n', '        //Approve the balancer pool\n', '        if(token.allowance(address(this),address(bPool))>0){\n', '            token.safeApprove(address(bPool), uint256(0));\n', '        }\n', '        token.safeApprove(address(bPool), uint256(-1));\n', '        // Bind tokens\n', '        bPool.bind(_token, _amount, _weight);\n', '        syncTokens();\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function rebind(address _token, uint256 _amount, uint256 _weight) external {\n', "        require(msg.sender == address(controller), 'Strategy.rebind: !controller');\n", "        require(address(bPool) != address(0), 'Strategy.rebind: not initialised');\n", "        require(bPool.isBound(_token), 'Strategy.bind: the token is bound');\n", '        (address _vault,address _vaultToken) = vaultInfo();\n', '        uint256 amountIn= pullToken(_vaultToken);\n', '        swapToWeth(_vaultToken,amountIn);\n', '        swapToToken(_token,_amount);\n', '        IERC20 token = IERC20(_token);\n', '        bPool.gulp(_token);\n', '        uint256 oldBalance = token.balanceOf(address(bPool));\n', '        if (_amount > oldBalance) {\n', '            swapToToken(_token,_amount.sub(oldBalance));\n', '            if(token.allowance(address(this),address(bPool))>0){\n', '                token.safeApprove(address(bPool), uint256(0));\n', '            }\n', '            token.safeApprove(address(bPool), uint256(-1));\n', '        }\n', '        bPool.rebind(_token, _amount, _weight);\n', '        syncTokens();\n', '        amountIn = token.balanceOf(address(this));\n', '        swapToWeth(_token, amountIn);\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function unbind(address _token) external {\n', "        require(msg.sender == address(controller), 'Strategy.unbind: !controller');\n", "        require(address(bPool) != address(0), 'Strategy.unbind: not initialised');\n", '        IERC20 token = IERC20(_token);\n', '        bPool.unbind(_token);\n', '        syncTokens();\n', '        uint256 amountIn = token.balanceOf(address(this));\n', '        swapToWeth(_token, amountIn);\n', '        (address _vault,address _vaultToken) = vaultInfo();\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function deposit(uint256 _amount) external {\n', "        require(msg.sender == address(controller), 'Strategy.deposit: !controller');\n", '        (address _vault,address _vaultToken) = vaultInfo();\n', "        require(_amount > 0, 'Strategy.deposit: token balance is zero');\n", '        IERC20 tokenContract = IERC20(_vaultToken);\n', "        require(tokenContract.balanceOf(msg.sender) >= _amount, 'Strategy.deposit: Insufficient balance');\n", '        tokenContract.safeTransferFrom(msg.sender, address(this), _amount);\n', '        uint256 hasWethTotal = swapToWeth(_vaultToken,_amount);\n', '        (uint256 oneShareWethAmount,uint256[] memory oneShareAmounts) = calcOneShareAmount(0);\n', '        uint256 preShareCount = hasWethTotal.div(oneShareWethAmount);\n', "        require(preShareCount > 0, 'Strategy.deposit: Must be greater than 0 amount by pre share Count ');\n", '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 amountOut = oneShareAmounts[i].mul(preShareCount);\n', '            swapToToken(tokens[i], amountOut);\n', '            uint256 tbal = IERC20(tokens[i]).balanceOf(address(bPool));\n', '            bPool.rebind(tokens[i], tbal.add(amountOut), weights[i]);\n', '        }\n', '        _mint(address(this), preShareCount.mul(1e18));\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) external {\n', "        require(msg.sender == address(controller), 'Strategy.withdraw: !controller');\n", "        require(_amount > 0, 'Strategy.withdraw: Must be greater than 0 amount');\n", "        require(_amount <= available(), 'Strategy.withdraw: Must be less than assets');\n", '        (address _vault,address _vaultToken) = vaultInfo();\n', '        uint256 needWeth = _amount;\n', '        if (WETH != _vaultToken) {\n', '            needWeth = UniswapV2ExpandLibrary.getAmountIn(WETH, _vaultToken, _amount);\n', '        }\n', '        (uint256 oneShareWethAmount,uint256[] memory oneShareAmounts) = calcOneShareAmount(1);\n', '        uint256 preShareCount = needWeth.div(oneShareWethAmount);\n', '        uint256 burnAmount=preShareCount.mul(1e18);\n', "        require(totalSupply().sub(burnAmount) >= INIT_NUM_VALUE, 'Strategy.withdraw: Must be greater than the number of initializations');\n", '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 amountIn = oneShareAmounts[i].mul(preShareCount);\n', '            uint256 tbal = IERC20(tokens[i]).balanceOf(address(bPool));\n', '            bPool.rebind(tokens[i], tbal.sub(amountIn), weights[i]);\n', '            swapToWeth(tokens[i], amountIn);\n', '        }\n', '        _burn(address(this), burnAmount);\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function withdraw(address _token) external returns (uint256 balance){\n', "        require(msg.sender == address(controller), 'Strategy.withdraw: !controller');\n", '        IERC20 token=IERC20(_token);\n', '        balance = token.balanceOf(address(this));\n', '        if (balance > 0) {\n', '            token.safeTransfer(address(controller), balance);\n', '        }\n', '    }\n', '\n', '    function withdrawAll() external {\n', "        require(msg.sender == address(controller), 'Strategy.withdrawAll: !controller');\n", "        require(totalSupply() > INIT_NUM_VALUE, 'Strategy.withdrawAll: Must be greater than the number of initializations');\n", '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 amountOut = amounts[i];\n', '            IERC20 token=IERC20(tokens[i]);\n', "            require(token.balanceOf(address(bPool))>=amountOut,'Strategy.withdrawAll: token balance < amountOut');\n", '            bPool.rebind(tokens[i],amountOut,bPool.getDenormalizedWeight(tokens[i]));\n', '            uint256 amountIn = token.balanceOf(address(this));\n', '            swapToWeth(tokens[i], amountIn);\n', '        }\n', '        _burn(address(this), totalSupply().sub(INIT_NUM_VALUE));\n', '        (address _vault,address _vaultToken) = vaultInfo();\n', '        clearToken(_vault,_vaultToken);\n', '    }\n', '\n', '    function assets() public view returns (uint256){\n', '        uint256 amountWethOut;\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            uint256 amountIn = IERC20(tokens[i]).balanceOf(address(bPool)).sub(amounts[i]);\n', '            if(amountIn>0){\n', '                if (tokens[i] == WETH) {\n', '                    amountWethOut = amountWethOut.add(amountIn);\n', '                } else {\n', '                    amountWethOut = amountWethOut.add(UniswapV2ExpandLibrary.getAmountOut(tokens[i], WETH, amountIn));\n', '                }\n', '            }\n', '        }\n', '        (,address _token) = vaultInfo();\n', '        if (amountWethOut > 0) {\n', '            return UniswapV2ExpandLibrary.getAmountOut(WETH, _token, amountWethOut);\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '\n', '    function available() public view returns (uint256){\n', '        return assets();\n', '    }\n', '}']