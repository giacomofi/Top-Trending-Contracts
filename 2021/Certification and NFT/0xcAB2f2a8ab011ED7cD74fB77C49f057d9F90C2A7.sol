['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-08\n', '*/\n', '\n', '/*\n', "    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\n", "    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\n", '    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\n', '    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\n', "    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\n", "    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\n", "    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\n", '              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\n', '             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\n', "          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\n", "        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\n", "       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\n", "      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\n", '     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\n', "    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\n", '   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\n', "    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\n", "       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\n", "          ...'..     .';;;;;;;;;;;;;;,,,'.\n", '                       ...............\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping(address => uint256) private _balances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor(string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public virtual override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(\n', '            _msgSender(),\n', '            spender,\n', '            _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero")\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal virtual {}\n', '}\n', '\n', 'interface ILoanToken is IERC20 {\n', '    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\n', '\n', '    function borrower() external view returns (address);\n', '\n', '    function amount() external view returns (uint256);\n', '\n', '    function term() external view returns (uint256);\n', '\n', '    function apy() external view returns (uint256);\n', '\n', '    function start() external view returns (uint256);\n', '\n', '    function lender() external view returns (address);\n', '\n', '    function debt() external view returns (uint256);\n', '\n', '    function profit() external view returns (uint256);\n', '\n', '    function status() external view returns (Status);\n', '\n', '    function borrowerFee() external view returns (uint256);\n', '\n', '    function receivedAmount() external view returns (uint256);\n', '\n', '    function isLoanToken() external pure returns (bool);\n', '\n', '    function getParameters()\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function fund() external;\n', '\n', '    function withdraw(address _beneficiary) external;\n', '\n', '    function close() external;\n', '\n', '    function liquidate() external;\n', '\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function repay(address _sender, uint256 _amount) external;\n', '\n', '    function reclaim() external;\n', '\n', '    function allowTransfer(address account, bool _status) external;\n', '\n', '    function repaid() external view returns (uint256);\n', '\n', '    function balance() external view returns (uint256);\n', '\n', '    function value(uint256 _balance) external view returns (uint256);\n', '\n', '    function currencyToken() external view returns (IERC20);\n', '\n', '    function version() external pure returns (uint8);\n', '}\n', '\n', '/**\n', ' * @title LoanToken\n', ' * @dev A token which represents share of a debt obligation\n', ' *\n', ' * Each LoanToken has:\n', ' * - borrower address\n', ' * - borrow amount\n', ' * - loan term\n', ' * - loan APY\n', ' *\n', ' * Loan progresses through the following states:\n', ' * Awaiting:    Waiting for funding to meet capital requirements\n', ' * Funded:      Capital requirements met, borrower can withdraw\n', ' * Withdrawn:   Borrower withdraws money, loan waiting to be repaid\n', ' * Settled:     Loan has been paid back in full with interest\n', ' * Defaulted:   Loan has not been paid back in full\n', ' * Liquidated:  Loan has Defaulted and stakers have been Liquidated\n', ' *\n', ' * - LoanTokens are non-transferable except for whitelisted addresses\n', ' * - This version of LoanToken only supports a single funder\n', ' */\n', 'contract LoanToken is ILoanToken, ERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    uint128 public constant lastMinutePaybackDuration = 1 days;\n', '    uint8 public constant override version = 3;\n', '\n', '    address public override borrower;\n', '    address public liquidator;\n', '    uint256 public override amount;\n', '    uint256 public override term;\n', '    uint256 public override apy;\n', '\n', '    uint256 public override start;\n', '    address public override lender;\n', '    uint256 public override debt;\n', '\n', '    uint256 public redeemed;\n', '\n', '    // borrow fee -> 25 = 0.25%\n', '    uint256 public override borrowerFee = 25;\n', '\n', '    // whitelist for transfers\n', '    mapping(address => bool) public canTransfer;\n', '\n', '    Status public override status;\n', '\n', '    IERC20 public override currencyToken;\n', '\n', '    /**\n', '     * @dev Emitted when the loan is funded\n', '     * @param lender Address which funded the loan\n', '     */\n', '    event Funded(address lender);\n', '\n', '    /**\n', '     * @dev Emitted when transfer whitelist is updated\n', '     * @param account Account to whitelist for transfers\n', '     * @param status New whitelist status\n', '     */\n', '    event TransferAllowanceChanged(address account, bool status);\n', '\n', '    /**\n', '     * @dev Emitted when borrower withdraws funds\n', '     * @param beneficiary Account which will receive funds\n', '     */\n', '    event Withdrawn(address beneficiary);\n', '\n', '    /**\n', '     * @dev Emitted when term is over\n', '     * @param status Final loan status\n', '     * @param returnedAmount Amount that was returned before expiry\n', '     */\n', '    event Closed(Status status, uint256 returnedAmount);\n', '\n', '    /**\n', '     * @dev Emitted when a LoanToken is redeemed for underlying currencyTokens\n', '     * @param receiver Receiver of currencyTokens\n', '     * @param burnedAmount Amount of LoanTokens burned\n', '     * @param redeemedAmount Amount of currencyToken received\n', '     */\n', '    event Redeemed(address receiver, uint256 burnedAmount, uint256 redeemedAmount);\n', '\n', '    /**\n', '     * @dev Emitted when a LoanToken is repaid by the borrower in underlying currencyTokens\n', '     * @param repayer Sender of currencyTokens\n', '     * @param repaidAmount Amount of currencyToken repaid\n', '     */\n', '    event Repaid(address repayer, uint256 repaidAmount);\n', '\n', '    /**\n', '     * @dev Emitted when borrower reclaims remaining currencyTokens\n', '     * @param borrower Receiver of remaining currencyTokens\n', '     * @param reclaimedAmount Amount of currencyTokens repaid\n', '     */\n', '    event Reclaimed(address borrower, uint256 reclaimedAmount);\n', '\n', '    /**\n', '     * @dev Emitted when loan gets liquidated\n', '     * @param status Final loan status\n', '     */\n', '    event Liquidated(Status status);\n', '\n', '    /**\n', '     * @dev Create a Loan\n', '     * @param _currencyToken Token to lend\n', '     * @param _borrower Borrower address\n', '     * @param _amount Borrow amount of currency tokens\n', '     * @param _term Loan length\n', '     * @param _apy Loan APY\n', '     */\n', '    constructor(\n', '        IERC20 _currencyToken,\n', '        address _borrower,\n', '        address _lender,\n', '        address _liquidator,\n', '        uint256 _amount,\n', '        uint256 _term,\n', '        uint256 _apy\n', '    ) public ERC20("Loan Token", "LOAN") {\n', '        require(_lender != address(0), "LoanToken: Lender is not set");\n', '\n', '        currencyToken = _currencyToken;\n', '        borrower = _borrower;\n', '        liquidator = _liquidator;\n', '        amount = _amount;\n', '        term = _term;\n', '        apy = _apy;\n', '        lender = _lender;\n', '        debt = interest(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Only borrower can withdraw & repay loan\n', '     */\n', '    modifier onlyBorrower() {\n', '        require(msg.sender == borrower, "LoanToken: Caller is not the borrower");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only liquidator can liquidate\n', '     */\n', '    modifier onlyLiquidator() {\n', '        require(msg.sender == liquidator, "LoanToken: Caller is not the liquidator");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Settled\n', '     */\n', '    modifier onlyClosed() {\n', '        require(status >= Status.Settled, "LoanToken: Current status should be Settled or Defaulted");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Funded\n', '     */\n', '    modifier onlyOngoing() {\n', '        require(status == Status.Funded || status == Status.Withdrawn, "LoanToken: Current status should be Funded or Withdrawn");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Funded\n', '     */\n', '    modifier onlyFunded() {\n', '        require(status == Status.Funded, "LoanToken: Current status should be Funded");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Withdrawn\n', '     */\n', '    modifier onlyAfterWithdraw() {\n', '        require(status >= Status.Withdrawn, "LoanToken: Only after loan has been withdrawn");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Awaiting\n', '     */\n', '    modifier onlyAwaiting() {\n', '        require(status == Status.Awaiting, "LoanToken: Current status should be Awaiting");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only when loan is Defaulted\n', '     */\n', '    modifier onlyDefaulted() {\n', '        require(status == Status.Defaulted, "LoanToken: Current status should be Defaulted");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only whitelisted accounts or lender\n', '     */\n', '    modifier onlyWhoCanTransfer(address sender) {\n', '        require(\n', '            sender == lender || canTransfer[sender],\n', '            "LoanToken: This can be performed only by lender or accounts allowed to transfer"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only lender can perform certain actions\n', '     */\n', '    modifier onlyLender() {\n', '        require(msg.sender == lender, "LoanToken: This can be performed only by lender");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Return true if this contract is a LoanToken\n', '     * @return True if this contract is a LoanToken\n', '     */\n', '    function isLoanToken() external override pure returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Get loan parameters\n', '     * @return amount, term, apy\n', '     */\n', '    function getParameters()\n', '        external\n', '        override\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (amount, apy, term);\n', '    }\n', '\n', '    /**\n', '     * @dev Get coupon value of this loan token in currencyToken\n', '     * This assumes the loan will be paid back on time, with interest\n', '     * @param _balance number of LoanTokens to get value for\n', '     * @return coupon value of _balance LoanTokens in currencyTokens\n', '     */\n', '    function value(uint256 _balance) external override view returns (uint256) {\n', '        if (_balance == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 passed = block.timestamp.sub(start);\n', '        if (passed > term) {\n', '            passed = term;\n', '        }\n', '\n', '        // assume year is 365 days\n', '        uint256 interest = amount.mul(apy).mul(passed).div(365 days).div(10000);\n', '\n', '        return amount.add(interest).mul(_balance).div(debt);\n', '    }\n', '\n', '    /**\n', '     * @dev Fund a loan\n', '     * Set status, start time, lender\n', '     */\n', '    function fund() external override onlyAwaiting onlyLender {\n', '        status = Status.Funded;\n', '        start = block.timestamp;\n', '        _mint(msg.sender, debt);\n', '        require(currencyToken.transferFrom(msg.sender, address(this), receivedAmount()));\n', '\n', '        emit Funded(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Whitelist accounts to transfer\n', '     * @param account address to allow transfers for\n', '     * @param _status true allows transfers, false disables transfers\n', '     */\n', '    function allowTransfer(address account, bool _status) external override onlyLender {\n', '        canTransfer[account] = _status;\n', '        emit TransferAllowanceChanged(account, _status);\n', '    }\n', '\n', '    /**\n', '     * @dev Borrower calls this function to withdraw funds\n', '     * Sets the status of the loan to Withdrawn\n', '     * @param _beneficiary address to send funds to\n', '     */\n', '    function withdraw(address _beneficiary) external override onlyBorrower onlyFunded {\n', '        status = Status.Withdrawn;\n', '        require(currencyToken.transfer(_beneficiary, receivedAmount()));\n', '\n', '        emit Withdrawn(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @dev Close the loan and check if it has been repaid\n', '     */\n', '    function close() external override onlyOngoing {\n', '        require(start.add(term) <= block.timestamp, "LoanToken: Loan cannot be closed yet");\n', '        if (_balance() >= debt) {\n', '            status = Status.Settled;\n', '        } else {\n', '            require(\n', '                start.add(term).add(lastMinutePaybackDuration) <= block.timestamp,\n', '                "LoanToken: Borrower can still pay the loan back"\n', '            );\n', '            status = Status.Defaulted;\n', '        }\n', '\n', '        emit Closed(status, _balance());\n', '    }\n', '\n', '    /**\n', '     * @dev Liquidate the loan if it has defaulted\n', '     */\n', '    function liquidate() external override onlyDefaulted onlyLiquidator {\n', '        status = Status.Liquidated;\n', '\n', '        emit Liquidated(status);\n', '    }\n', '\n', '    /**\n', '     * @dev Redeem LoanToken balances for underlying currencyToken\n', '     * Can only call this function after the loan is Closed\n', '     * @param _amount amount to redeem\n', '     */\n', '    function redeem(uint256 _amount) external override onlyClosed {\n', '        uint256 amountToReturn = _amount.mul(_balance()).div(totalSupply());\n', '        redeemed = redeemed.add(amountToReturn);\n', '        _burn(msg.sender, _amount);\n', '        require(currencyToken.transfer(msg.sender, amountToReturn));\n', '\n', '        emit Redeemed(msg.sender, _amount, amountToReturn);\n', '    }\n', '\n', '    /**\n', '     * @dev Function for borrower to repay the loan\n', '     * Borrower can repay at any time\n', '     * @param _sender account sending currencyToken to repay\n', '     * @param _amount amount of currencyToken to repay\n', '     */\n', '    function repay(address _sender, uint256 _amount) external override onlyAfterWithdraw {\n', '        require(_amount <= debt.sub(_balance()), "LoanToken: Cannot repay over the debt");\n', '        require(currencyToken.transferFrom(_sender, address(this), _amount));\n', '        emit Repaid(_sender, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Function for borrower to reclaim stuck currencyToken\n', '     * Can only call this function after the loan is Closed\n', '     * and all of LoanToken holders have been burnt\n', '     */\n', '    function reclaim() external override onlyClosed onlyBorrower {\n', '        require(totalSupply() == 0, "LoanToken: Cannot reclaim when LoanTokens are in circulation");\n', '        uint256 balanceRemaining = _balance();\n', '        require(balanceRemaining > 0, "LoanToken: Cannot reclaim when balance 0");\n', '\n', '        require(currencyToken.transfer(borrower, balanceRemaining));\n', '        emit Reclaimed(borrower, balanceRemaining);\n', '    }\n', '\n', '    /**\n', '     * @dev Check how much was already repaid\n', "     * Funds stored on the contract's address plus funds already redeemed by lenders\n", '     * @return Uint256 representing what value was already repaid\n', '     */\n', '    function repaid() external override view onlyAfterWithdraw returns (uint256) {\n', '        return _balance().add(redeemed);\n', '    }\n', '\n', '    /**\n', '     * @dev Public currency token balance function\n', '     * @return currencyToken balance of this contract\n', '     */\n', '    function balance() external override view returns (uint256) {\n', '        return _balance();\n', '    }\n', '\n', '    /**\n', '     * @dev Get currency token balance for this contract\n', '     * @return currencyToken balance of this contract\n', '     */\n', '    function _balance() internal view returns (uint256) {\n', '        return currencyToken.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate amount borrowed minus fee\n', '     * @return Amount minus fees\n', '     */\n', '    function receivedAmount() public override view returns (uint256) {\n', '        return amount.sub(amount.mul(borrowerFee).div(10000));\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate interest that will be paid by this loan for an amount (returned funds included)\n', '     * amount + ((amount * apy * term) / (365 days / precision))\n', '     * @param _amount amount\n', '     * @return uint256 Amount of interest paid for _amount\n', '     */\n', '    function interest(uint256 _amount) internal view returns (uint256) {\n', '        return _amount.add(_amount.mul(apy).mul(term).div(365 days).div(10000));\n', '    }\n', '\n', '    /**\n', '     * @dev get profit for this loan\n', '     * @return profit for this loan\n', '     */\n', '    function profit() external override view returns (uint256) {\n', '        return debt.sub(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Override ERC20 _transfer so only whitelisted addresses can transfer\n', '     * @param sender sender of the transaction\n', '     * @param recipient recipient of the transaction\n', '     * @param _amount amount to send\n', '     */\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 _amount\n', '    ) internal override onlyWhoCanTransfer(sender) {\n', '        return super._transfer(sender, recipient, _amount);\n', '    }\n', '}']