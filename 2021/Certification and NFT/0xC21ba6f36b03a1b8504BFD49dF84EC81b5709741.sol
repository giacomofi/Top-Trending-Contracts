['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/Escrow.sol\n', '\n', '//: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'contract Escrow is Ownable {\n', '    event agreementInitialized(uint256 amount);\n', '    event payment(uint256 amount);\n', '    event AgreementDefaulted(uint256 outstandingObligations);\n', '\n', '    struct TokenInfo {\n', '        address EYE;\n', '        address USDC; // 6 decimal places!\n', '        uint256 initialUSDCDebt;\n', '        uint256 initialEYEDeposit;\n', '        uint256 monthlyPayment;\n', '    }\n', '\n', '    struct UserInfo {\n', '        address Justin;\n', '        address DGVC;\n', '    }\n', '\n', '    enum AgreementPhaseEnum {\n', '        dormant,\n', '        initialized,\n', '        defaulted,\n', '        concluded,\n', '        emergencyShutdown\n', '    }\n', '\n', '    struct AgreementState {\n', '        AgreementPhaseEnum phase;\n', '        uint256 commencementTimeStamp;\n', '        uint256 accumulatedRepayments;\n', '    }\n', '\n', '    TokenInfo tokens;\n', '    UserInfo users;\n', '    AgreementState agreementState;\n', '    uint256 constant ONE_USDC = 1e6;\n', '    uint256 constant ONE_EYE = 1e18;\n', '    uint256 constant ARITHMETIC_FACTOR = 1e12;\n', '    uint8 constant EMERGENCY_SHUTDOWN_JUSTIN_INDEX = 0;\n', '    uint8 constant EMERGENCY_SHUTDOWN_DEGEN_INDEX = 1;\n', '    bool[2] emergencyShutdownMultisig;\n', '\n', '    constructor() {\n', '        users.DGVC = 0x8b6e96947349C5eFAbD44Bd8f8901D31951202c6;\n', '        users.Justin = msg.sender;\n', '\n', '        tokens.EYE = 0x155ff1A85F440EE0A382eA949f24CE4E0b751c65;\n', '        tokens.USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '        tokens.initialEYEDeposit = EYE(614521);\n', '        tokens.initialUSDCDebt = USDC(550000);\n', '        tokens.monthlyPayment = tokens.initialUSDCDebt / 18;\n', '\n', '        agreementState.phase = AgreementPhaseEnum.dormant;\n', '    }\n', '\n', '    function setAddresses(\n', '        address eye,\n', '        address usdc,\n', '        address dgvc\n', '    ) public onlyOwner {\n', '        uint256 id;\n', '        assembly {\n', '            id := chainid()\n', '        }\n', '        require(id != 1, "ESCROW: addresses hardcoded on mainnet.");\n', '        tokens.EYE = eye;\n', '        tokens.USDC = usdc;\n', '        users.DGVC = dgvc;\n', '    }\n', '\n', '    function initializeAgreement(uint256 USDC_units) public {\n', '        require(USDC_units < 550001, "ESCROW: Check your input");\n', '        agreementState.phase = AgreementPhaseEnum.initialized;\n', '        agreementState.commencementTimeStamp = block.timestamp;\n', '        IERC20 eye = IERC20(tokens.EYE);\n', '        uint256 balance = eye.balanceOf(address(this));\n', '        require(\n', '            balance >= tokens.initialEYEDeposit,\n', '            "ESCROW: Degen must deposit EYE in order for agreement to commence."\n', '        );\n', '        emit agreementInitialized(USDC_units);\n', '        payDebtFrom(USDC_units, msg.sender);\n', '    }\n', '\n', '    function payDebt(uint256 USDC_units) public {\n', '        payDebtFrom(USDC_units, msg.sender);\n', '    }\n', '\n', '    function payDebtFrom(uint256 USDC_units, address payer) internal {\n', '        require(\n', '            agreementState.phase == AgreementPhaseEnum.initialized,\n', '            "ESCROW: cannot pay on inactive escrow."\n', '        );\n', '        uint256 usdc =\n', '            USDC(USDC_units) + IERC20(tokens.USDC).balanceOf(address(this));\n', '\n', '        //payments made by debtor\n', '        agreementState.accumulatedRepayments += usdc;\n', '\n', '        //end debt binding if all obligations met\n', '        if (agreementState.accumulatedRepayments >= tokens.initialUSDCDebt) {\n', '            agreementState.phase = AgreementPhaseEnum.concluded;\n', '            usdc -=\n', '                agreementState.accumulatedRepayments -\n', '                tokens.initialUSDCDebt;\n', '        }\n', '\n', '        require(\n', '            IERC20(tokens.USDC).transferFrom(payer, users.DGVC, usdc),\n', '            "ESCROW: debtor payment failed"\n', '        );\n', '\n', '        uint256 proportionalPayment =\n', '            (usdc * ARITHMETIC_FACTOR) / tokens.initialUSDCDebt;\n', '        uint256 eyeToWithdraw =\n', '            (proportionalPayment * tokens.initialEYEDeposit) /\n', '                ARITHMETIC_FACTOR;\n', '        IERC20 eyeToken = IERC20(tokens.EYE);\n', '        uint256 balance = eyeToken.balanceOf(address(this));\n', '        if (\n', '            agreementState.phase == AgreementPhaseEnum.concluded ||\n', '            balance < eyeToWithdraw\n', '        ) {\n', '            eyeToWithdraw = balance;\n', '        }\n', '\n', '        require(\n', '            eyeToken.transfer(users.Justin, eyeToWithdraw),\n', '            "ERC20: token transfer failed"\n', '        );\n', '\n', '        emit payment(usdc);\n', '    }\n', '\n', '    function callEYE() public {\n', '        require(\n', '            msg.sender == users.DGVC,\n', '            "ESCROW: only DGVC can call bad debt."\n', '        );\n', '        require(\n', '            agreementState.phase == AgreementPhaseEnum.initialized,\n', '            "ESCROW: calling bad debt can only be done when agreement is active."\n', '        );\n', '\n', '        //only claim if debtor is more than a month behind on repayments\n', '\n', '        require(!isDebtorHealthy(), "ESCROW: debtor in healthy position.");\n', '        IERC20 eye = IERC20(tokens.EYE);\n', '        uint256 remainingEye = eye.balanceOf(address(this));\n', '        eye.transfer(users.DGVC, remainingEye);\n', '        agreementState.phase = AgreementPhaseEnum.defaulted;\n', '        emit AgreementDefaulted(\n', '            tokens.initialUSDCDebt - agreementState.accumulatedRepayments\n', '        );\n', '    }\n', '\n', "    //if true, degen can't call their debt\n", '    function isDebtorHealthy() public view returns (bool) {\n', '        int256 months = monthsAhead();\n', '        bool moreThanMonthBehind = months <= -1;\n', '        if (months == 0) {\n', '            //accounts for being at least 1 day overdue\n', '            int256 arrears =\n', '                int256(expectedPayments()) -\n', '                    int256(agreementState.accumulatedRepayments);\n', '            moreThanMonthBehind = arrears > 0;\n', '        }\n', '        return !moreThanMonthBehind;\n', '    }\n', '\n', '    function degenWithdraw() public {\n', '        require(\n', '            msg.sender == users.DGVC,\n', '            "ESCROW: only DegenVC can call this function"\n', '        );\n', '        require(\n', '            agreementState.phase == AgreementPhaseEnum.dormant,\n', '            "ESCROW: Agreement has commenced."\n', '        );\n', '        uint256 balance = IERC20(tokens.EYE).balanceOf(address(this));\n', '        IERC20(tokens.EYE).transfer(users.DGVC, balance);\n', '    }\n', '\n', '    function expectedPayments() public view returns (uint256) {\n', '        uint256 monthsElapsed = getMonthsElapsed();\n', '        return tokens.monthlyPayment * monthsElapsed;\n', '    }\n', '\n', "    //positive number means Justin has more than met his requirement. Negative means he's in arrears\n", '    function monthsAhead() public view returns (int256 months) {\n', '        uint256 expected = expectedPayments();\n', '        int256 difference =\n', '            int256(agreementState.accumulatedRepayments) - int256(expected);\n', '        months = difference / int256(tokens.monthlyPayment);\n', '    }\n', '\n', '    function getMonthsElapsed() public view returns (uint256 monthsElapsed) {\n', '        monthsElapsed = getDaysElapsed() / 31;\n', '\n', '        if (monthsElapsed > 18) {\n', '            monthsElapsed = 18;\n', '        }\n', '    }\n', '\n', '    function getDaysElapsed() public view returns (uint256 daysElapsed) {\n', '        daysElapsed =\n', '            (block.timestamp - agreementState.commencementTimeStamp) /\n', '            (1 days);\n', '    }\n', '\n', '    function getDaysUntilNextPayDate() public view returns (uint256 daysLeft) {\n', '        uint256 totalDaysElapsed = getDaysElapsed();\n', '        return 31 - (totalDaysElapsed % 31);\n', '    }\n', '\n', "    //positive number means Justin has more than met his requirement. Negative means he's in arrears\n", '    function expectedAccumulated() public view returns (uint256, uint256) {\n', '        uint256 expected = expectedPayments();\n', '\n', '        if (expected > agreementState.accumulatedRepayments) {\n', '            //Justin is behind\n', '\n', '            return (expected, agreementState.accumulatedRepayments);\n', '        } else {\n', '            //Justin is ahead\n', '\n', '            return (expected, agreementState.accumulatedRepayments);\n', '        }\n', '    }\n', '\n', '    //in the event of a critical bug, shutdown contract and withdraw EYE.\n', '    function voteForEmergencyShutdown(bool vote) public {\n', '        if (msg.sender == users.Justin) {\n', '            emergencyShutdownMultisig[EMERGENCY_SHUTDOWN_JUSTIN_INDEX] = vote;\n', '        } else if (msg.sender == users.DGVC) {\n', '            emergencyShutdownMultisig[EMERGENCY_SHUTDOWN_DEGEN_INDEX] = vote;\n', '        }\n', '\n', '        if (emergencyShutdownMultisig[0] && emergencyShutdownMultisig[1]) {\n', '            agreementState.phase = AgreementPhaseEnum.emergencyShutdown;\n', '            IERC20 eye = IERC20(tokens.EYE);\n', '            uint256 balance = eye.balanceOf(address(this));\n', '            eye.transfer(users.DGVC, balance);\n', '        }\n', '    }\n', '\n', '    function getTokenInfo()\n', '        external\n', '        view\n', '        returns (\n', '            address,\n', '            address,\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            tokens.EYE,\n', '            tokens.USDC,\n', '            tokens.initialUSDCDebt,\n', '            tokens.initialEYEDeposit,\n', '            tokens.monthlyPayment\n', '        );\n', '    }\n', '\n', '    function getUserInfo() external view returns (address, address) {\n', '        return (users.Justin, users.DGVC);\n', '    }\n', '\n', '    function getAgreementState()\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (\n', '            uint256(agreementState.phase),\n', '            agreementState.commencementTimeStamp,\n', '            agreementState.accumulatedRepayments\n', '        );\n', '    }\n', '\n', '    function changeJustin(address newJustin) public {\n', '        require(msg.sender == users.Justin);\n', '        users.Justin = newJustin;\n', '    }\n', '\n', '    function changeDGVC(address newDGVC) public {\n', '        require(msg.sender == users.DGVC);\n', '        users.DGVC = newDGVC;\n', '    }\n', '\n', '    function USDC(uint256 units) public pure returns (uint256) {\n', '        return units * ONE_USDC;\n', '    }\n', '\n', '    function EYE(uint256 units) public pure returns (uint256) {\n', '        return units * ONE_EYE;\n', '    }\n', '\n', '    function MathMin(uint256 LHS, uint256 RHS) internal pure returns (uint256) {\n', '        return LHS > RHS ? RHS : LHS;\n', '    }\n', '}']