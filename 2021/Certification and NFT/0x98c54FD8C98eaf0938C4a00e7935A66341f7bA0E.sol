['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', 'pragma solidity 0.8.2;\n', '\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'struct BassetPersonal {\n', '    // Address of the bAsset\n', '    address addr;\n', '    // Address of the bAsset\n', '    address integrator;\n', '    // An ERC20 can charge transfer fee, for example USDT, DGX tokens.\n', '    bool hasTxFee; // takes a byte in storage\n', '    // Status of the bAsset\n', '    BassetStatus status;\n', '}\n', '\n', 'struct BassetData {\n', '    // 1 Basset * ratio / ratioScale == x Masset (relative value)\n', '    // If ratio == 10e8 then 1 bAsset = 10 mAssets\n', '    // A ratio is divised as 10^(18-tokenDecimals) * measurementMultiple(relative value of 1 base unit)\n', '    uint128 ratio;\n', '    // Amount of the Basset that is held in Collateral\n', '    uint128 vaultBalance;\n', '}\n', '\n', '// Status of the Basset - has it broken its peg?\n', 'enum BassetStatus {\n', '    Default,\n', '    Normal,\n', '    BrokenBelowPeg,\n', '    BrokenAbovePeg,\n', '    Blacklisted,\n', '    Liquidating,\n', '    Liquidated,\n', '    Failed\n', '}\n', '\n', 'struct BasketState {\n', '    bool undergoingRecol;\n', '    bool failed;\n', '}\n', '\n', 'struct InvariantConfig {\n', '    uint256 a;\n', '    WeightLimits limits;\n', '}\n', '\n', 'struct WeightLimits {\n', '    uint128 min;\n', '    uint128 max;\n', '}\n', '\n', 'struct FeederConfig {\n', '    uint256 supply;\n', '    uint256 a;\n', '    WeightLimits limits;\n', '}\n', '\n', 'struct AmpData {\n', '    uint64 initialA;\n', '    uint64 targetA;\n', '    uint64 rampStartTime;\n', '    uint64 rampEndTime;\n', '}\n', '\n', 'struct FeederData {\n', '    uint256 swapFee;\n', '    uint256 redemptionFee;\n', '    uint256 govFee;\n', '    uint256 pendingFees;\n', '    uint256 cacheSize;\n', '    BassetPersonal[] bAssetPersonal;\n', '    BassetData[] bAssetData;\n', '    AmpData ampData;\n', '    WeightLimits weightLimits;\n', '}\n', '\n', 'struct AssetData {\n', '    uint8 idx;\n', '    uint256 amt;\n', '    BassetPersonal personal;\n', '}\n', '\n', 'struct Asset {\n', '    uint8 idx;\n', '    address addr;\n', '    bool exists;\n', '}\n', '\n', 'abstract contract IFeederPool {\n', '    // Mint\n', '    function mint(\n', '        address _input,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function mintMulti(\n', '        address[] calldata _inputs,\n', '        uint256[] calldata _inputQuantities,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mintOutput);\n', '\n', '    function getMintOutput(address _input, uint256 _inputQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    function getMintMultiOutput(address[] calldata _inputs, uint256[] calldata _inputQuantities)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 mintOutput);\n', '\n', '    // Swaps\n', '    function swap(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 swapOutput);\n', '\n', '    function getSwapOutput(\n', '        address _input,\n', '        address _output,\n', '        uint256 _inputQuantity\n', '    ) external view virtual returns (uint256 swapOutput);\n', '\n', '    // Redemption\n', '    function redeem(\n', '        address _output,\n', '        uint256 _mAssetQuantity,\n', '        uint256 _minOutputQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 outputQuantity);\n', '\n', '    function redeemProportionately(\n', '        uint256 _mAssetQuantity,\n', '        uint256[] calldata _minOutputQuantities,\n', '        address _recipient\n', '    ) external virtual returns (uint256[] memory outputQuantities);\n', '\n', '    function redeemExactBassets(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities,\n', '        uint256 _maxMassetQuantity,\n', '        address _recipient\n', '    ) external virtual returns (uint256 mAssetRedeemed);\n', '\n', '    function getRedeemOutput(address _output, uint256 _mAssetQuantity)\n', '        external\n', '        view\n', '        virtual\n', '        returns (uint256 bAssetOutput);\n', '\n', '    function getRedeemExactBassetsOutput(\n', '        address[] calldata _outputs,\n', '        uint256[] calldata _outputQuantities\n', '    ) external view virtual returns (uint256 mAssetAmount);\n', '\n', '    // Views\n', '    function getPrice() public view virtual returns (uint256 price, uint256 k);\n', '\n', '    function getConfig() external view virtual returns (FeederConfig memory config);\n', '\n', '    function getBasset(address _token)\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal memory personal, BassetData memory data);\n', '\n', '    function getBassets()\n', '        external\n', '        view\n', '        virtual\n', '        returns (BassetPersonal[] memory personal, BassetData[] memory data);\n', '\n', '    // SavingsManager\n', '    function collectPlatformInterest()\n', '        external\n', '        virtual\n', '        returns (uint256 mintAmount, uint256 newSupply);\n', '}\n', '\n', 'contract ModuleKeys {\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE =\n', '        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING =\n', '        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN =\n', '        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB =\n', '        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER =\n', '        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER =\n', '        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN =\n', '        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER =\n', '        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR =\n', '        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '    // keccak256("InterestValidator");\n', '    bytes32 internal constant KEY_INTEREST_VALIDATOR =\n', '        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '\n', '    function cancelProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '\n', '    function cancelLockModule(bytes32 _key) external;\n', '\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'abstract contract ImmutableModule is ModuleKeys {\n', '    INexus public immutable nexus;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        _onlyGovernor();\n', '        _;\n', '    }\n', '\n', '    function _onlyGovernor() internal view {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', 'abstract contract PausableModule is ImmutableModule {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by Governor\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by Governor\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool internal _paused = false;\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     * Hooks into the Module to give the Governor ability to pause\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) ImmutableModule(_nexus) {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     * @return Returns `true` when paused, otherwise `false`\n', '     */\n', '    function paused() external view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Called by the Governor to pause, triggers stopped state.\n', '     */\n', '    function pause() external onlyGovernor whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Called by Governor to unpause, returns to normal state.\n', '     */\n', '    function unpause() external onlyGovernor whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(msg.sender);\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title   InterestValidator\n', ' * @author  mStable\n', ' * @notice  Simply validates the platform interest collection from the Feeder Pools. Normally this function\n', ' *          is supported by the SavingsManager, which then distributes the inflated tokens to SAVE contracts.\n', ' *          However, given that fPools collect value internally, we simply want to provide protections here\n', ' *          without actually inflating supply. As such, this code is forked from `savings/SavingsManager.sol`.\n', ' * @dev     VERSION: 1.0\n', ' *          DATE:    2021-03-01\n', ' */\n', 'contract InterestValidator is PausableModule {\n', '    event InterestCollected(\n', '        address indexed feederPool,\n', '        uint256 interest,\n', '        uint256 newTotalSupply,\n', '        uint256 apy\n', '    );\n', '\n', '    // Utils to help keep interest under check\n', '    uint256 private constant SECONDS_IN_YEAR = 365 days;\n', '    // Theoretical cap on APY to avoid excess inflation\n', '    uint256 private constant MAX_APY = 15e18;\n', '\n', '    mapping(address => uint256) public lastBatchCollected;\n', '\n', '    constructor(address _nexus) PausableModule(_nexus) {}\n', '\n', '    /**\n', '     * @notice Collects and validates the interest of n feeder pools.\n', '     * @dev First calls to calculate the interest that has accrued, and then validates the potential inflation\n', '     * with respect to the previous timestamp.\n', '     * @param _feeders     Addresses of the feeder pools on which to accrue interest\n', '     */\n', '    function collectAndValidateInterest(address[] calldata _feeders) external whenNotPaused {\n', '        uint256 currentTime = block.timestamp;\n', '\n', '        uint256 len = _feeders.length;\n', '\n', '        for (uint256 i = 0; i < len; i++) {\n', '            address feeder = _feeders[i];\n', '\n', '            uint256 previousBatch = lastBatchCollected[feeder];\n', '            uint256 timeSincePreviousBatch = currentTime - previousBatch;\n', '            require(timeSincePreviousBatch > 12 hours, "Cannot collect twice in 12 hours");\n', '            lastBatchCollected[feeder] = currentTime;\n', '\n', '            // Batch collect\n', '            (uint256 interestCollected, uint256 totalSupply) =\n', '                IFeederPool(feeder).collectPlatformInterest();\n', '\n', '            if (interestCollected > 0) {\n', '                // Validate APY\n', '                uint256 apy =\n', '                    _validateCollection(totalSupply, interestCollected, timeSincePreviousBatch);\n', '\n', '                emit InterestCollected(feeder, interestCollected, totalSupply, apy);\n', '            } else {\n', '                emit InterestCollected(feeder, interestCollected, totalSupply, 0);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Validates that an interest collection does not exceed a maximum APY. If last collection\n', '     * was under 30 mins ago, simply check it does not exceed 10bps\n', '     * @param _newSupply               New total supply of the mAsset\n', '     * @param _interest                Increase in total supply since last collection\n', '     * @param _timeSinceLastCollection Seconds since last collection\n', '     */\n', '    function _validateCollection(\n', '        uint256 _newSupply,\n', '        uint256 _interest,\n', '        uint256 _timeSinceLastCollection\n', '    ) internal pure returns (uint256 extrapolatedAPY) {\n', '        // Percentage increase in total supply\n', '        // e.g. (1e20 * 1e18) / 1e24 = 1e14 (or a 0.01% increase)\n', '        // e.g. (5e18 * 1e18) / 1.2e24 = 4.1667e12\n', '        // e.g. (1e19 * 1e18) / 1e21 = 1e16\n', '        uint256 oldSupply = _newSupply - _interest;\n', '        uint256 percentageIncrease = (_interest * 1e18) / oldSupply;\n', '\n', '        //      If over 30 mins, extrapolate APY\n', '        // e.g. day: (86400 * 1e18) / 3.154e7 = 2.74..e15\n', '        // e.g. 30 mins: (1800 * 1e18) / 3.154e7 = 5.7..e13\n', '        // e.g. epoch: (1593596907 * 1e18) / 3.154e7 = 50.4..e18\n', '        uint256 yearsSinceLastCollection = (_timeSinceLastCollection * 1e18) / SECONDS_IN_YEAR;\n', '\n', '        // e.g. 0.01% (1e14 * 1e18) / 2.74..e15 = 3.65e16 or 3.65% apr\n', '        // e.g. (4.1667e12 * 1e18) / 5.7..e13 = 7.1e16 or 7.1% apr\n', '        // e.g. (1e16 * 1e18) / 50e18 = 2e14\n', '        extrapolatedAPY = (percentageIncrease * 1e18) / yearsSinceLastCollection;\n', '\n', '        require(extrapolatedAPY < MAX_APY, "Interest protected from inflating past maxAPY");\n', '    }\n', '}']