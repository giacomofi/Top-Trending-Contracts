['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', 'pragma solidity 0.7.0;\n', '\n', 'interface IERC20 {\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '}\n', '\n', 'interface IAlphaStaking {\n', '    function stake(uint256 amount) external;\n', '    function getStakeValue(address user) external view returns (uint);\n', '}\n', '\n', '\n', 'contract AlphaPerpetualStaking {\n', '    IERC20 public constant alphaToken = IERC20(0xa1faa113cbE53436Df28FF0aEe54275c13B40975);\n', '    IAlphaStaking public constant alphaStakingContract = IAlphaStaking(0x2aA297c3208bD98a9a477514d3C80ace570A6deE);\n', '    \n', '    mapping(address => uint256) stakedAmount;\n', '    \n', '    constructor() {\n', '        alphaToken.approve(address(alphaStakingContract), uint256(-1));\n', '    }\n', '\n', '    function stakeForever(uint256 amount) external{\n', '        alphaToken.transferFrom(msg.sender,address(this),amount);\n', '        alphaStakingContract.stake(amount);\n', '        stakedAmount[msg.sender] += amount;\n', '    }\n', '    \n', '    function getStakedAmount(address user) external view returns(uint256) {\n', '        return stakedAmount[user];\n', '    }\n', '}']