['//Contract based on https://docs.openzeppelin.com/contracts/3.x/erc721\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC721.sol";\n', 'import "./Ownable.sol";\n', 'import "./SafeMath.sol";\n', 'import "./EnumerableMap.sol";\n', 'import "./ERC721Enumerable.sol";\n', 'import "./ERC1155.sol";\n', '\t\t                                                                          \n', '//                        ,(((((((((((((((((((((((((,                          \n', '//                    #####((((((((((((((((((((((((((((((.                     \n', '//                ,#######((((((((((((((((((((((((((((((((((/                  \n', '//             .##########(((((((((((((((((((((((((((((((((((((                \n', '//          ..#########(##((((((((((((((///***,,,,,....,,,##%%(%#%             \n', '//       ....############(((##%(*,,.....,,,/(////#/#(#,*,*%#(/*/*(%            \n', '//      ....###########(/%(,,,(/#/##%%*&#**,/,(((#&/%(&#%##((%(*///#           \n', '//    .....#######(/*,(**#(*##&#&@%%%&/%*/*%(*%,(,,./(/.#*#,%#(%%.,##          \n', '//  &%.....###&%%#**(*/*(((,/%*/%((&%&(#((((((((((((((((((((((((((((,          \n', '//   #(##,,#(**(&*#/%%#%((((((((((((((((((((((((((((((((((((((((((((/          \n', '//  ..##/###&##########(((((((((((((((((((((((((((((((((((((((((((((/          \n', '// /(/,,/&,#############((((((((((((((((((((((((((((((((((((((((((((*          \n', '//  ....,,,###@&&&&@&@@@&&&%%#&@@@@@@@@@@@@@@@@@%(((((((((#&@@@@@@@&           \n', '//  ....,,,##@###########(#&@@@@@@@(&@@@@@@@&%##(#@@@@@&(((((@@&%#(@&&         \n', '//  .....,,,#############(#(((((%@((@@@@@@@@&%##%&%@@&@(((%@@@@&%//,&          \n', '//  .....,,,,################((((@((#@@@@@@@&%#%&&@&(#@(#@@@@@@(// &,          \n', '//   .....,,,,#################((#@(((#@@@@&%##%&@@(((#@@@@@@(((/  @           \n', '//    .....,,,,,###################@(((((##%%#((@%((((((@((((((  @&            \n', '//      ....,,,,,,##################%@@@&&&@@@&(((((((((((#&&&&%               \n', '//       .......,,,,,####################################/                     \n', '//          ......,,,,,,,,%%##########%%%%%%%%%%%%%%/.                         \n', '//            .........,,,,,,,%@@@@@@@@@@*///*@@@@,                            \n', '//                 .........,@@@@*@@@@@#@#([email\xa0protected]&&/@(                            \n', '//                    [email\xa0protected]@@@@@@@@@@@@@&&&%&%&@&@@                           \n', '//                    [email\xa0protected]@@@@@@@@@@@@@@@@@&&@@@@@@@                          \n', '//                   [email\xa0protected]&@&&@&@@@&&@&&&&&&@@&/@@@@@@                         \n', '//                  ....&&&&&&&&&@@@&&&#&&&&&&&%&&&&@@@                        \n', '//                 ....&&&&&%&&&&@&&%%&%%%%%&&%&&&&&@@&&                       \n', '//                ....%%%%%%%%&&&&&&%%%%%%%%%%&%%&&&&@&&*      \n', '//\n', '//\n', '//  F#ck you nerd. You found me!\n', '//  Join #IFoundTheAlienBoyContract at https://discord.gg/4TCeBSDbSh\n', '\n', '\n', 'contract TheAlienBoy is ERC721Enumerable, Ownable  {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    // Token detail\n', '    struct AlienDetail {\n', '        uint256 first_encounter;\n', '    }\n', '\n', '    // Events\n', '    event TokenMinted(uint256 tokenId, address owner, uint256 first_encounter);\n', '\n', '    // Token Detail\n', '    mapping( uint256 => AlienDetail) private _alienDetails;\n', '\n', '    // Provenance number\n', '    string public PROVENANCE = "";\n', '\n', '    // Starting index\n', '    uint256 public STARTING_INDEX;\n', '\n', '    // Max amount of token to purchase per account each time\n', '    uint public MAX_PURCHASE = 50;\n', '\n', '    // Maximum amount of tokens to supply.\n', '    uint256 public MAX_TOKENS = 10000;\n', '\n', '    // Current price.\n', '    uint256 public CURRENT_PRICE = 80000000000000000;\n', '\n', '    // Define if sale is active\n', '    bool public saleIsActive = true;\n', '\n', '    // Base URI\n', '    string private baseURI;\n', '\n', '    /**\n', '     * Contract constructor\n', '     */\n', '    constructor(string memory name, string memory symbol, string memory baseURIp, uint256 startingIndex) ERC721(name, symbol) {\n', '        setBaseURI(baseURIp);\n', '        STARTING_INDEX = startingIndex;\n', '    }\n', '\n', '    /**\n', '     * Withdraw\n', '     */\n', '    function withdraw() public onlyOwner {\n', '        uint balance = address(this).balance;\n', '        payable(msg.sender).transfer(balance);\n', '    }\n', '\n', '    /**\n', '     * Reserve tokens\n', '     */\n', '    function reserveTokens() public onlyOwner {\n', '        uint i;\n', '        uint tokenId;\n', '        uint256 first_encounter = block.timestamp;\n', '\n', '        for (i = 1; i <= 50; i++) {\n', '            tokenId = totalSupply().add(1);\n', '            if (tokenId <= MAX_TOKENS) {\n', '                _safeMint(msg.sender, tokenId);\n', '                _alienDetails[tokenId] = AlienDetail(first_encounter);\n', '                emit TokenMinted(tokenId, msg.sender, first_encounter);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Mint a specific token. \n', '     */\n', '    function mintTokenId(uint tokenId) public onlyOwner {\n', '        require(!_exists(tokenId), "Token was minted");\n', '        uint256 first_encounter = block.timestamp;\n', '        \n', '        _safeMint(msg.sender, tokenId);\n', '        _alienDetails[tokenId] = AlienDetail(first_encounter);\n', '        emit TokenMinted(tokenId, msg.sender, first_encounter);\n', '    }\n', '\n', '    /*     \n', "    * Set provenance once it's calculated\n", '    */\n', '    function setProvenanceHash(string memory provenanceHash) public onlyOwner {\n', '        PROVENANCE = provenanceHash;\n', '    }\n', '\n', '    /*     \n', '    * Set max tokens\n', '    */\n', '    function setMaxTokens(uint256 maxTokens) public onlyOwner {\n', '        MAX_TOKENS = maxTokens;\n', '    }\n', '\n', '    /*\n', '    * Pause sale if active, make active if paused\n', '    */\n', '    function setSaleState(bool newState) public onlyOwner {\n', '        saleIsActive = newState;\n', '    }\n', '\n', '    /**\n', '    * Mint Alien\n', '    */\n', '    function mintAlien(uint numberOfTokens) public payable {\n', '        require(saleIsActive, "Mint is not available right now");\n', '        require(numberOfTokens <= MAX_PURCHASE, "Can only mint 50 tokens at a time");\n', '        require(totalSupply().add(numberOfTokens) <= MAX_TOKENS, "Purchase would exceed max supply of Aliens");\n', '        require(CURRENT_PRICE.mul(numberOfTokens) <= msg.value, "Value sent is not correct");\n', '        uint256 first_encounter = block.timestamp;\n', '        uint tokenId;\n', '        \n', '        for(uint i = 1; i <= numberOfTokens; i++) {\n', '            tokenId = totalSupply().add(1);\n', '            if (tokenId <= MAX_TOKENS) {\n', '                _safeMint(msg.sender, tokenId);\n', '                _alienDetails[tokenId] = AlienDetail(first_encounter);\n', '                \n', '                emit TokenMinted(tokenId, msg.sender, first_encounter);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Set the starting index for the collection\n', '     */\n', '    function setStartingIndex(uint256 startingIndex) public onlyOwner {\n', '        STARTING_INDEX = startingIndex;\n', '    }\n', '\n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function setBaseURI(string memory BaseURI) public onlyOwner {\n', '       baseURI = BaseURI;\n', '    }\n', '\n', '     /**\n', '     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n', '     * in child contracts.\n', '     */\n', '    function _baseURI() internal view virtual override returns (string memory) {\n', '        return baseURI;\n', '    }\n', '\n', '   /**\n', '     * Set the current token price\n', '     */\n', '    function setCurrentPrice(uint256 currentPrice) public onlyOwner {\n', '        CURRENT_PRICE = currentPrice;\n', '    }\n', '\n', '    /**\n', '     * Get the token detail\n', '     */\n', '    function getAlienDetail(uint256 tokenId) public view returns(AlienDetail memory detail) {\n', '        require(_exists(tokenId), "Token was not minted");\n', '\n', '        return _alienDetails[tokenId];\n', '    }\n', '}']