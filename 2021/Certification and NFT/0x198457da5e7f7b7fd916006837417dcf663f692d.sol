['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-27\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.0 https://hardhat.org\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/math/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/IQLF.sol\n', '\n', '\n', '/**\n', ' * @author          Yisi Liu\n', ' * @contact         [email\xa0protected]\n', ' * @author_time     01/06/2021\n', '**/\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', 'abstract contract IQLF is IERC165 {\n', '    /**\n', '     * @dev Returns if the given address is qualified, implemented on demand.\n', '     */\n', '    function ifQualified (address account) virtual external view returns (bool);\n', '\n', '    /**\n', '     * @dev Logs if the given address is qualified, implemented on demand.\n', '     */\n', '    function logQualified (address account, uint256 ito_start_time) virtual external returns (bool);\n', '\n', '    /**\n', '     * @dev Ensure that custom contract implements `ifQualified` amd `logQualified` correctly.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) virtual external override pure returns (bool) {\n', '        return interfaceId == this.supportsInterface.selector || \n', '            interfaceId == (this.ifQualified.selector ^ this.logQualified.selector);\n', '    }\n', '\n', '    /**\n', '     * @dev Emit when `ifQualified` is called to decide if the given `address`\n', '     * is `qualified` according to the preset rule by the contract creator and \n', '     * the current block `number` and the current block `timestamp`.\n', '     */\n', '    event Qualification(address account, bool qualified, uint256 blockNumber, uint256 timestamp);\n', '}\n', '\n', '\n', '// File contracts/ito.sol\n', '\n', '\n', '/**\n', ' * @author          Yisi Liu\n', ' * @contact         [email\xa0protected]\n', ' * @author_time     01/06/2021\n', ' * @maintainer      Hancheng Zhou, Yisi Liu\n', ' * @maintain_time   04/15/2021\n', '**/\n', '\n', 'pragma solidity >= 0.8.0;\n', '\n', '\n', '\n', '\n', 'contract HappyTokenPool {\n', '\n', '    struct Pool {\n', '        uint256 packed1;            // qualification_address(160) the smart contract address to verify qualification\n', '                                    // hash(40) start_time_delta(28) \n', '                                    // expiration_time_delta(28) BIG ENDIAN\n', '        uint256 packed2;            // total_tokens(128) limit(128)\n', '        uint48  unlock_time;        // unlock_time + base_time = real_time\n', '        address creator;\n', '        address token_address;      // the target token address\n', '        address[] exchange_addrs;   // a list of ERC20 addresses for swapping\n', '        uint128[] exchanged_tokens; // a list of amounts of swapped tokens\n', '        uint128[] ratios;           // a list of swap ratios\n', '                                    // length = 2 * exchange_addrs.length\n', '                                    // [address1, target, address2, target, ...]\n', '                                    // e.g. [1, 10]\n', '                                    // represents 1 tokenA to swap 10 target token\n', '                                    // note: each ratio pair needs to be coprime\n', '        mapping(address => uint256) swapped_map;      // swapped amount of an address\n', '    }\n', '\n', '    struct Packed {\n', '        uint256 packed1;\n', '        uint256 packed2;\n', '    }\n', '\n', '    // swap pool filling success event\n', '    event FillSuccess (\n', '        uint256 total,\n', '        bytes32 id,\n', '        address creator,\n', '        uint256 creation_time,\n', '        address token_address,\n', '        string message\n', '    );\n', '\n', '    // swap success event\n', '    event SwapSuccess (\n', '        bytes32 id,\n', '        address swapper,\n', '        address from_address,\n', '        address to_address,\n', '        uint256 from_value,\n', '        uint256 to_value\n', '    );\n', '\n', '    // claim success event\n', '    event ClaimSuccess (\n', '        bytes32 id,\n', '        address claimer,\n', '        uint256 timestamp,\n', '        uint256 to_value,\n', '        address token_address\n', '    );\n', '\n', '    // swap pool destruct success event\n', '    event DestructSuccess (\n', '        bytes32 id,\n', '        address token_address,\n', '        uint256 remaining_balance,\n', '        uint128[] exchanged_values\n', '    );\n', '\n', '    // single token withdrawl from a swap pool success even\n', '    event WithdrawSuccess (\n', '        bytes32 id,\n', '        address token_address,\n', '        uint256 withdraw_balance\n', '    );\n', '\n', '    modifier creatorOnly {\n', '        require(msg.sender == contract_creator, "Contract Creator Only");\n', '        _;\n', '    }\n', '\n', '    using SafeERC20 for IERC20;\n', '    uint32 nonce;\n', '    uint224 base_time;                 // timestamp = base_time + delta to save gas\n', '    address public contract_creator;\n', '    mapping(bytes32 => Pool) pool_by_id;    // maps an id to a Pool instance\n', '    string constant private magic = "Prince Philip, Queen Elizabeth II\'s husband, has died aged 99, \\\n', '    Buckingham Palace has announced. A statement issued by the palace just after midday spoke of the \\\n', '    Queen\'s deep sorrow following his death at Windsor Castle on Friday morning. The Duke of Edinbur";\n', '    bytes32 private seed;\n', '    address DEFAULT_ADDRESS = 0x0000000000000000000000000000000000000000;       // a universal address\n', '\n', '    constructor() {\n', '        contract_creator = msg.sender;\n', '        seed = keccak256(abi.encodePacked(magic, block.timestamp, contract_creator));\n', '        base_time = 1616976000;                                    // 00:00:00 03/30/2021 GMT(UTC+0)\n', '    }\n', '\n', '    /**\n', '     * @dev \n', '     * fill_pool() creates a swap pool with specific parameters from input\n', '     * _hash                sha3-256(password)\n', '     * _start               start time delta, real start time = base_time + _start\n', '     * _end                 end time delta, real end time = base_time + _end\n', '     * message              swap pool creation message, only stored in FillSuccess event\n', '     * _exchange_addrs      swap token list (0x0 for ETH, only supports ETH and ERC20 now)\n', '     * _ratios              swap pair ratio list\n', '     * _unlock_time         unlock time delta real unlock time = base_time + _unlock_time\n', '     * _token_addr          swap target token address\n', '     * _total_tokens        target token total swap amount\n', '     * _limit               target token single swap limit\n', '     * _qualification       the qualification contract address based on IQLF to determine qualification\n', '     * This function takes the above parameters and creates the pool. _total_tokens of the target token\n', '     * will be successfully transferred to this contract securely on a successful run of this function.\n', '    **/\n', '    function fill_pool (bytes32 _hash, uint256 _start, uint256 _end, string memory message,\n', '                        address[] memory _exchange_addrs, uint128[] memory _ratios, uint256 _unlock_time,\n', '                        address _token_addr, uint256 _total_tokens, uint256 _limit, address _qualification)\n', '    public payable {\n', '        nonce ++;\n', '        require(_start < _end, "Start time should be earlier than end time.");\n', '        require(_end < _unlock_time || _unlock_time == 0, "End time should be earlier than unlock time");\n', '        require(_limit <= _total_tokens, "Limit needs to be less than or equal to the total supply");\n', '        require(_total_tokens < 2 ** 128, "No more than 2^128 tokens(incluidng decimals) allowed");\n', '        require(IERC20(_token_addr).allowance(msg.sender, address(this)) >= _total_tokens, "Insuffcient allowance");\n', '        require(_exchange_addrs.length > 0, "Exchange token addresses need to be set");\n', '        require(_ratios.length == 2 * _exchange_addrs.length, "Size of ratios = 2 * size of exchange_addrs");\n', '\n', '        bytes32 _id = keccak256(abi.encodePacked(msg.sender, block.timestamp, nonce, seed));\n', '        Pool storage pool = pool_by_id[_id];\n', '        pool.packed1 = wrap1(_qualification, _hash, _start, _end);      // 256 bytes    detail in wrap1()\n', '        pool.packed2 = wrap2(_total_tokens, _limit);                    // 256 bytes    detail in wrap2()\n', '        pool.unlock_time = uint48(_unlock_time);                        // 48  bytes    unlock_time 0 -> unlocked\n', '        pool.creator = msg.sender;                                      // 160 bytes    pool creator\n', '        pool.exchange_addrs = _exchange_addrs;                          // 160 bytes    target token\n', '        pool.token_address = _token_addr;                               // 160 bytes    target token address\n', '\n', '        // Init each token swapped amount to 0\n', '        for (uint256 i = 0; i < _exchange_addrs.length; i++) {\n', '            if (_exchange_addrs[i] != DEFAULT_ADDRESS) {\n', '                // TODO: Is there a better way to validate an ERC20?\n', '                require(IERC20(_exchange_addrs[i]).totalSupply() > 0, "Not a valid ERC20");\n', '            }\n', '            pool.exchanged_tokens.push(0); \n', '        }\n', '\n', '        // Make sure each ratio is co-prime to prevent overflow\n', '        for (uint256 i = 0; i < _ratios.length; i+= 2) {\n', '            uint256 divA = SafeMath.div(_ratios[i], _ratios[i+1]);      // Non-zero checked by SafteMath.div\n', '            uint256 divB = SafeMath.div(_ratios[i+1], _ratios[i]);      // Non-zero checked by SafteMath.div\n', '            \n', '            if (_ratios[i] == 1) {\n', '                require(divB == _ratios[i+1]);\n', '            } else if (_ratios[i+1] == 1) {\n', '                require(divA == _ratios[i]);\n', '            } else {\n', '                // if a and b are co-prime, then a / b * b != a and b / a * a != b\n', '                require(divA * _ratios[i+1] != _ratios[i]);\n', '                require(divB * _ratios[i] != _ratios[i+1]);\n', '            }\n', '        }\n', '        pool.ratios = _ratios;                                          // 256 * k\n', '        IERC20(_token_addr).safeTransferFrom(msg.sender, address(this), _total_tokens);\n', '\n', '        emit FillSuccess(_total_tokens, _id, msg.sender, block.timestamp, _token_addr, message);\n', '    }\n', '\n', '    /**\n', '     * @dev\n', '     * swap() allows users to swap tokens in a swap pool\n', '     * id                   swap pool id\n', '     * verification         sha3-256(sha3-256(password)[:40]+swapper_address)\n', '     * validation           sha3-256(swapper_address)\n', '     * exchange_addr_i     the index of the exchange address of the list\n', '     * input_total          the input amount of the specific token\n', '     * This function is called by the swapper who approves the specific ERC20 or directly transfer the ETH\n', '     * first and wants to swap the desired amount of the target token. The swapped amount is calculated\n', '     * based on the pool ratio. After swap successfully, the same account can not swap the same pool again.\n', '    **/\n', '\n', '    function swap (bytes32 id, bytes32 verification, \n', '                   bytes32 validation, uint256 exchange_addr_i, uint128 input_total) \n', '    public payable returns (uint256 swapped) {\n', '\n', '        Pool storage pool = pool_by_id[id];\n', '        Packed memory packed = Packed(pool.packed1, pool.packed2);\n', '        require (\n', '            IQLF(\n', '                address(\n', '                    uint160(unbox(packed.packed1, 0, 160)))\n', '                ).logQualified(msg.sender, uint256(unbox(packed.packed1, 200, 28) + base_time)\n', '            ) == true, \n', '            "Not Qualified"\n', '        );\n', '        require (unbox(packed.packed1, 200, 28) + base_time < block.timestamp, "Not started.");\n', '        require (unbox(packed.packed1, 228, 28) + base_time > block.timestamp, "Expired.");\n', '        // sha3(sha3(passowrd)[:40] + msg.sender) so that the raw password will never appear in the contract\n', '        require (verification == keccak256(abi.encodePacked(unbox(packed.packed1, 160, 40), msg.sender)), \n', "                 'Wrong Password');\n", '        // sha3(msg.sender) to protect from front runs (but this is kinda naive since the contract is open sourced)\n', '        require (validation == keccak256(abi.encodePacked(msg.sender)), "Validation Failed");\n', '\n', '        uint256 total_tokens = unbox(packed.packed2, 0, 128);\n', '        // revert if the pool is empty\n', '        require (total_tokens > 0, "Out of Stock");\n', '\n', '        address exchange_addr = pool.exchange_addrs[exchange_addr_i];\n', '        uint256 ratioA = pool.ratios[exchange_addr_i*2];\n', '        uint256 ratioB = pool.ratios[exchange_addr_i*2 + 1];\n', '        // check if the input is enough for the desired transfer\n', '        if (exchange_addr == DEFAULT_ADDRESS) {\n', "            require(msg.value == input_total, 'No enough ether.');\n", '        } else {\n', '            uint256 allowance = IERC20(exchange_addr).allowance(msg.sender, address(this));\n', "            require(allowance >= input_total, 'No enough allowance.');\n", '        }\n', '\n', '        uint256 swapped_tokens;\n', "        // this calculation won't be overflow thanks to the SafeMath and the co-prime test\n", '        swapped_tokens = SafeMath.div(SafeMath.mul(input_total, ratioB), ratioA);       // 2^256=10e77 >> 10e18 * 10e18\n', '        require(swapped_tokens > 0, "Better not draw water with a sieve");\n', '\n', '        uint256 limit = unbox(packed.packed2, 128, 128);\n', '        if (swapped_tokens > limit) {\n', "            // don't be greedy - you can only get at most limit tokens\n", '            swapped_tokens = limit;\n', '            input_total = uint128(SafeMath.div(SafeMath.mul(limit, ratioA), ratioB));           // Update input_total\n', '        } else if (swapped_tokens > total_tokens) {\n', '            // if the left tokens are not enough\n', '            swapped_tokens = total_tokens;\n', '            input_total = uint128(SafeMath.div(SafeMath.mul(total_tokens, ratioA), ratioB));    // Update input_total\n', '            // return the eth\n', '            if (exchange_addr == DEFAULT_ADDRESS)\n', '                payable(msg.sender).transfer(msg.value - input_total);\n', '        }\n', '        require(swapped_tokens <= limit);                                                       // make sure again\n', '        pool.exchanged_tokens[exchange_addr_i] = uint128(SafeMath.add(pool.exchanged_tokens[exchange_addr_i], \n', '                                                                      input_total));            // update exchanged\n', '\n', '        // penalize greedy attackers by placing duplication check at the very last\n', '        require (pool.swapped_map[msg.sender] == 0, "Already swapped");\n', '\n', '        // update the remaining tokens and swapped token mapping\n', '        pool.packed2 = rewriteBox(packed.packed2, 0, 128, SafeMath.sub(total_tokens, swapped_tokens));\n', '        pool.swapped_map[msg.sender] = swapped_tokens;\n', '\n', '        // transfer the token after state changing\n', '        // ETH comes with the tx, but ERC20 does not - INPUT\n', '        if (exchange_addr != DEFAULT_ADDRESS) {\n', '            IERC20(exchange_addr).safeTransferFrom(msg.sender, address(this), input_total);\n', '        }\n', '\n', '        // Swap success event\n', '        emit SwapSuccess(id, msg.sender, exchange_addr, pool.token_address, input_total, swapped_tokens);\n', '\n', '        // if unlock_time == 0, transfer the swapped tokens to the recipient address (msg.sender) - OUTPUT\n', '        // if not, claim() needs to be called to get the token\n', '        if (pool.unlock_time == 0) {\n', '            transfer_token(pool.token_address, address(this), msg.sender, swapped_tokens);\n', '            emit ClaimSuccess(id, msg.sender, block.timestamp, swapped_tokens, pool.token_address);\n', '        }\n', '            \n', '        return swapped_tokens;\n', '    }\n', '\n', '    /**\n', '     * check_availability() returns a bunch of pool info given a pool id\n', '     * id                    swap pool id\n', '     * this function returns 1. exchange_addrs that can be used to determine the index\n', '     *                       2. remaining target tokens\n', '     *                       3. if started\n', '     *                       4. if ended\n', '     *                       5. swapped amount of the query address\n', '     *                       5. exchanged amount of each token\n', '    **/\n', '\n', '    function check_availability (bytes32 id) external view \n', '        returns (address[] memory exchange_addrs, uint256 remaining, \n', '                 bool started, bool expired, bool unlocked, uint256 unlock_time,\n', '                 uint256 swapped, uint128[] memory exchanged_tokens) {\n', '        Pool storage pool = pool_by_id[id];\n', '        return (\n', '            pool.exchange_addrs,                                                // exchange_addrs 0x0 means destructed\n', '            unbox(pool.packed2, 0, 128),                                        // remaining\n', '            block.timestamp > unbox(pool.packed1, 200, 28) + base_time,         // started\n', '            block.timestamp > unbox(pool.packed1, 228, 28) + base_time,         // expired\n', '            block.timestamp > pool.unlock_time + base_time,                     // unlocked\n', '            pool.unlock_time + base_time,                                       // unlock_time\n', '            pool.swapped_map[msg.sender],                                       // swapped number \n', '            pool.exchanged_tokens                                               // exchanged tokens\n', '        );\n', '    }\n', '\n', '    function claim(bytes32[] memory ito_ids) public {\n', '        uint256 claimed_amount;\n', '        for (uint256 i = 0; i < ito_ids.length; i++) {\n', '            Pool storage pool = pool_by_id[ito_ids[i]];\n', '            if (pool.unlock_time + base_time > block.timestamp)\n', '                continue;\n', '            claimed_amount = pool.swapped_map[msg.sender];\n', '            if (claimed_amount == 0)\n', '                continue;\n', '            pool.swapped_map[msg.sender] = 0;\n', '            transfer_token(pool.token_address, address(this), msg.sender, claimed_amount);\n', '\n', '            emit ClaimSuccess(ito_ids[i], msg.sender, block.timestamp, claimed_amount, pool.token_address);\n', '        }\n', '    }\n', '\n', '    function setUnlockTime(bytes32 id, uint256 _unlock_time) public {\n', '        Pool storage pool = pool_by_id[id];\n', '        require(pool.creator == msg.sender, "Pool Creator Only");\n', '        pool.unlock_time = uint48(_unlock_time);\n', '    }\n', '\n', '    /**\n', '     * destruct() destructs the given pool given the pool id\n', '     * id                    swap pool id\n', '     * this function can only be called by the pool creator. after validation, it transfers all the remaining token \n', '     * (if any) and all the swapped tokens to the pool creator. it will then destruct the pool by reseting almost \n', '     * all the variables to zero to get the gas refund.\n', '     * note that this function may not work if a pool needs to transfer over ~200 tokens back to the address due to \n', '     * the block gas limit. we have another function withdraw() to help the pool creator to withdraw a single token \n', '    **/\n', '\n', '    function destruct (bytes32 id) public {\n', '        Pool storage pool = pool_by_id[id];\n', '        require(msg.sender == pool.creator, "Only the pool creator can destruct.");\n', '\n', '        uint256 expiration = unbox(pool.packed1, 228, 28) + base_time;\n', '        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\n', '        // only after expiration or the pool is empty\n', '        require(expiration <= block.timestamp || remaining_tokens == 0, "Not expired yet");\n', '\n', '        // if any left in the pool\n', '        if (remaining_tokens != 0) {\n', '            transfer_token(pool.token_address, address(this), msg.sender, remaining_tokens);\n', '        }\n', '        \n', '        // transfer the swapped tokens accordingly\n', '        // note this loop may exceed the block gas limit so if >200 exchange_addrs this may not work\n', '        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\n', '            if (pool.exchanged_tokens[i] > 0) {\n', '                // ERC20\n', '                if (pool.exchange_addrs[i] != DEFAULT_ADDRESS)\n', '                    transfer_token(pool.exchange_addrs[i], address(this), msg.sender, pool.exchanged_tokens[i]);\n', '                // ETH\n', '                else\n', '                    payable(msg.sender).transfer(pool.exchanged_tokens[i]);\n', '            }\n', '        }\n', '        emit DestructSuccess(id, pool.token_address, remaining_tokens, pool.exchanged_tokens);\n', '\n', '        // Gas Refund\n', '        pool.packed1 = 0;\n', '        pool.packed2 = 0;\n', '        pool.creator = DEFAULT_ADDRESS;\n', '        for (uint256 i = 0; i < pool.exchange_addrs.length; i++) {\n', '            pool.exchange_addrs[i] = DEFAULT_ADDRESS;\n', '            pool.exchanged_tokens[i] = 0;\n', '            pool.ratios[i*2] = 0;\n', '            pool.ratios[i*2+1] = 0;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * withdraw() transfers out a single token after a pool is expired or empty \n', '     * id                    swap pool id\n', '     * addr_i                withdraw token index\n', '     * this function can only be called by the pool creator. after validation, it transfers the addr_i th token \n', '     * out to the pool creator address.\n', '    **/\n', '\n', '    function withdraw (bytes32 id, uint256 addr_i) public {\n', '        Pool storage pool = pool_by_id[id];\n', '        require(msg.sender == pool.creator, "Only the pool creator can withdraw.");\n', '\n', '        uint256 withdraw_balance = pool.exchanged_tokens[addr_i];\n', '        require(withdraw_balance > 0, "None of this token left");\n', '        uint256 expiration = unbox(pool.packed1, 228, 28) + base_time;\n', '        uint256 remaining_tokens = unbox(pool.packed2, 0, 128);\n', '        // only after expiration or the pool is empty\n', '        require(expiration <= block.timestamp || remaining_tokens == 0, "Not expired yet");\n', '        address token_address = pool.exchange_addrs[addr_i];\n', '\n', '        // ERC20\n', '        if (token_address != DEFAULT_ADDRESS)\n', '            transfer_token(token_address, address(this), msg.sender, withdraw_balance);\n', '        // ETH\n', '        else\n', '            payable(msg.sender).transfer(withdraw_balance);\n', '        // clear the record\n', '        pool.exchanged_tokens[addr_i] = 0;\n', '        emit WithdrawSuccess(id, token_address, withdraw_balance);\n', '    }\n', '\n', '    // helper functions TODO: migrate this to a helper file\n', '\n', '    /**\n', '     * _qualification the smart contract address to verify qualification      160\n', '     * _hash          sha3-256(password)                                      40\n', '     * _start         start time delta                                        28\n', '     * _end           end time  delta                                         28\n', '     * wrap1() inserts the above variables into a 32-word block\n', '    **/\n', '\n', '    function wrap1 (address _qualification, bytes32 _hash, uint256 _start, uint256 _end) internal pure \n', '                    returns (uint256 packed1) {\n', '        uint256 _packed1 = 0;\n', '        _packed1 |= box(0, 160,  uint256(uint160(_qualification)));     // _qualification = 160 bits\n', '        _packed1 |= box(160, 40, uint256(_hash) >> 216);                // hash = 40 bits (safe?)\n', '        _packed1 |= box(200, 28, _start);                               // start_time = 28 bits \n', '        _packed1 |= box(228, 28, _end);                                 // expiration_time = 28 bits\n', '        return _packed1;\n', '    }\n', '\n', '    /**\n', '     * _total_tokens   target remaining         128\n', '     * _limit          single swap limit        128\n', '     * wrap2() inserts the above variables into a 32-word block\n', '    **/\n', '\n', '    function wrap2 (uint256 _total_tokens, uint256 _limit) internal pure returns (uint256 packed2) {\n', '        uint256 _packed2 = 0;\n', '        _packed2 |= box(0, 128, _total_tokens);             // total_tokens = 128 bits ~= 3.4e38\n', '        _packed2 |= box(128, 128, _limit);                  // limit = 128 bits\n', '        return _packed2;\n', '    }\n', '\n', '    /**\n', '     * position      position in a memory block\n', '     * size          data size\n', '     * data          data\n', '     * box() inserts the data in a 256bit word with the given position and returns it\n', '     * data is checked by validRange() to make sure it is not over size \n', '    **/\n', '\n', '    function box (uint16 position, uint16 size, uint256 data) internal pure returns (uint256 boxed) {\n', '        require(validRange(size, data), "Value out of range BOX");\n', '        assembly {\n', '            // data << position\n', '            boxed := shl(position, data)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * position      position in a memory block\n', '     * size          data size\n', '     * base          base data\n', '     * unbox() extracts the data out of a 256bit word with the given position and returns it\n', '     * base is checked by validRange() to make sure it is not over size \n', '    **/\n', '\n', '    function unbox (uint256 base, uint16 position, uint16 size) internal pure returns (uint256 unboxed) {\n', '        require(validRange(256, base), "Value out of range UNBOX");\n', '        assembly {\n', '            // (((1 << size) - 1) & base >> position)\n', '            unboxed := and(sub(shl(size, 1), 1), shr(position, base))\n', '\n', '        }\n', '    }\n', '\n', '    /**\n', '     * size          data size\n', '     * data          data\n', '     * validRange()  checks if the given data is over the specified data size\n', '    **/\n', '\n', '    function validRange (uint16 size, uint256 data) internal pure returns(bool ifValid) { \n', '        assembly {\n', '            // 2^size > data or size ==256\n', '            ifValid := or(eq(size, 256), gt(shl(size, 1), data))\n', '        }\n', '    }\n', '\n', '    /**\n', '     * _box          32byte data to be modified\n', '     * position      position in a memory block\n', '     * size          data size\n', '     * data          data to be inserted\n', '     * rewriteBox() updates a 32byte word with a data at the given position with the specified size\n', '    **/\n', '\n', '    function rewriteBox (uint256 _box, uint16 position, uint16 size, uint256 data) \n', '                        internal pure returns (uint256 boxed) {\n', '        assembly {\n', '            // mask = ~((1 << size - 1) << position)\n', '            // _box = (mask & _box) | ()data << position)\n', '            boxed := or( and(_box, not(shl(position, sub(shl(size, 1), 1)))), shl(position, data))\n', '        }\n', '    }\n', '\n', '    /**\n', '     * token_address      ERC20 address\n', '     * sender_address     sender address\n', '     * recipient_address  recipient address\n', '     * amount             transfer amount\n', '     * transfer_token() transfers a given amount of ERC20 from the sender address to the recipient address\n', '    **/\n', '   \n', '    function transfer_token (address token_address, address sender_address,\n', '                             address recipient_address, uint256 amount) internal {\n', '        require(IERC20(token_address).balanceOf(sender_address) >= amount, "Balance not enough");\n', '        IERC20(token_address).safeTransfer(recipient_address, amount);\n', '    }\n', '    \n', '}']