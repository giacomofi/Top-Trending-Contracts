['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-22\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.11 https://hardhat.org\n', '\n', '// File contracts/solidity/interface/INFTXLPStaking.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface INFTXLPStaking {\n', '    function nftxVaultFactory() external view returns (address);\n', '    function rewardDistTokenImpl() external view returns (address);\n', '    function stakingTokenProvider() external view returns (address);\n', '    function vaultToken(address _stakingToken) external view returns (address);\n', '    function stakingToken(address _vaultToken) external view returns (address);\n', '    function rewardDistributionToken(uint256 vaultId) external view returns (address);\n', '\n', '    // Write functions.\n', '    function __NFTXLPStaking__init(address _stakingTokenProvider) external;\n', '    function setNFTXVaultFactory(address newFactory) external;\n', '    function setStakingTokenProvider(address newProvider) external;\n', '    function addPoolForVault(uint256 vaultId) external;\n', '    function receiveRewards(uint256 vaultId, uint256 amount) external returns (bool);\n', '    function deposit(uint256 vaultId, uint256 amount) external;\n', '    function exit(uint256 vaultId, uint256 amount) external;\n', '    function rescue(uint256 vaultId) external;\n', '    function withdraw(uint256 vaultId, uint256 amount) external;\n', '    function claimRewards(uint256 vaultId) external;\n', '}\n', '\n', '\n', '// File contracts/solidity/interface/INFTXFeeDistributor.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface INFTXFeeDistributor {\n', '  \n', '  struct FeeReceiver {\n', '    uint256 allocPoint;\n', '    address receiver;\n', '    bool isContract;\n', '  }\n', '\n', '  function nftxVaultFactory() external returns (address);\n', '  function lpStaking() external returns (address);\n', '  function treasury() external returns (address);\n', '  function defaultTreasuryAlloc() external returns (uint256);\n', '  function defaultLPAlloc() external returns (uint256);\n', '  function allocTotal(uint256 vaultId) external returns (uint256);\n', '  function specificTreasuryAlloc(uint256 vaultId) external returns (uint256);\n', '\n', '  // Write functions.\n', '  function __FeeDistributor__init__(address _lpStaking, address _treasury) external;\n', '  function rescueTokens(address token) external;\n', '  function distribute(uint256 vaultId) external;\n', '  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external;\n', '  function initializeVaultReceivers(uint256 _vaultId) external;\n', '  function changeMultipleReceiverAlloc(\n', '    uint256[] memory _vaultIds, \n', '    uint256[] memory _receiverIdxs, \n', '    uint256[] memory allocPoints\n', '  ) external;\n', '\n', '  function changeMultipleReceiverAddress(\n', '    uint256[] memory _vaultIds, \n', '    uint256[] memory _receiverIdxs, \n', '    address[] memory addresses, \n', '    bool[] memory isContracts\n', '  ) external;\n', '  function changeReceiverAlloc(uint256 _vaultId, uint256 _idx, uint256 _allocPoint) external;\n', '  function changeReceiverAddress(uint256 _vaultId, uint256 _idx, address _address, bool _isContract) external;\n', '  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external;\n', '\n', '  // Configuration functions.\n', '  function setTreasuryAddress(address _treasury) external;\n', '  function setDefaultTreasuryAlloc(uint256 _allocPoint) external;\n', '  function setSpecificTreasuryAlloc(uint256 _vaultId, uint256 _allocPoint) external;\n', '  function setLPStakingAddress(address _lpStaking) external;\n', '  function setNFTXVaultFactory(address _factory) external;\n', '  function setDefaultLPAlloc(uint256 _allocPoint) external;\n', '}\n', '\n', '\n', '// File contracts/solidity/proxy/IBeacon.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev This is the interface that {BeaconProxy} expects of its beacon.\n', ' */\n', 'interface IBeacon {\n', '    /**\n', '     * @dev Must return an address that can be used as a delegate call target.\n', '     *\n', '     * {BeaconProxy} will check that this address is a contract.\n', '     */\n', '    function childImplementation() external view returns (address);\n', '    function upgradeChildTo(address newImplementation) external;\n', '}\n', '\n', '\n', '// File contracts/solidity/interface/INFTXVaultFactory.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface INFTXVaultFactory is IBeacon {\n', '  // Read functions.\n', '  function numVaults() external view returns (uint256);\n', '  function zapContract() external view returns (address);\n', '  function feeDistributor() external view returns (address);\n', '  function eligibilityManager() external view returns (address);\n', '  function vault(uint256 vaultId) external view returns (address);\n', '  function vaultsForAsset(address asset) external view returns (address[] memory);\n', '  function isLocked(uint256 id) external view returns (bool);\n', '\n', '  event NewFeeDistributor(address oldDistributor, address newDistributor);\n', '  event NewZapContract(address oldZap, address newZap);\n', '  event NewEligibilityManager(address oldEligManager, address newEligManager);\n', '  event NewVault(uint256 indexed vaultId, address vaultAddress, address assetAddress);\n', '\n', '  // Write functions.\n', '  function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) external;\n', '  function createVault(\n', '      string calldata name,\n', '      string calldata symbol,\n', '      address _assetAddress,\n', '      bool is1155,\n', '      bool allowAllItems\n', '  ) external returns (uint256);\n', '  function setFeeDistributor(address _feeDistributor) external;\n', '  function setEligibilityManager(address _eligibilityManager) external;\n', '  function setZapContract(address _zapContract) external;\n', '}\n', '\n', '\n', '// File contracts/solidity/token/IERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/solidity/util/Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/util/SafeERC20Upgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20Upgradeable {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/util/SafeMathUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMathUpgradeable {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/proxy/Initializable.sol\n', '\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/util/ContextUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/solidity/util/OwnableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File contracts/solidity/util/PausableUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', 'contract PausableUpgradeable is OwnableUpgradeable {\n', '\n', '    function __Pausable_init() internal initializer {\n', '        __Ownable_init();\n', '    }\n', '\n', '    event SetPaused(uint256 lockId, bool paused);\n', '    event SetIsGuardian(address addr, bool isGuardian);\n', '\n', '    mapping(address => bool) public isGuardian;\n', '    mapping(uint256 => bool) public isPaused;\n', '    // 0 : createVault\n', '    // 1 : mint\n', '    // 2 : redeem\n', '    // 3 : swap\n', '    // 4 : flashloan\n', '\n', '    function onlyOwnerIfPaused(uint256 lockId) public view virtual {\n', '        require(!isPaused[lockId] || msg.sender == owner(), "Paused");\n', '    }\n', '\n', '    function unpause(uint256 lockId)\n', '        public\n', '        virtual\n', '        onlyOwner\n', '    {\n', '        isPaused[lockId] = false;\n', '        emit SetPaused(lockId, false);\n', '    }\n', '\n', '    function pause(uint256 lockId) public virtual {\n', '        require(isGuardian[msg.sender], "Can\'t pause");\n', '        isPaused[lockId] = true;\n', '        emit SetPaused(lockId, true);\n', '    }\n', '\n', '    function setIsGuardian(address addr, bool _isGuardian) public virtual onlyOwner {\n', '        isGuardian[addr] = _isGuardian;\n', '        emit SetIsGuardian(addr, _isGuardian);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/solidity/util/ReentrancyGuardUpgradeable.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuardUpgradeable is Initializable {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File contracts/solidity/NFTXFeeDistributor.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract NFTXFeeDistributor is INFTXFeeDistributor, ReentrancyGuardUpgradeable, PausableUpgradeable {\n', '  using SafeERC20Upgradeable for IERC20Upgradeable;\n', '\n', '  bool public distributionPaused;\n', '\n', '  address public override nftxVaultFactory;\n', '  address public override lpStaking;\n', '  address public override treasury;\n', '  uint256 private constant threshold = 10**9;\n', '  uint256 public override defaultTreasuryAlloc;\n', '  uint256 public override defaultLPAlloc;\n', '\n', '  // Total allocation points per vault. \n', '  mapping(uint256 => uint256) public override allocTotal;\n', '  // Vault-specific treasury allocations.\n', '  mapping(uint256 => uint256) public override specificTreasuryAlloc;\n', '  mapping(uint256 => FeeReceiver[]) feeReceivers;\n', '\n', '  event UpdateDefaultLPAlloc(uint256 newLPAlloc);\n', '  event UpdateDefaultTreasuryAlloc(uint256 newTreasuryAlloc);\n', '  event UpdateSpecificTreasuryAlloc(uint256 vaultId, uint256 newSpecificAlloc);\n', '\n', '  event UpdateTreasuryAddress(address newTreasury);\n', '  event UpdateLPStakingAddress(address newLPStaking);\n', '  event UpdateNFTXVaultFactory(address factory);\n', '  event PauseDistribution(bool paused); \n', '\n', '  event AddFeeReceiver(uint256 vaultId, address receiver, uint256 allocPoint);\n', '  event UpdateFeeReceiverAlloc(uint256 vaultId, address receiver, uint256 allocPoint);\n', '  event UpdateFeeReceiverAddress(uint256 vaultId, address oldReceiver, address newReceiver);\n', '  event RemoveFeeReceiver(uint256 vaultId, address receiver);\n', '  \n', '  function __FeeDistributor__init__(address _lpStaking, address _treasury) public override initializer {\n', '    __Pausable_init();\n', '    setTreasuryAddress(_treasury);\n', '    setDefaultTreasuryAlloc(0);\n', '    setLPStakingAddress(_lpStaking);\n', '    setDefaultLPAlloc(0.5 ether);\n', '  }\n', '\n', '  function distribute(uint256 vaultId) external override virtual nonReentrant {\n', '    require(nftxVaultFactory != address(0));\n', '    address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n', '\n', '    uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n', '\n', '    if (distributionPaused) {\n', '      IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n', '      return;\n', '    } \n', '\n', '    if (tokenBalance <= threshold) {\n', '      return;\n', '    }\n', '    // Leave some balance for dust since we know we have more than 10**9.\n', '    tokenBalance -= 1000;\n', '    \n', '    uint256 _treasuryAlloc = specificTreasuryAlloc[vaultId];\n', '    if (_treasuryAlloc == 0) {\n', '      _treasuryAlloc = defaultTreasuryAlloc;\n', '    }\n', '\n', '    uint256 _allocTotal = allocTotal[vaultId] + _treasuryAlloc;\n', '    uint256 amountToSend = tokenBalance * _treasuryAlloc / _allocTotal;\n', '    amountToSend = amountToSend > tokenBalance ? tokenBalance : amountToSend;\n', '    IERC20Upgradeable(_vault).safeTransfer(treasury, amountToSend);\n', '\n', '    FeeReceiver[] memory _feeReceivers = feeReceivers[vaultId];\n', '    for (uint256 i = 0; i < _feeReceivers.length; i++) {\n', '      _sendForReceiver(_feeReceivers[i], vaultId, _vault, tokenBalance, _allocTotal);\n', '    } \n', '  }\n', '\n', '  function addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) external override virtual onlyOwner  {\n', '    _addReceiver(_vaultId, _allocPoint, _receiver, _isContract);\n', '  }\n', '\n', '  function initializeVaultReceivers(uint256 _vaultId) external override {\n', '    require(msg.sender == nftxVaultFactory, "FeeReceiver: not factory");\n', '    _addReceiver(_vaultId, defaultLPAlloc, lpStaking, true);\n', '    INFTXLPStaking(lpStaking).addPoolForVault(_vaultId);\n', '  }\n', '\n', '  function changeMultipleReceiverAlloc(\n', '    uint256[] memory _vaultIds, \n', '    uint256[] memory _receiverIdxs, \n', '    uint256[] memory allocPoints\n', '  ) public override virtual onlyOwner {\n', '    require(_vaultIds.length == _receiverIdxs.length, "Lengths not equal");\n', '    require(allocPoints.length == _receiverIdxs.length, "Lengths not equal");\n', '    for (uint256 i = 0; i < _vaultIds.length; i++) {\n', '      changeReceiverAlloc(_vaultIds[i], _receiverIdxs[i], allocPoints[i]);\n', '    }\n', '  }\n', '\n', '  function changeReceiverAlloc(uint256 _vaultId, uint256 _receiverIdx, uint256 _allocPoint) public override virtual onlyOwner {\n', '    FeeReceiver storage feeReceiver = feeReceivers[_vaultId][_receiverIdx];\n', '    allocTotal[_vaultId] -= feeReceiver.allocPoint;\n', '    feeReceiver.allocPoint = _allocPoint;\n', '    allocTotal[_vaultId] += _allocPoint;\n', '    emit UpdateFeeReceiverAlloc(_vaultId, feeReceiver.receiver, _allocPoint);\n', '  }\n', '\n', '  function changeMultipleReceiverAddress(\n', '    uint256[] memory _vaultIds, \n', '    uint256[] memory _receiverIdxs, \n', '    address[] memory addresses, \n', '    bool[] memory isContracts\n', '  ) public override virtual onlyOwner {\n', '    require(_vaultIds.length == _receiverIdxs.length, "Lengths not equal");\n', '    require(addresses.length == _receiverIdxs.length, "Lengths not equal");\n', '    require(addresses.length == isContracts.length, "Lengths not equal");\n', '    for (uint256 i = 0; i < _vaultIds.length; i++) {\n', '      changeReceiverAddress(_vaultIds[i], _receiverIdxs[i], addresses[i], isContracts[i]);\n', '    }\n', '  }\n', '\n', '  function changeReceiverAddress(uint256 _vaultId, uint256 _receiverIdx, address _address, bool _isContract) public override virtual onlyOwner {\n', '    FeeReceiver storage feeReceiver = feeReceivers[_vaultId][_receiverIdx];\n', '    address oldReceiver = feeReceiver.receiver;\n', '    feeReceiver.receiver = _address;\n', '    feeReceiver.isContract = _isContract;\n', '    emit UpdateFeeReceiverAddress(_vaultId, oldReceiver, _address);\n', '  }\n', '\n', '  function removeReceiver(uint256 _vaultId, uint256 _receiverIdx) external override virtual onlyOwner {\n', '    FeeReceiver[] storage feeReceiversForVault = feeReceivers[_vaultId];\n', '    uint256 arrLength = feeReceiversForVault.length;\n', '    require(_receiverIdx < arrLength, "FeeDistributor: Out of bounds");\n', '    emit RemoveFeeReceiver(_vaultId, feeReceiversForVault[_receiverIdx].receiver);\n', '    allocTotal[_vaultId] -= feeReceiversForVault[_receiverIdx].allocPoint;\n', '    // Copy the last element to what is being removed and remove the last element.\n', '    feeReceiversForVault[_receiverIdx] = feeReceiversForVault[arrLength-1];\n', '    feeReceiversForVault.pop();\n', '  }\n', '\n', '  function setTreasuryAddress(address _treasury) public override onlyOwner {\n', '    require(_treasury != address(0), "Treasury != address(0)");\n', '    treasury = _treasury;\n', '    emit UpdateTreasuryAddress(_treasury);\n', '  }\n', '\n', '  function setDefaultTreasuryAlloc(uint256 _allocPoint) public override onlyOwner {\n', '    defaultTreasuryAlloc = _allocPoint;\n', '    emit UpdateDefaultTreasuryAlloc(_allocPoint);\n', '  }\n', '\n', '  function setSpecificTreasuryAlloc(uint256 vaultId, uint256 _allocPoint) external override onlyOwner {\n', '    specificTreasuryAlloc[vaultId] = _allocPoint;\n', '    emit UpdateSpecificTreasuryAlloc(vaultId, _allocPoint);\n', '  }\n', '\n', '  function setLPStakingAddress(address _lpStaking) public override onlyOwner {\n', '    require(_lpStaking != address(0), "LPStaking != address(0)");\n', '    lpStaking = _lpStaking;\n', '    emit UpdateLPStakingAddress(_lpStaking);\n', '  }\n', '\n', '  function setDefaultLPAlloc(uint256 _allocPoint) public override onlyOwner {\n', '    defaultLPAlloc = _allocPoint;\n', '    emit UpdateDefaultLPAlloc(_allocPoint);\n', '  }\n', '\n', '  function setNFTXVaultFactory(address _factory) external override onlyOwner {\n', '    nftxVaultFactory = _factory;\n', '    emit UpdateNFTXVaultFactory(_factory);\n', '  }\n', '\n', '  function pauseFeeDistribution(bool pause) external onlyOwner {\n', '    distributionPaused = pause;\n', '    emit PauseDistribution(pause);\n', '  }\n', '\n', '  function rescueTokens(address _address) external override onlyOwner {\n', '    uint256 balance = IERC20Upgradeable(_address).balanceOf(address(this));\n', '    IERC20Upgradeable(_address).safeTransfer(msg.sender, balance);\n', '  }\n', '\n', '  function _addReceiver(uint256 _vaultId, uint256 _allocPoint, address _receiver, bool _isContract) internal virtual {\n', '    allocTotal[_vaultId] += _allocPoint;\n', '    FeeReceiver memory _feeReceiver = FeeReceiver(_allocPoint, _receiver, _isContract);\n', '    feeReceivers[_vaultId].push(_feeReceiver);\n', '    emit AddFeeReceiver(_vaultId, _receiver, _allocPoint);\n', '  }\n', '\n', '  function _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 _tokenBalance, uint256 _allocTotal) internal virtual {\n', '    uint256 amountToSend = _tokenBalance * _receiver.allocPoint / _allocTotal;\n', "    // If we're at this point we know we have more than enough to perform this safely.\n", '    uint256 balance = IERC20Upgradeable(_vault).balanceOf(address(this)) - 1000;\n', '    amountToSend = amountToSend > balance ? balance : amountToSend;\n', '\n', '    if (_receiver.isContract) {\n', '      IERC20Upgradeable(_vault).approve(_receiver.receiver, amountToSend);\n', '      // If the receive is not properly processed, send it to the treasury instead.\n', '       \n', '      bytes memory payload = abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector, _vaultId, amountToSend);\n', '      (bool success, ) = address(_receiver.receiver).call(payload);\n', '\n', '      // If the allowance has not been spent, it means we can pass it through the treasury instead.\n', '      if (!success || IERC20Upgradeable(_vault).allowance(address(this), _receiver.receiver) > 0) {\n', '        IERC20Upgradeable(_vault).safeTransfer(treasury, amountToSend);\n', '        IERC20Upgradeable(_vault).approve(_receiver.receiver, 0);\n', '      }\n', '    } else {\n', '      IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n', '    }\n', '  }\n', '}']