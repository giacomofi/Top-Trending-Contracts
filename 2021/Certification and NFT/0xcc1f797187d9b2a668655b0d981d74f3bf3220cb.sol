['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', '// File: contracts/lib/IOracle.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', 'interface IOracle {\n', '    function getData() external returns (uint256, bool);\n', '}\n', '\n', '// File: contracts/lib/FullMath.sol\n', '\n', '// SPDX-License-Identifier: CC-BY-4.0\n', 'pragma solidity 0.6.5;\n', '\n', '// taken from https://medium.com/coinmonks/math-in-solidity-part-3-percents-and-proportions-4db014e080b1\n', '// license is CC-BY-4.0\n', 'library FullMath {\n', '    function fullMul(uint256 x, uint256 y) internal pure returns (uint256 l, uint256 h) {\n', '        uint256 mm = mulmod(x, y, uint256(-1));\n', '        l = x * y;\n', '        h = mm - l;\n', '        if (mm < l) h -= 1;\n', '    }\n', '\n', '    function fullDiv(\n', '        uint256 l,\n', '        uint256 h,\n', '        uint256 d\n', '    ) private pure returns (uint256) {\n', '        uint256 pow2 = d & -d;\n', '        d /= pow2;\n', '        l /= pow2;\n', '        l += h * ((-pow2) / pow2 + 1);\n', '        uint256 r = 1;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        r *= 2 - d * r;\n', '        return l * r;\n', '    }\n', '\n', '    function mulDiv(\n', '        uint256 x,\n', '        uint256 y,\n', '        uint256 d\n', '    ) internal pure returns (uint256) {\n', '        (uint256 l, uint256 h) = fullMul(x, y);\n', '\n', '        uint256 mm = mulmod(x, y, d);\n', '        if (mm > l) h -= 1;\n', '        l -= mm;\n', '\n', '        if (h == 0) return l / d;\n', '\n', "        require(h < d, 'FullMath: FULLDIV_OVERFLOW');\n", '        return fullDiv(l, h, d);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/Babylonian.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity 0.6.5;\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    // credit for this implementation goes to\n', '    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '    function sqrt(uint256 x) internal pure returns (uint256) {\n', '        if (x == 0) return 0;\n', '        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n', '        // however that code costs significantly more gas\n', '        uint256 xx = x;\n', '        uint256 r = 1;\n', '        if (xx >= 0x100000000000000000000000000000000) {\n', '            xx >>= 128;\n', '            r <<= 64;\n', '        }\n', '        if (xx >= 0x10000000000000000) {\n', '            xx >>= 64;\n', '            r <<= 32;\n', '        }\n', '        if (xx >= 0x100000000) {\n', '            xx >>= 32;\n', '            r <<= 16;\n', '        }\n', '        if (xx >= 0x10000) {\n', '            xx >>= 16;\n', '            r <<= 8;\n', '        }\n', '        if (xx >= 0x100) {\n', '            xx >>= 8;\n', '            r <<= 4;\n', '        }\n', '        if (xx >= 0x10) {\n', '            xx >>= 4;\n', '            r <<= 2;\n', '        }\n', '        if (xx >= 0x8) {\n', '            r <<= 1;\n', '        }\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1; // Seven iterations should be enough\n', '        uint256 r1 = x / r;\n', '        return (r < r1 ? r : r1);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/BitMath.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.6.5;\n', '\n', 'library BitMath {\n', '    // returns the 0 indexed position of the most significant bit of the input x\n', '    // s.t. x >= 2**msb and x < 2**(msb+1)\n', '    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::mostSignificantBit: zero');\n", '\n', '        if (x >= 0x100000000000000000000000000000000) {\n', '            x >>= 128;\n', '            r += 128;\n', '        }\n', '        if (x >= 0x10000000000000000) {\n', '            x >>= 64;\n', '            r += 64;\n', '        }\n', '        if (x >= 0x100000000) {\n', '            x >>= 32;\n', '            r += 32;\n', '        }\n', '        if (x >= 0x10000) {\n', '            x >>= 16;\n', '            r += 16;\n', '        }\n', '        if (x >= 0x100) {\n', '            x >>= 8;\n', '            r += 8;\n', '        }\n', '        if (x >= 0x10) {\n', '            x >>= 4;\n', '            r += 4;\n', '        }\n', '        if (x >= 0x4) {\n', '            x >>= 2;\n', '            r += 2;\n', '        }\n', '        if (x >= 0x2) r += 1;\n', '    }\n', '\n', '    // returns the 0 indexed position of the least significant bit of the input x\n', '    // s.t. (x & 2**lsb) != 0 and (x & (2**(lsb) - 1)) == 0)\n', '    // i.e. the bit at the index is set and the mask of all lower bits is 0\n', '    function leastSignificantBit(uint256 x) internal pure returns (uint8 r) {\n', "        require(x > 0, 'BitMath::leastSignificantBit: zero');\n", '\n', '        r = 255;\n', '        if (x & uint128(-1) > 0) {\n', '            r -= 128;\n', '        } else {\n', '            x >>= 128;\n', '        }\n', '        if (x & uint64(-1) > 0) {\n', '            r -= 64;\n', '        } else {\n', '            x >>= 64;\n', '        }\n', '        if (x & uint32(-1) > 0) {\n', '            r -= 32;\n', '        } else {\n', '            x >>= 32;\n', '        }\n', '        if (x & uint16(-1) > 0) {\n', '            r -= 16;\n', '        } else {\n', '            x >>= 16;\n', '        }\n', '        if (x & uint8(-1) > 0) {\n', '            r -= 8;\n', '        } else {\n', '            x >>= 8;\n', '        }\n', '        if (x & 0xf > 0) {\n', '            r -= 4;\n', '        } else {\n', '            x >>= 4;\n', '        }\n', '        if (x & 0x3 > 0) {\n', '            r -= 2;\n', '        } else {\n', '            x >>= 2;\n', '        }\n', '        if (x & 0x1 > 0) r -= 1;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/FixedPoint.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity 0.6.5;\n', '\n', '\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint256 _x;\n', '    }\n', '\n', '    uint8 public constant RESOLUTION = 112;\n', '    uint256 public constant Q112 = 0x10000000000000000000000000000; // 2**112\n', '    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000; // 2**224\n', '    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\n', '        uint256 z = 0;\n', "        require(y == 0 || (z = self._x * y) / y == self._x, 'FixedPoint::mul: overflow');\n", '        return uq144x112(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by an int and decode, returning an int\n', '    // reverts on overflow\n', '    function muli(uq112x112 memory self, int256 y) internal pure returns (int256) {\n', '        uint256 z = FullMath.mulDiv(self._x, uint256(y < 0 ? -y : y), Q112);\n', "        require(z < 2**255, 'FixedPoint::muli: overflow');\n", '        return y < 0 ? -int256(z) : int256(z);\n', '    }\n', '\n', '    // multiply a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    // lossy\n', '    function muluq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', '        if (self._x == 0 || other._x == 0) {\n', '            return uq112x112(0);\n', '        }\n', '        uint112 upper_self = uint112(self._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_self = uint112(self._x & LOWER_MASK); // * 2^-112\n', '        uint112 upper_other = uint112(other._x >> RESOLUTION); // * 2^0\n', '        uint112 lower_other = uint112(other._x & LOWER_MASK); // * 2^-112\n', '\n', '        // partial products\n', '        uint224 upper = uint224(upper_self) * upper_other; // * 2^0\n', '        uint224 lower = uint224(lower_self) * lower_other; // * 2^-224\n', '        uint224 uppers_lowero = uint224(upper_self) * lower_other; // * 2^-112\n', '        uint224 uppero_lowers = uint224(upper_other) * lower_self; // * 2^-112\n', '\n', '        // so the bit shift does not overflow\n', "        require(upper <= uint112(-1), 'FixedPoint::muluq: upper overflow');\n", '\n', '        // this cannot exceed 256 bits, all values are 224 bits\n', '        uint256 sum = uint256(upper << RESOLUTION) + uppers_lowero + uppero_lowers + (lower >> RESOLUTION);\n', '\n', '        // so the cast does not overflow\n', "        require(sum <= uint224(-1), 'FixedPoint::muluq: sum overflow');\n", '\n', '        return uq112x112(uint224(sum));\n', '    }\n', '\n', '    // divide a UQ112x112 by a UQ112x112, returning a UQ112x112\n', '    function divuq(uq112x112 memory self, uq112x112 memory other) internal pure returns (uq112x112 memory) {\n', "        require(other._x > 0, 'FixedPoint::divuq: division by zero');\n", '        if (self._x == other._x) {\n', '            return uq112x112(uint224(Q112));\n', '        }\n', '        if (self._x <= uint144(-1)) {\n', '            uint256 value = (uint256(self._x) << RESOLUTION) / other._x;\n', "            require(value <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '            return uq112x112(uint224(value));\n', '        }\n', '\n', '        uint256 result = FullMath.mulDiv(Q112, self._x, other._x);\n', "        require(result <= uint224(-1), 'FixedPoint::divuq: overflow');\n", '        return uq112x112(uint224(result));\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // can be lossy\n', '    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n', "        require(denominator > 0, 'FixedPoint::fraction: division by zero');\n", '        if (numerator == 0) return FixedPoint.uq112x112(0);\n', '\n', '        if (numerator <= uint144(-1)) {\n', '            uint256 result = (numerator << RESOLUTION) / denominator;\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        } else {\n', '            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n', "            require(result <= uint224(-1), 'FixedPoint::fraction: overflow');\n", '            return uq112x112(uint224(result));\n', '        }\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    // reverts on overflow\n', '    // lossy\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint::reciprocal: reciprocal of zero');\n", "        require(self._x != 1, 'FixedPoint::reciprocal: overflow');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    // lossy between 0/1 and 40 bits\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        if (self._x <= uint144(-1)) {\n', '            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n', '        }\n', '\n', '        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n', '        safeShiftBits -= safeShiftBits % 2;\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n', '    }\n', '}\n', '\n', '// File: contracts/lib/IUniswapV2Pair.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/UniswapV2Library.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n', "        require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n", '        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', "        require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n", '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(uint(keccak256(abi.encodePacked(\n', "                hex'ff',\n", '                factory,\n', '                keccak256(abi.encodePacked(token0, token1)),\n', "                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\n", '            ))));\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\n', '        (address token0,) = sortTokens(tokenA, tokenB);\n', '        (uint reserve0, uint reserve1,) = IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\n', "        require(amountA > 0, 'UniswapV2Library: INSUFFICIENT_AMOUNT');\n", "        require(reserveA > 0 && reserveB > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\n', "        require(amountIn > 0, 'UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint amountInWithFee = amountIn.mul(997);\n', '        uint numerator = amountInWithFee.mul(reserveOut);\n', '        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\n', "        require(amountOut > 0, 'UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT');\n", "        require(reserveIn > 0 && reserveOut > 0, 'UniswapV2Library: INSUFFICIENT_LIQUIDITY');\n", '        uint numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint i; i < path.length - 1; i++) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\n', "        require(path.length >= 2, 'UniswapV2Library: INVALID_PATH');\n", '        amounts = new uint[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint i = path.length - 1; i > 0; i--) {\n', '            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/IUniswapV2Factory.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts/lib/UniswapV2OracleLibrary.sol\n', '\n', 'pragma solidity 0.6.5;\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/Oracle.sol\n', '\n', '/*\n', '     ___    _____  ___    _  _    _ \n', '    (  _`\\ (  _  )(  _`\\ (_)( )  ( )\n', "    | (_) )| (_) || (_(_)| |`\\`\\/'/'\n", "    |  _ <'|  _  |`\\__ \\ | |  >  <  \n", "    | (_) )| | | |( )_) || | /'/\\`\\ \n", "    (____/'(_) (_)`\\____)(_)(_)  (_)\n", '*/\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.5;\n', '\n', '// Some code reproduced from\n', '// https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2Pair.sol\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// fixed window oracle that recomputes the average price for the entire period once every period\n', '// note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\n', 'contract OracleSimple {\n', '    using FixedPoint for *;\n', '\n', '    uint public PERIOD = 24 hours;\n', '\n', '    IUniswapV2Pair immutable pair;\n', '    address public immutable token0;\n', '    address public immutable token1;\n', '\n', '    uint    public price0CumulativeLast;\n', '    uint    public price1CumulativeLast;\n', '    uint32  public blockTimestampLast;\n', '    FixedPoint.uq112x112 public price0Average;\n', '    FixedPoint.uq112x112 public price1Average;\n', '\n', '    constructor(address factory, address tokenA, address tokenB) public {\n', '        IUniswapV2Pair _pair = IUniswapV2Pair(UniswapV2Library.pairFor(factory, tokenA, tokenB));\n', '        pair = _pair;\n', '        token0 = _pair.token0();\n', '        token1 = _pair.token1();\n', '        price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n', '        price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n', '        uint112 reserve0;\n', '        uint112 reserve1;\n', '        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n', '        blockTimestampLast = 0;\n', "        // ensure that there's liquidity in the pair\n", "        require(reserve0 != 0 && reserve1 != 0, 'OracleSimple: NO_RESERVES');\n", '    }\n', '\n', '    function update() internal {\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            UniswapV2OracleLibrary.currentCumulativePrices(address(pair));\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '\n', '        // ensure that at least one full period has passed since the last update\n', "        require(timeElapsed >= PERIOD, 'OracleSimple: PERIOD_NOT_ELAPSED');\n", '\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\n', '        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\n', '\n', '        price0CumulativeLast = price0Cumulative;\n', '        price1CumulativeLast = price1Cumulative;\n', '        blockTimestampLast = blockTimestamp;\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(address token, uint amountIn) internal view returns (uint amountOut) {\n', '        if (token == token0) {\n', '            amountOut = price0Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(token == token1, 'OracleSimple: INVALID_TOKEN');\n", '            amountOut = price1Average.mul(amountIn).decode144();\n', '        }\n', '    }\n', '}\n', '\n', 'interface BasixTokenI {\n', '    function monetaryPolicy() external view returns (address);\n', '}\n', '\n', 'contract BasixOracle is Ownable, OracleSimple, IOracle {\n', '\n', '    address basix;\n', '    uint256 constant SCALE = 10 ** 18;\n', '    address constant uniFactory = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '\n', '    constructor(address basix_, address susd_) public OracleSimple(uniFactory, basix_, susd_) {\n', '        PERIOD = 23 hours;\n', '        basix = basix_;\n', '    }\n', '\n', '    // this must be called 24h before first rebase to get proper price\n', '    function updateBeforeRebase() public onlyOwner {\n', '        update();\n', '    }\n', '\n', '    function getData() override external returns (uint256, bool) {\n', '        require(msg.sender == BasixTokenI(basix).monetaryPolicy());\n', '        update();\n', '        uint256 price = consult(basix, SCALE); // will return 1 BASIX in sUSD\n', '\n', '        if (price == 0) {\n', '            return (0, false);\n', '        }\n', '\n', '        return (price, true);\n', '    }\n', '}']