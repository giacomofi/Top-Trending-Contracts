['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-16\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/UniERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'library UniERC20 {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    function isETH(IERC20 token) internal pure returns (bool) {\n', '        return (address(token) == address(0));\n', '    }\n', '\n', '    function uniBalanceOf(IERC20 token, address account)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (isETH(token)) {\n', '            return account.balance;\n', '        } else {\n', '            return token.balanceOf(account);\n', '        }\n', '    }\n', '\n', '    function uniTransfer(\n', '        IERC20 token,\n', '        address payable to,\n', '        uint256 amount\n', '    ) internal {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                to.transfer(amount);\n', '            } else {\n', '                token.safeTransfer(to, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniTransferFromSenderToThis(IERC20 token, uint256 amount)\n', '        internal\n', '    {\n', '        if (amount > 0) {\n', '            if (isETH(token)) {\n', '                require(msg.value >= amount, "UniERC20: not enough value");\n', '                if (msg.value > amount) {\n', '                    // Return remainder if exist\n', '                    msg.sender.transfer(msg.value.sub(amount));\n', '                }\n', '            } else {\n', '                token.safeTransferFrom(msg.sender, address(this), amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function uniSymbol(IERC20 token) internal view returns (string memory) {\n', '        if (isETH(token)) {\n', '            return "ETH";\n', '        }\n', '\n', '        (bool success, bytes memory data) =\n', '            address(token).staticcall{gas: 20000}(\n', '                abi.encodeWithSignature("symbol()")\n', '            );\n', '        if (!success) {\n', '            (success, data) = address(token).staticcall{gas: 20000}(\n', '                abi.encodeWithSignature("SYMBOL()")\n', '            );\n', '        }\n', '\n', '        if (success && data.length >= 96) {\n', '            (uint256 offset, uint256 len) =\n', '                abi.decode(data, (uint256, uint256));\n', '            if (offset == 0x20 && len > 0 && len <= 256) {\n', '                return string(abi.decode(data, (bytes)));\n', '            }\n', '        }\n', '\n', '        if (success && data.length == 32) {\n', '            uint256 len = 0;\n', '            while (\n', '                len < data.length && data[len] >= 0x20 && data[len] <= 0x7E\n', '            ) {\n', '                len++;\n', '            }\n', '\n', '            if (len > 0) {\n', '                bytes memory result = new bytes(len);\n', '                for (uint256 i = 0; i < len; i++) {\n', '                    result[i] = data[i];\n', '                }\n', '                return string(result);\n', '            }\n', '        }\n', '\n', '        return _toHex(address(token));\n', '    }\n', '\n', '    function _toHex(address account) private pure returns (string memory) {\n', '        return _toHex(abi.encodePacked(account));\n', '    }\n', '\n', '    function _toHex(bytes memory data) private pure returns (string memory) {\n', '        bytes memory str = new bytes(2 + data.length * 2);\n', '        str[0] = "0";\n', '        str[1] = "x";\n', '        uint256 j = 2;\n', '        for (uint256 i = 0; i < data.length; i++) {\n', '            uint256 a = uint8(data[i]) >> 4;\n', '            uint256 b = uint8(data[i]) & 0x0f;\n', '            str[j++] = bytes1(uint8(a + 48 + (a / 10) * 39));\n', '            str[j++] = bytes1(uint8(b + 48 + (b / 10) * 39));\n', '        }\n', '\n', '        return string(str);\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IEmiswap.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'interface IEmiswapRegistry {\n', '    function pools(IERC20 token1, IERC20 token2)\n', '        external\n', '        view\n', '        returns (IEmiswap);\n', '\n', '    function isPool(address addr) external view returns (bool);\n', '\n', '    function deploy(IERC20 tokenA, IERC20 tokenB) external returns (IEmiswap);\n', '}\n', '\n', 'interface IEmiswap {\n', '    function fee() external view returns (uint256);\n', '\n', '    function tokens(uint256 i) external view returns (IERC20);\n', '\n', '    function deposit(\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata minAmounts,\n', '        address referral\n', '    ) external payable returns (uint256 fairSupply);\n', '\n', '    function withdraw(uint256 amount, uint256[] calldata minReturns) external;\n', '\n', '    function getBalanceForAddition(IERC20 token)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getBalanceForRemoval(IERC20 token) external view returns (uint256);\n', '\n', '    function getReturn(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount\n', '    ) external view returns (uint256 returnAmount);\n', '\n', '    function swap(\n', '        IERC20 fromToken,\n', '        IERC20 destToken,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        address to,\n', '        address referral\n', '    ) external payable returns (uint256 returnAmount);\n', '\n', '    function initialize(IERC20[] calldata assets) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/libraries/Sqrt.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Sqrt {\n', '    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method)\n', '    function sqrt(uint256 y) internal pure returns (uint256) {\n', '        if (y > 3) {\n', '            uint256 z = y;\n', '            uint256 x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '            return z;\n', '        } else if (y != 0) {\n', '            return 1;\n', '        } else {\n', '            return 0;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Emiswap.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IFactory {\n', '    function fee() external view returns (uint256);\n', '\n', '    function feeVault() external view returns (uint256);\n', '\n', '    function addressVault() external view returns (address);\n', '}\n', '\n', 'library VirtualBalance {\n', '    using SafeMath for uint256;\n', '\n', '    struct Data {\n', '        uint216 balance;\n', '        uint40 time;\n', '    }\n', '\n', '    uint256 public constant DECAY_PERIOD = 5 minutes;\n', '\n', '    function set(VirtualBalance.Data storage self, uint256 balance) internal {\n', '        self.balance = uint216(balance);\n', '        self.time = uint40(block.timestamp);\n', '    }\n', '\n', '    function update(VirtualBalance.Data storage self, uint256 realBalance)\n', '        internal\n', '    {\n', '        set(self, current(self, realBalance));\n', '    }\n', '\n', '    function scale(\n', '        VirtualBalance.Data storage self,\n', '        uint256 realBalance,\n', '        uint256 num,\n', '        uint256 denom\n', '    ) internal {\n', '        set(\n', '            self,\n', '            current(self, realBalance).mul(num).add(denom.sub(1)).div(denom)\n', '        );\n', '    }\n', '\n', '    function current(VirtualBalance.Data memory self, uint256 realBalance)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 timePassed =\n', '            Math.min(DECAY_PERIOD, block.timestamp.sub(self.time));\n', '        uint256 timeRemain = DECAY_PERIOD.sub(timePassed);\n', '        return\n', '            uint256(self.balance)\n', '                .mul(timeRemain)\n', '                .add(realBalance.mul(timePassed))\n', '                .div(DECAY_PERIOD);\n', '    }\n', '}\n', '\n', 'contract Emiswap is ERC20, ReentrancyGuard, Ownable {\n', '    using Sqrt for uint256;\n', '    using SafeMath for uint256;\n', '    using UniERC20 for IERC20;\n', '    using VirtualBalance for VirtualBalance.Data;\n', '\n', '    struct Balances {\n', '        uint256 src;\n', '        uint256 dst;\n', '    }\n', '\n', '    struct SwapVolumes {\n', '        uint128 confirmed;\n', '        uint128 result;\n', '    }\n', '\n', '    event Deposited(address indexed account, uint256 amount, address referral);\n', '\n', '    event Withdrawn(address indexed account, uint256 amount);\n', '\n', '    event Swapped(\n', '        address indexed account,\n', '        address indexed src,\n', '        address indexed dst,\n', '        uint256 amount,\n', '        uint256 result,\n', '        uint256 srcBalance,\n', '        uint256 dstBalance,\n', '        uint256 totalSupply,\n', '        address referral\n', '    );\n', '\n', '    event Swapped2(\n', '        address indexed account,\n', '        address indexed to,\n', '        uint256 resultVault\n', '    );\n', '\n', '    uint256 public constant REFERRAL_SHARE = 20; // 1/share = 5% of LPs revenue\n', '    uint256 public constant BASE_SUPPLY = 1000; // Total supply on first deposit\n', '    uint256 public constant FEE_DENOMINATOR = 1e18;\n', '\n', '    IFactory public factory;\n', '    IERC20[] public tokens;\n', '    mapping(IERC20 => bool) public isToken;\n', '    mapping(IERC20 => SwapVolumes) public volumes;\n', '    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForAddition;\n', '    mapping(IERC20 => VirtualBalance.Data) public virtualBalancesForRemoval;\n', '\n', '    constructor() public ERC20("Emiswap LP token", "EMI LP") {\n', '        factory = IFactory(msg.sender);\n', '    }\n', '\n', '    // called once by the factory at time of deployment\n', '    function initialize(IERC20[] calldata assets) external {\n', '        require(msg.sender == address(factory), "Emiswap: FORBIDDEN"); // sufficient check\n', '        require(assets.length == 2, "Emiswap: only 2 tokens allowed");\n', '\n', '        tokens = assets;\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            require(!isToken[assets[i]], "Emiswap: duplicate tokens");\n', '            isToken[assets[i]] = true;\n', '        }\n', '    }\n', '\n', '    function fee() public view returns (uint256) {\n', '        return factory.fee();\n', '    }\n', '\n', '    function feeVault() public view returns (uint256) {\n', '        return factory.feeVault();\n', '    }\n', '\n', '    function addressVault() public view returns (address) {\n', '        return factory.addressVault();\n', '    }\n', '\n', '    function getTokens() external view returns (IERC20[] memory) {\n', '        return tokens;\n', '    }\n', '\n', '    function decayPeriod() external pure returns (uint256) {\n', '        return VirtualBalance.DECAY_PERIOD;\n', '    }\n', '\n', '    function getBalanceForAddition(IERC20 token) public view returns (uint256) {\n', '        uint256 balance = token.uniBalanceOf(address(this));\n', '        return\n', '            Math.max(\n', '                virtualBalancesForAddition[token].current(balance),\n', '                balance\n', '            );\n', '    }\n', '\n', '    function getBalanceForRemoval(IERC20 token) public view returns (uint256) {\n', '        uint256 balance = token.uniBalanceOf(address(this));\n', '        return\n', '            Math.min(\n', '                virtualBalancesForRemoval[token].current(balance),\n', '                balance\n', '            );\n', '    }\n', '\n', '    function getReturn(\n', '        IERC20 src,\n', '        IERC20 dst,\n', '        uint256 amount\n', '    ) external view returns (uint256, uint256) {\n', '        return\n', '            _getReturn(\n', '                src,\n', '                dst,\n', '                amount,\n', '                getBalanceForAddition(src),\n', '                getBalanceForRemoval(dst)\n', '            );\n', '    }\n', '\n', '    function deposit(\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata minAmounts,\n', '        address referral\n', '    ) external nonReentrant returns (uint256 fairSupply) {\n', '        IERC20[] memory _tokens = tokens;\n', '        require(\n', '            (amounts.length > 0) && (amounts.length == _tokens.length),\n', '            "Emiswap: wrong amounts length"\n', '        );\n', '        require(\n', '            (amounts[0] > 0) && (amounts[1] > 0),\n', '            "Emiswap: wrong value usage"\n', '        );\n', '\n', '        uint256[] memory realBalances = new uint256[](amounts.length);\n', '        for (uint256 i = 0; i < realBalances.length; i++) {\n', '            realBalances[i] = _tokens[i].uniBalanceOf(address(this));\n', '        }\n', '\n', '        uint256 totalSupply = totalSupply();\n', '        if (totalSupply == 0) {\n', '            fairSupply = BASE_SUPPLY.mul(99);\n', '            _mint(address(this), BASE_SUPPLY); // Donate up to 1%\n', '\n', '            // Use the greatest token amount but not less than 99k for the initial supply\n', '            for (uint256 i = 0; i < amounts.length; i++) {\n', '                fairSupply = Math.max(fairSupply, amounts[i]);\n', '            }\n', '        } else {\n', '            // Pre-compute fair supply\n', '            fairSupply = type(uint256).max;\n', '            for (uint256 i = 0; i < amounts.length; i++) {\n', '                fairSupply = Math.min(\n', '                    fairSupply,\n', '                    totalSupply.mul(amounts[i]).div(realBalances[i])\n', '                );\n', '            }\n', '        }\n', '\n', '        uint256 fairSupplyCached = fairSupply;\n', '        for (uint256 i = 0; i < amounts.length; i++) {\n', '            require(amounts[i] > 0, "Emiswap: amount is zero");\n', '            uint256 amount =\n', '                (totalSupply == 0)\n', '                    ? amounts[i]\n', '                    : realBalances[i]\n', '                        .mul(fairSupplyCached)\n', '                        .add(totalSupply - 1)\n', '                        .div(totalSupply);\n', '            require(amount >= minAmounts[i], "Emiswap: minAmount not reached");\n', '\n', '            _tokens[i].uniTransferFromSenderToThis(amount);\n', '            if (totalSupply > 0) {\n', '                uint256 confirmed =\n', '                    _tokens[i].uniBalanceOf(address(this)).sub(realBalances[i]);\n', '                fairSupply = Math.min(\n', '                    fairSupply,\n', '                    totalSupply.mul(confirmed).div(realBalances[i])\n', '                );\n', '            }\n', '        }\n', '\n', '        if (totalSupply > 0) {\n', '            for (uint256 i = 0; i < amounts.length; i++) {\n', '                virtualBalancesForRemoval[_tokens[i]].scale(\n', '                    realBalances[i],\n', '                    totalSupply.add(fairSupply),\n', '                    totalSupply\n', '                );\n', '                virtualBalancesForAddition[_tokens[i]].scale(\n', '                    realBalances[i],\n', '                    totalSupply.add(fairSupply),\n', '                    totalSupply\n', '                );\n', '            }\n', '        }\n', '\n', '        require(fairSupply > 0, "Emniswap: result is not enough");\n', '        _mint(msg.sender, fairSupply);\n', '\n', '        emit Deposited(msg.sender, fairSupply, referral);\n', '    }\n', '\n', '    function withdraw(uint256 amount, uint256[] calldata minReturns)\n', '        external\n', '        nonReentrant\n', '    {\n', '        uint256 totalSupply = totalSupply();\n', '        _burn(msg.sender, amount);\n', '\n', '        for (uint256 i = 0; i < tokens.length; i++) {\n', '            IERC20 token = tokens[i];\n', '\n', '            uint256 preBalance = token.uniBalanceOf(address(this));\n', '            uint256 value = preBalance.mul(amount).div(totalSupply);\n', '            token.uniTransfer(msg.sender, value);\n', '            require(\n', '                i >= minReturns.length || value >= minReturns[i],\n', '                "Emiswap: result is not enough"\n', '            );\n', '\n', '            virtualBalancesForAddition[token].scale(\n', '                preBalance,\n', '                totalSupply.sub(amount),\n', '                totalSupply\n', '            );\n', '            virtualBalancesForRemoval[token].scale(\n', '                preBalance,\n', '                totalSupply.sub(amount),\n', '                totalSupply\n', '            );\n', '        }\n', '\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    function swap(\n', '        IERC20 src,\n', '        IERC20 dst,\n', '        uint256 amount,\n', '        uint256 minReturn,\n', '        address to,\n', '        address referral\n', '    ) external nonReentrant returns (uint256 result) {\n', '        require(address(src) != address(0), "Emiswap: only tokens allowed");\n', '\n', '        Balances memory balances =\n', '            Balances({\n', '                src: src.uniBalanceOf(address(this)),\n', '                dst: dst.uniBalanceOf(address(this))\n', '            });\n', '\n', '        // catch possible airdrops and external balance changes for deflationary tokens\n', '        uint256 srcAdditionBalance =\n', '            Math.max(\n', '                virtualBalancesForAddition[src].current(balances.src),\n', '                balances.src\n', '            );\n', '        uint256 dstRemovalBalance =\n', '            Math.min(\n', '                virtualBalancesForRemoval[dst].current(balances.dst),\n', '                balances.dst\n', '            );\n', '\n', '        src.uniTransferFromSenderToThis(amount);\n', '        uint256 confirmed = src.uniBalanceOf(address(this)).sub(balances.src);\n', '\n', '        uint256 resultVault;\n', '        (result, resultVault) = _getReturn(\n', '            src,\n', '            dst,\n', '            confirmed,\n', '            srcAdditionBalance,\n', '            dstRemovalBalance\n', '        );\n', '        require(\n', '            result > 0 && result >= minReturn,\n', '            "Emiswap: return is not enough"\n', '        );\n', '        dst.uniTransfer(payable(to), result);\n', '        if (resultVault > 0) {\n', '            dst.uniTransfer(payable(addressVault()), resultVault);\n', '        }\n', '\n', '        // Update virtual balances to the same direction only at imbalanced state\n', '        if (srcAdditionBalance != balances.src) {\n', '            virtualBalancesForAddition[src].set(\n', '                srcAdditionBalance.add(confirmed)\n', '            );\n', '        }\n', '        if (dstRemovalBalance != balances.dst) {\n', '            virtualBalancesForRemoval[dst].set(dstRemovalBalance.sub(result));\n', '        }\n', '\n', '        // Update virtual balances to the opposite direction\n', '        virtualBalancesForRemoval[src].update(balances.src);\n', '        virtualBalancesForAddition[dst].update(balances.dst);\n', '\n', '        emit Swapped(\n', '            msg.sender,\n', '            address(src),\n', '            address(dst),\n', '            confirmed,\n', '            result,\n', '            balances.src,\n', '            balances.dst,\n', '            totalSupply(),\n', '            referral\n', '        );\n', '        emit Swapped2(msg.sender, to, resultVault);\n', '\n', '        // Overflow of uint128 is desired\n', '        volumes[src].confirmed += uint128(confirmed);\n', '        volumes[src].result += uint128(result);\n', '    }\n', '\n', '    function rescueFunds(IERC20 token, uint256 amount)\n', '        external\n', '        nonReentrant\n', '        onlyOwner\n', '    {\n', '        uint256[] memory balances = new uint256[](tokens.length);\n', '        for (uint256 i = 0; i < balances.length; i++) {\n', '            balances[i] = tokens[i].uniBalanceOf(address(this));\n', '        }\n', '\n', '        token.uniTransfer(msg.sender, amount);\n', '\n', '        for (uint256 i = 0; i < balances.length; i++) {\n', '            require(\n', '                tokens[i].uniBalanceOf(address(this)) >= balances[i],\n', '                "Emiswap: access denied"\n', '            );\n', '        }\n', '        require(\n', '            balanceOf(address(this)) >= BASE_SUPPLY,\n', '            "Emiswap: access denied"\n', '        );\n', '    }\n', '\n', '    function _getReturn(\n', '        IERC20 src,\n', '        IERC20 dst,\n', '        uint256 amount,\n', '        uint256 srcBalance,\n', '        uint256 dstBalance\n', '    ) internal view returns (uint256, uint256) {\n', '        if (isToken[src] && isToken[dst] && src != dst && amount > 0) {\n', '            uint256 taxedAmount =\n', '                amount.sub(amount.mul(fee()).div(FEE_DENOMINATOR));\n', '            uint256 resWFee =\n', '                taxedAmount.mul(dstBalance).div(srcBalance.add(taxedAmount));\n', '            uint256 resWOFee =\n', '                amount.mul(dstBalance).div(srcBalance.add(amount));\n', '            uint256 resVault =\n', '                (\n', '                    feeVault() == 0\n', '                        ? 0\n', '                        : resWOFee.sub(resWFee).div(fee().div(feeVault()))\n', '                );\n', '\n', '            return (resWFee, resVault);\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/EmiFactory.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract EmiFactory is Ownable {\n', '    using UniERC20 for IERC20;\n', '\n', '    mapping(address => bool) private _adminTable;\n', '\n', '    modifier onlyAdmin() {\n', '        require(_adminTable[msg.sender], "Admin: caller is not admin");\n', '        _;\n', '    }\n', '\n', '    event Deployed(\n', '        address indexed emiswap,\n', '        address indexed token1,\n', '        address indexed token2\n', '    );\n', '\n', '    event adminGranted(address indexed admin, bool isGranted);\n', '\n', '    uint256 public constant MAX_FEE = 0.003e18; // 0.3%\n', '\n', '    uint256 public fee;\n', '    uint256 public feeVault;\n', '    address public addressVault;\n', '    Emiswap[] public allPools;\n', '    mapping(Emiswap => bool) public isPool;\n', '    mapping(IERC20 => mapping(IERC20 => Emiswap)) public pools;\n', '\n', '    function getAllPools() external view returns (Emiswap[] memory) {\n', '        return allPools;\n', '    }\n', '\n', '    function setFee(uint256 newFee) external onlyAdmin {\n', '        require(newFee <= MAX_FEE, "Factory: fee should be <= 0.3%");\n', '        fee = newFee;\n', '    }\n', '\n', '    function setFeeVault(uint256 newFeeVault) external onlyAdmin {\n', '        require(newFeeVault < fee, "Factory: vault fee");\n', '        feeVault = newFeeVault;\n', '    }\n', '\n', '    function setaddressVault(address newAddressVault) external onlyAdmin {\n', '        require(newAddressVault != address(0), "Factory: vault");\n', '        addressVault = newAddressVault;\n', '    }\n', '\n', '    function setAdminGrant(address newAdmin, bool isGranted)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(newAdmin != address(0), "Admin address 0");\n', '        _adminTable[newAdmin] = isGranted;\n', '        emit adminGranted(newAdmin, isGranted);\n', '    }\n', '\n', '    function deploy(IERC20 tokenA, IERC20 tokenB)\n', '        external\n', '        returns (Emiswap pool)\n', '    {\n', '        require(\n', '            address(tokenA) != address(0) && address(tokenB) != address(0),\n', '            "Factory:no 0x address"\n', '        );\n', '        require(tokenA != tokenB, "Factory:no same tokens");\n', '        require(\n', '            pools[tokenA][tokenB] == Emiswap(0),\n', '            "Factory:pool already exists"\n', '        );\n', '\n', '        (IERC20 token1, IERC20 token2) = sortTokens(tokenA, tokenB);\n', '        IERC20[] memory tokens = new IERC20[](2);\n', '        tokens[0] = token1;\n', '        tokens[1] = token2;\n', '\n', '        /////////// abi.encodePacked(bytecode, abi.encode(arg1, arg2))\n', '        bytes memory bytecode = abi.encodePacked(type(Emiswap).creationCode);\n', '\n', '        bytes32 salt = keccak256(abi.encodePacked(token1, token2));\n', '        assembly {\n', '            pool := create2(0, add(bytecode, 32), mload(bytecode), salt)\n', '        }\n', '        Emiswap(pool).initialize(tokens);\n', '\n', '        pool.transferOwnership(owner());\n', '        pools[token1][token2] = pool;\n', '        pools[token2][token1] = pool;\n', '        allPools.push(pool);\n', '        isPool[pool] = true;\n', '\n', '        emit Deployed(address(pool), address(token1), address(token2));\n', '    }\n', '\n', '    function sortTokens(IERC20 tokenA, IERC20 tokenB)\n', '        public\n', '        pure\n', '        returns (IERC20, IERC20)\n', '    {\n', '        if (tokenA < tokenB) {\n', '            return (tokenA, tokenB);\n', '        }\n', '        return (tokenB, tokenA);\n', '    }\n', '}']