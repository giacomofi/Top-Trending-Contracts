['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', 'pragma solidity ^0.5.8;\n', '\n', '/**\n', ' * @title The standard ERC20 interface\n', ' * @dev see https://eips.ethereum.org/EIPS/eip-20\n', ' */\n', 'interface IERC20 {\n', '    function transfer(address, uint256) external returns (bool);\n', '    function approve(address, uint256) external returns (bool);\n', '    function transferFrom(address, address, uint256) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address) external view returns (uint256);\n', '    function allowance(address, address) external view returns (uint256);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed holder, address indexed spender, uint256 value);\n', '}\n', '\n', '/// @title Time-delayed ERC-20 wallet contract.\n', '/// Can only transfer tokens after publicly recording the intention to do so\n', '/// at least four weeks in advance.\n', 'contract SlowWallet {\n', '\n', '    // TYPES\n', '\n', '    struct TransferProposal {\n', '        address destination;\n', '        uint256 value;\n', '        uint256 time;\n', '        string notes;\n', '        bool closed;\n', '    }\n', '\n', '    // DATA\n', '\n', '    IERC20 public token;\n', '    uint256 public constant delay = 4 weeks;\n', '    address public owner;\n', '\n', '    // PROPOSALS\n', '\n', '    mapping (uint256 => TransferProposal) public proposals;\n', '    uint256 public proposalsLength;\n', '\n', '    // EVENTS\n', '\n', '    event TransferProposed(\n', '        uint256 index,\n', '        address indexed destination,\n', '        uint256 value,\n', '        uint256 delayUntil,\n', '        string notes\n', '    );\n', '    event TransferConfirmed(uint256 index, address indexed destination, uint256 value, string notes);\n', '    event TransferCancelled(uint256 index, address indexed destination, uint256 value, string notes);\n', '    event AllTransfersCancelled();\n', '\n', '    // FUNCTIONALITY\n', '\n', '    constructor(address tokenAddress) public {\n', '        token = IERC20(tokenAddress);\n', '        owner = 0xA7b123D54BcEc14b4206dAb796982a6d5aaA6770;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "must be owner");\n', '        _;\n', '    }\n', '\n', '    /// Propose a new transfer, which can be confirmed after two weeks.\n', '    function propose(address destination, uint256 value, string calldata notes) external onlyOwner {\n', '        // Delay by at least two weeks.\n', '        // We are relying on block.timestamp for this, and aware of the possibility of its\n', '        // manipulation by miners. But we are working at a timescale that is already much\n', '        // longer than the variance in timestamps we have observed and expect in the future,\n', '        // so we are satisfied with this choice.\n', '        // solium-disable-next-line security/no-block-members\n', '        uint256 delayUntil = now + delay;\n', '        require(delayUntil >= now, "delay overflowed");\n', '\n', '        proposals[proposalsLength] = TransferProposal({\n', '            destination: destination,\n', '            value: value,\n', '            time: delayUntil,\n', '            notes: notes,\n', '            closed: false\n', '        });\n', '        proposalsLength++;\n', '\n', '        emit TransferProposed(proposalsLength-1, destination, value, delayUntil, notes);\n', '    }\n', '\n', '    /// Cancel a proposed transfer.\n', '    function cancel(uint256 index, address addr, uint256 value) external onlyOwner {\n', '        // Check authorization.\n', '        requireMatchingOpenProposal(index, addr, value);\n', '\n', '        // Cancel transfer.\n', '        proposals[index].closed = true;\n', '        emit TransferCancelled(index, addr, value, proposals[index].notes);\n', '    }\n', '\n', '    /// Mark all proposals "void", in O(1).\n', '    function voidAll() external onlyOwner {\n', '        proposalsLength = 0;\n', '        emit AllTransfersCancelled();\n', '    }\n', '\n', '    /// Confirm and execute a proposed transfer, if enough time has passed since it was proposed.\n', '    function confirm(uint256 index, address destination, uint256 value) external onlyOwner {\n', '        // Check authorization.\n', '        requireMatchingOpenProposal(index, destination, value);\n', '\n', '        // See commentary above about using `now`.\n', '        // solium-disable-next-line security/no-block-members\n', '        require(proposals[index].time < now, "too early");\n', '\n', '        // Record execution of transfer.\n', '        proposals[index].closed = true;\n', '        emit TransferConfirmed(index, destination, value, proposals[index].notes);\n', '\n', '        // Proceed with execution of transfer.\n', '        require(token.transfer(destination, value));\n', '    }\n', '\n', '    /// Throw unless the given transfer proposal exists and matches `destination` and `value`.\n', '    function requireMatchingOpenProposal(uint256 index, address destination, uint256 value) private view {\n', '        require(index < proposalsLength, "index too high, or transfer voided");\n', '        require(!proposals[index].closed, "transfer already closed");\n', '\n', '        // Slither reports "dangerous strict equality" for each of these, but it\'s OK.\n', '        // These equalities are to confirm that the transfer entered is equal to the\n', "        // matching previous transfer. We're vetting data entry; strict equality is appropriate.\n", '        require(proposals[index].destination == destination, "destination mismatched");\n', '        require(proposals[index].value == value, "value mismatched");\n', '    }\n', '}']