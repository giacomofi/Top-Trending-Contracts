['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', '/*\n', "    .'''''''''''..     ..''''''''''''''''..       ..'''''''''''''''..\n", "    .;;;;;;;;;;;'.   .';;;;;;;;;;;;;;;;;;,.     .,;;;;;;;;;;;;;;;;;,.\n", '    .;;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;,.    .,;;;;;;;;;;;;;;;;;;,.\n', '    .;;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.   .;;;;;;;;;;;;;;;;;;;;,.\n', "    ';;;;;;;;'.  .';;;;;;;;;;;;;;;;;;;;;;,. .';;;;;;;;;;;;;;;;;;;;;,.\n", "    ';;;;;,..   .';;;;;;;;;;;;;;;;;;;;;;;,..';;;;;;;;;;;;;;;;;;;;;;,.\n", "    ......     .';;;;;;;;;;;;;,'''''''''''.,;;;;;;;;;;;;;,'''''''''..\n", '              .,;;;;;;;;;;;;;.           .,;;;;;;;;;;;;;.\n', '             .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '            .,;;;;;;;;;;;;,.           .,;;;;;;;;;;;;,.\n', '           .,;;;;;;;;;;;;,.           .;;;;;;;;;;;;;,.     .....\n', "          .;;;;;;;;;;;;;'.         ..';;;;;;;;;;;;;'.    .',;;;;,'.\n", "        .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.   .';;;;;;;;;;.\n", "       .';;;;;;;;;;;;;'.         .';;;;;;;;;;;;;;'.    .;;;;;;;;;;;,.\n", "      .,;;;;;;;;;;;;;'...........,;;;;;;;;;;;;;;.      .;;;;;;;;;;;,.\n", '     .,;;;;;;;;;;;;,..,;;;;;;;;;;;;;;;;;;;;;;;,.       ..;;;;;;;;;,.\n', "    .,;;;;;;;;;;;;,. .,;;;;;;;;;;;;;;;;;;;;;;,.          .',;;;,,..\n", '   .,;;;;;;;;;;;;,.  .,;;;;;;;;;;;;;;;;;;;;;,.              ....\n', "    ..',;;;;;;;;,.   .,;;;;;;;;;;;;;;;;;;;;,.\n", "       ..',;;;;'.    .,;;;;;;;;;;;;;;;;;;;'.\n", "          ...'..     .';;;;;;;;;;;;;;,,,'.\n", '                       ...............\n', '*/\n', '\n', '// https://github.com/trusttoken/smart-contracts\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/trusttoken/interface/IBurnableERC20.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IBurnableERC20 is IERC20 {\n', '    function burn(uint256 amount) external;\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/common/Initializable.sol\n', '\n', '// Copied from https://github.com/OpenZeppelin/openzeppelin-contracts-ethereum-package/blob/v3.0.0/contracts/Initializable.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/common/UpgradeableOwnable.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {Context} from "@openzeppelin/contracts/GSN/Context.sol";\n', '\n', '// import {Initializable} from "contracts/truefi/common/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable, Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/IArbitraryDistributor.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface IArbitraryDistributor {\n', '    function amount() external returns (uint256);\n', '\n', '    function remaining() external returns (uint256);\n', '\n', '    function beneficiary() external returns (address);\n', '\n', '    function distribute(uint256 _amount) external;\n', '\n', '    function empty() external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ILoanFactory.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ILoanFactory {\n', '    function createLoanToken(\n', '        uint256 _amount,\n', '        uint256 _term,\n', '        uint256 _apy\n', '    ) external;\n', '\n', '    function isLoanToken(address) external view returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ILoanToken.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface ILoanToken is IERC20 {\n', '    enum Status {Awaiting, Funded, Withdrawn, Settled, Defaulted, Liquidated}\n', '\n', '    function borrower() external view returns (address);\n', '\n', '    function amount() external view returns (uint256);\n', '\n', '    function term() external view returns (uint256);\n', '\n', '    function apy() external view returns (uint256);\n', '\n', '    function start() external view returns (uint256);\n', '\n', '    function lender() external view returns (address);\n', '\n', '    function debt() external view returns (uint256);\n', '\n', '    function profit() external view returns (uint256);\n', '\n', '    function status() external view returns (Status);\n', '\n', '    function borrowerFee() external view returns (uint256);\n', '\n', '    function receivedAmount() external view returns (uint256);\n', '\n', '    function isLoanToken() external pure returns (bool);\n', '\n', '    function getParameters()\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function fund() external;\n', '\n', '    function withdraw(address _beneficiary) external;\n', '\n', '    function close() external;\n', '\n', '    function liquidate() external;\n', '\n', '    function redeem(uint256 _amount) external;\n', '\n', '    function repay(address _sender, uint256 _amount) external;\n', '\n', '    function reclaim() external;\n', '\n', '    function allowTransfer(address account, bool _status) external;\n', '\n', '    function repaid() external view returns (uint256);\n', '\n', '    function balance() external view returns (uint256);\n', '\n', '    function value(uint256 _balance) external view returns (uint256);\n', '\n', '    function currencyToken() external view returns (IERC20);\n', '\n', '    function version() external pure returns (uint8);\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueFiPool.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', '/**\n', ' * TruePool is an ERC20 which represents a share of a pool\n', ' *\n', ' * This contract can be used to wrap opportunities to be compatible\n', ' * with TrueFi and allow users to directly opt-in through the TUSD contract\n', ' *\n', ' * Each TruePool is also a staking opportunity for TRU\n', ' */\n', 'interface ITrueFiPool is IERC20 {\n', '    /// @dev pool token (TUSD)\n', '    function currencyToken() external view returns (IERC20);\n', '\n', '    /// @dev stake token (TRU)\n', '    function stakeToken() external view returns (IERC20);\n', '\n', '    /**\n', '     * @dev join pool\n', '     * 1. Transfer TUSD from sender\n', '     * 2. Mint pool tokens based on value to sender\n', '     */\n', '    function join(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev exit pool\n', '     * 1. Transfer pool tokens from sender\n', '     * 2. Burn pool tokens\n', '     * 3. Transfer value of pool tokens in TUSD to sender\n', '     */\n', '    function exit(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev borrow from pool\n', '     * 1. Transfer TUSD to sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function borrow(uint256 amount, uint256 fee) external;\n', '\n', '    /**\n', '     * @dev join pool\n', '     * 1. Transfer TUSD from sender\n', '     * 2. Only lending pool should be allowed to call this\n', '     */\n', '    function repay(uint256 amount) external;\n', '}\n', '\n', '\n', '// Dependency file: contracts/truefi/interface/ITrueRatingAgency.sol\n', '\n', '// pragma solidity 0.6.10;\n', '\n', 'interface ITrueRatingAgency {\n', '    function getResults(address id)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function submit(address id) external;\n', '\n', '    function retract(address id) external;\n', '\n', '    function yes(address id, uint256 stake) external;\n', '\n', '    function no(address id, uint256 stake) external;\n', '\n', '    function withdraw(address id, uint256 stake) external;\n', '\n', '    function claim(address id, address voter) external;\n', '}\n', '\n', '\n', '// Root file: contracts/truefi/TrueRatingAgency.sol\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '// import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '// import {IBurnableERC20} from "contracts/trusttoken/interface/IBurnableERC20.sol";\n', '\n', '// import {Ownable} from "contracts/truefi/common/UpgradeableOwnable.sol";\n', '// import {IArbitraryDistributor} from "contracts/truefi/interface/IArbitraryDistributor.sol";\n', '// import {ILoanFactory} from "contracts/truefi/interface/ILoanFactory.sol";\n', '// import {ILoanToken} from "contracts/truefi/interface/ILoanToken.sol";\n', '// import {ITrueFiPool} from "contracts/truefi/interface/ITrueFiPool.sol";\n', '// import {ITrueRatingAgency} from "contracts/truefi/interface/ITrueRatingAgency.sol";\n', '\n', '/**\n', ' * @title TrueRatingAgency\n', ' * @dev Credit prediction market for LoanTokens\n', ' *\n', ' * TrueFi uses use a prediction market to signal how risky a loan is.\n', ' * The Credit Prediction Market estimates the likelihood of a loan defaulting.\n', ' * Any TRU holder can vote YES or NO and stake TRU as collateral on their vote.\n', ' * If a loan is funded, TRU is locked into the market until expiry.\n', ' * Locking TRU into the prediction market allows voters to earn and claim\n', " * incentive TRU throughout the course of the loan. After the loan's term,\n", ' * if the voter is correct, they earn a TRU reward plus a portion of the\n', " * losing side's vote. A portion of the losing side's TRU is burned.\n", ' *\n', ' * Voting Lifecycle:\n', ' * - Borrowers can apply for loans at any time by deploying a LoanToken\n', ' * - LoanTokens are registered with the prediction market contract\n', ' * - Once registered, TRU holders can vote at any time\n', ' * - If a loan is funded, TRU is locked for the term of the loan\n', ' * - At the end of the term, payouts are determined based on the loan outcome\n', ' *\n', ' * States:\n', ' * Void:        Rated loan is invalid\n', ' * Pending:     Waiting to be funded\n', ' * Retracted:   Rating has been cancelled\n', ' * Running:     Rated loan has been funded\n', ' * Settled:     Rated loan has been paid back in full\n', ' * Defaulted:   Rated loan has not been paid back in full\n', ' */\n', 'contract TrueRatingAgency is ITrueRatingAgency, Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    enum LoanStatus {Void, Pending, Retracted, Running, Settled, Defaulted}\n', '\n', '    struct Loan {\n', '        address creator;\n', '        uint256 timestamp;\n', '        mapping(bool => uint256) prediction;\n', '        mapping(address => mapping(bool => uint256)) votes;\n', '        mapping(address => uint256) claimed;\n', '        uint256 reward;\n', '    }\n', '\n', '    uint256 private constant TOKEN_PRECISION_DIFFERENCE = 10**10;\n', '\n', '    // ================ WARNING ==================\n', '    // ===== THIS CONTRACT IS INITIALIZABLE ======\n', '    // === STORAGE VARIABLES ARE DECLARED BELOW ==\n', '    // REMOVAL OR REORDER OF VARIABLES WILL RESULT\n', '    // ========= IN STORAGE CORRUPTION ===========\n', '\n', '    mapping(address => bool) public allowedSubmitters;\n', '    mapping(address => Loan) public loans;\n', '\n', '    IBurnableERC20 public trustToken;\n', '    IArbitraryDistributor public distributor;\n', '    ILoanFactory public factory;\n', '\n', '    /**\n', '     * @dev % multiplied by 100. e.g. 10.5% = 1050\n', '     */\n', '    uint256 public lossFactor;\n', '    uint256 public burnFactor;\n', '\n', '    // reward multiplier for voters\n', '    uint256 public rewardMultiplier;\n', '\n', '    bool public submissionPauseStatus;\n', '\n', '    // ======= STORAGE DECLARATION END ============\n', '\n', '    event Allowed(address indexed who, bool status);\n', '    event LossFactorChanged(uint256 lossFactor);\n', '    event BurnFactorChanged(uint256 burnFactor);\n', '    event LoanSubmitted(address id);\n', '    event LoanRetracted(address id);\n', '    event Voted(address loanToken, address voter, bool choice, uint256 stake);\n', '    event Withdrawn(address loanToken, address voter, uint256 stake, uint256 received, uint256 burned);\n', '    event RewardMultiplierChanged(uint256 newRewardMultiplier);\n', '    event Claimed(address loanToken, address voter, uint256 claimedReward);\n', '    event SubmissionPauseStatusChanged(bool status);\n', '\n', '    /**\n', '     * @dev Only whitelisted borrowers can submit for credit ratings\n', '     */\n', '    modifier onlyAllowedSubmitters() {\n', '        require(allowedSubmitters[msg.sender], "TrueRatingAgency: Sender is not allowed to submit");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only loan submitter can perform certain actions\n', '     */\n', '    modifier onlyCreator(address id) {\n', '        require(loans[id].creator == msg.sender, "TrueRatingAgency: Not sender\'s loan");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Cannot submit the same loan multiple times\n', '     */\n', '    modifier onlyNotExistingLoans(address id) {\n', '        require(status(id) == LoanStatus.Void, "TrueRatingAgency: Loan was already created");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only loans in Pending state\n', '     */\n', '    modifier onlyPendingLoans(address id) {\n', '        require(status(id) == LoanStatus.Pending, "TrueRatingAgency: Loan is not currently pending");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only loans in Running state\n', '     */\n', '    modifier onlyNotRunningLoans(address id) {\n', '        require(status(id) != LoanStatus.Running, "TrueRatingAgency: Loan is currently running");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Only loans that have been funded\n', '     */\n', '    modifier onlyFundedLoans(address id) {\n', '        require(status(id) >= LoanStatus.Running, "TrueRatingAgency: Loan was not funded");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Initalize Rating Agenct\n', '     * Distributor contract decides how much TRU is rewarded to stakers\n', '     * @param _trustToken TRU contract\n', '     * @param _distributor Distributor contract\n', '     * @param _factory Factory contract for deploying tokens\n', '     */\n', '    function initialize(\n', '        IBurnableERC20 _trustToken,\n', '        IArbitraryDistributor _distributor,\n', '        ILoanFactory _factory\n', '    ) public initializer {\n', '        require(address(this) == _distributor.beneficiary(), "TrueRatingAgency: Invalid distributor beneficiary");\n', '        Ownable.initialize();\n', '\n', '        trustToken = _trustToken;\n', '        distributor = _distributor;\n', '        factory = _factory;\n', '\n', '        lossFactor = 2500;\n', '        burnFactor = 2500;\n', '    }\n', '\n', '    /**\n', '     * @dev Set loss factor.\n', '     * Loss factor decides what percentage of TRU is lost for incorrect votes\n', '     * @param newLossFactor New loss factor\n', '     */\n', '    function setLossFactor(uint256 newLossFactor) external onlyOwner {\n', '        require(newLossFactor <= 10000, "TrueRatingAgency: Loss factor cannot be greater than 100%");\n', '        lossFactor = newLossFactor;\n', '        emit LossFactorChanged(newLossFactor);\n', '    }\n', '\n', '    /**\n', '     * @dev Set burn factor.\n', '     * Burn factor decides what percentage of lost TRU is burned\n', '     */\n', '    function setBurnFactor(uint256 newBurnFactor) external onlyOwner {\n', '        require(newBurnFactor <= 10000, "TrueRatingAgency: Burn factor cannot be greater than 100%");\n', '        burnFactor = newBurnFactor;\n', '        emit BurnFactorChanged(newBurnFactor);\n', '    }\n', '\n', '    /**\n', '     * @dev Set reward multiplier.\n', '     * Reward multiplier increases reward for TRU stakers\n', '     */\n', '    function setRewardMultiplier(uint256 newRewardMultiplier) external onlyOwner {\n', '        rewardMultiplier = newRewardMultiplier;\n', '        emit RewardMultiplierChanged(newRewardMultiplier);\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of NO votes for a specific account and loan\n', '     * @param id Loan ID\n', '     * @param voter Voter account\n', '     */\n', '    function getNoVote(address id, address voter) public view returns (uint256) {\n', '        return loans[id].votes[voter][false];\n', '    }\n', '\n', '    /**\n', '     * @dev Get number of YES votes for a specific account and loan\n', '     * @param id Loan ID\n', '     * @param voter Voter account\n', '     */\n', '    function getYesVote(address id, address voter) public view returns (uint256) {\n', '        return loans[id].votes[voter][true];\n', '    }\n', '\n', '    /**\n', '     * @dev Get total NO votes for a specific loan\n', '     * @param id Loan ID\n', '     */\n', '    function getTotalNoVotes(address id) public view returns (uint256) {\n', '        return loans[id].prediction[false];\n', '    }\n', '\n', '    /**\n', '     * @dev Get total YES votes for a specific loan\n', '     * @param id Loan ID\n', '     */\n', '    function getTotalYesVotes(address id) public view returns (uint256) {\n', '        return loans[id].prediction[true];\n', '    }\n', '\n', '    /**\n', '     * @dev Get timestamp at which voting started for a specific loan\n', '     * @param id Loan ID\n', '     */\n', '    function getVotingStart(address id) public view returns (uint256) {\n', '        return loans[id].timestamp;\n', '    }\n', '\n', '    /**\n', '     * @dev Get current results for a specific loan\n', '     * @param id Loan ID\n', '     * @return (start_time, total_no, total_yes)\n', '     */\n', '    function getResults(address id)\n', '        external\n', '        override\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        )\n', '    {\n', '        return (getVotingStart(id), getTotalNoVotes(id), getTotalYesVotes(id));\n', '    }\n', '\n', '    /**\n', '     * @dev Whitelist borrowers to submit loans for rating\n', '     * @param who Account to whitelist\n', '     * @param status Flag to whitelist accounts\n', '     */\n', '    function allow(address who, bool status) external onlyOwner {\n', '        allowedSubmitters[who] = status;\n', '        emit Allowed(who, status);\n', '    }\n', '\n', '    /**\n', '     * @dev Pause submitting loans for rating\n', '     * @param status Flag of the status\n', '     */\n', '    function pauseSubmissions(bool status) public onlyOwner {\n', '        submissionPauseStatus = status;\n', '        emit SubmissionPauseStatusChanged(status);\n', '    }\n', '\n', '    /**\n', '     * @dev Submit a loan for rating\n', '     * Cannot submit the same loan twice\n', '     * @param id Loan ID\n', '     */\n', '    function submit(address id) external override onlyAllowedSubmitters onlyNotExistingLoans(id) {\n', '        require(!submissionPauseStatus, "TrueRatingAgency: New submissions are paused");\n', '        require(ILoanToken(id).borrower() == msg.sender, "TrueRatingAgency: Sender is not borrower");\n', '        require(factory.isLoanToken(id), "TrueRatingAgency: Only LoanTokens created via LoanFactory are supported");\n', '        loans[id] = Loan({creator: msg.sender, timestamp: block.timestamp, reward: 0});\n', '        emit LoanSubmitted(id);\n', '    }\n', '\n', '    /**\n', '     * @dev Remove Loan from rating agency\n', '     * Can only be retracted by loan creator\n', '     * @param id Loan ID\n', '     */\n', '    function retract(address id) external override onlyPendingLoans(id) onlyCreator(id) {\n', '        loans[id].creator = address(0);\n', '        loans[id].prediction[true] = 0;\n', '        loans[id].prediction[false] = 0;\n', '\n', '        emit LoanRetracted(id);\n', '    }\n', '\n', '    /**\n', '     * @dev Vote on a loan by staking TRU\n', '     * @param id Loan ID\n', '     * @param stake Amount of TRU to stake\n', '     * @param choice Voter choice. false = NO, true = YES\n', '     */\n', '    function vote(\n', '        address id,\n', '        uint256 stake,\n', '        bool choice\n', '    ) internal {\n', '        require(loans[id].votes[msg.sender][!choice] == 0, "TrueRatingAgency: Cannot vote both yes and no");\n', '\n', '        loans[id].prediction[choice] = loans[id].prediction[choice].add(stake);\n', '        loans[id].votes[msg.sender][choice] = loans[id].votes[msg.sender][choice].add(stake);\n', '\n', '        require(trustToken.transferFrom(msg.sender, address(this), stake));\n', '        emit Voted(id, msg.sender, choice, stake);\n', '    }\n', '\n', '    /**\n', '     * @dev Vote YES on a loan by staking TRU\n', '     * @param id Loan ID\n', '     * @param stake Amount of TRU to stake\n', '     */\n', '    function yes(address id, uint256 stake) external override onlyPendingLoans(id) {\n', '        vote(id, stake, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Vote NO on a loan by staking TRU\n', '     * @param id Loan ID\n', '     * @param stake Amount of TRU to stake\n', '     */\n', '    function no(address id, uint256 stake) external override onlyPendingLoans(id) {\n', '        vote(id, stake, false);\n', '    }\n', '\n', '    // prettier-ignore\n', '    /**\n', '     * @dev Withdraw stake on a loan and remove votes.\n', '     * Unstaking only allowed for loans that are not Running\n', '     * @param id Loan ID\n', '     * @param stake Amount of TRU to unstake\n', '     */\n', '    function withdraw(address id, uint256 stake) external override onlyNotRunningLoans(id) {\n', '        bool choice = loans[id].votes[msg.sender][true] > 0;\n', '        LoanStatus loanStatus = status(id);\n', '\n', '        require(loans[id].votes[msg.sender][choice] >= stake,\n', '            "TrueRatingAgency: Cannot withdraw more than was staked");\n', '\n', '        uint256 amountToTransfer = stake;\n', '        uint256 burned = 0;\n', '        if (loanStatus > LoanStatus.Running) {\n', '            // claim TRU reward\n', '            claim(id, msg.sender);\n', '            // check if prediction correct\n', '            bool correct = wasPredictionCorrect(id, choice);\n', '            if (correct) {\n', "                // if correct, take some from incorrect side's stake\n", '                // amount taken from incorrect side but not burned\n', '                amountToTransfer = amountToTransfer.add(\n', '                    bounty(id, !choice).mul(stake).div(loans[id].prediction[choice]));\n', '            } else {\n', '                // if incorrect, calculate loss & burn stake\n', '                // stake - (stake * lossFactor)\n', '                uint256 lostAmount = amountToTransfer.mul(lossFactor).div(10000);\n', '                amountToTransfer = amountToTransfer.sub(lostAmount);\n', '                burned = lostAmount.mul(burnFactor).div(10000);\n', '                trustToken.burn(burned);\n', '            }\n', '        }\n', '\n', '        // if loan still pending, update total votes\n', '        if (loanStatus == LoanStatus.Pending) {\n', '            loans[id].prediction[choice] = loans[id].prediction[choice].sub(stake);\n', '        }\n', '\n', '        // update account votes\n', '        loans[id].votes[msg.sender][choice] = loans[id].votes[msg.sender][choice].sub(stake);\n', '\n', '        // transfer tokens to sender and emit event\n', '        require(trustToken.transfer(msg.sender, amountToTransfer));\n', '        emit Withdrawn(id, msg.sender, stake, amountToTransfer, burned);\n', '    }\n', '\n', '    /**\n', '     * @dev Total amount of funds given to correct voters\n', '     * @param id Loan ID\n', '     * @param incorrectChoice Vote which was incorrect\n', '     * @return TRU amount given to correct voters\n', '     */\n', '    function bounty(address id, bool incorrectChoice) public view returns (uint256) {\n', '        // reward = (incorrect_tokens_staked) * (loss_factor) * (1 - burn_factor)\n', '        // prettier-ignore\n', '        return loans[id].prediction[incorrectChoice].mul(\n', '            lossFactor).mul(uint256(10000).sub(burnFactor)).div(10000**2);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal view to convert values to 8 decimals precision\n', '     * @param input Value to convert to TRU precision\n', '     * @return output TRU amount\n', '     */\n', '    function toTrustToken(uint256 input) internal pure returns (uint256 output) {\n', '        output = input.div(TOKEN_PRECISION_DIFFERENCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Update total TRU reward for a Loan\n', '     * Reward is divided proportionally based on # TRU staked\n', '     * chi = (TRU remaining in distributor) / (Total TRU allocated for distribution)\n', '     * interest = (loan APY * term * principal)\n', '     * R = Total Reward = (interest * chi * rewardFactor)\n', '     * @param id Loan ID\n', '     */\n', '    modifier calculateTotalReward(address id) {\n', '        if (loans[id].reward == 0) {\n', '            uint256 interest = ILoanToken(id).profit();\n', '\n', '            // calculate reward\n', '            // prettier-ignore\n', '            uint256 reward = toTrustToken(\n', '                interest\n', '                    .mul(distributor.remaining())\n', '                    .mul(rewardMultiplier)\n', '                    .div(distributor.amount())\n', '            );\n', '\n', '            loans[id].reward = reward;\n', '            if (loans[id].reward > 0) {\n', '                distributor.distribute(reward);\n', '            }\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Claim TRU rewards for voters\n', '     * - Only can claim TRU rewards for funded loans\n', '     * - Voters can claim a portion of their total rewards over time\n', '     * - Claimed automatically when a user withdraws stake\n', '     *\n', '     * chi = (TRU remaining in distributor) / (Total TRU allocated for distribution)\n', '     * interest = (loan APY * term * principal)\n', '     * R = Total Reward = (interest * chi)\n', '     * R is distributed to voters based on their proportion of votes/total_votes\n', '     *\n', '     * Claimable reward = R x (current time / total time)\n', '     *      * (account TRU staked / total TRU staked) - (amount claimed)\n', '     *\n', '     * @param id Loan ID\n', '     * @param voter Voter account\n', '     */\n', '    function claim(address id, address voter) public override onlyFundedLoans(id) calculateTotalReward(id) {\n', '        uint256 claimableRewards = claimable(id, voter);\n', '\n', '        if (claimableRewards > 0) {\n', '            // track amount of claimed tokens\n', '            loans[id].claimed[voter] = loans[id].claimed[voter].add(claimableRewards);\n', '            // transfer tokens\n', '            require(trustToken.transfer(voter, claimableRewards));\n', '            emit Claimed(id, voter, claimableRewards);\n', '        }\n', '    }\n', '\n', '    function claimed(address id, address voter) external view returns (uint256) {\n', '        return loans[id].claimed[voter];\n', '    }\n', '\n', '    function claimable(address id, address voter) public view returns (uint256) {\n', '        if (status(id) < LoanStatus.Running) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 totalTime = ILoanToken(id).term();\n', '        uint256 passedTime = block.timestamp.sub(ILoanToken(id).start());\n', '\n', '        // check time of loan\n', '        if (passedTime > totalTime) {\n', '            passedTime = totalTime;\n', '        }\n', '        // calculate how many tokens user can claim\n', '        // claimable = stakedByVoter / totalStaked\n', '        uint256 stakedByVoter = loans[id].votes[voter][false].add(loans[id].votes[voter][true]);\n', '        uint256 totalStaked = loans[id].prediction[false].add(loans[id].prediction[true]);\n', '\n', '        // calculate claimable rewards at current time\n', '        uint256 helper = loans[id].reward.mul(passedTime).mul(stakedByVoter);\n', '        uint256 totalClaimable = helper.div(totalTime).div(totalStaked);\n', '        if (totalClaimable < loans[id].claimed[voter]) {\n', '            // This happens only in one case: voter withdrew part of stake after loan has ended and claimed all possible rewards\n', '            return 0;\n', '        }\n', '        return totalClaimable.sub(loans[id].claimed[voter]);\n', '    }\n', '\n', '    /**\n', '     * @dev Check if a prediction was correct for a specific loan and vote\n', '     * @param id Loan ID\n', '     * @param choice Outcome prediction\n', '     */\n', '    function wasPredictionCorrect(address id, bool choice) internal view returns (bool) {\n', '        if (status(id) == LoanStatus.Settled && choice) {\n', '            return true;\n', '        }\n', '        if (status(id) == LoanStatus.Defaulted && !choice) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @dev Get status for a specific loan\n', '     * We rely on correct implementation of LoanToken\n', '     * @param id Loan ID\n', '     * @return Status of loan\n', '     */\n', '    function status(address id) public view returns (LoanStatus) {\n', '        Loan storage loan = loans[id];\n', "        // Void loan doesn't exist because timestamp is zero\n", '        if (loan.creator == address(0) && loan.timestamp == 0) {\n', '            return LoanStatus.Void;\n', '        }\n', '        // Retracted loan was cancelled by borrower\n', '        if (loan.creator == address(0) && loan.timestamp != 0) {\n', '            return LoanStatus.Retracted;\n', '        }\n', '        // get internal status\n', '        ILoanToken.Status loanInternalStatus = ILoanToken(id).status();\n', '\n', '        // Running is Funded || Withdrawn\n', '        if (loanInternalStatus == ILoanToken.Status.Funded || loanInternalStatus == ILoanToken.Status.Withdrawn) {\n', '            return LoanStatus.Running;\n', '        }\n', '        // Settled has been paid back in full and past term\n', '        if (loanInternalStatus == ILoanToken.Status.Settled) {\n', '            return LoanStatus.Settled;\n', '        }\n', '        // Defaulted has not been paid back in full and past term\n', '        if (loanInternalStatus == ILoanToken.Status.Defaulted) {\n', '            return LoanStatus.Defaulted;\n', '        }\n', '        // otherwise return Pending\n', '        return LoanStatus.Pending;\n', '    }\n', '}']