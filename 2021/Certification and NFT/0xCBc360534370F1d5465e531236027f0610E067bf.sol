['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-09\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.0;\n', '\n', '\n', '\n', '// Part: IKnownOrigin\n', '\n', 'interface IKnownOrigin {\n', '\n', '    /**\n', '    * @dev Public entry point for purchasing an edition on behalf of someone else\n', '    * @dev Reverts if edition is invalid\n', '    * @dev Reverts if payment not provided in full\n', '    * @dev Reverts if edition is sold out\n', '    * @dev Reverts if edition is not active or available\n', '    */\n', '    function purchaseTo(address _to, uint256 _editionNumber)\n', '    external\n', '    payable\n', '    returns (uint256);\n', '\n', '    /**\n', '    * @dev Main entry point for looking up edition config/metadata\n', '    * @dev Reverts if invalid edition number provided\n', '    */\n', '    function detailsOfEdition(uint256 editionNumber) \n', '    external \n', '    view\n', '    returns (\n', '        bytes32 _editionData,\n', '        uint256 _editionType,\n', '        uint256 _startDate,\n', '        uint256 _endDate,\n', '        address _artistAccount,\n', '        uint256 _artistCommission,\n', '        uint256 _priceInWei,\n', '        string memory _tokenURI,\n', '        uint256 _totalSupply,\n', '        uint256 _totalAvailable,\n', '        bool _active\n', '    );\n', '}\n', '\n', '// File: KnownOriginMarket.sol\n', '\n', 'library KnownOriginMarket {\n', '\n', '    address public constant KNOWNORIGIN = 0xFBeef911Dc5821886e1dda71586d90eD28174B7d;\n', '\n', '    function buyAssetsForEth(bytes memory data, address recipient) public {\n', '        uint256[] memory editionNumbers;\n', '        (editionNumbers) = abi.decode(\n', '            data,\n', '            (uint256[])\n', '        );\n', '\n', '        for (uint256 i = 0; i < editionNumbers.length; i++) {\n', '            _buyAssetFromMarket(editionNumbers[i], estimateAssetPriceInEth(editionNumbers[i]), recipient);\n', '        }\n', '    }\n', '\n', '    function estimateAssetPriceInEth(uint256 editionNumber) public view returns(uint256 priceInWei) {\n', '        // Get price to mint the next print\n', '        (,,,,,,priceInWei,,,,) = IKnownOrigin(KNOWNORIGIN).detailsOfEdition(editionNumber);\n', '    }\n', '\n', '    function estimateBatchAssetPriceInEth(bytes memory data) public view returns(uint256 totalCost) {\n', '        uint256[] memory editionNumbers;\n', '        (editionNumbers) = abi.decode(\n', '            data,\n', '            (uint256[])\n', '        );\n', '\n', '        for (uint256 i = 0; i < editionNumbers.length; i++) {\n', '            uint256 priceInWei;\n', '            (,,,,,,priceInWei,,,,) = IKnownOrigin(KNOWNORIGIN).detailsOfEdition(editionNumbers[i]);\n', '            totalCost += priceInWei;\n', '        }\n', '    }\n', '\n', '    function _buyAssetFromMarket(uint256 _editionNumber, uint256 _price, address _recipient) internal {\n', '        bytes memory _data = abi.encodeWithSelector(IKnownOrigin(KNOWNORIGIN).purchaseTo.selector, _recipient, _editionNumber);\n', '\n', '        (bool success, ) = KNOWNORIGIN.call{value:_price}(_data);\n', '        require(success, "_buyAssetFromMarket: KnownOrigin buy failed.");\n', '    }\n', '}']