['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-23\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', 'pragma solidity =0.8.4;\n', '\n', '/**\n', ' * @dev BrinkVote is a simple balance ledger created for Brink proposal voting on snapshot.org\n', ' *\n', ' * This is not an ERC20 token! It does not fully implement the ERC20 standard. Balances cannot be transfered. Balances\n', ' * can be minted by the owners of the contract. Once a balance is minted it becomes immutable.\n', ' *\n', ' * This contract was created solely for the purpose of vote signaling. It allows Brink community members to broadcast\n', ' * their opinions on Brink protocol development proposals.\n', ' */\n', 'contract BrinkVote {\n', '  string private constant _symbol = "BRINKVOTE";\n', '  string private constant _name = "Brink Vote";\n', '  uint8 private constant _decimals = 18;\n', '  uint256 private constant _totalSupply = 5_000_000_000000000000000000; // 5 Million\n', '\n', '  mapping (address => uint256) private _balances;\n', '  mapping (address => bool) private _owners;\n', '\n', '  uint256 private _totalGranted;\n', '\n', '  modifier onlyOwner() {\n', '    require(_isOwner(msg.sender), "NOT_OWNER");\n', '    _;\n', '  }\n', '\n', '  constructor (address initialOwner) {\n', '    _owners[initialOwner] = true;\n', '  }\n', '\n', '  function name() external pure returns (string memory) {\n', '      return _name;\n', '  }\n', '\n', '  function symbol() external pure returns (string memory) {\n', '    return _symbol;\n', '  }\n', '\n', '  function decimals() external pure returns (uint8) {\n', '    return _decimals;\n', '  }\n', '\n', '  function totalSupply() external pure returns (uint256) {\n', '    return _totalSupply;\n', '  }\n', '\n', '  function totalGranted() external view returns (uint256) {\n', '    return _totalGranted;\n', '  }\n', '\n', '  function balanceOf(address account) external view returns (uint256) {\n', '    return _balances[account];\n', '  }\n', '\n', '  function isOwner(address owner) external view returns (bool) {\n', '    return _isOwner(owner);\n', '  }\n', '\n', '  function grant(address account, uint256 amount) external onlyOwner {\n', '    _grant(account, amount);\n', '  }\n', '\n', '  function multigrant(address[] calldata accounts, uint256[] calldata amounts) external onlyOwner {\n', '    require(accounts.length == amounts.length, "LENGTH_MISMATCH");\n', '    for(uint8 i = 0; i < accounts.length; i++) {\n', '      _grant(accounts[i], amounts[i]);\n', '    }\n', '  }\n', '\n', '  function addOwner(address owner) external onlyOwner {\n', '    require(!_isOwner(owner), "ALREADY_OWNER");\n', '    _owners[owner] = true;\n', '  }\n', '\n', '  function removeOwner(address owner) external onlyOwner {\n', '    require(_isOwner(owner), "CANNOT_REMOVE_NON_OWNER");\n', '    require(owner != msg.sender, "CANNOT_REMOVE_SELF_OWNER");\n', '    _owners[owner] = false;\n', '  }\n', '\n', '  function _capExceeded() internal view returns (bool) {\n', '    return _totalGranted > _totalSupply;\n', '  }\n', '\n', '  function _isOwner(address owner) internal view returns (bool) {\n', '    return _owners[owner];\n', '  }\n', '\n', '  function _grant(address account, uint256 amount) internal {\n', '    require(_balances[account] == 0, "ACCOUNT_HAS_BALANCE");\n', '    _balances[account] = amount;\n', '    _totalGranted += amount;\n', '    require(!_capExceeded(), "CAP_EXCEEDED");\n', '  }\n', '}']