['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity ^0.5.17;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', 'interface IController {\n', '    function withdraw(address, uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function earn(address, uint256) external;\n', '    function want(address) external view returns (address);\n', '    function rewards() external view returns (address);\n', '    function vaults(address) external view returns (address);\n', '    function strategies(address) external view returns (address);\n', '    function approveStrategy(address, address) external;\n', '    function setStrategy(address, address) external;\n', '    function setVault(address, address) external;\n', '}\n', 'interface Gauge {\n', '    function deposit(uint256) external;\n', '    function balanceOf(address) external view returns (uint256);\n', '    function withdraw(uint256) external;\n', '}\n', 'interface Mintr {\n', '    function mint(address) external;\n', '}\n', 'interface Uni {\n', '    function swapExactTokensForTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external;\n', '}\n', 'interface ICurveFi {\n', '    function add_liquidity(\n', '        uint256[2] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '}\n', '\n', 'interface VoterProxy {\n', '    function withdraw(\n', '        address _gauge,\n', '        address _token,\n', '        uint256 _amount\n', '    ) external returns (uint256);\n', '    function balanceOf(address _gauge) external view returns (uint256);\n', '    function withdrawAll(address _gauge, address _token) external returns (uint256);\n', '    function deposit(address _gauge, address _token) external;\n', '    function harvest(address _gauge) external;\n', '    function lock() external;\n', '    function claimRewards(address _gauge, address _token) external;\n', '    function approveStrategy(address _gauge, address _strategy) external;\n', '}\n', '\n', 'contract StrategyCurveEURVoterProxy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address public constant want = address(0x194eBd173F6cDacE046C53eACcE9B953F28411d1);\n', '    address public constant crv = address(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '\n', '    address public constant curve = address(0x0Ce6a5fF5217e38315f87032CF90686C96627CAA);\n', '    address public constant gauge = address(0x90Bb609649E0451E5aD952683D64BD2d1f245840);\n', '    address public constant voter = address(0xF147b8125d2ef93FB6965Db97D6746952a133934);\n', '\n', '    address public constant uniswap = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address public constant sushiswap = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n', '    address public constant eurs = address(0xdB25f211AB05b1c97D595516F45794528a807ad8);\n', '    address public constant usdc = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48);\n', '    address public constant weth = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // used for crv <> weth <> usdc <> eurs route\n', '    address public constant snx = address(0xC011a73ee8576Fb46F5E1c5751cA3B9Fe0af2a6F);\n', '\n', '    uint256 public keepCRV = 1000;\n', '    uint256 public treasuryFee = 1000;\n', '    uint256 public strategistReward = 1000;\n', '    uint256 public withdrawalFee = 50;\n', '    uint256 public constant FEE_DENOMINATOR = 10000;\n', '\n', '    address public proxy;\n', '    address public dex;\n', '\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public keeper;\n', '\n', '    uint256 public earned; // lifetime strategy earnings denominated in `want` token\n', '\n', '    event Harvested(uint256 wantEarned, uint256 lifetimeEarned);\n', '\n', '    constructor(address _controller) public {\n', '        governance = msg.sender;\n', '        strategist = msg.sender;\n', '        keeper = msg.sender;\n', '        controller = _controller;\n', '        // standardize constructor\n', '        proxy = address(0x9a3a03C614dc467ACC3e81275468e033c98d960E);\n', '        dex = sushiswap;\n', '    }\n', '\n', '    function getName() external pure returns (string memory) {\n', '        return "StrategyCurveEURVoterProxy";\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!authorized");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setKeeper(address _keeper) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!authorized");\n', '        keeper = _keeper;\n', '    }\n', '\n', '    function setKeepCRV(uint256 _keepCRV) external {\n', '        require(msg.sender == governance, "!governance");\n', '        keepCRV = _keepCRV;\n', '    }\n', '\n', '    function setWithdrawalFee(uint256 _withdrawalFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        withdrawalFee = _withdrawalFee;\n', '    }\n', '\n', '    function setTreasuryFee(uint256 _treasuryFee) external {\n', '        require(msg.sender == governance, "!governance");\n', '        treasuryFee = _treasuryFee;\n', '    }\n', '\n', '    function setStrategistReward(uint256 _strategistReward) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategistReward = _strategistReward;\n', '    }\n', '\n', '    function setProxy(address _proxy) external {\n', '        require(msg.sender == governance, "!governance");\n', '        proxy = _proxy;\n', '    }\n', '\n', '    function switchDex(bool isUniswap) external {\n', '        require(msg.sender == strategist || msg.sender == governance, "!authorized");\n', '        if (isUniswap) {\n', '            dex = uniswap;\n', '        } else {\n', '            dex = sushiswap;\n', '        }\n', '    }\n', '\n', '    function deposit() public {\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            IERC20(want).safeTransfer(proxy, _want);\n', '            VoterProxy(proxy).deposit(gauge, want);\n', '        }\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        require(crv != address(_asset), "crv");\n', '        require(eurs != address(_asset), "eurs");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\n', '        uint256 _fee = _amount.mul(withdrawalFee).div(FEE_DENOMINATOR);\n', '\n', '        IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_fee));\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal returns (uint256) {\n', '        return VoterProxy(proxy).withdraw(gauge, want, _amount);\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        VoterProxy(proxy).withdrawAll(gauge, want);\n', '    }\n', '\n', '    function harvest() public {\n', '        require(msg.sender == keeper || msg.sender == strategist || msg.sender == governance, "!keepers");\n', '        VoterProxy(proxy).harvest(gauge);\n', '        uint256 _crv = IERC20(crv).balanceOf(address(this));\n', '        if (_crv > 0) {\n', '            uint256 _keepCRV = _crv.mul(keepCRV).div(FEE_DENOMINATOR);\n', '            IERC20(crv).safeTransfer(voter, _keepCRV);\n', '            _crv = _crv.sub(_keepCRV);\n', '\n', '            IERC20(crv).safeApprove(dex, 0);\n', '            IERC20(crv).safeApprove(dex, _crv);\n', '\n', '            address[] memory path = new address[](3);\n', '            path[0] = crv;\n', '            path[1] = weth;\n', '            path[2] = usdc;\n', '\n', '            Uni(dex).swapExactTokensForTokens(_crv, uint256(0), path, address(this), now.add(1800));\n', '        }\n', '        VoterProxy(proxy).claimRewards(gauge, snx);\n', '        uint256 _snx = IERC20(snx).balanceOf(address(this));\n', '        if (_snx > 0) {\n', '            IERC20(snx).safeApprove(dex, 0);\n', '            IERC20(snx).safeApprove(dex, _snx);\n', '\n', '            address[] memory path = new address[](3);\n', '            path[0] = snx;\n', '            path[1] = weth;\n', '            path[2] = usdc;\n', '\n', '            Uni(dex).swapExactTokensForTokens(_snx, uint256(0), path, address(this), now.add(1800));\n', '        }\n', '        uint256 _usdc = IERC20(usdc).balanceOf(address(this));\n', '        if (_usdc > 0) {\n', '            IERC20(usdc).safeApprove(uniswap, 0);\n', '            IERC20(usdc).safeApprove(uniswap, _snx);\n', '\n', '            address[] memory path = new address[](2);\n', '            path[0] = usdc;\n', '            path[1] = eurs;\n', '\n', '            Uni(uniswap).swapExactTokensForTokens(_usdc, uint256(0), path, address(this), now.add(1800));\n', '        }\n', '        uint256 _eurs = IERC20(eurs).balanceOf(address(this));\n', '        if (_eurs > 0) {\n', '            IERC20(eurs).safeApprove(curve, 0);\n', '            IERC20(eurs).safeApprove(curve, _eurs);\n', '            ICurveFi(curve).add_liquidity([_eurs, 0], 0);\n', '        }\n', '        uint256 _want = IERC20(want).balanceOf(address(this));\n', '        if (_want > 0) {\n', '            uint256 _fee = _want.mul(treasuryFee).div(FEE_DENOMINATOR);\n', '            uint256 _reward = _want.mul(strategistReward).div(FEE_DENOMINATOR);\n', '            IERC20(want).safeTransfer(IController(controller).rewards(), _fee);\n', '            IERC20(want).safeTransfer(strategist, _reward);\n', '            deposit();\n', '        }\n', '        VoterProxy(proxy).lock();\n', '        earned = earned.add(_want);\n', '        emit Harvested(_want, earned);\n', '    }\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public view returns (uint256) {\n', '        return VoterProxy(proxy).balanceOf(gauge);\n', '    }\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        return balanceOfWant().add(balanceOfPool());\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == governance, "!governance");\n', '        controller = _controller;\n', '    }\n', '}']