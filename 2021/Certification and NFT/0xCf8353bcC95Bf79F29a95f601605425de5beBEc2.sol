['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', '// File @boringcrypto/boring-solidity/contracts/interfaces/[email\xa0protected]\n', '// License-Identifier: MIT\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /// @notice EIP 2612\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/libraries/[email\xa0protected]\n', '// License-Identifier: MIT\n', '\n', 'library BoringERC20 {\n', '    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n', '    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n', '    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n', '    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n', '    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n', '\n', '    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n', '    /// Reverts on a failed transfer.\n', '    /// @param token The address of the ERC-20 token.\n', '    /// @param to Transfer tokens to.\n', '    /// @param amount The token amount.\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");\n', '    }\n', '\n', '    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n', '    /// Reverts on a failed transfer.\n', '    /// @param token The address of the ERC-20 token.\n', '    /// @param from Transfer tokens from.\n', '    /// @param to Transfer tokens to.\n', '    /// @param amount The token amount.\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");\n', '    }\n', '}\n', '\n', '/// @notice Interface for AAVE deposit and withdraw.\n', 'interface IAaveBridge {\n', '    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n', '\n', '    function deposit( \n', '        address asset, \n', '        uint256 amount, \n', '        address onBehalfOf, \n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    function withdraw( \n', '        address token, \n', '        uint256 amount, \n', '        address destination\n', '    ) external;\n', '}\n', '\n', '/// @notice Interface for BENTO deposit and withdraw.\n', 'interface IBentoBridge {\n', '    function registerProtocol() external;\n', '\n', '    function deposit( \n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '}\n', '\n', '/// @notice Interface for COMPOUND deposit and withdraw.\n', 'interface ICompoundBridge {\n', '    function underlying() external view returns (address);\n', '    function mint(uint mintAmount) external returns (uint);\n', '    function redeem(uint redeemTokens) external returns (uint);\n', '}\n', '\n', '/// @notice Interface for DAI deposit via `permit()` primitive.\n', 'interface IDaiPermit {\n', '    function permit(\n', '        address holder,\n', '        address spender,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        bool allowed,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '/// @notice Contract to bridge underlying defi tokens and BENTO.\n', 'contract BentoBridge {\n', '    using BoringERC20 for IERC20;\n', '\n', '    IAaveBridge immutable aave; // AAVE lending contract - 0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9\n', '    IBentoBridge immutable bento; // BENTO vault contract - 0xF5BCE5077908a1b7370B9ae04AdC565EBd643966\n', '    address immutable dai; // DAI token contract - 0x6B175474E89094C44Da98b954EedeAC495271d0F\n', '\n', '    constructor(IAaveBridge _aave, IBentoBridge _bento, address _dai) public {\n', '        _bento.registerProtocol();\n', '        aave = _aave;\n', '        bento = _bento;\n', '        dai = _dai;\n', '    }\n', '\n', '    function approveTokenBridge(IERC20[] calldata underlying, address[] calldata cToken) external {\n', '        for (uint256 i = 0; i < underlying.length; i++) {\n', '            underlying[i].approve(address(aave), type(uint256).max); // max approve `aave` spender to pull `underlying` from this contract\n', '            underlying[i].approve(address(bento), type(uint256).max); // max approve `bento` spender to pull `underlying` from this contract\n', '            underlying[i].approve(cToken[i], type(uint256).max); // max approve `cToken` spender to pull `underlying` from this contract\n', '        }\n', '    }\n', '\n', '    /// - AAVE - ///\n', '    function aaveToBento(address aToken, uint256 amount) external {\n', '        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount);\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\n', '        aave.withdraw(underlying, amount, address(this));\n', '        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\n', '    }\n', '\n', '    function aaveToBentoWithPermit(\n', '        address aToken, uint256 amount, uint256 deadline,\n', '        uint8 v, bytes32 r, bytes32 s\n', '    ) external {\n', '        IERC20(aToken).permit(msg.sender, address(this), amount, deadline, v, r, s);\n', '        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount);\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS();\n', '        aave.withdraw(underlying, amount, address(this));\n', '        bento.deposit(IERC20(underlying), address(this), msg.sender, amount, 0);\n', '    }\n', '\n', '    function bentoToAave(IERC20 underlying, uint256 amount) external {\n', '        bento.withdraw(underlying, msg.sender, address(this), amount, 0);\n', '        aave.deposit(address(underlying), amount, msg.sender, 0); \n', '    }\n', '\n', '    /// - COMPOUND/CREAM - ///\n', '    function compoundToBento(address cToken, uint256 cTokenAmount) external {\n', '        IERC20(cToken).safeTransferFrom(msg.sender, address(this), cTokenAmount);\n', '        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying());\n', '        ICompoundBridge(cToken).redeem(cTokenAmount);\n', '        bento.deposit(underlying, address(this), msg.sender, underlying.balanceOf(address(this)), 0);\n', '    }\n', '\n', '    function bentoToCompound(address cToken, uint256 underlyingAmount) external {\n', '        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying());\n', '        bento.withdraw(underlying, msg.sender, address(this), underlyingAmount, 0);\n', '        ICompoundBridge(cToken).mint(underlyingAmount);\n', '        IERC20(cToken).safeTransfer(msg.sender, IERC20(cToken).balanceOf(address(this))); \n', '    }\n', '\n', '    /// - DAI - ///\n', '    function daiToBentoWithPermit(\n', '        uint256 amount, uint256 nonce, uint256 deadline,\n', '        uint8 v, bytes32 r, bytes32 s\n', '    ) external {\n', '        IDaiPermit(dai).permit(msg.sender, address(this), nonce, deadline, true, v, r, s);\n', '        IERC20(dai).safeTransferFrom(msg.sender, address(this), amount);\n', '        bento.deposit(IERC20(dai), address(this), msg.sender, amount, 0);\n', '    }\n', '}']