['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity ^0.7.4;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function neg(uint256 a) internal pure returns (uint256) {\n', '        uint256 c = 0 - a;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'interface IStaking {\n', '    function stake(uint256 _amount) external;\n', '    function unStake(uint256 _id) external;\n', '    function claimReward(uint256 _amount) external returns (bool);\n', '    function stats(address _address) external view returns (\n', '        uint256 totalStaked,\n', '        uint256 totalRewards,\n', '        uint256 myShare,\n', '        uint256[] memory myStakes,\n', '        uint256[] memory myStakesExpirations,\n', '        uint256 myRewardsTotal,\n', '        uint256 myRewardsAvailable,\n', '        uint256 my24hRewards\n', '    );\n', '\n', '    event Staked(address _staker, uint amount, uint startTime, uint endTime);\n', '    event UnStaked(address _staker, uint amount);\n', '    event Rewarded(address _rewardant, uint amount);\n', '}\n', '\n', 'abstract contract AbstractStakingContract is IStaking {\n', '    using SafeMath for uint;\n', '\n', '    struct Stake {\n', '        uint256 amount;\n', '        uint startTime;\n', '        uint endTime;\n', '    }\n', '    struct Reward {\n', '        uint256 amount;\n', '        uint256 timeStamp;\n', '    }\n', '\n', '    // service vars\n', '    uint internal SECONDS_IN_DAY = 86400;\n', '    uint256 internal MAX_INT = uint256(-1);\n', '    uint internal deployedTimestamp;\n', '\n', '    // public vars\n', '    uint256 public totalStakedTokens;\n', '    bool public acceptingNewStakes = true;\n', '    uint256 public stakingPeriodInSec;\n', '    uint public rewardVestingPeriodInSecs;\n', '    uint public rewardsInterval = SECONDS_IN_DAY;\n', '\n', '    // contract mappings\n', '    uint internal firstStakeStart;\n', '    mapping(address => Stake[]) internal stakes;\n', '    mapping(address => uint256) internal claimedRewards;\n', '    mapping(uint => uint256) internal totalRewards;\n', '    mapping(uint => mapping(address => uint256)) internal rewards;\n', '    mapping(uint => uint256) public rewardsDailyPool;\n', '    mapping(uint => uint256) public totalStakeDaily;\n', '    mapping(address => uint256) internal totalStakeAddress;\n', '    uint[] internal rewardDays;\n', '    uint[] internal stakeDays;\n', '    mapping(address => uint) internal stakers;\n', '    address[] internal stakersStore;\n', '\n', '    // The address of the Staking Token Contract\n', '    IERC20 public stakingToken;\n', '    // The address of the Rewards Token Contract\n', '    IERC20 public rewardsToken;\n', '\n', '    // events\n', '    event SystemUpdated(string key, uint256 value);\n', '    event StakeChanged(uint256 amount, uint256 total, uint day, uint timestamp);\n', '\n', '    // modifiers\n', '    modifier onlyWhenAcceptingNewStakes() {\n', '        require(\n', '            acceptingNewStakes,\n', '            "not accepting new stakes"\n', '        );\n', '\n', '        _;\n', '    }\n', '\n', '    // internal functions\n', '    function stake(address _stakeOwner, uint256 _amount) internal returns (Stake memory) {\n', '        require(\n', '            _stakeOwner != address(0),\n', '            "stake owner can\'t be 0"\n', '        );\n', '        require(\n', '            _amount > 0,\n', '            "amount must be greater than 0"\n', '        );\n', '\n', '        Stake memory stakeData = Stake(_amount, block.timestamp, block.timestamp + stakingPeriodInSec);\n', '\n', '        // Transfer the tokens to the smart contract and update the stake owners list accordingly.\n', '        require(\n', '            stakingToken.transferFrom(msg.sender, address(this), _amount),\n', '            "insufficient allowance"\n', '        );\n', '\n', '        stakes[_stakeOwner].push(stakeData);\n', '\n', '        _addStaker(_stakeOwner);\n', '        _changeTotalStake(_amount);\n', '        totalStakeAddress[_stakeOwner] = totalStakeAddress[_stakeOwner].add(_amount);\n', '\n', '\n', '        if (firstStakeStart == 0) {\n', '            firstStakeStart = stakeData.startTime;\n', '        }\n', '        return stakeData;\n', '    }\n', '\n', '    function _changeTotalStake(uint256 _amount) internal {\n', '        totalStakedTokens = totalStakedTokens + _amount;\n', '        uint _day = _rewardDay();\n', '        uint256 _total = _increaseDailyStaked(_day, _amount);\n', '        _reCalcDailyRewards(_total, _day);\n', '\n', '        emit StakeChanged(_amount, _total, _day, block.timestamp);\n', '    }\n', '\n', '    function _removeStakeIdx(address _owner, uint index) internal {\n', '        uint _length = stakes[_owner].length;\n', '        for (uint i = index; i < _length - 1; i++) {\n', '            stakes[_owner][i] = stakes[_owner][i + 1];\n', '        }\n', '        delete stakes[_owner][stakes[_owner].length - 1];\n', '        stakes[_owner].pop();\n', '    }\n', '\n', '    struct DayData {\n', '        uint day;\n', '        uint256 stakedTotal;\n', '        uint256 rewardsPool;\n', '    }\n', '\n', '    function _getReward(address _stakeOwner) internal view returns (uint256 _totalReward, uint256 _availableReward) {\n', '        _totalReward = 0;\n', '        _availableReward = 0;\n', '\n', '        uint256 _reward;\n', '        uint256 _now = _thisDay(block.timestamp);\n', '        uint256 _lastDay = _thisDay();\n', '        for (uint256 _day = _rewardDay(max(firstStakeStart, deployedTimestamp)); _day <= _lastDay && _day <= _now; _day += rewardsInterval) {\n', '            uint _day_reward = rewards[_day][_stakeOwner];\n', '            if (_day_reward > 0) {\n', '                _reward = _day_reward;\n', '            }\n', '            if (_reward == MAX_INT) {\n', '                _reward = 0;\n', '            }\n', '\n', '            _totalReward = _totalReward.add(_reward);\n', '            if (_day < block.timestamp - rewardVestingPeriodInSecs) {\n', '                _availableReward = _availableReward.add(_reward);\n', '            }\n', '        }\n', '\n', '        _availableReward = _availableReward.sub(claimedRewards[_stakeOwner]);\n', '    }\n', '\n', '    function _getTotalRewards() internal view returns (uint256 _total) {\n', '        _total = 0;\n', '\n', '        uint256 _rewards;\n', '        uint256 _now = _thisDay(block.timestamp);\n', '        uint256 _lastDay = _thisDay();\n', '        for (uint256 _day = _rewardDay(max(firstStakeStart, deployedTimestamp)); _day <= _lastDay && _day <= _now; _day += rewardsInterval) {\n', '            if (totalRewards[_day] > 0) {\n', '                _rewards = totalRewards[_day];\n', '            }\n', '            if (_rewards == MAX_INT) {\n', '                _rewards = 0;\n', '            }\n', '\n', '            _total = _total.add(_rewards);\n', '        }\n', '    }\n', '\n', '    function _thisDay() internal view returns (uint) {\n', '        return _thisDay(block.timestamp);\n', '    }\n', '\n', '    function _thisDay(uint _timeStamp) internal view returns (uint) {\n', '        return _timeStamp.div(rewardsInterval).mul(rewardsInterval);\n', '    }\n', '\n', '    function _rewardDay() internal view returns (uint) {\n', '        return _rewardDay(block.timestamp);\n', '    }\n', '\n', '    function _rewardDay(uint _timeStamp) internal view returns (uint) {\n', '        return _timeStamp.div(rewardsInterval).add(1).mul(rewardsInterval);\n', '    }\n', '\n', '    function _dailyRewardPool(uint _forDay) internal view returns (uint256) {\n', '        for (uint idx = rewardDays.length - 1; idx >= 0; idx--) {\n', '            if (rewardDays[idx] <= _forDay) {\n', '                return rewardsDailyPool[rewardDays[idx]];\n', '            }\n', '        }\n', '\n', '        return rewardsDailyPool[deployedTimestamp];\n', '    }\n', '\n', '    function _reCalcDailyRewards(uint _day) internal {\n', '        _reCalcDailyRewards(_dailyStakedVolume(_day), _day);\n', '    }\n', '    function _reCalcDailyRewards(uint256 dailyTotal, uint _day) internal {\n', '        uint256 _stakeHolders_length = stakersStore.length;\n', '        uint256 rewardsPool = _dailyRewardPool(_day);\n', '        uint256 _total = 0;\n', '\n', '        for (uint256 i = 1; dailyTotal > 0 && i < _stakeHolders_length; i++) {\n', '            address _stakeHolder = stakersStore[i];\n', '            uint256 _stakes_length = stakes[_stakeHolder].length;\n', '            uint256 _staked = 0;\n', '\n', '            for (uint256 j = 0; j < _stakes_length; j++) {\n', '                Stake storage _stake = stakes[_stakeHolder][j];\n', '                if (_rewardDay(_stake.startTime) > _day) {\n', '                    continue;\n', '                }\n', '\n', '                _staked = _staked.add(_stake.amount);\n', '            }\n', '\n', '            if (_staked == 0) {\n', '                rewards[_day][_stakeHolder] = MAX_INT;\n', '                continue;\n', '            }\n', '\n', '            uint256 _share = _staked.mul(1000).div(dailyTotal);\n', '            uint256 _reward = rewardsPool.mul(_share).div(1000);\n', '            rewards[_day][_stakeHolder] = _reward;\n', '            _total = _total.add(_reward);\n', '        }\n', '\n', '        if (_total == 0) {\n', '            _total = MAX_INT;\n', '        }\n', '        totalRewards[_day] = _total;\n', '    }\n', '\n', '    function _increaseDailyStaked(uint _day, uint256 _diff) internal returns (uint256) {\n', '        uint256 dailyStaked = totalStakeDaily[_day];\n', '        if (dailyStaked == 0) {\n', '            dailyStaked = _dailyStakedVolume(_day);\n', '            stakeDays.push(_day);\n', '        }\n', '        if (dailyStaked == MAX_INT) {\n', '            dailyStaked = 0;\n', '        }\n', '\n', '        uint256 _total = dailyStaked + _diff;\n', '        if (_total == 0) {\n', '            _total = MAX_INT;\n', '        }\n', '        return totalStakeDaily[_day] = _total;\n', '    }\n', '\n', '    function _dailyStakedVolume(uint _forDay) internal view returns (uint256 _staked) {\n', '        _staked = 0;\n', '        if (stakeDays.length == 0) {return 0;}\n', '\n', '        for (uint idx = stakeDays.length - 1; idx >= 0; idx--) {\n', '            uint _total;\n', '            uint day = stakeDays[idx];\n', '            if (day <= _forDay && (_total = totalStakeDaily[day]) > 0) {\n', '                if (_total == MAX_INT) {\n', '                    _total = 0;\n', '                }\n', '                return _total;\n', '            }\n', '        }\n', '    }\n', '\n', '    function _totalStaked(address _stakeOwner) internal view returns (uint256) {\n', '        return totalStakeAddress[_stakeOwner];\n', '    }\n', '\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    function _addStaker(address _staker) internal {\n', '        if (!_isStaker(_staker)) {\n', '            // Append\n', '            stakers[_staker] = stakersStore.length;\n', '            stakersStore.push(_staker);\n', '        }\n', '    }\n', '\n', '    function _isStaker(address _staker) internal view returns (bool) {\n', '        // address 0x0 is not valid if pos is 0 is not in the array\n', '        if (_staker != address(0) && stakers[_staker] > 0) {\n', '            return true;\n', '        }\n', '        return false;\n', '    }\n', '\n', '    function _getPosition(uint pos) internal view returns (address) {\n', '        // Position 0 is not valid\n', '        require(pos > 0);\n', '        return stakersStore[pos];\n', '    }\n', '\n', '    function _24hRewards(address _address) internal view returns (uint256) {\n', '        if (totalStakedTokens == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 share = _totalStaked(_address).mul(1000).div(totalStakedTokens);\n', '        uint256 rewardsPool = _dailyRewardPool(_rewardDay(block.timestamp));\n', '\n', '        return rewardsPool.mul(share).div(1000);\n', '    }\n', '}\n', '\n', 'abstract contract OwnersStakingContract is AbstractStakingContract {\n', '    address internal owner;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function setNextDayRewardPool(uint256 _rewardPool) external\n', '    {\n', '        uint nextDay = _rewardDay(block.timestamp);\n', '        rewardsDailyPool[nextDay] = _rewardPool;\n', '        rewardDays.push(nextDay);\n', '\n', '        _reCalcDailyRewards(nextDay);\n', '\n', '        emit SystemUpdated("nextDayReward", _rewardPool);\n', '    }\n', '\n', '    function setRewardVestingPeriodInSecs(uint _rewardVestingPeriodInSecs) external ownerOnly {\n', '        rewardVestingPeriodInSecs = _rewardVestingPeriodInSecs;\n', '        _reCalcDailyRewards(_rewardDay(block.timestamp));\n', '\n', '        emit SystemUpdated("rewardVestingPeriodInDays", rewardVestingPeriodInSecs);\n', '    }\n', '\n', '    function setStakingPeriodInSec(uint _stakingPeriodInSec) external ownerOnly {\n', '        stakingPeriodInSec = _stakingPeriodInSec;\n', '        _reCalcDailyRewards(_rewardDay(block.timestamp));\n', '\n', '        emit SystemUpdated("stakingPeriodInSec", stakingPeriodInSec);\n', '    }\n', '\n', '    function setRewardsInterval(uint _rewardsInterval) external ownerOnly {\n', '        rewardsInterval = _rewardsInterval;\n', '        _reCalcDailyRewards(_rewardDay(block.timestamp));\n', '\n', '        emit SystemUpdated("rewardsInterval", rewardsInterval);\n', '    }\n', '\n', '    function setAcceptingNewStakes(bool _acceptingNewStakes) external ownerOnly {\n', '        acceptingNewStakes = _acceptingNewStakes;\n', '        emit SystemUpdated("acceptingNewStakes", acceptingNewStakes ? 1 : 0);\n', '    }\n', '\n', '    modifier ownerOnly() {\n', '        require(msg.sender == owner, "Oops. Not an owner");\n', '\n', '        _;\n', '    }\n', '}\n', '\n', 'contract StakingContract is OwnersStakingContract, ReentrancyGuard {\n', '    using SafeMath for uint;\n', '\n', '    constructor(\n', '        uint256 _stakingPeriodInSec,\n', '        uint _rewardVestingPeriodInSecs,\n', '        IERC20 _stakingToken,\n', '        IERC20 _rewardsToken,\n', '        uint256 _rewardsDailyPool\n', '    ) {\n', '        require(\n', '            _stakingPeriodInSec > 0,\n', '            "staking period must be greater than 0"\n', '        );\n', '        require(\n', '            address(_stakingToken) != address(0),\n', '            "Staking token must not be 0"\n', '        );\n', '        require(\n', '            address(_rewardsToken) != address(0),\n', '            "Rewards token must not be 0"\n', '        );\n', '        require(\n', '            _rewardsDailyPool > 0,\n', '            "Rewards pool must not be 0"\n', '        );\n', '\n', '        stakingPeriodInSec = _stakingPeriodInSec;\n', '        rewardVestingPeriodInSecs = _rewardVestingPeriodInSecs;\n', '        stakingToken = _stakingToken;\n', '        rewardsToken = _rewardsToken;\n', '        deployedTimestamp = block.timestamp;\n', '        rewardsDailyPool[deployedTimestamp] = _rewardsDailyPool;\n', '        rewardDays.push(deployedTimestamp);\n', '        stakersStore.push(address(0));\n', '        // position 0 would be used as invalid address\n', '    }\n', '\n', '    function stake(uint256 _amount)\n', '    external\n', '    override\n', '    onlyWhenAcceptingNewStakes\n', '    nonReentrant\n', '    {\n', '        address stakeOwner = msg.sender;\n', '        Stake memory _stake = stake(stakeOwner, _amount);\n', '\n', '        emit Staked(stakeOwner, _stake.amount, _stake.startTime, _stake.endTime);\n', '    }\n', '\n', '    function unStake(uint256 _idx)\n', '    external\n', '    override\n', '    {\n', '        address stakeOwner = msg.sender;\n', '        require(_idx < stakes[stakeOwner].length, "unstake - idx should be a valid staking index");\n', '\n', '        uint256 stakedAmount = stakes[stakeOwner][_idx].amount;\n', '        uint256 stakingEndTime = stakes[stakeOwner][_idx].endTime;\n', '\n', '        require(stakingEndTime <= block.timestamp,\n', '            "unstake - unable to unstake. you should wait until stake period is over");\n', '\n', '\n', '        stakingToken.transfer(stakeOwner, stakedAmount);\n', '        totalStakeAddress[stakeOwner] = totalStakeAddress[stakeOwner].sub(stakedAmount);\n', '        _changeTotalStake(- stakedAmount);\n', '        _removeStakeIdx(stakeOwner, _idx);\n', '\n', '        emit UnStaked(stakeOwner, stakedAmount);\n', '    }\n', '\n', '    function claimReward(uint256 _amount)\n', '    external\n', '    override\n', '    returns (bool success)\n', '    {\n', '        address requester = msg.sender;\n', '        (, uint256 available) = _getReward(requester);\n', '\n', '        require(available >= _amount, "claimReward: amount requested is greater than available");\n', '\n', '        rewardsToken.transfer(requester, _amount);\n', '        claimedRewards[requester] = claimedRewards[requester].add(_amount);\n', '\n', '        emit Rewarded(requester, _amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function stats(address _address)\n', '    external\n', '    view\n', '    override\n', '    returns (\n', '        uint256 totalStaked,\n', '        uint256 totalRewards,\n', '        uint256 myShare,\n', '        uint256[] memory myStakes,\n', '        uint256[] memory myStakesExpirations,\n', '        uint256 myRewardsTotal,\n', '        uint256 myRewardsAvailable,\n', '        uint256 my24hRewards\n', '    )\n', '    {\n', '        myShare = 0;\n', '        totalStaked = totalStakedTokens;\n', '        totalRewards = _getTotalRewards();\n', '\n', '        if (_address == address(0)) {\n', '            return (totalStaked, totalRewards, myShare, myStakes, myStakesExpirations, myRewardsTotal, myRewardsAvailable, my24hRewards);\n', '        }\n', '\n', '        if (totalStakedTokens > 0) {\n', '            myShare = _totalStaked(_address).mul(100).div(totalStakedTokens);\n', '        }\n', '\n', '        my24hRewards = _24hRewards(_address);\n', '\n', '        myStakes = new uint256[](stakes[_address].length);\n', '        myStakesExpirations = new uint256[](stakes[_address].length);\n', '\n', '        uint _length = stakes[_address].length;\n', '        for (uint8 i = 0; i < _length; ++i) {\n', '            myStakes[i] = stakes[_address][i].amount;\n', '            myStakesExpirations[i] = stakes[_address][i].endTime;\n', '        }\n', '\n', '        (myRewardsTotal, myRewardsAvailable) = _getReward(_address);\n', '    }\n', '}']