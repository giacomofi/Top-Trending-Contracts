['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', 'pragma solidity ^0.6.3;\n', '\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'abstract contract Destructor is Ownable {\n', '    bool public destructing;\n', '\n', '    modifier onlyBeforeDestruct() {\n', '        require(!destructing, "pre destory...");\n', '        _;\n', '    }\n', '\n', '    modifier onlyDestructing() {\n', '        require(destructing, "destorying...");\n', '        _;\n', '    }\n', '\n', '    function preDestruct() onlyOwner onlyBeforeDestruct public {\n', '        destructing = true;\n', '    }\n', '\n', '    function destructERC20(address _erc20, uint256 _amount) onlyOwner onlyDestructing public {\n', '        if (_amount == 0) {\n', '            _amount = IERC20(_erc20).balanceOf(address(this));\n', '        }\n', '        require(_amount > 0, "check balance");\n', '        IERC20(_erc20).transfer(owner(), _amount);\n', '    }\n', '\n', '    function destory() onlyOwner onlyDestructing public {\n', '        selfdestruct(address(uint160(owner())));\n', '    }\n', '}\n', '\n', 'abstract contract Operable is Ownable {\n', '    address public operator;\n', '\n', '    event OperatorUpdated(address indexed previous, address indexed newOperator);\n', '    constructor(address _operator) public {\n', '        if (_operator == address(0)) {\n', '            operator = msg.sender;\n', '        } else {\n', '            operator = _operator;\n', '        }\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(operator == msg.sender, "Operable: caller is not the operator");\n', '        _;\n', '    }\n', '\n', '    function updateOperator(address newOperator) public onlyOwner {\n', '        require(newOperator != address(0), "Operable: new operator is the zero address");\n', '        emit OperatorUpdated(operator, newOperator);\n', '        operator = newOperator;\n', '    }\n', '}\n', '\n', 'interface IMigratorChef {\n', '    // Perform LP token migration from legacy UniswapV2 to SushiSwap.\n', '    // Take the current LP token address and return the new LP token address.\n', "    // Migrator should have full access to the caller's LP token.\n", '    // Return the new LP token address.\n', '    //\n', '    // XXX Migrator must have allowance access to UniswapV2 LP tokens.\n', '    // SushiSwap must mint EXACTLY the same amount of SushiSwap LP tokens or\n', '    // else something bad will happen. Traditional UniswapV2 does not\n', '    // do that so be careful!\n', '    function migrate(IERC20 token) external returns (IERC20);\n', '}\n', '\n', 'interface Mintable {\n', '    function mint(address account, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface IMintProxy {\n', '    function mint(address account, uint256 amount, uint8 tp) external returns (bool);\n', '}\n', '\n', 'contract TmpMintProxy is IMintProxy, Operable, Destructor {\n', '    using SafeERC20 for IERC20;\n', '\n', '    event Mint(address indexed user, uint8 indexed tp, uint256 amount);\n', '\n', '    IERC20 public token;\n', '\n', '    constructor(IERC20 _token) Operable(address(0)) public {\n', '        token = _token;\n', '    }\n', '\n', '    // mint for deposit lp token\n', '    function mint(address account, uint256 amount, uint8 tp) onlyOperator onlyBeforeDestruct override public returns (bool){\n', '        require(account != address(0), "mint to the zero address");\n', '        IERC20(token).safeTransfer(account, amount);\n', '        emit Mint(account, tp, amount);\n', '        return true;\n', '    }\n', '}\n', '\n', 'abstract contract Reward is Ownable {\n', '    using SafeMath for uint256;\n', '    uint256 private dayRewardAmount;\n', '\n', '    mapping(address => uint256) rewardDetails;\n', '    address[] rewardAddr;\n', '\n', '    uint32 public lastMintDayTime;\n', '    uint32 public units;\n', '\n', '    event Mint(uint32 time, uint256 amount);\n', '\n', '    constructor() public {\n', '        units = 86400;\n', '    }\n', '\n', '    function updateUnits(uint32 _units) onlyOwner public{\n', '        units = _units;\n', '    }\n', '\n', '    // update lastDayTime\n', '    function refreshMintDay() internal returns(uint16)  {\n', '        uint32 _units = units;\n', '        uint32 _dayTime = ( uint32(now) / _units ) * _units;\n', '        require(_dayTime>lastMintDayTime, "day time check");\n', '        lastMintDayTime = _dayTime;\n', '    }\n', '\n', '    function clearReward() private {\n', '        uint _addrsLength = rewardAddr.length;\n', '        for (uint i=0; i< _addrsLength; i++) {\n', '            delete rewardDetails[rewardAddr[i]];\n', '        }\n', '        delete rewardAddr;\n', '    }\n', '\n', '    function mint() internal {\n', '        // clear reward\n', '        clearReward();\n', '\n', '        address[] memory _addrs;\n', '        uint256[] memory _amounts;\n', '        uint256 _total;\n', '        (_addrs, _amounts, _total) = mintInfo();\n', '\n', '        require(_addrs.length == _amounts.length, "check length");\n', '        require(_total > 0, "check total");\n', '\n', '        uint256 _rewardAmount = getRewardAmount();\n', '\n', '        uint _addrsLength = _addrs.length;\n', '        for (uint i=0; i< _addrsLength; i++) {\n', '            require(_addrs[i]!=address(0), "check address");\n', '            require(_amounts[i]>0, "check amount");\n', '\n', '            rewardDetails[_addrs[i]] = _amounts[i].mul(_rewardAmount).div(_total);\n', '            rewardAddr.push(_addrs[i]);\n', '        }\n', '\n', '        emit Mint(lastMintDayTime, _rewardAmount);\n', '    }\n', '\n', '    function withdraw() public {\n', '        uint256 _amount = rewardDetails[msg.sender];\n', '        require(_amount>0, "check reward amount");\n', '        // clear\n', '        rewardDetails[msg.sender] = 0;\n', '\n', '        transferTo(msg.sender, _amount);\n', '    }\n', '\n', '    function myReward(address addr) public view returns(uint256){\n', '        return rewardDetails[addr];\n', '    }\n', '\n', '    function withdrawInfo() public view returns(uint32, address[] memory,  uint256[] memory, uint256) {\n', '        uint256[] memory _amounts = new uint256[](rewardAddr.length);\n', '        uint256 _total = 0;\n', '        uint _arrLength = rewardAddr.length;\n', '        for (uint i=0; i< _arrLength; i++) {\n', '            uint256 amount = rewardDetails[rewardAddr[i]];\n', '            _total = _total.add(amount);\n', '            _amounts[i] = amount;\n', '        }\n', '        return (lastMintDayTime, rewardAddr, _amounts, _total);\n', '    }\n', '\n', '    function transferTo(address _to, uint256 _amount) internal virtual;\n', '    function getRewardAmount() public view virtual returns (uint256);\n', '    function mintInfo() public view virtual returns(address[] memory,  uint256[] memory, uint256);\n', '}\n', '\n', 'abstract contract RewardERC20 is Reward {\n', '    uint256 private dayRewardAmount;\n', '    address public rewardToken;\n', '\n', '    constructor(address _rewardToken, uint256 _dayRewardAmount) public {\n', '        dayRewardAmount = _dayRewardAmount;\n', '        rewardToken = _rewardToken;\n', '    }\n', '\n', '    function updateRewardAmount(uint256 _amount) onlyOwner public {\n', '        dayRewardAmount = _amount;\n', '    }\n', '\n', '    function getRewardAmount() public view override returns (uint256) {\n', '        return dayRewardAmount;\n', '    }\n', '\n', '\n', '    function transferTo(address _to, uint256 _amount) internal override {\n', '        // transfer erc20 token\n', '        IERC20(rewardToken).transfer(_to, _amount);\n', '    }\n', '}\n', '\n', 'interface ILiquidity {\n', '    function emitJoin(address _taker, uint256 _ethVal) external;\n', '}\n', '\n', 'contract LiquidityStats is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    mapping(address=>uint8) public factoryOwnerMap;\n', '    address public clearOwner;\n', '\n', '    mapping ( address => uint256 ) public takerValueMap;\n', '    address[] public takerArr;\n', '\n', '    uint256 public threshold;\n', '\n', '    constructor(address[] memory _factorys, uint256 _threshold) public {\n', '        uint _arrLength = _factorys.length;\n', '        for (uint i=0; i< _arrLength; i++) {\n', '            factoryOwnerMap[_factorys[i]] = 1;\n', '        }\n', '        threshold = _threshold;\n', '    }\n', '\n', '    function updateFactoryOwner(address[] memory _addrs, uint8[] memory _vals) onlyOwner public {\n', '        uint _arrLength = _addrs.length;\n', '        for (uint i=0; i< _arrLength; i++) {\n', '            factoryOwnerMap[_addrs[i]] = _vals[i];\n', '        }\n', '    }\n', '\n', '    function updateThreshold(uint256 _threshold) onlyOwner public {\n', '        threshold = _threshold;\n', '    }\n', '\n', '    function updateClearOwner(address _addr) onlyOwner public {\n', '        clearOwner = _addr;\n', '    }\n', '\n', '    function emitJoin(address _taker, uint256 _ethVal) public {\n', '        require(factoryOwnerMap[msg.sender]>0, "factory address check");\n', '        if(_ethVal>=threshold){\n', '            uint256 prev = takerValueMap[_taker];\n', '            if (prev == 0) {\n', '                takerArr.push(_taker);\n', '            }\n', '            takerValueMap[_taker] = prev.add(1);\n', '        }\n', '    }\n', '\n', '    function clear() public {\n', '        require(msg.sender == clearOwner, "clear owner address check");\n', '\n', '        uint _arrLength = takerArr.length;\n', '        for (uint i=0; i< _arrLength; i++) {\n', '            delete takerValueMap[takerArr[i]];\n', '        }\n', '        delete takerArr;\n', '    }\n', '\n', '    function stats() public view returns(address[] memory,  uint256[] memory, uint256) {\n', '        uint256[] memory _amounts = new uint256[](takerArr.length);\n', '        uint256 _total = 0;\n', '        uint _arrLength = takerArr.length;\n', '        for (uint i=0; i< _arrLength; i++) {\n', '            uint256 amount = takerValueMap[takerArr[i]];\n', '            _total = _total.add(amount);\n', '            _amounts[i] = amount;\n', '        }\n', '        return (takerArr, _amounts, _total);\n', '    }\n', '}\n', '\n', 'interface IStats {\n', '    function stats() external view returns(address[] memory,  uint256[] memory, uint256);\n', '    function clear() external;\n', '}\n', '\n', 'contract LiquidityMiner is Operable, RewardERC20, Destructor {\n', '    address public liquidityStatsAddr;\n', '\n', '    constructor(address _rewardToken, uint256 _dayRewardAmount, address _statsAddr, address _operatorAddr) Operable(_operatorAddr) RewardERC20(_rewardToken,_dayRewardAmount) public {\n', '        liquidityStatsAddr = _statsAddr;\n', '    }\n', '\n', '    function updateStatsAddr(address _addr) onlyOwner public {\n', '        require(_addr!=liquidityStatsAddr, "check stats address");\n', '        require(_addr!=address(0), "check stats address 0");\n', '        liquidityStatsAddr = _addr;\n', '    }\n', '\n', '    function liquidityMint() onlyOperator onlyBeforeDestruct public{\n', '        // mint\n', '        mint();\n', '        // clear\n', '        IStats(liquidityStatsAddr).clear();\n', '    }\n', '\n', '    function mintInfo() public view override returns(address[] memory,  uint256[] memory, uint256) {\n', '        return IStats(liquidityStatsAddr).stats();\n', '    }\n', '}\n', '\n', 'interface IStaking {\n', '    function hastaked(address _who) external returns(bool);\n', '    function stats() external view returns(address[] memory,  uint256[] memory, uint256);\n', '    function clear() external;\n', '}\n', '\n', 'interface IFee {\n', '    function emitFee(address _addr, uint256 _ethVal) payable external;\n', '}\n', '\n', 'contract FeeStats {\n', '    event Fee(address _addr, uint256 _ethVal);\n', '    function emitFee(address _addr, uint256 _ethVal) payable public {\n', '        require(_ethVal==msg.value, "fee value");\n', '        emit Fee(_addr, _ethVal);\n', '    }\n', '}\n', '\n', 'interface Events {\n', '    event CreatePool(uint32 indexed id, address indexed maker, bool priv, address tracker, uint256 amount, uint256 rate, uint256 units);\n', '    event Join(uint32 indexed id, address indexed taker, bool priv, uint256 ethAmount, address tracker, uint256 amount);\n', '    event Withdraw(uint32 indexed id, address indexed sender, uint256 amount, uint32 tp);\n', '    event Close(uint32 indexed id, bool priv);\n', '}\n', '\n', 'contract AbstractFactory is Ownable {\n', '    address public liquidtyAddr;\n', '    address public stakeAddr;\n', '    address public feeAddr;\n', '    uint32 public constant takerFeeBase = 100000;\n', '    uint32 public takerFeeRate;\n', '    uint256 public makerFixedFee;\n', '\n', '    constructor() public {\n', '        takerFeeRate = 0;\n', '        makerFixedFee = 0;\n', '    }\n', '\n', '    modifier makerFee() {\n', '        if(makerFixedFee>0) {\n', '            require(msg.value >= makerFixedFee, "check maker fee, fee must be le value");\n', '            require(feeAddr!=address(0), "check fee address, fail");\n', '\n', '            // transfer fee to owner\n', '            IFee(feeAddr).emitFee{value:makerFixedFee}(msg.sender, makerFixedFee);\n', '        }\n', '        _;\n', '    }\n', '\n', '    modifier takerFee(uint256 _value) {\n', '        require(_value>0, "check taker value, value must be gt 0");\n', '        uint256 _fee = 0;\n', '        if(takerFeeRate>0){\n', '            _fee = _value * takerFeeRate / takerFeeBase;\n', '            require(_fee > 0, "check taker fee, fee must be gt 0");\n', '            require(_fee < _value, "check taker fee, fee must be le value");\n', '            require(feeAddr!=address(0), "check fee address, fail");\n', '\n', '            // transfer fee to owner\n', '            IFee(feeAddr).emitFee{value:_fee}(msg.sender, _fee);\n', '        }\n', '        require(_value+_fee<=msg.value,"check taker fee and value, total must be le value");\n', '        _;\n', '    }\n', '\n', '    function joinPoolAfter(address _taker, uint256 _ethVal) internal {\n', '        if(liquidtyAddr!=address(0)){\n', '            ILiquidity(liquidtyAddr).emitJoin(_taker, _ethVal);\n', '        }\n', '    }\n', '    function updateTakerFeeRate(uint32 _rate) public onlyOwner {\n', '        takerFeeRate = _rate;\n', '    }\n', '    function updateMakerFee(uint256 _fee) public onlyOwner {\n', '        makerFixedFee = _fee;\n', '    }\n', '    function updateFeeAddr(address _addr) public onlyOwner {\n', '        feeAddr = _addr;\n', '    }\n', '    function updateLiquidityAddr(address _addr) public onlyOwner {\n', '        liquidtyAddr = _addr;\n', '    }\n', '    function updateStakeAddr(address _addr) public onlyOwner {\n', '        stakeAddr = _addr;\n', '    }\n', '    function hastaked(address _who) internal returns(bool) {\n', '        if(stakeAddr==address(0)){\n', '            return true;\n', '        }\n', '        return IStaking(stakeAddr).hastaked(_who);\n', '    }\n', '}\n', '\n', 'contract FixedPoolFactory is Events, AbstractFactory, Destructor {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct FixedPool {\n', '        string name;\n', '        address payable maker;\n', '\n', '        uint32 endTime;\n', '        bool enabled;\n', '\n', '        uint256 tokenRate;\n', '        address tokenaddr;\n', '        uint256 tokenAmount; // left amount\n', '        uint256 units;\n', '        bool onlyHolder;\n', '    }\n', '\n', '    mapping(uint32 => FixedPool) public fixedPools;\n', '    uint32 public fixedPoolCnt = 0;\n', '\n', '\n', '    function createFixedPool(string memory _name, address _tracker, uint256 _amount, uint256 _rate, uint256 _units, uint32 _endTime, bool _onlyHolder) makerFee onlyBeforeDestruct payable public {\n', '        require(_amount>0, "check create pool amount");\n', '        require(_rate>0, "check create pool rate");\n', '        require(_units>0, "check create pool units");\n', '\n', '        // transfer erc20 token from maker\n', '        IERC20(_tracker).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        fixedPools[fixedPoolCnt] =  FixedPool({\n', '            maker : msg.sender,\n', '            tokenRate : _rate,\n', '            tokenaddr : _tracker,\n', '            tokenAmount : _amount,\n', '            name: _name,\n', '            endTime: uint32(now) + _endTime,\n', '            units: _units,\n', '            enabled: true,\n', '            onlyHolder: _onlyHolder\n', '            });\n', '        emit CreatePool(fixedPoolCnt, msg.sender, false, _tracker, _amount, _rate, _units);\n', '        fixedPoolCnt++;\n', '    }\n', '\n', '    function fixedPoolJoin(uint32 _id, uint256 _value) takerFee(_value) payable public {\n', '        require(msg.value > 0, "check value, value must be gt 0");\n', '        require(_value <= msg.value, "check value, value must be le msg.value");\n', '\n', '        FixedPool storage _pool = fixedPools[_id];\n', '\n', '        // check pool exist\n', '        require(_pool.enabled, "check pool exists");\n', '        if(_pool.onlyHolder){\n', '            require(hastaked(msg.sender), "only holder");\n', '        }\n', '        // check end time\n', '        require(now < _pool.endTime, "check before end time");\n', '\n', '        uint _order = _value.mul(_pool.tokenRate).div(_pool.units);\n', '        require(_order>0, "check taker amount");\n', '        require(_order<=_pool.tokenAmount, "check left token amount");\n', '\n', '        address _taker = msg.sender; // todo test gas\n', '\n', '        _pool.tokenAmount = _pool.tokenAmount.sub(_order);\n', '\n', '        // transfer ether to maker\n', '        _pool.maker.transfer(_value);\n', '        IERC20(_pool.tokenaddr).safeTransfer(_taker, _order);\n', '\n', '        emit Join(_id, msg.sender, false, _value, _pool.tokenaddr, _order);\n', '        joinPoolAfter(msg.sender, _value);\n', '    }\n', '\n', '    function fixedPoolClose(uint32 _id) public {\n', '        FixedPool storage _pool = fixedPools[_id];\n', '\n', '        require(_pool.enabled, "check pool exists");\n', '        require(_pool.maker == msg.sender, "check maker owner");\n', '\n', '\n', '        _pool.enabled = false;\n', '        IERC20(_pool.tokenaddr).safeTransfer(_pool.maker, _pool.tokenAmount);\n', '        emit Close(_id, false);\n', '    }\n', '\n', '}\n', '\n', 'contract PrivFixedPoolFactory is Events, AbstractFactory, Destructor {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct PrivFixedPool {\n', '        string name;\n', '        address payable maker;\n', '\n', '        uint32 endTime;\n', '        bool enabled;\n', '\n', '        uint256 tokenRate;\n', '        address tokenaddr;\n', '        uint256 tokenAmount; // left amount\n', '        uint256 units;\n', '        address[] takers;\n', '    }\n', '\n', '    mapping(uint32 => PrivFixedPool) public privFixedPools;\n', '\n', '    uint32 public privFixedPoolCnt = 0;\n', '\n', '    function createPrivFixedPool(string memory  _name, address _tracker, uint256 _amount, uint256 _rate, uint256 _units, uint32 _endTime, address[] memory _takers)\n', '    makerFee onlyBeforeDestruct payable public {\n', '\n', '        require(_amount>0, "check create pool amount");\n', '        require(_rate>0, "check create pool amount");\n', '        require(_units>0, "check create pool amount");\n', '\n', '\n', '        // transfer erc20 token from maker\n', '        IERC20(_tracker).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        privFixedPools[privFixedPoolCnt] =  PrivFixedPool({\n', '            maker : msg.sender,\n', '            tokenRate : _rate,\n', '            tokenaddr : _tracker,\n', '            tokenAmount : _amount,\n', '            name: _name,\n', '            endTime: uint32(now) + _endTime,\n', '            units: _units,\n', '            enabled: true,\n', '            takers: _takers\n', '            });\n', '\n', '        emit CreatePool(privFixedPoolCnt, msg.sender, true, _tracker, _amount, _rate, _units);\n', '\n', '        privFixedPoolCnt++;\n', '    }\n', '\n', '    function privFixedPoolJoin(uint32 _id, uint32 _index, uint256 _value) takerFee(_value) payable public {\n', '        require(msg.value > 0, "check value, value must be gt 0");\n', '        require(_value <= msg.value, "check value, value must be le msg.value");\n', '\n', '        PrivFixedPool storage _pool = privFixedPools[_id];\n', '\n', '        // check pool exist\n', '        require(_pool.enabled, "check pool exists");\n', '\n', '        // check end time\n', '        require(now < _pool.endTime, "check before end time");\n', '        // check taker limit\n', '        require(_pool.takers[_index] == msg.sender, "check taker limit");\n', '\n', '        uint _order = msg.value.mul(_pool.tokenRate).div(_pool.units);\n', '        require(_order>0, "check taker amount");\n', '        require(_order<=_pool.tokenAmount, "check left token amount");\n', '\n', '        address _taker = msg.sender; // todo test gas\n', '\n', '        _pool.tokenAmount = _pool.tokenAmount.sub(_order);\n', '\n', '        // transfer ether to maker\n', '        _pool.maker.transfer(_value);\n', '\n', '        IERC20(_pool.tokenaddr).safeTransfer(_taker, _order);\n', '\n', '        emit Join(_id, msg.sender, true, msg.value, _pool.tokenaddr, _order);\n', '        joinPoolAfter(msg.sender, msg.value);\n', '    }\n', '\n', '    function privFixedPoolClose(uint32 _id) public {\n', '        PrivFixedPool storage _pool = privFixedPools[_id];\n', '\n', '        require(_pool.enabled, "check pool exists");\n', '        require(_pool.maker == msg.sender, "check maker owner");\n', '\n', '        _pool.enabled = false;\n', '        IERC20(_pool.tokenaddr).safeTransfer(_pool.maker, _pool.tokenAmount);\n', '\n', '        emit Close(_id, true);\n', '    }\n', '\n', '\n', '    function privFixedPoolTakers(uint32 _id) public view returns(address[] memory){\n', '        PrivFixedPool storage _pool = privFixedPools[_id];\n', '        return _pool.takers;\n', '    }\n', '}\n', '\n', 'contract PoolFactory is FixedPoolFactory, PrivFixedPoolFactory {}\n', '\n', 'contract BidPoolFactory is Events, AbstractFactory, Destructor {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    struct BidPool {\n', '        string name;\n', '        address payable maker;\n', '\n', '        uint32 endTime;\n', '        bool enabled;\n', '\n', '        address tokenaddr;\n', '        uint256 tokenAmount; // maker erc20 token amount\n', '\n', '        uint256 takerAmountTotal; // taker ether coin amount\n', '        uint256 makerReceiveTotal; // maker received = all - fee\n', '        mapping(address=>uint256) takerAmountMap; // taker ether coin amount\n', '\n', '        bool onlyHolder; // only token holder could join\n', '    }\n', '\n', '    mapping(uint32 => BidPool) public bidPools;\n', '    uint32 public bidPoolCnt = 0;\n', '\n', '    function createBidPool(string memory  _name, address _tracker, uint256 _amount, uint32 _endTime, bool _onlyHolder) makerFee onlyBeforeDestruct payable public {\n', '        require(_amount>0, "check create pool amount");\n', '\n', '        // transfer erc20 token from maker            \n', '        IERC20(_tracker).safeTransferFrom(msg.sender, address(this), _amount);\n', '\n', '        bidPools[bidPoolCnt] = BidPool({\n', '            name: _name,\n', '            maker : msg.sender,\n', '            endTime: uint32(now) + _endTime,\n', '            tokenaddr : _tracker,\n', '            tokenAmount : _amount,\n', '            takerAmountTotal: 0,\n', '            enabled: true,\n', '            makerReceiveTotal:0,\n', '            onlyHolder:_onlyHolder\n', '            });\n', '        emit CreatePool(bidPoolCnt, msg.sender, false, _tracker, _amount, 0, 0);\n', '        bidPoolCnt++;\n', '    }\n', '\n', '    function bidPoolJoin(uint32 _id, uint256 _value) takerFee(_value) payable public {\n', '        require(msg.value > 0, "check value, value must be gt 0");\n', '        require(_value <= msg.value, "check value, value must be le msg.value");\n', '\n', '        BidPool storage _pool = bidPools[_id];\n', '\n', '        // check pool exist\n', '        require(_pool.enabled, "check pool exists");\n', '\n', '        // check end time\n', '        require(now < _pool.endTime, "check before end time");\n', '\n', '        // check holder\n', '        if(_pool.onlyHolder){\n', '            require(hastaked(msg.sender), "only holder");\n', '        }\n', '        address _taker = msg.sender;\n', '        _pool.takerAmountMap[_taker] = _pool.takerAmountMap[_taker].add(_value);\n', '        _pool.takerAmountTotal = _pool.takerAmountTotal.add(_value);\n', '        _pool.makerReceiveTotal = _pool.makerReceiveTotal.add(_value);\n', '\n', '        emit Join(_id, msg.sender, false, _value, _pool.tokenaddr, 0);\n', '        joinPoolAfter(msg.sender, _value);\n', '    }\n', '\n', '    function bidPoolTakerWithdraw(uint32 _id) public {\n', '        BidPool storage _pool = bidPools[_id];\n', '\n', '        // check end time\n', '        require(now > _pool.endTime, "check after end time");\n', '\n', '        address _taker = msg.sender;\n', '        uint256 _amount = _pool.takerAmountMap[_taker];\n', '        require(_amount>0, "amount check");\n', '\n', '        uint256 _order = _amount.mul(_pool.tokenAmount).div(_pool.takerAmountTotal);\n', '\n', '        // clear taker amount\n', '        delete _pool.takerAmountMap[_taker];\n', '        IERC20(_pool.tokenaddr).safeTransfer(_taker, _order);\n', '        emit Withdraw(_id, _taker, _order, uint32(2));\n', '    }\n', '\n', '    function bidPoolMakerWithdraw(uint32 _id) public {\n', '        BidPool storage _pool = bidPools[_id];\n', '        // check end time\n', '        require(now > _pool.endTime, "check after end time");\n', '        require(_pool.enabled, "check pool enabled");\n', '        require(_pool.maker == msg.sender, "check pool owner");\n', '        if( _pool.takerAmountTotal == 0 ){\n', '            _pool.enabled = false;\n', '            IERC20(_pool.tokenaddr).safeTransfer(_pool.maker, _pool.tokenAmount);\n', '            return;\n', '        }\n', '        uint256 _order = _pool.makerReceiveTotal;\n', '        require( _order>0, "check received value");\n', '        _pool.makerReceiveTotal = 0;\n', '        msg.sender.transfer(_order);\n', '        emit Withdraw(_id, msg.sender, _order, uint32(1));\n', '    }\n', '\n', '    function bidTakerAmount(uint32 _id, address _taker) public view returns(uint256) {\n', '        BidPool storage _pool = bidPools[_id];\n', '        uint256 _amount = _pool.takerAmountMap[_taker];\n', '        return _amount;\n', '    }\n', '}']