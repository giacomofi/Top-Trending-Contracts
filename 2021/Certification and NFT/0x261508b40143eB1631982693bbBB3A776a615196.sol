['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '/*\n', ' * Curio StableCoin System\n', ' *\n', ' * Copyright ©️ 2021 Curio AG (Company Number FL-0002.594.728-9)\n', ' * Incorporated and registered in Liechtenstein.\n', ' *\n', ' * Copyright ©️ 2021 Curio Capital AG (Company Number CHE-211.446.654)\n', ' * Incorporated and registered in Zug, Switzerland.\n', ' */\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.5.12;\n', '\n', 'interface DSPauseAbstract {\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setDelay(uint256) external;\n', '    function plans(bytes32) external view returns (bool);\n', '    function proxy() external view returns (address);\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function drop(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface SpotAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '    function vat() external view returns (address);\n', '    function par() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '    function cage() external;\n', '}\n', '\n', 'contract SpellAction {\n', '    // MAINNET ADDRESSES\n', '    address constant PIP_CT1        = 0x27B53D5b793617A99cAEa7dA056c26F2D181AE3a;\n', '    address constant MCD_SPOT       = 0x6c008f90527Eb9Fc4762b331C5A8A1fEAe2542C9;\n', '\n', '    function execute() external {\n', '\n', '        /************************************/\n', '        /*** CT1 COLLATERAL PRICE SOURCE CHANGE ***/\n', '        /************************************/\n', '        // Set ilk bytes32 variable\n', '        bytes32 ilk = "CT1-A";\n', '\n', '        // Set the COMP PIP in the Spotter\n', '        SpotAbstract(MCD_SPOT).file(ilk, "pip", PIP_CT1);\n', '\n', '        // Update CT1 spot value in Vat\n', '        SpotAbstract(MCD_SPOT).poke(ilk);\n', '    }\n', '}\n', '\n', 'contract DssSpell {\n', '    DSPauseAbstract public pause =\n', '        DSPauseAbstract(0x1e692eF9cF786Ed4534d5Ca11EdBa7709602c69f); // MAINNET ADDRESS\n', '    address         public action;\n', '    bytes32         public tag;\n', '    uint256         public eta;\n', '    bytes           public sig;\n', '    uint256         public expiration;\n', '    bool            public done;\n', '\n', '    string constant public description = "Use custom Ferrari F12 TDF price oracle for CT1";\n', '\n', '    constructor() public {\n', '        sig = abi.encodeWithSignature("execute()");\n', '        action = address(new SpellAction());\n', '        bytes32 _tag;\n', '        address _action = action;\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '        expiration = now + 30 days;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + DSPauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', 'interface Vote {\n', '    function vote(address[] calldata yays) external;\n', '    function lift(address a) external;\n', '    function lock(uint256 _amount) external;\n', '}']