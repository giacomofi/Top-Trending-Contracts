['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-30\n', '*/\n', '\n', 'pragma solidity >=0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract Addresses {\n', '\taddress constant public ACTIONS = 0x80F33ED0A69935dd74310b9D0009D0BA647Cf223;\n', '\taddress constant public ASSESSOR = 0x76343D8BDACAFbabE2a4476ec004Ac3D5501DdF8;\n', '\taddress constant public COLLECTOR = 0x813B7c6692A56ff440eD6C638b7357d040bC8958;\n', '\taddress constant public COORDINATOR = 0x3e3f323a95018Ee133D47c4841f5AF235E2aF4f5;\n', '\taddress constant public FEED = 0xd9b2471F5c7494254b8d52f4aB3146e747ABc9AB;\n', '\taddress constant public JUNIOR_MEMBERLIST = 0x364B69aFc0101Af31089C5aE234D8444C355e8a0;\n', '\taddress constant public JUNIOR_OPERATOR = 0x54c2B9AE8D556c74677dA2e286c8198b354E7d27;\n', '\taddress constant public JUNIOR_TOKEN = 0xD7a70741B44F5ddaB371c2D2EB9D030A7c1a4BA0;\n', '\taddress constant public JUNIOR_TRANCHE = 0xF53EBEDAe8E3e0C77BA12e26c504ee1B0Eccd147;\n', '\taddress constant public PILE = 0xAAEaCfcCc3d3249f125Ba0644495560309C266cB;\n', '\taddress constant public POOL_ADMIN = 0x68c19d14937e43ACa58538628ac2F99e167F2C9C;\n', '\taddress constant public PROXY_REGISTRY = 0xC9045c815bF123ad12EA75b9A7c579C1e05051f9;\n', '\taddress constant public RESERVE = 0x5Aa3F927619d522d21AE9522F018030038aDC0E6;\n', '\taddress constant public ROOT = 0x235893Bf9695F68a922daC055598401D832b538b;\n', '\taddress constant public SENIOR_MEMBERLIST = 0x3e77f47e5e1Ec71fabE473347400A06d9Af13eE3;\n', '\taddress constant public SENIOR_OPERATOR = 0x2844b69835F182190eB6F602C6cfA2981E143c20;\n', '\taddress constant public SENIOR_TOKEN = 0x419A0B6f55Ff030cC50c6C5178d579D5828D8Db8;\n', '\taddress constant public SENIOR_TRANCHE = 0xB9c79d0721E378D9CF8D18a1e74CB462D57B571F;\n', '\taddress constant public SHELF = 0x4Ca7049E61629407a7E829564C1Dd2538d70182C;\n', '\taddress constant public TINLAKE_CURRENCY = 0xad3E3Fc59dff318BecEaAb7D00EB4F68b1EcF195;\n', '\taddress constant public TITLE = 0x33a764604EA9624B4258d7d6dCc08Ce2b8EDa825; \n', '\taddress constant public POOL_REGISTRY = 0xddf1C516Cf87126c6c610B52FD8d609E67Fb6033;\n', '}\n', '\n', '\n', 'interface SpellTinlakeRootLike {\n', '    function relyContract(address, address) external;\n', '}\n', 'interface SpellReserveLike {\n', '    function payout(uint currencyAmount) external;\n', '}\n', '\n', 'interface DependLike {\n', '    function depend(bytes32, address) external;\n', '}\n', '\n', 'interface AuthLike {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function wards(address) external returns(uint);\n', '}\n', '\n', 'interface PoolRegistryLike {\n', '  function file(address pool, bool live, string memory name, string memory data) external;\n', '  function find(address pool) external view returns (bool live, string memory name, string memory data);\n', '}\n', '\n', 'interface MigrationLike {\n', '    function migrate(address) external;\n', '}\n', '\n', 'interface SpellERC20Like {\n', '    function balanceOf(address) external view returns (uint256);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function approve(address, uint) external;\n', '}\n', '\n', 'contract TinlakeSpell is Addresses {\n', '\n', '    bool public done;\n', '    string constant public description = "Tinlake Reserve migration spell";\n', '\n', '    // TODO: replace the following address\n', '    address constant public RESERVE_NEW = 0xB12e705733042610174ed22F6726d26DB12DBdFE;\n', '    string constant public IPFS_HASH = "QmbaWWRy2MAsABKvCstdWmLzdKfvujTEQNq7qWuz2sr6sg";\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        execute();\n', '    }\n', '\n', '    function execute() internal {\n', '        SpellTinlakeRootLike root = SpellTinlakeRootLike(ROOT);\n', '\n', '        // set spell as ward on the core contract to be able to wire the new contracts correctly\n', '        root.relyContract(SHELF, address(this));\n', '        root.relyContract(COLLECTOR, address(this));\n', '        root.relyContract(JUNIOR_TRANCHE, address(this));\n', '        root.relyContract(SENIOR_TRANCHE, address(this));\n', '        // root.relyContract(CLERK, address(this));\n', '        root.relyContract(ASSESSOR, address(this));\n', '        root.relyContract(COORDINATOR, address(this));\n', '        root.relyContract(RESERVE, address(this));\n', '        root.relyContract(RESERVE_NEW, address(this));\n', '        \n', '        migrateReserve();\n', '        updateRegistry();\n', '    }\n', '\n', '    function migrateReserve() internal {\n', '        MigrationLike(RESERVE_NEW).migrate(RESERVE);\n', '\n', '        // migrate dependencies \n', '        DependLike(RESERVE_NEW).depend("assessor", ASSESSOR);\n', '        DependLike(RESERVE_NEW).depend("currency", TINLAKE_CURRENCY);\n', '        DependLike(RESERVE_NEW).depend("shelf", SHELF);\n', '        // DependLike(RESERVE_NEW).depend("lending", CLERK);\n', '        DependLike(RESERVE_NEW).depend("pot", RESERVE_NEW);\n', '        DependLike(SHELF).depend("distributor", RESERVE_NEW);\n', '        DependLike(SHELF).depend("lender", RESERVE_NEW);\n', '        DependLike(COLLECTOR).depend("distributor", RESERVE_NEW);\n', '        DependLike(JUNIOR_TRANCHE).depend("reserve", RESERVE_NEW);\n', '        DependLike(SENIOR_TRANCHE).depend("reserve", RESERVE_NEW);\n', '        // DependLike(CLERK).depend("reserve", RESERVE_NEW); \n', '        DependLike(ASSESSOR).depend("reserve", RESERVE_NEW);\n', '        DependLike(COORDINATOR).depend("reserve", RESERVE_NEW);\n', '\n', '        // migrate permissions\n', '        AuthLike(RESERVE_NEW).rely(JUNIOR_TRANCHE);\n', '        AuthLike(RESERVE_NEW).rely(SENIOR_TRANCHE);\n', '        AuthLike(RESERVE_NEW).rely(ASSESSOR);\n', '        // AuthLike(RESERVE_NEW).rely(CLERK);\n', '\n', '        // AuthLike(CLERK).rely(RESERVE_NEW);\n', '        // AuthLike(CLERK).deny(RESERVE);\n', '        AuthLike(ASSESSOR).rely(RESERVE_NEW);\n', '        AuthLike(ASSESSOR).deny(RESERVE);\n', '        \n', '        // migrate reserve balance\n', '        SpellERC20Like currency = SpellERC20Like(TINLAKE_CURRENCY);\n', '        uint balanceReserve = currency.balanceOf(RESERVE);\n', '        SpellReserveLike(RESERVE).payout(balanceReserve);\n', '        currency.transferFrom(address(this), RESERVE_NEW, balanceReserve);\n', '    }\n', '\n', '    function updateRegistry() internal {\n', '        PoolRegistryLike(POOL_REGISTRY).file(ROOT, true, "Pezesha-1", IPFS_HASH);\n', '    }\n', '}']