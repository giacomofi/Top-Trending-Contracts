['pragma solidity ^0.5.16;\n', '\n', 'import "openzeppelin-solidity-2.3.0/contracts/ownership/Ownable.sol";\n', '\n', 'contract UniverseChart is Ownable {\n', '    /**\n', '     * @dev The struct of account information\n', '     * @param id The account id\n', '     * @param referrer The referrer addresss (cannot be address 0)\n', '     * @notice company is the root account with id = 0 on initialization\n', '     */\n', '    struct Account {\n', '        uint128 id;\n', '        uint128 referrerId;\n', '    }\n', '\n', '    uint128 public lastId = 1;\n', '    mapping(address => Account) public accounts;\n', '    mapping(uint128 => address) public accountIds;\n', '\n', '    event Register(uint128 id, address user, address referrer);\n', '\n', '    constructor(address _company) public {\n', '        setCompany(_company);\n', '    }\n', '\n', '    /**\n', '     * @dev Utils function to change default company address\n', '     * @param _referrer The referrer address;\n', '     */\n', '    function register(address _referrer) external {\n', '        require(\n', '            accounts[_referrer].id != 0 || _referrer == accountIds[0],\n', '            "Invalid referrer address"\n', '        );\n', '        require(accounts[msg.sender].id == 0, "Account has been registered");\n', '\n', '        Account memory account =\n', '            Account({id: lastId, referrerId: accounts[_referrer].id});\n', '\n', '        accounts[msg.sender] = account;\n', '        accountIds[lastId] = msg.sender;\n', '\n', '        emit Register(lastId++, msg.sender, _referrer);\n', '    }\n', '\n', '    /**\n', '     * @dev Utils function to change default company address\n', '     * @param _company The new company address;\n', '     */\n', '    function setCompany(address _company) public onlyOwner {\n', '        require(\n', '            _company != accountIds[0],\n', '            "You entered the same company address"\n', '        );\n', '        require(\n', '            accounts[_company].id == 0,\n', '            "Company was registered on the chart"\n', '        );\n', '        Account memory account = Account({id: 0, referrerId: 0});\n', '        accounts[_company] = account;\n', '        accountIds[0] = _company;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be aplied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * > Note: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}']