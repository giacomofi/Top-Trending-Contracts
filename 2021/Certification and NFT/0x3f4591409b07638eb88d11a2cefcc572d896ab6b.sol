['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-25\n', '*/\n', '\n', '// Dependency file: contracts/interfaces/IERC20.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: contracts/Ownable.sol\n', '\n', '// pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// Root file: contracts/governance/PropolsalRewarder.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', "// import 'contracts/interfaces/IERC20.sol';\n", "// import 'contracts/Ownable.sol';\n", '\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', 'contract PropolsalRewarder is Ownable {\n', '    address public rewardToken;\n', '    address public governance;\n', '    uint256 public idTreshold;\n', '\n', '    uint256 public reward;\n', '    mapping(uint256 => bool) public rewardedPropolsals;\n', '\n', '    constructor(address _governance, address _rewardToken, uint256 _reward, uint256 _idTreshold) public {\n', '        rewardToken = _rewardToken;\n', '        governance = _governance;\n', '        reward = _reward;\n', '        idTreshold = _idTreshold;\n', '    }\n', '\n', '    function setReward(uint256 _newReward) external onlyOwner {\n', '        reward = _newReward;\n', '    }\n', '\n', '    function setGovernance(address _newGovernance) external onlyOwner {\n', '        governance = _newGovernance;\n', '    }\n', '\n', '\n', '    function withdrawLeftovers(address _to) external onlyOwner {\n', '        IERC20(rewardToken).transfer(_to, IERC20(rewardToken).balanceOf(address(this)));\n', '    }\n', '\n', '\n', '    function getPropolsalReward(uint256 pid) external returns (bool) {\n', '        require(pid > idTreshold, "This propolsal was created too early to be rewarded.");\n', '        require(!rewardedPropolsals[pid], "This propolsal has been already rewarded.");\n', '        rewardedPropolsals[pid] = true;\n', '\n', '        bytes memory payload = abi.encodeWithSignature("proposals(uint256)", pid);\n', '        (bool success, bytes memory returnData) = address(governance).call(payload);\n', '        require(success, "Failed to get propolsal.");\n', '\n', '        address proposer;\n', '        bool executed;\n', '        assembly {\n', '            proposer := mload(add(returnData, add(0x20, 0x20)))\n', '            executed := mload(add(returnData, add(0x20, 0x100)))\n', '        }\n', '        require(proposer == msg.sender, "Only proposer can achive reward.");\n', '        require(executed, "Only executed porposers achive reward.");\n', '        \n', '        IERC20(rewardToken).transfer(msg.sender, reward);\n', '    }\n', '\n', '    receive() payable external {\n', '        revert("Do not accept ether.");\n', '    }\n', '}']