['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', 'pragma solidity >=0.7.0;\n', '\n', '// SPDX-License-Identifier: BSD-3-Clause\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a * b;\n', '    assert(a == 0 || c / a == b);\n', '    return c;\n', '  }\n', '\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '  address public owner ;\n', '\n', '\n', '  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '\n', '  /**\n', '   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '   * account.\n', '   */\n', '  constructor() {\n', '    owner = msg.sender;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', '    require(msg.sender == owner);\n', '    _;\n', '  }\n', '\n', '\n', '  /**\n', '   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '   * @param newOwner The address to transfer ownership to.\n', '   */\n', '  function transferOwnership(address newOwner) onlyOwner public {\n', '    require(newOwner != address(0));\n', '    emit OwnershipTransferred(owner, newOwner);\n', '    owner = newOwner;\n', '  }\n', '}\n', '\n', '\n', 'interface Token {\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function transfer(address, uint) external returns (bool);\n', '}\n', '\n', 'contract B26_FarmingTokensLocked is Ownable {\n', '    using SafeMath for uint;\n', '    \n', '    event Transferred(address holder, uint amount);\n', '    // B26 token contract address\n', '    address public constant tokenAddress = 0x481dE76d5ab31e28A33B0EA1c1063aDCb5B1769A;\n', '    \n', '    uint256 tokens = 0;\n', '    uint256 relaseTime = 60 days;\n', '    uint256 timing ;\n', '    \n', '\n', '    function getTiming()  public view returns (uint256){\n', '        return block.timestamp.sub(timing);\n', '    }\n', '    \n', '    function deposit(uint amountToStake) public onlyOwner{\n', '        require( tokens == 0, "Cannot deposit more Tokens");\n', '        require( amountToStake > 0, "Cannot deposit  Tokens");\n', '        require(Token(tokenAddress).transferFrom(msg.sender, address(this), amountToStake), "Insufficient Token Allowance");\n', '        tokens = amountToStake;\n', '        timing = block.timestamp;\n', '    }\n', '    \n', '    function withdraw() public onlyOwner{\n', '        require( tokens>0, "Deposit first");\n', '        require(block.timestamp.sub(timing)>relaseTime, "Not yet"); // 60 days locked\n', '        \n', '        require(Token(tokenAddress).transfer(owner, tokens), "Could not transfer tokens.");\n', '        \n', '        tokens = tokens.sub(tokens);\n', '        emit Transferred(owner, tokens);\n', '        }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    }']