['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-12\n', '*/\n', '\n', '// File: contracts/interface/ICoFiXV2DAO.sol\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXV2DAO {\n', '\n', '    function setGovernance(address gov) external;\n', '    function start() external; \n', '\n', '    // function addETHReward() external payable; \n', '\n', '    event FlagSet(address gov, uint256 flag);\n', '    event CoFiBurn(address gov, uint256 amount);\n', '}\n', '// File: contracts/interface/ICoFiXV2Controller.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXV2Controller {\n', '\n', '    event NewK(address token, uint256 K, uint256 sigma, uint256 T, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum);\n', '    event NewGovernance(address _new);\n', '    event NewOracle(address _priceOracle);\n', '    event NewKTable(address _kTable);\n', '    event NewTimespan(uint256 _timeSpan);\n', '    event NewKRefreshInterval(uint256 _interval);\n', '    event NewKLimit(int128 maxK0);\n', '    event NewGamma(int128 _gamma);\n', '    event NewTheta(address token, uint32 theta);\n', '    event NewK(address token, uint32 k);\n', '    event NewCGamma(address token, uint32 gamma);\n', '\n', '    function addCaller(address caller) external;\n', '\n', '    function setCGamma(address token, uint32 gamma) external;\n', '\n', '    function queryOracle(address token, uint8 op, bytes memory data) external payable returns (uint256 k, uint256 ethAmount, uint256 erc20Amount, uint256 blockNum, uint256 theta);\n', '\n', '    function getKInfo(address token) external view returns (uint32 k, uint32 updatedAt, uint32 theta);\n', '\n', '    function getLatestPriceAndAvgVola(address token) external payable returns (uint256, uint256, uint256, uint256);\n', '}\n', '\n', '// File: contracts/interface/ICoFiXV2Factory.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiXV2Factory {\n', '    // All pairs: {ETH <-> ERC20 Token}\n', '    event PairCreated(address indexed token, address pair, uint256);\n', '    event NewGovernance(address _new);\n', '    event NewController(address _new);\n', '    event NewFeeReceiver(address _new);\n', '    event NewFeeVaultForLP(address token, address feeVault);\n', '    event NewVaultForLP(address _new);\n', '    event NewVaultForTrader(address _new);\n', '    event NewVaultForCNode(address _new);\n', '    event NewDAO(address _new);\n', '\n', '    /// @dev Create a new token pair for trading\n', '    /// @param  token the address of token to trade\n', '    /// @param  initToken0Amount the initial asset ratio (initToken0Amount:initToken1Amount)\n', '    /// @param  initToken1Amount the initial asset ratio (initToken0Amount:initToken1Amount)\n', '    /// @return pair the address of new token pair\n', '    function createPair(\n', '        address token,\n', '\t    uint256 initToken0Amount,\n', '        uint256 initToken1Amount\n', '        )\n', '        external\n', '        returns (address pair);\n', '\n', '    function getPair(address token) external view returns (address pair);\n', '    function allPairs(uint256) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint256);\n', '\n', '    function getTradeMiningStatus(address token) external view returns (bool status);\n', '    function setTradeMiningStatus(address token, bool status) external;\n', '    function getFeeVaultForLP(address token) external view returns (address feeVault); // for LPs\n', '    function setFeeVaultForLP(address token, address feeVault) external;\n', '\n', '    function setGovernance(address _new) external;\n', '    function setController(address _new) external;\n', '    function setFeeReceiver(address _new) external;\n', '    function setVaultForLP(address _new) external;\n', '    function setVaultForTrader(address _new) external;\n', '    function setVaultForCNode(address _new) external;\n', '    function setDAO(address _new) external;\n', '    function getController() external view returns (address controller);\n', '    function getFeeReceiver() external view returns (address feeReceiver); // For CoFi Holders\n', '    function getVaultForLP() external view returns (address vaultForLP);\n', '    function getVaultForTrader() external view returns (address vaultForTrader);\n', '    function getVaultForCNode() external view returns (address vaultForCNode);\n', '    function getDAO() external view returns (address dao);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/interface/ICoFiToken.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'interface ICoFiToken is IERC20 {\n', '\n', '    /// @dev An event thats emitted when a new governance account is set\n', '    /// @param  _new The new governance address\n', '    event NewGovernance(address _new);\n', '\n', '    /// @dev An event thats emitted when a new minter account is added\n', '    /// @param  _minter The new minter address added\n', '    event MinterAdded(address _minter);\n', '\n', '    /// @dev An event thats emitted when a minter account is removed\n', '    /// @param  _minter The minter address removed\n', '    event MinterRemoved(address _minter);\n', '\n', '    /// @dev Set governance address of CoFi token. Only governance has the right to execute.\n', '    /// @param  _new The new governance address\n', '    function setGovernance(address _new) external;\n', '\n', '    /// @dev Add a new minter account to CoFi token, who can mint tokens. Only governance has the right to execute.\n', '    /// @param  _minter The new minter address\n', '    function addMinter(address _minter) external;\n', '\n', '    /// @dev Remove a minter account from CoFi token, who can mint tokens. Only governance has the right to execute.\n', '    /// @param  _minter The minter address removed\n', '    function removeMinter(address _minter) external;\n', '\n', '    /// @dev mint is used to distribute CoFi token to users, minters are CoFi mining pools\n', '    /// @param  _to The receiver address\n', '    /// @param  _amount The amount of tokens minted\n', '    function mint(address _to, uint256 _amount) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/TransferHelper.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '\n', '    function safeTransferETH(address to, uint value) internal {\n', '        (bool success,) = to.call{value:value}(new bytes(0));\n', "        require(success, 'TransferHelper: ETH_TRANSFER_FAILED');\n", '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/CoFiXV2DAO.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'contract CoFiXV2DAO is ICoFiXV2DAO, ReentrancyGuard {\n', '\n', '    using SafeMath for uint256;\n', '\n', '    /* ========== STATE ============== */\n', '\n', '    uint8 public flag; \n', '\n', '    uint32  public startedBlock;\n', '    // uint32  public lastCollectingBlock;\n', '    uint32 public lastBlock;\n', '    uint128 public redeemedAmount;\n', '    uint128 public quotaAmount;\n', '\n', '    uint8 constant DAO_FLAG_UNINITIALIZED    = 0;\n', '    uint8 constant DAO_FLAG_INITIALIZED      = 1;\n', '    uint8 constant DAO_FLAG_ACTIVE           = 2;\n', '    uint8 constant DAO_FLAG_NO_STAKING       = 3;\n', '    uint8 constant DAO_FLAG_PAUSED           = 4;\n', '    uint8 constant DAO_FLAG_SHUTDOWN         = 127;\n', '\n', '    /* ========== PARAMETERS ============== */\n', '\n', '    uint256 constant DAO_REPURCHASE_PRICE_DEVIATION = 10;  // price deviation < 5% \n', '    uint256 constant _oracleFee = 0.01 ether;\n', '\n', '\n', '    /* ========== ADDRESSES ============== */\n', '\n', '    address public cofiToken;\n', '\n', '    address public factory;\n', '\n', '    address public governance;\n', '\n', '    /* ========== CONSTRUCTOR ========== */\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    constructor(address _cofiToken, address _factory) public {\n', '        cofiToken = _cofiToken;\n', '        factory = _factory;\n', '        governance = msg.sender;\n', '        flag = DAO_FLAG_INITIALIZED;\n', '    }\n', '\n', '    /* ========== MODIFIERS ========== */\n', '\n', '    modifier onlyGovernance() \n', '    {\n', '        require(msg.sender == governance, "CDAO: not governance");\n', '        _;\n', '    }\n', '\n', '    modifier whenActive() \n', '    {\n', '        require(flag == DAO_FLAG_ACTIVE, "CDAO: not active");\n', '        _;\n', '    }\n', '\n', '    /* ========== GOVERNANCE ========== */\n', '\n', '    function setGovernance(address _new) external override onlyGovernance {\n', '        governance = _new;\n', '    }\n', '\n', '    function start() override external onlyGovernance\n', '    {  \n', '        require(flag == DAO_FLAG_INITIALIZED, "CDAO: not initialized");\n', '\n', '        startedBlock = uint32(block.number);\n', '        flag = DAO_FLAG_ACTIVE;\n', '        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_ACTIVE));\n', '    }\n', '\n', '    function pause() external onlyGovernance\n', '    {\n', '        flag = DAO_FLAG_PAUSED;\n', '        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_PAUSED));\n', '    }\n', '\n', '    function resume() external onlyGovernance\n', '    {\n', '        flag = DAO_FLAG_ACTIVE;\n', '        emit FlagSet(address(msg.sender), uint256(DAO_FLAG_ACTIVE));\n', '    }\n', '\n', '    function totalETHRewards()\n', '        external view returns (uint256) \n', '    {\n', '       return address(this).balance;\n', '    }\n', '\n', '    function migrateTo(address _newDAO) external onlyGovernance\n', '    {\n', '        require(flag == DAO_FLAG_PAUSED, "CDAO: not paused");\n', '        \n', '        if(address(this).balance > 0) {\n', '            TransferHelper.safeTransferETH(_newDAO, address(this).balance);\n', '        }\n', '        // ICoFiXV2DAO(_newDAO).addETHReward{value: address(this).balance}();\n', '\n', '        uint256 _cofiTokenAmount = ICoFiToken(cofiToken).balanceOf(address(this));\n', '        if (_cofiTokenAmount > 0) {\n', '            ICoFiToken(cofiToken).transfer(_newDAO, _cofiTokenAmount);\n', '        }\n', '    }\n', '\n', '    function burnCofi(uint256 amount) external onlyGovernance {\n', '        require(amount > 0, "CDAO: illegal amount");\n', '\n', '        uint256 _cofiTokenAmount = ICoFiToken(cofiToken).balanceOf(address(this));\n', '\n', '        require(_cofiTokenAmount >= amount, "CDAO: insufficient cofi");\n', '\n', '        ICoFiToken(cofiToken).transfer(address(0x1), amount);\n', '        emit CoFiBurn(address(msg.sender), amount);\n', '    }\n', '\n', '    /* ========== MAIN ========== */\n', '\n', '    // function addETHReward() \n', '    //     override\n', '    //     external\n', '    //     payable\n', '    // { }\n', '\n', '    function redeem(uint256 amount) \n', '        external payable nonReentrant whenActive\n', '    {\n', '        require(address(this).balance > 0, "CDAO: insufficient balance");\n', '        require (msg.value == _oracleFee, "CDAO: !oracleFee");\n', '\n', '        // check the repurchasing quota\n', '        uint256 quota = quotaOf();\n', '\n', '        uint256 price;\n', '        {\n', '            // check if the price is steady\n', '            (uint256 ethAmount, uint256 tokenAmount, uint256 avg, ) = ICoFiXV2Controller(ICoFiXV2Factory(factory).getController())\n', '                    .getLatestPriceAndAvgVola{value: msg.value}(cofiToken);\n', '            price = tokenAmount.mul(1e18).div(ethAmount);\n', '\n', '            uint256 diff = price > avg ? (price - avg) : (avg - price);\n', '            bool isDeviated = (diff.mul(100) < avg.mul(DAO_REPURCHASE_PRICE_DEVIATION))? false : true;\n', '            require(isDeviated == false, "CDAO: price deviation"); // validate\n', '        }\n', '\n', '        // check if there is sufficient quota for repurchase\n', '        require (amount <= quota, "CDAO: insufficient quota");\n', '        require (amount.mul(1e18) <= address(this).balance.mul(price), "CDAO: insufficient balance2");\n', '\n', '        redeemedAmount = uint128(amount.add(redeemedAmount));\n', '        quotaAmount = uint128(quota.sub(amount));\n', '        lastBlock = uint32(block.number);\n', '\n', '        uint256 amountEthOut = amount.mul(1e18).div(price);\n', '\n', '        // transactions\n', '        ICoFiToken(cofiToken).transferFrom(address(msg.sender), address(this), amount);\n', '        TransferHelper.safeTransferETH(msg.sender, amountEthOut);\n', '    }\n', '\n', '    function _quota() internal view returns (uint256 quota) \n', '    {\n', '        uint256 n = 100;\n', '        uint256 intv = (lastBlock == 0) ? \n', '            (block.number).sub(startedBlock) : (block.number).sub(uint256(lastBlock));\n', '        uint256 _acc = (n * intv > 30_000) ? 30_000 : (n * intv);\n', '\n', '        // check if total amounts overflow\n', '        uint256 total = _acc.mul(1e18).add(quotaAmount);\n', '        if (total > uint256(30_000).mul(1e18)){\n', '            quota = uint256(30_000).mul(1e18);\n', '        } else{\n', '            quota = total;\n', '        }\n', '    }\n', '\n', '    /* ========== VIEWS ========== */\n', '\n', '    function quotaOf() public view returns (uint256 quota) \n', '    {\n', '        return _quota();\n', '    }\n', '\n', '}']