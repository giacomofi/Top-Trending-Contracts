['//SPDX-License-Identifier: Unlicense\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "@openzeppelin/contracts/proxy/Clones.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'interface TokenInterface {\n', '    function balanceOf(address account) external view returns (uint);\n', '    function delegate(address delegatee) external;\n', '    function transfer(address dst, uint rawAmount) external returns (bool);\n', '}\n', '\n', 'interface IndexInterface {\n', '    function master() external view returns (address);\n', '}\n', '\n', 'interface InstaVestingInterface {\n', '    function terminate(address _to) external;\n', '}\n', '\n', 'contract InstaVestingFactory is Ownable {\n', '    using Clones for address;\n', '\n', '    event LogVestingStarted(\n', '        address indexed recipient,\n', '        address indexed vesting,\n', '        address owner,\n', '        uint256 amount\n', '    );\n', '    event LogRecipient(address indexed _vesting, address indexed _old, address indexed _new);\n', '    event LogTerminate(\n', '        address indexed recipient,\n', '        address indexed vesting,\n', '        address indexed sender,\n', '        uint256 timestamp\n', '    );\n', '\n', '    TokenInterface public constant token = TokenInterface(0x6f40d4A6237C257fff2dB00FA0510DeEECd303eb);\n', '    IndexInterface public constant instaIndex = IndexInterface(0x2971AdFa57b20E5a416aE5a708A8655A9c74f723);\n', '    address public vestingImplementation;\n', '\n', '    mapping(address => address) public recipients;\n', '\n', '    constructor (address _owner) public {\n', '        transferOwnership(_owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if the sender not is Master Address from InstaIndex or owner\n', '    */\n', '    modifier isOwner {\n', '        require(_msgSender() == instaIndex.master() || owner() == _msgSender(), "caller is not the owner or master");\n', '        _;\n', '    }\n', '\n', '    function setImplementation(address _vestingImplementation) external isOwner {\n', "        require(vestingImplementation == address(0), 'VestingFactory::startVesting: unauthorized');\n", '        vestingImplementation = _vestingImplementation;\n', '    }\n', '\n', '    function startVesting(\n', '        address owner_,\n', '        address recipient_,\n', '        uint256 vestingAmount_,\n', '        uint256 vestingBegin_,\n', '        uint256 vestingCliff_,\n', '        uint256 vestingEnd_\n', '    ) public {\n', "        require(recipients[recipient_] == address(0), 'VestingFactory::startVesting: unauthorized');\n", '\n', '        bytes32 salt = keccak256(abi.encode(recipient_, vestingAmount_, vestingBegin_, vestingCliff_, vestingEnd_));\n', '\n', '        address vesting = vestingImplementation.cloneDeterministic(salt);\n', '\n', '        bytes memory initData = abi.encodeWithSignature(\n', '            "initialize(address,address,uint256,uint32,uint32,uint32)",\n', '            recipient_,\n', '            owner_,\n', '            vestingAmount_,\n', '            uint32(vestingBegin_),\n', '            uint32(vestingCliff_),\n', '            uint32(vestingEnd_)\n', '        );\n', '\n', '        (bool success,) = vesting.call(initData);\n', '\n', "        require(success, 'VestingFactory::startVesting: failed to initialize');\n", '\n', '        recipients[recipient_] = vesting;\n', '\n', '        emit LogVestingStarted(recipient_, vesting, owner_, vestingAmount_);\n', '    }\n', '\n', '    function startMultipleVesting(\n', '        address[] memory owners_,\n', '        address[] memory recipients_,\n', '        uint[] memory vestingAmounts_,\n', '        uint[] memory vestingBegins_,\n', '        uint[] memory vestingCliffs_,\n', '        uint[] memory vestingEnds_\n', '    ) public {\n', '        uint _length = recipients_.length;\n', '        require(\n', '            vestingAmounts_.length == _length &&\n', '            vestingBegins_.length == _length &&\n', '            vestingCliffs_.length == _length &&\n', '            vestingEnds_.length == _length , "VestingFactory::startMultipleVesting: different lengths");\n', '\n', '        for (uint i = 0; i < _length; i++) {\n', '            startVesting(\n', '                owners_[i],\n', '                recipients_[i],\n', '                vestingAmounts_[i],\n', '                vestingBegins_[i],\n', '                vestingCliffs_[i],\n', '                vestingEnds_[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    function updateRecipient(address _oldRecipient, address _newRecipient) public {\n', '        address _vesting = recipients[_oldRecipient];\n', "        require(msg.sender == _vesting, 'VestingFactory::updateRecipient: unauthorized');\n", '        recipients[_newRecipient] = _vesting;\n', '        delete recipients[_oldRecipient];\n', '        emit LogRecipient(_vesting, _oldRecipient, _newRecipient);\n', '    }\n', '\n', '    function withdraw(uint _amt) public isOwner {\n', "        require(token.balanceOf(address(this)) >= _amt, 'VestingFactory::withdraw: insufficient balance');\n", '        token.transfer(owner(), _amt);\n', '    }\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\n', ' * deploying minimal proxy contracts, also known as "clones".\n', ' *\n', ' * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\n', ' * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\n', ' *\n', ' * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\n', ' * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\n', ' * deterministic method.\n', ' *\n', ' * _Available since v3.4._\n', ' */\n', 'library Clones {\n', '    /**\n', '     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n', '     *\n', '     * This function uses the create opcode, which should never revert.\n', '     */\n', '    function clone(address master) internal returns (address instance) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            instance := create(0, ptr, 0x37)\n', '        }\n', '        require(instance != address(0), "ERC1167: create failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Deploys and returns the address of a clone that mimics the behaviour of `master`.\n', '     *\n', '     * This function uses the create2 opcode and a `salt` to deterministically deploy\n', '     * the clone. Using the same `master` and `salt` multiple time will revert, since\n', '     * the clones cannot be deployed twice at the same address.\n', '     */\n', '    function cloneDeterministic(address master, bytes32 salt) internal returns (address instance) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            instance := create2(0, ptr, 0x37, salt)\n', '        }\n', '        require(instance != address(0), "ERC1167: create2 failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n', '     */\n', '    function predictDeterministicAddress(address master, bytes32 salt, address deployer) internal pure returns (address predicted) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            let ptr := mload(0x40)\n', '            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(ptr, 0x14), shl(0x60, master))\n', '            mstore(add(ptr, 0x28), 0x5af43d82803e903d91602b57fd5bf3ff00000000000000000000000000000000)\n', '            mstore(add(ptr, 0x38), shl(0x60, deployer))\n', '            mstore(add(ptr, 0x4c), salt)\n', '            mstore(add(ptr, 0x6c), keccak256(ptr, 0x37))\n', '            predicted := keccak256(add(ptr, 0x37), 0x55)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\n', '     */\n', '    function predictDeterministicAddress(address master, bytes32 salt) internal view returns (address predicted) {\n', '        return predictDeterministicAddress(master, salt, address(this));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']