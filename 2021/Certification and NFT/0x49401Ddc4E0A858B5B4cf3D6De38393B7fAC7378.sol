['/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  https://www.starkware.co/open-source-license/\n', '\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', 'pragma solidity ^0.5.2;\n', '\n', 'import "MainStorage.sol";\n', 'import "MainDispatcher.sol";\n', '\n', 'contract StarkExchange is MainStorage, MainDispatcher {\n', '    string public constant VERSION = "2.5.0";\n', '\n', '    uint256 constant SUBCONTRACT_BITS = 4;\n', '\n', '    // Salt for a 7 bit unique spread of all relevant selectors. Pre-calculated.\n', '    // ---------- The following code was auto-generated. PLEASE DO NOT EDIT. ----------\n', '    uint256 constant MAGIC_SALT = 45733;\n', '    uint256 constant IDX_MAP_0 = 0x201220230201001000221220210222000000020303010211122120200003002;\n', '    uint256 constant IDX_MAP_1 = 0x2100003002200010003000000300100220220203000020000101022100011100;\n', '    // ---------- End of auto-generated code. ----------\n', '\n', '    function validateSubContractIndex(uint256 index, address subContract) internal pure{\n', '        string memory id = SubContractor(subContract).identify();\n', '        bytes32 hashed_expected_id = keccak256(abi.encodePacked(expectedIdByIndex(index)));\n', '        require(\n', '            hashed_expected_id == keccak256(abi.encodePacked(id)),\n', '            "MISPLACED_INDEX_OR_BAD_CONTRACT_ID");\n', '    }\n', '\n', '    function expectedIdByIndex(uint256 index)\n', '        private pure returns (string memory id) {\n', '        if (index == 1){\n', '            id = "StarkWare_AllVerifiers_2020_1";\n', '        } else if (index == 2){\n', '            id = "StarkWare_TokensAndRamping_2020_1";\n', '        } else if (index == 3){\n', '            id = "StarkWare_StarkExState_2020_1";\n', '        } else {\n', '            revert("UNEXPECTED_INDEX");\n', '        }\n', '    }\n', '\n', '    function getNumSubcontracts() internal pure returns (uint256) {\n', '        return 3;\n', '    }\n', '\n', '    function getSubContract(bytes4 selector)\n', '        internal view returns (address) {\n', '        uint256 location = 0x7F & uint256(keccak256(abi.encodePacked(selector, MAGIC_SALT)));\n', '        uint256 subContractIdx;\n', '        uint256 offset = SUBCONTRACT_BITS * location % 256;\n', '        if (location < 64) {\n', '            subContractIdx = (IDX_MAP_0 >> offset) & 0xF;\n', '        } else {\n', '            subContractIdx = (IDX_MAP_1 >> offset) & 0xF;\n', '        }\n', '        return subContracts[subContractIdx];\n', '    }\n', '\n', '    function setSubContractAddress(uint256 index, address subContractAddress) internal {\n', '        subContracts[index] = subContractAddress;\n', '    }\n', '\n', '    function initializationSentinel()\n', '        internal view {\n', '        string memory REVERT_MSG = "INITIALIZATION_BLOCKED";\n', '        // This initializer sets roots etc. It must not be applied twice.\n', '        // I.e. it can run only when the state is still empty.\n', '        require(vaultRoot == 0, REVERT_MSG);\n', '        require(vaultTreeHeight == 0, REVERT_MSG);\n', '        require(orderRoot == 0, REVERT_MSG);\n', '        require(orderTreeHeight == 0, REVERT_MSG);\n', '    }\n', '}']