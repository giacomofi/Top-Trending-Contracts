['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./IFreeFromUpTo.sol";\n', '\n', '\n', '/**\n', '* @dev the gsve deployer has two purposes\n', '* it deploys gsve smart wrappers, keeping track of the owners\n', '* it allows users to deploy smart contracts using create and create2\n', '*/\n', 'contract GSVEDeployer is Ownable{\n', '    mapping(address => uint256) private _compatibleGasTokens;\n', '    mapping(address => uint256) private _freeUpValue;\n', '\n', '  constructor (address wchi, address wgst2, address wgst1) public {\n', '    _compatibleGasTokens[wchi] = 1;\n', '    _freeUpValue[wchi] = 30053;\n', '\n', '    _compatibleGasTokens[wgst2] = 1;\n', '    _freeUpValue[wgst2] = 30870;\n', '\n', '    _compatibleGasTokens[wgst1] = 1;\n', '    _freeUpValue[wgst1] = 20046;\n', '  }\n', '\n', '    /**\n', '    * @dev add support for trusted gas tokens - those we wrapped\n', '    */\n', '    function addGasToken(address gasToken, uint256 freeUpValue) public onlyOwner{\n', '        _compatibleGasTokens[gasToken] = 1;\n', '        _freeUpValue[gasToken] = freeUpValue;\n', '    }\n', '    \n', '    /**\n', '    * @dev function to check if a gas token is supported by the deployer\n', '    */\n', '    function compatibleGasToken(address gasToken) public view returns(uint256){\n', '        return _compatibleGasTokens[gasToken];\n', '    }\n', '\n', '    /**\n', '    * @dev GSVE moddifier that burns supported gas tokens around a function that uses gas\n', '    * the function calculates the optimal number of tokens to burn, based on the token specified\n', '    */\n', '    modifier discountGas(address gasToken) {\n', '        if(gasToken != address(0)){\n', '            require(_compatibleGasTokens[gasToken] == 1, "GSVE: incompatible token");\n', '            uint256 gasStart = gasleft();\n', '            _;\n', '            uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '            IFreeFromUpTo(gasToken).freeFromUpTo(msg.sender,  (gasSpent + 16000) / _freeUpValue[gasToken]);\n', '        }\n', '        else{\n', '            _;\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev deploys a smart contract using the create function\n', '    * if the contract is ownable, the contract ownership is passed to the message sender\n', '    * the gas token passed in as argument is burned by the moddifier\n', '    */\n', '    function GsveDeploy(bytes memory data, address gasToken) public discountGas(gasToken) returns(address contractAddress) {\n', '        assembly {\n', '            contractAddress := create(0, add(data, 32), mload(data))\n', '        }\n', '        try Ownable(contractAddress).transferOwnership(msg.sender){\n', '            emit ContractDeployed(msg.sender, contractAddress);\n', '        }\n', '        catch{\n', '            emit ContractDeployed(msg.sender, contractAddress);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev deploys a smart contract using the create2 function and a user provided salt\n', '    * if the contract is ownable, the contract ownership is passed to the message sender\n', '    * the gas token passed in as argument is burned by the moddifier\n', '    */\n', '    function GsveDeploy2(uint256 salt, bytes memory data, address gasToken) public discountGas(gasToken) returns(address contractAddress) {\n', '        assembly {\n', '            contractAddress := create2(0, add(data, 32), mload(data), salt)\n', '        }\n', '\n', '        try Ownable(contractAddress).transferOwnership(msg.sender){\n', '            emit ContractDeployed(msg.sender, contractAddress);\n', '        }\n', '        catch{\n', '            emit ContractDeployed(msg.sender, contractAddress);\n', '        }\n', '    }\n', '    \n', '    event ContractDeployed(address indexed creator, address deploymentAddress);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', '* @dev interface to allow the burning of gas tokens from an address\n', '*/\n', 'interface IFreeFromUpTo {\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256 freed);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']