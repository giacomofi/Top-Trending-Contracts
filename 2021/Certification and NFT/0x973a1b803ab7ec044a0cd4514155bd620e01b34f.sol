['// SPDX-License-Identifier: J-J-J-JENGA!!!\n', 'pragma solidity ^0.7.4;\n', '\n', '/* ROOTKIT:\n', 'A floor calculator (to use with ERC31337) for EVN uniswap pairs\n', 'Ensures 100% of accessible funds are backed at all times\n', '\n', 'Calculator with extra features\n', '- Checks floor by selling some of the total into different pools based on current liquidity\n', '- result will change slightly \n', '\n', '*/\n', '\n', 'import "./IFloorCalculator.sol";\n', 'import "./SafeMath.sol";\n', 'import "./UniswapV2Library.sol";\n', 'import "./IUniswapV2Factory.sol";\n', 'import "./TokensRecoverable.sol";\n', '\n', 'contract EvnTwoPoolCalculator is IFloorCalculator, TokensRecoverable\n', '{\n', '    using SafeMath for uint256;\n', '\n', '    IERC20 immutable evnToken;\n', '    IUniswapV2Factory immutable uniswapV2Factory;\n', '\n', '\n', '    constructor(IERC20 _evn, IUniswapV2Factory _uniswapV2Factory)\n', '    {\n', '        evnToken = _evn;\n', '        uniswapV2Factory = _uniswapV2Factory;\n', '    }    \n', '\n', '\n', '    function calculateExcessInPool(IERC20 token, address pair, uint256 liquidityShare, uint256 evnTotalSupply, uint256 evnPoolsLiquidity) internal view returns (uint256)\n', '    {\n', '        uint256 freeEVN = (evnTotalSupply.sub(evnPoolsLiquidity)).mul(liquidityShare).div(1e18);\n', '\n', '        uint256 sellAllProceeds = 0;\n', '        if (freeEVN > 0) {\n', '            address[] memory path = new address[](2);\n', '            path[0] = address(evnToken);\n', '            path[1] = address(token);\n', '            uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), freeEVN, path);\n', '            sellAllProceeds = amountsOut[1];\n', '        }\n', '\n', '        uint256 backingInPool = token.balanceOf(pair);\n', '        if (backingInPool <= sellAllProceeds) { return 0; }\n', '        uint256 excessInPool = backingInPool - sellAllProceeds;\n', '\n', '        return excessInPool;\n', '    }\n', '\n', '    function calculateExcessInPools(IERC20 wrappedToken, IERC20 backingToken) public view returns (uint256)\n', '    {\n', '        address tethPair = UniswapV2Library.pairFor(address(uniswapV2Factory), address(evnToken), address(backingToken));\n', '        address wethPair = UniswapV2Library.pairFor(address(uniswapV2Factory), address(evnToken), address(wrappedToken));   \n', '        \n', '        uint256 evnTokenTotalSupply = evnToken.totalSupply();\n', '        uint256 evnTokenPoolsLiquidity = evnToken.balanceOf(tethPair).add(evnToken.balanceOf(wethPair));\n', '        uint256 ethPoolsLiquidity = backingToken.balanceOf(tethPair).add(wrappedToken.balanceOf(wethPair));\n', '\n', '        uint256 rootLiquidityShareIntethPair = evnToken.balanceOf(tethPair).mul(1e18).div(evnTokenPoolsLiquidity);\n', '        uint256 tethLiquidityShareIntethPair = backingToken.balanceOf(tethPair).mul(1e18).div(ethPoolsLiquidity);\n', '        uint256 avgLiquidityShareIntethPair = (rootLiquidityShareIntethPair.add(tethLiquidityShareIntethPair)).div(2);\n', '        uint256 one = (1e18);\n', '\n', '        uint256 excessIntethPool = calculateExcessInPool(backingToken, tethPair, avgLiquidityShareIntethPair, evnTokenTotalSupply, evnTokenPoolsLiquidity);\n', '        uint256 excessInWethPool = calculateExcessInPool(wrappedToken, wethPair, (one).sub(avgLiquidityShareIntethPair), evnTokenTotalSupply, evnTokenPoolsLiquidity);\n', '        return excessIntethPool.add(excessInWethPool);\n', '    }\n', '\n', '    // When the floor is calculated from 2 pools it will return 0 if "available to sweep (sub floor)" is\n', '    // greater than the "wETH in tETH the contract (current backing)" Move liquidity wETH > tETH to solve\n', '    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) public override view returns (uint256) // backing token = teth\n', '    {        \n', '        uint256 excessInPools = calculateExcessInPools(wrappedToken, backingToken);\n', '\n', '        uint256 requiredBacking = backingToken.totalSupply().sub(excessInPools);\n', '        uint256 currentBacking = wrappedToken.balanceOf(address(backingToken));\n', '        if (requiredBacking >= currentBacking) { return 0; }\n', '        return currentBacking - requiredBacking;\n', '    }\n', '}']