['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-24\n', '*/\n', '\n', '// File: contracts/v4/library/SafeMath.sol\n', '\n', 'pragma solidity 0.4.24;\n', '    \n', '    \n', '    /**\n', '     * @title SafeMath\n', '     * @dev Math operations with safety checks that revert on error\n', '     */\n', '    library SafeMath {\n', '    \n', '      /**\n', '      * @dev Multiplies two numbers, reverts on overflow.\n', '      */\n', '      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '          return 0;\n', '        }\n', '    \n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '      */\n', '      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '      */\n', '      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Adds two numbers, reverts on overflow.\n', '      */\n', '      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '    \n', '        return c;\n', '      }\n', '    \n', '      /**\n', '      * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '      * reverts when dividing by zero.\n', '      */\n', '      function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '      }\n', '    }\n', '\n', '// File: contracts/v4/library/SafeMathInt.sol\n', '\n', 'pragma solidity 0.4.24;\n', '    \n', '    /*\n', '    MIT License\n', '    \n', '    Copyright (c) 2018 requestnetwork\n', '    Copyright (c) 2018 Omss, Inc.\n', '    \n', '    Permission is hereby granted, free of charge, to any person obtaining a copy\n', '    of this software and associated documentation files (the "Software"), to deal\n', '    in the Software without restriction, including without limitation the rights\n', '    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '    copies of the Software, and to permit persons to whom the Software is\n', '    furnished to do so, subject to the following conditions:\n', '    \n', '    The above copyright notice and this permission notice shall be included in all\n', '    copies or substantial portions of the Software.\n', '    \n', '    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '    SOFTWARE.\n', '    */\n', '    /**\n', '     * @title SafeMathInt\n', '     * @dev Math operations for int256 with overflow safety checks.\n', '     */\n', '    library SafeMathInt {\n', '        int256 private constant MIN_INT256 = int256(1) << 255;\n', '        int256 private constant MAX_INT256 = ~(int256(1) << 255);\n', '    \n', '        /**\n', '         * @dev Multiplies two int256 variables and fails on overflow.\n', '         */\n', '        function mul(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a * b;\n', '    \n', '            // Detect overflow when multiplying MIN_INT256 with -1\n', '            require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n', '            require((b == 0) || (c / b == a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Division of two int256 variables and fails on overflow.\n', '         */\n', '        function div(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            // Prevent overflow when dividing MIN_INT256 by -1\n', '            require(b != -1 || a != MIN_INT256);\n', '    \n', '            // Solidity already throws when dividing by 0.\n', '            return a / b;\n', '        }\n', '    \n', '        /**\n', '         * @dev Subtracts two int256 variables and fails on overflow.\n', '         */\n', '        function sub(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a - b;\n', '            require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Adds two int256 variables and fails on overflow.\n', '         */\n', '        function add(int256 a, int256 b)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            int256 c = a + b;\n', '            require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '            return c;\n', '        }\n', '    \n', '        /**\n', '         * @dev Converts to absolute value, and fails on overflow.\n', '         */\n', '        function abs(int256 a)\n', '            internal\n', '            pure\n', '            returns (int256)\n', '        {\n', '            require(a != MIN_INT256);\n', '            return a < 0 ? -a : a;\n', '        }\n', '    }\n', '\n', '// File: contracts/v4/interface/IERC20.sol\n', '\n', 'pragma solidity 0.4.24;\n', '    \n', '    /**\n', '     * @title ERC20 interface\n', '     * @dev see https://github.com/ethereum/EIPs/issues/20\n', '     */\n', '    interface IERC20 {\n', '      function totalSupply() external view returns (uint256);\n', '    \n', '      function balanceOf(address who) external view returns (uint256);\n', '    \n', '      function allowance(address owner, address spender)\n', '        external view returns (uint256);\n', '    \n', '      function transfer(address to, uint256 value) external returns (bool);\n', '    \n', '      function approve(address spender, uint256 value)\n', '        external returns (bool);\n', '    \n', '      function transferFrom(address from, address to, uint256 value)\n', '        external returns (bool);\n', '    \n', '      event Transfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value\n', '      );\n', '    \n', '      event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '      );\n', '    }\n', '\n', '// File: contracts/v4/common/Initializable.sol\n', '\n', 'pragma solidity 0.4.24;\n', '    \n', '    /**\n', '     * @title Initializable\n', '     *\n', '     * @dev Helper contract to support initializer functions. To use it, replace\n', '     * the constructor with a function that has the `initializer` modifier.\n', '     * WARNING: Unlike constructors, initializer functions must be manually\n', '     * invoked. This applies both to deploying an Initializable contract, as well\n', '     * as extending an Initializable contract via inheritance.\n', '     * WARNING: When used with inheritance, manual care must be taken to not invoke\n', '     * a parent initializer twice, or ensure that all initializers are idempotent,\n', '     * because this is not dealt with automatically as with constructors.\n', '     */\n', '    contract Initializable {\n', '    \n', '      /**\n', '       * @dev Indicates that the contract has been initialized.\n', '       */\n', '      bool private initialized;\n', '    \n', '      /**\n', '       * @dev Indicates that the contract is in the process of being initialized.\n', '       */\n', '      bool private initializing;\n', '    \n', '      /**\n', '       * @dev Modifier to use in the initializer function of a contract.\n', '       */\n', '      modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized, "Contract instance has already been initialized");\n', '    \n', '        bool wasInitializing = initializing;\n', '        initializing = true;\n', '        initialized = true;\n', '    \n', '        _;\n', '    \n', '        initializing = wasInitializing;\n', '      }\n', '    \n', '      /// @dev Returns true if and only if the function is running in the constructor\n', '      function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        uint256 cs;\n', '        assembly { cs := extcodesize(address) }\n', '        return cs == 0;\n', '      }\n', '    \n', '      // Reserved storage space to allow for layout changes in the future.\n', '      uint256[50] private ______gap;\n', '    }\n', '\n', '// File: contracts/v4/common/Ownable.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '    \n', '    /**\n', '     * @title Ownable\n', '     * @dev The Ownable contract has an owner address, and provides basic authorization control\n', '     * functions, this simplifies the implementation of "user permissions".\n', '     */\n', '    contract Ownable is Initializable {\n', '      address private _owner;\n', '    \n', '    \n', '      event OwnershipRenounced(address indexed previousOwner);\n', '      event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '      );\n', '    \n', '    \n', '      /**\n', '       * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '       * account.\n', '       */\n', '      function initialize(address sender) public initializer {\n', '        _owner = sender;\n', '      }\n', '    \n', '      /**\n', '       * @return the address of the owner.\n', '       */\n', '      function owner() public view returns(address) {\n', '        return _owner;\n', '      }\n', '    \n', '      /**\n', '       * @dev Throws if called by any account other than the owner.\n', '       */\n', '      modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '      }\n', '    \n', '      /**\n', '       * @return true if `msg.sender` is the owner of the contract.\n', '       */\n', '      function isOwner() public view returns(bool) {\n', '        return msg.sender == _owner;\n', '      }\n', '    \n', '      /**\n', '       * @dev Allows the current owner to relinquish control of the contract.\n', '       * @notice Renouncing to ownership will leave the contract without an owner.\n', '       * It will not be possible to call the functions with the `onlyOwner`\n', '       * modifier anymore.\n', '       */\n', '      function renounceOwnership() public onlyOwner {\n', '        emit OwnershipRenounced(_owner);\n', '        _owner = address(0);\n', '      }\n', '    \n', '      /**\n', '       * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '      }\n', '    \n', '      /**\n', '       * @dev Transfers control of the contract to a newOwner.\n', '       * @param newOwner The address to transfer ownership to.\n', '       */\n', '      function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '      }\n', '    \n', '      uint256[50] private ______gap;\n', '    }\n', '\n', '// File: contracts/v4/interface/IOracle.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', 'interface IOracle {\n', '    function getData() external returns (uint256, bool);\n', '    function sync() external;\n', '}\n', '\n', '// File: contracts/v4/interface/UInt256Lib.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '/**\n', ' * @title Various utilities useful for uint256.\n', ' */\n', 'library UInt256Lib {\n', '\n', '    uint256 private constant MAX_INT256 = ~(uint256(1) << 255);\n', '\n', '    /**\n', '     * @dev Safely converts a uint256 to an int256.\n', '     */\n', '    function toInt256Safe(uint256 a)\n', '        internal\n', '        pure\n', '        returns (int256)\n', '    {\n', '        require(a <= MAX_INT256);\n', '        return int256(a);\n', '    }\n', '}\n', '\n', '// File: contracts/v4/common/ERC20Detailed.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '    \n', '    \n', '    /**\n', '     * @title ERC20Detailed token\n', '     * @dev The decimals are only for visualization purposes.\n', '     * All the operations are done using the smallest and indivisible token unit,\n', '     * just as on Ethereum all the operations are done in wei.\n', '     */\n', '    contract ERC20Detailed is Initializable, IERC20 {\n', '      string private _name;\n', '      string private _symbol;\n', '      uint8 private _decimals;\n', '    \n', '      function initialize(string name, string symbol, uint8 decimals) public initializer {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '      }\n', '    \n', '      /**\n', '       * @return the name of the token.\n', '       */\n', '      function name() public view returns(string) {\n', '        return _name;\n', '      }\n', '    \n', '      /**\n', '       * @return the symbol of the token.\n', '       */\n', '      function symbol() public view returns(string) {\n', '        return _symbol;\n', '      }\n', '    \n', '      /**\n', '       * @return the number of decimals of the token.\n', '       */\n', '      function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '      }\n', '    \n', '      uint256[50] private ______gap;\n', '    }\n', '\n', '// File: contracts/v4/Oms.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Oms is ERC20Detailed, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeMathInt for int256;\n', '\n', '    event LogRebase(uint256 indexed epoch, uint256 totalSupply);\n', '    event LogRebasePaused(bool paused);\n', '    event LogTokenPaused(bool paused);\n', '    event LogOmsPolicyUpdated(address omsPolicy);\n', '\n', '    // Used for authentication\n', '    address public omsPolicy;\n', '\n', '    modifier onlyOmsPolicy() {\n', "        require(msg.sender == omsPolicy, 'Only Oms Policy can call this function');\n", '        _;\n', '    }\n', '\n', '    // Precautionary emergency controls.\n', '    bool public rebasePaused;\n', '    bool public tokenPaused;\n', '\n', '    modifier whenRebaseNotPaused() {\n', "        require(!rebasePaused, 'Rebase can not be paused');\n", '        _;\n', '    }\n', '\n', '    modifier whenTokenNotPaused() {\n', "        require(!tokenPaused, 'Token can not be paused');\n", '        _;\n', '    }\n', '\n', '    modifier validRecipient(address to) {\n', "        require(to != address(0x0), 'The address can not be a zero-address');\n", "        require(to != address(this), 'The address can not be an instance of this contract');\n", '        _;\n', '    }\n', '\n', '    uint256 private constant DECIMALS = 18;\n', '    uint256 public constant MAX_UINT256 = ~uint256(0);\n', '    uint256 private constant INITIAL_OMS_SUPPLY = 5000000 * 10**DECIMALS;\n', '\n', '    // TOTAL_GONS is a multiple of INITIAL_OMS_SUPPLY so that _gonsPerFragment is an integer.\n', '    // Use the highest value that fits in a uint256 for max granularity.\n', '    uint256 public constant TOTAL_GONS = MAX_UINT256 -\n', '        (MAX_UINT256 % INITIAL_OMS_SUPPLY);\n', '\n', '    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n', '    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 public _gonsPerFragment;\n', '    mapping(address => uint256) public _gonBalances;\n', '\n', '    mapping(address => mapping(address => uint256)) private _allowedOmss;\n', '\n', '    /**\n', '        * @param omsPolicy_ The address of the oms policy contract to use for authentication.\n', '        */\n', '    function setOmsPolicy(address omsPolicy_) external onlyOwner {\n', "        require(omsPolicy_ != address(0), 'The address can not be a zero-address');\n", '        omsPolicy = omsPolicy_;\n', '        emit LogOmsPolicyUpdated(omsPolicy_);\n', '    }\n', '\n', '    /**\n', '        * @dev Pauses or unpauses the execution of rebase operations.\n', '        * @param paused Pauses rebase operations if this is true.\n', '        */\n', '    function setRebasePaused(bool paused) external onlyOwner {\n', '        rebasePaused = paused;\n', '        emit LogRebasePaused(paused);\n', '    }\n', '\n', '    /**\n', '        * @dev Pauses or unpauses execution of ERC-20 transactions.\n', '        * @param paused Pauses ERC-20 transactions if this is true.\n', '        */\n', '    function setTokenPaused(bool paused) external onlyOwner {\n', '        tokenPaused = paused;\n', '        emit LogTokenPaused(paused);\n', '    }\n', '\n', '    /**\n', '        * @dev Notifies Omss contract about a new rebase cycle.\n', '        * @param supplyDelta The number of new oms tokens to add into circulation via expansion.\n', '        * @return The total number of omss after the supply adjustment.\n', '        */\n', '    function rebase(uint256 epoch, int256 supplyDelta)\n', '        external\n', '        onlyOmsPolicy\n', '        whenRebaseNotPaused\n', '        returns (uint256)\n', '    {\n', '        if (supplyDelta == 0) {\n', '            emit LogRebase(epoch, _totalSupply);\n', '            return _totalSupply;\n', '        }\n', '\n', '        if (supplyDelta < 0) {\n', '            _totalSupply = _totalSupply.sub(uint256(supplyDelta.abs()));\n', '        } else {\n', '            _totalSupply = _totalSupply.add(uint256(supplyDelta));\n', '        }\n', '\n', '        if (_totalSupply > MAX_SUPPLY) {\n', '            _totalSupply = MAX_SUPPLY;\n', '        }\n', '\n', '        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '\n', '        // From this point forward, _gonsPerFragment is taken as the source of truth.\n', '        // We recalculate a new _totalSupply to be in agreement with the _gonsPerFragment\n', '        // conversion rate.\n', '        // This means our applied supplyDelta can deviate from the requested supplyDelta,\n', '        // but this deviation is guaranteed to be < (_totalSupply^2)/(TOTAL_GONS - _totalSupply).\n', '        //\n', '        // In the case of _totalSupply <= MAX_UINT128 (our current supply cap), this\n', '        // deviation is guaranteed to be < 1, so we can omit this step. If the supply cap is\n', '        // ever increased, it must be re-included.\n', '        // _totalSupply = TOTAL_GONS.div(_gonsPerFragment)\n', '\n', '        emit LogRebase(epoch, _totalSupply);\n', '        return _totalSupply;\n', '    }\n', '\n', '    function initialize(address owner_) public initializer {\n', "        require(owner_ != address(0), 'The address can not be a zero-address');\n", '        \n', '        ERC20Detailed.initialize("Oms", "OMS", uint8(DECIMALS));\n', '        Ownable.initialize(owner_);\n', '\n', '        _totalSupply = INITIAL_OMS_SUPPLY;\n', '        _gonBalances[owner_] = TOTAL_GONS;\n', '        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n', '\n', '        emit Transfer(address(0x0), owner_, _totalSupply);\n', '    }\n', '\n', '    /**\n', '        * @return The total number of omss.\n', '        */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '        * @param who The address to query.\n', '        * @return The balance of the specified address.\n', '        */\n', '    function balanceOf(address who) public view returns (uint256) {\n', '        return _gonBalances[who].div(_gonsPerFragment);\n', '    }\n', '\n', '    /**\n', '        * @dev Transfer tokens to a specified address.\n', '        * @param to The address to transfer to.\n', '        * @param value The amount to be transferred.\n', '        * @return True on success, false otherwise.\n', '        */\n', '    function transfer(address to, uint256 value)\n', '        public\n', '        validRecipient(to)\n', '        whenTokenNotPaused\n', '        returns (bool)\n', '    {\n', '        uint256 gonValue = value.mul(_gonsPerFragment);\n', '        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n', '        _gonBalances[to] = _gonBalances[to].add(gonValue);\n', '        emit Transfer(msg.sender, to, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '        * @param owner_ The address which owns the funds.\n', '        * @param spender The address which will spend the funds.\n', '        * @return The number of tokens still available for the spender.\n', '        */\n', '    function allowance(address owner_, address spender)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return _allowedOmss[owner_][spender];\n', '    }\n', '\n', '    /**\n', '        * @dev Transfer tokens from one address to another.\n', '        * @param from The address you want to send tokens from.\n', '        * @param to The address you want to transfer to.\n', '        * @param value The amount of tokens to be transferred.\n', '        */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) public validRecipient(to) whenTokenNotPaused returns (bool) {\n', '        _allowedOmss[from][msg.sender] = _allowedOmss[from][msg\n', '            .sender]\n', '            .sub(value);\n', '\n', '        uint256 gonValue = value.mul(_gonsPerFragment);\n', '        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n', '        _gonBalances[to] = _gonBalances[to].add(gonValue);\n', '        emit Transfer(from, to, value);\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '        * msg.sender. This method is included for ERC20 compatibility.\n', '        * increaseAllowance and decreaseAllowance should be used instead.\n', '        * Changing an allowance with this method brings the risk that someone may transfer both\n', '        * the old and the new allowance - if they are both greater than zero - if a transfer\n', '        * transaction is mined before the later approve() call is mined.\n', '        *\n', '        * @param spender The address which will spend the funds.\n', '        * @param value The amount of tokens to be spent.\n', '        */\n', '    function approve(address spender, uint256 value)\n', '        public\n', '        whenTokenNotPaused\n', '        returns (bool)\n', '    {\n', '        _allowedOmss[msg.sender][spender] = value;\n', '        emit Approval(msg.sender, spender, value);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '        * This method should be used instead of approve() to avoid the double approval vulnerability\n', '        * described above.\n', '        * @param spender The address which will spend the funds.\n', '        * @param addedValue The amount of tokens to increase the allowance by.\n', '        */\n', '    function increaseAllowance(address spender, uint256 addedValue)\n', '        public\n', '        whenTokenNotPaused\n', '        returns (bool)\n', '    {\n', '        _allowedOmss[msg.sender][spender] = _allowedOmss[msg\n', '            .sender][spender]\n', '            .add(addedValue);\n', '        emit Approval(\n', '            msg.sender,\n', '            spender,\n', '            _allowedOmss[msg.sender][spender]\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '        * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '        *\n', '        * @param spender The address which will spend the funds.\n', '        * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '        */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue)\n', '        public\n', '        whenTokenNotPaused\n', '        returns (bool)\n', '    {\n', '        uint256 oldValue = _allowedOmss[msg.sender][spender];\n', '        if (subtractedValue >= oldValue) {\n', '            _allowedOmss[msg.sender][spender] = 0;\n', '        } else {\n', '            _allowedOmss[msg.sender][spender] = oldValue.sub(\n', '                subtractedValue\n', '            );\n', '        }\n', '        emit Approval(\n', '            msg.sender,\n', '            spender,\n', '            _allowedOmss[msg.sender][spender]\n', '        );\n', '        return true;\n', '    }\n', '}\n', '\n', '// File: contracts/v4/OmsPolicy.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract OmsPolicy is Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeMathInt for int256;\n', '    using UInt256Lib for uint256;\n', '\n', '    event LogRebase(\n', '        uint256 indexed epoch,\n', '        uint256 exchangeRate,\n', '        int256 requestedSupplyAdjustment,\n', '        uint256 timestampSec\n', '    );\n', '\n', '    Oms public oms;\n', '\n', '    // Market oracle provides the token/USD exchange rate as an 18 decimal fixed point number.\n', '    // (eg) An oracle value of 1.5e18 it would mean 1 Oms is trading for $1.50.\n', '    IOracle public marketOracle;\n', '\n', '    // If the current exchange rate is within this fractional distance from the target, no supply\n', '    // update is performed. Fixed point number--same format as the rate.\n', '    // (ie) abs(rate - targetRate) / targetRate < deviationThreshold, then no supply change.\n', '    // DECIMALS Fixed point number.\n', '    uint256 public deviationThreshold;\n', '\n', '    // The rebase lag parameter, used to dampen the applied supply adjustment by 1 / rebaseLag\n', '    // Check setRebaseLag comments for more details.\n', '    // Natural number, no decimal places.\n', '    uint256 public rebaseLag;\n', '\n', '    // More than this much time must pass between rebase operations.\n', '    uint256 public minRebaseTimeIntervalSec;\n', '\n', '    // Block timestamp of last rebase operation\n', '    uint256 public lastRebaseTimestampSec;\n', '\n', '    // The rebase window begins this many seconds into the minRebaseTimeInterval period.\n', '    // For example if minRebaseTimeInterval is 24hrs, it represents the time of day in seconds.\n', '    uint256 public rebaseWindowOffsetSec;\n', '\n', '    // The length of the time window where a rebase operation is allowed to execute, in seconds.\n', '    uint256 public rebaseWindowLengthSec;\n', '\n', '    // The number of rebase cycles since inception\n', '    uint256 public epoch;\n', '\n', '    uint256 private constant DECIMALS = 18;\n', '\n', '    // Due to the expression in computeSupplyDelta(), MAX_RATE * MAX_SUPPLY must fit into an int256.\n', '    // Both are 18 decimals fixed point numbers.\n', '    uint256 private constant MAX_RATE = 2 * 10**DECIMALS;\n', '    // MAX_SUPPLY = MAX_INT256 / MAX_RATE\n', '    uint256 private constant MAX_SUPPLY = ~(uint256(1) << 255) / MAX_RATE;\n', '\n', '    // target rate 1\n', '    uint256 private constant TARGET_RATE = 1 * 10**DECIMALS;\n', '\n', '    // This module orchestrates the rebase execution and downstream notification.\n', '    address public orchestrator;\n', '\n', '    modifier onlyOrchestrator() {\n', "        require(msg.sender == orchestrator, 'Only Orchestrator can call this function');\n", '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Initiates a new rebase operation, provided the minimum time period has elapsed.\n', '     *\n', '     * @dev The supply adjustment equals (_totalSupply * DeviationFromTargetRate) / rebaseLag\n', '     *      Where DeviationFromTargetRate is (MarketOracleRate - targetRate) / targetRate\n', '     *      and targetRate is 1\n', '     */\n', '    function rebase() external onlyOrchestrator {\n', "        require(inRebaseWindow(), 'Must be in the rebase window');\n", '\n', '        // This comparison also ensures there is no reentrancy.\n', "        require(lastRebaseTimestampSec.add(minRebaseTimeIntervalSec) < now, 'Not allowed to rebase so soon since the last rebase');\n", '\n', '        // Snap the rebase time to the start of this window.\n', '        lastRebaseTimestampSec = now.sub(\n', '            now.mod(minRebaseTimeIntervalSec)).add(rebaseWindowOffsetSec);\n', '\n', '        epoch = epoch.add(1);\n', '\n', '        uint256 targetRate = TARGET_RATE;\n', '\n', '        uint256 exchangeRate;\n', '        bool rateValid;\n', '        (exchangeRate, rateValid) = marketOracle.getData();\n', "        require(rateValid, 'Rate is not valid');\n", '\n', '        if (exchangeRate > MAX_RATE) {\n', '            exchangeRate = MAX_RATE;\n', '        }\n', '\n', '        int256 supplyDelta = computeSupplyDelta(exchangeRate, targetRate);\n', '\n', '        // Apply the Dampening factor.\n', '        supplyDelta = supplyDelta.div(rebaseLag.toInt256Safe());\n', '\n', '        if (supplyDelta > 0 && oms.totalSupply().add(uint256(supplyDelta)) > MAX_SUPPLY) {\n', '            supplyDelta = (MAX_SUPPLY.sub(oms.totalSupply())).toInt256Safe();\n', '        }\n', '\n', '        uint256 supplyAfterRebase = oms.rebase(epoch, supplyDelta);\n', '\n', '        marketOracle.sync();\n', '\n', '        assert(supplyAfterRebase <= MAX_SUPPLY);\n', '        emit LogRebase(epoch, exchangeRate, supplyDelta, now);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the reference to the market oracle.\n', '     * @param marketOracle_ The address of the market oracle contract.\n', '     */\n', '    function setMarketOracle(IOracle marketOracle_)\n', '        external\n', '        onlyOwner\n', '    {\n', "        require(marketOracle_ != address(0), 'The address can not be a zero-address');\n", '        marketOracle = marketOracle_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the reference to the orchestrator.\n', '     * @param orchestrator_ The address of the orchestrator contract.\n', '     */\n', '    function setOrchestrator(address orchestrator_)\n', '        external\n', '        onlyOwner\n', '    {\n', "        require(orchestrator_ != address(0), 'The address can not be a zero-address');\n", '        orchestrator = orchestrator_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the deviation threshold fraction. If the exchange rate given by the market\n', '     *         oracle is within this fractional distance from the targetRate, then no supply\n', '     *         modifications are made. DECIMALS fixed point number.\n', '     * @param deviationThreshold_ The new exchange rate threshold fraction.\n', '     */\n', '    function setDeviationThreshold(uint256 deviationThreshold_)\n', '        external\n', '        onlyOwner\n', '    {\n', '        deviationThreshold = deviationThreshold_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the rebase lag parameter.\n', '               It is used to dampen the applied supply adjustment by 1 / rebaseLag\n', '               If the rebase lag R, equals 1, the smallest value for R, then the full supply\n', '               correction is applied on each rebase cycle.\n', '               If it is greater than 1, then a correction of 1/R of is applied on each rebase.\n', '     * @param rebaseLag_ The new rebase lag parameter.\n', '     */\n', '    function setRebaseLag(uint256 rebaseLag_)\n', '        external\n', '        onlyOwner\n', '    {\n', "        require(rebaseLag_ > 0, 'Rebase lag must be greater than 0');\n", '        rebaseLag = rebaseLag_;\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the parameters which control the timing and frequency of\n', '     *         rebase operations.\n', '     *         a) the minimum time period that must elapse between rebase cycles.\n', '     *         b) the rebase window offset parameter.\n', '     *         c) the rebase window length parameter.\n', '     * @param minRebaseTimeIntervalSec_ More than this much time must pass between rebase\n', '     *        operations, in seconds.\n', '     * @param rebaseWindowOffsetSec_ The number of seconds from the beginning of\n', '              the rebase interval, where the rebase window begins.\n', '     * @param rebaseWindowLengthSec_ The length of the rebase window in seconds.\n', '     */\n', '    function setRebaseTimingParameters(\n', '        uint256 minRebaseTimeIntervalSec_,\n', '        uint256 rebaseWindowOffsetSec_,\n', '        uint256 rebaseWindowLengthSec_)\n', '        external\n', '        onlyOwner\n', '    {\n', "        require(minRebaseTimeIntervalSec_ > 0, 'Min rebase time interval must be greater than 0');\n", "        require(rebaseWindowOffsetSec_ < minRebaseTimeIntervalSec_, 'Rebase window offset must be less than min rebase time interval');\n", '\n', '        minRebaseTimeIntervalSec = minRebaseTimeIntervalSec_;\n', '        rebaseWindowOffsetSec = rebaseWindowOffsetSec_;\n', '        rebaseWindowLengthSec = rebaseWindowLengthSec_;\n', '    }\n', '\n', '    /**\n', '     * @dev ZOS upgradable contract initialization method.\n', '     *      It is called at the time of contract creation to invoke parent class initializers and\n', "     *      initialize the contract's state variables.\n", '     */\n', '    function initialize(address owner_, Oms oms_)\n', '        public\n', '        initializer\n', '    {\n', "        require(owner_ != address(0), 'The address can not be a zero-address');\n", '        Ownable.initialize(owner_);\n', '\n', '        // deviationThreshold = 0.05e18 = 5e16\n', '        deviationThreshold = 5 * 10 ** (DECIMALS-2);\n', '\n', '        // rebaseLag = 30;\n', '        rebaseLag = 10;\n', '        minRebaseTimeIntervalSec = 1 days;\n', '        rebaseWindowOffsetSec = 39600;  // 11AM UTC\n', '        rebaseWindowLengthSec = 30 minutes;\n', '        \n', '        oms = oms_;\n', '    }\n', '\n', '    /**\n', '     * @return If the latest block timestamp is within the rebase time window it, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function inRebaseWindow() public view returns (bool) {\n', '        return (\n', '            now.mod(minRebaseTimeIntervalSec) >= rebaseWindowOffsetSec &&\n', '            now.mod(minRebaseTimeIntervalSec) < (rebaseWindowOffsetSec.add(rebaseWindowLengthSec))\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @return Computes the total supply adjustment in response to the exchange rate\n', '     *         and the targetRate.\n', '     */\n', '    function computeSupplyDelta(uint256 rate, uint256 targetRate)\n', '        private\n', '        view\n', '        returns (int256)\n', '    {\n', '        if (withinDeviationThreshold(rate, targetRate)) {\n', '            return 0;\n', '        }\n', '\n', '        // supplyDelta = totalSupply * (rate - targetRate) / targetRate\n', '        int256 targetRateSigned = targetRate.toInt256Safe();\n', '        return oms.totalSupply().toInt256Safe()\n', '            .mul(rate.toInt256Safe().sub(targetRateSigned))\n', '            .div(targetRateSigned);\n', '    }\n', '\n', '    /**\n', '     * @param rate The current exchange rate, an 18 decimal fixed point number.\n', '     * @param targetRate The target exchange rate, an 18 decimal fixed point number.\n', '     * @return If the rate is within the deviation threshold from the target rate, returns true.\n', '     *         Otherwise, returns false.\n', '     */\n', '    function withinDeviationThreshold(uint256 rate, uint256 targetRate)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        uint256 absoluteDeviationThreshold = targetRate.mul(deviationThreshold)\n', '            .div(10 ** DECIMALS);\n', '\n', '        return (rate >= targetRate && rate.sub(targetRate) < absoluteDeviationThreshold)\n', '            || (rate < targetRate && targetRate.sub(rate) < absoluteDeviationThreshold);\n', '    }\n', '}\n', '\n', '// File: contracts/v4/Orchestrator.sol\n', '\n', 'pragma solidity 0.4.24;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Orchestrator is Ownable {\n', '\n', '    struct Transaction {\n', '        bool enabled;\n', '        address destination;\n', '        bytes data;\n', '    }\n', '\n', '    event TransactionFailed(address indexed destination, uint index, bytes data);\n', '\n', '    // Stable ordering is not guaranteed.\n', '    Transaction[] public transactions;\n', '\n', '    OmsPolicy public policy;\n', '\n', '    /**\n', '     * @param policy_ Address of the Oms policy.\n', '     */\n', '    constructor(address policy_) public {\n', "        require(policy_ != address(0), 'The address can not be a zero-address');\n", '        Ownable.initialize(msg.sender);\n', '        policy = OmsPolicy(policy_);\n', '    }\n', '\n', '    /**\n', '     * @notice Main entry point to initiate a rebase operation.\n', '     *         The Orchestrator calls rebase on the policy and notifies downstream applications.\n', '     *         Contracts are guarded from calling, to avoid flash loan attacks on liquidity\n', '     *         providers.\n', '     *         If a transaction in the transaction list reverts, it is swallowed and the remaining\n', '     *         transactions are executed.\n', '     */\n', '    function rebase()\n', '        external\n', '\t\tonlyOwner\n', '    {\n', "        require(msg.sender == tx.origin, 'The transaction owner must also be the msg sender');  // solhint-disable-line avoid-tx-origin\n", '\n', '        policy.rebase();\n', '\n', '        for (uint i = 0; i < transactions.length; i++) {\n', '            Transaction storage t = transactions[i];\n', '            if (t.enabled) {\n', '                bool result =\n', '                    externalCall(t.destination, t.data);\n', '                if (!result) {\n', '                    emit TransactionFailed(t.destination, i, t.data);\n', '                    revert("Transaction Failed");\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Adds a transaction that gets called for a downstream receiver of rebases\n', '     * @param destination Address of contract destination\n', '     * @param data Transaction data payload\n', '     */\n', '    function addTransaction(address destination, bytes data)\n', '        external\n', '        onlyOwner\n', '    {\n', '        transactions.push(Transaction({\n', '            enabled: true,\n', '            destination: destination,\n', '            data: data\n', '        }));\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction to remove.\n', '     *              Transaction ordering may have changed since adding.\n', '     */\n', '    function removeTransaction(uint index)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(index < transactions.length, "index out of bounds");\n', '\n', '        if (index < transactions.length - 1) {\n', '            transactions[index] = transactions[transactions.length - 1];\n', '        }\n', '\n', '        transactions.length--;\n', '    }\n', '\n', '    /**\n', '     * @param index Index of transaction. Transaction ordering may have changed since adding.\n', '     * @param enabled True for enabled, false for disabled.\n', '     */\n', '    function setTransactionEnabled(uint index, bool enabled)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(index < transactions.length, "index must be in range of stored tx list");\n', '        transactions[index].enabled = enabled;\n', '    }\n', '\n', '    /**\n', '     * @return Number of transactions, both enabled and disabled, in transactions list.\n', '     */\n', '    function transactionsSize()\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return transactions.length;\n', '    }\n', '\n', '    /**\n', '     * @dev wrapper to call the encoded transactions on downstream consumers.\n', '     * @param destination Address of destination contract.\n', '     * @param data The encoded data payload.\n', '     * @return True on success\n', '     */\n', '    function externalCall(address destination, bytes data)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        bool result;\n', '        assembly {  // solhint-disable-line no-inline-assembly\n', '            // "Allocate" memory for output\n', '            // (0x40 is where "free memory" pointer is stored by convention)\n', '            let outputAddress := mload(0x40)\n', '\n', '            // First 32 bytes are the padded length of data, so exclude that\n', '            let dataAddress := add(data, 32)\n', '\n', '            result := call(\n', '                gas,\n', '                destination,\n', '                0, // transfer value in wei\n', '                dataAddress,\n', '                mload(data),  // Size of the input, in bytes. Stored in position 0 of the array.\n', '                outputAddress,\n', '                0  // Output is ignored, therefore the output size is zero\n', '            )\n', '        }\n', '        return result;\n', '    }\n', '}']