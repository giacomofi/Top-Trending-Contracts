['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: contracts/StorageSlot.sol\n', '\n', '\n', '/**\n', ' * @dev Copied from https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.1.0/contracts/utils/StorageSlot.sol\n', ' */\n', '\n', 'pragma solidity 0.8.4;\n', '\n', '\n', 'library StorageSlot {\n', '    struct AddressSlot {\n', '        address value;\n', '    }\n', '\n', '    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n', '        assembly {\n', '            r.slot := slot\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/Claimer.sol\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', '\n', 'contract Claimer {\n', '    /**\n', '    * @dev Emitted when ETH has claimed.\n', '    */\n', '    event Claimed(address recipient, uint256 amount);\n', '\n', '\n', '    /**\n', '    * @dev Emitted when ERC20 has claimed.\n', '    */\n', '    event ClaimedERC20(address recipient, address token, uint256 amount);\n', '\n', '\n', '    /**\n', '     * @dev Storage slot with the admin of the contract.\n', '     *\n', '     * Equals `bytes32(uint256(keccak256("eip1967.proxy.admin")) - 1)`.\n', '     */\n', '    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n', '\n', '\n', '    /**\n', '     * @dev Transfer all contract ETH to recipient. Only owner can use it\n', '     *\n', '     * Emits an {Claimed} event.\n', '     *\n', '     * @param recipient Account for transfer ETH\n', '     */\n', '    function claim(address payable recipient)  public onlyOwner {\n', '        uint256 amount = address(this).balance;\n', '        (bool sent, ) = recipient.call{value: amount}("");\n', '        require(sent, "Failed to send Ether");\n', '        emit Claimed(recipient, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Transfer all contract amount of specified tokent to recipient. Only owner can use it\n', '     *\n', '     * Emits an {ClaimedERC20} event.\n', '     *\n', '     * @param recipient Account for transfer ERC20 token\n', '     * @param token Address of ERC20 token\n', '     */\n', '    function claimERC20(address payable recipient, address token) public onlyOwner {\n', '        uint256 amount = IERC20(token).balanceOf(address(this));\n', '        IERC20(token).transfer(recipient, amount);\n', '        emit ClaimedERC20(recipient, token, amount);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the current admin.\n', '     */\n', '    function _getAdmin() internal view returns (address) {\n', '        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n', '    }\n', '\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == _getAdmin(), "Only the contract owner may perform this action");\n', '        _;\n', '    }\n', '\n', '}']