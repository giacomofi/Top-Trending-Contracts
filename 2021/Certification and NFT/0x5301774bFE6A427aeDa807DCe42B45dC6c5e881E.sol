['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-07\n', '*/\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'contract EternalStorage {\n', '\n', '    mapping(bytes32 => uint256) internal uintStorage;\n', '    mapping(bytes32 => string) internal stringStorage;\n', '    mapping(bytes32 => address) internal addressStorage;\n', '    mapping(bytes32 => bytes) internal bytesStorage;\n', '    mapping(bytes32 => bool) internal boolStorage;\n', '    mapping(bytes32 => int256) internal intStorage;\n', '\n', '}\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '\n', '// File: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @uniswap/lib/contracts/libraries/TransferHelper.sol\n', '\n', '\n', '// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\n', 'library TransferHelper {\n', '    function safeApprove(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('approve(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::safeApprove: approve failed'\n", '        );\n', '    }\n', '\n', '    function safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::safeTransfer: transfer failed'\n", '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        address token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', "        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n", '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', "            'TransferHelper::transferFrom: transferFrom failed'\n", '        );\n', '    }\n', '\n', '    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\n', '        if (!isERC20) {\n', '            to.transfer(value);\n', '        } else {\n', '            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '        }\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface IERCBurn {\n', '    function burn(uint256 _amount) external;\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', 'interface IUniFactory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address);\n', '}\n', '\n', 'interface IMigrator {\n', '    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\n', '}\n', '\n', 'contract TokenLocker is Ownable, ReentrancyGuard,EternalStorage {\n', '  using SafeMath for uint256;\n', '\n', '  \n', '\n', '  struct TokenLock {\n', '    uint256 lockDate; // the date the token was locked\n', '    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\n', '    uint256 initialAmount; // the initial lock amount\n', '    uint256 unlockDate; // the date the token can be withdrawn\n', '    address owner;\n', '  }\n', '\n', '  mapping(address => address[]) public lockedTokens;\n', '  mapping(address => address[]) public lockedUser;\n', '  mapping(address =>  mapping (address => TokenLock)) public tokenLocks; //map univ2 pair to all its locks\n', '  \n', '  struct FeeStruct {\n', '    uint256 ethFee; // Small eth fee to prevent spam on the platform\n', '    uint256 liquidityFee; // fee on univ2 liquidity tokens\n', '  }\n', '    \n', '  FeeStruct public gFees;\n', '  \n', '  address payable devaddr;\n', '  address payable lpaddr;\n', '\n', '  \n', '  IMigrator migrator;\n', '\n', '  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\n', '  event onWithdraw(address lpToken, uint256 amount);\n', '\n', '  constructor(address payable _lpaddr) public {\n', '    devaddr = msg.sender;\n', '    lpaddr = _lpaddr;\n', '    gFees.ethFee = 0.1 ether;\n', '    gFees.liquidityFee = 10; // 1%\n', '  }\n', '  \n', '  function setDev(address payable _devaddr) public onlyOwner {\n', '    devaddr = _devaddr;\n', '  }\n', '  \n', '  /**\n', '   * @notice set the migrator contract which allows locked lp tokens to be migrated to uniswap v3\n', '   */\n', '  function setMigrator(IMigrator _migrator) public onlyOwner {\n', '    migrator = _migrator;\n', '  }\n', '  \n', '\n', '\n', '  \n', '  function setFees(uint256 _ethFee, uint256 _liquidityFee) public onlyOwner {\n', '    gFees.ethFee = _ethFee;\n', '    gFees.liquidityFee = _liquidityFee;\n', '  }\n', '  \n', '\n', '\n', '  /**\n', '   * @notice Creates a new lock\n', '   * @param _lpToken the univ2 token address\n', '   * @param _amount amount of LP tokens to lock\n', '   * @param _unlock_date the unix timestamp (in seconds) until unlock\n', '   * @param _withdrawer the user who can withdraw liquidity once the lock expires.\n', '   */\n', '  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _withdrawer) external payable nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", "    require(_amount > 0, 'INSUFFICIENT');\n", '\n', '\n', '    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n', '    \n', '    \n', '    uint256 ethFee = gFees.ethFee;\n', "    require(msg.value == ethFee, 'FEE NOT MET');\n", '    uint256 devFee = ethFee;\n', '    devaddr.transfer(devFee);\n', '    \n', '    // percent fee\n', '    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n', '    TransferHelper.safeTransfer(_lpToken, lpaddr, liquidityFee);\n', '    uint256 amountLocked = _amount.sub(liquidityFee);\n', '    \n', '\tif(!boolStorage[keccak256(abi.encodePacked(_lpToken,_withdrawer))]){\n', '        TokenLock memory token_lock;\n', '        token_lock.lockDate = block.timestamp;\n', '        token_lock.amount = amountLocked;\n', '        token_lock.initialAmount = amountLocked;\n', '        token_lock.unlockDate = _unlock_date;\n', '        token_lock.owner = _withdrawer;\n', '        // record the lock for the univ2pair\n', '        tokenLocks[_lpToken][_withdrawer] = token_lock;\n', '        boolStorage[keccak256(abi.encodePacked(_lpToken,_withdrawer))] = true;\n', '        \n', '        if(!boolStorage[keccak256(abi.encodePacked(_withdrawer,_lpToken))]){\n', '          lockedTokens[_lpToken].push(_withdrawer);\n', '          lockedUser[_withdrawer].push(_lpToken);\n', '          boolStorage[keccak256(abi.encodePacked(_withdrawer,_lpToken))] = true;\n', '        }\n', '        emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\n', '\t}else{\n', "\t    require(msg.sender == _withdrawer, '_withdrawer no sender');\n", '\t    TokenLock storage tokenLock = tokenLocks[_lpToken][_withdrawer];\n', '\t\ttokenLock.amount= tokenLock.amount.add(amountLocked);\n', '\t\ttokenLock.initialAmount= tokenLock.initialAmount.add(amountLocked);\n', '\t\ttokenLock.lockDate = block.timestamp;\n', '\t\tif(_unlock_date > tokenLock.unlockDate){\n', '\t\t    tokenLock.unlockDate = _unlock_date;\n', '\t\t}\n', '\t\temit onDeposit(_lpToken, msg.sender, tokenLock.amount, tokenLock.lockDate, tokenLock.unlockDate);\n', '\t}\n', '\n', '    \n', '  }\n', '  \n', '\n', '  function relock (address _lpToken,  uint256 _unlock_date) external nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", '    TokenLock storage userLock = tokenLocks[_lpToken][msg.sender];\n', "    require(userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\n", '\n', '    userLock.unlockDate = _unlock_date;\n', '\n', '  }\n', '\n', '\n', '  /**\n', '   * @notice withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\n', '   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n', '   */\n', '  function withdraw (address _lpToken, uint256 _amount) external nonReentrant {\n', "    require(_amount > 0, 'ZERO WITHDRAWL');\n", '    TokenLock storage userLock = tokenLocks[_lpToken][msg.sender];\n', "    require(userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < block.timestamp, 'NOT YET');\n", '    userLock.amount = userLock.amount.sub(_amount);\n', '\n', '    // clean user storage\n', '    if (userLock.amount == 0) {\n', '\t\tboolStorage[keccak256(abi.encodePacked(_lpToken,msg.sender))] = false;\n', '    }\n', '    \n', '    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\n', '    emit onWithdraw(_lpToken, _amount);\n', '  }\n', '  \n', '\n', '\n', '  function getLockForToken (address _lpToken) external view \n', '  returns (address[] memory) {\n', '    address[] memory addr_list = lockedTokens[_lpToken];\n', '    return addr_list;\n', '  }\n', '  \n', '  function getLockForUser (address _user) external view \n', '  returns (address[] memory) {\n', '    address[] memory addr_list = lockedUser[_user];\n', '    return addr_list;\n', '  }\n', '  \n', '  function getUserLockForToken (address _user, address _lpToken) external view \n', '  returns (uint256, uint256, uint256, uint256, address) {\n', '    TokenLock storage tokenLock = tokenLocks[_lpToken][_user];\n', '    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.owner);\n', '  }\n', '  \n', '\n', '}']