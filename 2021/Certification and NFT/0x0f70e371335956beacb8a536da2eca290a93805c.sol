['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-17\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT \n', '\n', '\n', 'pragma solidity 0.8.4;\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract FolkitoTimelock {\n', '    using SafeMath for uint256;\n', '    \n', '    \n', '    uint256 tokenBalance;\n', '    IERC20 public _tokenInstance;\n', '\n', '\n', '    address public owner;\n', '\n', '\n', '\n', '    address public teamAndAdvisorWallet;\n', '    address public marketingWallet;\n', '    address public privateSaleWallet;\n', '    address public whitelistingWallet;\n', '    address public airdropWallet;\n', '    address public publicWallet;\n', '\n', '    \n', '    \n', '    uint256 public constant TEAM_AND_ADVISOR_SHARE = 20000000 *10**18;\n', '    uint256 public constant AIRDROP_SHARE = 1600000 *10**18;\n', '    uint256 public constant PRIVATE_SALE_SHARE = 5000000*10**18;\n', '\n', '\n', '\n', '    uint256 public constant MARKETING_SHARE =2500000*10**18;\n', '    uint256 public constant WHITELISTING_SHARE =6000000*10**18;\n', '    uint256 public constant PUBLIC_SHARE =4000000*10**18;\n', '\n', '    uint256 public TOTAL_DISTRIBUTION =TEAM_AND_ADVISOR_SHARE.add(AIRDROP_SHARE)\n', '                                        .add(PRIVATE_SALE_SHARE).add(MARKETING_SHARE).add(WHITELISTING_SHARE)\n', '                                        .add(PUBLIC_SHARE);\n', '\n', '    uint256 public  teamWalletClaimed;\n', '    uint256 public  airdropWalletClaimed;\n', '    uint256 public  privateSaleWalletClaimed;\n', '    uint256 public  whitelistingWalletClaimed;\n', '    uint256 public  marketingWalletClaimed;\n', '\n', '    uint256 public  publicWalletClaimed;\n', '\n', '    \n', '    uint256 public teamReserveReleaseTime;\n', '    uint256 public airdropReserveReleaseTime;\n', '    uint256 public privateSaleReserveReleaseTime;\n', '    uint256 public whitelistingReleaseTime;\n', '    uint256 public marketingReserveReleaseTime;\n', '    uint256 public publicReserveReleaseTime;\n', '\n', '    uint256 public ONE_DAY = 1 days;\n', '    \n', '    \n', '\n', '      modifier onlyOwner {\n', '        require(msg.sender == owner,"You are not authorized");\n', '        _;\n', '    }\n', '\n', '  \n', '    constructor(address tokenInstance,\n', '    \n', '        address _teamAndAdvisorWallet,\n', '        address _airdropWallet,\n', '        address _marketingWallet,\n', '        address _privateSaleWallet,\n', '        address _whitelistingWallet,\n', '        address _publicWallet\n', '    \n', '    \n', '    \n', '        ) {\n', '        teamAndAdvisorWallet = _teamAndAdvisorWallet;\n', '        privateSaleWallet = _privateSaleWallet;\n', '        whitelistingWallet = _whitelistingWallet;\n', '        airdropWallet = _airdropWallet;\n', '        marketingWallet = _marketingWallet;\n', '        publicWallet = _publicWallet;\n', '\n', '        owner = msg.sender;\n', '        teamReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(180));\n', '\n', '        marketingReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(30));\n', '\n', '        airdropReserveReleaseTime = block.timestamp.add(ONE_DAY.mul(180));\n', '        privateSaleReserveReleaseTime= block.timestamp;\n', '        whitelistingReleaseTime = block.timestamp;\n', '        publicReserveReleaseTime = block.timestamp;\n', '\n', '        _tokenInstance = IERC20(address(tokenInstance));\n', '        \n', '    \n', '\n', '\n', '        \n', '    }\n', '    \n', '    \n', '    \n', '    function getContractBalance() public view returns (uint256){\n', '        return _tokenInstance.balanceOf(address(this));\n', '    }\n', '    \n', '    \n', '    \n', '    function claimAirdropShare() public onlyOwner{\n', '        require(block.timestamp>airdropReserveReleaseTime,"Lock Period has not passed");\n', '        \n', '        uint256 amount  = AIRDROP_SHARE;\n', '        require(airdropWalletClaimed.add(amount)<=AIRDROP_SHARE,"Amount Exceeds");\n', '        airdropWalletClaimed = airdropWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(airdropWallet,amount);\n', '\n', '    }\n', '\n', '\n', '\n', '\n', '      function claimPublicShare() public onlyOwner{\n', '        require(block.timestamp>publicReserveReleaseTime,"Lock Period has not passed");\n', '        \n', '        uint256 amount  = PUBLIC_SHARE;\n', '        require(publicWalletClaimed.add(amount)<=PUBLIC_SHARE,"Amount Exceeds");\n', '        publicWalletClaimed = publicWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(publicWallet,amount);\n', '\n', '    }\n', '    \n', '\n', '    \n', '    \n', '    \n', '    function claimMarketingShare() public onlyOwner{\n', '        require(block.timestamp>marketingReserveReleaseTime,"Lock Period has not passed");\n', '        uint256 amount  =MARKETING_SHARE.mul(10).div(100);\n', '\n', '        require(marketingWalletClaimed.add(amount)<=MARKETING_SHARE,"Amount Exceeds");\n', '\n', '        marketingWalletClaimed = marketingWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(marketingWallet,amount);\n', '        marketingReserveReleaseTime = marketingReserveReleaseTime.add(ONE_DAY.mul(30));\n', '        \n', '    }\n', '    \n', '    \n', '    function claimPrivateSaleShare() public onlyOwner{\n', '        require(block.timestamp>privateSaleReserveReleaseTime,"Lock Period has not passed");\n', '\n', '        uint256 amount  = PRIVATE_SALE_SHARE.mul(20).div(100);\n', '\n', '        require(privateSaleWalletClaimed.add(amount)<=PRIVATE_SALE_SHARE,"Amount Exceeds");\n', '\n', '        privateSaleWalletClaimed = privateSaleWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(privateSaleWallet,amount);\n', '        privateSaleReserveReleaseTime = privateSaleReserveReleaseTime.add(ONE_DAY.mul(30));\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    function claimWhitelistingShare() public onlyOwner{\n', '        require(block.timestamp>whitelistingReleaseTime,"Lock Period has not passed");\n', '\n', '        uint256 amount  = WHITELISTING_SHARE.mul(20).div(100);\n', '\n', '        require(whitelistingWalletClaimed.add(amount)<=WHITELISTING_SHARE,"Amount Exceeds");\n', '\n', '        whitelistingWalletClaimed = whitelistingWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(whitelistingWallet,amount);\n', '        whitelistingReleaseTime = whitelistingReleaseTime.add(ONE_DAY.mul(30));\n', '\n', '    }\n', '    \n', '    \n', '    function claimTeamAndAdvisorShare() public onlyOwner{\n', '        require(block.timestamp>teamReserveReleaseTime,"Lock Period has not passed");\n', '        uint256 amount  = TEAM_AND_ADVISOR_SHARE.div(24);\n', '\n', '        require(teamWalletClaimed.add(amount)<=TEAM_AND_ADVISOR_SHARE,"Amount Exceeds");\n', '\n', '        teamWalletClaimed = teamWalletClaimed.add(amount);\n', '        _tokenInstance.transfer(teamAndAdvisorWallet,amount);\n', '        teamReserveReleaseTime = teamReserveReleaseTime.add(ONE_DAY.mul(30));\n', '\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '    \n', '}']