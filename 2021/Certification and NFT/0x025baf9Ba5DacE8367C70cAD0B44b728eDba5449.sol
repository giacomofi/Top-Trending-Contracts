['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', 'import "../Dependencies/SafeMath.sol";\n', 'import "../Interfaces/ILQTYToken.sol";\n', '\n', '/*\n', '* The lockup contract architecture utilizes a single LockupContract, with an unlockTime. The unlockTime is passed as an argument \n', "* to the LockupContract's constructor. The contract's balance can be withdrawn by the beneficiary when block.timestamp > unlockTime. \n", "* At construction, the contract checks that unlockTime is at least one year later than the Liquity system's deployment time. \n", '\n', "* Within the first year from deployment, the deployer of the LQTYToken (Liquity AG's address) may transfer LQTY only to valid \n", "* LockupContracts, and no other addresses (this is enforced in LQTYToken.sol's transfer() function).\n", '* \n', '* The above two restrictions ensure that until one year after system deployment, LQTY tokens originating from Liquity AG cannot \n', '* enter circulating supply and cannot be staked to earn system revenue.\n', '*/\n', 'contract LockupContract {\n', '    using SafeMath for uint;\n', '\n', '    // --- Data ---\n', '    string constant public NAME = "LockupContract";\n', '\n', '    uint constant public SECONDS_IN_ONE_YEAR = 31536000; \n', '\n', '    address public immutable beneficiary;\n', '\n', '    ILQTYToken public lqtyToken;\n', '\n', '    // Unlock time is the Unix point in time at which the beneficiary can withdraw.\n', '    uint public unlockTime;\n', '\n', '    // --- Events ---\n', '\n', '    event LockupContractCreated(address _beneficiary, uint _unlockTime);\n', '    event LockupContractEmptied(uint _LQTYwithdrawal);\n', '\n', '    // --- Functions ---\n', '\n', '    constructor \n', '    (\n', '        address _lqtyTokenAddress, \n', '        address _beneficiary, \n', '        uint _unlockTime\n', '    )\n', '        public \n', '    {\n', '        lqtyToken = ILQTYToken(_lqtyTokenAddress);\n', '\n', '        /*\n', '        * Set the unlock time to a chosen instant in the future, as long as it is at least 1 year after\n', '        * the system was deployed \n', '        */\n', '        _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(_unlockTime);\n', '        unlockTime = _unlockTime;\n', '        \n', '        beneficiary =  _beneficiary;\n', '        emit LockupContractCreated(_beneficiary, _unlockTime);\n', '    }\n', '\n', '    function withdrawLQTY() external {\n', '        _requireCallerIsBeneficiary();\n', '        _requireLockupDurationHasPassed();\n', '\n', '        ILQTYToken lqtyTokenCached = lqtyToken;\n', '        uint LQTYBalance = lqtyTokenCached.balanceOf(address(this));\n', '        lqtyTokenCached.transfer(beneficiary, LQTYBalance);\n', '        emit LockupContractEmptied(LQTYBalance);\n', '    }\n', '\n', "    // --- 'require' functions ---\n", '\n', '    function _requireCallerIsBeneficiary() internal view {\n', '        require(msg.sender == beneficiary, "LockupContract: caller is not the beneficiary");\n', '    }\n', '\n', '    function _requireLockupDurationHasPassed() internal view {\n', '        require(block.timestamp >= unlockTime, "LockupContract: The lockup duration must have passed");\n', '    }\n', '\n', '    function _requireUnlockTimeIsAtLeastOneYearAfterSystemDeployment(uint _unlockTime) internal view {\n', '        uint systemDeploymentTime = lqtyToken.getDeploymentStartTime();\n', '        require(_unlockTime >= systemDeploymentTime.add(SECONDS_IN_ONE_YEAR), "LockupContract: unlock time must be at least one year after system deployment");\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', " * Based on OpenZeppelin's SafeMath:\n", ' * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', ' *\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', 'import "../Dependencies/IERC20.sol";\n', 'import "../Dependencies/IERC2612.sol";\n', '\n', 'interface ILQTYToken is IERC20, IERC2612 { \n', '   \n', '    // --- Events ---\n', '    \n', '    event CommunityIssuanceAddressSet(address _communityIssuanceAddress);\n', '    event LQTYStakingAddressSet(address _lqtyStakingAddress);\n', '    event LockupContractFactoryAddressSet(address _lockupContractFactoryAddress);\n', '\n', '    // --- Functions ---\n', '    \n', '    function sendToLQTYStaking(address _sender, uint256 _amount) external;\n', '\n', '    function getDeploymentStartTime() external view returns (uint256);\n', '\n', '    function getLpRewardsEntitlement() external view returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', ' * Based on the OpenZeppelin IER20 interface:\n', ' * https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/IERC20.sol\n', ' *\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    \n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', ' * @dev Interface of the ERC2612 standard as defined in the EIP.\n', ' *\n', " * Adds the {permit} method, which can be used to change one's\n", ' * {IERC20-allowance} without having to send a transaction, by signing a\n', ' * message. This allows users to spend tokens without having to hold Ether.\n', ' *\n', ' * See https://eips.ethereum.org/EIPS/eip-2612.\n', ' * \n', ' * Code adapted from https://github.com/OpenZeppelin/openzeppelin-contracts/pull/2237/\n', ' */\n', 'interface IERC2612 {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, \n', '                    uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '    \n', '    /**\n', '     * @dev Returns the current ERC2612 nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases `owner`'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     *\n', '     * `owner` can limit the time a Permit is valid for by setting `deadline` to \n', '     * a value in the near future. The deadline argument can be set to uint(-1) to \n', '     * create Permits that effectively never expire.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '    \n', '    function version() external view returns (string memory);\n', '    function permitTypeHash() external view returns (bytes32);\n', '    function domainSeparator() external view returns (bytes32);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 100\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']