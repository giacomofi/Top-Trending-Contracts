['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-09\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.11 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n", ' * checks.\n', ' *\n', ' * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n', ' * easily result in undesired exploitation or bugs, since developers usually\n', ' * assume that overflows raise errors. `SafeCast` restores this intuition by\n', ' * reverting the transaction when such an operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' *\n', ' * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n', ' * all math on `uint256` and `int256` and then downcasting.\n', ' */\n', 'library SafeCast {\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint128 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint128).\n', '     *\n', "     * Counterpart to Solidity's `uint128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     */\n', '    function toUint128(uint256 value) internal pure returns (uint128) {\n', '        require(value < 2**128, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return uint128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint64 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint64).\n', '     *\n', "     * Counterpart to Solidity's `uint64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     */\n', '    function toUint64(uint256 value) internal pure returns (uint64) {\n', '        require(value < 2**64, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return uint64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint32 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint32).\n', '     *\n', "     * Counterpart to Solidity's `uint32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     */\n', '    function toUint32(uint256 value) internal pure returns (uint32) {\n', '        require(value < 2**32, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return uint32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint16 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint16).\n', '     *\n', "     * Counterpart to Solidity's `uint16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     */\n', '    function toUint16(uint256 value) internal pure returns (uint16) {\n', '        require(value < 2**16, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return uint16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted uint8 from uint256, reverting on\n', '     * overflow (when the input is greater than largest uint8).\n', '     *\n', "     * Counterpart to Solidity's `uint8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     */\n', '    function toUint8(uint256 value) internal pure returns (uint8) {\n', '        require(value < 2**8, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return uint8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a signed int256 into an unsigned uint256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be greater than or equal to 0.\n', '     */\n', '    function toUint256(int256 value) internal pure returns (uint256) {\n', '        require(value >= 0, "SafeCast: value must be positive");\n', '        return uint256(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int128 from int256, reverting on\n', '     * overflow (when the input is less than smallest int128 or\n', '     * greater than largest int128).\n', '     *\n', "     * Counterpart to Solidity's `int128` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 128 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt128(int256 value) internal pure returns (int128) {\n', '        require(value >= -2**127 && value < 2**127, "SafeCast: value doesn\\\'t fit in 128 bits");\n', '        return int128(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int64 from int256, reverting on\n', '     * overflow (when the input is less than smallest int64 or\n', '     * greater than largest int64).\n', '     *\n', "     * Counterpart to Solidity's `int64` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 64 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt64(int256 value) internal pure returns (int64) {\n', '        require(value >= -2**63 && value < 2**63, "SafeCast: value doesn\\\'t fit in 64 bits");\n', '        return int64(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int32 from int256, reverting on\n', '     * overflow (when the input is less than smallest int32 or\n', '     * greater than largest int32).\n', '     *\n', "     * Counterpart to Solidity's `int32` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 32 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt32(int256 value) internal pure returns (int32) {\n', '        require(value >= -2**31 && value < 2**31, "SafeCast: value doesn\\\'t fit in 32 bits");\n', '        return int32(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int16 from int256, reverting on\n', '     * overflow (when the input is less than smallest int16 or\n', '     * greater than largest int16).\n', '     *\n', "     * Counterpart to Solidity's `int16` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 16 bits\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt16(int256 value) internal pure returns (int16) {\n', '        require(value >= -2**15 && value < 2**15, "SafeCast: value doesn\\\'t fit in 16 bits");\n', '        return int16(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the downcasted int8 from int256, reverting on\n', '     * overflow (when the input is less than smallest int8 or\n', '     * greater than largest int8).\n', '     *\n', "     * Counterpart to Solidity's `int8` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - input must fit into 8 bits.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function toInt8(int256 value) internal pure returns (int8) {\n', '        require(value >= -2**7 && value < 2**7, "SafeCast: value doesn\\\'t fit in 8 bits");\n', '        return int8(value);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an unsigned uint256 into a signed int256.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - input must be less than or equal to maxInt256.\n', '     */\n', '    function toInt256(uint256 value) internal pure returns (int256) {\n', '        require(value < 2**255, "SafeCast: value doesn\'t fit in an int256");\n', '        return int256(value);\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IController.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IController {\n', '    function addCK(address _ckToken) external;\n', '    function feeRecipient() external view returns(address);\n', '    function getModuleFee(address _module, uint256 _feeType) external view returns(uint256);\n', '    function isModule(address _module) external view returns(bool);\n', '    function isCK(address _ckToken) external view returns(bool);\n', '    function isSystemContract(address _contractAddress) external view returns (bool);\n', '    function resourceId(uint256 _id) external view returns(address);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ICKToken.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '/**\n', ' * @title ICKToken\n', ' * @author Cook Finance\n', ' *\n', ' * Interface for operating with CKTokens.\n', ' */\n', 'interface ICKToken is IERC20 {\n', '\n', '    /* ============ Enums ============ */\n', '\n', '    enum ModuleState {\n', '        NONE,\n', '        PENDING,\n', '        INITIALIZED\n', '    }\n', '\n', '    /* ============ Structs ============ */\n', '    /**\n', '     * The base definition of a CKToken Position\n', '     *\n', '     * @param component           Address of token in the Position\n', '     * @param module              If not in default state, the address of associated module\n', '     * @param unit                Each unit is the # of components per 10^18 of a CKToken\n', '     * @param positionState       Position ENUM. Default is 0; External is 1\n', '     * @param data                Arbitrary data\n', '     */\n', '    struct Position {\n', '        address component;\n', '        address module;\n', '        int256 unit;\n', '        uint8 positionState;\n', '        bytes data;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's cash position details and external positions\n", "     * This data structure allows O(1) access to a component's cash position units and \n", '     * virtual units.\n', '     *\n', "     * @param virtualUnit               Virtual value of a component's DEFAULT position. Stored as virtual for efficiency\n", '     *                                  updating all units at once via the position multiplier. Virtual units are achieved\n', '     *                                  by dividing a "real" value by the "positionMultiplier"\n', '     * @param componentIndex            \n', '     * @param externalPositionModules   List of external modules attached to each external position. Each module\n', '     *                                  maps to an external position\n', '     * @param externalPositions         Mapping of module => ExternalPosition struct for a given component\n', '     */\n', '    struct ComponentPosition {\n', '      int256 virtualUnit;\n', '      address[] externalPositionModules;\n', '      mapping(address => ExternalPosition) externalPositions;\n', '    }\n', '\n', '    /**\n', "     * A struct that stores a component's external position details including virtual unit and any\n", '     * auxiliary data.\n', '     *\n', "     * @param virtualUnit       Virtual value of a component's EXTERNAL position.\n", '     * @param data              Arbitrary data\n', '     */\n', '    struct ExternalPosition {\n', '      int256 virtualUnit;\n', '      bytes data;\n', '    }\n', '\n', '\n', '    /* ============ Functions ============ */\n', '    \n', '    function addComponent(address _component) external;\n', '    function removeComponent(address _component) external;\n', '    function editDefaultPositionUnit(address _component, int256 _realUnit) external;\n', '    function addExternalPositionModule(address _component, address _positionModule) external;\n', '    function removeExternalPositionModule(address _component, address _positionModule) external;\n', '    function editExternalPositionUnit(address _component, address _positionModule, int256 _realUnit) external;\n', '    function editExternalPositionData(address _component, address _positionModule, bytes calldata _data) external;\n', '\n', '    function invoke(address _target, uint256 _value, bytes calldata _data) external returns(bytes memory);\n', '\n', '    function editPositionMultiplier(int256 _newMultiplier) external;\n', '\n', '    function mint(address _account, uint256 _quantity) external;\n', '    function burn(address _account, uint256 _quantity) external;\n', '\n', '    function lock() external;\n', '    function unlock() external;\n', '\n', '    function addModule(address _module) external;\n', '    function removeModule(address _module) external;\n', '    function initializeModule() external;\n', '\n', '    function setManager(address _manager) external;\n', '\n', '    function manager() external view returns (address);\n', '    function moduleStates(address _module) external view returns (ModuleState);\n', '    function getModules() external view returns (address[] memory);\n', '    \n', '    function getDefaultPositionRealUnit(address _component) external view returns(int256);\n', '    function getExternalPositionRealUnit(address _component, address _positionModule) external view returns(int256);\n', '    function getComponents() external view returns(address[] memory);\n', '    function getExternalPositionModules(address _component) external view returns(address[] memory);\n', '    function getExternalPositionData(address _component, address _positionModule) external view returns(bytes memory);\n', '    function isExternalPositionModule(address _component, address _module) external view returns(bool);\n', '    function isComponent(address _component) external view returns(bool);\n', '    \n', '    function positionMultiplier() external view returns (int256);\n', '    function getPositions() external view returns (Position[] memory);\n', '    function getTotalComponentRealUnits(address _component) external view returns(int256);\n', '\n', '    function isInitializedModule(address _module) external view returns(bool);\n', '    function isPendingModule(address _module) external view returns(bool);\n', '    function isLocked() external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IManagerIssuanceHook.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IManagerIssuanceHook {\n', '    function invokePreIssueHook(ICKToken _ckToken, uint256 _issueQuantity, address _sender, address _to) external;\n', '    function invokePreRedeemHook(ICKToken _ckToken, uint256 _redeemQuantity, address _sender, address _to) external;\n', '}\n', '\n', '\n', '// File contracts/protocol/lib/Invoke.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title Invoke\n', ' * @author Cook Finance\n', ' *\n', " * A collection of common utility functions for interacting with the CKToken's invoke function\n", ' */\n', 'library Invoke {\n', '    using SafeMath for uint256;\n', '\n', '    /* ============ Internal ============ */\n', '\n', '    /**\n', '     * Instructs the CKToken to set approvals of the ERC20 token to a spender.\n', '     *\n', '     * @param _ckToken        CKToken instance to invoke\n', '     * @param _token           ERC20 token to approve\n', "     * @param _spender         The account allowed to spend the CKToken's balance\n", '     * @param _quantity        The quantity of allowance to allow\n', '     */\n', '    function invokeApprove(\n', '        ICKToken _ckToken,\n', '        address _token,\n', '        address _spender,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        bytes memory callData = abi.encodeWithSignature("approve(address,uint256)", _spender, _quantity);\n', '        _ckToken.invoke(_token, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Instructs the CKToken to transfer the ERC20 token to a recipient.\n', '     *\n', '     * @param _ckToken        CKToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function invokeTransfer(\n', '        ICKToken _ckToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            bytes memory callData = abi.encodeWithSignature("transfer(address,uint256)", _to, _quantity);\n', '            _ckToken.invoke(_token, 0, callData);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Instructs the CKToken to transfer the ERC20 token to a recipient.\n', '     * The new CKToken balance must equal the existing balance less the quantity transferred\n', '     *\n', '     * @param _ckToken        CKToken instance to invoke\n', '     * @param _token           ERC20 token to transfer\n', '     * @param _to              The recipient account\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function strictInvokeTransfer(\n', '        ICKToken _ckToken,\n', '        address _token,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        if (_quantity > 0) {\n', '            // Retrieve current balance of token for the CKToken\n', '            uint256 existingBalance = IERC20(_token).balanceOf(address(_ckToken));\n', '\n', '            Invoke.invokeTransfer(_ckToken, _token, _to, _quantity);\n', '\n', '            // Get new balance of transferred token for CKToken\n', '            uint256 newBalance = IERC20(_token).balanceOf(address(_ckToken));\n', '\n', '            // Verify only the transfer quantity is subtracted\n', '            require(\n', '                newBalance == existingBalance.sub(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Instructs the CKToken to unwrap the passed quantity of WETH\n', '     *\n', '     * @param _ckToken        CKToken instance to invoke\n', '     * @param _weth            WETH address\n', '     * @param _quantity        The quantity to unwrap\n', '     */\n', '    function invokeUnwrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\n', '        bytes memory callData = abi.encodeWithSignature("withdraw(uint256)", _quantity);\n', '        _ckToken.invoke(_weth, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Instructs the CKToken to wrap the passed quantity of ETH\n', '     *\n', '     * @param _ckToken        CKToken instance to invoke\n', '     * @param _weth            WETH address\n', '     * @param _quantity        The quantity to unwrap\n', '     */\n', '    function invokeWrapWETH(ICKToken _ckToken, address _weth, uint256 _quantity) internal {\n', '        bytes memory callData = abi.encodeWithSignature("deposit()");\n', '        _ckToken.invoke(_weth, _quantity, callData);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/AddressArrayUtils.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title AddressArrayUtils\n', ' * @author Cook Finance\n', ' *\n', ' * Utility functions to handle Address Arrays\n', ' */\n', 'library AddressArrayUtils {\n', '\n', '    /**\n', '     * Finds the index of the first occurrence of the given element.\n', '     * @param A The input array to search\n', '     * @param a The value to find\n', '     * @return Returns (index and isIn) for the first occurrence starting from index 0\n', '     */\n', '    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\n', '        uint256 length = A.length;\n', '        for (uint256 i = 0; i < length; i++) {\n', '            if (A[i] == a) {\n', '                return (i, true);\n', '            }\n', '        }\n', '        return (uint256(-1), false);\n', '    }\n', '\n', '    /**\n', '    * Returns true if the value is present in the list. Uses indexOf internally.\n', '    * @param A The input array to search\n', '    * @param a The value to find\n', '    * @return Returns isIn for the first occurrence starting from index 0\n', '    */\n', '    function contains(address[] memory A, address a) internal pure returns (bool) {\n', '        (, bool isIn) = indexOf(A, a);\n', '        return isIn;\n', '    }\n', '\n', '    /**\n', '    * Returns true if there are 2 elements that are the same in an array\n', '    * @param A The input array to search\n', '    * @return Returns boolean for the first occurrence of a duplicate\n', '    */\n', '    function hasDuplicate(address[] memory A) internal pure returns(bool) {\n', '        require(A.length > 0, "A is empty");\n', '\n', '        for (uint256 i = 0; i < A.length - 1; i++) {\n', '            address current = A[i];\n', '            for (uint256 j = i + 1; j < A.length; j++) {\n', '                if (current == A[j]) {\n', '                    return true;\n', '                }\n', '            }\n', '        }\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove     \n', '     * @return Returns the array with the object removed.\n', '     */\n', '    function remove(address[] memory A, address a)\n', '        internal\n', '        pure\n', '        returns (address[] memory)\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            (address[] memory _A,) = pop(A, index);\n', '            return _A;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param A The input array to search\n', '     * @param a The address to remove\n', '     */\n', '    function removeStorage(address[] storage A, address a)\n', '        internal\n', '    {\n', '        (uint256 index, bool isIn) = indexOf(A, a);\n', '        if (!isIn) {\n', '            revert("Address not in array.");\n', '        } else {\n', '            uint256 lastIndex = A.length - 1; // If the array would be empty, the previous line would throw, so no underflow here\n', '            if (index != lastIndex) { A[index] = A[lastIndex]; }\n', '            A.pop();\n', '        }\n', '    }\n', '\n', '    /**\n', '    * Removes specified index from array\n', '    * @param A The input array to search\n', '    * @param index The index to remove\n', '    * @return Returns the new array and the removed entry\n', '    */\n', '    function pop(address[] memory A, uint256 index)\n', '        internal\n', '        pure\n', '        returns (address[] memory, address)\n', '    {\n', '        uint256 length = A.length;\n', '        require(index < A.length, "Index must be < A length");\n', '        address[] memory newAddresses = new address[](length - 1);\n', '        for (uint256 i = 0; i < index; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = index + 1; j < length; j++) {\n', '            newAddresses[j - 1] = A[j];\n', '        }\n', '        return (newAddresses, A[index]);\n', '    }\n', '\n', '    /**\n', '     * Returns the combination of the two arrays\n', '     * @param A The first array\n', '     * @param B The second array\n', '     * @return Returns A extended by B\n', '     */\n', '    function extend(address[] memory A, address[] memory B) internal pure returns (address[] memory) {\n', '        uint256 aLength = A.length;\n', '        uint256 bLength = B.length;\n', '        address[] memory newAddresses = new address[](aLength + bLength);\n', '        for (uint256 i = 0; i < aLength; i++) {\n', '            newAddresses[i] = A[i];\n', '        }\n', '        for (uint256 j = 0; j < bLength; j++) {\n', '            newAddresses[aLength + j] = B[j];\n', '        }\n', '        return newAddresses;\n', '    }\n', '\n', '    /**\n', '     * Validate that address and uint array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of uint\n', '     */\n', '    function validatePairsWithArray(address[] memory A, uint[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and bool array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of bool\n', '     */\n', '    function validatePairsWithArray(address[] memory A, bool[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and string array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of strings\n', '     */\n', '    function validatePairsWithArray(address[] memory A, string[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address array lengths match, and calling address array are not empty\n', '     * and contain no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of addresses\n', '     */\n', '    function validatePairsWithArray(address[] memory A, address[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate that address and bytes array lengths match. Validate address array is not empty\n', '     * and contains no duplicate elements.\n', '     *\n', '     * @param A         Array of addresses\n', '     * @param B         Array of bytes\n', '     */\n', '    function validatePairsWithArray(address[] memory A, bytes[] memory B) internal pure {\n', '        require(A.length == B.length, "Array length mismatch");\n', '        _validateLengthAndUniqueness(A);\n', '    }\n', '\n', '    /**\n', '     * Validate address array is not empty and contains no duplicate elements.\n', '     *\n', '     * @param A          Array of addresses\n', '     */\n', '    function _validateLengthAndUniqueness(address[] memory A) internal pure {\n', '        require(A.length > 0, "Array length must be > 0");\n', '        require(!hasDuplicate(A), "Cannot duplicate addresses");\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/ExplicitERC20.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '/**\n', ' * @title ExplicitERC20\n', ' * @author Cook Finance\n', ' *\n', ' * Utility functions for ERC20 transfers that require the explicit amount to be transferred.\n', ' */\n', 'library ExplicitERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * When given allowance, transfers a token from the "_from" to the "_to" of quantity "_quantity".\n', '     * Ensures that the recipient has received the correct quantity (ie no fees taken on transfer)\n', '     *\n', '     * @param _token           ERC20 token to approve\n', '     * @param _from            The account to transfer tokens from\n', '     * @param _to              The account to transfer tokens to\n', '     * @param _quantity        The quantity to transfer\n', '     */\n', '    function transferFrom(\n', '        IERC20 _token,\n', '        address _from,\n', '        address _to,\n', '        uint256 _quantity\n', '    )\n', '        internal\n', '    {\n', '        // Call specified ERC20 contract to transfer tokens (via proxy).\n', '        if (_quantity > 0) {\n', '            uint256 existingBalance = _token.balanceOf(_to);\n', '\n', '            SafeERC20.safeTransferFrom(\n', '                _token,\n', '                _from,\n', '                _to,\n', '                _quantity\n', '            );\n', '\n', '            uint256 newBalance = _token.balanceOf(_to);\n', '\n', '            // Verify transfer quantity is reflected in balance\n', '            require(\n', '                newBalance == existingBalance.add(_quantity),\n', '                "Invalid post transfer balance"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IModule.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '/**\n', ' * @title IModule\n', ' * @author Cook Finance\n', ' *\n', ' * Interface for interacting with Modules.\n', ' */\n', 'interface IModule {\n', '    /**\n', '     * Called by a CKToken to notify that this module was removed from the CK token. Any logic can be included\n', '     * in case checks need to be made or state needs to be cleared.\n', '     */\n', '    function removeModule() external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SignedSafeMath\n', ' * @dev Signed math operations with safety checks that revert on error.\n', ' */\n', 'library SignedSafeMath {\n', '    int256 constant private _INT256_MIN = -2**255;\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == _INT256_MIN), "SignedSafeMath: multiplication overflow");\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b, "SignedSafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two signed integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "SignedSafeMath: division by zero");\n', '        require(!(b == -1 && a == _INT256_MIN), "SignedSafeMath: division overflow");\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a), "SignedSafeMath: subtraction overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two signed integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a), "SignedSafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/PreciseUnitMath.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '/**\n', ' * @title PreciseUnitMath\n', ' * @author Cook Finance\n', ' *\n', ' * Arithmetic for fixed-point numbers with 18 decimals of precision. Some functions taken from\n', " * dYdX's BaseMath library.\n", ' *\n', ' * CHANGELOG:\n', ' * - 9/21/20: Added safePower function\n', ' */\n', 'library PreciseUnitMath {\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    // The number One in precise units.\n', '    uint256 constant internal PRECISE_UNIT = 10 ** 18;\n', '    int256 constant internal PRECISE_UNIT_INT = 10 ** 18;\n', '\n', '    // Max unsigned integer value\n', '    uint256 constant internal MAX_UINT_256 = type(uint256).max;\n', '    // Max and min signed integer value\n', '    int256 constant internal MAX_INT_256 = type(int256).max;\n', '    int256 constant internal MIN_INT_256 = type(int256).min;\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnit() internal pure returns (uint256) {\n', '        return PRECISE_UNIT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function preciseUnitInt() internal pure returns (int256) {\n', '        return PRECISE_UNIT_INT;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxUint256() internal pure returns (uint256) {\n', '        return MAX_UINT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function maxInt256() internal pure returns (int256) {\n', '        return MAX_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Getter function since constants can't be read directly from libraries.\n", '     */\n', '    function minInt256() internal pure returns (int256) {\n', '        return MIN_INT_256;\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded down). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(b).div(PRECISE_UNIT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded towards zero). It's assumed that the value b is the\n", '     * significand of a number with 18 decimals precision.\n', '     */\n', '    function preciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(b).div(PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', "     * @dev Multiplies value a by value b (result is rounded up). It's assumed that the value b is the significand\n", '     * of a number with 18 decimals precision.\n', '     */\n', '    function preciseMulCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '        return a.mul(b).sub(1).div(PRECISE_UNIT).add(1);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down).\n', '     */\n', '    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a.mul(PRECISE_UNIT).div(b);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded towards 0).\n', '     */\n', '    function preciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return a.mul(PRECISE_UNIT_INT).div(b);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded up or away from 0).\n', '     */\n', '    function preciseDivCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "Cant divide by 0");\n', '\n', '        return a > 0 ? a.mul(PRECISE_UNIT).sub(1).div(b).add(1) : 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b (result is rounded down - positive numbers toward 0 and negative away from 0).\n', '     */\n', '    function divDown(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0, "Cant divide by 0");\n', '        require(a != MIN_INT_256 || b != -1, "Invalid input");\n', '\n', '        int256 result = a.div(b);\n', '        if (a ^ b < 0 && a % b != 0) {\n', '            result -= 1;\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies value a by value b where rounding is towards the lesser number.\n', '     * (positive values are rounded towards zero and negative values are rounded away from 0).\n', '     */\n', '    function conservativePreciseMul(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(b), PRECISE_UNIT_INT);\n', '    }\n', '\n', '    /**\n', '     * @dev Divides value a by value b where rounding is towards the lesser number.\n', '     * (positive values are rounded towards zero and negative values are rounded away from 0).\n', '     */\n', '    function conservativePreciseDiv(int256 a, int256 b) internal pure returns (int256) {\n', '        return divDown(a.mul(PRECISE_UNIT_INT), b);\n', '    }\n', '\n', '    /**\n', '    * @dev Performs the power on a specified value, reverts on overflow.\n', '    */\n', '    function safePower(\n', '        uint256 a,\n', '        uint256 pow\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(a > 0, "Value must be positive");\n', '\n', '        uint256 result = 1;\n', '        for (uint256 i = 0; i < pow; i++){\n', '            uint256 previousResult = result;\n', '\n', '            // Using safemath multiplication prevents overflows\n', '            result = previousResult.mul(a);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if a =~ b within range, false otherwise.\n', '     */\n', '    function approximatelyEquals(uint256 a, uint256 b, uint256 range) internal pure returns (bool) {\n', '        return a <= b.add(range) && a >= b.sub(range);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/protocol/lib/Position.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title Position\n', ' * @author Cook Finance\n', ' *\n', ' * Collection of helper functions for handling and updating CKToken Positions\n', ' *\n', ' * CHANGELOG:\n', ' *  - Updated editExternalPosition to work when no external position is associated with module\n', ' */\n', 'library Position {\n', '    using SafeCast for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeCast for int256;\n', '    using SignedSafeMath for int256;\n', '    using PreciseUnitMath for uint256;\n', '\n', '    /* ============ Helper ============ */\n', '\n', '    /**\n', '     * Returns whether the CKToken has a default position for a given component (if the real unit is > 0)\n', '     */\n', '    function hasDefaultPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\n', '        return _ckToken.getDefaultPositionRealUnit(_component) > 0;\n', '    }\n', '\n', '    /**\n', '     * Returns whether the CKToken has an external position for a given component (if # of position modules is > 0)\n', '     */\n', '    function hasExternalPosition(ICKToken _ckToken, address _component) internal view returns(bool) {\n', '        return _ckToken.getExternalPositionModules(_component).length > 0;\n', '    }\n', '    \n', '    /**\n', '     * Returns whether the CKToken component default position real unit is greater than or equal to units passed in.\n', '     */\n', '    function hasSufficientDefaultUnits(ICKToken _ckToken, address _component, uint256 _unit) internal view returns(bool) {\n', '        return _ckToken.getDefaultPositionRealUnit(_component) >= _unit.toInt256();\n', '    }\n', '\n', '    /**\n', '     * Returns whether the CKToken component external position is greater than or equal to the real units passed in.\n', '     */\n', '    function hasSufficientExternalUnits(\n', '        ICKToken _ckToken,\n', '        address _component,\n', '        address _positionModule,\n', '        uint256 _unit\n', '    )\n', '        internal\n', '        view\n', '        returns(bool)\n', '    {\n', '       return _ckToken.getExternalPositionRealUnit(_component, _positionModule) >= _unit.toInt256();    \n', '    }\n', '\n', '    /**\n', '     * If the position does not exist, create a new Position and add to the CKToken. If it already exists,\n', '     * then set the position units. If the new units is 0, remove the position. Handles adding/removing of \n', '     * components where needed (in light of potential external positions).\n', '     *\n', '     * @param _ckToken           Address of CKToken being modified\n', '     * @param _component          Address of the component\n', '     * @param _newUnit            Quantity of Position units - must be >= 0\n', '     */\n', '    function editDefaultPosition(ICKToken _ckToken, address _component, uint256 _newUnit) internal {\n', '        bool isPositionFound = hasDefaultPosition(_ckToken, _component);\n', '        if (!isPositionFound && _newUnit > 0) {\n', '            // If there is no Default Position and no External Modules, then component does not exist\n', '            if (!hasExternalPosition(_ckToken, _component)) {\n', '                _ckToken.addComponent(_component);\n', '            }\n', '        } else if (isPositionFound && _newUnit == 0) {\n', '            // If there is a Default Position and no external positions, remove the component\n', '            if (!hasExternalPosition(_ckToken, _component)) {\n', '                _ckToken.removeComponent(_component);\n', '            }\n', '        }\n', '\n', '        _ckToken.editDefaultPositionUnit(_component, _newUnit.toInt256());\n', '    }\n', '\n', '    /**\n', '     * Update an external position and remove and external positions or components if necessary. The logic flows as follows:\n', '     * 1) If component is not already added then add component and external position. \n', '     * 2) If component is added but no existing external position using the passed module exists then add the external position.\n', '     * 3) If the existing position is being added to then just update the unit and data\n', '     * 4) If the position is being closed and no other external positions or default positions are associated with the component\n', '     *    then untrack the component and remove external position.\n', '     * 5) If the position is being closed and other existing positions still exist for the component then just remove the\n', '     *    external position.\n', '     *\n', '     * @param _ckToken         CKToken being updated\n', '     * @param _component        Component position being updated\n', '     * @param _module           Module external position is associated with\n', '     * @param _newUnit          Position units of new external position\n', '     * @param _data             Arbitrary data associated with the position\n', '     */\n', '    function editExternalPosition(\n', '        ICKToken _ckToken,\n', '        address _component,\n', '        address _module,\n', '        int256 _newUnit,\n', '        bytes memory _data\n', '    )\n', '        internal\n', '    {\n', '        if (_newUnit != 0) {\n', '            if (!_ckToken.isComponent(_component)) {\n', '                _ckToken.addComponent(_component);\n', '                _ckToken.addExternalPositionModule(_component, _module);\n', '            } else if (!_ckToken.isExternalPositionModule(_component, _module)) {\n', '                _ckToken.addExternalPositionModule(_component, _module);\n', '            }\n', '            _ckToken.editExternalPositionUnit(_component, _module, _newUnit);\n', '            _ckToken.editExternalPositionData(_component, _module, _data);\n', '        } else {\n', '            require(_data.length == 0, "Passed data must be null");\n', '            // If no default or external position remaining then remove component from components array\n', '            if (_ckToken.getExternalPositionRealUnit(_component, _module) != 0) {\n', '                address[] memory positionModules = _ckToken.getExternalPositionModules(_component);\n', '                if (_ckToken.getDefaultPositionRealUnit(_component) == 0 && positionModules.length == 1) {\n', '                    require(positionModules[0] == _module, "External positions must be 0 to remove component");\n', '                    _ckToken.removeComponent(_component);\n', '                }\n', '                _ckToken.removeExternalPositionModule(_component, _module);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Get total notional amount of Default position\n', '     *\n', '     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\n', '     * @param _positionUnit       Quantity of Position units\n', '     *\n', '     * @return                    Total notional amount of units\n', '     */\n', '    function getDefaultTotalNotional(uint256 _ckTokenSupply, uint256 _positionUnit) internal pure returns (uint256) {\n', '        return _ckTokenSupply.preciseMul(_positionUnit);\n', '    }\n', '\n', '    /**\n', '     * Get position unit from total notional amount\n', '     *\n', '     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\n', '     * @param _totalNotional      Total notional amount of component prior to\n', '     * @return                    Default position unit\n', '     */\n', '    function getDefaultPositionUnit(uint256 _ckTokenSupply, uint256 _totalNotional) internal pure returns (uint256) {\n', '        return _totalNotional.preciseDiv(_ckTokenSupply);\n', '    }\n', '\n', '    /**\n', '     * Get the total tracked balance - total supply * position unit\n', '     *\n', '     * @param _ckToken           Address of the CKToken\n', '     * @param _component          Address of the component\n', '     * @return                    Notional tracked balance\n', '     */\n', '    function getDefaultTrackedBalance(ICKToken _ckToken, address _component) internal view returns(uint256) {\n', '        int256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component); \n', '        return _ckToken.totalSupply().preciseMul(positionUnit.toUint256());\n', '    }\n', '\n', '    /**\n', '     * Calculates the new default position unit and performs the edit with the new unit\n', '     *\n', '     * @param _ckToken                 Address of the CKToken\n', '     * @param _component                Address of the component\n', '     * @param _ckTotalSupply           Current CKToken supply\n', '     * @param _componentPreviousBalance Pre-action component balance\n', '     * @return                          Current component balance\n', '     * @return                          Previous position unit\n', '     * @return                          New position unit\n', '     */\n', '    function calculateAndEditDefaultPosition(\n', '        ICKToken _ckToken,\n', '        address _component,\n', '        uint256 _ckTotalSupply,\n', '        uint256 _componentPreviousBalance\n', '    )\n', '        internal\n', '        returns(uint256, uint256, uint256)\n', '    {\n', '        uint256 currentBalance = IERC20(_component).balanceOf(address(_ckToken));\n', '        uint256 positionUnit = _ckToken.getDefaultPositionRealUnit(_component).toUint256();\n', '\n', '        uint256 newTokenUnit;\n', '        if (currentBalance > 0) {\n', '            newTokenUnit = calculateDefaultEditPositionUnit(\n', '                _ckTotalSupply,\n', '                _componentPreviousBalance,\n', '                currentBalance,\n', '                positionUnit\n', '            );\n', '        } else {\n', '            newTokenUnit = 0;\n', '        }\n', '\n', '        editDefaultPosition(_ckToken, _component, newTokenUnit);\n', '\n', '        return (currentBalance, positionUnit, newTokenUnit);\n', '    }\n', '\n', '    /**\n', '     * Calculate the new position unit given total notional values pre and post executing an action that changes CKToken state\n', '     * The intention is to make updates to the units without accidentally picking up airdropped assets as well.\n', '     *\n', '     * @param _ckTokenSupply     Supply of CKToken in precise units (10^18)\n', '     * @param _preTotalNotional   Total notional amount of component prior to executing action\n', '     * @param _postTotalNotional  Total notional amount of component after the executing action\n', '     * @param _prePositionUnit    Position unit of CKToken prior to executing action\n', '     * @return                    New position unit\n', '     */\n', '    function calculateDefaultEditPositionUnit(\n', '        uint256 _ckTokenSupply,\n', '        uint256 _preTotalNotional,\n', '        uint256 _postTotalNotional,\n', '        uint256 _prePositionUnit\n', '    )\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        // If pre action total notional amount is greater then subtract post action total notional and calculate new position units\n', '        uint256 airdroppedAmount = _preTotalNotional.sub(_prePositionUnit.preciseMul(_ckTokenSupply));\n', '        return _postTotalNotional.sub(airdroppedAmount).preciseDiv(_ckTokenSupply);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IIntegrationRegistry.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface IIntegrationRegistry {\n', '    function addIntegration(address _module, string memory _id, address _wrapper) external;\n', '    function getIntegrationAdapter(address _module, string memory _id) external view returns(address);\n', '    function getIntegrationAdapterWithHash(address _module, bytes32 _id) external view returns(address);\n', '    function isValidIntegration(address _module, string memory _id) external view returns(bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IPriceOracle.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', '/**\n', ' * @title IPriceOracle\n', ' * @author Cook Finance\n', ' *\n', ' * Interface for interacting with PriceOracle\n', ' */\n', 'interface IPriceOracle {\n', '\n', '    /* ============ Functions ============ */\n', '\n', '    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256);\n', '    function masterQuoteAsset() external view returns (address);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ICKValuer.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity 0.6.10;\n', '\n', 'interface ICKValuer {\n', '    function calculateCKTokenValuation(ICKToken _ckToken, address _quoteAsset) external view returns (uint256);\n', '}\n', '\n', '\n', '// File contracts/protocol/lib/ResourceIdentifier.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ResourceIdentifier\n', ' * @author Cook Finance\n', ' *\n', ' * A collection of utility functions to fetch information related to Resource contracts in the system\n', ' */\n', 'library ResourceIdentifier {\n', '\n', '    // IntegrationRegistry will always be resource ID 0 in the system\n', '    uint256 constant internal INTEGRATION_REGISTRY_RESOURCE_ID = 0;\n', '    // PriceOracle will always be resource ID 1 in the system\n', '    uint256 constant internal PRICE_ORACLE_RESOURCE_ID = 1;\n', '    // CKValuer resource will always be resource ID 2 in the system\n', '    uint256 constant internal CK_VALUER_RESOURCE_ID = 2;\n', '\n', '    /* ============ Internal ============ */\n', '\n', '    /**\n', '     * Gets the instance of integration registry stored on Controller. Note: IntegrationRegistry is stored as index 0 on\n', '     * the Controller\n', '     */\n', '    function getIntegrationRegistry(IController _controller) internal view returns (IIntegrationRegistry) {\n', '        return IIntegrationRegistry(_controller.resourceId(INTEGRATION_REGISTRY_RESOURCE_ID));\n', '    }\n', '\n', '    /**\n', '     * Gets instance of price oracle on Controller. Note: PriceOracle is stored as index 1 on the Controller\n', '     */\n', '    function getPriceOracle(IController _controller) internal view returns (IPriceOracle) {\n', '        return IPriceOracle(_controller.resourceId(PRICE_ORACLE_RESOURCE_ID));\n', '    }\n', '\n', '    /**\n', '     * Gets the instance of CK valuer on Controller. Note: CKValuer is stored as index 2 on the Controller\n', '     */\n', '    function getCKValuer(IController _controller) internal view returns (ICKValuer) {\n', '        return ICKValuer(_controller.resourceId(CK_VALUER_RESOURCE_ID));\n', '    }\n', '}\n', '\n', '\n', '// File contracts/protocol/lib/ModuleBase.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title ModuleBase\n', ' * @author Cook Finance\n', ' *\n', ' * Abstract class that houses common Module-related state and functions.\n', ' */\n', 'abstract contract ModuleBase is IModule {\n', '    using AddressArrayUtils for address[];\n', '    using Invoke for ICKToken;\n', '    using Position for ICKToken;\n', '    using PreciseUnitMath for uint256;\n', '    using ResourceIdentifier for IController;\n', '    using SafeCast for int256;\n', '    using SafeCast for uint256;\n', '    using SafeMath for uint256;\n', '    using SignedSafeMath for int256;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of the controller\n', '    IController public controller;\n', '\n', '    /* ============ Modifiers ============ */\n', '\n', '    modifier onlyManagerAndValidCK(ICKToken _ckToken) { \n', '        _validateOnlyManagerAndValidCK(_ckToken);\n', '        _;\n', '    }\n', '\n', '    modifier onlyCKManager(ICKToken _ckToken, address _caller) {\n', '        _validateOnlyCKManager(_ckToken, _caller);\n', '        _;\n', '    }\n', '\n', '    modifier onlyValidAndInitializedCK(ICKToken _ckToken) {\n', '        _validateOnlyValidAndInitializedCK(_ckToken);\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * Throws if the sender is not a CKToken's module or module not enabled\n", '     */\n', '    modifier onlyModule(ICKToken _ckToken) {\n', '        _validateOnlyModule(_ckToken);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Utilized during module initializations to check that the module is in pending state\n', '     * and that the CKToken is valid\n', '     */\n', '    modifier onlyValidAndPendingCK(ICKToken _ckToken) {\n', '        _validateOnlyValidAndPendingCK(_ckToken);\n', '        _;\n', '    }\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables and map asset pairs to their oracles\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     */\n', '    constructor(IController _controller) public {\n', '        controller = _controller;\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * Transfers tokens from an address (that has set allowance on the module).\n', '     *\n', '     * @param  _token          The address of the ERC20 token\n', '     * @param  _from           The address to transfer from\n', '     * @param  _to             The address to transfer to\n', '     * @param  _quantity       The number of tokens to transfer\n', '     */\n', '    function transferFrom(IERC20 _token, address _from, address _to, uint256 _quantity) internal {\n', '        ExplicitERC20.transferFrom(_token, _from, _to, _quantity);\n', '    }\n', '\n', '    /**\n', '     * Gets the integration for the module with the passed in name. Validates that the address is not empty\n', '     */\n', '    function getAndValidateAdapter(string memory _integrationName) internal view returns(address) { \n', '        bytes32 integrationHash = getNameHash(_integrationName);\n', '        return getAndValidateAdapterWithHash(integrationHash);\n', '    }\n', '\n', '    /**\n', '     * Gets the integration for the module with the passed in hash. Validates that the address is not empty\n', '     */\n', '    function getAndValidateAdapterWithHash(bytes32 _integrationHash) internal view returns(address) { \n', '        address adapter = controller.getIntegrationRegistry().getIntegrationAdapterWithHash(\n', '            address(this),\n', '            _integrationHash\n', '        );\n', '\n', '        require(adapter != address(0), "Must be valid adapter"); \n', '        return adapter;\n', '    }\n', '\n', '    /**\n', '     * Gets the total fee for this module of the passed in index (fee % * quantity)\n', '     */\n', '    function getModuleFee(uint256 _feeIndex, uint256 _quantity) internal view returns(uint256) {\n', '        uint256 feePercentage = controller.getModuleFee(address(this), _feeIndex);\n', '        return _quantity.preciseMul(feePercentage);\n', '    }\n', '\n', '    /**\n', '     * Pays the _feeQuantity from the _ckToken denominated in _token to the protocol fee recipient\n', '     */\n', '    function payProtocolFeeFromCKToken(ICKToken _ckToken, address _token, uint256 _feeQuantity) internal {\n', '        if (_feeQuantity > 0) {\n', '            _ckToken.strictInvokeTransfer(_token, controller.feeRecipient(), _feeQuantity); \n', '        }\n', '    }\n', '\n', '    /**\n', '     * Returns true if the module is in process of initialization on the CKToken\n', '     */\n', '    function isCKPendingInitialization(ICKToken _ckToken) internal view returns(bool) {\n', '        return _ckToken.isPendingModule(address(this));\n', '    }\n', '\n', '    /**\n', "     * Returns true if the address is the CKToken's manager\n", '     */\n', '    function isCKManager(ICKToken _ckToken, address _toCheck) internal view returns(bool) {\n', '        return _ckToken.manager() == _toCheck;\n', '    }\n', '\n', '    /**\n', '     * Returns true if CKToken must be enabled on the controller \n', '     * and module is registered on the CKToken\n', '     */\n', '    function isCKValidAndInitialized(ICKToken _ckToken) internal view returns(bool) {\n', '        return controller.isCK(address(_ckToken)) &&\n', '            _ckToken.isInitializedModule(address(this));\n', '    }\n', '\n', '    /**\n', '     * Hashes the string and returns a bytes32 value\n', '     */\n', '    function getNameHash(string memory _name) internal pure returns(bytes32) {\n', '        return keccak256(bytes(_name));\n', '    }\n', '\n', '    /* ============== Modifier Helpers ===============\n', '     * Internal functions used to reduce bytecode size\n', '     */\n', '\n', '    /**\n', '     * Caller must CKToken manager and CKToken must be valid and initialized\n', '     */\n', '    function _validateOnlyManagerAndValidCK(ICKToken _ckToken) internal view {\n', '       require(isCKManager(_ckToken, msg.sender), "Must be the CKToken manager");\n', '       require(isCKValidAndInitialized(_ckToken), "Must be a valid and initialized CKToken");\n', '    }\n', '\n', '    /**\n', '     * Caller must CKToken manager\n', '     */\n', '    function _validateOnlyCKManager(ICKToken _ckToken, address _caller) internal view {\n', '        require(isCKManager(_ckToken, _caller), "Must be the CKToken manager");\n', '    }\n', '\n', '    /**\n', '     * CKToken must be valid and initialized\n', '     */\n', '    function _validateOnlyValidAndInitializedCK(ICKToken _ckToken) internal view {\n', '        require(isCKValidAndInitialized(_ckToken), "Must be a valid and initialized CKToken");\n', '    }\n', '\n', '    /**\n', '     * Caller must be initialized module and module must be enabled on the controller\n', '     */\n', '    function _validateOnlyModule(ICKToken _ckToken) internal view {\n', '        require(\n', '            _ckToken.moduleStates(msg.sender) == ICKToken.ModuleState.INITIALIZED,\n', '            "Only the module can call"\n', '        );\n', '\n', '        require(\n', '            controller.isModule(msg.sender),\n', '            "Module must be enabled on controller"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * CKToken must be in a pending state and module must be in pending state\n', '     */\n', '    function _validateOnlyValidAndPendingCK(ICKToken _ckToken) internal view {\n', '        require(controller.isCK(address(_ckToken)), "Must be controller-enabled CKToken");\n', '        require(isCKPendingInitialization(_ckToken), "Must be pending initialization");\n', '    }\n', '}\n', '\n', '\n', '// File contracts/protocol/modules/BasicIssuanceModule.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title BasicIssuanceModule\n', ' * @author Cook Finance\n', ' *\n', ' * Module that enables issuance and redemption functionality on a CKToken. This is a module that is\n', ' * required to bring the totalSupply of a CK above 0.\n', ' */\n', 'contract BasicIssuanceModule is ModuleBase, ReentrancyGuard {\n', '    using Invoke for ICKToken;\n', '    using Position for ICKToken.Position;\n', '    using Position for ICKToken;\n', '    using PreciseUnitMath for uint256;\n', '    using SafeMath for uint256;\n', '    using SafeCast for int256;\n', '\n', '    /* ============ Events ============ */\n', '\n', '    event CKTokenIssued(\n', '        address indexed _ckToken,\n', '        address indexed _issuer,\n', '        address indexed _to,\n', '        address _hookContract,\n', '        uint256 _quantity\n', '    );\n', '    event CKTokenRedeemed(\n', '        address indexed _ckToken,\n', '        address indexed _redeemer,\n', '        address indexed _to,\n', '        uint256 _quantity\n', '    );\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Mapping of CKToken to Issuance hook configurations\n', '    mapping(ICKToken => IManagerIssuanceHook) public managerIssuanceHook;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state controller state variable\n', '     *\n', '     * @param _controller             Address of controller contract\n', '     */\n', '    constructor(IController _controller) public ModuleBase(_controller) {}\n', '\n', '    /* ============ External Functions ============ */\n', '\n', '    /**\n', "     * Deposits the CKToken's position components into the CKToken and mints the CKToken of the given quantity\n", '     * to the specified _to address. This function only handles Default Positions (positionState = 0).\n', '     *\n', '     * @param _ckToken             Instance of the CKToken contract\n', '     * @param _quantity             Quantity of the CKToken to mint\n', '     * @param _to                   Address to mint CKToken to\n', '     */\n', '    function issue(\n', '        ICKToken _ckToken,\n', '        uint256 _quantity,\n', '        address _to\n', '    ) \n', '        external\n', '        nonReentrant\n', '        onlyValidAndInitializedCK(_ckToken)\n', '    {\n', '        require(_quantity > 0, "Issue quantity must be > 0");\n', '\n', '        address hookContract = _callPreIssueHooks(_ckToken, _quantity, msg.sender, _to);\n', '\n', '        (\n', '            address[] memory components,\n', '            uint256[] memory componentQuantities\n', '        ) = getRequiredComponentUnitsForIssue(_ckToken, _quantity);\n', '\n', '        // For each position, transfer the required underlying to the CKToken\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            // Transfer the component to the CKToken\n', '            transferFrom(\n', '                IERC20(components[i]),\n', '                msg.sender,\n', '                address(_ckToken),\n', '                componentQuantities[i]\n', '            );\n', '        }\n', '\n', '        // Mint the CKToken\n', '        _ckToken.mint(_to, _quantity);\n', '\n', '        emit CKTokenIssued(address(_ckToken), msg.sender, _to, hookContract, _quantity);\n', '    }\n', '\n', '    /**\n', "     * Redeems the CKToken's positions and sends the components of the given\n", '     * quantity to the caller. This function only handles Default Positions (positionState = 0).\n', '     *\n', '     * @param _ckToken             Instance of the CKToken contract\n', '     * @param _quantity             Quantity of the CKToken to redeem\n', '     * @param _to                   Address to send component assets to\n', '     */\n', '    function redeem(\n', '        ICKToken _ckToken,\n', '        uint256 _quantity,\n', '        address _to\n', '    )\n', '        external\n', '        nonReentrant\n', '        onlyValidAndInitializedCK(_ckToken)\n', '    {\n', '        require(_quantity > 0, "Redeem quantity must be > 0");\n', '\n', "        // Burn the CKToken - ERC20's internal burn already checks that the user has enough balance\n", '        _ckToken.burn(msg.sender, _quantity);\n', '\n', '        // For each position, invoke the CKToken to transfer the tokens to the user\n', '        address[] memory components = _ckToken.getComponents();\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            address component = components[i];\n', '            require(!_ckToken.hasExternalPosition(component), "Only default positions are supported");\n', '\n', '            uint256 unit = _ckToken.getDefaultPositionRealUnit(component).toUint256();\n', '\n', '            // Use preciseMul to round down to ensure overcollateration when small redeem quantities are provided\n', '            uint256 componentQuantity = _quantity.preciseMul(unit);\n', '\n', '            // Instruct the CKToken to transfer the component to the user\n', '            _ckToken.strictInvokeTransfer(\n', '                component,\n', '                _to,\n', '                componentQuantity\n', '            );\n', '        }\n', '\n', '        emit CKTokenRedeemed(address(_ckToken), msg.sender, _to, _quantity);\n', '    }\n', '\n', '    /**\n', "     * Initializes this module to the CKToken with issuance-related hooks. Only callable by the CKToken's manager.\n", '     * Hook addresses are optional. Address(0) means that no hook will be called\n', '     *\n', '     * @param _ckToken             Instance of the CKToken to issue\n', '     * @param _preIssueHook         Instance of the Manager Contract with the Pre-Issuance Hook function\n', '     */\n', '    function initialize(\n', '        ICKToken _ckToken,\n', '        IManagerIssuanceHook _preIssueHook\n', '    )\n', '        external\n', '        onlyCKManager(_ckToken, msg.sender)\n', '        onlyValidAndPendingCK(_ckToken)\n', '    {\n', '        managerIssuanceHook[_ckToken] = _preIssueHook;\n', '\n', '        _ckToken.initializeModule();\n', '    }\n', '\n', '    /**\n', '     * Reverts as this module should not be removable after added. Users should always\n', '     * have a way to redeem their CKs\n', '     */\n', '    function removeModule() external override {\n', '        revert("The BasicIssuanceModule module cannot be removed");\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Retrieves the addresses and units required to mint a particular quantity of CKToken.\n', '     *\n', '     * @param _ckToken             Instance of the CKToken to issue\n', '     * @param _quantity             Quantity of CKToken to issue\n', '     * @return address[]            List of component addresses\n', '     * @return uint256[]            List of component units required to issue the quantity of CKTokens\n', '     */\n', '    function getRequiredComponentUnitsForIssue(\n', '        ICKToken _ckToken,\n', '        uint256 _quantity\n', '    )\n', '        public\n', '        view\n', '        onlyValidAndInitializedCK(_ckToken)\n', '        returns (address[] memory, uint256[] memory)\n', '    {\n', '        address[] memory components = _ckToken.getComponents();\n', '\n', '        uint256[] memory notionalUnits = new uint256[](components.length);\n', '\n', '        for (uint256 i = 0; i < components.length; i++) {\n', '            require(!_ckToken.hasExternalPosition(components[i]), "Only default positions are supported");\n', '\n', '            notionalUnits[i] = _ckToken.getDefaultPositionRealUnit(components[i]).toUint256().preciseMulCeil(_quantity);\n', '        }\n', '\n', '        return (components, notionalUnits);\n', '    }\n', '\n', '    /* ============ Internal Functions ============ */\n', '\n', '    /**\n', '     * If a pre-issue hook has been configured, call the external-protocol contract. Pre-issue hook logic\n', '     * can contain arbitrary logic including validations, external function calls, etc.\n', '     */\n', '    function _callPreIssueHooks(\n', '        ICKToken _ckToken,\n', '        uint256 _quantity,\n', '        address _caller,\n', '        address _to\n', '    )\n', '        internal\n', '        returns(address)\n', '    {\n', '        IManagerIssuanceHook preIssueHook = managerIssuanceHook[_ckToken];\n', '        if (address(preIssueHook) != address(0)) {\n', '            preIssueHook.invokePreIssueHook(_ckToken, _quantity, _caller, _to);\n', '            return address(preIssueHook);\n', '        }\n', '\n', '        return address(0);\n', '    }\n', '}']