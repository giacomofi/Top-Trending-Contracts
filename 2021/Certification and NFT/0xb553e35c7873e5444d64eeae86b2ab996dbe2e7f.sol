['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '//pragma experimental ABIEncoderV2;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(\n', '        address operator,\n', '        address from,\n', '        uint256 tokenId,\n', '        bytes calldata data\n', '    ) external returns (bytes4);\n', '}\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Enumerable is IERC721 {\n', '    /**\n', '     * @dev Returns the total amount of tokens stored by the contract.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n', "     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n", '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    /**\n', '     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n', '     * Use along with {totalSupply} to enumerate all tokens.\n', '     */\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n', ' * the Metadata extension, but not including the Enumerable extension, which is available separately as\n', ' * {ERC721Enumerable}.\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n', '    using Address for address;\n', '    using Strings for uint256;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping(uint256 => address) private _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping(address => uint256) private _balances;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping(uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping(address => mapping(address => bool)) private _operatorApprovals;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor(string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n', '        return\n', '            interfaceId == type(IERC721).interfaceId ||\n', '            interfaceId == type(IERC721Metadata).interfaceId ||\n', '            super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '\n', '        string memory baseURI = _baseURI();\n', '        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : "";\n', '    }\n', '\n', '    /**\n', '     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n', '     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n', '     * by default, can be overriden in child contracts.\n', '     */\n', '    function _baseURI() internal view virtual returns (string memory) {\n', '        return "";\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(\n', '            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes memory _data\n', '    ) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes memory _data\n', '    ) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes memory _data\n', '    ) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(\n', '            _checkOnERC721Received(address(0), to, tokenId, _data),\n', '            "ERC721: transfer to non ERC721Receiver implementer"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[owner] -= 1;\n', '        delete _owners[tokenId];\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) internal virtual {\n', '        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve `to` to operate on `tokenId`\n', '     *\n', '     * Emits a {Approval} event.\n', '     */\n', '    function _approve(address to, uint256 tokenId) internal virtual {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId,\n', '        bytes memory _data\n', '    ) private returns (bool) {\n', '        if (to.isContract()) {\n', '            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n', '                return retval == IERC721Receiver(to).onERC721Received.selector;\n', '            } catch (bytes memory reason) {\n', '                if (reason.length == 0) {\n', '                    revert("ERC721: transfer to non ERC721Receiver implementer");\n', '                } else {\n', '                    assembly {\n', '                        revert(add(32, reason), mload(reason))\n', '                    }\n', '                }\n', '            }\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) internal virtual {}\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\n', ' * enumerability of all the token ids in the contract as well as all token ids owned by each\n', ' * account.\n', ' */\n', 'abstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\n', '    // Mapping from owner to list of owned token IDs\n', '    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\n', '\n', '    // Mapping from token ID to index of the owner tokens list\n', '    mapping(uint256 => uint256) private _ownedTokensIndex;\n', '\n', '    // Array with all token ids, used for enumeration\n', '    uint256[] private _allTokens;\n', '\n', '    // Mapping from token id to position in the allTokens array\n', '    mapping(uint256 => uint256) private _allTokensIndex;\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\n', '        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\n', '        require(index < ERC721.balanceOf(owner), "ERC721Enumerable: owner index out of bounds");\n', '        return _ownedTokens[owner][index];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _allTokens.length;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\n', '        require(index < ERC721Enumerable.totalSupply(), "ERC721Enumerable: global index out of bounds");\n', '        return _allTokens[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address from,\n', '        address to,\n', '        uint256 tokenId\n', '    ) internal virtual override {\n', '        super._beforeTokenTransfer(from, to, tokenId);\n', '\n', '        if (from == address(0)) {\n', '            _addTokenToAllTokensEnumeration(tokenId);\n', '        } else if (from != to) {\n', '            _removeTokenFromOwnerEnumeration(from, tokenId);\n', '        }\n', '        if (to == address(0)) {\n', '            _removeTokenFromAllTokensEnumeration(tokenId);\n', '        } else if (to != from) {\n', '            _addTokenToOwnerEnumeration(to, tokenId);\n', '        }\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's ownership-tracking data structures.\n", '     * @param to address representing the new owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\n', '     */\n', '    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\n', '        uint256 length = ERC721.balanceOf(to);\n', '        _ownedTokens[to][length] = tokenId;\n', '        _ownedTokensIndex[tokenId] = length;\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to add a token to this extension's token tracking data structures.\n", '     * @param tokenId uint256 ID of the token to be added to the tokens list\n', '     */\n', '    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\n', '        _allTokensIndex[tokenId] = _allTokens.length;\n', '        _allTokens.push(tokenId);\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\n", '     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\n', '     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\n', '     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\n', '     */\n', '    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\n', "        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\n", '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\n', '        uint256 tokenIndex = _ownedTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary\n', '        if (tokenIndex != lastTokenIndex) {\n', '            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\n', '\n', '            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '        }\n', '\n', '        // This also deletes the contents at the last position of the array\n', '        delete _ownedTokensIndex[tokenId];\n', '        delete _ownedTokens[from][lastTokenIndex];\n', '    }\n', '\n', '    /**\n', "     * @dev Private function to remove a token from this extension's token tracking data structures.\n", '     * This has O(1) time complexity, but alters the order of the _allTokens array.\n', '     * @param tokenId uint256 ID of the token to be removed from the tokens list\n', '     */\n', '    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\n', '        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\n', '        // then delete the last slot (swap and pop).\n', '\n', '        uint256 lastTokenIndex = _allTokens.length - 1;\n', '        uint256 tokenIndex = _allTokensIndex[tokenId];\n', '\n', '        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\n', '        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\n', "        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\n", '        uint256 lastTokenId = _allTokens[lastTokenIndex];\n', '\n', '        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\n', "        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\n", '\n', '        // This also deletes the contents at the last position of the array\n', '        delete _allTokensIndex[tokenId];\n', '        _allTokens.pop();\n', '    }\n', '}\n', '\n', 'interface IMozikERC721Token is IERC721Enumerable {\n', '   \n', '\n', '    function getBaseTokenURI() external view returns (string memory); \n', '\n', '    function setBaseTokenURI(string memory url) external;\n', '\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '\n', '    function isMozikNftToken(address tokenAddress) external view returns(bool);\n', '\n', '    function isApprovedOrOwner(address spender, uint256 tokenId) external view returns (bool);\n', '\n', '    function exists(uint256 tokenId) external view returns (bool);\n', '\n', '}\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor () {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to relinquish control of the contract.\n', '     * It will not be possible to call the functions with the `onlyOwner`\n', '     * modifier anymore.\n', '     * @notice Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '     /*\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }*/\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Authentication 授权合约\n', ' * Authentication - 用于控制市场/交易所的商品操作权限\n', ' * @dev https://www.mozik.cc\n', ' * @author duncanwang\n', ' */\n', 'contract Authentication is Ownable {\n', '    address private _owner;//合约拥有者\n', '    mapping(address=>bool) _managers;//管理员\n', '\n', '    /**\n', '    * @dev constructor ： 构建函数\n', '    */\n', '    constructor() {    \n', '        _owner = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev onlyAuthorized 是否已授权？\n', '       权限控制：修饰符\n', '    * @param target 期望判断的目标地址;         \n', '     */\n', '    modifier onlyAuthorized(address target) {\n', '        require(isOwner()||isManager(target),"Only for manager or owner!");\n', '        _;\n', '    }    \n', '\n', '    /**\n', '    * @dev addManager -增加管理员。不做判断，允许重复设置；\n', '      权限控制：只有owner可以增加管理员；\n', '    * @param manager 期望设置的地址;    \n', '    */\n', '    function addManager(address manager) public onlyOwner{    \n', '        _managers[manager] = true;\n', '    }    \n', '\n', '    /**\n', '    * @dev removeManager -删除管理员。不做判断，允许重复设置；\n', '      权限控制：只有owner可以剔除管理员；\n', '    * @param manager 期望设置的地址;        \n', '    */\n', '    function removeManager(address manager) public onlyOwner{    \n', '        _managers[manager] = false;\n', '    }  \n', '\n', '    /**\n', '    * @dev isManager - 判断是否是管理员；\n', '      权限控制：任何人都可以访问； \n', '    */\n', '    function isManager(address manager) public view returns (bool) {    \n', '        return(_managers[manager]);\n', '    }             \n', '\n', '}    \n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain `call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'enum TokenType {ETH, ERC20}\n', '\n', '/**\n', ' * @title Good 平台合约\n', ' * Goods - contract which treat NFT for sale.\n', ' * @dev https://www.mozik.cc\n', ' * @author duncanwang\n', ' */\n', 'contract Goods is Ownable {\n', '    using Strings for string;\n', '    using Address for address;    \n', '    using SafeMath for *;\n', '   \n', '    string constant public _name = "GOODS contract as ERC721 NFT for sale with version 1.0";\n', '\n', '    /* 商品属性 */\n', '    address private _nftContractAddress;\n', '    uint256 public _tokenID;\n', '    TokenType public _expectedTokenType;\n', '    address payable public _sellerAddress;\n', '    address private _expectedTokenAddress;\n', '    uint256 public _expectedValue;\n', '    uint private _startTime;\n', '    bool private _isForSale = false;\n', '\n', '    /* 处理函数 */\n', '    /**\n', '    * @dev constructor ： 构建函数\n', '    * @param ContractAddress TOKEN address treated as goods.\n', '    */\n', '    constructor(address ContractAddress) {\n', '        //require an contract address\n', '        require(true == Address.isContract(ContractAddress), "ContractAddress is not a contract address!");\n', '\n', '        //set _nftContractAddress if the address is a ERC721 token address.\n', '        if(IERC721(ContractAddress).supportsInterface(0x80ac58cd))\n', '        {\n', '            _nftContractAddress = ContractAddress;\n', '        }\n', '        else\n', '        {\n', '            revert();\n', '        }\n', '        \n', '    }  \n', '\n', '/**\n', '    * @dev getGoodsInfo : 获取商品信息\n', '    * @return _nftContractAddress 对应的NFT的合约地址\n', '    * @return _tokenID  对应的NFT的TOKENID\n', '    * @return _expectedTokenType 对应售出获得的TOKEN是ETH还是其他类型的TOKEN： ERC20或者ERC721；\n', '    * @return _sellerAddress 商品销售者地址\n', '    * @return _expectedTokenAddress 期待售出获得的TOKEN合约地址\n', '    * @return _expectedValue 期待售出获得的TOKEN数量\n', '    * @return _startTime 开始销售的时间；\n', '    * @return _isForSale 当前商品是否是待售状态；\n', '    */\n', '    function getGoodsInfo() external view returns (address, uint256, TokenType,address,address,uint256,uint,bool) {  \n', '        //返回商品所有信息        \n', '        return (_nftContractAddress,_tokenID,_expectedTokenType,_sellerAddress,_expectedTokenAddress,_expectedValue,_startTime,_isForSale);\n', '    }  \n', '\n', '/**\n', '    * @dev onSale : 设置商品销售属性 \n', '    * 权限控制：goods合约的创建者才能设置商品属性；\n', '    * @param saleTokenID 对应的销售NFT的token ID;\n', '    * @param sellerAddress 销售者账号；\n', '    * @param expectedTokenType 期望获得的TOKEN是ETH还是ERC20 ,ERC721TOKEN；\n', '    * @param tokenAddress 如果期望获得的TOKEN不是ETH，则此处为期望的TOKEN合约地址\n', '    * @param value 期待售出获得的TOKEN数量\n', '    * @param startTime 开始销售的时间；\n', '    * @return bool 设置商品状态为成功还是失败；\n', '    */\n', '    function onSale(uint256 saleTokenID,address payable sellerAddress,TokenType expectedTokenType, address tokenAddress, uint256 value, uint256 startTime) external onlyOwner returns (bool) {  \n', '        /*1. 该商品处于销售状态，或者销售账户地址为0，则不能设置销售参数 */\n', '        if(_isForSale|| sellerAddress == address(0) )\n', '        {\n', '            return false;\n', '        }\n', '        \n', '        /*2.销售者不是该NFT商品的拥有者，授权者，超级授权者，则返回失败*/\n', '        if(!isApprovedOrOwner(sellerAddress,saleTokenID )) \n', '        {\n', '            return false;\n', '        }   \n', '\n', '        /*3.当销售类型不为ETH时，tokenAddress必须是一个合约地址;\n', '            此时adress(0)也是非法的，不是合约地址，不做单独判断；*/\n', '        if((expectedTokenType != TokenType.ETH) && (!Address.isContract(tokenAddress)) )\n', '        {\n', '             return false;\n', '        }\n', '\n', '        //4.检查startTime值小于当前区块的时间，则返回失败；\n', '        if(startTime < block.timestamp)\n', '        {\n', '             return false;\n', '        }\n', '\n', '        //5.商品赋值\n', '        _tokenID = saleTokenID;\n', '        _expectedTokenType = expectedTokenType;\n', '        _sellerAddress = sellerAddress;\n', '        _expectedTokenAddress = tokenAddress;\n', '        _expectedValue = value;\n', '        _startTime = startTime;\n', '        _isForSale = true;        \n', '\n', '        //6.返回成功\n', '        return true;\n', '    }  \n', '\n', '/**\n', '    * @dev offSale : 商品下架，设置该商品的属性为无效值\n', '    * 权限控制：goods合约的创建者才能设置下架；\n', '    */\n', '    function offSale() external onlyOwner{ \n', '        _tokenID = 0;\n', '        _expectedTokenType = TokenType.ETH;\n', '        _sellerAddress = payable(address(0));\n', '        _expectedTokenAddress = address(0);\n', '        _expectedValue = 0;\n', '        _startTime = 0;        \n', '        _isForSale = false;\n', '    }  \n', '\n', '    /**\n', '     * @dev _isApprovedOrOwner ：判断该地址是否是该NFT商品的拥有者，授权者，超级授权者\n', '     *\n', '     * @param seller 销售者地址\n', '     * @param tokenId 销售者想出售的tokenId       \n', '     * Requirements:\n', '     * - `tokenId` must exist.\n', '     */\n', '    function isApprovedOrOwner(address seller, uint256 tokenId) public view returns (bool) {\n', '        //如果tokenId不存在，则异常返回，赋值不会成功；\n', '        address owner = IERC721(_nftContractAddress).ownerOf(tokenId);\n', '\n', '       /*如果销售者是该tokenID的拥有者，授权者或者超级授权者(不同于单个授权)\n', '            为了兼容所有的ERC721 TOKEN，只能使用IERC721的接口函数来判断。*/   \n', '        return (seller == owner || IERC721(_nftContractAddress).getApproved(tokenId) == seller || IERC721(_nftContractAddress).isApprovedForAll(owner, seller));\n', '    }\n', '\n', '    /**\n', '     * @dev isOnSale: 从时间，状态等判断该商品是否处于销售状态\n', '       权限：公开，任意人都可以访问\n', '     * @return bool true or false;\n', '     */\n', '    function isOnSale() public view returns(bool) {\n', '        return(_isForSale && (block.timestamp >= _startTime));\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title Exchange 交换合约\n', ' * Exchange - 该合约用于处理mozik nft的交换，换取目标为MOZIK ERC20和ETH\n', ' * @dev https://www.mozik.cc\n', ' * @author duncanwang\n', ' */\n', 'contract Exchange is Authentication {\n', '    using Strings for string;\n', '    using Address for address;    \n', '    using SafeMath for *;\n', '\n', '    string constant public _name = "Exchange contract as ERC721 NFT exchange with ETH or mozik ERC20 version 1.0";    \n', '    \n', '    mapping(uint256 => address) private _saleGoodsAddr;//token ID对应的商品合约地址\n', '    address private _mozikNftAddress;//MOZIK NFT智能合约\n', '    address private _mozikErc20Address;//MOZIK ERC20智能合约\n', '\n', '    /* 处理函数 */\n', '    /**\n', '    * @dev constructor ： 构建函数\n', '      权限：管理账户创建者\n', '    * @param mozikNftAddress mozik ERC721 NFT token.\n', '    * @param mozikErc20Address mozik ERC20 FT token.\n', '    */\n', '    constructor(address mozikNftAddress, address mozikErc20Address) {\n', '        //这2个地址必须是合约地址\n', '        require(Address.isContract(mozikNftAddress), "the first parameter should be MozikERC721Token address!" );     \n', '        require(Address.isContract(mozikErc20Address), "the second parameter should be mozik ERC20 address!" );     \n', '\n', '        //判断该合约地址是否是mozik ERC721 NFT token地址\n', '        require(IMozikERC721Token(mozikNftAddress).isMozikNftToken(mozikNftAddress), "the first parameter should be MozikERC721Token address!");\n', '\n', '        //记录合约地址\n', '        _mozikNftAddress = mozikNftAddress;\n', '        \n', '        //固定交换合约对应的ERC20的地址，防止被人使用无价值token套利.\n', '        _mozikErc20Address = mozikErc20Address;\n', '        \n', '    }  \n', '\n', '    /**\n', '     * @dev isOnSale: 判断某个tokenId是否作为商品在销售\n', '       权限：公开，任意人都可以访问\n', '     * @param tokenId 需要查询的token id, 其对应的goods中的_tokenID在exchange市场具有唯一性。\n', '     */\n', '    function isOnSale(uint256 tokenId) public view returns(bool) {\n', '        address goodsAddress = _saleGoodsAddr[tokenId];\n', '\n', '        //包括该商品的isForSale是true,当前时间大于销售开始时间\n', '        if( address(0) != goodsAddress && Goods(goodsAddress).isOnSale() )\n', '        {\n', '            return true;\n', '        }\n', '\n', '        //其他情况下均返回false\n', '        return false;\n', '\n', '    }   \n', '\n', '    /**\n', '     * @dev getSaleGoodsInfo: 返回销售列表中的某一个商品信息；\n', '       权限：公开，任意人都可以访问\n', '     * @param tokenID 要查询的tokenID\n', '     */\n', '    function getSaleGoodsInfo(uint256 tokenID) external view \n', '    returns (address nftContractAddress, uint256 tokenid, TokenType expectedTokenType,address sellerAddress,address expectedTokenAddress,uint256 expectedValue,uint startTime,bool isForSale) {\n', '       \n', '        address goodsAddress = _saleGoodsAddr[tokenID];\n', '\n', '        //商品地址不可能是0地址；\n', '        require(address(0) != goodsAddress, "It\'s not an invalid goods.");\n', '\n', '        return( Goods(goodsAddress).getGoodsInfo() );\n', '\n', '\n', '    }    \n', '\n', '   /**\n', '     * @dev hasRightToSale: 判断账户是否有销售该token id的权限；\n', '       权限：公开，任意人都可以访问\n', '     * @param targetAddr : address,需要判断的账号地址；\n', '     * @param tokenId : uint256, NFT tokenId；该token Id必须存在，否则失败回滚；\n', '     * @return bool: 返回结果 true/false;\n', '     */\n', '    function hasRightToSale(address targetAddr, uint256 tokenId) public view returns(bool) {\n', '  \n', '        //该函数不会返回异常回退\n', '       /*判断如果销售者是该tokenID的拥有者，授权者或者超级授权者(不同于单个授权)\n', '            为了兼容所有的ERC721 TOKEN，只能使用IERC721的接口函数来判断。*/   \n', '        return (IMozikERC721Token(_mozikNftAddress).isApprovedOrOwner(targetAddr, tokenId));\n', '    }\n', '\n', '/**\n', '     * @dev IsTokenOwner: 判断账户是否是该token id的拥有者；\n', '       权限：公开，任意人都可以访问\n', '     * @param targetAddr : address,需要判断的账号地址；\n', '     * @param tokenId : uint256, NFT tokenId；该token Id必须存在，否则失败回滚；\n', '     * @return bool: 返回结果 true/false;\n', '     */\n', '    function IsTokenOwner(address targetAddr, uint256 tokenId) public view returns(bool) {\n', '        //如果tokenId不存在则返回失败\n', '        if(!IMozikERC721Token(_mozikNftAddress).exists(tokenId))\n', '        {\n', '            return false;\n', '        }\n', '        \n', '        /* 确认目标地址是不是该token的owner*/   \n', '        return (targetAddr == IMozikERC721Token(_mozikNftAddress).ownerOf(tokenId) );\n', '    }\n', '\n', '   /**\n', '     * @dev hasEnoughTokenToBuy: 判断账户是否有足够的token来购买NFT；\n', '       权限：公开，任意人都可以访问\n', '     * @param buyer : address, 购买账户,不可以是0x0的地址；\n', '     * @param tokenId : uint256, NFT tokenId；该token Id必须存在，否则失败回滚；\n', '     * @return bool: 返回结果 true/false;\n', '     */\n', '    function hasEnoughTokenToBuy(address buyer, uint256 tokenId) public view returns(bool) {\n', '        \n', '        /* 地址为0，或者token id不存在则直接返回false */\n', '        if( (address(0) == buyer) || (!IMozikERC721Token(_mozikNftAddress).exists(tokenId)) )\n', '        {\n', '            return false;\n', '        }\n', '\n', '        /* 该tokenid属于销售商品；不判断是否处于销售中，这个由外部函数判断 */\n', '        address goodsAddress = _saleGoodsAddr[tokenId];\n', '        /* 如果商品地址为0，那也是异常的*/\n', '        if(address(0) == goodsAddress)\n', '        {\n', '            return false;\n', '        }\n', '        \n', '        /* 卖家期望收获的是ETH */\n', '        if(TokenType.ETH ==  Goods(goodsAddress)._expectedTokenType() )\n', '        {\n', '            buyer.balance >= Goods(goodsAddress)._expectedValue();\n', '            return true;\n', '        }\n', '        /* 卖家期望收获的是ERC20的TOKEN */\n', '        else if(TokenType.ERC20 ==  Goods(goodsAddress)._expectedTokenType() )\n', '        {\n', '                IERC20(_mozikErc20Address).balanceOf(buyer) >= Goods(goodsAddress)._expectedValue();\n', '                return true;\n', '        }\n', '        else\n', '        {\n', '            //其他都返回失败\n', '            return false;\n', '        }           \n', '  \n', '    }\n', '\n', '    /**\n', '    * @dev sellNFT: NFT拥有者发起销售设置；\n', '       权限：TOKEN 拥有者才能发起销售\n', '       前置条件：该NFT TOKEN拥有者需要把该TOKEN ID授权给EXCHANGE地址\n', '    * @param saleTokenID 对应的销售NFT的token ID;\n', '    * @param expectedTokenType 期望获得的TOKEN是ETH还是ERC20 ,ERC721TOKEN；\n', '    * @param tokenAddress 如果期望获得的TOKEN不是ETH，则此处为期望的TOKEN合约地址\n', '    * @param value 期待售出获得的TOKEN数量\n', '    * @param startTime 开始销售的时间；\n', '     */\n', '    function sellNFT(uint256 saleTokenID, TokenType expectedTokenType, address tokenAddress, uint256 value, uint256 startTime) external {\n', '        Goods goods;\n', '        bool result;\n', '\n', '        /*该NFT TOKEN拥有者需要提前把该TOKEN ID授权给EXCHANGE地址，否者购买者会购买不成功的。\n', '          为了备忘，提前确认当前合约是该NFT的授权者*/\n', '        require(hasRightToSale(address(this), saleTokenID),"the exchange contracct is not the approved of the TOKEN.");\n', '\n', '\n', '        /* 发送者必须是一个外部账户，不是合约地址；本版本先做限定，防止攻击 */\n', '        require(!Address.isContract(msg.sender),"the sender should be a person, not a contract!");\n', '\n', '        /* 目前限定销售者必须是token id的owner，同时表明该saleTokenID存在*/\n', '        require(IsTokenOwner(msg.sender, saleTokenID),"the sender isn\'t the owner of the token id nft!");\n', '\n', '        /* expectedTokenType为有效值 */\n', '        require((expectedTokenType == TokenType.ETH) || (expectedTokenType == TokenType.ERC20),\n', '                "expectedTokenType must be ETH or ERC20 in this version!");\n', '\n', '        /* tokenAddress为mozik ERC20的地址 */\n', '        if(expectedTokenType == TokenType.ERC20)\n', '        {\n', '            require((tokenAddress == _mozikErc20Address), "the expected token must be mozik ERC20 token.");\n', '        }\n', '        \n', '        /* startTime是否大于等于区块时间 */\n', '        require((startTime >= block.timestamp), "startTime for sale must be bigger than now.");\n', '\n', '        /* 判断token id是更新参数还是新建商品，然后调用GOODS销售设定 */\n', '        /* 更新已有商品：对应的address值有效 */\n', '        if( address(0) != _saleGoodsAddr[saleTokenID] )\n', '        {\n', '            //确认下，这儿是引用还是COPY呢？引用\n', '            goods = Goods(_saleGoodsAddr[saleTokenID] );\n', '            goods.onSale(saleTokenID,payable(msg.sender),expectedTokenType, tokenAddress, value, startTime);\n', '        }\n', '        else\n', '        {\n', '            /* 创建商品并设置商品属性 */\n', '            goods = new Goods(_mozikNftAddress);\n', '            result = goods.onSale(saleTokenID, payable(msg.sender), expectedTokenType, tokenAddress, value, startTime);\n', '            require(result, "set goods on sale is failed.");\n', '\n', '            //更新商品地址\n', '            _saleGoodsAddr[saleTokenID] = address(goods);\n', '            /* 设置当前合约Exchange为授权者,便于在购买时可以发起转移 */\n', '            //IMozikERC721Token(_mozikNftAddress).approve(address(this),saleTokenID);\n', '        }\n', '    }    \n', '\n', '    /**\n', '    * @dev cancelSell: 取消销售货品\n', '       权限：管理员和合约的owner才有此权限；\n', '            销售者可以跟管理方协商后处理，无法擅自取消销售。\n', '    * @param tokenID uint256;\n', '    */\n', '    function cancelSell(uint256 tokenID) external onlyAuthorized(msg.sender){\n', '        //不管销售状态，只要销售列表中有就删除掉。\n', '        _saleGoodsAddr[tokenID] = address(0);\n', '\n', '        //不触发Goods智能合约销毁接口了，要费GAS，没有什么价值；\n', '        //ERC721没有取消授权的接口，也不取消授权了。\n', '    }    \n', '\n', '    /**\n', '    * @dev buyNFT: 购买处于销售状态的NFT TOKEN\n', '       权限：\n', '       前置条件：如果是使用ERC20 MOZIK购买，需要把等额的TOKEN授权给exchange合约\n', '    * @param tokenID 想购买的tokenID;\n', '    */\n', '    function buyNFT(uint256 tokenID) payable external {\n', '        //判断该tokenId是否处于销售中，包含该token id是否存在  \n', '        require(isOnSale(tokenID),"The nft token(tokenID) is not on sale.");\n', '\n', '        //当前合约是该NFT的授权者\n', '        require(hasRightToSale(address(this), tokenID),"the exchange contracct is not the approved of the TOKEN.");\n', '\n', '        //当前发起者是否有足够的余额购买\n', '        require(hasEnoughTokenToBuy(msg.sender, tokenID), "No enough token to buy the NFT(tokenID)");\n', '        \n', '        //tokenid必须处于销售列表中,index必须是有效值\n', '        address goodsAddress = _saleGoodsAddr[tokenID];\n', '        //商品地址不可能是0地址；\n', '        require(address(0) != goodsAddress, "The token ID isn\'t on sale status!");\n', '\n', '        //不要出现同账号买卖现象，链上交易都费钱。想测试还请换个不同账号吧。\n', '        require(msg.sender != Goods(goodsAddress)._sellerAddress(), "the buyer can\'t be same to the seller.");\n', '\n', '        //转移ERC721给购买者\n', '        IMozikERC721Token(_mozikNftAddress).safeTransferFrom(Goods(goodsAddress)._sellerAddress(), msg.sender, tokenID);\n', '\n', '        //根据期望的token类型做转账处理\n', '        uint256 amount = Goods(goodsAddress)._expectedValue();\n', '\n', '        /* 卖家期望收获的是ETH */\n', '        if(TokenType.ETH ==  Goods(goodsAddress)._expectedTokenType() )\n', '        {\n', '            //转期望目标值的ETH\n', '            Goods(goodsAddress)._sellerAddress().transfer(amount);\n', '        }\n', '        /* 卖家期望收获的是ERC20的TOKEN */\n', '        else if(TokenType.ERC20 ==  Goods(goodsAddress)._expectedTokenType() )\n', '        {\n', '            //如果是使用ERC20 MOZIK购买，需要在调用该函数之前把等额的TOKEN授权给exchange合约\n', '            require(IERC20(_mozikErc20Address).allowance(msg.sender, address(this)) >= amount, \n', '                    "the approved MOZ ERC20 tokens to the contract address should greater than the _expectedValue." );\n', '                                \n', '            IERC20(_mozikErc20Address).transferFrom(msg.sender, Goods(goodsAddress)._sellerAddress(), amount);\n', '        }\n', '\n', '        //移除商品.需要再次销售的话，拥有者要重新sellNFT\n', '        _saleGoodsAddr[tokenID] = address(0x0);\n', '    }   \n', '\n', '    /**\n', '    * @dev getTokenAddress: 查看配置的2个合约地址\n', '        权限：任何人都可查看\n', '    * @return mozikNftAddress mozik ERC721 NFT token.\n', '    * @return mozikErc20Address mozik ERC20 FT token.\n', '    */\n', '    function getTokenAddress() external view returns (address, address){\n', '        return(_mozikNftAddress, _mozikErc20Address);\n', '    }    \n', '\n', '    /**\n', '    * @dev destroyContract: 销毁合约。通过该函数可以把该合约的ETH返回给owner\n', '        权限：任何人都可查看\n', '    */\n', '    function destroyContract() external onlyOwner {\n', '        //该合约如果持有的MOZIK ERC20全部转给owner;\n', '        uint256 amount = IERC20(_mozikErc20Address).balanceOf(address(this));\n', '        IERC20(_mozikErc20Address).transfer(owner(), amount);\n', '\n', '        //该合约如果持有的MOZIK ERC721全部转给owner\n', '        //一般不会发送。如果要实现该功能，需要改造MoizikERC721Token多，暂不动。\n', '            \n', '        //该合约如果持有的ETH全部转给owner\n', '        selfdestruct(payable(owner()));\n', '    } \n', '}']