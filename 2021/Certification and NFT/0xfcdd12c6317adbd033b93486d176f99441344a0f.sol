['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity =0.7.6;  \n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}      \n', '\n', '\n', '\n', '\n', '\n', 'abstract contract IWETH {\n', '    function allowance(address, address) public virtual view returns (uint256);\n', '\n', '    function balanceOf(address) public virtual view returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(\n', '        address,\n', '        address,\n', '        uint256\n', '    ) public virtual returns (bool);\n', '\n', '    function deposit() public payable virtual;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}      \n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}      \n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', 'library TokenUtils {\n', '    using SafeERC20 for IERC20;\n', '\n', '    address public constant WETH_ADDR = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant ETH_ADDR = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    function approveToken(\n', '        address _tokenAddr,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_tokenAddr == ETH_ADDR) return;\n', '\n', '        if (IERC20(_tokenAddr).allowance(address(this), _to) < _amount) {\n', '            IERC20(_tokenAddr).safeApprove(_to, _amount);\n', '        }\n', '    }\n', '\n', '    function pullTokensIfNeeded(\n', '        address _token,\n', '        address _from,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        // handle max uint amount\n', '        if (_amount == type(uint256).max) {\n', '            uint256 userAllowance = IERC20(_token).allowance(_from, address(this));\n', '            uint256 balance = getBalance(_token, _from);\n', '\n', '            // pull max allowance amount if balance is bigger than allowance\n', '            _amount = (balance > userAllowance) ? userAllowance : balance;\n', '        }\n', '\n', '        if (_from != address(0) && _from != address(this) && _token != ETH_ADDR && _amount != 0) {\n', '            IERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function withdrawTokens(\n', '        address _token,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal returns (uint256) {\n', '        if (_amount == type(uint256).max) {\n', '            _amount = getBalance(_token, address(this));\n', '        }\n', '\n', '        if (_to != address(0) && _to != address(this) && _amount != 0) {\n', '            if (_token != ETH_ADDR) {\n', '                IERC20(_token).safeTransfer(_to, _amount);\n', '            } else {\n', '                payable(_to).transfer(_amount);\n', '            }\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    function depositWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).deposit{value: _amount}();\n', '    }\n', '\n', '    function withdrawWeth(uint256 _amount) internal {\n', '        IWETH(WETH_ADDR).withdraw(_amount);\n', '    }\n', '\n', '    function getBalance(address _tokenAddr, address _acc) internal view returns (uint256) {\n', '        if (_tokenAddr == ETH_ADDR) {\n', '            return _acc.balance;\n', '        } else {\n', '            return IERC20(_tokenAddr).balanceOf(_acc);\n', '        }\n', '    }\n', '\n', '    function getTokenDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == ETH_ADDR) return 18;\n', '\n', '        return IERC20(_token).decimals();\n', '    }\n', '}      \n', '\n', '\n', '\n', '\n', '// Common interface for the Trove Manager.\n', 'interface ITroveManager {\n', '    \n', '    // --- Events ---\n', '\n', '    event BorrowerOperationsAddressChanged(address _newBorrowerOperationsAddress);\n', '    event PriceFeedAddressChanged(address _newPriceFeedAddress);\n', '    event LUSDTokenAddressChanged(address _newLUSDTokenAddress);\n', '    event ActivePoolAddressChanged(address _activePoolAddress);\n', '    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n', '    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n', '    event GasPoolAddressChanged(address _gasPoolAddress);\n', '    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n', '    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n', '    event LQTYTokenAddressChanged(address _lqtyTokenAddress);\n', '    event LQTYStakingAddressChanged(address _lqtyStakingAddress);\n', '\n', '    event Liquidation(uint _liquidatedDebt, uint _liquidatedColl, uint _collGasCompensation, uint _LUSDGasCompensation);\n', '    event Redemption(uint _attemptedLUSDAmount, uint _actualLUSDAmount, uint _ETHSent, uint _ETHFee);\n', '    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\n', '    event TroveLiquidated(address indexed _borrower, uint _debt, uint _coll, uint8 operation);\n', '    event BaseRateUpdated(uint _baseRate);\n', '    event LastFeeOpTimeUpdated(uint _lastFeeOpTime);\n', '    event TotalStakesUpdated(uint _newTotalStakes);\n', '    event SystemSnapshotsUpdated(uint _totalStakesSnapshot, uint _totalCollateralSnapshot);\n', '    event LTermsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n', '    event TroveSnapshotsUpdated(uint _L_ETH, uint _L_LUSDDebt);\n', '    event TroveIndexUpdated(address _borrower, uint _newIndex);\n', '\n', '    function getTroveOwnersCount() external view returns (uint);\n', '\n', '    function getTroveFromTroveOwnersArray(uint _index) external view returns (address);\n', '\n', '    function getNominalICR(address _borrower) external view returns (uint);\n', '    function getCurrentICR(address _borrower, uint _price) external view returns (uint);\n', '\n', '    function liquidate(address _borrower) external;\n', '\n', '    function liquidateTroves(uint _n) external;\n', '\n', '    function batchLiquidateTroves(address[] calldata _troveArray) external;\n', '\n', '    function redeemCollateral(\n', '        uint _LUSDAmount,\n', '        address _firstRedemptionHint,\n', '        address _upperPartialRedemptionHint,\n', '        address _lowerPartialRedemptionHint,\n', '        uint _partialRedemptionHintNICR,\n', '        uint _maxIterations,\n', '        uint _maxFee\n', '    ) external; \n', '\n', '    function updateStakeAndTotalStakes(address _borrower) external returns (uint);\n', '\n', '    function updateTroveRewardSnapshots(address _borrower) external;\n', '\n', '    function addTroveOwnerToArray(address _borrower) external returns (uint index);\n', '\n', '    function applyPendingRewards(address _borrower) external;\n', '\n', '    function getPendingETHReward(address _borrower) external view returns (uint);\n', '\n', '    function getPendingLUSDDebtReward(address _borrower) external view returns (uint);\n', '\n', '     function hasPendingRewards(address _borrower) external view returns (bool);\n', '\n', '    function getEntireDebtAndColl(address _borrower) external view returns (\n', '        uint debt, \n', '        uint coll, \n', '        uint pendingLUSDDebtReward, \n', '        uint pendingETHReward\n', '    );\n', '\n', '    function closeTrove(address _borrower) external;\n', '\n', '    function removeStake(address _borrower) external;\n', '\n', '    function getRedemptionRate() external view returns (uint);\n', '    function getRedemptionRateWithDecay() external view returns (uint);\n', '\n', '    function getRedemptionFeeWithDecay(uint _ETHDrawn) external view returns (uint);\n', '\n', '    function getBorrowingRate() external view returns (uint);\n', '    function getBorrowingRateWithDecay() external view returns (uint);\n', '\n', '    function getBorrowingFee(uint LUSDDebt) external view returns (uint);\n', '    function getBorrowingFeeWithDecay(uint _LUSDDebt) external view returns (uint);\n', '\n', '    function decayBaseRateFromBorrowing() external;\n', '\n', '    function getTroveStatus(address _borrower) external view returns (uint);\n', '    \n', '    function getTroveStake(address _borrower) external view returns (uint);\n', '\n', '    function getTroveDebt(address _borrower) external view returns (uint);\n', '\n', '    function getTroveColl(address _borrower) external view returns (uint);\n', '\n', '    function setTroveStatus(address _borrower, uint num) external;\n', '\n', '    function increaseTroveColl(address _borrower, uint _collIncrease) external returns (uint);\n', '\n', '    function decreaseTroveColl(address _borrower, uint _collDecrease) external returns (uint); \n', '\n', '    function increaseTroveDebt(address _borrower, uint _debtIncrease) external returns (uint); \n', '\n', '    function decreaseTroveDebt(address _borrower, uint _collDecrease) external returns (uint); \n', '\n', '    function getTCR(uint _price) external view returns (uint);\n', '\n', '    function checkRecoveryMode(uint _price) external view returns (bool);\n', '}      \n', '\n', '\n', '\n', '// Common interface for the Trove Manager.\n', 'interface IBorrowerOperations {\n', '\n', '    // --- Events ---\n', '\n', '    event TroveManagerAddressChanged(address _newTroveManagerAddress);\n', '    event ActivePoolAddressChanged(address _activePoolAddress);\n', '    event DefaultPoolAddressChanged(address _defaultPoolAddress);\n', '    event StabilityPoolAddressChanged(address _stabilityPoolAddress);\n', '    event GasPoolAddressChanged(address _gasPoolAddress);\n', '    event CollSurplusPoolAddressChanged(address _collSurplusPoolAddress);\n', '    event PriceFeedAddressChanged(address  _newPriceFeedAddress);\n', '    event SortedTrovesAddressChanged(address _sortedTrovesAddress);\n', '    event LUSDTokenAddressChanged(address _lusdTokenAddress);\n', '    event LQTYStakingAddressChanged(address _lqtyStakingAddress);\n', '\n', '    event TroveCreated(address indexed _borrower, uint arrayIndex);\n', '    event TroveUpdated(address indexed _borrower, uint _debt, uint _coll, uint stake, uint8 operation);\n', '    event LUSDBorrowingFeePaid(address indexed _borrower, uint _LUSDFee);\n', '\n', '    // --- Functions ---\n', '\n', '    function openTrove(uint _maxFee, uint _LUSDAmount, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function addColl(address _upperHint, address _lowerHint) external payable;\n', '\n', '    function moveETHGainToTrove(address _user, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function withdrawColl(uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function withdrawLUSD(uint _maxFee, uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function repayLUSD(uint _amount, address _upperHint, address _lowerHint) external;\n', '\n', '    function closeTrove() external;\n', '\n', '    function adjustTrove(uint _maxFee, uint _collWithdrawal, uint _debtChange, bool isDebtIncrease, address _upperHint, address _lowerHint) external payable;\n', '\n', '    function claimCollateral() external;\n', '\n', '    function getCompositeDebt(uint _debt) external pure returns (uint);\n', '}      \n', '\n', '\n', '\n', 'interface IPriceFeed {\n', '    function lastGoodPrice() external pure returns (uint256);\n', '}      \n', '\n', '\n', '\n', 'interface IHintHelpers {\n', '\n', '    function getRedemptionHints(\n', '        uint _LUSDamount, \n', '        uint _price,\n', '        uint _maxIterations\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            address firstRedemptionHint,\n', '            uint partialRedemptionHintNICR,\n', '            uint truncatedLUSDamount\n', '        );\n', '\n', '    function getApproxHint(uint _CR, uint _numTrials, uint _inputRandomSeed)\n', '        external\n', '        view\n', '        returns (address hintAddress, uint diff, uint latestRandomSeed);\n', '\n', '    function computeNominalCR(uint _coll, uint _debt) external pure returns (uint);\n', '\n', '    function computeCR(uint _coll, uint _debt, uint _price) external pure returns (uint);\n', '}      \n', '\n', '\n', '\n', '// Common interface for the SortedTroves Doubly Linked List.\n', 'interface ISortedTroves {\n', '\n', '    // --- Events ---\n', '    \n', '    event SortedTrovesAddressChanged(address _sortedDoublyLLAddress);\n', '    event BorrowerOperationsAddressChanged(address _borrowerOperationsAddress);\n', '    event NodeAdded(address _id, uint _NICR);\n', '    event NodeRemoved(address _id);\n', '\n', '    // --- Functions ---\n', '    \n', '    function setParams(uint256 _size, address _TroveManagerAddress, address _borrowerOperationsAddress) external;\n', '\n', '    function insert(address _id, uint256 _ICR, address _prevId, address _nextId) external;\n', '\n', '    function remove(address _id) external;\n', '\n', '    function reInsert(address _id, uint256 _newICR, address _prevId, address _nextId) external;\n', '\n', '    function contains(address _id) external view returns (bool);\n', '\n', '    function isFull() external view returns (bool);\n', '\n', '    function isEmpty() external view returns (bool);\n', '\n', '    function getSize() external view returns (uint256);\n', '\n', '    function getMaxSize() external view returns (uint256);\n', '\n', '    function getFirst() external view returns (address);\n', '\n', '    function getLast() external view returns (address);\n', '\n', '    function getNext(address _id) external view returns (address);\n', '\n', '    function getPrev(address _id) external view returns (address);\n', '\n', '    function validInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (bool);\n', '\n', '    function findInsertPosition(uint256 _ICR, address _prevId, address _nextId) external view returns (address, address);\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquityHelper {\n', '    address constant public LUSDTokenAddr = 0x5f98805A4E8be255a32880FDeC7F6728C6568bA0;\n', '    address constant public PriceFeedAddr = 0x4c517D4e2C851CA76d7eC94B805269Df0f2201De;\n', '    address constant public BorrowerOperationsAddr = 0x24179CD81c9e782A4096035f7eC97fB8B783e007;\n', '    address constant public TroveManagerAddr = 0xA39739EF8b0231DbFA0DcdA07d7e29faAbCf4bb2;\n', '    address constant public SortedTrovesAddr = 0x8FdD3fbFEb32b28fb73555518f8b361bCeA741A6;\n', '    address constant public HintHelpersAddr = 0xE84251b93D9524E0d2e621Ba7dc7cb3579F997C0;\n', '\n', '    IPriceFeed constant public PriceFeed = IPriceFeed(PriceFeedAddr);\n', '    IBorrowerOperations constant public BorrowerOperations = IBorrowerOperations(BorrowerOperationsAddr);\n', '    ITroveManager constant public TroveManager = ITroveManager(TroveManagerAddr);\n', '    ISortedTroves constant public SortedTroves = ISortedTroves(SortedTrovesAddr);\n', '    IHintHelpers constant public HintHelpers = IHintHelpers(HintHelpersAddr);\n', '}      \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract LiquityView is LiquityHelper {\n', '    using TokenUtils for address;\n', '    using SafeMath for uint256;\n', '\n', '    enum LiquityActionId {Open, Borrow, Payback, Supply, Withdraw}\n', '\n', '    function isRecoveryMode() public view returns (bool) {\n', '        uint256 price = PriceFeed.lastGoodPrice();\n', '        return TroveManager.checkRecoveryMode(price);\n', '    }\n', '\n', '    function computeNICR(uint256 _coll, uint256 _debt) public pure returns (uint256) {\n', '        if (_debt > 0) {\n', '            return _coll.mul(1e20).div(_debt);\n', '        }\n', '        // Return the maximal value for uint256 if the Trove has a debt of 0. Represents "infinite" CR.\n', '        else {\n', '            // if (_debt == 0)\n', '            return 2**256 - 1;\n', '        }\n', '    }\n', '\n', '    /// @notice Predict the resulting nominal collateral ratio after a trove modifying action\n', '    /// @param _troveOwner Address of the trove owner, if the action specified is LiquityOpen this argument is ignored\n', '    /// @param _action LiquityActionIds\n', '    function predictNICR(\n', '        address _troveOwner,\n', '        LiquityActionId _action,\n', '        address _from,\n', '        uint256 _collAmount,\n', '        uint256 _lusdAmount\n', '    ) external view returns (uint256 NICR) {\n', '        //  LiquityOpen\n', '        if (_action == LiquityActionId.Open) {\n', '            if (!isRecoveryMode())\n', '                _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));\n', '            _lusdAmount = BorrowerOperations.getCompositeDebt(_lusdAmount);\n', '\n', '            if (_collAmount == type(uint256).max)\n', '                _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);\n', '\n', '            return computeNICR(_collAmount, _lusdAmount);\n', '        }\n', '\n', '        (uint256 debt, uint256 coll, , ) = TroveManager.getEntireDebtAndColl(_troveOwner);\n', '\n', '        //  LiquityBorrow\n', '        if (_action == LiquityActionId.Borrow) {\n', '            if (!isRecoveryMode())\n', '                _lusdAmount = _lusdAmount.add(TroveManager.getBorrowingFeeWithDecay(_lusdAmount));\n', '            return computeNICR(coll, debt.add(_lusdAmount));\n', '        }\n', '\n', '        //  LiquityPayback\n', '        if (_action == LiquityActionId.Payback) {\n', '            return computeNICR(coll, debt.sub(_lusdAmount));\n', '        }\n', '\n', '        //  LiquitySupply\n', '        if (_action == LiquityActionId.Supply) {\n', '            if (_collAmount == type(uint256).max)\n', '                _collAmount = TokenUtils.WETH_ADDR.getBalance(_from);\n', '\n', '            return computeNICR(coll.add(_collAmount), debt);\n', '        }\n', '\n', '        //  LiquityWithdraw\n', '        if (_action == LiquityActionId.Withdraw) {\n', '            return computeNICR(coll.sub(_collAmount), debt);\n', '        }\n', '    }\n', '\n', '    function getApproxHint(\n', '        uint256 _CR,\n', '        uint256 _numTrials,\n', '        uint256 _inputRandomSeed\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            address hintAddress,\n', '            uint256 diff,\n', '            uint256 latestRandomSeed\n', '        )\n', '    {\n', '        return HintHelpers.getApproxHint(_CR, _numTrials, _inputRandomSeed);\n', '    }\n', '\n', '    function findInsertPosition(\n', '        uint256 _ICR,\n', '        address _prevId,\n', '        address _nextId\n', '    ) external view returns (address upperHint, address lowerHint) {\n', '        return SortedTroves.findInsertPosition(_ICR, _prevId, _nextId);\n', '    }\n', '\n', '    function getTroveInfo(address _troveOwner)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 troveStatus,\n', '            uint256 collAmount,\n', '            uint256 debtAmount,\n', '            uint256 collPrice,\n', '            uint256 TCRatio,\n', '            bool recoveryMode\n', '        )\n', '    {\n', '        troveStatus = TroveManager.getTroveStatus(_troveOwner);\n', '        if (troveStatus == 1) {\n', '            collAmount = TroveManager.getTroveColl(_troveOwner);\n', '            debtAmount = TroveManager.getTroveDebt(_troveOwner);\n', '            collPrice = PriceFeed.lastGoodPrice();\n', '            TCRatio = TroveManager.getTCR(collPrice);\n', '            recoveryMode = TroveManager.checkRecoveryMode(collPrice);\n', '        }\n', '    }\n', '\n', '    function getInsertPosition(\n', '        uint256 _collAmount,\n', '        uint256 _debtAmount,\n', '        uint256 _numTrials,\n', '        uint256 _inputRandomSeed\n', '    ) external view returns (address upperHint, address lowerHint) {\n', '        uint256 NICR = _collAmount.mul(1e20).div(_debtAmount);\n', '        (address hintAddress, , ) = HintHelpers.getApproxHint(NICR, _numTrials, _inputRandomSeed);\n', '        (upperHint, lowerHint) = SortedTroves.findInsertPosition(NICR, hintAddress, hintAddress);\n', '    }\n', '}']