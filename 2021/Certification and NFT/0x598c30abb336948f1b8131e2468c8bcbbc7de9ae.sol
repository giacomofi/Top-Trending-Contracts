['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.12;\n', '\n', 'interface IERC20 {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'interface IGraSwapBlackList {\n', '    // event OwnerChanged(address);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event AddedBlackLists(address[]);\n', '    event RemovedBlackLists(address[]);\n', '\n', '    function owner()external view returns (address);\n', '    // function newOwner()external view returns (address);\n', '    function isBlackListed(address)external view returns (bool);\n', '\n', '    // function changeOwner(address ownerToSet) external;\n', '    // function updateOwner() external;\n', '    function transferOwnership(address newOwner) external;\n', '    function addBlackLists(address[] calldata  accounts)external;\n', '    function removeBlackLists(address[] calldata  accounts)external;\n', '}\n', '\n', 'interface IGraWhiteList {\n', '    event AppendWhiter(address adder);\n', '    event RemoveWhiter(address remover);\n', '    \n', '    function appendWhiter(address account) external;\n', '    function removeWhiter(address account) external;\n', '    function isWhiter(address account) external;\n', '    function isNotWhiter(address account) external;\n', '}\n', '\n', 'interface IGraSwapToken is IERC20, IGraSwapBlackList{\n', '    function burn(uint256 amount) external;\n', '    function burnFrom(address account, uint256 amount) external;\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '    // function multiTransfer(uint256[] calldata mixedAddrVal) external returns (bool);\n', '    function batchTransfer(address[] memory addressList, uint256[] memory amountList) external returns (bool);\n', '}\n', '\n', 'interface IGraSwapGov {\n', '    event NewFundsProposal  (uint64 proposalID, string title, string desc, string url, uint32 deadline, address beneficiary, uint256 amount);\n', '    event NewParamProposal  (uint64 proposalID, string title, string desc, string url, uint32 deadline, address factory, uint32 feeBPS);\n', '    event NewUpgradeProposal(uint64 proposalID, string title, string desc, string url, uint32 deadline, address factory, address pairLogic);\n', '    event NewTextProposal   (uint64 proposalID, string title, string desc, string url, uint32 deadline);\n', '    event NewVote(uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\n', '    event AddVote(uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\n', '    event Revote (uint64 proposalID, address voter, uint8 opinion, uint112 voteAmt);\n', '    event TallyResult(uint64 proposalID, bool pass);\n', '\n', '    function graContract() external pure returns (address);\n', '    function proposalInfo() external view returns (\n', '            uint24 id, address proposer, uint8 _type, uint32 deadline, address addr, uint256 value,\n', '            uint112 totalYes, uint112 totalNo, uint112 totalDeposit);\n', '    function voterInfo(address voter) external view returns (\n', '            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt);\n', '\n', '    function submitFundsProposal  (string calldata title, string calldata desc, string calldata url, address beneficiary, uint256 fundsAmt, uint112 voteAmt) external;\n', '    function submitParamProposal  (string calldata title, string calldata desc, string calldata url, address factory, uint32 feeBPS, uint112 voteAmt) external;\n', '    function submitUpgradeProposal(string calldata title, string calldata desc, string calldata url, address factory, address pairLogic, uint112 voteAmt) external;\n', '    function submitTextProposal   (string calldata title, string calldata desc, string calldata url, uint112 voteAmt) external;\n', '    function vote(uint8 opinion, uint112 voteAmt) external;\n', '    function tally() external;\n', '    function withdrawGras(uint112 amt) external;\n', '}\n', '\n', 'interface IGraSwapFactory {\n', '    event PairCreated(address indexed pair, address stock, address money, bool isOnlySwap);\n', '\n', '    function createPair(address stock, address money, bool isOnlySwap) external returns (address pair);\n', '    function setFeeToAddresses(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setFeeBPS(uint32 bps) external;\n', '    function setPairLogic(address implLogic) external;\n', '\n', '    function allPairsLength() external view returns (uint);\n', '    function feeTo_1() external view returns (address);\n', '    function feeTo_2() external view returns (address);\n', '    function feeToPrivate() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function feeBPS() external view returns (uint32);\n', '    function pairLogic() external returns (address);\n', '    function getTokensFromPair(address pair) external view returns (address stock, address money);\n', '    function tokensToPair(address stock, address money, bool isOnlySwap) external view returns (address pair);\n', '}\n', '\n', 'contract GraSwapGov is IGraSwapGov {\n', '\n', '    struct VoterInfo {\n', '        uint24  votedProposal;\n', '        uint8   votedOpinion;\n', '        uint112 votedAmt;     // enouth to store GraS\n', '        uint112 depositedAmt; // enouth to store GraS\n', '    }\n', '\n', '    uint8   private constant _PROPOSAL_TYPE_FUNDS   = 1; // ask for funds\n', '    uint8   private constant _PROPOSAL_TYPE_PARAM   = 2; // change factory.feeBPS\n', '    uint8   private constant _PROPOSAL_TYPE_UPGRADE = 3; // change factory.pairLogic\n', '    uint8   private constant _PROPOSAL_TYPE_TEXT    = 4; // pure text proposal\n', '    uint8   private constant _YES = 1;\n', '    uint8   private constant _NO  = 2;\n', '    uint32  private constant _MIN_FEE_BPS = 0;\n', '    uint32  private constant _MAX_FEE_BPS = 50;\n', '    uint256 private constant _MAX_FUNDS_REQUEST = 5000000; // 5000000 GraS\n', '    uint256 private constant _FAILED_PROPOSAL_COST = 1000; //    1000 GraS\n', '    uint256 private constant _SUBMIT_GraS_PERCENT = 1; // 0.1%\n', '    uint256 private constant _VOTE_PERIOD = 3 days;\n', '    uint256 private constant _TEXT_PROPOSAL_INTERVAL = 1 days;\n', '\n', '    address public  immutable override graContract;\n', '    uint256 private immutable _maxFundsRequest;    // 5000000 GraS\n', '    uint256 private immutable _failedProposalCost; //    1000 GraS\n', '\n', '    uint24  private _proposalID;\n', '    uint8   private _proposalType; // FUNDS            | PARAM        | UPGRADE            | TEXT\n', '    uint32  private _deadline;     // unix timestamp   | same         | same               | same\n', '    address private _addr;         // beneficiary addr | factory addr | factory addr       | not used\n', '    uint256 private _value;        // amount of funds  | feeBPS       | pair logic address | not used\n', '    address private _proposer;\n', '    uint112 private _totalYes;\n', '    uint112 private _totalNo;\n', '    uint112 private _totalDeposit;\n', '    mapping (address => VoterInfo) private _voters;\n', '\n', '    constructor(address _graContract) public {\n', '        graContract = _graContract;\n', '        uint256 GrasDec = IERC20(_graContract).decimals();\n', '        _maxFundsRequest = _MAX_FUNDS_REQUEST * (10 ** GrasDec);\n', '        _failedProposalCost = _FAILED_PROPOSAL_COST * (10 ** GrasDec);\n', '    }\n', '\n', '    function proposalInfo() external view override returns (\n', '            uint24 id, address proposer, uint8 _type, uint32 deadline, address addr, uint256 value,\n', '            uint112 totalYes, uint112 totalNo, uint112 totalDeposit) {\n', '        id           = _proposalID;\n', '        proposer     = _proposer;\n', '        _type        = _proposalType;\n', '        deadline     = _deadline;\n', '        value        = _value;\n', '        addr         = _addr;\n', '        totalYes     = _totalYes;\n', '        totalNo      = _totalNo;\n', '        totalDeposit = _totalDeposit;\n', '    }\n', '    function voterInfo(address voter) external view override returns (\n', '            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) {\n', '        VoterInfo memory info = _voters[voter];\n', '        votedProposalID = info.votedProposal;\n', '        votedOpinion    = info.votedOpinion;\n', '        votedAmt        = info.votedAmt;\n', '        depositedAmt    = info.depositedAmt;\n', '    }\n', '\n', '    // submit new proposals\n', '    function submitFundsProposal(string calldata title, string calldata desc, string calldata url,\n', '            address beneficiary, uint256 fundsAmt, uint112 voteAmt) external override {\n', '        if (fundsAmt > 0) {\n', '            require(fundsAmt <= _maxFundsRequest, "GraSwapGov: ASK_TOO_MANY_FUNDS");\n', '            uint256 govGras = IERC20(graContract).balanceOf(address(this));\n', '            uint256 availableGras = govGras - _totalDeposit;\n', '            require(govGras > _totalDeposit && availableGras >= fundsAmt,\n', '                "GraSwapGov: INSUFFICIENT_FUNDS");\n', '        }\n', '        _newProposal(_PROPOSAL_TYPE_FUNDS, beneficiary, fundsAmt, voteAmt);\n', '        emit NewFundsProposal(_proposalID, title, desc, url, _deadline, beneficiary, fundsAmt);\n', '        _vote(_YES, voteAmt);\n', '    }\n', '    function submitParamProposal(string calldata title, string calldata desc, string calldata url,\n', '            address factory, uint32 feeBPS, uint112 voteAmt) external override {\n', '        require(feeBPS >= _MIN_FEE_BPS && feeBPS <= _MAX_FEE_BPS, "GraSwapGov: INVALID_FEE_BPS");\n', '        _newProposal(_PROPOSAL_TYPE_PARAM, factory, feeBPS, voteAmt);\n', '        emit NewParamProposal(_proposalID, title, desc, url, _deadline, factory, feeBPS);\n', '        _vote(_YES, voteAmt);\n', '    }\n', '    function submitUpgradeProposal(string calldata title, string calldata desc, string calldata url,\n', '            address factory, address pairLogic, uint112 voteAmt) external override {\n', '        require(pairLogic != address(0), "GraSwapGov: INVALID_PAIR_LOGIC");\n', '        _newProposal(_PROPOSAL_TYPE_UPGRADE, factory, uint256(pairLogic), voteAmt);\n', '        emit NewUpgradeProposal(_proposalID, title, desc, url, _deadline, factory, pairLogic);\n', '        _vote(_YES, voteAmt);\n', '    }\n', '    function submitTextProposal(string calldata title, string calldata desc, string calldata url,\n', '            uint112 voteAmt) external override {\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(uint256(_deadline) + _TEXT_PROPOSAL_INTERVAL < block.timestamp,\n', '            "GraSwapGov: COOLING_DOWN");\n', '        _newProposal(_PROPOSAL_TYPE_TEXT, address(0), 0, voteAmt);\n', '        emit NewTextProposal(_proposalID, title, desc, url, _deadline);\n', '        _vote(_YES, voteAmt);\n', '    }\n', '\n', '    function _newProposal(uint8 _type, address addr, uint256 value, uint112 voteAmt) private {\n', '        require(_type >= _PROPOSAL_TYPE_FUNDS && _type <= _PROPOSAL_TYPE_TEXT,\n', '            "GraSwapGov: INVALID_PROPOSAL_TYPE");\n', '        require(_type == _PROPOSAL_TYPE_TEXT || msg.sender == IGraSwapToken(graContract).owner(),\n', '            "GraSwapGov: NOT_GraS_OWNER");\n', '        require(_proposalType == 0, "GraSwapGov: LAST_PROPOSAL_NOT_FINISHED");\n', '\n', '        uint256 totalGras = IERC20(graContract).totalSupply();\n', '        uint256 thresGras = (totalGras/1000) * _SUBMIT_GraS_PERCENT;\n', '        require(voteAmt >= thresGras, "GraSwapGov: VOTE_AMOUNT_TOO_LESS");\n', '\n', '        _proposalID++;\n', '        _proposalType = _type;\n', '        _proposer = msg.sender;\n', '        // solhint-disable-next-line not-rely-on-time\n', '        _deadline = uint32(block.timestamp + _VOTE_PERIOD);\n', '        _value = value;\n', '        _addr = addr;\n', '        _totalYes = 0;\n', '        _totalNo = 0;\n', '    }\n', ' \n', '    function vote(uint8 opinion, uint112 voteAmt) external override {\n', '        require(_proposalType > 0, "GraSwapGov: NO_PROPOSAL");\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(uint256(_deadline) > block.timestamp, "GraSwapGov: DEADLINE_REACHED");\n', '        _vote(opinion, voteAmt);\n', '    }\n', '\n', '    function _vote(uint8 opinion, uint112 addedVoteAmt) private {\n', '        require(_YES <= opinion && opinion <= _NO, "GraSwapGov: INVALID_OPINION");\n', '        require(addedVoteAmt > 0, "GraSwapGov: ZERO_VOTE_AMOUNT");\n', '\n', '        (uint24 currProposalID, uint24 votedProposalID,\n', '            uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) = _getVoterInfo();\n', '\n', '        // cancel previous votes if opinion changed\n', '        bool isRevote = false;\n', '        if ((votedProposalID == currProposalID) && (votedOpinion != opinion)) {\n', '            if (votedOpinion == _YES) {\n', '                assert(_totalYes >= votedAmt);\n', '                _totalYes -= votedAmt;\n', '            } else {\n', '                assert(_totalNo >= votedAmt);\n', '                _totalNo -= votedAmt;\n', '            }\n', '            votedAmt = 0;\n', '            isRevote = true;\n', '        }\n', '\n', '        // need to deposit more GraS?\n', '        assert(depositedAmt >= votedAmt);\n', '        if (addedVoteAmt > depositedAmt - votedAmt) {\n', '            uint112 moreDeposit = addedVoteAmt - (depositedAmt - votedAmt);\n', '            depositedAmt += moreDeposit;\n', '            _totalDeposit += moreDeposit;\n', '            IERC20(graContract).transferFrom(msg.sender, address(this), moreDeposit);\n', '        }\n', '\n', '        if (opinion == _YES) {\n', '            _totalYes += addedVoteAmt;\n', '        } else {\n', '            _totalNo += addedVoteAmt;\n', '        }\n', '        votedAmt += addedVoteAmt;\n', '        _setVoterInfo(currProposalID, opinion, votedAmt, depositedAmt);\n', ' \n', '        if (isRevote) {\n', '            emit Revote(currProposalID, msg.sender, opinion, addedVoteAmt);\n', '        } else if (votedAmt > addedVoteAmt) {\n', '            emit AddVote(currProposalID, msg.sender, opinion, addedVoteAmt);\n', '        } else {\n', '            emit NewVote(currProposalID, msg.sender, opinion, addedVoteAmt);\n', '        }\n', '    }\n', '    function _getVoterInfo() private view returns (uint24 currProposalID,\n', '            uint24 votedProposalID, uint8 votedOpinion, uint112 votedAmt, uint112 depositedAmt) {\n', '        currProposalID = _proposalID;\n', '        VoterInfo memory voter = _voters[msg.sender];\n', '        depositedAmt = voter.depositedAmt;\n', '        if (voter.votedProposal == currProposalID) {\n', '            votedProposalID = currProposalID;\n', '            votedOpinion = voter.votedOpinion;\n', '            votedAmt = voter.votedAmt;\n', '        }\n', '    }\n', '    function _setVoterInfo(uint24 proposalID,\n', '            uint8 opinion, uint112 votedAmt, uint112 depositedAmt) private {\n', '        _voters[msg.sender] = VoterInfo({\n', '            votedProposal: proposalID,\n', '            votedOpinion : opinion,\n', '            votedAmt     : votedAmt,\n', '            depositedAmt : depositedAmt\n', '        });\n', '    }\n', '\n', '    function tally() external override {\n', '        require(_proposalType > 0, "GraSwapGov: NO_PROPOSAL");\n', '        // solhint-disable-next-line not-rely-on-time\n', '        require(uint256(_deadline) <= block.timestamp, "GraSwapGov: STILL_VOTING");\n', '\n', '        bool ok = _totalYes > _totalNo;\n', '        uint8 _type = _proposalType;\n', '        uint256 val = _value;\n', '        address addr = _addr;\n', '        address proposer = _proposer;\n', '        _resetProposal();\n', '        if (ok) {\n', '            _execProposal(_type, addr, val);\n', '        } else {\n', '            _taxProposer(proposer);\n', '        }\n', '        emit TallyResult(_proposalID, ok);\n', '    }\n', '    function _resetProposal() private {\n', '        _proposalType = 0;\n', '     // _deadline     = 0; // use _deadline to check _TEXT_PROPOSAL_INTERVAL\n', '        _value        = 0;\n', '        _addr         = address(0);\n', '        _proposer     = address(0);\n', '        _totalYes     = 0;\n', '        _totalNo      = 0;\n', '    }\n', '    function _execProposal(uint8 _type, address addr, uint256 val) private {\n', '        if (_type == _PROPOSAL_TYPE_FUNDS) {\n', '            if (val > 0) {\n', '                IERC20(graContract).transfer(addr, val);\n', '            }\n', '        } else if (_type == _PROPOSAL_TYPE_PARAM) {\n', '            IGraSwapFactory(addr).setFeeBPS(uint32(val));\n', '        } else if (_type == _PROPOSAL_TYPE_UPGRADE) {\n', '            IGraSwapFactory(addr).setPairLogic(address(val));\n', '        }\n', '    }\n', '    function _taxProposer(address proposerAddr) private {\n', '        // burn 1000 GraS of proposer\n', '        uint112 cost = uint112(_failedProposalCost);\n', '\n', '        VoterInfo memory proposerInfo = _voters[proposerAddr];\n', '        if (proposerInfo.depositedAmt < cost) { // unreachable!\n', '            cost = proposerInfo.depositedAmt;\n', '        }\n', '\n', '        _totalDeposit -= cost;\n', '        proposerInfo.depositedAmt -= cost;\n', '        _voters[proposerAddr] = proposerInfo;\n', '\n', '        IGraSwapToken(graContract).burn(cost);\n', '    }\n', '\n', '    function withdrawGras(uint112 amt) external override {\n', '        VoterInfo memory voter = _voters[msg.sender];\n', '\n', '        require(_proposalType == 0 || voter.votedProposal < _proposalID, "GraSwapGov: IN_VOTING");\n', '        require(amt > 0 && amt <= voter.depositedAmt, "GraSwapGov: INVALID_WITHDRAW_AMOUNT");\n', '\n', '        _totalDeposit -= amt;\n', '        voter.depositedAmt -= amt;\n', '        if (voter.depositedAmt == 0) {\n', '            delete _voters[msg.sender];\n', '        } else {\n', '            _voters[msg.sender] = voter;\n', '        }\n', '        IERC20(graContract).transfer(msg.sender, amt);\n', '    }\n', '\n', '}']