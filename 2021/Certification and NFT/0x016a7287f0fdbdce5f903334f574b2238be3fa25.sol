['// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./IPolicyManager.sol";\n', '\n', '/// @title Policy Interface\n', '/// @author Enzyme Council <[email\xa0protected]>\n', 'interface IPolicy {\n', '    function activateForFund(address _comptrollerProxy, address _vaultProxy) external;\n', '\n', '    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings) external;\n', '\n', '    function identifier() external pure returns (string memory identifier_);\n', '\n', '    function implementedHooks()\n', '        external\n', '        view\n', '        returns (IPolicyManager.PolicyHook[] memory implementedHooks_);\n', '\n', '    function updateFundSettings(\n', '        address _comptrollerProxy,\n', '        address _vaultProxy,\n', '        bytes calldata _encodedSettings\n', '    ) external;\n', '\n', '    function validateRule(\n', '        address _comptrollerProxy,\n', '        address _vaultProxy,\n', '        IPolicyManager.PolicyHook _hook,\n', '        bytes calldata _encodedArgs\n', '    ) external returns (bool isValid_);\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/// @title PolicyManager Interface\n', '/// @author Enzyme Council <[email\xa0protected]>\n', '/// @notice Interface for the PolicyManager\n', 'interface IPolicyManager {\n', '    enum PolicyHook {\n', '        BuySharesSetup,\n', '        PreBuyShares,\n', '        PostBuyShares,\n', '        BuySharesCompleted,\n', '        PreCallOnIntegration,\n', '        PostCallOnIntegration\n', '    }\n', '\n', '    function validatePolicies(\n', '        address,\n', '        PolicyHook,\n', '        bytes calldata\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./utils/PreBuySharesValidatePolicyBase.sol";\n', '\n', '/// @title MinMaxInvestment Contract\n', '/// @author Enzyme Council <[email\xa0protected]>\n', "/// @notice A policy that restricts the amount of the fund's denomination asset that a user can\n", '/// send in a single call to buy shares in a fund\n', 'contract MinMaxInvestment is PreBuySharesValidatePolicyBase {\n', '    event FundSettingsSet(\n', '        address indexed comptrollerProxy,\n', '        uint256 minInvestmentAmount,\n', '        uint256 maxInvestmentAmount\n', '    );\n', '\n', '    struct FundSettings {\n', '        uint256 minInvestmentAmount;\n', '        uint256 maxInvestmentAmount;\n', '    }\n', '\n', '    mapping(address => FundSettings) private comptrollerProxyToFundSettings;\n', '\n', '    constructor(address _policyManager) public PolicyBase(_policyManager) {}\n', '\n', '    /// @notice Adds the initial policy settings for a fund\n', "    /// @param _comptrollerProxy The fund's ComptrollerProxy address\n", '    /// @param _encodedSettings Encoded settings to apply to a fund\n', '    function addFundSettings(address _comptrollerProxy, bytes calldata _encodedSettings)\n', '        external\n', '        override\n', '        onlyPolicyManager\n', '    {\n', '        __setFundSettings(_comptrollerProxy, _encodedSettings);\n', '    }\n', '\n', '    /// @notice Provides a constant string identifier for a policy\n', '    /// @return identifier_ The identifer string\n', '    function identifier() external pure override returns (string memory identifier_) {\n', '        return "MIN_MAX_INVESTMENT";\n', '    }\n', '\n', '    /// @notice Updates the policy settings for a fund\n', "    /// @param _comptrollerProxy The fund's ComptrollerProxy address\n", '    /// @param _encodedSettings Encoded settings to apply to a fund\n', '    function updateFundSettings(\n', '        address _comptrollerProxy,\n', '        address,\n', '        bytes calldata _encodedSettings\n', '    ) external override onlyPolicyManager {\n', '        __setFundSettings(_comptrollerProxy, _encodedSettings);\n', '    }\n', '\n', '    /// @notice Checks whether a particular condition passes the rule for a particular fund\n', "    /// @param _comptrollerProxy The fund's ComptrollerProxy address\n", '    /// @param _investmentAmount The investment amount for which to check the rule\n', '    /// @return isValid_ True if the rule passes\n', '    function passesRule(address _comptrollerProxy, uint256 _investmentAmount)\n', '        public\n', '        view\n', '        returns (bool isValid_)\n', '    {\n', '        uint256 minInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\n', '            .minInvestmentAmount;\n', '        uint256 maxInvestmentAmount = comptrollerProxyToFundSettings[_comptrollerProxy]\n', '            .maxInvestmentAmount;\n', '\n', '        // Both minInvestmentAmount and maxInvestmentAmount can be 0 in order to close the fund\n', '        // temporarily\n', '        if (minInvestmentAmount == 0) {\n', '            return _investmentAmount <= maxInvestmentAmount;\n', '        } else if (maxInvestmentAmount == 0) {\n', '            return _investmentAmount >= minInvestmentAmount;\n', '        }\n', '        return\n', '            _investmentAmount >= minInvestmentAmount && _investmentAmount <= maxInvestmentAmount;\n', '    }\n', '\n', '    /// @notice Apply the rule with the specified parameters of a PolicyHook\n', "    /// @param _comptrollerProxy The fund's ComptrollerProxy address\n", '    /// @param _encodedArgs Encoded args with which to validate the rule\n', '    /// @return isValid_ True if the rule passes\n', '    function validateRule(\n', '        address _comptrollerProxy,\n', '        address,\n', '        IPolicyManager.PolicyHook,\n', '        bytes calldata _encodedArgs\n', '    ) external override returns (bool isValid_) {\n', '        (, uint256 investmentAmount, , ) = __decodeRuleArgs(_encodedArgs);\n', '\n', '        return passesRule(_comptrollerProxy, investmentAmount);\n', '    }\n', '\n', '    /// @dev Helper to set the policy settings for a fund\n', "    /// @param _comptrollerProxy The fund's ComptrollerProxy address\n", '    /// @param _encodedSettings Encoded settings to apply to a fund\n', '    function __setFundSettings(address _comptrollerProxy, bytes memory _encodedSettings) private {\n', '        (uint256 minInvestmentAmount, uint256 maxInvestmentAmount) = abi.decode(\n', '            _encodedSettings,\n', '            (uint256, uint256)\n', '        );\n', '\n', '        require(\n', '            maxInvestmentAmount == 0 || minInvestmentAmount < maxInvestmentAmount,\n', '            "__setFundSettings: minInvestmentAmount must be less than maxInvestmentAmount"\n', '        );\n', '\n', '        comptrollerProxyToFundSettings[_comptrollerProxy]\n', '            .minInvestmentAmount = minInvestmentAmount;\n', '        comptrollerProxyToFundSettings[_comptrollerProxy]\n', '            .maxInvestmentAmount = maxInvestmentAmount;\n', '\n', '        emit FundSettingsSet(_comptrollerProxy, minInvestmentAmount, maxInvestmentAmount);\n', '    }\n', '\n', '    ///////////////////\n', '    // STATE GETTERS //\n', '    ///////////////////\n', '\n', '    /// @notice Gets the min and max investment amount for a given fund\n', '    /// @param _comptrollerProxy The ComptrollerProxy of the fund\n', '    /// @return fundSettings_ The fund settings\n', '    function getFundSettings(address _comptrollerProxy)\n', '        external\n', '        view\n', '        returns (FundSettings memory fundSettings_)\n', '    {\n', '        return comptrollerProxyToFundSettings[_comptrollerProxy];\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "../../utils/PolicyBase.sol";\n', '\n', '/// @title BuySharesPolicyMixin Contract\n', '/// @author Enzyme Council <[email\xa0protected]>\n', '/// @notice A mixin contract for policies that only implement the PreBuyShares policy hook\n', 'abstract contract PreBuySharesValidatePolicyBase is PolicyBase {\n', '    /// @notice Gets the implemented PolicyHooks for a policy\n', '    /// @return implementedHooks_ The implemented PolicyHooks\n', '    function implementedHooks()\n', '        external\n', '        view\n', '        override\n', '        returns (IPolicyManager.PolicyHook[] memory implementedHooks_)\n', '    {\n', '        implementedHooks_ = new IPolicyManager.PolicyHook[](1);\n', '        implementedHooks_[0] = IPolicyManager.PolicyHook.PreBuyShares;\n', '\n', '        return implementedHooks_;\n', '    }\n', '\n', '    /// @notice Helper to decode rule arguments\n', '    function __decodeRuleArgs(bytes memory _encodedArgs)\n', '        internal\n', '        pure\n', '        returns (\n', '            address buyer_,\n', '            uint256 investmentAmount_,\n', '            uint256 minSharesQuantity_,\n', '            uint256 gav_\n', '        )\n', '    {\n', '        return abi.decode(_encodedArgs, (address, uint256, uint256, uint256));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', '/*\n', '    This file is part of the Enzyme Protocol.\n', '\n', '    (c) Enzyme Council <[email\xa0protected]>\n', '\n', '    For the full license information, please view the LICENSE\n', '    file that was distributed with this source code.\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "../../IPolicy.sol";\n', '\n', '/// @title PolicyBase Contract\n', '/// @author Enzyme Council <[email\xa0protected]>\n', '/// @notice Abstract base contract for all policies\n', 'abstract contract PolicyBase is IPolicy {\n', '    address internal immutable POLICY_MANAGER;\n', '\n', '    modifier onlyPolicyManager {\n', '        require(msg.sender == POLICY_MANAGER, "Only the PolicyManager can make this call");\n', '        _;\n', '    }\n', '\n', '    constructor(address _policyManager) public {\n', '        POLICY_MANAGER = _policyManager;\n', '    }\n', '\n', '    /// @notice Validates and initializes a policy as necessary prior to fund activation\n', '    /// @dev Unimplemented by default, can be overridden by the policy\n', '    function activateForFund(address, address) external virtual override {\n', '        return;\n', '    }\n', '\n', '    /// @notice Updates the policy settings for a fund\n', '    /// @dev Disallowed by default, can be overridden by the policy\n', '    function updateFundSettings(\n', '        address,\n', '        address,\n', '        bytes calldata\n', '    ) external virtual override {\n', '        revert("updateFundSettings: Updates not allowed for this policy");\n', '    }\n', '\n', '    ///////////////////\n', '    // STATE GETTERS //\n', '    ///////////////////\n', '\n', '    /// @notice Gets the `POLICY_MANAGER` variable value\n', '    /// @return policyManager_ The `POLICY_MANAGER` variable value\n', '    function getPolicyManager() external view returns (address policyManager_) {\n', '        return POLICY_MANAGER;\n', '    }\n', '}\n', '\n', '{\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "ipfs",\n', '    "useLiteralContent": true\n', '  },\n', '  "optimizer": {\n', '    "details": {\n', '      "constantOptimizer": true,\n', '      "cse": true,\n', '      "deduplicate": true,\n', '      "jumpdestRemover": true,\n', '      "orderLiterals": true,\n', '      "peephole": true,\n', '      "yul": false\n', '    },\n', '    "runs": 200\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']