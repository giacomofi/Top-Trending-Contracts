['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * \n', " * @dev We've added a second owner to share control of the timelocked owner contract.\n", ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '    address private _pendingOwner;\n', '    \n', '    // Second allows a DAO to share control.\n', '    address private _secondOwner;\n', '    address private _pendingSecond;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    event SecondOwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function initializeOwnable() internal {\n', '        require(_owner == address(0), "already initialized");\n', '        _owner = msg.sender;\n', '        _secondOwner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '        emit SecondOwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function secondOwner() public view returns (address) {\n', '        return _secondOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "msg.sender is not owner");\n', '        _;\n', '    }\n', '    \n', '    modifier onlyFirstOwner() {\n', '        require(msg.sender == _owner, "msg.sender is not owner");\n', '        _;\n', '    }\n', '    \n', '    modifier onlySecondOwner() {\n', '        require(msg.sender == _secondOwner, "msg.sender is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner || msg.sender == _secondOwner;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyFirstOwner {\n', '        _pendingOwner = newOwner;\n', '    }\n', '\n', '    function receiveOwnership() public {\n', '        require(msg.sender == _pendingOwner, "only pending owner can call this function");\n', '        _transferOwnership(_pendingOwner);\n', '        _pendingOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferSecondOwnership(address newOwner) public onlySecondOwner {\n', '        _pendingSecond = newOwner;\n', '    }\n', '\n', '    function receiveSecondOwnership() public {\n', '        require(msg.sender == _pendingSecond, "only pending owner can call this function");\n', '        _transferSecondOwnership(_pendingSecond);\n', '        _pendingSecond = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferSecondOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit SecondOwnershipTransferred(_secondOwner, newOwner);\n', '        _secondOwner = newOwner;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * IMPORTANT: It is unsafe to assume that an address for which this\n', '     * function returns false is an externally-owned account (EOA) and not a\n', '     * contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' * \n', ' * @dev Default OpenZeppelin\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '    \n', '    function burn(address from, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IWNXM {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address to, uint256 amount) external returns (bool);\n', '    \n', '    function burn(address from, uint256 amount) external returns (bool);\n', '\n', '    function wrap(uint256 amount) external;\n', '    \n', '    function unwrap(uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', '/**\n', ' * @dev Quick interface for the Nexus Mutual contract to work with the Armor Contracts.\n', ' **/\n', '\n', '// to get nexus mutual contract address\n', 'interface INxmMaster {\n', '    function tokenAddress() external view returns(address);\n', '    function owner() external view returns(address);\n', '    function pauseTime() external view returns(uint);\n', '    function masterInitialized() external view returns(bool);\n', '    function isPause() external view returns(bool check);\n', '    function isMember(address _add) external view returns(bool);\n', '    function getLatestAddress(bytes2 _contractName) external view returns(address payable contractAddress);\n', '}\n', '\n', 'interface IPooledStaking {\n', '    function lastUnstakeRequestId() external view returns(uint256);\n', '    function stakerDeposit(address user) external view returns (uint256);\n', '    function stakerMaxWithdrawable(address user) external view returns (uint256);\n', '    function withdrawReward(address user) external;\n', '    function requestUnstake(address[] calldata protocols, uint256[] calldata amounts, uint256 insertAfter) external;\n', '    function depositAndStake(uint256 deposit, address[] calldata protocols, uint256[] calldata amounts) external;\n', '    function stakerContractStake(address staker, address protocol) external view returns (uint256);\n', '    function stakerContractPendingUnstakeTotal(address staker, address protocol) external view returns(uint256);\n', '    function withdraw(uint256 amount) external;\n', '    function stakerReward(address staker) external view returns (uint256);\n', '}\n', '\n', 'interface IClaimsData {\n', '    function getClaimStatusNumber(uint256 claimId) external view returns (uint256, uint256);\n', '    function getClaimDateUpd(uint256 claimId) external view returns (uint256);\n', '}\n', '\n', 'interface INXMPool {\n', '    function buyNXM(uint minTokensOut) external payable;\n', '}\n', '\n', 'interface IRewardDistributionRecipient {\n', '    function notifyRewardAmount(uint256 reward) payable external;\n', '}\n', '\n', 'interface IRewardManager is IRewardDistributionRecipient {\n', '  function initialize(address _rewardToken, address _stakeController) external;\n', '  function stake(address _user, address _referral, uint256 _coverPrice) external;\n', '  function withdraw(address _user, address _referral, uint256 _coverPrice) external;\n', '  function getReward(address payable _user) external;\n', '}\n', '\n', 'interface IShieldMining {\n', '  function claimRewards(\n', '    address[] calldata stakedContracts,\n', '    address[] calldata sponsors,\n', '    address[] calldata tokenAddresses\n', '  ) external returns (uint[] memory tokensRewarded);\n', '}\n', '/**\n', ' * @title arNXM Vault\n', ' * @dev Vault to stake wNXM or NXM in Nexus Mutual while maintaining your liquidity.\n', ' *      This is V2 which replaces V1 behind a proxy. Updated variables at the bottom.\n', ' * @author Armor.fi -- Robert M.C. Forster, Taek Lee\n', ' * SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\n', '**/\n', 'contract arNXMVault is Ownable {\n', '    \n', '    using SafeMath for uint;\n', '    using SafeERC20 for IERC20;\n', '\n', '    uint256 constant private DENOMINATOR = 1000;\n', '    \n', '    // Amount of time between \n', '    uint256 public restakePeriod;\n', '    \n', '    // Amount of time that rewards are distributed over.\n', '    uint256 public rewardDuration;\n', '    \n', '    // This used to be unstake percent but has now been deprecated in favor of individual unstakes.\n', '    // Paranoia results in this not being replaced but rather deprecated and new variables placed at the bottom. \n', '    uint256 public ____deprecated____;\n', '    \n', '    // Amount of wNXM (in token Wei) to reserve each period.\n', '    // Overwrites reservePercent in update.\n', '    uint256 public reserveAmount;\n', '    \n', '    // Withdrawals may be paused if a hack has recently happened. Timestamp of when the pause happened.\n', '    uint256 public withdrawalsPaused;\n', '    \n', '    // Amount of time withdrawals may be paused after a hack.\n', '    uint256 public pauseDuration;\n', '    \n', '    // Address that will receive administration funds from the contract.\n', '    address public beneficiary;\n', '    \n', '    // Percent of funds to be distributed for administration of the contract. 10 == 1%; 1000 == 100%.\n', '    uint256 public adminPercent;\n', '    \n', '    // Percent of staking rewards that referrers get.\n', '    uint256 public referPercent;\n', '\n', '    // Timestamp of when the last restake took place--7 days between each.\n', '    uint256 public lastRestake;\n', '    \n', '    // The amount of the last reward.\n', '    uint256 public lastReward;\n', '    \n', '    // Uniswap, Maker, Compound, Aave, Curve, Synthetix, Yearn, RenVM, Balancer, dForce.\n', '    address[] public protocols;\n', '    \n', '    // Amount to unstake each time.\n', '    uint256[] private amounts;\n', '    \n', '    // Protocols being actively used in staking or unstaking.\n', '    address[] private activeProtocols;\n', '\n', '    struct WithdrawalRequest {\n', '        uint48 requestTime;\n', '        uint104 nAmount;\n', '        uint104 arAmount;\n', '    }\n', '\n', '    // Nxm tokens.\n', '    IERC20 public wNxm;\n', '    IERC20 public nxm;\n', '    IERC20 public arNxm;\n', '    \n', '    // Nxm Master address.\n', '    INxmMaster public nxmMaster;\n', '    \n', '    // Reward manager for referrers.\n', '    IRewardManager public rewardManager;\n', '    \n', '    // Referral => referrer\n', '    mapping (address => address) public referrers;\n', '\n', '    event Deposit(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);\n', '    event WithdrawRequested(address indexed user, uint256 arAmount, uint256 nAmount, uint256 requestTime, uint256 withdrawTime);\n', '    event Withdrawal(address indexed user, uint256 nAmount, uint256 arAmount, uint256 timestamp);\n', '    event Restake(uint256 withdrawn, uint256 unstaked, uint256 staked, uint256 totalAum, uint256 timestamp);\n', '    event NxmReward(uint256 reward, uint256 timestamp, uint256 totalAum);\n', '    \n', '    // Avoid composability issues for liquidation.\n', '    modifier notContract {\n', '        require(msg.sender == tx.origin, "Sender must be an EOA.");\n', '        _;\n', '    }\n', '    \n', '    // Functions as re-entrancy protection and more.\n', '    // Mapping down below with other update variables.\n', '    modifier oncePerTx {\n', '        require(block.timestamp > lastCall[tx.origin], "May only call this contract once per transaction.");\n', '        lastCall[tx.origin] = block.timestamp;\n', '        _;\n', '    }\n', '\n', '    /**\n', "     * @param _protocols List of the 10 protocols we're using.\n", '     * @param _wNxm Address of the wNxm contract.\n', '     * @param _arNxm Address of the arNxm contract.\n', "     * @param _nxmMaster Address of Nexus' master address (to fetch others).\n", '     * @param _rewardManager Address of the ReferralRewards smart contract.\n', '    **/\n', '    function initialize(address[] memory _protocols, \n', '                address _wNxm, \n', '                address _arNxm,\n', '                address _nxm,\n', '                address _nxmMaster,\n', '                address _rewardManager)\n', '      public\n', '    {\n', '        require(address(arNxm) == address(0), "Contract has already been initialized.");\n', '        \n', '        for (uint256 i = 0; i < _protocols.length; i++) protocols.push(_protocols[i]);\n', '        \n', '        Ownable.initializeOwnable();\n', '        wNxm = IERC20(_wNxm);\n', '        nxm = IERC20(_nxm);\n', '        arNxm = IERC20(_arNxm);\n', '        nxmMaster = INxmMaster(_nxmMaster);\n', '        rewardManager = IRewardManager(_rewardManager);\n', '        // unstakePercent = 100;\n', '        adminPercent = 0;\n', '        referPercent = 25;\n', '        reserveAmount = 30 ether;\n', '        pauseDuration = 10 days;\n', '        beneficiary = msg.sender;\n', '        restakePeriod = 3 days;\n', '        rewardDuration = 9 days;\n', '\n', '        // Approve to wrap and send funds to reward manager.\n', '        _approveNxm(_wNxm);\n', '        arNxm.approve( _rewardManager, uint256(-1) );\n', '    }\n', '    \n', '    /**\n', '     * @dev Deposit wNxm or NXM to get arNxm in return.\n', '     * @param _nAmount The amount of NXM to stake.\n', '     * @param _referrer The address that referred this user.\n', '     * @param _isNxm True if the token is NXM, false if the token is wNXM.\n', '    **/\n', '    function deposit(uint256 _nAmount, address _referrer, bool _isNxm)\n', '      external\n', '      oncePerTx\n', '    {\n', '        if ( referrers[msg.sender] == address(0) ) {\n', '            referrers[msg.sender] = _referrer != address(0) ? _referrer : beneficiary;\n', '            address refToSet = _referrer != address(0) ? _referrer : beneficiary;\n', '            referrers[msg.sender] = refToSet;\n', '\n', '            // A wallet with a previous arNXM balance would be able to subtract referral weight that it never added.\n', '            uint256 prevBal = arNxm.balanceOf(msg.sender);\n', '            if (prevBal > 0) rewardManager.stake(refToSet, msg.sender, prevBal); \n', '        }\n', '        \n', '        // This amount must be determined before arNxm mint.\n', '        uint256 arAmount = arNxmValue(_nAmount);\n', '\n', '        if (_isNxm) {\n', '            nxm.safeTransferFrom(msg.sender, address(this), _nAmount);\n', '        } else {\n', '            wNxm.safeTransferFrom(msg.sender, address(this), _nAmount);\n', '            _unwrapWnxm(_nAmount);\n', '        }\n', '\n', "        // Mint also increases sender's referral balance through alertTransfer.\n", '        arNxm.mint(msg.sender, arAmount);\n', '        \n', '        emit Deposit(msg.sender, _nAmount, arAmount, block.timestamp);\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw an amount of wNxm or NXM by burning arNxm.\n', '     * @param _arAmount The amount of arNxm to burn for the wNxm withdraw.\n', '     * @param _payFee Flag to pay fee to withdraw without delay.\n', '    **/\n', '    function withdraw(uint256 _arAmount, bool _payFee)\n', '      external\n', '      oncePerTx\n', '    {\n', '        require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.");\n', '\n', '        // This amount must be determined before arNxm burn.\n', '        uint256 nAmount = nxmValue(_arAmount);\n', '        require(totalPending.add(nAmount) <= nxm.balanceOf(address(this)), "Not enough NXM available for witthdrawal.");\n', '\n', '        if (_payFee) {\n', '            uint256 fee = nAmount.mul(withdrawFee).div(1000);\n', '            uint256 disbursement = nAmount.sub(fee);\n', '\n', "            // Burn also decreases sender's referral balance through alertTransfer.\n", '            arNxm.burn(msg.sender, _arAmount);\n', '            _wrapNxm(disbursement);\n', '            wNxm.safeTransfer(msg.sender, disbursement);\n', '            \n', '            emit Withdrawal(msg.sender, nAmount, _arAmount, block.timestamp);\n', '        } else {\n', '            totalPending = totalPending.add(nAmount);\n', '            arNxm.safeTransferFrom(msg.sender, address(this), _arAmount);\n', '            WithdrawalRequest memory prevWithdrawal = withdrawals[msg.sender];\n', '            withdrawals[msg.sender] = WithdrawalRequest(\n', '                                        uint48(block.timestamp), \n', '                                        prevWithdrawal.nAmount + uint104(nAmount), \n', '                                        prevWithdrawal.arAmount + uint104(_arAmount)\n', '                                      );\n', '\n', '            emit WithdrawRequested(msg.sender, _arAmount, nAmount, block.timestamp, block.timestamp.add(withdrawDelay));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw from request\n', '    **/\n', '    function withdrawFinalize()\n', '      external\n', '      oncePerTx\n', '    {\n', '        WithdrawalRequest memory withdrawal = withdrawals[msg.sender];\n', '        uint256 nAmount = uint256(withdrawal.nAmount);\n', '        uint256 arAmount = uint256(withdrawal.arAmount);\n', '        uint256 requestTime = uint256(withdrawal.requestTime);\n', '\n', '        require(block.timestamp.sub(withdrawalsPaused) > pauseDuration, "Withdrawals are temporarily paused.");\n', '        require(requestTime.add(withdrawDelay) <= block.timestamp, "Not ready to withdraw");\n', '        require(nAmount > 0, "No pending amount to withdraw");\n', '\n', "        // Burn also decreases sender's referral balance through alertTransfer.\n", '        arNxm.burn(address(this), arAmount);\n', '        _wrapNxm(nAmount);\n', '        wNxm.safeTransfer(msg.sender, nAmount);\n', '        delete withdrawals[msg.sender];\n', '        totalPending = totalPending.sub(nAmount);\n', '\n', '        emit Withdrawal(msg.sender, nAmount, arAmount, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Restake that may be called by anyone.\n', '     * @param _lastId Last unstake request ID on Nexus Mutual.\n', '    **/\n', '    function restake(uint256 _lastId)\n', '      external\n', '    {\n', '        // Check that this is only called once per week.\n', '        require(lastRestake.add(restakePeriod) <= block.timestamp, "It has not been enough time since the last restake.");\n', '        _restake(_lastId);\n', '    }\n', '\n', '    /**\n', '     * @dev Restake that may be called only by owner. Bypasses restake period restrictions.\n', '     * @param _lastId Last unstake request ID on Nexus Mutual.\n', '    **/\n', '    function ownerRestake(uint256 _lastId)\n', '      external\n', '      onlyOwner\n', '    {\n', '        _restake(_lastId);\n', '    }\n', '\n', '    /**\n', "     * @dev Restake is to be called weekly. It unstakes 7% of what's currently staked, then restakes.\n", "     * @param _lastId Frontend must submit last ID because it doesn't work direct from Nexus Mutual.\n", '    **/\n', '    function _restake(uint256 _lastId)\n', '      internal\n', '      notContract\n', '      oncePerTx\n', '    {   \n', '        // All Nexus functions.\n', '        uint256 withdrawn = _withdrawNxm();\n', '        // This will stake for all protocols, including unstaking protocols\n', '        uint256 staked = _stakeNxm();\n', '        // This will unstake from all unstaking protocols\n', '        uint256 unstaked = _unstakeNxm(_lastId);\n', '\n', '        startProtocol = startProtocol + bucketSize >= protocols.length ? 0 : startProtocol + bucketSize;\n', '        if (startProtocol < checkpointProtocol) startProtocol = checkpointProtocol;\n', '        lastRestake = block.timestamp;\n', '\n', '        emit Restake(withdrawn, unstaked, staked, aum(), block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Split off from restake() function to enable reward fetching at any time.\n', '    **/\n', '    function getRewardNxm() \n', '      external \n', '      notContract \n', '    {\n', '        uint256 prevAum = aum();\n', '        uint256 rewards = _getRewardsNxm();\n', '\n', '        if (rewards > 0) {\n', '            lastRewardTimestamp = block.timestamp;\n', '            emit NxmReward(rewards, block.timestamp, prevAum);\n', '        } else if(lastRewardTimestamp == 0) {\n', '            lastRewardTimestamp = block.timestamp;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev claim rewards from shield mining\n', '     * @param _shieldMining shield mining contract address\n', '     * @param _protocol Protocol funding the rewards.\n', '     * @param _sponsor sponsor address who funded the shield mining\n', '     * @param _token token address that sponsor is distributing\n', '    **/\n', '    function getShieldMiningRewards(address _shieldMining, address _protocol, address _sponsor, address _token) \n', '      external\n', '      notContract\n', '    {\n', '        address[] memory protocol = new address[](1);\n', '        protocol[0] = _protocol;\n', '        address[] memory sponsor = new address[](1);\n', '        sponsor[0] = _sponsor;\n', '        address[] memory token = new address[](1);\n', '        token[0] = _token;\n', '        IShieldMining(_shieldMining).claimRewards(protocol, sponsor, token);\n', '    }\n', '\n', '    /**\n', '     * @dev Find the arNxm value of a certain amount of wNxm.\n', '     * @param _nAmount The amount of NXM to check arNxm value of.\n', '     * @return arAmount The amount of arNxm the input amount of wNxm is worth.\n', '    **/\n', '    function arNxmValue(uint256 _nAmount)\n', '      public\n', '      view\n', '    returns (uint256 arAmount)\n', '    {\n', '        // Get reward allowed to be distributed.\n', '        uint256 reward = _currentReward();\n', '        \n', '        // aum() holds full reward so we sub lastReward (which needs to be distributed over time)\n', '        // and add reward that has been distributed\n', '        uint256 totalN = aum().add(reward).sub(lastReward);\n', '        uint256 totalAr = arNxm.totalSupply();\n', '        \n', '        // Find exchange amount of one token, then find exchange amount for full value.\n', '        if (totalN == 0) {\n', '            arAmount = _nAmount;\n', '        } else {\n', '            uint256 oneAmount = ( totalAr.mul(1e18) ).div(totalN);\n', '            arAmount = _nAmount.mul(oneAmount).div(1e18);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Find the wNxm value of a certain amount of arNxm.\n', '     * @param _arAmount The amount of arNxm to check wNxm value of.\n', '     * @return nAmount The amount of wNxm the input amount of arNxm is worth.\n', '    **/\n', '    function nxmValue(uint256 _arAmount)\n', '      public\n', '      view\n', '    returns (uint256 nAmount)\n', '    {\n', '        // Get reward allowed to be distributed.\n', '        uint256 reward = _currentReward();\n', '        \n', '        // aum() holds full reward so we sub lastReward (which needs to be distributed over time)\n', '        // and add reward that has been distributed\n', '        uint256 totalN = aum().add(reward).sub(lastReward);\n', '        uint256 totalAr = arNxm.totalSupply();\n', '        \n', '        // Find exchange amount of one token, then find exchange amount for full value.\n', '        uint256 oneAmount = ( totalN.mul(1e18) ).div(totalAr);\n', '        nAmount = _arAmount.mul(oneAmount).div(1e18);\n', '    }\n', '    \n', '    /**\n', '     * @dev Used to determine total Assets Under Management.\n', '     * @return aumTotal Full amount of assets under management (wNXM balance + stake deposit).\n', '    **/\n', '    function aum()\n', '      public\n', '      view\n', '    returns (uint256 aumTotal)\n', '    {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        uint256 balance = nxm.balanceOf( address(this) );\n', '        uint256 stakeDeposit = pool.stakerDeposit( address(this) );\n', '        aumTotal = balance.add(stakeDeposit);\n', '    }\n', '\n', '    /**\n', '     * @dev Used to determine staked nxm amount in pooled staking contract.\n', '     * @return staked Staked nxm amount.\n', '    **/\n', '    function stakedNxm()\n', '      public\n', '      view\n', '    returns (uint256 staked)\n', '    {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        staked = pool.stakerDeposit( address(this) );\n', '    }\n', '    \n', '    /**\n', '     * @dev Used to unwrap wnxm tokens to nxm\n', '    **/\n', '    function unwrapWnxm()\n', '      external\n', '    {\n', '        uint256 balance = wNxm.balanceOf(address(this));\n', '        _unwrapWnxm(balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev Used to determine distributed reward amount \n', '     * @return reward distributed reward amount\n', '    **/\n', '    function currentReward()\n', '      external\n', '      view\n', '    returns (uint256 reward)\n', '    {\n', '        reward = _currentReward();\n', '    }\n', '    \n', '    /**\n', '     * @dev Anyone may call this function to pause withdrawals for a certain amount of time.\n', '     *      We check Nexus contracts for a recent accepted claim, then can pause to avoid further withdrawals.\n', '     * @param _claimId The ID of the cover that has been accepted for a confirmed hack.\n', '    **/\n', '    function pauseWithdrawals(uint256 _claimId)\n', '      external\n', '    {\n', '        IClaimsData claimsData = IClaimsData( _getClaimsData() );\n', '        \n', '        (/*coverId*/, uint256 status) = claimsData.getClaimStatusNumber(_claimId);\n', '        uint256 dateUpdate = claimsData.getClaimDateUpd(_claimId);\n', '        \n', '        // Status must be 14 and date update must be within the past 7 days.\n', '        if (status == 14 && block.timestamp.sub(dateUpdate) <= 7 days) {\n', '            withdrawalsPaused = block.timestamp;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev When arNXM tokens are transferred, the referrer stakes must be adjusted on RewardManager.\n', '     *      This is taken care of by a "_beforeTokenTransfer" function on the arNXM ERC20.\n', '     * @param _from The user that tokens are being transferred from.\n', '     * @param _to The user that tokens are being transferred to.\n', '     * @param _amount The amount of tokens that are being transferred.\n', '    **/\n', '    function alertTransfer(address _from, address _to, uint256 _amount)\n', '      external\n', '    {\n', '        require(msg.sender == address(arNxm), "Sender must be the token contract.");\n', '        \n', '        // address(0) means the contract or EOA has not interacted directly with arNXM Vault.\n', '        if ( referrers[_from] != address(0) ) rewardManager.withdraw(referrers[_from], _from, _amount);\n', '        if ( referrers[_to] != address(0) ) rewardManager.stake(referrers[_to], _to, _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw any Nxm we can from the staking pool.\n', '     * @return amount The amount of funds that are being withdrawn.\n', '    **/\n', '    function _withdrawNxm()\n', '      internal\n', '      returns (uint256 amount)\n', '    {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        amount = pool.stakerMaxWithdrawable( address(this) );\n', '        pool.withdraw(amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Withdraw any available rewards from Nexus.\n', '     * @return finalReward The amount of rewards to be given to users (full reward - admin reward - referral reward).\n', '    **/\n', '    function _getRewardsNxm()\n', '      internal\n', '      returns (uint256 finalReward)\n', '    {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        \n', '        // Find current reward, find user reward (transfers reward to admin within this).\n', '        uint256 fullReward = pool.stakerReward( address(this) );\n', '        finalReward = _feeRewardsNxm(fullReward);\n', '        \n', '        pool.withdrawReward( address(this) );\n', '        lastReward = finalReward;\n', '    }\n', '    \n', '    /**\n', '     * @dev Find and distribute administrator rewards.\n', '     * @param reward Full reward given from this week.\n', '     * @return userReward Reward amount given to users (full reward - admin reward).\n', '    **/\n', '    function _feeRewardsNxm(uint256 reward)\n', '      internal\n', '    returns (uint256 userReward)\n', '    {\n', '        // Find both rewards before minting any.\n', '        uint256 adminReward = arNxmValue( reward.mul(adminPercent).div(DENOMINATOR) );\n', '        uint256 referReward = arNxmValue( reward.mul(referPercent).div(DENOMINATOR) );\n', '\n', '        // Mint to beneficary then this address (to then transfer to rewardManager).\n', '        if (adminReward > 0) {\n', '            arNxm.mint(beneficiary, adminReward);\n', '        }\n', '        if (referReward > 0) {\n', '            arNxm.mint(address(this), referReward);\n', '            rewardManager.notifyRewardAmount(referReward);\n', '        }\n', '        \n', '        userReward = reward.sub(adminReward).sub(referReward);\n', '    }\n', '\n', '    /**\n', '     * @dev Unstake an amount from each protocol on Nxm (takes 30 days to unstake).\n', '     * @param _lastId The ID of the last unstake request on Nexus Mutual (needed for unstaking).\n', "     * @return unstakeAmount The amount of each token that we're unstaking.\n", '    **/\n', '    function _unstakeNxm(uint256 _lastId)\n', '      internal\n', '    returns (uint256 unstakeAmount)\n', '    {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        uint256 start = startProtocol;\n', '        uint256 end = start + bucketSize > protocols.length ? protocols.length : start + bucketSize;\n', '\n', '        for (uint256 i = startProtocol; i < end; i++) {\n', '            uint256 unstakePercent = unstakePercents[i];\n', '            address unstakeProtocol = protocols[i];\n', '            uint256 stake = pool.stakerContractStake(address(this), unstakeProtocol);\n', '            \n', '            unstakeAmount = stake.mul(unstakePercent).div(DENOMINATOR);\n', '            uint256 trueUnstakeAmount = _protocolUnstakeable(unstakeProtocol, unstakeAmount);\n', '\n', "            // Can't unstake less than 20 NXM.\n", '            if (trueUnstakeAmount < 20 ether) continue;\n', '\n', '            amounts.push(trueUnstakeAmount);\n', '            activeProtocols.push(unstakeProtocol);\n', '        }\n', '        \n', '        pool.requestUnstake(activeProtocols, amounts, _lastId);\n', '        \n', '        delete amounts;\n', '        delete activeProtocols;\n', '    }\n', '\n', '    /**\n', "     * @dev Returns the amount we can unstake (if we can't unstake the full amount desired).\n", "     * @param _protocol The address of the protocol we're checking.\n", '     * @param _unstakeAmount Amount we want to unstake.\n', '     * @return The amount of funds that can be unstaked from this protocol if not the full amount desired.\n', '    **/\n', '    function _protocolUnstakeable(address _protocol, uint256 _unstakeAmount) \n', '      internal \n', '      view\n', '    returns (uint256) {\n', '        IPooledStaking pool = IPooledStaking( _getPool() );\n', '        uint256 stake = pool.stakerContractStake(address(this), _protocol);\n', '        uint256 requested = pool.stakerContractPendingUnstakeTotal(address(this), _protocol);\n', '\n', '        // Scenario in which all staked has already been requested to be unstaked.\n', '        if (requested >= stake) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 available = stake - requested;\n', '\n', '        return _unstakeAmount <= available ? _unstakeAmount : available;\n', '    }\n', '\n', '    function stakeNxmManual(address[] calldata _protocols, uint256[] calldata _stakeAmounts) external onlyOwner{\n', '        _stakeNxmManual(_protocols, _stakeAmounts);\n', '    }\n', '    \n', '    /**\n', '     * @dev Stake any wNxm over the amount we need to keep in reserve (bufferPercent% more than withdrawals last week).\n', '     * @param _protocols List of protocols to stake in (NOT list of all protocols).\n', '     * @param _stakeAmounts List of amounts to stake in each relevant protocol--this is only ADDITIONAL stake rather than full stake.\n', '     * @return toStake Amount of token that we will be staking.\n', '     **/\n', '    function _stakeNxmManual(address[] memory _protocols, uint256[] memory _stakeAmounts)\n', '      internal\n', '    returns (uint256 toStake)\n', '    {\n', '        _approveNxm(_getTokenController());\n', '        uint256 balance = nxm.balanceOf( address(this) );\n', '\n', '        // If we do need to restake funds...\n', '        if (reserveAmount.add(totalPending) < balance) {\n', '            IPooledStaking pool = IPooledStaking( _getPool() );\n', '\n', "            // Determine how much to stake. Can't stake less than 20 NXM.\n", '            toStake = balance.sub(reserveAmount.add(totalPending));\n', '            if (toStake < 20 ether) return 0;\n', '\n', '            for (uint256 i = 0; i < protocols.length; i++) {\n', '                address protocol = protocols[i];\n', '                uint256 stakeAmount = pool.stakerContractStake(address(this), protocol);\n', '\n', '                for (uint256 j = 0; j < _protocols.length; j++) {\n', '                    if (protocol == _protocols[j]){\n', '                        stakeAmount += _stakeAmounts[j];\n', '                        break;\n', '                    }\n', '                }\n', '                if (stakeAmount == 0) continue;\n', '\n', '                amounts.push(stakeAmount);\n', '                activeProtocols.push(protocol);\n', '            }\n', '\n', '            pool.depositAndStake(toStake, activeProtocols, amounts);\n', '            delete amounts;\n', '            delete activeProtocols;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Stake any Nxm over the amount we need to keep in reserve (bufferPercent% more than withdrawals last week).\n', '     * @return toStake Amount of token that we will be staking. \n', '    **/\n', '    function _stakeNxm()\n', '      internal\n', '    returns (uint256 toStake)\n', '    {\n', '        _approveNxm(_getTokenController());\n', '        uint256 balance = nxm.balanceOf( address(this) );\n', '\n', '        // If we do need to restake funds...\n', '        if (reserveAmount.add(totalPending) < balance) {\n', '            IPooledStaking pool = IPooledStaking( _getPool() );\n', '            \n', "            // Determine how much to stake. Can't stake less than 20 NXM.\n", '            toStake = balance.sub(reserveAmount.add(totalPending));\n', '            if (toStake < 20 ether) return 0;\n', '                        \n', '            uint256 startPos = startProtocol;\n', '            for (uint256 i = 0; i < protocols.length; i++) {\n', '                address protocol = protocols[i];\n', '\n', '                uint256 stake = pool.stakerContractStake(address(this), protocol);\n', '                uint256 stakeAmount = i >= startPos && i < startPos + bucketSize ? toStake.add(stake) : stake;\n', '                if (stakeAmount == 0) continue;\n', '\n', '                amounts.push(stakeAmount);\n', '                activeProtocols.push(protocol);\n', '            }\n', '\n', '            pool.depositAndStake(toStake, activeProtocols, amounts);\n', '            delete amounts;\n', '            delete activeProtocols;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Calculate what the current reward is. We stream this to arNxm value to avoid dumps.\n', '     * @return reward Amount of reward currently calculated into arNxm value.\n', '    **/\n', '    function _currentReward()\n', '      internal\n', '      view\n', '    returns (uint256 reward)\n', '    {\n', '        uint256 duration = rewardDuration;\n', '        uint256 timeElapsed = block.timestamp.sub(lastRewardTimestamp);\n', '        if(timeElapsed == 0){\n', '            return 0;\n', '        }\n', '        \n', "        // Full reward is added to the balance if it's been more than the disbursement duration.\n", '        if (timeElapsed >= duration) {\n', '            reward = lastReward;\n', '        // Otherwise, disburse amounts linearly over duration.\n', '        } else {\n', '            // 1e18 just for a buffer.\n', '            uint256 portion = ( duration.mul(1e18) ).div(timeElapsed);\n', '            reward = ( lastReward.mul(1e18) ).div(portion);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Wrap Nxm tokens to be able to be withdrawn as wNxm.\n', '    **/\n', '    function _wrapNxm(uint256 _amount)\n', '      internal\n', '    {\n', '        IWNXM(address(wNxm)).wrap(_amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Unwrap wNxm tokens to be able to be used within the Nexus Mutual system.\n', '     * @param _amount Amount of wNxm tokens to be unwrapped.\n', '    **/\n', '    function _unwrapWnxm(uint256 _amount)\n', '      internal\n', '    {\n', '        IWNXM(address(wNxm)).unwrap(_amount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Get current address of the Nexus staking pool.\n', '     * @return pool Address of the Nexus staking pool contract.\n', '    **/\n', '    function _getPool()\n', '      internal\n', '      view\n', '    returns (address pool)\n', '    {\n', '        pool = nxmMaster.getLatestAddress("PS");\n', '    }\n', '    \n', '    /**\n', '     * @dev Get the current NXM token controller (for NXM actions) from Nexus Mutual.\n', '     * @return controller Address of the token controller.\n', '    **/\n', '    function _getTokenController()\n', '      internal\n', '      view\n', '    returns(address controller)\n', '    {\n', '        controller = nxmMaster.getLatestAddress("TC");\n', '    }\n', '\n', '    /**\n', '     * @dev Get current address of the Nexus Claims Data contract.\n', '     * @return claimsData Address of the Nexus Claims Data contract.\n', '    **/\n', '    function _getClaimsData()\n', '      internal\n', '      view\n', '    returns (address claimsData)\n', '    {\n', '        claimsData = nxmMaster.getLatestAddress("CD");\n', '    }\n', '    \n', '    /**\n', '     * @dev Approve wNxm contract to be able to transferFrom Nxm from this contract.\n', '    **/\n', '    function _approveNxm(address _to)\n', '      internal\n', '    {\n', '        nxm.approve( _to, uint256(-1) );\n', '    }\n', '    \n', '    /**\n', '     * @dev Buy NXM direct from Nexus Mutual. Used by ExchangeManager.\n', '     * @param _minNxm Minimum amount of NXM tokens to receive in return for the Ether.\n', '    **/\n', '    function buyNxmWithEther(uint256 _minNxm)\n', '      external\n', '      payable\n', '    {\n', '        require(msg.sender == 0x1337DEF157EfdeF167a81B3baB95385Ce5A14477, "Sender must be ExchangeManager.");\n', '        INXMPool pool = INXMPool(nxmMaster.getLatestAddress("P1"));\n', '        pool.buyNXM{value:address(this).balance}(_minNxm);\n', '    }\n', '    \n', '    /**\n', '     * @dev rescue tokens locked in contract\n', '     * @param token address of token to withdraw\n', '     */\n', '    function rescueToken(address token) \n', '      external \n', '      onlyOwner \n', '    {\n', '        require(token != address(nxm) && token != address(wNxm) && token != address(arNxm), "Cannot rescue NXM-based tokens");\n', '        uint256 balance = IERC20(token).balanceOf(address(this));\n', '        IERC20(token).safeTransfer(msg.sender, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Owner may change how much of the AUM should be saved in reserve each period.\n', '     * @param _reserveAmount The amount of wNXM (in token Wei) to reserve each period.\n', '    **/\n', '    function changeReserveAmount(uint256 _reserveAmount)\n', '      external\n', '      onlyOwner\n', '    {\n', '        reserveAmount = _reserveAmount;\n', '    }\n', '    \n', '    /**\n', '     * @dev Owner can change the size of a bucket.\n', '     * @param _bucketSize The new amount of protocols to stake on each week.\n', '    **/\n', '    function changeBucketSize(uint256 _bucketSize)\n', '      external\n', '      onlyOwner\n', '    {\n', '        // 20 is somewhat arbitrary (max plus a bit in case max expands in the future).\n', '        require(_bucketSize <= 10 && _bucketSize <= protocols.length, "Bucket size is too large.");\n', '        bucketSize = _bucketSize;\n', '    }\n', '\n', '    /**\n', '     * @dev Owner can change checkpoint for where we want all rotations to start and the start of the upcoming rotation.\n', "     * @param _checkpointProtocol The protocol to begin rotations on if we don't want to stake or unstake on some.\n", '     * @param _startProtocol The protocol that the upcoming rotation will begin on.\n', '    **/\n', '    function changeCheckpointAndStart(uint256 _checkpointProtocol, uint256 _startProtocol)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_checkpointProtocol < protocols.length && _startProtocol < protocols.length, "Checkpoint or start is too high.");\n', '        checkpointProtocol = _checkpointProtocol;\n', '        startProtocol = _startProtocol;\n', '    }\n', '\n', '    /**\n', '     * @dev Owner may change the percent of insurance fees referrers receive.\n', '     * @param _referPercent The percent of fees referrers receive. 50 == 5%.\n', '    **/\n', '    function changeReferPercent(uint256 _referPercent)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_referPercent <= 500, "Cannot give referrer more than 50% of rewards.");\n', '        referPercent = _referPercent;\n', '    }\n', '    \n', '    /**\n', '     * @dev Owner may change the withdraw fee.\n', '     * @param _withdrawFee The fee of withdraw.\n', '    **/\n', '    function changeWithdrawFee(uint256 _withdrawFee)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_withdrawFee <= DENOMINATOR, "Cannot take more than 100% of withdraw");\n', '        withdrawFee = _withdrawFee;\n', '    }\n', '\n', '    /**\n', '     * @dev Owner may change the withdraw delay.\n', '     * @param _withdrawDelay Withdraw delay.\n', '    **/\n', '    function changeWithdrawDelay(uint256 _withdrawDelay)\n', '      external\n', '      onlyOwner\n', '    {\n', '        withdrawDelay = _withdrawDelay;\n', '    }\n', '\n', '    /**\n', '     * @dev Change the percent of rewards that are given for administration of the contract.\n', '     * @param _adminPercent The percent of rewards to be given for administration (10 == 1%, 1000 == 100%)\n', '    **/\n', '    function changeAdminPercent(uint256 _adminPercent)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_adminPercent <= 500, "Cannot give admin more than 50% of rewards.");\n', '        adminPercent = _adminPercent;\n', '    }\n', '\n', '    /**\n', '     * @dev Owner may change protocols that we stake for and remove any.\n', '     * @param _protocols New list of protocols to stake for.\n', '     * @param _unstakePercents Percent to unstake for each protocol.\n', '     * @param _removedProtocols Protocols removed from our staking that must be 100% unstaked.\n', '    **/\n', '    function changeProtocols(address[] calldata _protocols, uint256[] calldata _unstakePercents, address[] calldata _removedProtocols, uint256 _lastId)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_protocols.length == _unstakePercents.length, "array length diff");\n', '        protocols = _protocols;\n', '        unstakePercents = _unstakePercents;\n', '\n', '        if (_removedProtocols.length > 0) {\n', '            IPooledStaking pool = IPooledStaking( _getPool() );\n', '            \n', '            for (uint256 i = 0; i < _removedProtocols.length; i++) {\n', '                uint256 indUnstakeAmount = _protocolUnstakeable(_removedProtocols[i], uint256(~0));\n', '                if(indUnstakeAmount == 0){\n', '                    // skip already fully requested protocols\n', '                    continue;\n', '                }\n', '                amounts.push(indUnstakeAmount);\n', '                activeProtocols.push(_removedProtocols[i]);\n', '            }\n', '\n', '            pool.requestUnstake(activeProtocols, amounts, _lastId);\n', '            \n', '            delete amounts;\n', '            delete activeProtocols;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Owner may change the amount of time required to be waited between restaking.\n', '     * @param _restakePeriod Amount of time required between restakes (starts at 6 days or 86400 * 6).\n', '    **/\n', '    function changeRestakePeriod(uint256 _restakePeriod)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_restakePeriod <= 30 days, "Restake period cannot be more than 30 days.");\n', '        restakePeriod = _restakePeriod;\n', '    }\n', '    \n', '    /**\n', '     * @dev Owner may change the amount of time it takes to distribute rewards from Nexus.\n', '     * @param _rewardDuration The amount of time it takes to fully distribute rewards.\n', '    **/\n', '    function changeRewardDuration(uint256 _rewardDuration)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_rewardDuration <= 30 days, "Reward duration cannot be more than 30 days.");\n', '        rewardDuration = _rewardDuration;\n', '    }\n', '    \n', '    /**\n', '     * @dev Owner may change the amount of time that withdrawals are paused after a hack is confirmed.\n', '     * @param _pauseDuration The new amount of time that withdrawals will be paused.\n', '    **/\n', '    function changePauseDuration(uint256 _pauseDuration)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_pauseDuration <= 30 days, "Pause duration cannot be more than 30 days.");\n', '        pauseDuration = _pauseDuration;\n', '    }\n', '    \n', '    /**\n', '     * @dev Change beneficiary of the administration funds.\n', '     * @param _newBeneficiary Address of the new beneficiary to receive funds.\n', '    **/\n', '    function changeBeneficiary(address _newBeneficiary) \n', '      external \n', '      onlyOwner \n', '    {\n', '        beneficiary = _newBeneficiary;\n', '    }\n', '    \n', '    //// Update addition. Proxy paranoia brought it down here. ////\n', '    \n', '    uint256 public lastRewardTimestamp;\n', '\n', '    //// Second update additions. ////\n', '\n', '    // Protocol that the next restaking will begin on.\n', '    uint256 public startProtocol;\n', '\n', '    // Checkpoint in case we want to cut off certain buckets (where we begin the rotations).\n', '    // To bar protocols from being staked/unstaked, move them to before checkpointProtocol.\n', '    uint256 public checkpointProtocol;\n', '\n', '    // Number of protocols to stake each time.\n', '    uint256 public bucketSize;\n', '    \n', '    // Individual percent to unstake.\n', '    uint256[] public unstakePercents;\n', '    \n', '    // Last time an EOA has called this contract.\n', '    mapping (address => uint256) public lastCall;\n', '\n', '    ///// Third update additions. /////\n', '\n', '    // Withdraw fee to withdraw immediately.\n', '    uint256 public withdrawFee;\n', '\n', '    // Delay to withdraw\n', '    uint256 public withdrawDelay;\n', '\n', '    // Total amount of withdrawals pending.\n', '    uint256 public totalPending;\n', '\n', '    mapping (address => WithdrawalRequest) public withdrawals;\n', '\n', '}']