['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-20\n', '*/\n', '\n', '// SPDX-License-Identifier: (c) Armor.Fi DAO, 2021\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Unsigned math operations with safety checks that revert on error\n', ' * \n', ' * @dev Default OpenZeppelin\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Multiplies two unsigned integers, reverts on overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Adds two unsigned integers, reverts on overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '     * reverts when dividing by zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Expire Traker\n', ' * @dev Keeps track of expired NFTs.\n', '**/\n', 'contract ExpireTracker {\n', '    \n', '    using SafeMath for uint64;\n', '    using SafeMath for uint256;\n', '\n', '    // 1 day for each step.\n', '    uint64 public constant BUCKET_STEP = 1 days;\n', '\n', '    // indicates where to start from \n', '    // points where TokenInfo with (expiredAt / BUCKET_STEP) == index\n', '    mapping(uint64 => Bucket) public checkPoints;\n', '\n', '    struct Bucket {\n', '        uint96 head;\n', '        uint96 tail;\n', '    }\n', '\n', '    // points first active nft\n', '    uint96 public head;\n', '    // points last active nft\n', '    uint96 public tail;\n', '\n', '    // maps expireId to deposit info\n', '    mapping(uint96 => ExpireMetadata) public infos; \n', '    \n', '    // pack data to reduce gas\n', '    struct ExpireMetadata {\n', '        uint96 next; // zero if there is no further information\n', '        uint96 prev;\n', '        uint64 expiresAt;\n', '    }\n', '\n', '    function expired() internal view returns(bool) {\n', '        if(infos[head].expiresAt == 0) {\n', '            return false;\n', '        }\n', '\n', '        if(infos[head].expiresAt <= uint64(now)){\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    // using typecasted expireId to save gas\n', '    function push(uint96 expireId, uint64 expiresAt) \n', '      internal \n', '    {\n', '        require(expireId != 0, "info id 0 cannot be supported");\n', '\n', "        // If this is a replacement for a current balance, remove it's current link first.\n", '        if (infos[expireId].expiresAt > 0) pop(expireId);\n', '\n', '        uint64 bucket = uint64( (expiresAt.div(BUCKET_STEP)).mul(BUCKET_STEP) );\n', '        if (head == 0) {\n', '            // all the nfts are expired. so just add\n', '            head = expireId;\n', '            tail = expireId; \n', '            checkPoints[bucket] = Bucket(expireId, expireId);\n', '            infos[expireId] = ExpireMetadata(0,0,expiresAt);\n', '            \n', '            return;\n', '        }\n', '            \n', '        // there is active nft. we need to find where to push\n', '        // first check if this expires faster than head\n', '        if (infos[head].expiresAt >= expiresAt) {\n', '            // pushing nft is going to expire first\n', '            // update head\n', '            infos[head].prev = expireId;\n', '            infos[expireId] = ExpireMetadata(head,0,expiresAt);\n', '            head = expireId;\n', '            \n', '            // update head of bucket\n', '            Bucket storage b = checkPoints[bucket];\n', '            b.head = expireId;\n', '                \n', '            if(b.tail == 0) {\n', '                // if tail is zero, this bucket was empty should fill tail with expireId\n', '                b.tail = expireId;\n', '            }\n', '                \n', '            // this case can end now\n', '            return;\n', '        }\n', '          \n', '        // then check if depositing nft will last more than latest\n', '        if (infos[tail].expiresAt <= expiresAt) {\n', '            infos[tail].next = expireId;\n', '            // push nft at tail\n', '            infos[expireId] = ExpireMetadata(0,tail,expiresAt);\n', '            tail = expireId;\n', '            \n', '            // update tail of bucket\n', '            Bucket storage b = checkPoints[bucket];\n', '            b.tail = expireId;\n', '            \n', '            if(b.head == 0){\n', '              // if head is zero, this bucket was empty should fill head with expireId\n', '              b.head = expireId;\n', '            }\n', '            \n', '            // this case is done now\n', '            return;\n', '        }\n', '          \n', '        // so our nft is somewhere in between\n', '        if (checkPoints[bucket].head != 0) {\n', '            //bucket is not empty\n', '            //we just need to find our neighbor in the bucket\n', '            uint96 cursor = checkPoints[bucket].head;\n', '        \n', "            // iterate until we find our nft's next\n", '            while(infos[cursor].expiresAt < expiresAt){\n', '                cursor = infos[cursor].next;\n', '            }\n', '        \n', '            infos[expireId] = ExpireMetadata(cursor, infos[cursor].prev, expiresAt);\n', '            infos[infos[cursor].prev].next = expireId;\n', '            infos[cursor].prev = expireId;\n', '        \n', "            //now update bucket's head/tail data\n", '            Bucket storage b = checkPoints[bucket];\n', '            \n', '            if (infos[b.head].prev == expireId){\n', '                b.head = expireId;\n', '            }\n', '            \n', '            if (infos[b.tail].next == expireId){\n', '                b.tail = expireId;\n', '            }\n', '        } else {\n', '            //bucket is empty\n', "            //should find which bucket has depositing nft's closest neighbor\n", '            // step 1 find prev bucket\n', '            uint64 prevCursor = bucket - BUCKET_STEP;\n', '            \n', '            while(checkPoints[prevCursor].tail == 0){\n', '              prevCursor = uint64( prevCursor.sub(BUCKET_STEP) );\n', '            }\n', '    \n', '            uint96 prev = checkPoints[prevCursor].tail;\n', '            uint96 next = infos[prev].next;\n', '    \n', '            // step 2 link prev buckets tail - nft - next buckets head\n', '            infos[expireId] = ExpireMetadata(next,prev,expiresAt);\n', '            infos[prev].next = expireId;\n', '            infos[next].prev = expireId;\n', '    \n', '            checkPoints[bucket].head = expireId;\n', '            checkPoints[bucket].tail = expireId;\n', '        }\n', '    }\n', '\n', '    function _pop(uint96 expireId, uint256 bucketStep) private {\n', '        uint64 expiresAt = infos[expireId].expiresAt;\n', '        uint64 bucket = uint64( (expiresAt.div(bucketStep)).mul(bucketStep) );\n', '        // check if bucket is empty\n', '        // if bucket is empty, end\n', '        if(checkPoints[bucket].head == 0){\n', '            return;\n', '        }\n', '        // if bucket is not empty, iterate through\n', '        // if expiresAt of current cursor is larger than expiresAt of parameter, reverts\n', '        for(uint96 cursor = checkPoints[bucket].head; infos[cursor].expiresAt <= expiresAt; cursor = infos[cursor].next) {\n', '            ExpireMetadata memory info = infos[cursor];\n', '            // if expiresAt is same of paramter, check if expireId is same\n', '            if(info.expiresAt == expiresAt && cursor == expireId) {\n', '                // if yes, delete it\n', '                // if cursor was head, move head to cursor.next\n', '                if(head == cursor) {\n', '                    head = info.next;\n', '                }\n', '                // if cursor was tail, move tail to cursor.prev\n', '                if(tail == cursor) {\n', '                    tail = info.prev;\n', '                }\n', '                // if cursor was head of bucket\n', '                if(checkPoints[bucket].head == cursor){\n', '                    // and cursor.next is still in same bucket, move head to cursor.next\n', '                    if(infos[info.next].expiresAt.div(bucketStep) == bucket.div(bucketStep)) {\n', '                        checkPoints[bucket].head = info.next;\n', '                    } else {\n', '                        // delete whole checkpoint if bucket is now empty\n', '                        delete checkPoints[bucket];\n', '                    }\n', '                } else if(checkPoints[bucket].tail == cursor){\n', '                    // since bucket.tail == bucket.haed == cursor case is handled at the above,\n', '                    // we only have to handle bucket.tail == cursor != bucket.head\n', '                    checkPoints[bucket].tail = info.prev;\n', '                }\n', '                // now we handled all tail/head situation, we have to connect prev and next\n', '                infos[info.prev].next = info.next;\n', '                infos[info.next].prev = info.prev;\n', '                // delete info and end\n', '                delete infos[cursor];\n', '                return;\n', '            }\n', '            // if not, continue -> since there can be same expires at with multiple expireId\n', '        }\n', '        //changed to return for consistency\n', '        return;\n', '        //revert("Info does not exist");\n', '    }\n', '\n', '    function pop(uint96 expireId) internal {\n', '        _pop(expireId, BUCKET_STEP);\n', '    }\n', '\n', '    function pop(uint96 expireId, uint256 step) internal {\n', '        _pop(expireId, step);\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', 'interface IArmorMaster {\n', '    function registerModule(bytes32 _key, address _module) external;\n', '    function getModule(bytes32 _key) external view returns(address);\n', '    function keep() external;\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' * \n', ' * @dev Completely default OpenZeppelin.\n', ' */\n', 'contract Ownable {\n', '    address private _owner;\n', '    address private _pendingOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    function initializeOwnable() internal {\n', '        require(_owner == address(0), "already initialized");\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '\n', '    /**\n', '     * @return the address of the owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "msg.sender is not owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return true if `msg.sender` is the owner of the contract.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return msg.sender == _owner;\n', '\n', '    }\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _pendingOwner = newOwner;\n', '    }\n', '\n', '    function receiveOwnership() public {\n', '        require(msg.sender == _pendingOwner, "only pending owner can call this function");\n', '        _transferOwnership(_pendingOwner);\n', '        _pendingOwner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '\n', '    uint256[50] private __gap;\n', '}\n', '\n', 'library Bytes32 {\n', '    function toString(bytes32 x) internal pure returns (string memory) {\n', '        bytes memory bytesString = new bytes(32);\n', '        uint charCount = 0;\n', '        for (uint256 j = 0; j < 32; j++) {\n', '            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));\n', '            if (char != 0) {\n', '                bytesString[charCount] = char;\n', '                charCount++;\n', '            }\n', '        }\n', '        bytes memory bytesStringTrimmed = new bytes(charCount);\n', '        for (uint256 j = 0; j < charCount; j++) {\n', '            bytesStringTrimmed[j] = bytesString[j];\n', '        }\n', '        return string(bytesStringTrimmed);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Each arCore contract is a module to enable simple communication and interoperability. ArmorMaster.sol is master.\n', '**/\n', 'contract ArmorModule {\n', '    IArmorMaster internal _master;\n', '\n', '    using Bytes32 for bytes32;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == Ownable(address(_master)).owner(), "only owner can call this function");\n', '        _;\n', '    }\n', '\n', '    modifier doKeep() {\n', '        _master.keep();\n', '        _;\n', '    }\n', '\n', '    modifier onlyModule(bytes32 _module) {\n', '        string memory message = string(abi.encodePacked("only module ", _module.toString()," can call this function"));\n', '        require(msg.sender == getModule(_module), message);\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Used when multiple can call.\n', '    **/\n', '    modifier onlyModules(bytes32 _moduleOne, bytes32 _moduleTwo) {\n', '        string memory message = string(abi.encodePacked("only module ", _moduleOne.toString()," or ", _moduleTwo.toString()," can call this function"));\n', '        require(msg.sender == getModule(_moduleOne) || msg.sender == getModule(_moduleTwo), message);\n', '        _;\n', '    }\n', '\n', '    function initializeModule(address _armorMaster) internal {\n', '        require(address(_master) == address(0), "already initialized");\n', '        require(_armorMaster != address(0), "master cannot be zero address");\n', '        _master = IArmorMaster(_armorMaster);\n', '    }\n', '\n', '    function changeMaster(address _newMaster) external onlyOwner {\n', '        _master = IArmorMaster(_newMaster);\n', '    }\n', '\n', '    function getModule(bytes32 _key) internal view returns(address) {\n', '        return _master.getModule(_key);\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', 'interface IarNFT is IERC721 {\n', '    function getToken(uint256 _tokenId) external returns (uint256, uint8, uint256, uint16, uint256, address, bytes4, uint256, uint256, uint256);\n', '    function submitClaim(uint256 _tokenId) external;\n', '    function redeemClaim(uint256 _tokenId) external;\n', '}\n', '\n', 'interface IRewardDistributionRecipient {\n', '    function notifyRewardAmount(uint256 reward) payable external;\n', '}\n', '\n', 'interface IRewardManager is IRewardDistributionRecipient {\n', '  function initialize(address _rewardToken, address _stakeManager) external;\n', '  function stake(address _user, uint256 _coverPrice, uint256 _nftId) external;\n', '  function withdraw(address _user, uint256 _coverPrice, uint256 _nftId) external;\n', '  function getReward(address payable _user) external;\n', '}\n', '\n', 'interface IPlanManager {\n', '  // Event to notify frontend of plan update.\n', '  event PlanUpdate(address indexed user, address[] protocols, uint256[] amounts, uint256 endTime);\n', '  function initialize(address _armorManager) external;\n', '  function changePrice(address _scAddress, uint256 _pricePerAmount) external;\n', '  function updatePlan(address[] calldata _protocols, uint256[] calldata _coverAmounts) external;\n', '  function checkCoverage(address _user, address _protocol, uint256 _hacktime, uint256 _amount) external view returns (uint256, bool);\n', '  function coverageLeft(address _protocol) external view returns(uint256);\n', '  function getCurrentPlan(address _user) external view returns(uint128 start, uint128 end);\n', '  function updateExpireTime(address _user, uint256 _expiry) external;\n', '  function planRedeemed(address _user, uint256 _planIndex, address _protocol) external;\n', '  function totalUsedCover(address _scAddress) external view returns (uint256);\n', '}\n', '\n', 'interface IClaimManager {\n', '    function initialize(address _armorMaster) external;\n', '    function transferNft(address _to, uint256 _nftId) external;\n', '    function exchangeWithdrawal(uint256 _amount) external;\n', '}\n', '\n', 'interface IStakeManager {\n', '    function totalStakedAmount(address protocol) external view returns(uint256);\n', '    function protocolAddress(uint64 id) external view returns(address);\n', '    function protocolId(address protocol) external view returns(uint64);\n', '    function initialize(address _armorMaster) external;\n', '    function allowedCover(address _newProtocol, uint256 _newTotalCover) external view returns (bool);\n', '    function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount) external;\n', '}\n', '\n', 'interface IUtilizationFarm is IRewardDistributionRecipient {\n', '  function initialize(address _rewardToken, address _stakeManager) external;\n', '  function stake(address _user, uint256 _coverPrice) external;\n', '  function withdraw(address _user, uint256 _coverPrice) external;\n', '  function getReward(address payable _user) external;\n', '}\n', '\n', '/**\n', ' * @dev Encompasses all functions taken by stakers.\n', '**/\n', 'contract StakeManager is ArmorModule, ExpireTracker, IStakeManager {\n', '    \n', '    using SafeMath for uint;\n', '    \n', '    bytes4 public constant ETH_SIG = bytes4(0x45544800);\n', '    \n', '    // Whether or not utilization farming is on.\n', '    bool ufOn;\n', '    \n', '    // Amount of time--in seconds--a user must wait to withdraw an NFT.\n', '    uint256 withdrawalDelay;\n', '    \n', '    // Protocols that staking is allowed for. We may not allow all NFTs.\n', '    mapping (address => bool) public allowedProtocol;\n', '    mapping (address => uint64) public override protocolId;\n', '    mapping (uint64 => address) public override protocolAddress;\n', '    uint64 protocolCount;\n', '    \n', '    // The total amount of cover that is currently being staked. scAddress => cover amount\n', '    mapping (address => uint256) public override totalStakedAmount;\n', '    \n', '    // Mapping to keep track of which NFT is owned by whom. NFT ID => owner address.\n', '    mapping (uint256 => address) public nftOwners;\n', '\n', '    // When the NFT can be withdrawn. NFT ID => Unix timestamp.\n', '    mapping (uint256 => uint256) public pendingWithdrawals;\n', '\n', '    // Track if the NFT was submitted, in which case total staked has already been lowered.\n', '    mapping (uint256 => bool) public submitted;\n', '\n', '    // Event launched when an NFT is staked.\n', '    event StakedNFT(address indexed user, address indexed protocol, uint256 nftId, uint256 sumAssured, uint256 secondPrice, uint16 coverPeriod, uint256 timestamp);\n', '\n', '    // Event launched when an NFT expires.\n', '    event RemovedNFT(address indexed user, address indexed protocol, uint256 nftId, uint256 sumAssured, uint256 secondPrice, uint16 coverPeriod, uint256 timestamp);\n', '\n', '    event ExpiredNFT(address indexed user, uint256 nftId, uint256 timestamp);\n', '    \n', '    // Event launched when an NFT expires.\n', '    event WithdrawRequest(address indexed user, uint256 nftId, uint256 timestamp, uint256 withdrawTimestamp);\n', '    \n', '    /**\n', '     * @dev Construct the contract with the yNft contract.\n', '    **/\n', '    function initialize(address _armorMaster)\n', '      public\n', '      override\n', '    {\n', '        initializeModule(_armorMaster);\n', "        // Let's be explicit.\n", '        withdrawalDelay = 7 days;\n', '        ufOn = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Keep function can be called by anyone to remove any NFTs that have expired. Also run when calling many functions.\n', '     *      This is external because the doKeep modifier calls back to ArmorMaster, which then calls back to here (and elsewhere).\n', '    **/\n', '    function keep() external {\n', '        for (uint256 i = 0; i < 2; i++) {\n', '            if (infos[head].expiresAt != 0 && infos[head].expiresAt <= now) _removeExpiredNft(head);\n', '            else return;\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev stakeNft allows a user to submit their NFT to the contract and begin getting returns.\n', '     *      This yNft cannot be withdrawn!\n', '     * @param _nftId The ID of the NFT being staked.\n', '    **/\n', '    function stakeNft(uint256 _nftId)\n', '      public\n', '      // doKeep\n', '    {\n', '        _stake(_nftId, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @dev stakeNft allows a user to submit their NFT to the contract and begin getting returns.\n', '     * @param _nftIds The ID of the NFT being staked.\n', '    **/\n', '    function batchStakeNft(uint256[] memory _nftIds)\n', '      public\n', '      // doKeep\n', '    {\n', '        // Loop through all submitted NFT IDs and stake them.\n', '        for (uint256 i = 0; i < _nftIds.length; i++) {\n', '            _stake(_nftIds[i], msg.sender);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev A user may call to withdraw their NFT. This may have a delay added to it.\n', '     * @param _nftId ID of the NFT to withdraw.\n', '    **/\n', '    function withdrawNft(uint256 _nftId)\n', '      external\n', '      // doKeep\n', '    {\n', '        // Check when this NFT is allowed to be withdrawn. If 0, set it.\n', '        uint256 withdrawalTime = pendingWithdrawals[_nftId];\n', '        \n', '        if (withdrawalTime == 0) {\n', '            require(nftOwners[_nftId] == msg.sender, "Sender does not own this NFT.");\n', '            \n', '            (/*coverId*/,  uint8 coverStatus, uint256 sumAssured, /*uint16 coverPeriod*/, /*uint256 validUntil*/, address scAddress, \n', '            /*bytes4 coverCurrency*/, /*premiumNXM*/, /*uint256 coverPrice*/, /*claimId*/) = IarNFT( getModule("ARNFT") ).getToken(_nftId);\n', '            \n', '            uint256 totalUsedCover = IPlanManager( getModule("PLAN") ).totalUsedCover(scAddress);\n', '            bool withdrawable = totalUsedCover <= totalStakedAmount[scAddress].sub(sumAssured * 1e18);\n', '            require(coverStatus == 0 && withdrawable, "May not withdraw NFT if it will bring staked amount below borrowed amount.");\n', '            \n', '            withdrawalTime = block.timestamp + withdrawalDelay;\n', '            pendingWithdrawals[_nftId] = withdrawalTime;\n', '            _removeNft(_nftId);\n', '            \n', '            emit WithdrawRequest(msg.sender, _nftId, block.timestamp, withdrawalTime);\n', '        } else if (withdrawalTime <= block.timestamp) {\n', '            (/*coverId*/,  uint8 coverStatus, /*uint256 sumAssured*/, /*uint16 coverPeriod*/, /*uint256 validUntil*/, /*address scAddress*/, \n', '            /*bytes4 coverCurrency*/, /*premiumNXM*/, /*uint256 coverPrice*/, /*claimId*/) = IarNFT(getModule("ARNFT")).getToken(_nftId);\n', '            \n', '            // Added after update in case someone initiated withdrawal before update, then executed after update, in which case their NFT is never removed.\n', '            if (ExpireTracker.infos[uint96(_nftId)].next > 0) _removeNft(_nftId);\n', '\n', '            require(coverStatus == 0, "May not withdraw while claim is occurring.");\n', '            \n', '            address nftOwner = nftOwners[_nftId];\n', '            IClaimManager(getModule("CLAIM")).transferNft(nftOwner, _nftId);\n', '            delete pendingWithdrawals[_nftId];\n', '            delete nftOwners[_nftId];\n', '        }\n', '        \n', '    }\n', '\n', '    /**\n', '     * @dev Subtract from total staked. Used by ClaimManager in case NFT is submitted.\n', '     * @param _protocol Address of the protocol to subtract from.\n', '     * @param _subtractAmount Amount of staked to subtract.\n', '    **/\n', '    function subtractTotal(uint256 _nftId, address _protocol, uint256 _subtractAmount)\n', '      external\n', '      override\n', '      onlyModule("CLAIM")\n', '    {\n', '        totalStakedAmount[_protocol] = totalStakedAmount[_protocol].sub(_subtractAmount);\n', '        submitted[_nftId] = true;\n', '    }\n', '\n', '    /**\n', '     * @dev Check whether a new TOTAL cover is allowed.\n', '     * @param _protocol Address of the smart contract protocol being protected.\n', '     * @param _totalBorrowedAmount The new total amount that would be being borrowed.\n', '     * returns Whether or not this new total borrowed amount would be able to be covered.\n', '    **/\n', '    function allowedCover(address _protocol, uint256 _totalBorrowedAmount)\n', '      external\n', '      override\n', '      view\n', '    returns (bool)\n', '    {\n', '        return _totalBorrowedAmount <= totalStakedAmount[_protocol];\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function for staking--this allows us to skip updating stake multiple times during a batch stake.\n', '     * @param _nftId The ID of the NFT being staked. == coverId\n', '     * @param _user The user who is staking the NFT.\n', '    **/\n', '    function _stake(uint256 _nftId, address _user)\n', '      internal\n', '    {\n', '        (/*coverId*/,  uint8 coverStatus, uint256 sumAssured, uint16 coverPeriod, uint256 validUntil, address scAddress, \n', '         bytes4 coverCurrency, /*premiumNXM*/, uint256 coverPrice, /*claimId*/) = IarNFT( getModule("ARNFT") ).getToken(_nftId);\n', '        \n', '        _checkNftValid(validUntil, scAddress, coverCurrency, coverStatus);\n', '        \n', '        // coverPrice must be determined by dividing by length.\n', '        uint256 secondPrice = coverPrice / (uint256(coverPeriod) * 1 days);\n', '\n', '        // Update PlanManager to use the correct price for the protocol.\n', '        // Find price per amount here to update plan manager correctly.\n', '        uint256 pricePerEth = secondPrice / sumAssured;\n', '        \n', '        IPlanManager(getModule("PLAN")).changePrice(scAddress, pricePerEth);\n', '        \n', '        IarNFT(getModule("ARNFT")).transferFrom(_user, getModule("CLAIM"), _nftId);\n', '\n', '        ExpireTracker.push(uint96(_nftId), uint64(validUntil));\n', '        // Save owner of NFT.\n', '        nftOwners[_nftId] = _user;\n', '\n', '        uint256 weiSumAssured = sumAssured * (10 ** 18);\n', '        _addCovers(_user, _nftId, weiSumAssured, secondPrice, scAddress);\n', '        \n', '        // Add to utilization farming.\n', '        if (ufOn) IUtilizationFarm(getModule("UFS")).stake(_user, secondPrice);\n', '        \n', '        emit StakedNFT(_user, scAddress, _nftId, weiSumAssured, secondPrice, coverPeriod, block.timestamp);\n', '    }\n', '    \n', '    /**\n', '     * @dev removeExpiredNft is called on many different interactions to the system overall.\n', '     * @param _nftId The ID of the expired NFT.\n', '    **/\n', '    function _removeExpiredNft(uint256 _nftId)\n', '      internal\n', '    {\n', '        address user = nftOwners[_nftId];\n', '        _removeNft(_nftId);\n', '        delete nftOwners[_nftId];\n', '        emit ExpiredNFT(user, _nftId, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal main removal functionality.\n', '    **/\n', '    function _removeNft(uint256 _nftId)\n', '      internal\n', '    {\n', '        (/*coverId*/, /*status*/, uint256 sumAssured, uint16 coverPeriod, /*uint256 validuntil*/, address scAddress, \n', '         /*coverCurrency*/, /*premiumNXM*/, uint256 coverPrice, /*claimId*/) = IarNFT(getModule("ARNFT")).getToken(_nftId);\n', '        address user = nftOwners[_nftId];\n', '        require(user != address(0), "NFT does not belong to this contract.");\n', '\n', '        ExpireTracker.pop(uint96(_nftId));\n', '\n', '        uint256 weiSumAssured = sumAssured * (10 ** 18);\n', '        uint256 secondPrice = coverPrice / (uint256(coverPeriod) * 1 days);\n', '        _subtractCovers(user, _nftId, weiSumAssured, secondPrice, scAddress);\n', '        \n', '        // Exit from utilization farming.\n', '        if (ufOn) IUtilizationFarm(getModule("UFS")).withdraw(user, secondPrice);\n', '\n', '        emit RemovedNFT(user, scAddress, _nftId, weiSumAssured, secondPrice, coverPeriod, block.timestamp);\n', '    }\n', '    \n', '    /**\n', '     * @dev Need a force remove--at least temporarily--where owner can remove data relating to an NFT.\n', '     *      This necessity came about when updating the contracts and some users started withdrawal when _removeNFT\n', '     *      was in the second step of withdrawal, then executed the second step of withdrawal after _removeNFT had\n', '     *      been moved to the first step of withdrawal.\n', '    **/\n', '    function forceRemoveNft(address[] calldata _users, uint256[] calldata _nftIds)\n', '      external\n', '      onlyOwner\n', '    {\n', '        require(_users.length == _nftIds.length, "Array lengths must match.");\n', '        for (uint256 i = 0; i < _users.length; i++) {\n', '            uint256 nftId = _nftIds[i];\n', '            address user = _users[i];\n', '            (/*coverId*/, /*status*/, uint256 sumAssured, uint16 coverPeriod, /*uint256 validuntil*/, address scAddress, \n', '            /*coverCurrency*/, /*premiumNXM*/, uint256 coverPrice, /*claimId*/) = IarNFT(getModule("ARNFT")).getToken(nftId);\n', '            //address user = nftOwners[_nftId];\n', '            // require(user != address(0), "NFT does not belong to this contract.");\n', '            require(nftOwners[nftId] == address(0) && ExpireTracker.infos[uint96(nftId)].next > 0, "NFT may not be force removed.");\n', '\n', '            ExpireTracker.pop(uint96(nftId));\n', '\n', '            uint256 weiSumAssured = sumAssured * (10 ** 18);\n', '            uint256 secondPrice = coverPrice / (uint256(coverPeriod) * 1 days);\n', '            _subtractCovers(user, nftId, weiSumAssured, secondPrice, scAddress);\n', '            \n', '            // Exit from utilization farming.\n', '            if (ufOn) IUtilizationFarm(getModule("UFS")).withdraw(user, secondPrice);\n', '\n', '            emit RemovedNFT(user, scAddress, nftId, weiSumAssured, secondPrice, coverPeriod, block.timestamp);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Some NFT expiries used a different bucket step upon update and must be reset. \n', '    **/\n', '    function forceResetExpires(uint256[] calldata _nftIds)\n', '      external\n', '      onlyOwner\n', '    {\n', '        uint64[] memory validUntils = new uint64[](_nftIds.length);\n', '        for (uint256 i = 0; i < _nftIds.length; i++) {\n', '            (/*coverId*/, /*status*/, /*uint256 sumAssured*/, /*uint16 coverPeriod*/, uint256 validUntil, /*address scAddress*/, \n', '            /*coverCurrency*/, /*premiumNXM*/, /*uint256 coverPrice*/, /*claimId*/) = IarNFT(getModule("ARNFT")).getToken(_nftIds[i]);\n', '            require(nftOwners[_nftIds[i]] != address(0), "this nft does not belong here");\n', '            ExpireTracker.pop(uint96(_nftIds[i]), 86400);\n', '            ExpireTracker.pop(uint96(_nftIds[i]), 86400*3);\n', '            validUntils[i] = uint64(validUntil);\n', '        }\n', '        for (uint256 i = 0; i < _nftIds.length; i++) {\n', '            ExpireTracker.push(uint96(_nftIds[i]),uint64(validUntils[i]));\n', '        }\n', '    }\n', '    // set desired head and tail\n', '    function _resetBucket(uint64 _bucket, uint96 _head, uint96 _tail) internal {\n', '        require(_bucket % BUCKET_STEP == 0, "INVALID BUCKET");\n', '        checkPoints[_bucket].tail = _tail;\n', '        checkPoints[_bucket].head = _head;\n', '    }\n', '\n', '    function resetBuckets(uint64[] calldata _buckets, uint96[] calldata _heads, uint96[] calldata _tails) external onlyOwner{\n', '        for(uint256 i = 0 ; i< _buckets.length; i++){\n', '            _resetBucket(_buckets[i], _heads[i], _tails[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Add to the cover amount for the user and contract overall.\n', '     * @param _user The user who submitted.\n', '     * @param _nftId ID of the NFT being staked (used for events on RewardManager).\n', '     * @param _coverAmount The amount of cover being added.\n', '     * @param _coverPrice Price paid by the user for the NFT per second.\n', '     * @param _protocol Address of the protocol that is having cover added.\n', '    **/\n', '    function _addCovers(address _user, uint256 _nftId, uint256 _coverAmount, uint256 _coverPrice, address _protocol)\n', '      internal\n', '    {\n', '        IRewardManager(getModule("REWARD")).stake(_user, _coverPrice, _nftId);\n', '        totalStakedAmount[_protocol] = totalStakedAmount[_protocol].add(_coverAmount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Subtract from the cover amount for the user and contract overall.\n', '     * @param _user The user who is having the token removed.\n', '     * @param _nftId ID of the NFT being used--must check if it has been submitted.\n', '     * @param _coverAmount The amount of cover being removed.\n', '     * @param _coverPrice Price that the user was paying per second.\n', '     * @param _protocol The protocol that this NFT protected.\n', '    **/\n', '    function _subtractCovers(address _user, uint256 _nftId, uint256 _coverAmount, uint256 _coverPrice, address _protocol)\n', '      internal\n', '    {\n', '        IRewardManager(getModule("REWARD")).withdraw(_user, _coverPrice, _nftId);\n', '        if (!submitted[_nftId]) totalStakedAmount[_protocol] = totalStakedAmount[_protocol].sub(_coverAmount);\n', '    }\n', '    \n', '    /**\n', '     * @dev Check that the NFT should be allowed to be added. We check expiry and claimInProgress.\n', '     * @param _validUntil The expiration time of this NFT.\n', '     * @param _scAddress The smart contract protocol that the NFt is protecting.\n', '     * @param _coverCurrency The currency that this NFT is protected in (must be ETH_SIG).\n', '     * @param _coverStatus status of cover, only accepts Active\n', '    **/\n', '    function _checkNftValid(uint256 _validUntil, address _scAddress, bytes4 _coverCurrency, uint8 _coverStatus)\n', '      internal\n', '      view\n', '    {\n', '        require(_validUntil > now + 20 days, "NFT is expired or within 20 days of expiry.");\n', '        require(_coverStatus == 0, "arNFT claim is already in progress.");\n', '        require(allowedProtocol[_scAddress], "Protocol is not allowed to be staked.");\n', '        require(_coverCurrency == ETH_SIG, "Only Ether arNFTs may be staked.");\n', '    }\n', '    \n', '    /**\n', '     * @dev Allow the owner (DAO soon) to allow or disallow a protocol from being used in Armor.\n', '     * @param _protocol The address of the protocol to allow or disallow.\n', '     * @param _allow Whether to allow or disallow the protocol.\n', '    **/\n', '    function allowProtocol(address _protocol, bool _allow)\n', '      external\n', '      // doKeep\n', '      onlyOwner\n', '    {\n', '        if(protocolId[_protocol] == 0){\n', '            protocolId[_protocol] = ++protocolCount;\n', '            protocolAddress[protocolCount] = _protocol;\n', '        }\n', '        allowedProtocol[_protocol] = _allow;\n', '    }\n', '    \n', '    /**\n', '     * @dev Allow the owner to change the amount of delay to withdraw an NFT.\n', '     * @param _withdrawalDelay The amount of time--in seconds--to delay an NFT withdrawal.\n', '    **/\n', '    function changeWithdrawalDelay(uint256 _withdrawalDelay)\n', '      external\n', '      // doKeep\n', '      onlyOwner\n', '    {\n', '        withdrawalDelay = _withdrawalDelay;\n', '    }\n', '    \n', '    /**\n', '     * @dev Toggle whether utilization farming should be on or off.\n', '    **/\n', '    function toggleUF()\n', '      external\n', '      onlyOwner\n', '    {\n', '        ufOn = !ufOn;\n', '    }\n', '\n', '}']