['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-06\n', '*/\n', '\n', '// SPDX-License-Identifier: -- ðŸ’° --\n', '\n', 'pragma solidity ^0.7.5;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Generic SafeMath Library, can be removed if the\n', ' * contract will be rewritten to ^0.8.0 Solidity compiler\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', "        require(c >= a, 'SafeMath: addition overflow');\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        return sub(a, b, 'SafeMath: subtraction overflow');\n", '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', "        require(c / a == b, 'SafeMath: multiplication overflow');\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        return div(a, b, 'SafeMath: division by zero');\n", '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        return mod(a, b, 'SafeMath: modulo by zero');\n", '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Context for msg.sender and msg.data can be removed\n', ' * used in Ownable to determine msg.sender through _msgSender();\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this;\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() {\n', '        _owner = _msgSender();\n', '        emit OwnershipTransferred(\n', '            address(0),\n', '            _owner\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(\n', '            isOwner(),\n', "            'Ownable: caller is not the owner'\n", '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(\n', '            _owner,\n', '            address(0x0)\n', '        );\n', '        _owner = address(0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(\n', '            newOwner != address(0x0),\n', "            'Ownable: new owner is the zero address'\n", '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != 0x0 && codehash != accountHash);\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' */\n', 'library SafeERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.transfer.selector,\n', '                to,\n', '                value\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.transferFrom.selector,\n', '                from,\n', '                to,\n', '                value\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', "            'SafeERC20: approve from non-zero to non-zero allowance'\n", '        );\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                value\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        uint256 newAllowance = token.allowance(\n', '            address(this),\n', '            spender\n', '        ).add(value);\n', '\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    )\n', '        internal\n', '    {\n', '        uint256 newAllowance = token.allowance(\n', '            address(this),\n', '            spender\n', '        ).sub(value);\n', '\n', '        callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function callOptionalReturn(\n', '        IERC20 token,\n', '        bytes memory data\n', '    )\n', '        private\n', '    {\n', '        require(\n', '            address(token).isContract(),\n', "            'SafeERC20: call to non-contract'\n", '        );\n', '\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(\n', '            success,\n', "            'SafeERC20: low-level call failed'\n", '        );\n', '\n', '        if (returndata.length > 0) {\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', "                'SafeERC20: ERC20 operation did not succeed'\n", '            );\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title LPTokenWrapper\n', ' * @dev Wraps around ERC20 that is represented as Liquidity token\n', ' * contract and is being distributed for providing liquidity for the pair.\n', ' * This token is the staking token in this system / contract.\n', ' */\n', 'contract LPTokenWrapper {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // ONBOARDING: Specify Liquidity Token Address\n', '    IERC20 public uni = IERC20(\n', '        0xdEEa5C497b7557E8742F2707549e8B2F9f09594c\n', '    );\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    /**\n', '     * @dev Returns total supply of staked token\n', '     */\n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns balance of specific user\n', '     */\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev internal function for staking LP tokens\n', '     */\n', '    function _stake(uint256 amount) internal {\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '\n', '        _balances[msg.sender] =\n', '        _balances[msg.sender].add(amount);\n', '\n', '        uni.safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            amount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev internal function for withdrwaing LP tokens\n', '     */\n', '    function _withdraw(uint256 amount) internal {\n', '\n', '        _totalSupply = _totalSupply.sub(amount);\n', '\n', '        _balances[msg.sender] =\n', '        _balances[msg.sender].sub(amount);\n', '\n', '        uni.safeTransfer(\n', '            msg.sender,\n', '            amount\n', '        );\n', '    }\n', '}\n', '\n', 'contract FeyLPStaking is LPTokenWrapper, Ownable {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    // ONBOARDING: Specify Reward Token Address (FEY)\n', '    IERC20 public fey = IERC20(\n', '        0xe8E06a5613dC86D459bC8Fb989e173bB8b256072\n', '    );\n', '\n', '    // ONBOARDING: Specify duration of single cycle for the reward distribution\n', '    // reward distribution should be announced through {notifyRewardAmount} call\n', '    uint256 public constant DURATION = 52 weeks;\n', '\n', '    uint256 public periodFinish;\n', '    uint256 public rewardRate;\n', '    uint256 public lastUpdateTime;\n', '    uint256 public rewardPerTokenStored;\n', '\n', '    mapping(address => uint256) public userRewardPerTokenPaid;\n', '    mapping(address => uint256) public rewards;\n', '\n', '    event RewardAdded(\n', '        uint256 reward\n', '    );\n', '\n', '    event Staked(\n', '        address indexed user,\n', '        uint256 amount\n', '    );\n', '\n', '    event Withdrawn(\n', '        address indexed user,\n', '        uint256 amount\n', '    );\n', '\n', '    event RewardPaid(\n', '        address indexed user,\n', '        uint256 reward\n', '    );\n', '\n', '    modifier updateReward(address account) {\n', '\n', '        rewardPerTokenStored = rewardPerToken();\n', '        lastUpdateTime = lastTimeRewardApplicable();\n', '\n', '        if (account != address(0)) {\n', '            rewards[account] = earned(account);\n', '            userRewardPerTokenPaid[account] = rewardPerTokenStored;\n', '        }\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Checks when last time the reward\n', '     * was changed based on when the distribution\n', '     * is about to be finished\n', '     */\n', '    function lastTimeRewardApplicable()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return Math.min(\n', '            block.timestamp,\n', '            periodFinish\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Determines the ratio of reward per each token\n', '     * stakd so the relative value can be calculated\n', '     */\n', '    function rewardPerToken()\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (totalSupply() == 0) {\n', '            return rewardPerTokenStored;\n', '        }\n', '\n', '        return rewardPerTokenStored.add(\n', '            lastTimeRewardApplicable()\n', '                .sub(lastUpdateTime)\n', '                .mul(rewardRate)\n', '                .mul(1e18)\n', '                .div(totalSupply())\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns amount of tokens specific address or\n', '     * staker has earned so far based on his stake and time\n', '     * the stake been active so far.\n', '     */\n', '    function earned(\n', '        address account\n', '    )\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return balanceOf(account)\n', '            .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\n', '            .div(1E18)\n', '            .add(rewards[account]);\n', '    }\n', '\n', '    /**\n', '     * @dev Ability to stake liquidity tokens\n', '     */\n', '    function stake(\n', '        uint256 amount\n', '    )\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', '        require(\n', '            amount > 0,\n', "            'Cannot stake 0'\n", '        );\n', '\n', '        _stake(amount);\n', '\n', '        emit Staked(\n', '            msg.sender,\n', '            amount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Ability to withdraw liquidity tokens\n', '     */\n', '    function withdraw(\n', '        uint256 amount\n', '    )\n', '        public\n', '        updateReward(msg.sender)\n', '    {\n', '        require(\n', '            amount > 0,\n', "            'Cannot withdraw 0'\n", '        );\n', '\n', '        _withdraw(amount);\n', '\n', '        emit Withdrawn(\n', '            msg.sender,\n', '            amount\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev allows to withdraw staked tokens\n', '     *\n', '     * withdraws all staked tokens by user\n', '     * also withdraws rewards as user exits\n', '     */\n', '    function exit() external {\n', '        withdraw(balanceOf(msg.sender));\n', '        getReward();\n', '    }\n', '\n', '    /**\n', '     * @dev allows to withdraw staked tokens\n', '     *\n', '     * withdraws all staked tokens by user\n', '     * also withdraws rewards as user exits\n', '     */\n', '    function getReward()\n', '        public\n', '        updateReward(msg.sender)\n', '        returns (uint256 reward)\n', '    {\n', '        reward = earned(msg.sender);\n', '        if (reward > 0) {\n', '            rewards[msg.sender] = 0;\n', '            fey.safeTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Starts the distribution\n', '     *\n', '     * This must be called to start the distribution cycle\n', '     * and allow stakers to start earning rewards\n', '     */\n', '    function notifyRewardAmount(uint256 reward)\n', '        external\n', '        onlyOwner\n', '        updateReward(address(0x0))\n', '    {\n', '        if (block.timestamp >= periodFinish) {\n', '            rewardRate = reward.div(DURATION);\n', '        } else {\n', '            uint256 remaining = periodFinish.sub(block.timestamp);\n', '            uint256 leftover = remaining.mul(rewardRate);\n', '            rewardRate = reward.add(leftover).div(DURATION);\n', '        }\n', '        uint256 balance = fey.balanceOf(address(this));\n', '        require(\n', '            rewardRate <= balance.div(DURATION),\n', "            'Provided reward too high'\n", '        );\n', '        lastUpdateTime = block.timestamp;\n', '        periodFinish = block.timestamp.add(DURATION);\n', '        emit RewardAdded(reward);\n', '    }\n', '}']