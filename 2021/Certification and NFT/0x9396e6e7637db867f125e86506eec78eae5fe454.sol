['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'import "./ICoinvestingDeFiCallee.sol";\n', 'import "./ICoinvestingDeFiFactory.sol";\n', 'import "./ICoinvestingDeFiPair.sol";\n', 'import "./IERC20.sol";\n', 'import "./Math.sol";\n', 'import "./UQ112x112.sol";\n', 'import "./CoinvestingDeFiERC20.sol";\n', '\n', 'contract CoinvestingDeFiPair is ICoinvestingDeFiPair, CoinvestingDeFiERC20 {\n', '    using SafeMath  for uint;\n', '    using UQ112x112 for uint224;\n', '\n', '    // Public variables\n', '    address public override factory;\n', '    uint public override kLast;\n', '    uint public override price0CumulativeLast;\n', '    uint public override price1CumulativeLast;\n', '    address public override token0;\n', '    address public override token1;\n', '\n', '    uint public constant override MINIMUM_LIQUIDITY = 10**3;\n', '        \n', '    // Private variables\n', '    uint32  private blockTimestampLast;\n', '    uint112 private reserve0;\n', '    uint112 private reserve1;    \n', '    uint private unlocked = 1;\n', '\n', "    bytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\n", '\n', '    // Modifiers\n', '    modifier lock() {\n', '        require(unlocked == 1, "PAIR: LOCKED");\n', '        unlocked = 0;\n', '        _;\n', '        unlocked = 1;\n', '    }\n', '\n', '    constructor() {\n', '        factory = payable(msg.sender);\n', '    }\n', '\n', '    // External functions\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function burn(address to) external override lock returns (\n', '        uint amount0,\n', '        uint amount1\n', '    ) \n', '    {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        address _token0 = token0;\n', '        address _token1 = token1;\n', '        uint balance0 = IERC20(_token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(_token1).balanceOf(address(this));\n', '        uint liquidity = balanceOf[address(this)];\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply;\n', '        amount0 = liquidity.mul(balance0) / _totalSupply;\n', '        amount1 = liquidity.mul(balance1) / _totalSupply;\n', '        require(\n', '            amount0 > 0 && amount1 > 0, \n', '            "PAIR: INSUF_LIQ_BURN"\n', '        );\n', '\n', '        _burn(address(this), liquidity);\n', '        _safeTransfer(_token0, to, amount0);\n', '        _safeTransfer(_token1, to, amount1);\n', '        balance0 = IERC20(_token0).balanceOf(address(this));\n', '        balance1 = IERC20(_token1).balanceOf(address(this));\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1); \n', '        emit Burn(msg.sender, amount0, amount1, to);\n', '    }\n', '    \n', '    // called once by the factory at time of deployment\n', '    function initialize(\n', '        address _token0,\n', '        address _token1\n', '    )\n', '    external\n', '    override\n', '    {\n', '        require(msg.sender == factory, "PAIR: CALLER_MUST_BE_FAC");\n', '        token0 = _token0;\n', '        token1 = _token1;\n', '    }\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function mint(address to) external override lock returns (uint liquidity) {\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        uint balance0 = IERC20(token0).balanceOf(address(this));\n', '        uint balance1 = IERC20(token1).balanceOf(address(this));\n', '        uint amount0 = balance0.sub(_reserve0);\n', '        uint amount1 = balance1.sub(_reserve1);\n', '\n', '        bool feeOn = _mintFee(_reserve0, _reserve1);\n', '        uint _totalSupply = totalSupply; \n', '        if (_totalSupply == 0) {\n', '            liquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n', '           _mint(address(0), MINIMUM_LIQUIDITY);\n', '        } else\n', '            liquidity = Math.min(\n', '                amount0.mul(_totalSupply) / _reserve0,\n', '                amount1.mul(_totalSupply) / _reserve1\n', '            );\n', '        require(liquidity > 0, "PAIR: INSUF_LIQ_MINT");\n', '        _mint(to, liquidity);\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        if (feeOn) kLast = uint(reserve0).mul(reserve1);\n', '        emit Mint(msg.sender, amount0, amount1);\n', '    }\n', '\n', '    // force balances to match reserves\n', '    function skim(address to) external override lock {\n', '        address _token0 = token0; \n', '        address _token1 = token1; \n', '        _safeTransfer(\n', '            _token0,\n', '            to,\n', '            IERC20(_token0).balanceOf(address(this)).sub(reserve0)\n', '        );\n', '        _safeTransfer(\n', '            _token1,\n', '            to,\n', '            IERC20(_token1).balanceOf(address(this)).sub(reserve1)\n', '        );\n', '    }\n', '\n', '    // this low-level function should be called from a contract which performs important safety checks\n', '    function swap(\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address to,\n', '        bytes calldata data\n', '    )\n', '    external\n', '    override\n', '    lock\n', '    {\n', '        require(\n', '            amount0Out > 0 || amount1Out > 0, \n', '            "PAIR: INSUF_OUT_AMT"\n', '        );\n', '\n', '        (uint112 _reserve0, uint112 _reserve1,) = getReserves();\n', '        require(\n', '            amount0Out < _reserve0 && amount1Out < _reserve1, \n', '            "PAIR: INSUF_LIQ"\n', '        );\n', '        \n', '        uint balance0;\n', '        uint balance1;\n', '        {\n', '            address _token0 = token0;\n', '            address _token1 = token1;\n', '            require(\n', '                to != _token0 && to != _token1, \n', '                "PAIR: INV_TO"\n', '            );\n', '\n', '            if (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\n', '            if (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\n', '            if (data.length > 0) \n', '                ICoinvestingDeFiCallee(to).coinvestingDeFiCall(\n', '                    payable(msg.sender),\n', '                    amount0Out,\n', '                    amount1Out,\n', '                    data\n', '                );\n', '            balance0 = IERC20(_token0).balanceOf(address(this));\n', '            balance1 = IERC20(_token1).balanceOf(address(this));\n', '        } \n', '\n', '        uint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\n', '        uint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\n', '        require(amount0In > 0 || amount1In > 0, "PAIR: INSUF_IN_AMT");\n', '        {\n', '            uint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n', '            uint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n', '            require(\n', '                balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2),\n', '                "Pair: K"\n', '            );\n', '        }\n', '\n', '        _update(balance0, balance1, _reserve0, _reserve1);\n', '        emit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n', '    }\n', '\n', '    // force reserves to match balances\n', '    function sync() external override lock {\n', '        _update(\n', '            IERC20(token0).balanceOf(address(this)), \n', '            IERC20(token1).balanceOf(address(this)), \n', '            reserve0, \n', '            reserve1\n', '        );\n', '    }\n', '\n', '    // External functions that are view\n', '    function getReserves() \n', '        public\n', '        override \n', '        view \n', '        returns (\n', '            uint112 _reserve0, \n', '            uint112 _reserve1, \n', '            uint32 _blockTimestampLast\n', '        ) \n', '    {\n', '        _reserve0 = reserve0;\n', '        _reserve1 = reserve1;\n', '        _blockTimestampLast = blockTimestampLast;\n', '    }\n', '\n', '    // Private functions\n', '    // if fee is on, mint liquidity equivalent to 1/6th of the growth in sqrt(k)\n', '    function _mintFee(\n', '        uint112 _reserve0,\n', '        uint112 _reserve1\n', '    )\n', '    private\n', '    returns (bool feeOn)\n', '    {\n', '        address feeTo = ICoinvestingDeFiFactory(factory).feeTo();\n', '        feeOn = feeTo != address(0);\n', '        uint _kLast = kLast; // gas savings\n', '        if (feeOn) {\n', '            if (_kLast != 0) {\n', '                uint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\n', '                uint rootKLast = Math.sqrt(_kLast);\n', '                if (rootK > rootKLast) {\n', '                    uint numerator = totalSupply.mul(rootK.sub(rootKLast));\n', '                    uint denominator = rootK.mul(5).add(rootKLast);\n', '                    uint liquidity = numerator / denominator;\n', '                    if (liquidity > 0) _mint(feeTo, liquidity);\n', '                }\n', '            }\n', '        } else if (_kLast != 0) {\n', '           kLast = 0; \n', '        } \n', '    }\n', '\n', '    function _safeTransfer(\n', '        address token,\n', '        address to,\n', '        uint value\n', '    ) \n', '    private \n', '    {\n', '        (bool success, bytes memory data) = \n', '            token.call(abi.encodeWithSelector(SELECTOR, to, value));\n', '        require(\n', '            success && (data.length == 0 || abi.decode(data, (bool))),\n', '            "PAIR: TXFR_FL"\n', '        );\n', '    }\n', '\n', '    // update reserves and, on the first call per block, price accumulators\n', '    function _update(\n', '        uint balance0,\n', '        uint balance1,\n', '        uint112 _reserve0,\n', '        uint112 _reserve1\n', '    ) \n', '    private\n', '    {\n', '        require(balance0 <= type(uint112).max && balance1 <= type(uint).max, "PAIR: OVF");\n', '        uint32 blockTimestamp = uint32(block.timestamp % 2**32);\n', '        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\n', '        if (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\n', '            // * never overflows, and + overflow is desired\n', '            price0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\n', '            price1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n', '        }\n', '        reserve0 = uint112(balance0);\n', '        reserve1 = uint112(balance1);\n', '        blockTimestampLast = blockTimestamp;\n', '        emit Sync(reserve0, reserve1);\n', '    }\n', '}']