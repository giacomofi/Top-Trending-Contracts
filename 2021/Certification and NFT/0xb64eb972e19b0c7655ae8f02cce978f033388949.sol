['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.9.0;\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe maths\n', '// ----------------------------------------------------------------------------\n', 'library MySafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        if (a == 0) {\n', '            revert();\n', '        }\n', '        c = a * b;\n', '        require(c / a == b);\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '// ----------------------------------------------------------------------------\n', 'abstract contract MyERC20Interface {\n', '    function totalSupply() external virtual view returns (uint256);\n', '    function balanceOf(address _tokenOwner) external virtual view returns (uint256 balance);\n', '    function allowance(address _tokenOwner, address _spender) external virtual view returns (uint256 remaining);\n', '    function transfer(address _to, uint256 _tokens) external virtual;\n', '    function approve(address _spender, uint256 _tokens) external virtual;\n', '    function transferFrom(address _from, address _to, uint256 _tokens) external virtual;\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokens);\n', '    event Approval(address indexed _tokenOwner, address indexed _spender, uint256 _tokens);\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'abstract contract MyOwned {\n', '    address internal owner_;\n', '    address internal newOwner_;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() {\n', '        owner_ = msg.sender;\n', '    }\n', '\n', '    function owner() external view returns (address) {\n', '        return owner_;\n', '    }    \n', '\n', '    function transferOwnership(address _newOwner) external {\n', '        require(msg.sender == owner_);\n', '        newOwner_ = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() external {\n', '        require(msg.sender == newOwner_);\n', '        emit OwnershipTransferred(owner_, newOwner_);\n', '        owner_ = newOwner_;\n', '        newOwner_ = address(0);\n', '    }\n', '}\n', '\n', '/**\n', ' * The /**\n', '  * The Delegated contract allows a set of delegate accounts\n', '  * to perform special tasks such as admin tasks to the contract\n', '  */\n', ' contract MyDelegated is MyOwned {\n', '    mapping (address => bool) delegates;\n', '    \n', '    event DelegateChanged(address delegate, bool state);\n', '\n', '    constructor() {\n', '    }\n', '\n', '    fallback() external {\n', '    }\n', '\n', '    function checkDelegate(address _user) internal view {\n', '        require(_user == owner_ || delegates[_user]);\n', '    }\n', '    \n', '    function checkOwner(address _user) internal view {\n', '        require(_user == owner_);\n', '    }\n', '    \n', '    function setDelegate(address _address, bool _state) external {\n', '        checkDelegate(msg.sender);\n', '\n', '        delegates[_address] = _state;\n', '        \n', '        emit DelegateChanged(_address, _state);\n', '    }\n', ' \n', '    function isDelegate(address _account) external view returns (bool delegate)  {\n', '        return (_account == owner_ || delegates[_account]);\n', '    }\n', ' }\n', '\n', '// ----------------------------------------------------------------------------\n', '// NFTStore.Top Token\n', '// ----------------------------------------------------------------------------\n', 'contract NFTStoreTopToken is MyERC20Interface, MyDelegated {\n', '    using MySafeMath for uint256;\n', '\n', '    string internal name_ = "NFTStore.Top"; \n', '    string internal symbol_ = "NFTS";\n', '    uint256 internal  decimals_ = 18;\n', '    uint256 internal  totalSupply_ = 0;\n', '    bool internal halted_ = false;\n', '\n', '    mapping(address => uint256) internal balances_;\n', '    mapping(address => mapping(address => uint256)) internal allowed_;\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Constructor\n', '    // ------------------------------------------------------------------------\n', '    constructor() {\n', '    }\n', '\n', '    function name() external view returns (string memory) {\n', '        return name_;\n', '    }\n', '\n', '    function symbol() external view returns (string memory) {\n', '        return symbol_;\n', '    }\n', '\n', '    function decimals() external view returns (uint8) {\n', '        return uint8(decimals_);\n', '    }\n', '\n', '    function mint(address _to, uint256 _amount) external {\n', '        checkDelegate(msg.sender);\n', '        require(_to != address(0));\n', '        require(_amount > 0);\n', '\n', '        balances_[_to] = balances_[_to].add(_amount);\n', '        totalSupply_ = totalSupply_.add(_amount);\n', '        emit Transfer(address(0), _to, _amount);\n', '    }\n', '\n', '    function burn(address _to, uint256 _amount) external {\n', '        checkDelegate(msg.sender);\n', '        require(_amount > 0);\n', '\n', '        balances_[_to] = balances_[_to].sub(_amount);\n', '        totalSupply_ = totalSupply_.sub(_amount);\n', '        emit Transfer(_to, address(0), _amount);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Set the halted tag when the emergent case happened\n', '    // ------------------------------------------------------------------------\n', '    function setEmergentHalt(bool _tag) external {\n', '        checkOwner(msg.sender);\n', '        halted_ = _tag;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Total supply\n', '    // ------------------------------------------------------------------------\n', '    function totalSupply() external override view returns (uint256) {\n', '        return totalSupply_;\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Get the token balance for account `tokenOwner`\n', '    // ------------------------------------------------------------------------\n', '    function balanceOf(address _tokenOwner) external override view returns (uint256) {\n', '        return balances_[_tokenOwner];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', "    // Transfer the balance from token owner's account to `to` account\n", "    // - Owner's account must have sufficient balance to transfer\n", '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transfer(address _to, uint256 _tokens) external override {\n', '        require(!halted_);\n', '\n', '        balances_[msg.sender] = balances_[msg.sender].sub(_tokens);\n', '        balances_[_to] = balances_[_to].add(_tokens);\n', '\n', '        emit Transfer(msg.sender, _to, _tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n', "    // from the token owner's account\n", '    //\n', '    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n', '    // recommends that there are no checks for the approval double-spend attack\n', '    // as this should be implemented in user interfaces \n', '    // ------------------------------------------------------------------------\n', '    function approve(address _spender, uint256 _tokens) external override {\n', '        require(_spender != msg.sender);\n', '\n', '        allowed_[msg.sender][_spender] = _tokens;\n', '\n', '        emit Approval(msg.sender, _spender, _tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Transfer `tokens` from the `from` account to the `to` account\n', '    // \n', '    // The calling account must already have sufficient tokens approve(...)-d\n', '    // for spending from the `from` account and\n', '    // - From account must have sufficient balance to transfer\n', '    // - Spender must have sufficient allowance to transfer\n', '    // - 0 value transfers are allowed\n', '    // ------------------------------------------------------------------------\n', '    function transferFrom(address _from, address _to, uint256 _tokens) external override {\n', '        require(!halted_);\n', '\n', '        allowed_[_from][msg.sender] = allowed_[_from][msg.sender].sub(_tokens);\n', '        balances_[_from] = balances_[_from].sub(_tokens);\n', '        balances_[_to] = balances_[_to].add(_tokens);\n', '\n', '        emit Transfer(_from, _to, _tokens);\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Returns the amount of tokens approved by the owner that can be\n', "    // transferred to the spender's account\n", '    // ------------------------------------------------------------------------\n', '    function allowance(address _tokenOwner, address _spender) external override view returns (uint256) {\n', '        return allowed_[_tokenOwner][_spender];\n', '    }\n', '\n', '    // ------------------------------------------------------------------------\n', '    // Owner can transfer out any accidentally sent ERC20 tokens\n', '    // ------------------------------------------------------------------------\n', '    function transferAnyERC20Token(address _tokenAddress, uint256 _tokens) external {\n', '        checkOwner(msg.sender);\n', '        MyERC20Interface(_tokenAddress).transfer(owner_, _tokens);\n', '    }\n', '}']