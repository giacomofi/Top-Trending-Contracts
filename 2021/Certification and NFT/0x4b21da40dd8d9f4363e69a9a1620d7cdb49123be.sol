['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-03\n', '*/\n', '\n', '// Sources flattened with hardhat v2.3.0 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/lib/FixedPointMath.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'library FixedPointMath {\n', '  uint256 public constant DECIMALS = 18;\n', '  uint256 public constant SCALAR = 10**DECIMALS;\n', '\n', '  struct uq192x64 {\n', '    uint256 x;\n', '  }\n', '\n', '  function fromU256(uint256 value) internal pure returns (uq192x64 memory) {\n', '    uint256 x;\n', '    require(value == 0 || (x = value * SCALAR) / SCALAR == value);\n', '    return uq192x64(x);\n', '  }\n', '\n', '  function maximumValue() internal pure returns (uq192x64 memory) {\n', '    return uq192x64(uint256(-1));\n', '  }\n', '\n', '  function add(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\n', '    uint256 x;\n', '    require((x = self.x + value.x) >= self.x);\n', '    return uq192x64(x);\n', '  }\n', '\n', '  function add(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n', '    return add(self, fromU256(value));\n', '  }\n', '\n', '  function sub(uq192x64 memory self, uq192x64 memory value) internal pure returns (uq192x64 memory) {\n', '    uint256 x;\n', '    require((x = self.x - value.x) <= self.x);\n', '    return uq192x64(x);\n', '  }\n', '\n', '  function sub(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n', '    return sub(self, fromU256(value));\n', '  }\n', '\n', '  function mul(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n', '    uint256 x;\n', '    require(value == 0 || (x = self.x * value) / value == self.x);\n', '    return uq192x64(x);\n', '  }\n', '\n', '  function div(uq192x64 memory self, uint256 value) internal pure returns (uq192x64 memory) {\n', '    require(value != 0);\n', '    return uq192x64(self.x / value);\n', '  }\n', '\n', '  function cmp(uq192x64 memory self, uq192x64 memory value) internal pure returns (int256) {\n', '    if (self.x < value.x) {\n', '      return -1;\n', '    }\n', '\n', '    if (self.x > value.x) {\n', '      return 1;\n', '    }\n', '\n', '    return 0;\n', '  }\n', '\n', '  function decode(uq192x64 memory self) internal pure returns (uint256) {\n', '    return self.x / SCALAR;\n', '  }\n', '}\n', '\n', '\n', '// File contracts/interfaces/IDetailedERC20.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'interface IDetailedERC20 is IERC20 {\n', '  function name() external returns (string memory);\n', '  function symbol() external returns (string memory);\n', '  function decimals() external returns (uint8);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IMintableERC20.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'interface IMintableERC20 is IDetailedERC20{\n', '  function mint(address _recipient, uint256 _amount) external;\n', '  function burnFrom(address account, uint256 amount) external;\n', '  function lowerHasMinted(uint256 amount) external;\n', '  function lowerHasMintedIfNeeded(uint256 amount) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IRewardVesting.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'interface IRewardVesting  {\n', '    function addEarning(address user, uint256 amount, uint256 durationInSecs) external;\n', '    function userBalances(address user) external view returns (uint256 bal);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// File contracts/farm/Pool.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '/// @title Pool\n', '///\n', '/// @dev A library which provides the Pool data struct and associated functions.\n', 'library Pool {\n', '  using FixedPointMath for FixedPointMath.uq192x64;\n', '  using Pool for Pool.Data;\n', '  using Pool for Pool.List;\n', '  using SafeMath for uint256;\n', '\n', '  struct Context {\n', '    uint256 rewardRate;\n', '    uint256 totalRewardWeight;\n', '  }\n', '\n', '  struct Data {\n', '    IERC20 token;\n', '    uint256 totalDeposited;\n', '    uint256 rewardWeight;\n', '    FixedPointMath.uq192x64 accumulatedRewardWeight;\n', '    // for vesting\n', '    uint256 lastUpdatedBlock;\n', '    bool needVesting;\n', '    // for referral power calculation\n', '    uint256 vestingDurationInSecs;\n', '    bool onReferralBonus;\n', '    uint256 totalReferralAmount; // deposited through referral\n', '    FixedPointMath.uq192x64 accumulatedReferralWeight;\n', '  }\n', '\n', '  struct List {\n', '    Data[] elements;\n', '  }\n', '\n', '  /// @dev Updates the pool.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  function update(Data storage _data, Context storage _ctx) internal {\n', '    _data.accumulatedRewardWeight = _data.getUpdatedAccumulatedRewardWeight(_ctx);\n', '\n', '    if (_data.onReferralBonus) {\n', '      _data.accumulatedReferralWeight = _data.getUpdatedAccumulatedReferralWeight(_ctx);\n', '    }\n', '\n', '    _data.lastUpdatedBlock = block.number;\n', '  }\n', '\n', '  /// @dev Gets the rate at which the pool will distribute rewards to stakers.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  ///\n', '  /// @return the reward rate of the pool in tokens per block.\n', '  function getRewardRate(Data storage _data, Context storage _ctx)\n', '    internal view\n', '    returns (uint256)\n', '  {\n', '    return _ctx.rewardRate.mul(_data.rewardWeight).div(_ctx.totalRewardWeight);\n', '  }\n', '\n', '  /// @dev Gets the accumulated reward weight of a pool.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  ///\n', '  /// @return the accumulated reward weight.\n', '  function getUpdatedAccumulatedRewardWeight(Data storage _data, Context storage _ctx)\n', '    internal view\n', '    returns (FixedPointMath.uq192x64 memory)\n', '  {\n', '    if (_data.totalDeposited == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\n', '    if (_elapsedTime == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    uint256 _rewardRate = _data.getRewardRate(_ctx);\n', '    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\n', '\n', '    if (_distributeAmount == 0) {\n', '      return _data.accumulatedRewardWeight;\n', '    }\n', '\n', '    FixedPointMath.uq192x64 memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalDeposited);\n', '    return _data.accumulatedRewardWeight.add(_rewardWeight);\n', '  }\n', '\n', '  /// @dev Gets the accumulated referral weight of a pool.\n', '  ///\n', '  /// @param _ctx the pool context.\n', '  ///\n', '  /// @return the accumulated reward weight.\n', '  function getUpdatedAccumulatedReferralWeight(Data storage _data, Context storage _ctx)\n', '    internal view\n', '    returns (FixedPointMath.uq192x64 memory)\n', '  {\n', '    if (_data.totalReferralAmount == 0) {\n', '\n', '      return _data.accumulatedReferralWeight;\n', '    }\n', '\n', '    uint256 _elapsedTime = block.number.sub(_data.lastUpdatedBlock);\n', '    if (_elapsedTime == 0) {\n', '      return _data.accumulatedReferralWeight;\n', '    }\n', '\n', '    uint256 _rewardRate = _data.getRewardRate(_ctx);\n', '    uint256 _distributeAmount = _rewardRate.mul(_elapsedTime);\n', '\n', '    if (_distributeAmount == 0) {\n', '      return _data.accumulatedReferralWeight;\n', '    }\n', '\n', '    FixedPointMath.uq192x64 memory _rewardWeight = FixedPointMath.fromU256(_distributeAmount).div(_data.totalReferralAmount);\n', '    return _data.accumulatedReferralWeight.add(_rewardWeight);\n', '  }  \n', '\n', '  /// @dev Adds an element to the list.\n', '  ///\n', '  /// @param _element the element to add.\n', '  function push(List storage _self, Data memory _element) internal {\n', '    _self.elements.push(_element);\n', '  }\n', '\n', '  /// @dev Gets an element from the list.\n', '  ///\n', '  /// @param _index the index in the list.\n', '  ///\n', '  /// @return the element at the specified index.\n', '  function get(List storage _self, uint256 _index) internal view returns (Data storage) {\n', '    return _self.elements[_index];\n', '  }\n', '\n', '  /// @dev Gets the last element in the list.\n', '  ///\n', '  /// This function will revert if there are no elements in the list.\n', '  ///ck\n', '  /// @return the last element in the list.\n', '  function last(List storage _self) internal view returns (Data storage) {\n', '    return _self.elements[_self.lastIndex()];\n', '  }\n', '\n', '  /// @dev Gets the index of the last element in the list.\n', '  ///\n', '  /// This function will revert if there are no elements in the list.\n', '  ///\n', '  /// @return the index of the last element.\n', '  function lastIndex(List storage _self) internal view returns (uint256) {\n', '    uint256 _length = _self.length();\n', '    return _length.sub(1, "Pool.List: list is empty");\n', '  }\n', '\n', '  /// @dev Gets the number of elements in the list.\n', '  ///\n', '  /// @return the number of elements.\n', '  function length(List storage _self) internal view returns (uint256) {\n', '    return _self.elements.length;\n', '  }\n', '}\n', '\n', '\n', '// File contracts/farm/Stake.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '/// @title Stake\n', '///\n', '/// @dev A library which provides the Stake data struct and associated functions.\n', 'library Stake {\n', '  using FixedPointMath for FixedPointMath.uq192x64;\n', '  using Pool for Pool.Data;\n', '  using SafeMath for uint256;\n', '  using Stake for Stake.Data;\n', '\n', '  struct Data {\n', '    uint256 totalDeposited;\n', '    uint256 totalUnclaimed;\n', '    FixedPointMath.uq192x64 lastAccumulatedWeight;\n', '  }\n', '\n', '  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\n', '    _self.totalUnclaimed = _self.getUpdatedTotalUnclaimed(_pool, _ctx);\n', '    _self.lastAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n', '  }\n', '\n', '  function getUpdatedTotalUnclaimed(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\n', '    internal view\n', '    returns (uint256)\n', '  {\n', '    FixedPointMath.uq192x64 memory _currentAccumulatedWeight = _pool.getUpdatedAccumulatedRewardWeight(_ctx);\n', '    FixedPointMath.uq192x64 memory _lastAccumulatedWeight = _self.lastAccumulatedWeight;\n', '\n', '    if (_currentAccumulatedWeight.cmp(_lastAccumulatedWeight) == 0) {\n', '      return _self.totalUnclaimed;\n', '    }\n', '\n', '    uint256 _distributedAmount = _currentAccumulatedWeight\n', '      .sub(_lastAccumulatedWeight)\n', '      .mul(_self.totalDeposited)\n', '      .decode();\n', '\n', '    return _self.totalUnclaimed.add(_distributedAmount);\n', '  }\n', '}\n', '\n', '\n', '// File contracts/farm/ReferralPower.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '/// @title ReferralPower\n', '///\n', '/// @dev A library which provides the ReferralPower data struct and associated functions.\n', 'library ReferralPower {\n', '  using FixedPointMath for FixedPointMath.uq192x64;\n', '  using Pool for Pool.Data;\n', '  using SafeMath for uint256;\n', '  using ReferralPower for ReferralPower.Data;\n', '\n', '  struct Data {\n', '    uint256 totalDeposited;\n', '    uint256 totalReferralPower;\n', '    FixedPointMath.uq192x64 lastAccumulatedReferralPower;\n', '  }\n', '\n', '  function update(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx) internal {\n', '    _self.totalReferralPower = _self.getUpdatedTotalReferralPower(_pool, _ctx);\n', '    _self.lastAccumulatedReferralPower = _pool.getUpdatedAccumulatedReferralWeight(_ctx);\n', '  }\n', '\n', '  function getUpdatedTotalReferralPower(Data storage _self, Pool.Data storage _pool, Pool.Context storage _ctx)\n', '    internal view\n', '    returns (uint256)\n', '  {\n', '    FixedPointMath.uq192x64 memory _currentAccumulatedReferralPower = _pool.getUpdatedAccumulatedReferralWeight(_ctx);\n', '    FixedPointMath.uq192x64 memory lastAccumulatedReferralPower = _self.lastAccumulatedReferralPower;\n', '\n', '    if (_currentAccumulatedReferralPower.cmp(lastAccumulatedReferralPower) == 0) {\n', '      return _self.totalReferralPower;\n', '    }\n', '\n', '    uint256 _distributedAmount = _currentAccumulatedReferralPower\n', '      .sub(lastAccumulatedReferralPower)\n', '      .mul(_self.totalDeposited)\n', '      .decode();\n', '\n', '    return _self.totalReferralPower.add(_distributedAmount);\n', '  }\n', '}\n', '\n', '\n', '// File contracts/farm/StakingPool.sol\n', '\n', '/*\n', '    Copyright 2021 Cook Finance.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '*/\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// import "hardhat/console.sol";\n', '\n', '/// @dev A contract which allows users to stake to farm tokens.\n', '///\n', "/// This contract was inspired by Chef Nomi's 'MasterChef' contract which can be found in this\n", '/// repository: https://github.com/sushiswap/sushiswap.\n', 'contract StakingPools is ReentrancyGuard {\n', '  using FixedPointMath for FixedPointMath.uq192x64;\n', '  using Pool for Pool.Data;\n', '  using Pool for Pool.List;\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '  using Stake for Stake.Data;\n', '  using ReferralPower for ReferralPower.Data;\n', '\n', '  event PendingGovernanceUpdated(\n', '    address pendingGovernance\n', '  );\n', '\n', '  event GovernanceUpdated(\n', '    address governance\n', '  );\n', '\n', '  event RewardRateUpdated(\n', '    uint256 rewardRate\n', '  );\n', '\n', '  event PoolRewardWeightUpdated(\n', '    uint256 indexed poolId,\n', '    uint256 rewardWeight\n', '  );\n', '\n', '  event PoolCreated(\n', '    uint256 indexed poolId,\n', '    IERC20 indexed token\n', '  );\n', '\n', '  event TokensDeposited(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  event TokensWithdrawn(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  event TokensClaimed(\n', '    address indexed user,\n', '    uint256 indexed poolId,\n', '    uint256 amount\n', '  );\n', '\n', '  event PauseUpdated(\n', '    bool status\n', '  );\n', '\n', '  event SentinelUpdated(\n', '    address sentinel\n', '  );\n', '\n', '  event RewardVestingUpdated(\n', '    IRewardVesting rewardVesting\n', '  );\n', '\n', '  event NewReferralAdded(\n', '    address referral, address referee\n', '  );\n', '\n', '  /// @dev The token which will be minted as a reward for staking.\n', '  IERC20 public reward;\n', '\n', '  /// @dev The address of reward vesting.\n', '  IRewardVesting public rewardVesting;\n', '\n', '  /// @dev The address of the account which currently has administrative capabilities over this contract.\n', '  address public governance;\n', '\n', '  address public pendingGovernance;\n', '\n', '  /// @dev The address of the account which can perform emergency activities\n', '  address public sentinel;\n', '\n', '  /// @dev Tokens are mapped to their pool identifier plus one. Tokens that do not have an associated pool\n', '  /// will return an identifier of zero.\n', '  mapping(IERC20 => uint256) public tokenPoolIds;\n', '\n', '  /// @dev The context shared between the pools.\n', '  Pool.Context private _ctx;\n', '\n', '  /// @dev A list of all of the pools.\n', '  Pool.List private _pools;\n', '\n', '  /// @dev A mapping of all of the user stakes mapped first by pool and then by address.\n', '  mapping(address => mapping(uint256 => Stake.Data)) private _stakes;\n', '\n', '  /// @dev A mapping of all of the referral power mapped first by pool and then by address.\n', '  mapping(address => mapping(uint256 => ReferralPower.Data)) private _referralPowers;\n', '\n', '/// @dev A mapping of all of the referee staker power mapped first by pool and then by referral address.\n', '  mapping(address => mapping(uint256 => address)) public myReferral;\n', '\n', '  /// @dev A mapping of known referrals mapped first by pool and then by address.\n', '  mapping(address => mapping(uint256 => bool)) public referralIsKnown;\n', '\n', '  /// @dev A mapping of referral Address mapped first by pool and then by nextReferral.\n', '  mapping(uint256 => mapping(uint256 => address)) public referralList;\n', '\n', '  /// @dev index record next user index mapped by pool\n', '  mapping(uint256 => uint256) public nextReferral;\n', '\n', '  // @dev A mapping of all of the referee staker referred by me. Mapping as by pool id and then by my address then referee array\n', '  mapping(uint256 => mapping(address => address[])) public myreferees;\n', '\n', '  /// @dev A flag indicating if claim should be halted\n', '  bool public pause;\n', '\n', '  constructor(\n', '    IMintableERC20 _reward,\n', '    address _governance,\n', '    address _sentinel,\n', '    IRewardVesting _rewardVesting\n', '  ) public {\n', '    require(_governance != address(0), "StakingPools: governance address cannot be 0x0");\n', '    require(_sentinel != address(0), "StakingPools: sentinel address cannot be 0x0");\n', '\n', '    reward = _reward;\n', '    governance = _governance;\n', '    sentinel = _sentinel;\n', '    rewardVesting = _rewardVesting;\n', '  }\n', '\n', '  /// @dev A modifier which reverts when the caller is not the governance.\n', '  modifier onlyGovernance() {\n', '    require(msg.sender == governance, "StakingPools: only governance");\n', '    _;\n', '  }\n', '\n', '  ///@dev modifier add referral to referrallist. Users are indexed in order to keep track of\n', '  modifier checkIfNewReferral(uint256 pid, address referral) {\n', '    Pool.Data storage _pool = _pools.get(pid);\n', '\n', '    if (_pool.onReferralBonus && referral != address(0)) {\n', '      if (!referralIsKnown[referral][pid]) {\n', '          referralList[pid][nextReferral[pid]] = referral;\n', '          referralIsKnown[referral][pid] = true;\n', '          nextReferral[pid]++;\n', '\n', '          emit NewReferralAdded(referral, msg.sender);\n', '      }\n', '\n', "      // add referee to referral's myreferee array\n", '      bool toAdd = true;\n', '      address refereeAddr = msg.sender;\n', '      address[] storage  referees = myreferees[pid][referral];\n', '      for (uint256 i = 0; i < referees.length; i++) {\n', '        if (referees[i] == refereeAddr) {\n', '          toAdd = false;\n', '        }\n', '      }\n', '\n', '      if (toAdd) {\n', '        referees.push(refereeAddr);\n', '      }\n', '    } \n', '\n', '    _;\n', '  }\n', '\n', '  /// @dev Sets the governance.\n', '  ///\n', '  /// This function can only called by the current governance.\n', '  ///\n', '  /// @param _pendingGovernance the new pending governance.\n', '  function setPendingGovernance(address _pendingGovernance) external onlyGovernance {\n', '    require(_pendingGovernance != address(0), "StakingPools: pending governance address cannot be 0x0");\n', '    pendingGovernance = _pendingGovernance;\n', '\n', '    emit PendingGovernanceUpdated(_pendingGovernance);\n', '  }\n', '\n', '  function acceptGovernance() external {\n', '    require(msg.sender == pendingGovernance, "StakingPools: only pending governance");\n', '\n', '    address _pendingGovernance = pendingGovernance;\n', '    governance = _pendingGovernance;\n', '\n', '    emit GovernanceUpdated(_pendingGovernance);\n', '  }\n', '\n', '  /// @dev Sets the distribution reward rate.\n', '  ///\n', '  /// This will update all of the pools.\n', '  ///\n', '  /// @param _rewardRate The number of tokens to distribute per second.\n', '  function setRewardRate(uint256 _rewardRate) external onlyGovernance {\n', '    _updatePools();\n', '\n', '    _ctx.rewardRate = _rewardRate;\n', '\n', '    emit RewardRateUpdated(_rewardRate);\n', '  }\n', '\n', '  /// @dev Creates a new pool.\n', '  function createPool(IERC20 _token, bool _needVesting, uint256 durationInSecs) external onlyGovernance returns (uint256) {\n', '    require(tokenPoolIds[_token] == 0, "StakingPools: token already has a pool");\n', '\n', '    uint256 _poolId = _pools.length();\n', '\n', '    _pools.push(Pool.Data({\n', '      token: _token,\n', '      totalDeposited: 0,\n', '      rewardWeight: 0,\n', '      accumulatedRewardWeight: FixedPointMath.uq192x64(0),\n', '      lastUpdatedBlock: block.number,\n', '      needVesting: _needVesting,\n', '      vestingDurationInSecs: durationInSecs,\n', '      onReferralBonus: false,\n', '      totalReferralAmount: 0,\n', '      accumulatedReferralWeight: FixedPointMath.uq192x64(0)\n', '    }));\n', '\n', '    tokenPoolIds[_token] = _poolId + 1;\n', '\n', '    emit PoolCreated(_poolId, _token);\n', '\n', '    return _poolId;\n', '  }\n', '\n', '  /// @dev Sets the reward weights of all of the pools.\n', '  ///\n', '  /// @param _rewardWeights The reward weights of all of the pools.\n', '  function setRewardWeights(uint256[] calldata _rewardWeights) external onlyGovernance {\n', '    require(_rewardWeights.length == _pools.length(), "StakingPools: weights length mismatch");\n', '\n', '    _updatePools();\n', '\n', '    uint256 _totalRewardWeight = _ctx.totalRewardWeight;\n', '    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '\n', '      uint256 _currentRewardWeight = _pool.rewardWeight;\n', '      if (_currentRewardWeight == _rewardWeights[_poolId]) {\n', '        continue;\n', '      }\n', '\n', '      // FIXME\n', '      _totalRewardWeight = _totalRewardWeight.sub(_currentRewardWeight).add(_rewardWeights[_poolId]);\n', '      _pool.rewardWeight = _rewardWeights[_poolId];\n', '\n', '      emit PoolRewardWeightUpdated(_poolId, _rewardWeights[_poolId]);\n', '    }\n', '\n', '    _ctx.totalRewardWeight = _totalRewardWeight;\n', '  }\n', '\n', '  /// @dev Stakes tokens into a pool.\n', '  ///\n', '  /// @param _poolId        the pool to deposit tokens into.\n', '  /// @param _depositAmount the amount of tokens to deposit.\n', '  /// @param referral       the address of referral.\n', '  function deposit(uint256 _poolId, uint256 _depositAmount, address referral) external nonReentrant checkIfNewReferral(_poolId, referral) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    address _referral = myReferral[msg.sender][_poolId];\n', '    if (_pool.onReferralBonus) {\n', '      if (referral != address(0)) {\n', '        require (_referral == address(0) || _referral == referral, "referred already");\n', '        myReferral[msg.sender][_poolId] = referral;\n', '      }\n', '\n', '      _referral = myReferral[msg.sender][_poolId];\n', '      if (_referral != address(0)) {\n', '        ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '        _referralPower.update(_pool, _ctx);\n', '      }\n', '    }\n', '\n', '    _deposit(_poolId, _depositAmount, _referral);\n', '  }\n', '\n', '  /// @dev Withdraws staked tokens from a pool.\n', '  ///\n', '  /// @param _poolId          The pool to withdraw staked tokens from.\n', '  /// @param _withdrawAmount  The number of tokens to withdraw.\n', '  function withdraw(uint256 _poolId, uint256 _withdrawAmount) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    address _referral = _pool.onReferralBonus ? myReferral[msg.sender][_poolId] : address(0);\n', '\n', '    if (_pool.onReferralBonus && _referral != address(0)) {\n', '      ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '      _referralPower.update(_pool, _ctx);\n', '    }\n', '\n', '    _claim(_poolId);\n', '    _withdraw(_poolId, _withdrawAmount, _referral);\n', '  }\n', '\n', '  /// @dev Claims all rewarded tokens from a pool.\n', '  ///\n', '  /// @param _poolId The pool to claim rewards from.\n', '  ///\n', '  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n', '  function claim(uint256 _poolId) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    _stake.update(_pool, _ctx);\n', '\n', '    _claim(_poolId);\n', '  }\n', '\n', '  /// @dev Claims all rewards from a pool and then withdraws all staked tokens.\n', '  ///\n', '  /// @param _poolId the pool to exit from.\n', '  function exit(uint256 _poolId) external nonReentrant {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    _pool.update(_ctx);\n', '\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '    _stake.update(_pool, _ctx);\n', '\n', '    address _referral = _pool.onReferralBonus ? myReferral[msg.sender][_poolId] : address(0);\n', '\n', '    if (_pool.onReferralBonus && _referral != address(0)) {\n', '      ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '      _referralPower.update(_pool, _ctx);\n', '    }\n', '\n', '    _claim(_poolId);\n', '    _withdraw(_poolId, _stake.totalDeposited, _referral);\n', '  }\n', '\n', '  /// @dev Gets the rate at which tokens are minted to stakers for all pools.\n', '  ///\n', '  /// @return the reward rate.\n', '  function rewardRate() external view returns (uint256) {\n', '    return _ctx.rewardRate;\n', '  }\n', '\n', '  /// @dev Gets the total reward weight between all the pools.\n', '  ///\n', '  /// @return the total reward weight.\n', '  function totalRewardWeight() external view returns (uint256) {\n', '    return _ctx.totalRewardWeight;\n', '  }\n', '\n', '  /// @dev Gets the number of pools that exist.\n', '  ///\n', '  /// @return the pool count.\n', '  function poolCount() external view returns (uint256) {\n', '    return _pools.length();\n', '  }\n', '\n', '  /// @dev Gets the token a pool accepts.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the token.\n', '  function getPoolToken(uint256 _poolId) external view returns (IERC20) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.token;\n', '  }\n', '\n', '  /// @dev Gets the total amount of funds staked in a pool.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the total amount of staked or deposited tokens.\n', '  function getPoolTotalDeposited(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.totalDeposited;\n', '  }\n', '\n', '  /// @dev Gets the total amount of referreal power in a pool.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the total amount of referreal power in pool.\n', '  function getPoolTotalReferralAmount(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.totalReferralAmount;\n', '  }\n', '\n', '  /// @dev Gets the reward weight of a pool which determines how much of the total rewards it receives per block.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the pool reward weight.\n', '  function getPoolRewardWeight(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.rewardWeight;\n', '  }\n', '\n', '  /// @dev Gets the amount of tokens per block being distributed to stakers for a pool.\n', '  ///\n', '  /// @param _poolId the identifier of the pool.\n', '  ///\n', '  /// @return the pool reward rate.\n', '  function getPoolRewardRate(uint256 _poolId) external view returns (uint256) {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    return _pool.getRewardRate(_ctx);\n', '  }\n', '\n', '  /// @dev Gets the number of tokens a user has staked into a pool.\n', '  ///\n', '  /// @param _account The account to query.\n', '  /// @param _poolId  the identifier of the pool.\n', '  ///\n', '  /// @return the amount of deposited tokens.\n', '  function getStakeTotalDeposited(address _account, uint256 _poolId) external view returns (uint256) {\n', '    Stake.Data storage _stake = _stakes[_account][_poolId];\n', '    return _stake.totalDeposited;\n', '  }\n', '\n', '  /// @dev Gets the number of unclaimed reward tokens a user can claim from a pool.\n', '  ///\n', '  /// @param _account The account to get the unclaimed balance of.\n', '  /// @param _poolId  The pool to check for unclaimed rewards.\n', '  ///\n', '  /// @return the amount of unclaimed reward tokens a user has in a pool.\n', '  function getStakeTotalUnclaimed(address _account, uint256 _poolId) external view returns (uint256) {\n', '    Stake.Data storage _stake = _stakes[_account][_poolId];\n', '    return _stake.getUpdatedTotalUnclaimed(_pools.get(_poolId), _ctx);\n', '  }\n', '\n', '  /// @dev Gets address accumulated power.\n', '  ///\n', '  /// @param _referral The referral account to get accumulated power.\n', '  /// @param _poolId  The pool to check for accumulated referral power.\n', '  ///\n', '  /// @return the amount of accumulated power a user has in a pool.\n', '  function getAccumulatedReferralPower(address _referral, uint256 _poolId) external view returns (uint256) {\n', '    ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '    return _referralPower.getUpdatedTotalReferralPower(_pools.get(_poolId), _ctx);\n', '  }\n', '\n', '  /// @dev Gets address of referral address by index\n', '  ///\n', '  /// @param _poolId The pool to get referral address\n', '  /// @param _referralIndex the index to get referral address\n', '  ///\n', '  /// @return the referral address in a specifgic pool with index. \n', '  function getPoolReferral(uint256 _poolId, uint256 _referralIndex) external view returns (address) {\n', '    return referralList[_poolId][_referralIndex];\n', '  }\n', '\n', '  /// @dev Gets addressed of referee referred by a referral\n', '  ///\n', '  /// @param _poolId The pool to get referral address\n', '  /// @param referral the address of referral to find all its referees\n', '  ///\n', '  /// @return the address array of referees\n', '  function getPoolreferee(uint256 _poolId, address referral) external view returns(address[] memory) {\n', '    return myreferees[_poolId][referral];\n', '  }\n', '\n', '  /// @dev Updates all of the pools.\n', '  function _updatePools() internal {\n', '    for (uint256 _poolId = 0; _poolId < _pools.length(); _poolId++) {\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '      _pool.update(_ctx);\n', '    }\n', '  }\n', '\n', '  /// @dev Stakes tokens into a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId        the pool to deposit tokens into.\n', '  /// @param _depositAmount the amount of tokens to deposit.\n', '  /// @param _referral      the address of referral.\n', '  function _deposit(uint256 _poolId, uint256 _depositAmount, address _referral) internal {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    _pool.totalDeposited = _pool.totalDeposited.add(_depositAmount);\n', '    _stake.totalDeposited = _stake.totalDeposited.add(_depositAmount);\n', '\n', '    if (_pool.onReferralBonus && _referral != address(0)) {\n', '      ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '      _pool.totalReferralAmount = _pool.totalReferralAmount.add(_depositAmount);\n', '      _referralPower.totalDeposited = _referralPower.totalDeposited.add(_depositAmount);\n', '    }\n', '\n', '    _pool.token.safeTransferFrom(msg.sender, address(this), _depositAmount);\n', '\n', '    emit TokensDeposited(msg.sender, _poolId, _depositAmount);\n', '  }\n', '\n', '  /// @dev Withdraws staked tokens from a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId          The pool to withdraw staked tokens from.\n', '  /// @param _withdrawAmount  The number of tokens to withdraw.\n', "  /// @param _referral        The referral's address for reducing referral power accumulation.\n", '  function _withdraw(uint256 _poolId, uint256 _withdrawAmount, address _referral) internal {\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    _pool.totalDeposited = _pool.totalDeposited.sub(_withdrawAmount);\n', '    _stake.totalDeposited = _stake.totalDeposited.sub(_withdrawAmount);\n', '\n', '    if (_pool.onReferralBonus && _referral != address(0)) {\n', '      ReferralPower.Data storage _referralPower = _referralPowers[_referral][_poolId];\n', '      _pool.totalReferralAmount = _pool.totalReferralAmount.sub(_withdrawAmount);\n', '      _referralPower.totalDeposited = _referralPower.totalDeposited.sub(_withdrawAmount);\n', '    }\n', '\n', '    _pool.token.safeTransfer(msg.sender, _withdrawAmount);\n', '\n', '    emit TokensWithdrawn(msg.sender, _poolId, _withdrawAmount);\n', '  }\n', '\n', '  /// @dev Claims all rewarded tokens from a pool.\n', '  ///\n', '  /// The pool and stake MUST be updated before calling this function.\n', '  ///\n', '  /// @param _poolId The pool to claim rewards from.\n', '  ///\n', '  /// @notice use this function to claim the tokens from a corresponding pool by ID.\n', '  function _claim(uint256 _poolId) internal {\n', '    require(!pause, "StakingPools: emergency pause enabled");\n', '\n', '    Pool.Data storage _pool = _pools.get(_poolId);\n', '    Stake.Data storage _stake = _stakes[msg.sender][_poolId];\n', '\n', '    uint256 _claimAmount = _stake.totalUnclaimed;\n', '    _stake.totalUnclaimed = 0;\n', '\n', '    if(_pool.needVesting){\n', '      reward.approve(address(rewardVesting),uint(-1));\n', '      rewardVesting.addEarning(msg.sender, _claimAmount, _pool.vestingDurationInSecs);\n', '    } else {\n', '      reward.safeTransfer(msg.sender, _claimAmount);\n', '    }\n', '\n', '    emit TokensClaimed(msg.sender, _poolId, _claimAmount);\n', '  }\n', '\n', '  /// @dev Updates the reward vesting contract\n', '  ///\n', '  /// @param _rewardVesting the new reward vesting contract\n', '  function setRewardVesting(IRewardVesting _rewardVesting) external {\n', '    require(pause && (msg.sender == governance || msg.sender == sentinel), "StakingPools: not paused, or not governance or sentinel");\n', '    rewardVesting = _rewardVesting;\n', '    emit RewardVestingUpdated(_rewardVesting);\n', '  }\n', '\n', '  /// @dev Sets the address of the sentinel\n', '  ///\n', '  /// @param _sentinel address of the new sentinel\n', '  function setSentinel(address _sentinel) external onlyGovernance {\n', '      require(_sentinel != address(0), "StakingPools: sentinel address cannot be 0x0.");\n', '      sentinel = _sentinel;\n', '      emit SentinelUpdated(_sentinel);\n', '  }\n', '\n', '  /// @dev Sets if the contract should enter emergency pause mode.\n', '  ///\n', '  /// There are 2 main reasons to pause:\n', '  ///     1. Need to shut down claims in case of any issues in the reward vesting contract\n', '  ///     2. Need to migrate to a new reward vesting contract\n', '  ///\n', '  /// While this contract is paused, claim is disabled\n', '  ///\n', '  /// @param _pause if the contract should enter emergency pause mode.\n', '  function setPause(bool _pause) external {\n', '      require(msg.sender == governance || msg.sender == sentinel, "StakingPools: !(gov || sentinel)");\n', '      pause = _pause;\n', '      emit PauseUpdated(_pause);\n', '  }\n', '\n', "  /// @dev To start referral power calculation for a pool, referral power caculation won't turn on if the onReferralBonus is not set\n", '  ///\n', '  /// @param _poolId the pool to start referral power accumulation\n', '  function startReferralBonus(uint256 _poolId) external {\n', '      require(msg.sender == governance || msg.sender == sentinel, "startReferralBonus: !(gov || sentinel)");\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '      require(_pool.onReferralBonus == false, "referral bonus already on");\n', '      _pool.onReferralBonus = true;\n', '  }\n', '\n', "  /// @dev To stop referral power calculation for a pool, referral power caculation won't turn on if the onReferralBonus is not set\n", '  ///\n', '  /// @param _poolId the pool to stop referral power accumulation\n', '  function stoptReferralBonus(uint256 _poolId) external {\n', '      require(msg.sender == governance || msg.sender == sentinel, "stoptReferralBonus: !(gov || sentinel)");\n', '      Pool.Data storage _pool = _pools.get(_poolId);\n', '      require(_pool.onReferralBonus == true, "referral not turned on");\n', '      _pool.onReferralBonus = false;\n', '  }\n', '}']