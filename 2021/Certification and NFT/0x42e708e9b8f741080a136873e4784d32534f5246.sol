['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '    \n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * Returns the address of the current owner.\n', '     */\n', '    function governance() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferGovernance(address newOwner) internal virtual onlyGovernance {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/ReethClaimPolicyV1.sol\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '// This claim policy determines how much reeth is minted to a user based on time in the pool, eth spent and total eth value of strategy\n', '// Rules for this policy are: exponentially (per time) increasing rewards rate up to a certain point, then linearly increasing\n', '// To a maximum percent of claimback\n', '// There is a minimum amount of time required to stake before being eligible for claiming\n', '\n', 'interface Staker {\n', '    function getUserBalance(address _user) external view returns (uint256);\n', '    function getLastActionTime(address _user) external view returns (uint256);\n', '    function getLastETHSpent(address _user) external view returns (uint256);\n', '    function getETHSpentSinceAction(address _user) external view returns (uint256);\n', '}\n', '\n', 'interface PriceOracle {\n', '    function getLatestREETHPrice() external view returns (uint256);\n', '    function updateREETHPrice() external;\n', '}\n', '\n', 'interface ZsTokenProtocol {\n', '    function getCurrentStrategy() external view returns (address);\n', '}\n', '\n', 'contract ReethClaimPolicyV1 is Ownable, ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '    \n', '    // variables\n', '    uint256 public minStakeTime = 5; // At least 5 seconds staked before being able to claim reeth\n', '    uint256 public eFactor = 36; // The exponential factor that determines the early growth rate of claiming\n', '    uint256 public eFactorLength = 14 days; // The length of period where the eFactor applies\n', '    uint256 public maxEarlyAccumulation = 5200; // The most we can earn via the exponential early growth\n', '    uint256 public maxAccumulatedClaim = 44800; // Total maximum accumulation claim back\n', '    uint256 public dailyClaimRate = 500; // The amount of claim increases after the exponential growth phase\n', '    \n', '    address public reethAddress; // The address for the REETH tokens\n', '    address public zsTokenAddress;\n', '    address public stakerAddress; // The address for the staker\n', '    address public priceOracleAddress; // The address of the price oracle\n', '\n', '    uint256 constant DIVISION_FACTOR = 100000;\n', '    address constant WETH_ADDRESS = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH address\n', '\n', '    constructor(\n', '        address _reeth,\n', '        address _staker,\n', '        address _oracle\n', '    ) public {\n', '        reethAddress = _reeth;\n', '        stakerAddress = _staker;\n', '        priceOracleAddress = _oracle;\n', '    }\n', '    \n', '    modifier onlyStaker() {\n', '        require(_msgSender() == stakerAddress, "Only staker can call this function");\n', '        _;\n', '    }\n', '    \n', '    // functions\n', '    \n', '    \n', '    function getClaimBackPercent(address _user) public view returns (uint256) {\n', '        // This function will calculate the max amount of claimback percent the user can expect based on accumulation time\n', '        Staker _stake = Staker(stakerAddress);\n', '        // First do sanity checks\n', '        {\n', '            uint256 _bal = _stake.getUserBalance(_user);\n', '            if(_bal == 0){\n', '                return 0;\n', '            }\n', '            uint256 _spent = _stake.getETHSpentSinceAction(_user);\n', '            if(_spent == 0){\n', '                return 0;\n', '            }\n', '        }\n', '        uint256 lastTime = _stake.getLastActionTime(_user);\n', '        if(lastTime == 0){\n', '            return 0; // No deposits ever\n', '        }\n', '        if(now < lastTime + minStakeTime){\n', '            return 0; // Too soon to claim\n', '        }\n', '        uint256 timeDiff = now - lastTime; // Will be at least minStakeTime\n', '        \n', '        // Complicated math stuff\n', '        uint256 percent = eFactor.mul(timeDiff**2).div(1e10);\n', '        if(percent > maxEarlyAccumulation){\n', '            percent = maxEarlyAccumulation;\n', '        }\n', '        if(timeDiff > eFactorLength){\n', '            // Add an additional percent up to a higher percent\n', '            uint256 extra = dailyClaimRate.mul(timeDiff.sub(eFactorLength)).div(1 days);\n', '            if(extra > maxAccumulatedClaim){\n', '                extra = maxAccumulatedClaim;\n', '            }\n', '            percent = percent.add(extra);\n', '        }\n', '        return percent;\n', '    }\n', '    \n', '    // Claim call\n', '    function getClaimable(address _user) external onlyStaker returns (uint256){\n', '        require(priceOracleAddress != address(0), "Price oracle not set yet");\n', '        PriceOracle(priceOracleAddress).updateREETHPrice(); // Update the price\n', '        uint256 claimable = queryClaimable(_user);\n', '        return claimable;\n', '    }\n', '    \n', '    function queryClaimable(address _user) public view returns (uint256) {\n', '        require(PriceOracle(priceOracleAddress).getLatestREETHPrice() > 0, "There is no price yet determined for REETH");\n', '        require(stakerAddress != address(0), "Staker not set yet");\n', '        require(zsTokenAddress != address(0), "ZS token not set yet");\n', '        uint256 claimPercent = getClaimBackPercent(_user);\n', '        if(claimPercent == 0){\n', '            return 0;\n', '        }\n', '        uint256 stackValue = calculateUserETHValue(_user); // Stack value in eth\n', '        uint256 spentAmount = Staker(stakerAddress).getETHSpentSinceAction(_user);\n', '        if(spentAmount == 0 || stackValue == 0){\n', '            return 0;\n', '        }\n', '        uint256 claimable = stackValue.mul(claimPercent).div(DIVISION_FACTOR); // Maximum amount claimable in ETH based on stack\n', '        if(claimable > spentAmount){\n', '            claimable = spentAmount; // Cannot claim more than spent\n', '        }\n', '        uint256 reethPrice = PriceOracle(priceOracleAddress).getLatestREETHPrice();\n', '        // Convert claimable to reeth units\n', '        claimable = claimable.mul(10**uint256(IERC20(reethAddress).decimals())).div(10**uint256(IERC20(WETH_ADDRESS).decimals()));\n', '        // This is claimable in reeth\n', '        claimable = claimable.mul(1e18).div(reethPrice);\n', '        return claimable;\n', '    }\n', '    \n', '    function calculateUserETHValue(address _user) public view returns (uint256) {\n', "        // Now calculate the eth value of the user's strategy position\n", "        // This returns how much eth the user's staked position is worth\n", '        Staker _stake = Staker(stakerAddress);\n', '        uint256 _bal = _stake.getUserBalance(_user); // Amount of ZS tokens\n', '        if(_bal == 0){ return 0; }\n', '        ZsTokenProtocol zsToken = ZsTokenProtocol(zsTokenAddress);\n', '        address strategyAddress = zsToken.getCurrentStrategy(); \n', '        uint256 totalZS = IERC20(zsTokenAddress).totalSupply();\n', '        uint256 totalETH = IERC20(WETH_ADDRESS).balanceOf(zsTokenAddress);\n', '        uint256 totalREETH = IERC20(reethAddress).balanceOf(zsTokenAddress);\n', '        if(strategyAddress != address(0)){\n', '            totalETH += IERC20(WETH_ADDRESS).balanceOf(strategyAddress);\n', '            totalREETH += IERC20(reethAddress).balanceOf(strategyAddress);\n', '        }\n', '        uint256 reethPrice = PriceOracle(priceOracleAddress).getLatestREETHPrice();\n', '        // Convert reeth decimals to ETH\n', '        totalREETH = totalREETH.mul(10**uint256(IERC20(WETH_ADDRESS).decimals())).div(10**uint256(IERC20(reethAddress).decimals()));\n', '        totalETH += totalREETH.mul(reethPrice).div(1e18);\n', "        return totalETH.mul(_bal).div(totalZS); // This will be the user's equivalent balance in eth worth\n", '    }\n', '    \n', '    // Governance only functions\n', '    \n', '    // Timelock variables\n', '    \n', '    uint256 private _timelockStart; // The start of the timelock to change governance variables\n', '    uint256 private _timelockType; // The function that needs to be changed\n', '    uint256 constant TIMELOCK_DURATION = 86400; // Timelock is 24 hours\n', '    \n', '    // Reusable timelock variables\n', '    address private _timelock_address;\n', '    uint256[6] private _timelock_data;\n', '    \n', '    modifier timelockConditionsMet(uint256 _type) {\n', '        require(_timelockType == _type, "Timelock not acquired for this function");\n', '        _timelockType = 0; // Reset the type once the timelock is used\n', '        require(now >= _timelockStart + TIMELOCK_DURATION, "Timelock time not met");\n', '        _;\n', '    }\n', '    \n', '    // Change the owner of the token contract\n', '    // --------------------\n', '    function startGovernanceChange(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 1;\n', '        _timelock_address = _address;       \n', '    }\n', '    \n', '    function finishGovernanceChange() external onlyGovernance timelockConditionsMet(1) {\n', '        transferGovernance(_timelock_address);\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the claimable staker\n', '    // --------------------\n', '    function startChangeStaker(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 2;\n', '        _timelock_address = _address;\n', '        if(stakerAddress == address(0)){\n', '            _timelockType = 0;\n', '            internalChangeStaker(_timelock_address);\n', '        }\n', '    }\n', '    \n', '    function finishChangeStaker() external onlyGovernance timelockConditionsMet(2) {\n', '        internalChangeStaker(_timelock_address);\n', '    }\n', '    \n', '    function internalChangeStaker(address _addr) internal {\n', '        stakerAddress = _addr;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the price oracle\n', '    // --------------------\n', '    function startChangePriceOracle(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 3;\n', '        _timelock_address = _address;\n', '        if(priceOracleAddress == address(0)){\n', '            _timelockType = 0;\n', '            internalChangePriceOracle(_timelock_address);\n', '        }\n', '    }\n', '    \n', '    function finishChangePriceOracle() external onlyGovernance timelockConditionsMet(3) {\n', '        internalChangePriceOracle(_timelock_address);\n', '    }\n', '    \n', '    function internalChangePriceOracle(address _addr) internal {\n', '        priceOracleAddress = _addr;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the zs token\n', '    // --------------------\n', '    function startChangeZSToken(address _address) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 4;\n', '        _timelock_address = _address;\n', '        if(zsTokenAddress == address(0)){\n', '            _timelockType = 0;\n', '            internalChangeZSToken(_timelock_address);\n', '        }\n', '    }\n', '    \n', '    function finishChangeZSToken() external onlyGovernance timelockConditionsMet(4) {\n', '        internalChangeZSToken(_timelock_address);\n', '    }\n', '    \n', '    function internalChangeZSToken(address _addr) internal {\n', '        zsTokenAddress = _addr;\n', '    }\n', '    // --------------------\n', '    \n', '    // Change the claim factors\n', '    // --------------------\n', '    function startChangeClaimFactors(uint256 _minStake, uint256 _eFac, uint256 _eFacLength, uint256 _maxEarly,\n', '                                    uint256 _dailyPercent, uint256 _maxEnd) external onlyGovernance {\n', '        _timelockStart = now;\n', '        _timelockType = 5;\n', '        _timelock_data[0] = _minStake;\n', '        _timelock_data[1] = _eFac;\n', '        _timelock_data[2] = _eFacLength;\n', '        _timelock_data[3] = _maxEarly;\n', '        _timelock_data[4] = _dailyPercent;\n', '        _timelock_data[5] = _maxEnd;\n', '    }\n', '    \n', '    function finishChangeClaimFactors() external onlyGovernance timelockConditionsMet(5) {\n', '        minStakeTime = _timelock_data[0];\n', '        eFactor = _timelock_data[1];\n', '        eFactorLength = _timelock_data[2];\n', '        maxEarlyAccumulation = _timelock_data[3];\n', '        dailyClaimRate = _timelock_data[4];\n', '        maxAccumulatedClaim = _timelock_data[5];\n', '    }\n', '    // --------------------\n', '   \n', '}']