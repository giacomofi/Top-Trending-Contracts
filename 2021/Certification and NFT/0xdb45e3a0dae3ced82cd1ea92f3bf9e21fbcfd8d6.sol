['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Global Enums and Structs\n', '\n', '\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', '// Part: IAddressResolver\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/iaddressresolver\n', 'interface IAddressResolver {\n', '    function getAddress(bytes32 name) external view returns (address);\n', '\n', '    function getSynth(bytes32 key) external view returns (address);\n', '\n', '    function requireAndGetAddress(bytes32 name, string calldata reason)\n', '        external\n', '        view\n', '        returns (address);\n', '}\n', '\n', '// Part: ICurveFi\n', '\n', 'interface ICurveFi {\n', '    // function coins(int128) external returns (address);\n', '\n', '    // function underlying_coins(int128) external returns (address);\n', '\n', '    function coins(uint256) external returns (address);\n', '\n', '    function underlying_coins(uint256) external returns (address);\n', '\n', '    function get_virtual_price() external view returns (uint256);\n', '\n', '    function add_liquidity(\n', '        // sBTC pool\n', '        uint256[3] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // bUSD pool\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // stETH pool\n', '        uint256[2] calldata amounts,\n', '        uint256 min_mint_amount\n', '    ) external payable;\n', '\n', '    function add_liquidity(\n', '        // sBTC pool\n', '        uint256[3] calldata amounts,\n', '        uint256 min_mint_amount,\n', '        bool use_underlying\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // bUSD pool\n', '        uint256[4] calldata amounts,\n', '        uint256 min_mint_amount,\n', '        bool use_underlying\n', '    ) external;\n', '\n', '    function add_liquidity(\n', '        // stETH pool\n', '        uint256[2] calldata amounts,\n', '        uint256 min_mint_amount,\n', '        bool use_underlying\n', '    ) external payable;\n', '\n', '    function remove_liquidity_imbalance(\n', '        uint256[2] calldata amounts,\n', '        uint256 max_burn_amount\n', '    ) external;\n', '\n', '    function remove_liquidity(uint256 _amount, uint256[2] calldata amounts)\n', '        external;\n', '\n', '    function calc_withdraw_one_coin(uint256 _amount, int128 i)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_withdraw_one_coin(\n', '        uint256 _amount,\n', '        int128 i,\n', '        bool use_underlying\n', '    ) external view returns (uint256);\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amount,\n', '        int128 i,\n', '        uint256 min_amount\n', '    ) external;\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amount,\n', '        int128 i,\n', '        uint256 min_amount,\n', '        bool use_underlying\n', '    ) external;\n', '\n', '    function exchange(\n', '        int128 from,\n', '        int128 to,\n', '        uint256 _from_amount,\n', '        uint256 _min_to_amount\n', '    ) external payable;\n', '\n', '    function balances(int128) external view returns (uint256);\n', '\n', '    function get_dy(\n', '        int128 from,\n', '        int128 to,\n', '        uint256 _from_amount\n', '    ) external view returns (uint256);\n', '\n', '    function calc_token_amount(uint256[2] calldata amounts, bool is_deposit)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_token_amount(uint256[3] calldata amounts, bool is_deposit)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_token_amount(uint256[4] calldata amounts, bool is_deposit)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', '// Part: IERC20Extended\n', '\n', 'interface IERC20Extended {\n', '    function decimals() external view returns (uint8);\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', '// Part: IExchangeRates\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/iexchangerates\n', 'interface IExchangeRates {\n', '    // Structs\n', '    struct RateAndUpdatedTime {\n', '        uint216 rate;\n', '        uint40 time;\n', '    }\n', '\n', '    struct InversePricing {\n', '        uint256 entryPoint;\n', '        uint256 upperLimit;\n', '        uint256 lowerLimit;\n', '        bool frozenAtUpperLimit;\n', '        bool frozenAtLowerLimit;\n', '    }\n', '\n', '    // Views\n', '    function aggregators(bytes32 currencyKey) external view returns (address);\n', '\n', '    function aggregatorWarningFlags() external view returns (address);\n', '\n', '    function anyRateIsInvalid(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function canFreezeRate(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function currentRoundForRate(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function currenciesUsingAggregator(address aggregator)\n', '        external\n', '        view\n', '        returns (bytes32[] memory);\n', '\n', '    function effectiveValue(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external view returns (uint256 value);\n', '\n', '    function effectiveValueAndRates(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 value,\n', '            uint256 sourceRate,\n', '            uint256 destinationRate\n', '        );\n', '\n', '    function effectiveValueAtRound(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        uint256 roundIdForSrc,\n', '        uint256 roundIdForDest\n', '    ) external view returns (uint256 value);\n', '\n', '    function getCurrentRoundId(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getLastRoundIdBeforeElapsedSecs(\n', '        bytes32 currencyKey,\n', '        uint256 startingRoundId,\n', '        uint256 startingTimestamp,\n', '        uint256 timediff\n', '    ) external view returns (uint256);\n', '\n', '    function inversePricing(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 entryPoint,\n', '            uint256 upperLimit,\n', '            uint256 lowerLimit,\n', '            bool frozenAtUpperLimit,\n', '            bool frozenAtLowerLimit\n', '        );\n', '\n', '    function lastRateUpdateTimes(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function oracle() external view returns (address);\n', '\n', '    function rateAndTimestampAtRound(bytes32 currencyKey, uint256 roundId)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 time);\n', '\n', '    function rateAndUpdatedTime(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256 rate, uint256 time);\n', '\n', '    function rateAndInvalid(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256 rate, bool isInvalid);\n', '\n', '    function rateForCurrency(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function rateIsFlagged(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsFrozen(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsInvalid(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateIsStale(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function rateStalePeriod() external view returns (uint256);\n', '\n', '    function ratesAndUpdatedTimeForCurrencyLastNRounds(\n', '        bytes32 currencyKey,\n', '        uint256 numRounds\n', '    ) external view returns (uint256[] memory rates, uint256[] memory times);\n', '\n', '    function ratesAndInvalidForCurrencies(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (uint256[] memory rates, bool anyRateInvalid);\n', '\n', '    function ratesForCurrencies(bytes32[] calldata currencyKeys)\n', '        external\n', '        view\n', '        returns (uint256[] memory);\n', '\n', '    // Mutative functions\n', '    function freezeRate(bytes32 currencyKey) external;\n', '}\n', '\n', '// Part: IReadProxy\n', '\n', 'interface IReadProxy {\n', '    function target() external view returns (address);\n', '}\n', '\n', '// Part: ISynth\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/isynth\n', 'interface ISynth {\n', '    // Views\n', '    function currencyKey() external view returns (bytes32);\n', '\n', '    function transferableSynths(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    // Mutative functions\n', '    function transferAndSettle(address to, uint256 value)\n', '        external\n', '        returns (bool);\n', '\n', '    function transferFromAndSettle(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    // Restricted: used internally to Synthetix\n', '    function burn(address account, uint256 amount) external;\n', '\n', '    function issue(address account, uint256 amount) external;\n', '}\n', '\n', '// Part: ISynthetix\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/isynthetix\n', 'interface ISynthetix {\n', '    // Views\n', '    function anySynthOrSNXRateIsInvalid()\n', '        external\n', '        view\n', '        returns (bool anyRateInvalid);\n', '\n', '    function availableCurrencyKeys() external view returns (bytes32[] memory);\n', '\n', '    function availableSynthCount() external view returns (uint256);\n', '\n', '    function collateral(address account) external view returns (uint256);\n', '\n', '    function collateralisationRatio(address issuer)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function debtBalanceOf(address issuer, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function isWaitingPeriod(bytes32 currencyKey) external view returns (bool);\n', '\n', '    function maxIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (uint256 maxIssuable);\n', '\n', '    function remainingIssuableSynths(address issuer)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 maxIssuable,\n', '            uint256 alreadyIssued,\n', '            uint256 totalSystemDebt\n', '        );\n', '\n', '    function synthsByAddress(address synthAddress)\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function totalIssuedSynths(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function totalIssuedSynthsExcludeEtherCollateral(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function transferableSynthetix(address account)\n', '        external\n', '        view\n', '        returns (uint256 transferable);\n', '\n', '    // Mutative Functions\n', '    function burnSynths(uint256 amount) external;\n', '\n', '    function burnSynthsOnBehalf(address burnForAddress, uint256 amount)\n', '        external;\n', '\n', '    function burnSynthsToTarget() external;\n', '\n', '    function burnSynthsToTargetOnBehalf(address burnForAddress) external;\n', '\n', '    function exchange(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalf(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeWithTracking(\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalfWithTracking(\n', '        address exchangeForAddress,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function issueMaxSynths() external;\n', '\n', '    function issueMaxSynthsOnBehalf(address issueForAddress) external;\n', '\n', '    function issueSynths(uint256 amount) external;\n', '\n', '    function issueSynthsOnBehalf(address issueForAddress, uint256 amount)\n', '        external;\n', '\n', '    function mint() external returns (bool);\n', '\n', '    function settle(bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint256 reclaimed,\n', '            uint256 refunded,\n', '            uint256 numEntries\n', '        );\n', '\n', '    // Liquidations\n', '    function liquidateDelinquentAccount(address account, uint256 susdAmount)\n', '        external\n', '        returns (bool);\n', '\n', '    // Restricted Functions\n', '\n', '    function mintSecondary(address account, uint256 amount) external;\n', '\n', '    function mintSecondaryRewards(uint256 amount) external;\n', '\n', '    function burnSecondary(address account, uint256 amount) external;\n', '}\n', '\n', '// Part: IUni\n', '\n', 'interface IUni {\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Math\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/HealthCheck\n', '\n', 'interface HealthCheck {\n', '    function check(\n', '        uint256 profit,\n', '        uint256 loss,\n', '        uint256 debtPayment,\n', '        uint256 debtOutstanding,\n', '        uint256 totalDebt\n', '    ) external view returns (bool);\n', '}\n', '\n', '// Part: ICrvV3\n', '\n', 'interface ICrvV3 is IERC20 {\n', '    function minter() external view returns (address);\n', '\n', '}\n', '\n', '// Part: IVaultV2\n', '\n', 'interface IVaultV2 is IERC20 {\n', '    struct StrategyParams {\n', '        uint256 performanceFee;\n', '        uint256 activation;\n', '        uint256 debtRatio;\n', '        uint256 minDebtPerHarvest;\n', '        uint256 maxDebtPerHarvest;\n', '        uint256 lastReport;\n', '        uint256 totalDebt;\n', '        uint256 totalGain;\n', '        uint256 totalLoss;\n', '    }\n', '\n', '    function addStrategy(\n', '        address,\n', '        uint256,\n', '        uint256,\n', '        uint256,\n', '        uint256\n', '    ) external;\n', '\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient)\n', '        external\n', '        returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(\n', '        uint256 maxShares,\n', '        address receiver,\n', '        uint256 maxloss\n', '    ) external returns (uint256);\n', '\n', '    function setManagementFee(uint256) external;\n', '\n', '    function updateStrategyDebtRatio(address, uint256) external;\n', '\n', '    function withdraw(uint256 maxShares, address recipient)\n', '        external\n', '        returns (uint256);\n', '\n', '    function withdrawalQueue(uint256) external view returns (address);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    function strategies(address _strategy)\n', '        external\n', '        view\n', '        returns (StrategyParams memory);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '\n', '    function setDepositLimit(uint256) external;\n', '}\n', '\n', '// Part: IVirtualSynth\n', '\n', 'interface IVirtualSynth {\n', '    // Views\n', '    function balanceOfUnderlying(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function rate() external view returns (uint256);\n', '\n', '    function readyToSettle() external view returns (bool);\n', '\n', '    function secsLeftInWaitingPeriod() external view returns (uint256);\n', '\n', '    function settled() external view returns (bool);\n', '\n', '    function synth() external view returns (ISynth);\n', '\n', '    // Mutative functions\n', '    function settle(address account) external;\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/VaultAPI\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient) external returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Part: IExchanger\n', '\n', '// https://docs.synthetix.io/contracts/source/interfaces/iexchanger\n', 'interface IExchanger {\n', '    // Views\n', '    function calculateAmountAfterSettlement(\n', '        address from,\n', '        bytes32 currencyKey,\n', '        uint256 amount,\n', '        uint256 refunded\n', '    ) external view returns (uint256 amountAfterSettlement);\n', '\n', '    function isSynthRateInvalid(bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function maxSecsLeftInWaitingPeriod(address account, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function settlementOwing(address account, bytes32 currencyKey)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 reclaimAmount,\n', '            uint256 rebateAmount,\n', '            uint256 numEntries\n', '        );\n', '\n', '    function hasWaitingPeriodOrSettlementOwing(\n', '        address account,\n', '        bytes32 currencyKey\n', '    ) external view returns (bool);\n', '\n', '    function feeRateForExchange(\n', '        bytes32 sourceCurrencyKey,\n', '        bytes32 destinationCurrencyKey\n', '    ) external view returns (uint256 exchangeFeeRate);\n', '\n', '    function getAmountsForExchange(\n', '        uint256 sourceAmount,\n', '        bytes32 sourceCurrencyKey,\n', '        bytes32 destinationCurrencyKey\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 amountReceived,\n', '            uint256 fee,\n', '            uint256 exchangeFeeRate\n', '        );\n', '\n', '    function priceDeviationThresholdFactor() external view returns (uint256);\n', '\n', '    function waitingPeriodSecs() external view returns (uint256);\n', '\n', '    // Mutative functions\n', '    function exchange(\n', '        address from,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address destinationAddress\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalf(\n', '        address exchangeForAddress,\n', '        address from,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeWithTracking(\n', '        address from,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address destinationAddress,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeOnBehalfWithTracking(\n', '        address exchangeForAddress,\n', '        address from,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address originator,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived);\n', '\n', '    function exchangeWithVirtual(\n', '        address from,\n', '        bytes32 sourceCurrencyKey,\n', '        uint256 sourceAmount,\n', '        bytes32 destinationCurrencyKey,\n', '        address destinationAddress,\n', '        bytes32 trackingCode\n', '    ) external returns (uint256 amountReceived, IVirtualSynth vSynth);\n', '\n', '    function settle(address from, bytes32 currencyKey)\n', '        external\n', '        returns (\n', '            uint256 reclaimed,\n', '            uint256 refunded,\n', '            uint256 numEntries\n', '        );\n', '\n', '    function setLastExchangeRateForSynth(bytes32 currencyKey, uint256 rate)\n', '        external;\n', '\n', '    function resetLastExchangeRate(bytes32[] calldata currencyKeys) external;\n', '\n', '    function suspendSynthWithInvalidRate(bytes32 currencyKey) external;\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/BaseStrategy\n', '\n', '/**\n', ' * @title Yearn Base Strategy\n', ' * @author yearn.finance\n', ' * @notice\n', ' *  BaseStrategy implements all of the required functionality to interoperate\n', ' *  closely with the Vault contract. This contract should be inherited and the\n', ' *  abstract methods implemented to adapt the Strategy to the particular needs\n', ' *  it has to create a return.\n', ' *\n', ' *  Of special interest is the relationship between `harvest()` and\n', " *  `vault.report()'. `harvest()` may be called simply because enough time has\n", ' *  elapsed since the last report, and not because any funds need to be moved\n', ' *  or positions adjusted. This is critical so that the Vault may maintain an\n', " *  accurate picture of the Strategy's performance. See  `vault.report()`,\n", ' *  `harvest()`, and `harvestTrigger()` for further details.\n', ' */\n', 'abstract contract BaseStrategy {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    string public metadataURI;\n', '\n', '    // health checks\n', '    bool public doHealthCheck;\n', '    address public healthCheck;\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to track which version of `StrategyAPI` this Strategy\n', '     *  implements.\n', "     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n", '     * @return A string which holds the current API version of this contract.\n', '     */\n', '    function apiVersion() public pure returns (string memory) {\n', '        return "0.3.5";\n', '    }\n', '\n', '    /**\n', "     * @notice This Strategy's name.\n", '     * @dev\n', '     *  You can use this field to manage the "version" of this Strategy, e.g.\n', '     *  `StrategySomethingOrOtherV1`. However, "API Version" is managed by\n', '     *  `apiVersion()` function above.\n', "     * @return This Strategy's name.\n", '     */\n', '    function name() external virtual view returns (string memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  The amount (priced in want) of the total assets managed by this strategy should not count\n', "     *  towards Yearn's TVL calculations.\n", '     * @dev\n', '     *  You can override this field to set it to a non-zero value if some of the assets of this\n', "     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n", '     *  Note that this value must be strictly less than or equal to the amount provided by\n', '     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n', '     *  Also note that this value is used to determine the total assets under management by this\n', '     *  strategy, for the purposes of computing the management fee in `Vault`\n', '     * @return\n', "     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n", "     *  Locked (TVL) calculation across it's ecosystem.\n", '     */\n', '    function delegatedAssets() external virtual view returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    VaultAPI public vault;\n', '    address public strategist;\n', '    address public rewards;\n', '    address public keeper;\n', '\n', '    IERC20 public want;\n', '\n', '    // So indexers can keep track of this\n', '    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n', '\n', '    event UpdatedStrategist(address newStrategist);\n', '\n', '    event UpdatedKeeper(address newKeeper);\n', '\n', '    event UpdatedRewards(address rewards);\n', '\n', '    event UpdatedMinReportDelay(uint256 delay);\n', '\n', '    event UpdatedMaxReportDelay(uint256 delay);\n', '\n', '    event UpdatedProfitFactor(uint256 profitFactor);\n', '\n', '    event UpdatedDebtThreshold(uint256 debtThreshold);\n', '\n', '    event EmergencyExitEnabled();\n', '\n', '    event UpdatedMetadataURI(string metadataURI);\n', '\n', '    // The minimum number of seconds between harvest calls. See\n', '    // `setMinReportDelay()` for more details.\n', '    uint256 public minReportDelay;\n', '\n', '    // The maximum number of seconds between harvest calls. See\n', '    // `setMaxReportDelay()` for more details.\n', '    uint256 public maxReportDelay;\n', '\n', '    // The minimum multiple that `callCost` must be above the credit/profit to\n', '    // be "justifiable". See `setProfitFactor()` for more details.\n', '    uint256 public profitFactor;\n', '\n', '    // Use this to adjust the threshold at which running a debt causes a\n', '    // harvest trigger. See `setDebtThreshold()` for more details.\n', '    uint256 public debtThreshold;\n', '\n', '    // See note on `setEmergencyExit()`.\n', '    bool public emergencyExit;\n', '\n', '    // modifiers\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == strategist || msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        require(msg.sender == strategist, "!strategist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyKeepers() {\n', '        require(\n', '            msg.sender == keeper ||\n', '                msg.sender == strategist ||\n', '                msg.sender == governance() ||\n', '                msg.sender == vault.guardian() ||\n', '                msg.sender == vault.management(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyVaultManagers() {\n', '        require(\n', '            msg.sender == vault.management() || msg.sender == governance(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '\n', '    constructor(address _vault) public {\n', '        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Initializes the Strategy, this is called only once, when the\n', '     *  contract is deployed.\n', '     * @dev `_vault` should implement `VaultAPI`.\n', '     * @param _vault The address of the Vault responsible for this Strategy.\n', '     */\n', '    function _initialize(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper\n', '    ) internal {\n', '        require(address(want) == address(0), "Strategy already initialized");\n', '\n', '        vault = VaultAPI(_vault);\n', '        want = IERC20(vault.token());\n', '        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n', '        strategist = _strategist;\n', '        rewards = _rewards;\n', '        keeper = _keeper;\n', '\n', '        // initialize variables\n', '        minReportDelay = 0;\n', '        maxReportDelay = 86400;\n', '        profitFactor = 100;\n', '        debtThreshold = 0;\n', '\n', '        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n', '    }\n', '\n', '    function setHealthCheck(address _healthCheck) external onlyVaultManagers {\n', '        healthCheck = _healthCheck;\n', '    }\n', '\n', '    function setDoHealthCheck(bool _doHealthCheck) external onlyVaultManagers {\n', '        doHealthCheck = _doHealthCheck;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `strategist`.\n', '     *\n', '     *  This may only be called by governance or the existing strategist.\n', '     * @param _strategist The new address to assign as `strategist`.\n', '     */\n', '    function setStrategist(address _strategist) external onlyAuthorized {\n', '        require(_strategist != address(0));\n', '        strategist = _strategist;\n', '        emit UpdatedStrategist(_strategist);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `keeper`.\n', '     *\n', '     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n', '     *  other than `governance()` or `strategist`. However, unlike\n', '     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n', '     *  and `harvest()`, and no other authorized functions, following the\n', '     *  principle of least privilege.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _keeper The new address to assign as `keeper`.\n', '     */\n', '    function setKeeper(address _keeper) external onlyAuthorized {\n', '        require(_keeper != address(0));\n', '        keeper = _keeper;\n', '        emit UpdatedKeeper(_keeper);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `rewards`. EOA or smart contract which has the permission\n', '     *  to pull rewards from the vault.\n', '     *\n', '     *  This may only be called by the strategist.\n', '     * @param _rewards The address to use for pulling rewards.\n', '     */\n', '    function setRewards(address _rewards) external onlyStrategist {\n', '        require(_rewards != address(0));\n', '        vault.approve(rewards, 0);\n', '        rewards = _rewards;\n', '        vault.approve(rewards, uint256(-1));\n', '        emit UpdatedRewards(_rewards);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the minimum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The minimum number of seconds to wait between harvests.\n', '     */\n', '    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n', '        minReportDelay = _delay;\n', '        emit UpdatedMinReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the maximum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The maximum number of seconds to wait between harvests.\n', '     */\n', '    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n', '        maxReportDelay = _delay;\n', '        emit UpdatedMaxReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `profitFactor`. `profitFactor` is used to determine\n', "     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n", '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _profitFactor A ratio to multiply anticipated\n', '     * `harvest()` gas cost against.\n', '     */\n', '    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n', '        profitFactor = _profitFactor;\n', '        emit UpdatedProfitFactor(_profitFactor);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Sets how far the Strategy can go into loss without a harvest and report\n', '     *  being required.\n', '     *\n', '     *  By default this is 0, meaning any losses would cause a harvest which\n', '     *  will subsequently report the loss to the Vault for tracking. (See\n', '     *  `harvestTrigger()` for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _debtThreshold How big of a loss this Strategy may carry without\n', '     * being required to report to the Vault.\n', '     */\n', '    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n', '        debtThreshold = _debtThreshold;\n', '        emit UpdatedDebtThreshold(_debtThreshold);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n', '     * of the file describing the strategy.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _metadataURI The URI that describe the strategy.\n', '     */\n', '    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n', '        metadataURI = _metadataURI;\n', '        emit UpdatedMetadataURI(_metadataURI);\n', '    }\n', '\n', '    /**\n', '     * Resolve governance address from Vault contract, used to make assertions\n', '     * on protected functions in the Strategy.\n', '     */\n', '    function governance() internal view returns (address) {\n', '        return vault.governance();\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide an accurate estimate for the total amount of assets\n', '     *  (principle + return) that this Strategy is currently managing,\n', '     *  denominated in terms of `want` tokens.\n', '     *\n', '     *  This total should be "realizable" e.g. the total value that could\n', '     *  *actually* be obtained from this Strategy if it were to divest its\n', '     *  entire position based on current on-chain conditions.\n', '     * @dev\n', '     *  Care must be taken in using this function, since it relies on external\n', '     *  systems, which could be manipulated by the attacker to give an inflated\n', '     *  (or reduced) value produced by this function, based on current on-chain\n', '     *  conditions (e.g. this function is possible to influence through\n', '     *  flashloan attacks, oracle manipulations, or other DeFi attack\n', '     *  mechanisms).\n', '     *\n', '     *  It is up to governance to use this function to correctly order this\n', '     *  Strategy relative to its peers in the withdrawal queue to minimize\n', '     *  losses for the Vault based on sudden withdrawals. This value should be\n', '     *  higher than the total debt of the Strategy and higher than its expected\n', '     *  value to be "safe".\n', '     * @return The estimated total assets in this Strategy.\n', '     */\n', '    function estimatedTotalAssets() public virtual view returns (uint256);\n', '\n', '    /*\n', '     * @notice\n', '     *  Provide an indication of whether this strategy is currently "active"\n', '     *  in that it is managing an active position, or will manage a position in\n', '     *  the future. This should correlate to `harvest()` activity, so that Harvest\n', '     *  events can be tracked externally by indexing agents.\n', '     * @return True if the strategy is actively managing a position.\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n', '    }\n', '\n', '    /**\n', '     * Perform any Strategy unwinding or other calls necessary to capture the\n', '     * "free return" this Strategy has generated since the last time its core\n', '     * position(s) were adjusted. Examples include unwrapping extra rewards.\n', '     * This call is only used during "normal operation" of a Strategy, and\n', '     * should be optimized to minimize losses as much as possible.\n', '     *\n', '     * This method returns any realized profits and/or realized losses\n', '     * incurred, and should return the total amounts of profits/losses/debt\n', "     * payments (in `want` tokens) for the Vault's accounting (e.g.\n", '     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\n', '     *\n', '     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n', '     * debt limit, otherwise its value will be how far past the debt limit\n', "     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n", '     *\n', '     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n', '     *       It is okay for it to be less than `_debtOutstanding`, as that\n', '     *       should only used as a guide for how much is left to pay back.\n', '     *       Payments should be made to minimize loss from slippage, debt,\n', '     *       withdrawal fees, etc.\n', '     *\n', '     * See `vault.debtOutstanding()`.\n', '     */\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        virtual\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        );\n', '\n', '    /**\n', '     * Perform any adjustments to the core position(s) of this Strategy given\n', '     * what change the Vault made in the "investable capital" available to the\n', '     * Strategy. Note that all "free capital" in the Strategy after the report\n', '     * was made is available for reinvestment. Also note that this number\n', '     * could be 0, and you should handle that scenario accordingly.\n', '     *\n', '     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n', '     */\n', '    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n', '\n', '    /**\n', "     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n", '     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n', '     * This function should return the amount of `want` tokens made available by the\n', '     * liquidation. If there is a difference between them, `_loss` indicates whether the\n', '     * difference is due to a realized loss, or if there is some other sitution at play\n', '     * (e.g. locked funds) where the amount made available is less than what is needed.\n', '     * This function is used during emergency exit instead of `prepareReturn()` to\n', "     * liquidate all of the Strategy's positions back to the Vault.\n", '     *\n', '     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n', '     */\n', '    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `tend()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `tend()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `tend()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be\n', '     *  "at a loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `harvestTrigger()` should never return `true` at the same\n', '     *  time.\n', "     * @param callCost The keeper's estimated cast cost to call `tend()`.\n", '     * @return `true` if `tend()` should be called, `false` otherwise.\n', '     */\n', '    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\n', "        // We usually don't need tend, but if there are positions that need\n", '        // active maintainence, overriding this function is how you would\n', '        // signal for that.\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', "     *  Adjust the Strategy's position. The purpose of tending isn't to\n", '     *  realize gains, but to maximize yield by reinvesting any returns.\n', '     *\n', '     *  See comments on `adjustPosition()`.\n', '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     */\n', '    function tend() external onlyKeepers {\n', "        // Don't take profits with this call, but adjust for better gains\n", '        adjustPosition(vault.debtOutstanding());\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `harvest()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `harvest()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `harvest()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be "at a\n', '     *  loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `tendTrigger` should never return `true` at the\n', '     *  same time.\n', '     *\n', '     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n', '     *  strategist-controlled parameters that will influence whether this call\n', '     *  returns `true` or not. These parameters will be used in conjunction\n', '     *  with the parameters reported to the Vault (see `params`) to determine\n', '     *  if calling `harvest()` is merited.\n', '     *\n', '     *  It is expected that an external system will check `harvestTrigger()`.\n', '     *  This could be a script run off a desktop or cloud bot (e.g.\n', '     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\n', '     *  or via an integration with the Keep3r network (e.g.\n', '     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n', "     * @param callCost The keeper's estimated cast cost to call `harvest()`.\n", '     * @return `true` if `harvest()` should be called, `false` otherwise.\n', '     */\n', '    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // Should not trigger if Strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should not trigger if we haven't waited long enough since previous harvest\n", '        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n', '\n', "        // Should trigger if hasn't been called in a while\n", '        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n', '        //       changes to the value from triggering a harvest directly through user\n', '        //       behavior. This should ensure reasonable resistance to manipulation\n', '        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > debtThreshold) return true;\n', '\n', '        // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        // Trigger if we have a loss to report\n', '        if (total.add(debtThreshold) < params.totalDebt) return true;\n', '\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // Otherwise, only trigger if it "makes sense" economically (gas cost\n', '        // is <N% of value moved)\n', '        uint256 credit = vault.creditAvailable();\n', '        return (profitFactor.mul(callCost) < credit.add(profit));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n', "     *  the Strategy's position.\n", '     *\n', '     *  In the rare case the Strategy is in emergency shutdown, this will exit\n', "     *  the Strategy's position.\n", '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     * @dev\n', '     *  When `harvest()` is called, the Strategy reports to the Vault (via\n', '     *  `vault.report()`), so in some cases `harvest()` must be called in order\n', '     *  to take in profits, to borrow newly available funds from the Vault, or\n', '     *  otherwise adjust its position. In other cases `harvest()` must be\n', "     *  called to report to the Vault on the Strategy's position, especially if\n", '     *  any losses have occurred.\n', '     */\n', '    function harvest() external onlyKeepers {\n', '        uint256 profit = 0;\n', '        uint256 loss = 0;\n', '        uint256 debtOutstanding = vault.debtOutstanding();\n', '        uint256 debtPayment = 0;\n', '        if (emergencyExit) {\n', '            // Free up as much capital as possible\n', '            uint256 totalAssets = estimatedTotalAssets();\n', '            // NOTE: use the larger of total assets or debt outstanding to book losses properly\n', '            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\n', '            // NOTE: take up any remainder here as profit\n', '            if (debtPayment > debtOutstanding) {\n', '                profit = debtPayment.sub(debtOutstanding);\n', '                debtPayment = debtOutstanding;\n', '            }\n', '        } else {\n', '            // Free up returns for Vault to pull\n', '            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n', '        }\n', '\n', '        // Allow Vault to take up to the "harvested" balance of this contract,\n', '        // which is the amount it has earned since the last time it reported to\n', '        // the Vault.\n', '        uint256 totalDebt = vault.strategies(address(this)).totalDebt;\n', '        debtOutstanding = vault.report(profit, loss, debtPayment);\n', '\n', '        // Check if free returns are left, and re-invest them\n', '        adjustPosition(debtOutstanding);\n', '\n', '        // call healthCheck contract\n', '        if (doHealthCheck && healthCheck != address(0)) {\n', '            require(\n', '                HealthCheck(healthCheck).check(\n', '                    profit,\n', '                    loss,\n', '                    debtPayment,\n', '                    debtOutstanding,\n', '                    totalDebt\n', '                ),\n', '                "!healthcheck"\n', '            );\n', '        } else {\n', '            doHealthCheck = true;\n', '        }\n', '\n', '        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Withdraws `_amountNeeded` to `vault`.\n', '     *\n', '     *  This may only be called by the Vault.\n', '     * @param _amountNeeded How much `want` to withdraw.\n', '     * @return _loss Any realized losses\n', '     */\n', '    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n', '        require(msg.sender == address(vault), "!vault");\n', '        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n', '        uint256 amountFreed;\n', '        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n', '        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n', '        want.safeTransfer(msg.sender, amountFreed);\n', '        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n', '    }\n', '\n', '    /**\n', '     * Do anything necessary to prepare this Strategy for migration, such as\n', '     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n', '     * value.\n', '     */\n', '    function prepareMigration(address _newStrategy) internal virtual;\n', '\n', '    /**\n', '     * @notice\n', '     *  Transfers all `want` from this Strategy to `_newStrategy`.\n', '     *\n', '     *  This may only be called by governance or the Vault.\n', '     * @dev\n', "     *  The new Strategy's Vault must be the same as this Strategy's Vault.\n", '     * @param _newStrategy The Strategy to migrate to.\n', '     */\n', '    function migrate(address _newStrategy) external {\n', '        require(msg.sender == address(vault) || msg.sender == governance());\n', '        require(BaseStrategy(_newStrategy).vault() == vault);\n', '        prepareMigration(_newStrategy);\n', '        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Activates emergency exit. Once activated, the Strategy will exit its\n', '     *  position upon the next harvest, depositing all funds into the Vault as\n', '     *  quickly as is reasonable given on-chain conditions.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @dev\n', '     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n', '     */\n', '    function setEmergencyExit() external onlyAuthorized {\n', '        emergencyExit = true;\n', '        vault.revokeStrategy();\n', '\n', '        emit EmergencyExitEnabled();\n', '    }\n', '\n', '    /**\n', '     * Override this to add all tokens/tokenized positions this contract\n', '     * manages on a *persistent* basis (e.g. not just for swapping back to\n', '     * want ephemerally).\n', '     *\n', '     * NOTE: Do *not* include `want`, already included in `sweep` below.\n', '     *\n', '     * Example:\n', '     *\n', '     *    function protectedTokens() internal override view returns (address[] memory) {\n', '     *      address[] memory protected = new address[](3);\n', '     *      protected[0] = tokenA;\n', '     *      protected[1] = tokenB;\n', '     *      protected[2] = tokenC;\n', '     *      return protected;\n', '     *    }\n', '     */\n', '    function protectedTokens() internal virtual view returns (address[] memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  Removes tokens from this Strategy that are not the type of tokens\n', '     *  managed by this Strategy. This may be used in case of accidentally\n', '     *  sending the wrong kind of token to this Strategy.\n', '     *\n', '     *  Tokens will be sent to `governance()`.\n', '     *\n', '     *  This will fail if an attempt is made to sweep `want`, or any tokens\n', '     *  that are protected by this Strategy.\n', '     *\n', '     *  This may only be called by governance.\n', '     * @dev\n', '     *  Implement `protectedTokens()` to specify any additional tokens that\n', '     *  should be protected from sweeping in addition to `want`.\n', '     * @param _token The token to transfer out of this vault.\n', '     */\n', '    function sweep(address _token) external onlyGovernance {\n', '        require(_token != address(want), "!want");\n', '        require(_token != address(vault), "!shares");\n', '\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// Part: Synthetix\n', '\n', 'contract Synthetix {\n', '    using SafeMath for uint256;\n', '\n', '    // ========== SYNTHETIX CONFIGURATION ==========\n', '    bytes32 public constant sUSD = "sUSD";\n', '    bytes32 public synthCurrencyKey;\n', '\n', '    bytes32 internal constant TRACKING_CODE = "YEARN";\n', '\n', '    // ========== ADDRESS RESOLVER CONFIGURATION ==========\n', '    bytes32 private constant CONTRACT_SYNTHETIX = "Synthetix";\n', '    bytes32 private constant CONTRACT_EXCHANGER = "Exchanger";\n', '    bytes32 private constant CONTRACT_EXCHANGERATES = "ExchangeRates";\n', '    bytes32 private constant CONTRACT_SYNTHSUSD = "ProxyERC20sUSD";\n', '    bytes32 private contractSynth;\n', '\n', '    IReadProxy public constant readProxy =\n', '        IReadProxy(0x4E3b31eB0E5CB73641EE1E65E7dCEFe520bA3ef2);\n', '\n', '    function _initializeSynthetix(bytes32 _synth) internal {\n', '        // sETH / sBTC / sEUR / sLINK\n', '        contractSynth = _synth;\n', '        synthCurrencyKey = ISynth(\n', '            IReadProxy(address(resolver().getAddress(_synth))).target()\n', '        ).currencyKey();\n', '    }\n', '\n', '    function _balanceOfSynth() internal view returns (uint256) {\n', '        return IERC20(address(_synthCoin())).balanceOf(address(this));\n', '    }\n', '\n', '    function _balanceOfSUSD() internal view returns (uint256) {\n', '        return IERC20(address(_synthsUSD())).balanceOf(address(this));\n', '    }\n', '\n', '    function _synthToSUSD(uint256 _amountToSend)\n', '        internal\n', '        view\n', '        returns (uint256 amountReceived)\n', '    {\n', '        if (_amountToSend == 0 || _amountToSend == type(uint256).max) {\n', '            return _amountToSend;\n', '        }\n', '        (amountReceived, , ) = _exchanger().getAmountsForExchange(\n', '            _amountToSend,\n', '            synthCurrencyKey,\n', '            sUSD\n', '        );\n', '    }\n', '\n', '    function _sUSDToSynth(uint256 _amountToSend)\n', '        internal\n', '        view\n', '        returns (uint256 amountReceived)\n', '    {\n', '        if (_amountToSend == 0 || _amountToSend == type(uint256).max) {\n', '            return _amountToSend;\n', '        }\n', '        (amountReceived, , ) = _exchanger().getAmountsForExchange(\n', '            _amountToSend,\n', '            sUSD,\n', '            synthCurrencyKey\n', '        );\n', '    }\n', '\n', '    function _sUSDFromSynth(uint256 _amountToReceive)\n', '        internal\n', '        view\n', '        returns (uint256 amountToSend)\n', '    {\n', '        if (_amountToReceive == 0 || _amountToReceive == type(uint256).max) {\n', '            return _amountToReceive;\n', '        }\n', '        // NOTE: the fee of the trade that would be done (sUSD => synth) in this case\n', '        uint256 feeRate = _exchanger().feeRateForExchange(\n', '            sUSD,\n', '            synthCurrencyKey\n', '        ); // in base 1e18\n', '        // formula => amountToReceive (Synth) * price (sUSD/Synth) / (1 - feeRate)\n', '        return\n', '            _exchangeRates()\n', '                .effectiveValue(synthCurrencyKey, _amountToReceive, sUSD)\n', '                .mul(1e18)\n', '                .div(uint256(1e18).sub(feeRate));\n', '    }\n', '\n', '    function _synthFromSUSD(uint256 _amountToReceive)\n', '        internal\n', '        view\n', '        returns (uint256 amountToSend)\n', '    {\n', '        if (_amountToReceive == 0 || _amountToReceive == type(uint256).max) {\n', '            return _amountToReceive;\n', '        }\n', '        // NOTE: the fee of the trade that would be done (synth => sUSD) in this case\n', '        uint256 feeRate = _exchanger().feeRateForExchange(\n', '            synthCurrencyKey,\n', '            sUSD\n', '        ); // in base 1e18\n', '        // formula => amountToReceive (sUSD) * price (Synth/sUSD) / (1 - feeRate)\n', '        return\n', '            _exchangeRates()\n', '                .effectiveValue(sUSD, _amountToReceive, synthCurrencyKey)\n', '                .mul(1e18)\n', '                .div(uint256(1e18).sub(feeRate));\n', '    }\n', '\n', '    function exchangeSynthToSUSD() internal returns (uint256) {\n', '        // swap full balance synth to sUSD\n', '        uint256 synthBalance = _balanceOfSynth();\n', '\n', '        if (synthBalance == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return\n', '            _synthetix().exchangeWithTracking(\n', '                synthCurrencyKey,\n', '                synthBalance,\n', '                sUSD,\n', '                address(this),\n', '                TRACKING_CODE\n', '            );\n', '    }\n', '\n', '    function exchangeSUSDToSynth(uint256 amount) internal returns (uint256) {\n', '        // swap amount of sUSD for Synth\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        return\n', '            _synthetix().exchangeWithTracking(\n', '                sUSD,\n', '                amount,\n', '                synthCurrencyKey,\n', '                address(this),\n', '                TRACKING_CODE\n', '            );\n', '    }\n', '\n', '    function resolver() internal view returns (IAddressResolver) {\n', '        return IAddressResolver(readProxy.target());\n', '    }\n', '\n', '    function _synthCoin() internal view returns (ISynth) {\n', '        return ISynth(resolver().getAddress(contractSynth));\n', '    }\n', '\n', '    function _synthsUSD() internal view returns (ISynth) {\n', '        return ISynth(resolver().getAddress(CONTRACT_SYNTHSUSD));\n', '    }\n', '\n', '    function _synthetix() internal view returns (ISynthetix) {\n', '        return ISynthetix(resolver().getAddress(CONTRACT_SYNTHETIX));\n', '    }\n', '\n', '    function _exchangeRates() internal view returns (IExchangeRates) {\n', '        return IExchangeRates(resolver().getAddress(CONTRACT_EXCHANGERATES));\n', '    }\n', '\n', '    function _exchanger() internal view returns (IExchanger) {\n', '        return IExchanger(resolver().getAddress(CONTRACT_EXCHANGER));\n', '    }\n', '}\n', '\n', '// File: Strategy.sol\n', '\n', 'contract Strategy is BaseStrategy, Synthetix {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    ICurveFi public curvePool;\n', '    ICrvV3 public curveToken;\n', '\n', '    uint256 public susdBuffer; // 10% (over 10_000 BPS) amount of sUSD that should not be exchanged for sETH\n', '\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    address public constant uniswapRouter =\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    IVaultV2 public yvToken;\n', '\n', '    uint256 public lastInvest;\n', '    uint256 public minTimePerInvest; // = 3600;\n', '    uint256 public maxSingleInvest; // // 2 hbtc per hour default\n', '    uint256 public slippageProtectionIn; // = 50; //out of 10000. 50 = 0.5%\n', '    uint256 public slippageProtectionOut; // = 50; //out of 10000. 50 = 0.5%\n', '    uint256 public constant DENOMINATOR = 10_000;\n', '    uint256 public maxLoss; // maximum loss allowed from yVault withdrawal default value: 1 (in BPS)\n', '    uint8 private synth_decimals;\n', '\n', '    uint256 internal constant DUST_THRESHOLD = 10_000;\n', '\n', '    int128 public curveId;\n', '    uint256 public poolSize;\n', '    bool public hasUnderlying;\n', '\n', '    bool public withdrawProtection;\n', '\n', '    constructor(\n', '        address _vault,\n', '        address _curvePool,\n', '        address _curveToken,\n', '        address _yvToken,\n', '        uint256 _poolSize,\n', '        bool _hasUnderlying,\n', '        bytes32 _synth\n', '    ) public BaseStrategy(_vault) {\n', '        _initializeSynthetix(_synth);\n', '        _initializeStrat(\n', '            _curvePool,\n', '            _curveToken,\n', '            _yvToken,\n', '            _poolSize,\n', '            _hasUnderlying\n', '        );\n', '    }\n', '\n', '    function initialize(\n', '        address _vault,\n', '        address _curvePool,\n', '        address _curveToken,\n', '        address _yvToken,\n', '        uint256 _poolSize,\n', '        bool _hasUnderlying,\n', '        bytes32 _synth\n', '    ) external {\n', '        //note: initialise can only be called once. in _initialize in BaseStrategy we have: require(address(want) == address(0), "Strategy already initialized");\n', '        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n', '        _initializeSynthetix(_synth);\n', '        _initializeStrat(\n', '            _curvePool,\n', '            _curveToken,\n', '            _yvToken,\n', '            _poolSize,\n', '            _hasUnderlying\n', '        );\n', '    }\n', '\n', '    function _initializeStrat(\n', '        address _curvePool,\n', '        address _curveToken,\n', '        address _yvToken,\n', '        uint256 _poolSize,\n', '        bool _hasUnderlying\n', '    ) internal {\n', '        require(\n', '            address(curvePool) == address(curvePool),\n', '            "Already Initialized"\n', '        );\n', '        require(_poolSize > 1 && _poolSize < 5, "incorrect pool size");\n', '        require(address(want) == address(_synthsUSD()), "want must be sUSD");\n', '\n', '        curvePool = ICurveFi(_curvePool);\n', '\n', '        if (\n', '            curvePool.coins(0) == address(_synthCoin()) ||\n', '            (_hasUnderlying &&\n', '                curvePool.underlying_coins(0) == address(_synthCoin()))\n', '        ) {\n', '            curveId = 0;\n', '        } else if (\n', '            curvePool.coins(1) == address(_synthCoin()) ||\n', '            (_hasUnderlying &&\n', '                curvePool.underlying_coins(1) == address(_synthCoin()))\n', '        ) {\n', '            curveId = 1;\n', '        } else if (\n', '            curvePool.coins(2) == address(_synthCoin()) ||\n', '            (_hasUnderlying &&\n', '                curvePool.underlying_coins(2) == address(_synthCoin()))\n', '        ) {\n', '            curveId = 2;\n', '        } else if (\n', '            curvePool.coins(3) == address(_synthCoin()) ||\n', '            (_hasUnderlying &&\n', '                curvePool.underlying_coins(3) == address(_synthCoin()))\n', '        ) {\n', '            //will revert if there are not enough coins\n', '            curveId = 3;\n', '        } else {\n', '            require(false, "incorrect want for curve pool");\n', '        }\n', '\n', '        maxSingleInvest = type(uint256).max; // save on stack\n', '        // minTimePerInvest = _minTimePerInvest; // save on stack\n', '        slippageProtectionIn = 50; // default to save on stack\n', '        slippageProtectionOut = 50; // default to save on stack\n', '\n', '        poolSize = _poolSize;\n', '        hasUnderlying = _hasUnderlying;\n', '\n', '        yvToken = IVaultV2(_yvToken);\n', '        curveToken = ICrvV3(_curveToken);\n', '\n', '        _setupStatics();\n', '    }\n', '\n', '    function _setupStatics() internal {\n', '        maxReportDelay = 86400;\n', '        profitFactor = 1500;\n', '        minReportDelay = 3600;\n', '        debtThreshold = 100 * 1e18;\n', '        withdrawProtection = true;\n', '        maxLoss = 1;\n', '        susdBuffer = 1_000; // 10% over 10_000 BIPS\n', '        synth_decimals = IERC20Extended(address(_synthCoin())).decimals();\n', '        want.safeApprove(address(curvePool), type(uint256).max);\n', '        curveToken.approve(address(yvToken), type(uint256).max);\n', '    }\n', '\n', '    event Cloned(address indexed clone);\n', '\n', '    function cloneSingleSidedCurve(\n', '        address _vault,\n', '        address _curvePool,\n', '        address _curveToken,\n', '        address _yvToken,\n', '        uint256 _poolSize,\n', '        bool _hasUnderlying,\n', '        bytes32 _synth\n', '    ) external returns (address newStrategy) {\n', '        bytes20 addressBytes = bytes20(address(this));\n', '\n', '        assembly {\n', '            // EIP-1167 bytecode\n', '            let clone_code := mload(0x40)\n', '            mstore(\n', '                clone_code,\n', '                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n', '            )\n', '            mstore(add(clone_code, 0x14), addressBytes)\n', '            mstore(\n', '                add(clone_code, 0x28),\n', '                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n', '            )\n', '            newStrategy := create(0, clone_code, 0x37)\n', '        }\n', '        Strategy(newStrategy).initialize(\n', '            _vault,\n', '            _curvePool,\n', '            _curveToken,\n', '            _yvToken,\n', '            _poolSize,\n', '            _hasUnderlying,\n', '            _synth\n', '        );\n', '\n', '        emit Cloned(newStrategy);\n', '    }\n', '\n', '    function name() external view override returns (string memory) {\n', '        return\n', '            string(\n', '                abi.encodePacked(\n', '                    "SingleSidedCrvSynth",\n', '                    IERC20Extended(address(_synthCoin())).symbol()\n', '                )\n', '            );\n', '    }\n', '\n', '    function updateMinTimePerInvest(uint256 _minTimePerInvest)\n', '        public\n', '        onlyAuthorized\n', '    {\n', '        minTimePerInvest = _minTimePerInvest;\n', '    }\n', '\n', '    function updateSUSDBuffer(uint256 _susdBuffer) public onlyAuthorized {\n', '        // IN BIPS\n', '        require(_susdBuffer <= 10_000, "!too high");\n', '        susdBuffer = _susdBuffer;\n', '    }\n', '\n', '    function updatemaxSingleInvest(uint256 _maxSingleInvest)\n', '        public\n', '        onlyAuthorized\n', '    {\n', '        maxSingleInvest = _maxSingleInvest;\n', '    }\n', '\n', '    function updateSlippageProtectionIn(uint256 _slippageProtectionIn)\n', '        public\n', '        onlyAuthorized\n', '    {\n', '        slippageProtectionIn = _slippageProtectionIn;\n', '    }\n', '\n', '    function updateSlippageProtectionOut(uint256 _slippageProtectionOut)\n', '        public\n', '        onlyAuthorized\n', '    {\n', '        slippageProtectionOut = _slippageProtectionOut;\n', '    }\n', '\n', '    function updateWithdrawProtection(bool _withdrawProtection)\n', '        external\n', '        onlyAuthorized\n', '    {\n', '        withdrawProtection = _withdrawProtection;\n', '    }\n', '\n', '    function updateMaxLoss(uint256 _maxLoss) public onlyAuthorized {\n', '        require(_maxLoss <= 10_000);\n', '        maxLoss = _maxLoss;\n', '    }\n', '\n', '    function delegatedAssets() public view override returns (uint256) {\n', '        return\n', '            Math.min(\n', '                curveTokenToWant(curveTokensInYVault()),\n', '                vault.strategies(address(this)).totalDebt\n', '            );\n', '    }\n', '\n', '    function estimatedTotalAssets() public view override returns (uint256) {\n', '        uint256 totalCurveTokens = curveTokensInYVault().add(\n', '            curveToken.balanceOf(address(this))\n', '        );\n', '        // NOTE: want is always sUSD so we directly use _balanceOfSUSD\n', '        // NOTE: _synthToSUSD takes into account future fees in which the strategy will incur for exchanging synth for sUSD\n', '        return\n', '            _balanceOfSUSD().add(_synthToSUSD(_balanceOfSynth())).add(\n', '                curveTokenToWant(totalCurveTokens)\n', '            );\n', '    }\n', '\n', '    // returns value of total\n', '    function curveTokenToWant(uint256 tokens) public view returns (uint256) {\n', '        if (tokens == 0) {\n', '            return 0;\n', '        }\n', '\n', '        //we want to choose lower value of virtual price and amount we really get out\n', '        //this means we will always underestimate current assets.\n', '        uint256 virtualOut = virtualPriceToSynth().mul(tokens).div(1e18);\n', '\n', '        return _synthToSUSD(virtualOut);\n', '    }\n', '\n', '    //we lose some precision here. but it shouldnt matter as we are underestimating\n', '    function virtualPriceToSynth() public view returns (uint256) {\n', '        return curvePool.get_virtual_price();\n', '    }\n', '\n', '    function curveTokensInYVault() public view returns (uint256) {\n', '        uint256 balance = yvToken.balanceOf(address(this));\n', '\n', '        if (yvToken.totalSupply() == 0) {\n', '            //needed because of revert on priceperfullshare if 0\n', '            return 0;\n', '        }\n', '        uint256 pricePerShare = yvToken.pricePerShare();\n', '        //curve tokens are 1e18 decimals\n', '        return balance.mul(pricePerShare).div(1e18);\n', '    }\n', '\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        override\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        )\n', '    {\n', '        _debtPayment = _debtOutstanding;\n', '\n', '        uint256 debt = vault.strategies(address(this)).totalDebt;\n', '        uint256 currentValue = estimatedTotalAssets();\n', '        uint256 wantBalance = _balanceOfSUSD(); // want is always sUSD\n', '\n', '        // we check against estimatedTotalAssets\n', '        if (debt < currentValue) {\n', '            //profit\n', '            _profit = currentValue.sub(debt);\n', '            // NOTE: the strategy will only be able to serve profit payment up to buffer amount\n', '            // we limit profit and try to delay its reporting until there is enough unlocked want to repay it to the vault\n', '            _profit = Math.min(wantBalance, _profit);\n', '        } else {\n', '            _loss = debt.sub(currentValue);\n', '        }\n', '\n', '        uint256 toFree = _debtPayment.add(_profit);\n', '        // if the strategy needs to exchange sETH into sUSD, the waiting period will kick in and the vault.report will revert !!!\n', '        // this only works if the strategy has been previously unwinded using BUFFER = 100% OR manual function\n', '        // otherwise, max amount "toFree" is wantBalance (which should be the buffer, which should be setted to be able to serve profit taking)\n', '        if (toFree > wantBalance) {\n', '            toFree = toFree.sub(wantBalance);\n', '\n', '            (, uint256 withdrawalLoss) = withdrawSomeWant(toFree);\n', '\n', '            //when we withdraw we can lose money in the withdrawal\n', '            if (withdrawalLoss < _profit) {\n', '                _profit = _profit.sub(withdrawalLoss);\n', '            } else {\n', '                _loss = _loss.add(withdrawalLoss.sub(_profit));\n', '                _profit = 0;\n', '            }\n', '\n', '            wantBalance = _balanceOfSUSD();\n', '\n', '            if (wantBalance < _profit) {\n', '                _profit = wantBalance;\n', '                _debtPayment = 0;\n', '            } else if (wantBalance < _debtPayment.add(_profit)) {\n', '                _debtPayment = wantBalance.sub(_profit);\n', '            }\n', '        }\n', '    }\n', '\n', '    function harvestTrigger(uint256 callCost)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        uint256 wantCallCost;\n', '\n', '        if (address(want) == weth) {\n', '            wantCallCost = callCost;\n', '        } else {\n', '            wantCallCost = _ethToWant(callCost);\n', '        }\n', '\n', '        return super.harvestTrigger(wantCallCost);\n', '    }\n', '\n', '    function _ethToWant(uint256 _amount) internal view returns (uint256) {\n', '        address[] memory path = new address[](2);\n', '        path[0] = weth;\n', '        path[1] = address(want);\n', '\n', '        uint256[] memory amounts = IUni(uniswapRouter).getAmountsOut(\n', '            _amount,\n', '            path\n', '        );\n', '\n', '        return amounts[amounts.length - 1];\n', '    }\n', '\n', '    function adjustPosition(uint256 _debtOutstanding) internal override {\n', '        if (lastInvest.add(minTimePerInvest) > block.timestamp) {\n', '            return;\n', '        }\n', '\n', '        // 1. Check if we can invest Synth\n', '        uint256 looseSynth = _balanceOfSynth();\n', '        uint256 _sUSDBalance = _balanceOfSUSD();\n', '\n', '        // we calculate how much we need to keep in buffer\n', '        // all the amount over it will be converted into Synth\n', '        uint256 totalDebt = vault.strategies(address(this)).totalDebt; // in sUSD (want)\n', '        uint256 buffer = totalDebt.mul(susdBuffer).div(DENOMINATOR);\n', '\n', '        uint256 _sUSDToInvest = _sUSDBalance > buffer\n', '            ? _sUSDBalance.sub(buffer)\n', '            : 0;\n', '        uint256 _sUSDNeeded = _sUSDToInvest == 0 ? buffer.sub(_sUSDBalance) : 0;\n', '        uint256 _synthToSell = _sUSDNeeded > 0\n', '            ? _synthFromSUSD(_sUSDNeeded)\n', '            : 0; // amount of Synth that we need to sell to refill buffer\n', '        uint256 _synthToInvest = looseSynth > _synthToSell\n', '            ? looseSynth.sub(_synthToSell)\n', '            : 0;\n', '        // how much loose Synth, available to invest, we will have after buying sUSD?\n', "        // if we cannot invest synth (either due to Synthetix waiting period OR because we don't have enough available)\n", '        // we buy synth with sUSD and return (due to Synthetix waiting period we cannot do anything else)\n', '        if (\n', '            _exchanger().maxSecsLeftInWaitingPeriod(\n', '                address(this),\n', '                synthCurrencyKey\n', '            ) ==\n', '            0 &&\n', '            _synthToInvest > DUST_THRESHOLD\n', '        ) {\n', '            // 2. Supply liquidity (single sided) to Curve Pool\n', '            // calculate LP tokens that we will receive\n', '            uint256 expectedOut = _synthToInvest.mul(1e18).div(\n', '                virtualPriceToSynth()\n', '            );\n', '\n', '            // Minimum amount of LP tokens to mint\n', '            uint256 minMint = expectedOut\n', '            .mul(DENOMINATOR.sub(slippageProtectionIn))\n', '            .div(DENOMINATOR);\n', '\n', '            ensureAllowance(\n', '                address(curvePool),\n', '                address(_synthCoin()),\n', '                _synthToInvest\n', '            );\n', '\n', '            // NOTE: pool size cannot be more than 4 or less than 2\n', '            if (poolSize == 2) {\n', '                uint256[2] memory amounts;\n', '                amounts[uint256(curveId)] = _synthToInvest;\n', '                if (hasUnderlying) {\n', '                    curvePool.add_liquidity(amounts, minMint, true);\n', '                } else {\n', '                    curvePool.add_liquidity(amounts, minMint);\n', '                }\n', '            } else if (poolSize == 3) {\n', '                uint256[3] memory amounts;\n', '                amounts[uint256(curveId)] = _synthToInvest;\n', '                if (hasUnderlying) {\n', '                    curvePool.add_liquidity(amounts, minMint, true);\n', '                } else {\n', '                    curvePool.add_liquidity(amounts, minMint);\n', '                }\n', '            } else {\n', '                uint256[4] memory amounts;\n', '                amounts[uint256(curveId)] = _synthToInvest;\n', '                if (hasUnderlying) {\n', '                    curvePool.add_liquidity(amounts, minMint, true);\n', '                } else {\n', '                    curvePool.add_liquidity(amounts, minMint);\n', '                }\n', '            }\n', '\n', '            // 3. Deposit LP tokens in yVault\n', '            uint256 lpBalance = curveToken.balanceOf(address(this));\n', '\n', '            if (lpBalance > 0) {\n', '                ensureAllowance(\n', '                    address(yvToken),\n', '                    address(curveToken),\n', '                    lpBalance\n', '                );\n', '                yvToken.deposit();\n', '            }\n', '            lastInvest = block.timestamp;\n', '        }\n', '\n', '        if (_synthToSell == 0) {\n', '            // This will invest all available sUSD (exchanging to Synth first)\n', '            // Exchange amount of sUSD to Synth\n', '            _sUSDToInvest = Math.min(\n', '                _sUSDToInvest,\n', '                _sUSDFromSynth(maxSingleInvest)\n', '            );\n', '            if (_sUSDToInvest == 0) {\n', '                return;\n', '            }\n', '            exchangeSUSDToSynth(_sUSDToInvest);\n', '            // now the waiting period starts\n', '        } else if (_synthToSell >= DUST_THRESHOLD) {\n', '            // this means that we need to refill the buffer\n', "            // we may have already some uninvested Synth so we use it (and avoid withdrawing from Curve's Pool)\n", '            uint256 available = _synthToSUSD(_balanceOfSynth());\n', '            uint256 sUSDToWithdraw = _sUSDNeeded > available\n', '                ? _sUSDNeeded.sub(available)\n', '                : 0;\n', '            // this will withdraw and sell full balance of Synth (inside withdrawSomeWant)\n', '            if (sUSDToWithdraw > 0) {\n', '                withdrawSomeWant(sUSDToWithdraw);\n', '            }\n', '            // now the waiting period starts\n', '        }\n', '    }\n', '\n', '    function ensureAllowance(\n', '        address _spender,\n', '        address _token,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (IERC20(_token).allowance(address(this), _spender) < _amount) {\n', '            IERC20(_token).safeApprove(_spender, 0);\n', '            IERC20(_token).safeApprove(_spender, type(uint256).max);\n', '        }\n', '    }\n', '\n', '    function liquidatePosition(uint256 _amountNeeded)\n', '        internal\n', '        override\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        uint256 wantBal = _balanceOfSUSD(); // want is always sUSD\n', '        if (wantBal < _amountNeeded) {\n', '            (_liquidatedAmount, _loss) = withdrawSomeWant(\n', '                _amountNeeded.sub(wantBal)\n', '            );\n', '        }\n', '\n', '        _liquidatedAmount = Math.min(\n', '            _amountNeeded,\n', '            _liquidatedAmount.add(wantBal)\n', '        );\n', '    }\n', '\n', '    //safe to enter more than we have\n', '    function withdrawSomeWant(uint256 _amount)\n', '        internal\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        uint256 sUSDBalanceBefore = _balanceOfSUSD();\n', '\n', '        // LPtoken virtual price in Synth\n', '        uint256 virtualPrice = virtualPriceToSynth();\n', '\n', '        // 1. We calculate how many LP tokens we need to burn to get requested want\n', '        uint256 amountWeNeedFromVirtualPrice = _synthFromSUSD(_amount)\n', '        .mul(1e18)\n', '        .div(virtualPrice);\n', '\n', '        // 2. Withdraw LP tokens from yVault\n', '        uint256 crvBeforeBalance = curveToken.balanceOf(address(this));\n', '\n', '        // Calculate how many shares we need to burn to get the amount of LP tokens that we want\n', '        uint256 pricePerFullShare = yvToken.pricePerShare();\n', '        uint256 amountFromVault = amountWeNeedFromVirtualPrice.mul(1e18).div(\n', '            pricePerFullShare\n', '        );\n', '\n', '        // cap to our yShares balance\n', '        uint256 yBalance = yvToken.balanceOf(address(this));\n', '        if (amountFromVault > yBalance) {\n', '            amountFromVault = yBalance;\n', '            // this is not loss. so we amend amount\n', '\n', '            uint256 _amountOfCrv = amountFromVault.mul(pricePerFullShare).div(\n', '                1e18\n', '            );\n', '            _amount = _amountOfCrv.mul(virtualPrice).div(1e18);\n', '        }\n', '\n', '        if (amountFromVault > 0) {\n', '            // Added explicit maxLoss protection in case something goes wrong\n', '            yvToken.withdraw(amountFromVault, address(this), maxLoss);\n', '\n', '            if (withdrawProtection) {\n', '                //this tests that we liquidated all of the expected ytokens. Without it if we get back less then will mark it is loss\n', '                require(\n', '                    yBalance.sub(yvToken.balanceOf(address(this))) >=\n', '                        amountFromVault.sub(1),\n', '                    "YVAULTWITHDRAWFAILED"\n', '                );\n', '            }\n', '\n', '            // 3. Get coins back by burning LP tokens\n', '            // We are going to burn the amount of LP tokens we just withdrew\n', '            uint256 toBurn = curveToken.balanceOf(address(this)).sub(\n', '                crvBeforeBalance\n', '            );\n', '\n', '            // amount of synth we expect to receive\n', '            uint256 toWithdraw = toBurn.mul(virtualPriceToSynth()).div(1e18);\n', '\n', '            // minimum amount of coins we are going to receive\n', '            uint256 minAmount = toWithdraw\n', '            .mul(DENOMINATOR.sub(slippageProtectionOut))\n', '            .div(DENOMINATOR);\n', '\n', '            if (hasUnderlying) {\n', '                curvePool.remove_liquidity_one_coin(\n', '                    toBurn,\n', '                    curveId,\n', '                    minAmount,\n', '                    true\n', '                );\n', '            } else {\n', '                curvePool.remove_liquidity_one_coin(toBurn, curveId, minAmount);\n', '            }\n', '        }\n', '\n', '        // 4. Exchange the full balance of Synth for sUSD (want)\n', '        if (_balanceOfSynth() > DUST_THRESHOLD) {\n', '            exchangeSynthToSUSD();\n', '        }\n', '\n', '        uint256 diff = _balanceOfSUSD().sub(sUSDBalanceBefore);\n', '        if (diff > _amount) {\n', '            _liquidatedAmount = _amount;\n', '        } else {\n', '            _liquidatedAmount = diff;\n', '            _loss = _amount.sub(diff);\n', '        }\n', '    }\n', '\n', '    function manualRemoveFullLiquidity()\n', '        external\n', '        onlyGovernance\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        // It will remove max amount of assets and trade sETH for sUSD\n', '        // the Synthetix waiting period will start (and harvest can be called 6 mins later)\n', '        (_liquidatedAmount, _loss) = withdrawSomeWant(estimatedTotalAssets());\n', '    }\n', '\n', '    function prepareMigration(address _newStrategy) internal override {\n', "        // only yvToken and want balances should be required but we do all of them to avoid having them stuck in strategy's middle steps\n", "        // want balance is sent from BaseStrategy's migrate method\n", '        yvToken.transfer(_newStrategy, yvToken.balanceOf(address(this)));\n', '        curveToken.transfer(_newStrategy, curveToken.balanceOf(address(this)));\n', '        IERC20(address(_synthCoin())).transfer(_newStrategy, _balanceOfSynth());\n', '    }\n', '\n', '    // Override this to add all tokens/tokenized positions this contract manages\n', '    // on a *persistent* basis (e.g. not just for swapping back to want ephemerally)\n', '    // NOTE: Do *not* include `want`, already included in `sweep` below\n', '    //\n', '    // Example:\n', '    //\n', '    //    function protectedTokens() internal override view returns (address[] memory) {\n', '    //      address[] memory protected = new address[](3);\n', '    //      protected[0] = tokenA;\n', '    //      protected[1] = tokenB;\n', '    //      protected[2] = tokenC;\n', '    //      return protected;\n', '    //    }\n', '    function protectedTokens()\n', '        internal\n', '        view\n', '        override\n', '        returns (address[] memory)\n', '    {\n', '        address[] memory protected = new address[](1);\n', '        protected[0] = address(yvToken);\n', '\n', '        return protected;\n', '    }\n', '}']