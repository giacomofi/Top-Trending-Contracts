['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-10\n', '*/\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        uint c = a - b;\n', '\n', '        return c;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint c = a / b;\n', '\n', '        return c;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Ownable\n', ' * @dev The Ownable contract has an owner address, and provides basic authorization control\n', ' * functions, this simplifies the implementation of "user permissions".\n', ' */\n', 'contract Ownable {\n', '    address public owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    /**\n', '     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n', '     * account.\n', '     */\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n', '     * @param newOwner The address to transfer ownership to.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        require(newOwner != address(0));\n', '        emit OwnershipTransferred(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '}\n', '\n', 'interface INFT {\n', '    function mintNft(address _to, string calldata _symbol, string calldata  _name, string calldata _icon, uint _goal) external returns (uint256);\n', '    function addFile(uint _tokenId, string calldata _file) external;\n', '\n', '}\n', '\n', 'interface ERC20 {\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address from, address to, uint256 value) external;\n', '    function balanceOf(address who) external view returns (uint256);\n', '    function transfer(address to, uint256 value) external;\n', '}\n', '\n', 'contract Gswap_stake is Ownable{\n', '    using SafeMath for uint;\n', '\n', '    INFT public nft;\n', '    ERC20 public usdg;\n', '    uint public cost;\n', '\n', '    mapping (uint => address) private tokenHolders;\n', '\n', '    event GovWithdrawToken(address indexed token, address indexed to, uint256 value);\n', '\n', '    constructor(address _usdg,address _nft, uint _cost)public {\n', '        setParams(_usdg,_nft,_cost);\n', '    }\n', '\n', '    function ipo(string memory _symbol, string memory _name, string memory _icon,uint _goal) public {\n', '        uint allowed = usdg.allowance(msg.sender,address(this));\n', '        uint balanced = usdg.balanceOf(msg.sender);\n', '        require(allowed >= cost, "!allowed");\n', '        require(balanced >= cost, "!balanced");\n', '        usdg.transferFrom( msg.sender,address(this), cost);\n', '\n', '        uint tokenId = nft.mintNft(msg.sender,_symbol,_name,_icon,_goal);\n', '        tokenHolders[tokenId] = msg.sender;\n', '    }\n', '\n', '    function addFile(uint _tokenId, string memory _file)public{\n', '        require(tokenHolders[_tokenId] == msg.sender, "not authorized");\n', '        nft.addFile(_tokenId,_file);\n', '    }\n', '\n', '    function govWithdraUsdg(uint256 _amount)onlyOwner public {\n', '        require(_amount > 0, "!zero input");\n', '        usdg.transfer( msg.sender, _amount);\n', '        emit GovWithdrawToken(address(usdg), msg.sender, _amount);\n', '    }\n', '\n', '    function setParams(address _usdg,address _nft, uint _cost)onlyOwner public {\n', '        usdg = ERC20(_usdg);\n', '        nft = INFT(_nft);\n', '        cost = _cost;\n', '    }\n', '}']