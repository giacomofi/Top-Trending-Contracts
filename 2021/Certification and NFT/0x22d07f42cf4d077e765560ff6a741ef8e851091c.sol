['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-08\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Global Enums and Structs\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', '// Part: IConvexDeposit\n', '\n', 'interface IConvexDeposit {\n', '    // deposit into convex, receive a tokenized deposit.  parameter to stake immediately (we always do this).\n', '    function deposit(\n', '        uint256 _pid,\n', '        uint256 _amount,\n', '        bool _stake\n', '    ) external returns (bool);\n', '\n', '    // burn a tokenized deposit (Convex deposit tokens) to receive curve lp tokens back\n', '    function withdraw(uint256 _pid, uint256 _amount) external returns (bool);\n', '}\n', '\n', '// Part: IConvexRewards\n', '\n', 'interface IConvexRewards {\n', "    // strategy's staked balance in the synthetix staking contract\n", '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    // read how much claimable CRV a strategy has\n', '    function earned(address account) external view returns (uint256);\n', '\n', '    // stake a convex tokenized deposit\n', '    function stake(uint256 _amount) external returns (bool);\n', '\n', '    // withdraw to a convex tokenized deposit, probably never need to use this\n', '    function withdraw(uint256 _amount, bool _claim) external returns (bool);\n', '\n', '    // withdraw directly to curve LP token, this is what we primarily use\n', '    function withdrawAndUnwrap(uint256 _amount, bool _claim)\n', '        external\n', '        returns (bool);\n', '\n', '    // claim rewards, with an option to claim extra rewards or not\n', '    function getReward(address _account, bool _claimExtras)\n', '        external\n', '        returns (bool);\n', '}\n', '\n', '// Part: ICurveFi\n', '\n', 'interface ICurveFi {\n', '    function add_liquidity(uint256[2] calldata amounts, uint256 min_mint_amount)\n', '        external\n', '        payable;\n', '\n', '    function remove_liquidity_imbalance(\n', '        uint256[2] calldata amounts,\n', '        uint256 max_burn_amount\n', '    ) external;\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint256 _token_amount,\n', '        int128 i,\n', '        uint256 min_amount\n', '    ) external;\n', '\n', '    function calc_token_amount(uint256[2] calldata amounts, bool is_deposit)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calc_withdraw_one_coin(uint256 amount, int128 i)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', '// Part: IUniswapV2Router01\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        returns (\n', '            uint256 amountA,\n', '            uint256 amountB,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint256 amountTokenDesired,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    )\n', '        external\n', '        payable\n', '        returns (\n', '            uint256 amountToken,\n', '            uint256 amountETH,\n', '            uint256 liquidity\n', '        );\n', '\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountToken, uint256 amountETH);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactETHForTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactETH(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapETHForExactTokens(\n', '        uint256 amountOut,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable returns (uint256[] memory amounts);\n', '\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountOut);\n', '\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) external pure returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash =\n', '            0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Math\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: ICrvV3\n', '\n', 'interface ICrvV3 is IERC20 {\n', '    function minter() external view returns (address);\n', '}\n', '\n', '// Part: IUniswapV2Router02\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint256 liquidity,\n', '        uint256 amountTokenMin,\n', '        uint256 amountETHMin,\n', '        address to,\n', '        uint256 deadline,\n', '        bool approveMax,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external returns (uint256 amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external payable;\n', '\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external;\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', '                "SafeERC20: decreased allowance below zero"\n', '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/VaultAPI\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function withdraw(uint256 shares, address recipient)\n', '        external\n', '        returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy)\n', '        external\n', '        view\n', '        returns (StrategyParams memory);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/BaseStrategy\n', '\n', '/**\n', ' * @title Yearn Base Strategy\n', ' * @author yearn.finance\n', ' * @notice\n', ' *  BaseStrategy implements all of the required functionality to interoperate\n', ' *  closely with the Vault contract. This contract should be inherited and the\n', ' *  abstract methods implemented to adapt the Strategy to the particular needs\n', ' *  it has to create a return.\n', ' *\n', ' *  Of special interest is the relationship between `harvest()` and\n', " *  `vault.report()'. `harvest()` may be called simply because enough time has\n", ' *  elapsed since the last report, and not because any funds need to be moved\n', ' *  or positions adjusted. This is critical so that the Vault may maintain an\n', " *  accurate picture of the Strategy's performance. See  `vault.report()`,\n", ' *  `harvest()`, and `harvestTrigger()` for further details.\n', ' */\n', 'abstract contract BaseStrategy {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    string public metadataURI;\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to track which version of `StrategyAPI` this Strategy\n', '     *  implements.\n', "     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n", '     * @return A string which holds the current API version of this contract.\n', '     */\n', '    function apiVersion() public pure returns (string memory) {\n', '        return "0.3.2";\n', '    }\n', '\n', '    /**\n', "     * @notice This Strategy's name.\n", '     * @dev\n', '     *  You can use this field to manage the "version" of this Strategy, e.g.\n', '     *  `StrategySomethingOrOtherV1`. However, "API Version" is managed by\n', '     *  `apiVersion()` function above.\n', "     * @return This Strategy's name.\n", '     */\n', '    function name() external view virtual returns (string memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  The amount (priced in want) of the total assets managed by this strategy should not count\n', "     *  towards Yearn's TVL calculations.\n", '     * @dev\n', '     *  You can override this field to set it to a non-zero value if some of the assets of this\n', "     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n", '     *  Note that this value must be strictly less than or equal to the amount provided by\n', '     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n', '     * @return\n', "     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n", "     *  Locked (TVL) calculation across it's ecosystem.\n", '     */\n', '    function delegatedAssets() external view virtual returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    VaultAPI public vault;\n', '    address public strategist;\n', '    address public rewards;\n', '    address public keeper;\n', '\n', '    IERC20 public want;\n', '\n', '    // So indexers can keep track of this\n', '    event Harvested(\n', '        uint256 profit,\n', '        uint256 loss,\n', '        uint256 debtPayment,\n', '        uint256 debtOutstanding\n', '    );\n', '\n', '    event UpdatedStrategist(address newStrategist);\n', '\n', '    event UpdatedKeeper(address newKeeper);\n', '\n', '    event UpdatedRewards(address rewards);\n', '\n', '    event UpdatedMinReportDelay(uint256 delay);\n', '\n', '    event UpdatedMaxReportDelay(uint256 delay);\n', '\n', '    event UpdatedProfitFactor(uint256 profitFactor);\n', '\n', '    event UpdatedDebtThreshold(uint256 debtThreshold);\n', '\n', '    event EmergencyExitEnabled();\n', '\n', '    event UpdatedMetadataURI(string metadataURI);\n', '\n', '    // The minimum number of seconds between harvest calls. See\n', '    // `setMinReportDelay()` for more details.\n', '    uint256 public minReportDelay = 0;\n', '\n', '    // The maximum number of seconds between harvest calls. See\n', '    // `setMaxReportDelay()` for more details.\n', '    uint256 public maxReportDelay = 86400; // ~ once a day\n', '\n', '    // The minimum multiple that `callCost` must be above the credit/profit to\n', '    // be "justifiable". See `setProfitFactor()` for more details.\n', '    uint256 public profitFactor = 100;\n', '\n', '    // Use this to adjust the threshold at which running a debt causes a\n', '    // harvest trigger. See `setDebtThreshold()` for more details.\n', '    uint256 public debtThreshold = 0;\n', '\n', '    // See note on `setEmergencyExit()`.\n', '    bool public emergencyExit;\n', '\n', '    // modifiers\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            msg.sender == strategist || msg.sender == governance(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        require(msg.sender == strategist, "!strategist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyKeepers() {\n', '        require(\n', '            msg.sender == keeper ||\n', '                msg.sender == strategist ||\n', '                msg.sender == governance() ||\n', '                msg.sender == vault.guardian() ||\n', '                msg.sender == vault.management(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address _vault) public {\n', '        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Initializes the Strategy, this is called only once, when the\n', '     *  contract is deployed.\n', '     * @dev `_vault` should implement `VaultAPI`.\n', '     * @param _vault The address of the Vault responsible for this Strategy.\n', '     */\n', '    function _initialize(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper\n', '    ) internal {\n', '        require(address(want) == address(0), "Strategy already initialized");\n', '\n', '        vault = VaultAPI(_vault);\n', '        want = IERC20(vault.token());\n', '        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n', '        strategist = _strategist;\n', '        rewards = _rewards;\n', '        keeper = _keeper;\n', '        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `strategist`.\n', '     *\n', '     *  This may only be called by governance or the existing strategist.\n', '     * @param _strategist The new address to assign as `strategist`.\n', '     */\n', '    function setStrategist(address _strategist) external onlyAuthorized {\n', '        require(_strategist != address(0));\n', '        strategist = _strategist;\n', '        emit UpdatedStrategist(_strategist);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `keeper`.\n', '     *\n', '     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n', '     *  other than `governance()` or `strategist`. However, unlike\n', '     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n', '     *  and `harvest()`, and no other authorized functions, following the\n', '     *  principle of least privilege.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _keeper The new address to assign as `keeper`.\n', '     */\n', '    function setKeeper(address _keeper) external onlyAuthorized {\n', '        require(_keeper != address(0));\n', '        keeper = _keeper;\n', '        emit UpdatedKeeper(_keeper);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `rewards`. EOA or smart contract which has the permission\n', '     *  to pull rewards from the vault.\n', '     *\n', '     *  This may only be called by the strategist.\n', '     * @param _rewards The address to use for pulling rewards.\n', '     */\n', '    function setRewards(address _rewards) external onlyStrategist {\n', '        require(_rewards != address(0));\n', '        vault.approve(rewards, 0);\n', '        rewards = _rewards;\n', '        vault.approve(rewards, uint256(-1));\n', '        emit UpdatedRewards(_rewards);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the minimum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The minimum number of seconds to wait between harvests.\n', '     */\n', '    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n', '        minReportDelay = _delay;\n', '        emit UpdatedMinReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the maximum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The maximum number of seconds to wait between harvests.\n', '     */\n', '    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n', '        maxReportDelay = _delay;\n', '        emit UpdatedMaxReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `profitFactor`. `profitFactor` is used to determine\n', "     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n", '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _profitFactor A ratio to multiply anticipated\n', '     * `harvest()` gas cost against.\n', '     */\n', '    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n', '        profitFactor = _profitFactor;\n', '        emit UpdatedProfitFactor(_profitFactor);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Sets how far the Strategy can go into loss without a harvest and report\n', '     *  being required.\n', '     *\n', '     *  By default this is 0, meaning any losses would cause a harvest which\n', '     *  will subsequently report the loss to the Vault for tracking. (See\n', '     *  `harvestTrigger()` for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _debtThreshold How big of a loss this Strategy may carry without\n', '     * being required to report to the Vault.\n', '     */\n', '    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n', '        debtThreshold = _debtThreshold;\n', '        emit UpdatedDebtThreshold(_debtThreshold);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n', '     * of the file describing the strategy.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _metadataURI The URI that describe the strategy.\n', '     */\n', '    function setMetadataURI(string calldata _metadataURI)\n', '        external\n', '        onlyAuthorized\n', '    {\n', '        metadataURI = _metadataURI;\n', '        emit UpdatedMetadataURI(_metadataURI);\n', '    }\n', '\n', '    /**\n', '     * Resolve governance address from Vault contract, used to make assertions\n', '     * on protected functions in the Strategy.\n', '     */\n', '    function governance() internal view returns (address) {\n', '        return vault.governance();\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide an accurate estimate for the total amount of assets\n', '     *  (principle + return) that this Strategy is currently managing,\n', '     *  denominated in terms of `want` tokens.\n', '     *\n', '     *  This total should be "realizable" e.g. the total value that could\n', '     *  *actually* be obtained from this Strategy if it were to divest its\n', '     *  entire position based on current on-chain conditions.\n', '     * @dev\n', '     *  Care must be taken in using this function, since it relies on external\n', '     *  systems, which could be manipulated by the attacker to give an inflated\n', '     *  (or reduced) value produced by this function, based on current on-chain\n', '     *  conditions (e.g. this function is possible to influence through\n', '     *  flashloan attacks, oracle manipulations, or other DeFi attack\n', '     *  mechanisms).\n', '     *\n', '     *  It is up to governance to use this function to correctly order this\n', '     *  Strategy relative to its peers in the withdrawal queue to minimize\n', '     *  losses for the Vault based on sudden withdrawals. This value should be\n', '     *  higher than the total debt of the Strategy and higher than its expected\n', '     *  value to be "safe".\n', '     * @return The estimated total assets in this Strategy.\n', '     */\n', '    function estimatedTotalAssets() public view virtual returns (uint256);\n', '\n', '    /*\n', '     * @notice\n', '     *  Provide an indication of whether this strategy is currently "active"\n', '     *  in that it is managing an active position, or will manage a position in\n', '     *  the future. This should correlate to `harvest()` activity, so that Harvest\n', '     *  events can be tracked externally by indexing agents.\n', '     * @return True if the strategy is actively managing a position.\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return\n', '            vault.strategies(address(this)).debtRatio > 0 ||\n', '            estimatedTotalAssets() > 0;\n', '    }\n', '\n', '    /**\n', '     * Perform any Strategy unwinding or other calls necessary to capture the\n', '     * "free return" this Strategy has generated since the last time its core\n', '     * position(s) were adjusted. Examples include unwrapping extra rewards.\n', '     * This call is only used during "normal operation" of a Strategy, and\n', '     * should be optimized to minimize losses as much as possible.\n', '     *\n', '     * This method returns any realized profits and/or realized losses\n', '     * incurred, and should return the total amounts of profits/losses/debt\n', "     * payments (in `want` tokens) for the Vault's accounting (e.g.\n", '     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\n', '     *\n', '     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n', '     * debt limit, otherwise its value will be how far past the debt limit\n', "     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n", '     *\n', '     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n', '     *       It is okay for it to be less than `_debtOutstanding`, as that\n', '     *       should only used as a guide for how much is left to pay back.\n', '     *       Payments should be made to minimize loss from slippage, debt,\n', '     *       withdrawal fees, etc.\n', '     *\n', '     * See `vault.debtOutstanding()`.\n', '     */\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        virtual\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        );\n', '\n', '    /**\n', '     * Perform any adjustments to the core position(s) of this Strategy given\n', '     * what change the Vault made in the "investable capital" available to the\n', '     * Strategy. Note that all "free capital" in the Strategy after the report\n', '     * was made is available for reinvestment. Also note that this number\n', '     * could be 0, and you should handle that scenario accordingly.\n', '     *\n', '     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n', '     */\n', '    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n', '\n', '    /**\n', "     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n", '     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n', '     * This function should return the amount of `want` tokens made available by the\n', '     * liquidation. If there is a difference between them, `_loss` indicates whether the\n', '     * difference is due to a realized loss, or if there is some other sitution at play\n', '     * (e.g. locked funds) where the amount made available is less than what is needed.\n', '     * This function is used during emergency exit instead of `prepareReturn()` to\n', "     * liquidate all of the Strategy's positions back to the Vault.\n", '     *\n', '     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n', '     */\n', '    function liquidatePosition(uint256 _amountNeeded)\n', '        internal\n', '        virtual\n', '        returns (uint256 _liquidatedAmount, uint256 _loss);\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `tend()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `tend()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `tend()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be\n', '     *  "at a loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `harvestTrigger()` should never return `true` at the same\n', '     *  time.\n', "     * @param callCost The keeper's estimated cast cost to call `tend()`.\n", '     * @return `true` if `tend()` should be called, `false` otherwise.\n', '     */\n', '    function tendTrigger(uint256 callCost) public view virtual returns (bool) {\n', "        // We usually don't need tend, but if there are positions that need\n", '        // active maintainence, overriding this function is how you would\n', '        // signal for that.\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', "     *  Adjust the Strategy's position. The purpose of tending isn't to\n", '     *  realize gains, but to maximize yield by reinvesting any returns.\n', '     *\n', '     *  See comments on `adjustPosition()`.\n', '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     */\n', '    function tend() external onlyKeepers {\n', "        // Don't take profits with this call, but adjust for better gains\n", '        adjustPosition(vault.debtOutstanding());\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `harvest()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `harvest()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `harvest()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be "at a\n', '     *  loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `tendTrigger` should never return `true` at the\n', '     *  same time.\n', '     *\n', '     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n', '     *  strategist-controlled parameters that will influence whether this call\n', '     *  returns `true` or not. These parameters will be used in conjunction\n', '     *  with the parameters reported to the Vault (see `params`) to determine\n', '     *  if calling `harvest()` is merited.\n', '     *\n', '     *  It is expected that an external system will check `harvestTrigger()`.\n', '     *  This could be a script run off a desktop or cloud bot (e.g.\n', '     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\n', '     *  or via an integration with the Keep3r network (e.g.\n', '     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n', "     * @param callCost The keeper's estimated cast cost to call `harvest()`.\n", '     * @return `true` if `harvest()` should be called, `false` otherwise.\n', '     */\n', '    function harvestTrigger(uint256 callCost)\n', '        public\n', '        view\n', '        virtual\n', '        returns (bool)\n', '    {\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // Should not trigger if Strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should not trigger if we haven't waited long enough since previous harvest\n", '        if (block.timestamp.sub(params.lastReport) < minReportDelay)\n', '            return false;\n', '\n', "        // Should trigger if hasn't been called in a while\n", '        if (block.timestamp.sub(params.lastReport) >= maxReportDelay)\n', '            return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n', '        //       changes to the value from triggering a harvest directly through user\n', '        //       behavior. This should ensure reasonable resistance to manipulation\n', '        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > debtThreshold) return true;\n', '\n', '        // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        // Trigger if we have a loss to report\n', '        if (total.add(debtThreshold) < params.totalDebt) return true;\n', '\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // Otherwise, only trigger if it "makes sense" economically (gas cost\n', '        // is <N% of value moved)\n', '        uint256 credit = vault.creditAvailable();\n', '        return (profitFactor.mul(callCost) < credit.add(profit));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n', "     *  the Strategy's position.\n", '     *\n', '     *  In the rare case the Strategy is in emergency shutdown, this will exit\n', "     *  the Strategy's position.\n", '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     * @dev\n', '     *  When `harvest()` is called, the Strategy reports to the Vault (via\n', '     *  `vault.report()`), so in some cases `harvest()` must be called in order\n', '     *  to take in profits, to borrow newly available funds from the Vault, or\n', '     *  otherwise adjust its position. In other cases `harvest()` must be\n', "     *  called to report to the Vault on the Strategy's position, especially if\n", '     *  any losses have occurred.\n', '     */\n', '    function harvest() external onlyKeepers {\n', '        uint256 profit = 0;\n', '        uint256 loss = 0;\n', '        uint256 debtOutstanding = vault.debtOutstanding();\n', '        uint256 debtPayment = 0;\n', '        if (emergencyExit) {\n', '            // Free up as much capital as possible\n', '            uint256 totalAssets = estimatedTotalAssets();\n', '            // NOTE: use the larger of total assets or debt outstanding to book losses properly\n', '            (debtPayment, loss) = liquidatePosition(\n', '                totalAssets > debtOutstanding ? totalAssets : debtOutstanding\n', '            );\n', '            // NOTE: take up any remainder here as profit\n', '            if (debtPayment > debtOutstanding) {\n', '                profit = debtPayment.sub(debtOutstanding);\n', '                debtPayment = debtOutstanding;\n', '            }\n', '        } else {\n', '            // Free up returns for Vault to pull\n', '            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n', '        }\n', '\n', '        // Allow Vault to take up to the "harvested" balance of this contract,\n', '        // which is the amount it has earned since the last time it reported to\n', '        // the Vault.\n', '        debtOutstanding = vault.report(profit, loss, debtPayment);\n', '\n', '        // Check if free returns are left, and re-invest them\n', '        adjustPosition(debtOutstanding);\n', '\n', '        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Withdraws `_amountNeeded` to `vault`.\n', '     *\n', '     *  This may only be called by the Vault.\n', '     * @param _amountNeeded How much `want` to withdraw.\n', '     * @return _loss Any realized losses\n', '     */\n', '    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n', '        require(msg.sender == address(vault), "!vault");\n', '        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n', '        uint256 amountFreed;\n', '        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n', '        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n', '        want.safeTransfer(msg.sender, amountFreed);\n', '        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n', '    }\n', '\n', '    /**\n', '     * Do anything necessary to prepare this Strategy for migration, such as\n', '     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n', '     * value.\n', '     */\n', '    function prepareMigration(address _newStrategy) internal virtual;\n', '\n', '    /**\n', '     * @notice\n', '     *  Transfers all `want` from this Strategy to `_newStrategy`.\n', '     *\n', '     *  This may only be called by governance or the Vault.\n', '     * @dev\n', "     *  The new Strategy's Vault must be the same as this Strategy's Vault.\n", '     * @param _newStrategy The Strategy to migrate to.\n', '     */\n', '    function migrate(address _newStrategy) external {\n', '        require(msg.sender == address(vault) || msg.sender == governance());\n', '        require(BaseStrategy(_newStrategy).vault() == vault);\n', '        prepareMigration(_newStrategy);\n', '        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Activates emergency exit. Once activated, the Strategy will exit its\n', '     *  position upon the next harvest, depositing all funds into the Vault as\n', '     *  quickly as is reasonable given on-chain conditions.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @dev\n', '     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n', '     */\n', '    function setEmergencyExit() external onlyAuthorized {\n', '        emergencyExit = true;\n', '        vault.revokeStrategy();\n', '\n', '        emit EmergencyExitEnabled();\n', '    }\n', '\n', '    /**\n', '     * Override this to add all tokens/tokenized positions this contract\n', '     * manages on a *persistent* basis (e.g. not just for swapping back to\n', '     * want ephemerally).\n', '     *\n', '     * NOTE: Do *not* include `want`, already included in `sweep` below.\n', '     *\n', '     * Example:\n', '     *\n', '     *    function protectedTokens() internal override view returns (address[] memory) {\n', '     *      address[] memory protected = new address[](3);\n', '     *      protected[0] = tokenA;\n', '     *      protected[1] = tokenB;\n', '     *      protected[2] = tokenC;\n', '     *      return protected;\n', '     *    }\n', '     */\n', '    function protectedTokens() internal view virtual returns (address[] memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  Removes tokens from this Strategy that are not the type of tokens\n', '     *  managed by this Strategy. This may be used in case of accidentally\n', '     *  sending the wrong kind of token to this Strategy.\n', '     *\n', '     *  Tokens will be sent to `governance()`.\n', '     *\n', '     *  This will fail if an attempt is made to sweep `want`, or any tokens\n', '     *  that are protected by this Strategy.\n', '     *\n', '     *  This may only be called by governance.\n', '     * @dev\n', '     *  Implement `protectedTokens()` to specify any additional tokens that\n', '     *  should be protected from sweeping in addition to `want`.\n', '     * @param _token The token to transfer out of this vault.\n', '     */\n', '    function sweep(address _token) external onlyGovernance {\n', '        require(_token != address(want), "!want");\n', '        require(_token != address(vault), "!shares");\n', '\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++)\n', '            require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).safeTransfer(\n', '            governance(),\n', '            IERC20(_token).balanceOf(address(this))\n', '        );\n', '    }\n', '}\n', '\n', '// File: StrategyConvexsETH.sol\n', '\n', '/* ========== CONTRACT ========== */\n', '\n', 'contract StrategyConvexsETH is BaseStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    ICurveFi public constant curve =\n', '        ICurveFi(0xc5424B857f758E906013F3555Dad202e4bdB4567); // Curve sETH Pool, need this for buying more pool tokens\n', '    address public crvRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // default to sushiswap, more CRV liquidity there\n', '    address public cvxRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // default to sushiswap, more CVX liquidity there\n', "    address public constant voter = 0xF147b8125d2ef93FB6965Db97D6746952a133934; // Yearn's veCRV voter, we send some extra CRV here\n", '    address[] public crvPath; // path to sell CRV\n', '    address[] public convexTokenPath; // path to sell CVX\n', '\n', '    address public depositContract = 0xF403C135812408BFbE8713b5A23a04b3D48AAE31; // this is the deposit contract that all pools use, aka booster\n', '    address public rewardsContract = 0x192469CadE297D6B21F418cFA8c366b63FFC9f9b; // This is unique to each curve pool, this one is for sETH pool\n', '    uint256 public pid = 23; // this is unique to each pool, this is the one for sETH, aka eCRV\n', '\n', '    // Swap stuff\n', '    uint256 public keepCRV = 1000; // the percentage of CRV we re-lock for boost (in basis points)\n', '    uint256 public constant FEE_DENOMINATOR = 10000; // with this and the above, sending 10% of our CRV yield to our voter\n', '\n', '    ICrvV3 public constant crv =\n', '        ICrvV3(0xD533a949740bb3306d119CC777fa900bA034cd52);\n', '    IERC20 public constant convexToken =\n', '        IERC20(0x4e3FBD56CD56c3e72c1403e103b45Db9da5B9D2B);\n', '    IERC20 public constant weth =\n', '        IERC20(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IERC20 public constant dai =\n', '        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    uint256 public USE_SUSHI = 1; // if 1, use sushiswap as our router for CRV or CVX sells\n', '    address public constant sushiswapRouter =\n', '        0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n', '    address public constant uniswapRouter =\n', '        0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    // convex-specific variables\n', '    bool public harvestExtras = true; // boolean to determine if we should always claim extra rewards during getReward (generally this should be true)\n', '    bool public claimRewards = false; // boolean if we should always claim rewards when withdrawing, usually withdrawAndUnwrap (generally this should be false)\n', '\n', '    // Keep3r stuff\n', '    uint256 public manualKeep3rHarvest; // this is used in case we want to manually trigger a keep3r harvest since they are cheaper than a strategist harvest\n', '    uint256 public harvestProfitFactor; // the multiple that our harvest profit needs to be compared to harvest cost for it to trigger\n', '    uint256 public tendCounter; // track our tendies\n', '    uint256 public tendsPerHarvest; // how many tends we call before we harvest. set to 0 to never call tends.\n', '    uint256 internal harvestNow; // 0 for false, 1 for true if we are mid-harvest. this is used to differentiate tends vs harvests in adjustPosition\n', '\n', '    constructor(address _vault) public BaseStrategy(_vault) {\n', '        // You can set these parameters on deployment to whatever you want\n', '        minReportDelay = 0;\n', '        maxReportDelay = 172800; // 2 days in seconds, if we hit this then harvestTrigger = True\n', "        debtThreshold = 1000 * 1e18; // we shouldn't ever have debt, but set a bit of a buffer\n", '        profitFactor = 4000; // in this strategy, profitFactor is only used for telling keep3rs when to move funds from vault to strategy (what previously was an earn call)\n', '\n', '        // want = crvSETH, sETH curve pool (sETH + ETH)\n', '        want.safeApprove(address(depositContract), type(uint256).max);\n', '\n', '        // add approvals for crv on sushiswap and uniswap due to weird crv approval issues for setCrvRouter\n', "        // add approvals on all tokens. since we use ETH to deposit to Curve pool, we don't need approvals for it\n", '        IERC20(address(crv)).safeApprove(uniswapRouter, type(uint256).max);\n', '        IERC20(address(crv)).safeApprove(sushiswapRouter, type(uint256).max);\n', '        convexToken.safeApprove(uniswapRouter, type(uint256).max);\n', '        convexToken.safeApprove(sushiswapRouter, type(uint256).max);\n', '\n', '        // crv token path\n', '        crvPath = new address[](2);\n', '        crvPath[0] = address(crv);\n', '        crvPath[1] = address(weth);\n', '\n', '        // convex token path\n', '        convexTokenPath = new address[](2);\n', '        convexTokenPath[0] = address(convexToken);\n', '        convexTokenPath[1] = address(weth);\n', '    }\n', '\n', '    function name() external view override returns (string memory) {\n', '        return "StrategyConvexsETH";\n', '    }\n', '\n', '    // total assets held by strategy. loose funds in strategy and all staked funds\n', '    function estimatedTotalAssets() public view override returns (uint256) {\n', '        return\n', '            IConvexRewards(rewardsContract).balanceOf(address(this)).add(\n', '                want.balanceOf(address(this))\n', '            );\n', '    }\n', '\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        override\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        )\n', '    {\n', '        // TODO: Do stuff here to free up any returns back into `want`\n', '        // NOTE: Return `_profit` which is value generated by all positions, priced in `want`\n', '        // NOTE: Should try to free up at least `_debtOutstanding` of underlying position\n', '\n', '        // if we have anything staked, then harvest CRV and CVX from the rewards contract\n', '        uint256 stakedTokens =\n', '            IConvexRewards(rewardsContract).balanceOf(address(this));\n', '        uint256 claimableTokens =\n', '            IConvexRewards(rewardsContract).earned(address(this));\n', '        if (stakedTokens > 0 && claimableTokens > 0) {\n', '            // this claims our CRV, CVX, and any extra tokens like SNX or ANKR\n', "            // if for some reason we don't want extra rewards, make sure we don't harvest them\n", '            IConvexRewards(rewardsContract).getReward(\n', '                address(this),\n', '                harvestExtras\n', '            );\n', '\n', '            uint256 crvBalance = crv.balanceOf(address(this));\n', '            uint256 convexBalance = convexToken.balanceOf(address(this));\n', '\n', '            uint256 _keepCRV = crvBalance.mul(keepCRV).div(FEE_DENOMINATOR);\n', '            IERC20(address(crv)).safeTransfer(voter, _keepCRV);\n', '            uint256 crvRemainder = crvBalance.sub(_keepCRV);\n', '\n', '            _sellCrv(crvRemainder);\n', '            if (convexBalance > 0) _sellConvex(convexBalance);\n', '\n', '            uint256 ethBalance = address(this).balance;\n', '            if (ethBalance > 0) {\n', '                curve.add_liquidity{value: ethBalance}([ethBalance, 0], 0);\n', '            }\n', '        }\n', '        // this is a harvest, so set our switch equal to 1 so this\n', '        // performs as a harvest the whole way through\n', '        harvestNow = 1;\n', '\n', '        // if this was the result of a manual keep3r harvest, then reset our trigger\n', '        if (manualKeep3rHarvest == 1) manualKeep3rHarvest = 0;\n', '\n', "        // serious loss should never happen, but if it does (for instance, if Curve is hacked), let's record it accurately\n", '        uint256 assets = estimatedTotalAssets();\n', '        uint256 debt = vault.strategies(address(this)).totalDebt;\n', '\n', '        // if assets are greater than debt, things are working great!\n', '        if (assets > debt) {\n', '            _profit = want.balanceOf(address(this));\n', '        } else {\n', '            // if assets are less than debt, we are in trouble\n', '            _loss = debt.sub(assets);\n', '            _profit = 0;\n', '        }\n', '\n', '        // debtOustanding will only be > 0 in the event of revoking or lowering debtRatio of a strategy\n', '        if (_debtOutstanding > 0) {\n', '            IConvexRewards(rewardsContract).withdrawAndUnwrap(\n', '                Math.min(stakedTokens, _debtOutstanding),\n', '                claimRewards\n', '            );\n', '\n', '            _debtPayment = Math.min(\n', '                _debtOutstanding,\n', '                want.balanceOf(address(this))\n', '            );\n', '        }\n', '    }\n', '\n', '    function adjustPosition(uint256 _debtOutstanding) internal override {\n', '        if (emergencyExit) {\n', '            return;\n', '        }\n', '\n', '        if (harvestNow == 1) {\n', '            // if this is part of a harvest call, send all of our Iron Bank pool tokens to be deposited\n', '            uint256 _toInvest = want.balanceOf(address(this));\n', '            // deposit into convex and stake immediately but only if we have something to invest\n', '            if (_toInvest > 0)\n', '                IConvexDeposit(depositContract).deposit(pid, _toInvest, true);\n', "            // since we've completed our harvest call, reset our tend counter and our harvest now\n", '            tendCounter = 0;\n', '            harvestNow = 0;\n', '        } else {\n', '            // This is our tend call. If we have anything staked, then harvest CRV and CVX from the rewards contract\n', '            uint256 stakedTokens =\n', '                IConvexRewards(rewardsContract).balanceOf(address(this));\n', '            uint256 claimableTokens =\n', '                IConvexRewards(rewardsContract).earned(address(this));\n', '            if (stakedTokens > 0 && claimableTokens > 0) {\n', "                // if for some reason we don't want extra rewards, make sure we don't harvest them\n", '                IConvexRewards(rewardsContract).getReward(\n', '                    address(this),\n', '                    harvestExtras\n', '                );\n', '\n', '                uint256 crvBalance = crv.balanceOf(address(this));\n', '                uint256 convexBalance = convexToken.balanceOf(address(this));\n', '\n', '                uint256 _keepCRV = crvBalance.mul(keepCRV).div(FEE_DENOMINATOR);\n', '                IERC20(address(crv)).safeTransfer(voter, _keepCRV);\n', '                uint256 crvRemainder = crvBalance.sub(_keepCRV);\n', '\n', '                _sellCrv(crvRemainder);\n', '                if (convexBalance > 0) _sellConvex(convexBalance);\n', '                // increase our tend counter by 1 so we can know when we should harvest again\n', '                uint256 previousTendCounter = tendCounter;\n', '                tendCounter = previousTendCounter.add(1);\n', '            }\n', '        }\n', '    }\n', '\n', '    function liquidatePosition(uint256 _amountNeeded)\n', '        internal\n', '        override\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        uint256 wantBal = want.balanceOf(address(this));\n', '        if (_amountNeeded > wantBal) {\n', '            uint256 stakedTokens =\n', '                IConvexRewards(rewardsContract).balanceOf(address(this));\n', '            IConvexRewards(rewardsContract).withdrawAndUnwrap(\n', '                Math.min(stakedTokens, _amountNeeded - wantBal),\n', '                claimRewards\n', '            );\n', '\n', '            uint256 withdrawnBal = want.balanceOf(address(this));\n', '            _liquidatedAmount = Math.min(_amountNeeded, withdrawnBal);\n', '\n', '            _loss = _amountNeeded.sub(_liquidatedAmount);\n', '        } else {\n', '            // we have enough balance to cover the liquidation available\n', '            return (_amountNeeded, 0);\n', '        }\n', '    }\n', '\n', '    // Sells our harvested CRV into the selected output (ETH).\n', '    function _sellCrv(uint256 _crvAmount) internal {\n', '        IUniswapV2Router02(crvRouter).swapExactTokensForETH(\n', '            _crvAmount,\n', '            uint256(0),\n', '            crvPath,\n', '            address(this),\n', '            now\n', '        );\n', '    }\n', '\n', '    // Sells our harvested CVX into the selected output (ETH).\n', '    function _sellConvex(uint256 _convexAmount) internal {\n', '        IUniswapV2Router02(cvxRouter).swapExactTokensForETH(\n', '            _convexAmount,\n', '            uint256(0),\n', '            convexTokenPath,\n', '            address(this),\n', '            now\n', '        );\n', '    }\n', '\n', '    // in case we need to exit into the convex deposit token, this will allow us to do that\n', '    // make sure to check claimRewards before this step if needed\n', '    // plan to have gov sweep convex deposit tokens from strategy after this\n', '    function withdrawToConvexDepositTokens() external onlyAuthorized {\n', '        uint256 stakedTokens =\n', '            IConvexRewards(rewardsContract).balanceOf(address(this));\n', '        IConvexRewards(rewardsContract).withdraw(stakedTokens, claimRewards);\n', '    }\n', '\n', '    // migrate our want token to a new strategy if needed, make sure to check claimRewards first\n', '    // also send over any CRV or CVX that is claimed; for migrations we definitely want to claim\n', '    function prepareMigration(address _newStrategy) internal override {\n', '        uint256 stakedTokens =\n', '            IConvexRewards(rewardsContract).balanceOf(address(this));\n', '        if (stakedTokens > 0) {\n', '            IConvexRewards(rewardsContract).withdrawAndUnwrap(\n', '                stakedTokens,\n', '                claimRewards\n', '            );\n', '        }\n', '        IERC20(address(crv)).safeTransfer(\n', '            _newStrategy,\n', '            crv.balanceOf(address(this))\n', '        );\n', '        IERC20(address(convexToken)).safeTransfer(\n', '            _newStrategy,\n', '            convexToken.balanceOf(address(this))\n', '        );\n', '    }\n', '\n', "    // we don't want for these tokens to be swept out. We allow gov to sweep out cvx vault tokens; we would only be holding these if things were really, really rekt.\n", '    function protectedTokens()\n', '        internal\n', '        view\n', '        override\n', '        returns (address[] memory)\n', '    {\n', '        address[] memory protected = new address[](2);\n', '        protected[0] = address(convexToken);\n', '        protected[1] = address(crv);\n', '\n', '        return protected;\n', '    }\n', '\n', '    /* ========== KEEP3RS ========== */\n', '\n', '    function harvestTrigger(uint256 callCostinEth)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // have a manual toggle switch if needed since keep3rs are more efficient than manual harvest\n', '        if (manualKeep3rHarvest == 1) return true;\n', '\n', '        // Should not trigger if Strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should not trigger if we haven't waited long enough since previous harvest\n", '        if (block.timestamp.sub(params.lastReport) < minReportDelay)\n', '            return false;\n', '\n', "        // Should trigger if hasn't been called in a while\n", '        if (block.timestamp.sub(params.lastReport) >= maxReportDelay)\n', '            return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n', '        //       changes to the value from triggering a harvest directly through user\n', '        //       behavior. This should ensure reasonable resistance to manipulation\n', '        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > debtThreshold) return true;\n', '\n', '        // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        // Trigger if we have a loss to report\n', '        if (total.add(debtThreshold) < params.totalDebt) return true;\n', '\n', '        // no need to spend the gas to harvest every time; tend is much cheaper\n', '        if (tendCounter < tendsPerHarvest) return false;\n', '\n', '        // Trigger if it makes sense for the vault to send funds idle funds from the vault to the strategy, or to harvest.\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // calculate how much the call costs in dollars (converted from ETH)\n', '        uint256 callCost = ethToDollaBill(callCostinEth);\n', '\n', '        // check if it makes sense to send funds from vault to strategy\n', '        uint256 credit = vault.creditAvailable();\n', '        if (profitFactor.mul(callCost) < credit.add(profit)) return true;\n', '\n', "        // calculate how much profit we'll make if we harvest\n", '        uint256 harvestProfit = claimableProfitInDolla();\n', '\n', '        // check if we make enough from this to justify the harvest call\n', '        return (harvestProfitFactor.mul(callCost)) < harvestProfit;\n', '    }\n', '\n', '    // set what will trigger keepers to call tend, which will harvest and sell CRV for optimal asset but not deposit or report profits\n', '    function tendTrigger(uint256 callCostinEth)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        // we need to call a harvest every once in a while, every tendsPerHarvest number of tends\n', '        if (tendCounter >= tendsPerHarvest) return false;\n', '\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '        // Tend should trigger once it has been the minimum time between harvests divided by 1+tendsPerHarvest to space out tends equally\n', '        // we multiply this number by the current tendCounter+1 to know where we are in time\n', '        // we are assuming here that keepers will essentially call tend as soon as this is true\n', '        if (\n', '            block.timestamp.sub(params.lastReport) >\n', '            (\n', '                minReportDelay.div(\n', '                    (tendCounter.add(1)).mul(tendsPerHarvest.add(1))\n', '                )\n', '            )\n', '        ) return true;\n', '    }\n', '\n', "    // convert our keeper's eth cost into dai\n", '    function ethToDollaBill(uint256 _ethAmount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        address[] memory ethPath = new address[](2);\n', '        ethPath[0] = address(weth);\n', '        ethPath[1] = address(dai);\n', '\n', '        uint256[] memory callCostInDai =\n', '            IUniswapV2Router02(crvRouter).getAmountsOut(_ethAmount, ethPath);\n', '\n', '        return callCostInDai[callCostInDai.length - 1];\n', '    }\n', '\n', '    // convert our unsold CRV and CVX into USD profit for our keep3r\n', '    function claimableProfitInDolla() internal view returns (uint256) {\n', '        uint256 claimableCrv =\n', '            IConvexRewards(rewardsContract).earned(address(this)); // how much CRV we can claim from the staking contract\n', '\n', "        // calculations pulled directly from CVX's contract for minting CVX per CRV claimed\n", '        uint256 totalCliffs = 1000;\n', '        uint256 maxSupply = 100 * 1000000 * 1e18; // 100mil\n', '        uint256 reductionPerCliff = 100000000000000000000000; // 100,000\n', '        uint256 supply = convexToken.totalSupply();\n', '        uint256 mintableCvx;\n', '\n', '        uint256 cliff = supply.div(reductionPerCliff);\n', '        //mint if below total cliffs\n', '        if (cliff < totalCliffs) {\n', '            //for reduction% take inverse of current cliff\n', '            uint256 reduction = totalCliffs.sub(cliff);\n', '            //reduce\n', '            mintableCvx = claimableCrv.mul(reduction).div(totalCliffs);\n', '\n', '            //supply cap check\n', '            uint256 amtTillMax = maxSupply.sub(supply);\n', '            if (mintableCvx > amtTillMax) {\n', '                mintableCvx = amtTillMax;\n', '            }\n', '        }\n', '        uint256 crvValue;\n', '        if (claimableCrv > 0) {\n', '            uint256[] memory crvSwap =\n', '                IUniswapV2Router02(crvRouter).getAmountsOut(\n', '                    claimableCrv,\n', '                    crvPath\n', '                );\n', '            crvValue = crvSwap[1];\n', '        }\n', '\n', '        uint256 cvxValue;\n', '        if (mintableCvx > 0) {\n', '            uint256[] memory cvxSwap =\n', '                IUniswapV2Router02(cvxRouter).getAmountsOut(\n', '                    mintableCvx,\n', '                    convexTokenPath\n', '                );\n', '            cvxValue = cvxSwap[1];\n', '        }\n', '        return (crvValue.add(cvxValue)).mul(ethToDollaBill(1e18).div(1e18)); // dollar value of our harvest\n', '    }\n', '\n', '    // set number of tends before we call our next harvest\n', '    function setTendsPerHarvest(uint256 _tendsPerHarvest)\n', '        external\n', '        onlyAuthorized\n', '    {\n', '        tendsPerHarvest = _tendsPerHarvest;\n', '    }\n', '\n', '    // set this to 1 if we want our keep3rs to manually harvest the strategy; keep3r harvest is more cost-efficient than strategist harvest\n', '    function setKeep3rHarvest(uint256 _setKeep3rHarvest)\n', '        external\n', '        onlyAuthorized\n', '    {\n', '        manualKeep3rHarvest = _setKeep3rHarvest;\n', '    }\n', '\n', '    /* ========== SETTERS ========== */\n', '\n', '    // These functions are useful for setting parameters of the strategy that may need to be adjusted.\n', '\n', "    // Set the amount of CRV to be locked in Yearn's veCRV voter from each harvest. Default is 10%.\n", '    function setKeepCRV(uint256 _keepCRV) external onlyAuthorized {\n', '        keepCRV = _keepCRV;\n', '    }\n', '\n', '    // 1 is for TRUE value and 0 for FALSE to keep in sync with binary convention\n', '    // Use SushiSwap for CRV Router = 1;\n', '    // Use Uniswap for CRV Router = 0 (or anything else);\n', '    function setCrvRouter(uint256 _isSushiswap) external onlyAuthorized {\n', '        if (_isSushiswap == USE_SUSHI) {\n', '            crvRouter = sushiswapRouter;\n', '        } else {\n', '            crvRouter = uniswapRouter;\n', '        }\n', '    }\n', '\n', '    // 1 is for TRUE value and 0 for FALSE to keep in sync with binary convention\n', '    // Use SushiSwap for CVX Router = 1;\n', '    // Use Uniswap for CVX Router = 0 (or anything else);\n', '    function setCvxRouter(uint256 _isSushiswap) external onlyAuthorized {\n', '        if (_isSushiswap == USE_SUSHI) {\n', '            cvxRouter = sushiswapRouter;\n', '        } else {\n', '            cvxRouter = uniswapRouter;\n', '        }\n', '    }\n', '\n', '    // Unless contract is borked for some reason, we should always harvest extra tokens\n', '    function setHarvestExtras(bool _harvestExtras) external onlyAuthorized {\n', '        harvestExtras = _harvestExtras;\n', '    }\n', '\n', "    // We usually don't need to claim rewards on withdrawals, but might change our mind for migrations etc\n", '    function setClaimRewards(bool _claimRewards) external onlyAuthorized {\n', '        claimRewards = _claimRewards;\n', '    }\n', '\n', '    // set this to the multiple we want to make on our harvests vs the cost\n', '    function setHarvestProfitFactor(uint256 _harvestProfitFactor)\n', '        external\n', '        onlyAuthorized\n', '    {\n', '        harvestProfitFactor = _harvestProfitFactor;\n', '    }\n', '\n', '    // allow our contract to receive ETH (gimme dat future of france, plz)\n', '    receive() external payable {}\n', '}']