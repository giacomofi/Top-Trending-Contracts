['# @version 0.2.12\n', '\n', 'from vyper.interfaces import ERC20\n', '\n', 'CURVE_APOOL: constant(address) = 0xDeBF20617708857ebe4F679508E7b7863a8A8EeE\n', 'AAVE_REWARD_DISTRIBUTOR: constant(address) = 0xd784927Ff2f95ba542BfC824c8a8a98F3495f6b5\n', 'CLAIM_FREQUENCY: constant(uint256) = 3600 * 6  # six hours\n', '\n', 'owner: public(address)\n', 'future_owner: public(address)\n', '\n', '# [last update][receiver]\n', 'reward_data: uint256\n', '\n', '\n', '@external\n', 'def __init__(_owner: address):\n', '    self.owner = _owner\n', '\n', '\n', '@external\n', 'def claim_rewards():\n', '    reward_data: uint256 = self.reward_data\n', '    if reward_data == 0:\n', '        return\n', '\n', '    assert convert(msg.sender, uint256) == reward_data % 2**160\n', '\n', '    if block.timestamp > shift(reward_data, -160) + CLAIM_FREQUENCY:\n', '        # claim rewards on behalf of pool and transfer to gauge\n', '        raw_call(\n', '            AAVE_REWARD_DISTRIBUTOR,\n', '            concat(\n', '                method_id("claimRewardsOnBehalf(address[],uint256,address,address)"),\n', '                convert(32 * 4, bytes32),\n', '                convert(MAX_UINT256, bytes32),\n', '                convert(CURVE_APOOL, bytes32),\n', '                convert(msg.sender, bytes32),\n', '                convert(3, bytes32),\n', '                convert(0x028171bCA77440897B824Ca71D1c56caC55b68A3, bytes32),  # aDAI\n', '                convert(0xBcca60bB61934080951369a648Fb03DF4F96263C, bytes32),  # aUSDC\n', '                convert(0x3Ed3B47Dd13EC9a98b44e6204A523E766B225811, bytes32),  # aUSDT\n', '            )\n', '        )\n', '        self.reward_data = shift(block.timestamp, 160) + convert(msg.sender, uint256)\n', '\n', '\n', '@view\n', '@external\n', 'def last_claim() -> uint256:\n', '    return shift(self.reward_data, -160)\n', '\n', '\n', '@view\n', '@external\n', 'def reward_receiver() -> address:\n', '    return convert(self.reward_data % 2**160, address)\n', '\n', '\n', '@external\n', 'def set_reward_receiver(_reward_receiver: address):\n', '    """\n', '    @notice Set the reward reciever address\n', '    @dev Setting to `ZERO_ADDRESS` disables claiming\n', '    @param _reward_receiver Address that claimed stkAAVE is sent to\n', '    """\n', '    assert msg.sender == self.owner\n', '\n', '    self.reward_data = convert(_reward_receiver, uint256)\n', '\n', '\n', '@external\n', 'def commit_transfer_ownership(_future_owner: address):\n', '    """\n', '    @notice Transfer ownership of contract to `_future_owner`\n', '    @param _future_owner Address to have ownership transferred to\n', '    """\n', '    assert msg.sender == self.owner\n', '\n', '    self.future_owner = _future_owner\n', '\n', '\n', '@external\n', 'def accept_transfer_ownership():\n', '    """\n', '    @notice Accept a pending ownership transfer\n', '    """\n', '    owner: address = self.future_owner\n', '    assert msg.sender == owner\n', '\n', '    self.owner = owner']