['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-01\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.7.4;\n', '\n', 'interface IFlashToken {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    function mint(address to, uint256 value) external returns (bool);\n', '\n', '    function burn(uint256 value) external returns (bool);\n', '}\n', '\n', '\n', '// A library for performing overflow-safe math, courtesy of DappHub: https://github.com/dapphub/ds-math/blob/d0ef6d6a5f/src/math.sol\n', '// Modified to include only the essentials\n', 'library SafeMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x, "MATH:: ADD_OVERFLOW");\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x, "MATH:: SUB_UNDERFLOW");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "MATH:: MUL_OVERFLOW");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "MATH:: DIVISION_BY_ZERO");\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(\n', '        bytes32[] memory proof,\n', '        bytes32 root,\n', '        bytes32 leaf\n', '    ) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '\n', '\n', 'contract ClaimContract {\n', '    using MerkleProof for bytes;\n', '    using SafeMath for uint256;\n', '\n', '    enum MigrationType { V1_UNCLAIMED, HOLDER, STAKER }\n', '\n', '    address public constant FLASH_TOKEN_V1 = 0xB4467E8D621105312a914F1D42f10770C0Ffe3c8;\n', '    address public constant FLASH_TOKEN_V2 = 0x20398aD62bb2D930646d45a6D4292baa0b860C1f;\n', '    bytes32 public constant MERKLE_ROOT = 0x56dc616cf485d230be34e774839fc4b1b11b0ab99b92d594f7f16f4065f7e814;\n', '    uint256 public constant V1_UNCLAIMED_DEADLINE = 1617235140;\n', '\n', '    mapping(uint256 => uint256) private claimedBitMap;\n', '\n', '    event Claimed(uint256 index, address sender, uint256 amount);\n', '\n', '    function isClaimed(uint256 index) public view returns (bool) {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function _setClaimed(uint256 index) private {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n', '    }\n', '\n', '    function _getMigratableAmountAndTransferV1(address _user, uint256 _balance) private returns (uint256 flashV2Mint) {\n', '        uint256 flashV1Balance = IFlashToken(FLASH_TOKEN_V1).balanceOf(_user);\n', '        flashV2Mint = flashV1Balance >= _balance ? _balance : flashV1Balance;\n', '        IFlashToken(FLASH_TOKEN_V1).transferFrom(_user, address(this), flashV2Mint);\n', '    }\n', '\n', '    function claim(\n', '        uint256 index,\n', '        uint256 balance,\n', '        uint256 bonusAmount,\n', '        uint256 expiry,\n', '        uint256 expireAfter,\n', '        MigrationType migrationType,\n', '        bytes32[] calldata merkleProof\n', '    ) external {\n', '        require(!isClaimed(index), "FlashV2Migration: Already claimed.");\n', '\n', '        address user = msg.sender;\n', '\n', '        require(\n', '            MerkleProof.verify(\n', '                merkleProof,\n', '                MERKLE_ROOT,\n', '                keccak256(\n', '                    abi.encodePacked(index, user, balance, bonusAmount, expiry, expireAfter, uint256(migrationType))\n', '                )\n', '            ),\n', '            "FlashV2Migration: Invalid proof."\n', '        );\n', '\n', '        uint256 flashV2Mint = balance;\n', '\n', '        if (migrationType == MigrationType.V1_UNCLAIMED) {\n', '            require(block.timestamp <= V1_UNCLAIMED_DEADLINE, "FlashV2Migration: V1 claim time expired.");\n', '        } else if (migrationType == MigrationType.HOLDER) {\n', '            flashV2Mint = _getMigratableAmountAndTransferV1(user, balance);\n', '        } else if (migrationType == MigrationType.STAKER) {\n', '            if (expireAfter > block.timestamp) {\n', '                uint256 burnAmount = balance.mul(expireAfter.sub(block.timestamp)).mul(75e16).div(expiry.mul(1e18));\n', '                flashV2Mint = balance.sub(burnAmount);\n', '            }\n', '        } else {\n', '            revert("FlashV2Migration: Invalid migration type");\n', '        }\n', '\n', '        _setClaimed(index);\n', '\n', '        IFlashToken(FLASH_TOKEN_V2).mint(user, flashV2Mint.add(bonusAmount));\n', '\n', '        emit Claimed(index, user, flashV2Mint);\n', '    }\n', '}']