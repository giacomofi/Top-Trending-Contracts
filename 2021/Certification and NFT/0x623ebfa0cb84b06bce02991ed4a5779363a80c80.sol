['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-25\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', '/**\n', ' * @title tmpfs\n', ' * @dev check out tmpfs.it\n', ' */\n', 'contract Tmpfs {\n', '    address private owner;\n', '    \n', '    // event for EVM logging\n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    // modifier to check if caller is owner\n', '    modifier isOwner() {\n', "        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n", '        // changes to the state and to Ether balances are reverted.\n', '        // This used to consume all gas in old EVM versions, but not anymore.\n', "        // It is often a good idea to use 'require' to check if functions are called correctly.\n", '        // As a second argument, you can also provide an explanation about what went wrong.\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Set contract deployer as owner\n', '     */\n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Change owner\n', '     * @param newOwner address of new owner\n', '     */\n', '    function changeOwner(address newOwner) public isOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    /**\n', '     * @dev Return owner address \n', '     * @return address of owner\n', '     */\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '    \n', '    /**\n', '     * @dev Pay for the service\n', '     * @param paymentId this is used server-side to identify a payment\n', '     */\n', '    function receivePayment(bytes32 paymentId) public payable {\n', '        // do nothing\n', '    }\n', '\n', '    receive() external payable {\n', '        // React to receiving ether\n', '    }\n', '\n', '    /**\n', '     * @dev Transfer out all the ethereum on this contract\n', '     */\n', '    function transferFunds(address payable to) public isOwner {\n', '        to.transfer((payable(address(this))).balance);\n', '    }\n', '}']