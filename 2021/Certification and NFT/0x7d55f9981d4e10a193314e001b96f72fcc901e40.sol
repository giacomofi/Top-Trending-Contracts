['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-10\n', '*/\n', '\n', '// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/CloneLib.sol\n', '\n', 'pragma solidity 0.6.6;\n', '//solhint-disable avoid-low-level-calls\n', '//solhint-disable no-inline-assembly\n', '\n', 'library CloneLib {\n', '    /**\n', '     * Returns bytecode of a new contract that clones template\n', '     * Adapted from https://raw.githubusercontent.com/OpenZeppelin/openzeppelin-sdk/master/packages/lib/contracts/upgradeability/ProxyFactory.sol\n', '     * Which in turn adapted it from https://github.com/optionality/clone-factory/blob/32782f82dfc5a00d103a7e61a17a5dedbd1e8e9d/contracts/CloneFactory.sol\n', '     */\n', '    function cloneBytecode(address template) internal pure returns (bytes memory code) {\n', '        bytes20 targetBytes = bytes20(template);\n', '        assembly {\n', '            code := mload(0x40)\n', '            mstore(0x40, add(code, 0x57)) // code length is 0x37 plus 0x20 for bytes length field. update free memory pointer\n', '            mstore(code, 0x37) // store length in first 32 bytes\n', '\n', '            // store clone source address after first 32 bytes\n', '            mstore(add(code, 0x20), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(code, 0x34), targetBytes)\n', '            mstore(add(code, 0x48), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Predict the CREATE2 address.\n', '     * See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1014.md for calculation details\n', '     */\n', '    function predictCloneAddressCreate2(\n', '        address template,\n', '        address deployer,\n', '        bytes32 salt\n', '    ) internal pure returns (address proxy) {\n', '        bytes32 codehash = keccak256(cloneBytecode(template));\n', '        return address(uint160(uint256(keccak256(abi.encodePacked(\n', '            bytes1(0xff),\n', '            deployer,\n', '            salt,\n', '            codehash\n', '        )))));\n', '    }\n', '\n', '    /**\n', '     * Deploy given bytecode using CREATE2, address can be known in advance, get it from predictCloneAddressCreate2\n', '     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\n', '     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\n', '     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\n', '     */\n', '    function deployCodeAndInitUsingCreate2(\n', '        bytes memory code,\n', '        bytes memory initData,\n', '        bytes32 salt\n', '    ) internal returns (address payable proxy) {\n', '        uint256 len = code.length;\n', '        assembly {\n', '            proxy := create2(0, add(code, 0x20), len, salt)\n', '        }\n', '        require(proxy != address(0), "error_alreadyCreated");\n', '        if (initData.length != 0) {\n', '            (bool success, ) = proxy.call(initData);\n', '            require(success, "error_initialization");\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Deploy given bytecode using old-style CREATE, address is hash(sender, nonce)\n', '     * Optional 2-step deployment first runs the constructor, then supplies an initialization function call.\n', '     * @param code EVM bytecode that would be used in a contract deploy transaction (to=null)\n', '     * @param initData if non-zero, send an initialization function call in the same tx with given tx input data (e.g. encoded Solidity function call)\n', '     */\n', '    function deployCodeAndInitUsingCreate(\n', '        bytes memory code,\n', '        bytes memory initData\n', '    ) internal returns (address payable proxy) {\n', '        uint256 len = code.length;\n', '        assembly {\n', '            proxy := create(0, add(code, 0x20), len)\n', '        }\n', '        require(proxy != address(0), "error_create");\n', '        if (initData.length != 0) {\n', '            (bool success, ) = proxy.call(initData);\n', '            require(success, "error_initialization");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/IAMB.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '// Tokenbridge Arbitrary Message Bridge\n', 'interface IAMB {\n', '\n', '    //only on mainnet AMB:\n', '    function executeSignatures(bytes calldata _data, bytes calldata _signatures) external;\n', '\n', '    function messageSender() external view returns (address);\n', '\n', '    function maxGasPerTx() external view returns (uint256);\n', '\n', '    function transactionHash() external view returns (bytes32);\n', '\n', '    function messageId() external view returns (bytes32);\n', '\n', '    function messageSourceChainId() external view returns (bytes32);\n', '\n', '    function messageCallStatus(bytes32 _messageId) external view returns (bool);\n', '\n', '    function requiredSignatures() external view returns (uint256);\n', '    function numMessagesSigned(bytes32 _message) external view returns (uint256);\n', '    function signature(bytes32 _hash, uint256 _index) external view returns (bytes memory);\n', '    function message(bytes32 _hash) external view returns (bytes memory);\n', '    function failedMessageDataHash(bytes32 _messageId)\n', '        external\n', '        view\n', '        returns (bytes32);\n', '\n', '    function failedMessageReceiver(bytes32 _messageId)\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function failedMessageSender(bytes32 _messageId)\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function requireToPassMessage(\n', '        address _contract,\n', '        bytes calldata _data,\n', '        uint256 _gas\n', '    ) external returns (bytes32);\n', '}\n', '\n', '// File: contracts/ITokenMediator.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface ITokenMediator {\n', '    function bridgeContract() external view returns (address);\n', '\n', '    //returns:\n', '    //Multi-token mediator: 0xb1516c26 == bytes4(keccak256(abi.encodePacked("multi-erc-to-erc-amb")))\n', '    //Single-token mediator: 0x76595b56 ==  bytes4(keccak256(abi.encodePacked("erc-to-erc-amb")))\n', '    function getBridgeMode() external pure returns (bytes4 _data);\n', '\n', '    function relayTokensAndCall(address token, address _receiver, uint256 _value, bytes calldata _data) external;\n', '}\n', '\n', '// File: contracts/FactoryConfig.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', 'interface FactoryConfig {\n', '    function currentToken() external view returns (address);\n', '    function currentMediator() external view returns (address);\n', '}\n', '\n', '// File: contracts/DataUnionFactoryMainnet.sol\n', '\n', 'pragma solidity 0.6.6;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'interface IDataUnionMainnet {\n', '    function sidechainAddress() external view returns (address proxy);\n', '}\n', '\n', 'contract DataUnionFactoryMainnet {\n', '    event MainnetDUCreated(address indexed mainnet, address indexed sidechain, address indexed owner, address template);\n', '\n', '    address public dataUnionMainnetTemplate;\n', '\n', '    // needed to calculate address of sidechain contract\n', '    address public dataUnionSidechainTemplate;\n', '    address public dataUnionSidechainFactory;\n', '    uint256 public sidechainMaxGas;\n', '    FactoryConfig public migrationManager;\n', '\n', '    constructor(address _migrationManager,\n', '                address _dataUnionMainnetTemplate,\n', '                address _dataUnionSidechainTemplate,\n', '                address _dataUnionSidechainFactory,\n', '                uint256 _sidechainMaxGas)\n', '        public\n', '    {\n', '        migrationManager = FactoryConfig(_migrationManager);\n', '        dataUnionMainnetTemplate = _dataUnionMainnetTemplate;\n', '        dataUnionSidechainTemplate = _dataUnionSidechainTemplate;\n', '        dataUnionSidechainFactory = _dataUnionSidechainFactory;\n', '        sidechainMaxGas = _sidechainMaxGas;\n', '    }\n', '\n', '    function amb() public view returns (IAMB) {\n', '        return IAMB(ITokenMediator(migrationManager.currentMediator()).bridgeContract());\n', '    }\n', ' \n', '    function token() public view returns (address) {\n', '        return migrationManager.currentToken();\n', '    }\n', '\n', '\n', '    function sidechainAddress(address mainetAddress)\n', '        public view\n', '        returns (address)\n', '    {\n', '        return CloneLib.predictCloneAddressCreate2(\n', '            dataUnionSidechainTemplate,\n', '            dataUnionSidechainFactory,\n', '            bytes32(uint256(mainetAddress))\n', '        );\n', '    }\n', '    /*\n', '\n', '    */\n', '    function mainnetAddress(address deployer, string memory name)\n', '        public view\n', '        returns (address)\n', '    {\n', '        bytes32 salt = keccak256(abi.encode(bytes(name), deployer));\n', '        return CloneLib.predictCloneAddressCreate2(\n', '            dataUnionMainnetTemplate,\n', '            address(this),\n', '            salt\n', '        );\n', '    }\n', '\n', '\n', '/*\n', '    function initialize(\n', '        address _token,\n', '        address _tokenMediator,\n', '        address _sidechainDataUnionFactory,\n', '        uint256 _sidechainMaxgas,\n', '        address _sidechainTemplateDataUnion,\n', '        address _owner,\n', '        uint256 adminFeeFraction,\n', '        address[] memory agents\n', '    )  public {\n', '    users can only deploy with salt = their key.\n', '*/\n', '    function deployNewDataUnion(address owner, uint256 adminFeeFraction, address[] memory agents, string memory name)\n', '        public\n', '        returns (address)\n', '    {\n', '        bytes32 salt = keccak256(abi.encode(bytes(name), msg.sender));\n', '        bytes memory data = abi.encodeWithSignature("initialize(address,address,uint256,address,address,uint256,address[])",\n', '            migrationManager,\n', '            dataUnionSidechainFactory,\n', '            sidechainMaxGas,\n', '            dataUnionSidechainTemplate,\n', '            owner,\n', '            adminFeeFraction,\n', '            agents\n', '        );\n', '        address du = CloneLib.deployCodeAndInitUsingCreate2(CloneLib.cloneBytecode(dataUnionMainnetTemplate), data, salt);\n', '        emit MainnetDUCreated(du, sidechainAddress(du), owner, dataUnionMainnetTemplate);\n', '        return du;\n', '    }\n', '}']