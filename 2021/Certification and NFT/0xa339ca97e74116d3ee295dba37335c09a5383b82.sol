['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-04\n', '*/\n', '\n', 'pragma solidity ^0.5.7;\n', '\n', '/**\n', ' * @title SafeMath\n', ' * @dev Math operations with safety checks that throw on error\n', ' */\n', 'library SafeMath {\n', '\n', '  /**\n', '  * @dev Multiplies two numbers, throws on overflow.\n', '  */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '    uint256 c = a * b;\n', '    assert(c / a == b);\n', '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Integer division of two numbers, truncating the quotient.\n', '  */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    // assert(b > 0); // Solidity automatically throws when dividing by 0\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '    return c;\n', '  }\n', '\n', '  /**\n', '  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n', '  */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    assert(b <= a);\n', '    return a - b;\n', '  }\n', '\n', '  /**\n', '  * @dev Adds two numbers, throws on overflow.\n', '  */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', '    assert(c >= a);\n', '    return c;\n', '  }\n', '}\n', '\n', '\n', '\n', '\n', 'contract GsnPs {\n', '    using SafeMath for uint;\n', '    address   owner;    // This is the current owner of the contract.\n', '    mapping (address => uint) internal balance;\n', '    \n', '    // Events begin.\n', '    event PsExcute(address from, uint amount);\n', '    event GdpSentFromAccount(address from, address to, uint amount);\n', '    event GdpSentFromContract(address from, address to, uint amount);\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '    // Events end.\n', '\n', '  uint public target=0;\n', '  uint public blockheight=0;\n', '  uint public fulfillmentrate=100;\n', "  constructor () public {  // the contract's constructor function.\n", '        owner = msg.sender;\n', '    }\n', '\n', '\n', '\n', '// Function to get Balance of the contract.\n', '  function getBalance() public view returns (uint256) {\n', '        \n', '        require(msg.sender == owner); // Only the Owner of this contract can run this function.\n', '        return address(this).balance;\n', '    }\n', '\n', '// Function to accept payment and data into the contract.\n', '    function acceptPs() payable public {\n', '        require(fulfillmentrate >=90,"fulfillment rate less than 90% , stop ps");\n', '        balance[address(this)]+= msg.value;  \n', '        emit PsExcute(msg.sender, msg.value);\n', '    }\n', '\n', "// Function to withdraw or send Ether from Contract owner's account to a specified account.\n", '    function TransferToGsContractFromOwnerAccount(address payable receiver, uint amount) public {\n', '        require(msg.sender == owner, "You\'re not owner of the account"); // Only the Owner of this contract can run this function.\n', '        require(amount < address(this).balance, "Insufficient balance.");\n', '        receiver.transfer(amount);\n', '        emit GdpSentFromAccount(msg.sender, receiver, amount);\n', '    }\n', '    \n', '    function transferOwnership(address newOwner) public {\n', '     require(msg.sender == owner, "You\'re not owner of the contract"); \n', '     require(newOwner != address(0));\n', '     owner = newOwner;\n', '     emit OwnershipTransferred(owner, newOwner);\n', '   \n', '    }\n', '  \n', "// function to set GSN network's blockheight\n", '   function SetGsnBlockHeight(uint newTarget, uint newBlockheight) public {\n', '        require(msg.sender == owner, "You\'re not owner of the account");\n', '        blockheight=newBlockheight;\n', '        target=newTarget;\n', '        \n', '   }\n', '   \n', '// Function to get current blockheight of the gsn network.\n', '  function getGsnBlockheight() public view returns (uint256) {\n', '        return blockheight;\n', '    }\n', '\n', '// Function to get current block target of the gsn network.\n', '  function getGsnTarget() public view returns (uint256) {\n', '        return target;\n', '    }    \n', '\n', '// Function to reset fulfillment rate if it is less than 90%\n', '  function resetFulfillmentRate(uint rate) public{\n', '       require(rate>0,"invalid rate");\n', '       require(rate<=100,"invalid rate");\n', '       fulfillmentrate=rate;\n', '  }\n', '  \n', '  function() external payable {\n', '     emit PsExcute(msg.sender, msg.value);\n', '    // Fallback function.\n', '    }\n', '    \n', ' \n', '\n', '    \n', '}']