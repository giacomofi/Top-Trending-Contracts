['pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Token Staking.\n', ' * @dev Stake ERC20 for earning rewards.\n', ' */\n', '\n', 'import { TokenInterface } from "../../common/interfaces.sol";\n', 'import { Stores } from "../../common/stores.sol";\n', 'import { Helpers } from "./helpers.sol";\n', 'import { Events } from "./events.sol";\n', 'import { IStakingRewards, StakingERC20Mapping } from "./interface.sol";\n', '\n', 'contract Main is Helpers, Events {\n', '\n', '  /**\n', '    * @dev Deposit ERC20.\n', '    * @notice Deposit Tokens to staking pool.\n', '    * @param stakingPoolName staking pool name.\n', '    * @param amt staking token amount.\n', '    * @param getId ID to retrieve amount.\n', '    * @param setId ID stores the amount of staked tokens.\n', '  */\n', '  function deposit(\n', '    string calldata stakingPoolName,\n', '    uint amt,\n', '    uint getId,\n', '    uint setId\n', '  ) external payable returns (string memory _eventName, bytes memory _eventParam) {\n', '    uint _amt = getUint(getId, amt);\n', '    (\n', '      IStakingRewards stakingContract,\n', '      TokenInterface stakingToken,\n', '      ,\n', '      bytes32 stakingType\n', '    ) = getStakingData(stakingPoolName);\n', '\n', '    _amt = _amt == uint(-1) ? stakingToken.balanceOf(address(this)) : _amt;\n', '\n', '    stakingToken.approve(address(stakingContract), _amt);\n', '    stakingContract.stake(_amt);\n', '\n', '    setUint(setId, _amt);\n', '    _eventName = "LogDeposit(address,bytes32,uint256,uint256,uint256)";\n', '    _eventParam = abi.encode(address(stakingToken), stakingType, _amt, getId, setId);\n', '  }\n', '\n', '  /**\n', '    * @dev Withdraw ERC20.\n', '    * @notice Withdraw Tokens from the staking pool.\n', '    * @param stakingPoolName staking pool name.\n', '    * @param amt staking token amount.\n', '    * @param getId ID to retrieve amount.\n', '    * @param setIdAmount ID stores the amount of stake tokens withdrawn.\n', '    * @param setIdReward ID stores the amount of reward tokens claimed.\n', '  */\n', '  function withdraw(\n', '    string calldata stakingPoolName,\n', '    uint amt,\n', '    uint getId,\n', '    uint setIdAmount,\n', '    uint setIdReward\n', '  ) external payable returns (string memory _eventName, bytes memory _eventParam) {\n', '    uint _amt = getUint(getId, amt);\n', '    (\n', '      IStakingRewards stakingContract,\n', '      TokenInterface stakingToken,\n', '      TokenInterface rewardToken,\n', '      bytes32 stakingType\n', '    ) = getStakingData(stakingPoolName);\n', '\n', '    _amt = _amt == uint(-1) ? stakingContract.balanceOf(address(this)) : _amt;\n', '    uint intialBal = rewardToken.balanceOf(address(this));\n', '    stakingContract.withdraw(_amt);\n', '    stakingContract.getReward();\n', '\n', '    uint rewardAmt = sub(rewardToken.balanceOf(address(this)), intialBal);\n', '\n', '    setUint(setIdAmount, _amt);\n', '    setUint(setIdReward, rewardAmt);\n', '    {\n', '    _eventName = "LogWithdrawAndClaimedReward(address,bytes32,uint256,uint256,uint256,uint256,uint256)";\n', '    _eventParam = abi.encode(address(stakingToken), stakingType, _amt, rewardAmt, getId, setIdAmount, setIdReward);\n', '    }\n', '  }\n', '\n', '  /**\n', '    * @dev Claim Reward.\n', '    * @notice Claim Pending Rewards of tokens staked.\n', '    * @param stakingPoolName staking pool name.\n', '    * @param setId ID stores the amount of reward tokens claimed.\n', '  */\n', '  function claimReward(\n', '    string calldata stakingPoolName,\n', '    uint setId\n', '  ) external payable returns (string memory _eventName, bytes memory _eventParam) {\n', '     (\n', '      IStakingRewards stakingContract,\n', '      ,\n', '      TokenInterface rewardToken,\n', '      bytes32 stakingType\n', '    ) = getStakingData(stakingPoolName);\n', '\n', '    uint intialBal = rewardToken.balanceOf(address(this));\n', '    stakingContract.getReward();\n', '    uint finalBal = rewardToken.balanceOf(address(this));\n', '\n', '    uint rewardAmt = sub(finalBal, intialBal);\n', '\n', '    setUint(setId, rewardAmt);\n', '    _eventName = "LogClaimedReward(address,bytes32,uint256,uint256)";\n', '    _eventParam = abi.encode(address(rewardToken), stakingType, rewardAmt, setId);\n', '  }\n', '\n', '}\n', '\n', 'contract connectV2StakeERC20 is Main {\n', '    string public constant name = "Stake-ERC20-v1.0";\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'interface TokenInterface {\n', '    function approve(address, uint256) external;\n', '    function transfer(address, uint) external;\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint id) external returns (uint num);\n', '    function setUint(uint id, uint val) external;\n', '}\n', '\n', 'interface InstaMapping {\n', '    function cTokenMapping(address) external view returns (address);\n', '    function gemJoinMapping(bytes32) external view returns (address);\n', '}\n', '\n', 'interface AccountInterface {\n', '    function enable(address) external;\n', '    function disable(address) external;\n', '    function isAuth(address) external view returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { MemoryInterface, InstaMapping } from "./interfaces.sol";\n', '\n', '\n', 'abstract contract Stores {\n', '\n', '  /**\n', '   * @dev Return ethereum address\n', '   */\n', '  address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '  /**\n', '   * @dev Return Wrapped ETH address\n', '   */\n', '  address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '  /**\n', '   * @dev Return memory variable address\n', '   */\n', '  MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\n', '\n', '  /**\n', '   * @dev Return InstaDApp Mapping Addresses\n', '   */\n', '  InstaMapping constant internal instaMapping = InstaMapping(0xe81F70Cc7C0D46e12d70efc60607F16bbD617E88);\n', '\n', '  /**\n', '   * @dev Get Uint value from InstaMemory Contract.\n', '   */\n', '  function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '    returnVal = getId == 0 ? val : instaMemory.getUint(getId);\n', '  }\n', '\n', '  /**\n', '  * @dev Set Uint value in InstaMemory Contract.\n', '  */\n', '  function setUint(uint setId, uint val) virtual internal {\n', '    if (setId != 0) instaMemory.setUint(setId, val);\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'import { DSMath } from "../../common/math.sol";\n', 'import { Basic } from "../../common/basic.sol";\n', 'import { TokenInterface } from "../../common/interfaces.sol";\n', 'import { IStakingRewards, StakingERC20Mapping } from "./interface.sol";\n', '\n', 'abstract contract Helpers is DSMath, Basic {\n', '\n', '  /**\n', '   * @dev Convert String to bytes32.\n', '   */\n', '  function stringToBytes32(string memory str) internal pure returns (bytes32 result) {\n', '    require(bytes(str).length != 0, "string-empty");\n', '    // solium-disable-next-line security/no-inline-assembly\n', '    assembly {\n', '      result := mload(add(str, 32))\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @dev Get staking data\n', '   */\n', '  function getStakingData(string memory stakingName)\n', '  internal\n', '  view\n', '  returns (\n', '    IStakingRewards stakingContract,\n', '    TokenInterface stakingToken,\n', '    TokenInterface rewardToken,\n', '    bytes32 stakingType\n', '  )\n', '  {\n', '    stakingType = stringToBytes32(stakingName);\n', '    StakingERC20Mapping.StakingData memory stakingData = StakingERC20Mapping(getMappingAddr()).stakingMapping(stakingType);\n', '    require(stakingData.stakingPool != address(0) && stakingData.stakingToken != address(0), "Wrong Staking Name");\n', '    stakingContract = IStakingRewards(stakingData.stakingPool);\n', '    stakingToken = TokenInterface(stakingData.stakingToken);\n', '    rewardToken = TokenInterface(stakingData.rewardToken);\n', '  }\n', '\n', '  function getMappingAddr() internal virtual view returns (address) {\n', '    return 0xbE658233bA9990d86155b3902fd05a7AfC7eBdB5; // InstaMapping Address\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'contract Events {\n', '\n', '  event LogDeposit(\n', '    address indexed stakingToken,\n', '    bytes32 indexed stakingType,\n', '    uint256 amount,\n', '    uint getId,\n', '    uint setId\n', '  );\n', '\n', '  event LogWithdrawAndClaimedReward(\n', '    address indexed stakingToken,\n', '    bytes32 indexed stakingType,\n', '    uint256 amount,\n', '    uint256 rewardAmt,\n', '    uint getId,\n', '    uint setIdAmount,\n', '    uint setIdReward\n', '  );\n', '\n', '  event LogClaimedReward(\n', '    address indexed rewardToken,\n', '    bytes32 indexed stakingType,\n', '    uint256 rewardAmt,\n', '    uint setId\n', '  );\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IStakingRewards {\n', '  function stake(uint256 amount) external;\n', '  function withdraw(uint256 amount) external;\n', '  function getReward() external;\n', '  function balanceOf(address) external view returns(uint);\n', '}\n', '\n', 'interface StakingERC20Mapping {\n', '\n', '  struct StakingData {\n', '    address stakingPool;\n', '    address stakingToken;\n', '    address rewardToken;\n', '  }\n', '\n', '  function stakingMapping(bytes32) external view returns(StakingData memory);\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { SafeMath } from "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', 'contract DSMath {\n', '  uint constant WAD = 10 ** 18;\n', '  uint constant RAY = 10 ** 27;\n', '\n', '  function add(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(x, y);\n', '  }\n', '\n', '  function sub(uint x, uint y) internal virtual pure returns (uint z) {\n', '    z = SafeMath.sub(x, y);\n', '  }\n', '\n', '  function mul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.mul(x, y);\n', '  }\n', '\n', '  function div(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.div(x, y);\n', '  }\n', '\n', '  function wmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n', '  }\n', '\n', '  function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n', '  }\n', '\n', '  function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n', '  }\n', '\n', '  function rmul(uint x, uint y) internal pure returns (uint z) {\n', '    z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n', '  }\n', '\n', '  function toInt(uint x) internal pure returns (int y) {\n', '    y = int(x);\n', '    require(y >= 0, "int-overflow");\n', '  }\n', '\n', '  function toRad(uint wad) internal pure returns (uint rad) {\n', '    rad = mul(wad, 10 ** 27);\n', '  }\n', '\n', '}\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', 'import { TokenInterface } from "./interfaces.sol";\n', 'import { Stores } from "./stores.sol";\n', 'import { DSMath } from "./math.sol";\n', '\n', 'abstract contract Basic is DSMath, Stores {\n', '\n', '    function convert18ToDec(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '        amt = (_amt / 10 ** (18 - _dec));\n', '    }\n', '\n', '    function convertTo18(uint _dec, uint256 _amt) internal pure returns (uint256 amt) {\n', '        amt = mul(_amt, 10 ** (18 - _dec));\n', '    }\n', '\n', '    function getTokenBal(TokenInterface token) internal view returns(uint _amt) {\n', '        _amt = address(token) == ethAddr ? address(this).balance : token.balanceOf(address(this));\n', '    }\n', '\n', '    function getTokensDec(TokenInterface buyAddr, TokenInterface sellAddr) internal view returns(uint buyDec, uint sellDec) {\n', '        buyDec = address(buyAddr) == ethAddr ?  18 : buyAddr.decimals();\n', '        sellDec = address(sellAddr) == ethAddr ?  18 : sellAddr.decimals();\n', '    }\n', '\n', '    function encodeEvent(string memory eventName, bytes memory eventParam) internal pure returns (bytes memory) {\n', '        return abi.encode(eventName, eventParam);\n', '    }\n', '\n', '    function changeEthAddress(address buy, address sell) internal pure returns(TokenInterface _buy, TokenInterface _sell){\n', '        _buy = buy == ethAddr ? TokenInterface(wethAddr) : TokenInterface(buy);\n', '        _sell = sell == ethAddr ? TokenInterface(wethAddr) : TokenInterface(sell);\n', '    }\n', '\n', '    function convertEthToWeth(bool isEth, TokenInterface token, uint amount) internal {\n', '        if(isEth) token.deposit{value: amount}();\n', '    }\n', '\n', '    function convertWethToEth(bool isEth, TokenInterface token, uint amount) internal {\n', '       if(isEth) {\n', '            token.approve(address(token), amount);\n', '            token.withdraw(amount);\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']