['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-12\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// File contracts/interface/ICCFactory.sol\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICCFactory {\n', '    function updater() external view returns (address);\n', '\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function feeToRate() external view returns (uint256);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function allPairs(uint) external view returns (address pair);\n', '\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '\n', '    function setFeeToSetter(address) external;\n', '\n', '    function setFeeToRate(uint256) external;\n', '\n', '    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, address token1);\n', '\n', '    function pairFor(address tokenA, address tokenB) external view returns (address pair);\n', '\n', '    function getReserves(address tokenA, address tokenB) external view returns (uint256 reserveA, uint256 reserveB);\n', '\n', '    function quote(uint256 amountA, uint256 reserveA, uint256 reserveB) external pure returns (uint256 amountB);\n', '\n', '    function getAmountOut(uint256 amountIn, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountOut);\n', '\n', '    function getAmountIn(uint256 amountOut, uint256 reserveIn, uint256 reserveOut) external view returns (uint256 amountIn);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '    function getAmountsIn(uint256 amountOut, address[] calldata path) external view returns (uint256[] memory amounts);\n', '    \n', '    function migrator() external view returns (address);\n', '    \n', '    function setMigrator(address) external;\n', '\n', '}\n', '\n', '\n', '// File contracts/interface/ICCPair.sol\n', '\n', 'pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface ICCPair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function symbol() external pure returns (string memory);\n', '\n', '    function decimals() external pure returns (uint8);\n', '\n', '    function totalSupply() external view returns (uint);\n', '\n', '    function balanceOf(address owner) external view returns (uint);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '\n', '    function transfer(address to, uint value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '\n', '    function factory() external view returns (address);\n', '\n', '    function token0() external view returns (address);\n', '\n', '    function token1() external view returns (address);\n', '\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '\n', '    function price0CumulativeLast() external view returns (uint);\n', '\n', '    function price1CumulativeLast() external view returns (uint);\n', '\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '\n', '    function skim(address to) external;\n', '\n', '    function sync() external;\n', '\n', '    function price(address token, uint256 baseDecimal) external view returns (uint256);\n', '\n', '    function initialize(address, address) external;\n', '\n', '    function updateFee() external;\n', '}\n', '\n', '\n', '// File contracts/interface/IOracle.sol\n', '\n', 'pragma solidity ^0.6.6;\n', '\n', 'interface IOracle {\n', '    function factory() external pure returns (address);\n', '    function update(address tokenA, address tokenB) external returns(bool);\n', '    function updatePair(address pair) external returns(bool);\n', '    function consult(address tokenIn, uint amountIn, address tokenOut) external view returns (uint amountOut);\n', '}\n', '\n', '\n', '// File contracts/volumeMining/Oracle.sol\n', '\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x + y) >= x, 'ds-math-add-overflow');\n", '    }\n', '\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', "        require((z = x - y) <= x, 'ds-math-sub-underflow');\n", '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', "        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\n", '    }\n', '}\n', '\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    // int to 112bits precision fixed point number8890779i-78888\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    // div like this can obtaion a fixed point number with 112 bits precision\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '}\n', '\n', 'library CCOracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = ICCPair(pair).price0CumulativeLast();\n', '        price1Cumulative = ICCPair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = ICCPair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', 'contract Oracle is IOracle {\n', '    using FixedPoint for *;\n', '    using SafeMath for uint;\n', '\n', '    uint256 public constant PERIOD = 30 minutes;\n', '\n', '    address public immutable override factory;\n', '    \n', '    struct Observation {\n', '        uint32 blockTimestampLast;\n', '        uint price0CumulativeLast;\n', '        uint price1CumulativeLast;\n', '        FixedPoint.uq112x112 price0Average;\n', '        FixedPoint.uq112x112 price1Average;\n', '    }\n', '\n', '    // mapping from pair address to a list of price observations of that pair\n', '    mapping(address => Observation) private pairObservations;\n', '\n', '    constructor(address _factory) public {\n', '        require(_factory != address(0), "Oracle: Zero address");\n', '        factory = _factory;\n', '    }\n', '\n', '    function getObservation(address tokenA, address tokenB) external view returns(uint32, uint, uint, uint224, uint224) {\n', '        address pair = ICCFactory(factory).getPair(tokenA, tokenB);\n', '        Observation storage observation = pairObservations[pair];\n', '        return (\n', '            observation.blockTimestampLast,\n', '            observation.price0CumulativeLast,\n', '            observation.price1CumulativeLast,\n', '            observation.price0Average._x,\n', '            observation.price1Average._x\n', '        );\n', '    }\n', '\n', '    function updatePair(address pair) public override returns(bool) {\n', '        // only exist pair can be updated\n', '        if (pair == address(0)) {\n', '            return false;\n', '        }\n', '        Observation storage observation = pairObservations[pair];\n', '        // init create observation\n', '        if (observation.blockTimestampLast == 0) {\n', '            ICCPair _pair = ICCPair(pair);\n', '            // if pair just created, priceCumulativeLast will be zero\n', '            observation.price0CumulativeLast = _pair.price0CumulativeLast(); // fetch the current accumulated price value (1 / 0)\n', '            observation.price1CumulativeLast = _pair.price1CumulativeLast(); // fetch the current accumulated price value (0 / 1)\n', '            uint112 reserve0;\n', '            uint112 reserve1;\n', '            uint32 _blockTimestampLast;\n', '            (reserve0, reserve1, _blockTimestampLast) = _pair.getReserves();\n', '            observation.blockTimestampLast = _blockTimestampLast;\n', "            require(reserve0 != 0 && reserve1 != 0, 'Oracle: NO_RESERVES'); // ensure that there's liquidity in the pair\n", '            return true;\n', '        }\n', '        // get obsservation\n', '        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            CCOracleLibrary.currentCumulativePrices(pair);\n', '\n', '        uint32 timeElapsed = blockTimestamp - observation.blockTimestampLast; // overflow is desired\n', '\n', '        // ensure that at least one full period has passed since the last update\n', '        if (timeElapsed < PERIOD) {\n', '            return false;\n', '        }\n', '        // overflow is desired, casting never truncates\n', '        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\n', '        observation.price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - observation.price0CumulativeLast) / timeElapsed));\n', '        observation.price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - observation.price1CumulativeLast) / timeElapsed));\n', '\n', '        observation.price0CumulativeLast = price0Cumulative;\n', '        observation.price1CumulativeLast = price1Cumulative;\n', '        observation.blockTimestampLast = blockTimestamp;\n', '        \n', '        return true;\n', '    }\n', '\n', '    // If no one add liquidity in period, invoke this func manuall. Check if timestamp > lastTimestamp + PERIOD off chain before invoke can save gas\n', '    function update(address tokenA, address tokenB) external override returns(bool) {\n', '        address pair = ICCFactory(factory).getPair(tokenA, tokenB);\n', '        return updatePair(pair);\n', '    }\n', '     // note this will always return 0 before update function has been called successfully for the second time.\n', '    function consult(address tokenIn, uint amountIn, address tokenOut) external override view returns (uint amountOut) {\n', '        address pair = ICCFactory(factory).pairFor(tokenIn, tokenOut);\n', '        Observation storage observation = pairObservations[pair];\n', '        (address token0, address token1) = ICCFactory(factory).sortTokens(tokenIn, tokenOut);\n', '        if (tokenIn == token0) {\n', '            amountOut = observation.price0Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(tokenIn == token1, 'Oracle: INVALID_TOKEN');\n", '            amountOut = observation.price1Average.mul(amountIn).decode144();\n', '        }\n', '    }\n', '}']