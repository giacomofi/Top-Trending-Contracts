['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-05\n', '*/\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '// CAUTION\n', '// This version of SafeMath should only be used with Solidity 0.8 or later,\n', "// because it relies on the compiler's built in overflow checks.\n", '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations.\n", ' *\n', ' * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\n', ' * now has built in overflow checking.\n', ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            uint256 c = a + b;\n', '            if (c < a) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b > a) return (false, 0);\n', '            return (true, a - b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', "            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "            // benefit is lost if 'b' is also tested.\n", '            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '            if (a == 0) return (true, 0);\n', '            uint256 c = a * b;\n', '            if (c / a != b) return (false, 0);\n', '            return (true, c);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a / b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        unchecked {\n', '            if (b == 0) return (false, 0);\n', '            return (true, a % b);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a + b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a * b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b <= a, errorMessage);\n', '            return a - b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a / b;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        unchecked {\n', '            require(b > 0, errorMessage);\n', '            return a % b;\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant _HEX_SYMBOLS = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev External interface of AccessControl declared to support ERC165 detection.\n', ' */\n', 'interface IAccessControl {\n', '    function hasRole(bytes32 role, address account) external view returns (bool);\n', '\n', '    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n', '\n', '    function grantRole(bytes32 role, address account) external;\n', '\n', '    function revokeRole(bytes32 role, address account) external;\n', '\n', '    function renounceRole(bytes32 role, address account) external;\n', '}\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', " * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n", ' * members except through off-chain means by accessing the contract event logs. Some\n', ' * applications may benefit from on-chain enumerability, for those cases see\n', ' * {AccessControlEnumerable}.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context, IAccessControl, ERC165 {\n', '    struct RoleData {\n', '        mapping(address => bool) members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping(bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Modifier that checks that an account has a specific role. Reverts\n', '     * with a standardized message including the required role.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     *\n', '     * _Available since v4.1._\n', '     */\n', '    modifier onlyRole(bytes32 role) {\n', '        _checkRole(role, _msgSender());\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view override returns (bool) {\n', '        return _roles[role].members[account];\n', '    }\n', '\n', '    /**\n', '     * @dev Revert with a standard message if `account` is missing `role`.\n', '     *\n', '     * The format of the revert reason is given by the following regular expression:\n', '     *\n', '     *  /^AccessControl: account (0x[0-9a-f]{20}) is missing role (0x[0-9a-f]{32})$/\n', '     */\n', '    function _checkRole(bytes32 role, address account) internal view {\n', '        if (!hasRole(role, account)) {\n', '            revert(\n', '                string(\n', '                    abi.encodePacked(\n', '                        "AccessControl: account ",\n', '                        Strings.toHexString(uint160(account), 20),\n', '                        " is missing role ",\n', '                        Strings.toHexString(uint256(role), 32)\n', '                    )\n', '                )\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual override {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, getRoleAdmin(role), adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (!hasRole(role, account)) {\n', '            _roles[role].members[account] = true;\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (hasRole(role, account)) {\n', '            _roles[role].members[account] = false;\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain `call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface for the optional metadata functions from the ERC20 standard.\n', ' *\n', ' * _Available since v4.1._\n', ' */\n', 'interface IERC20Metadata is IERC20 {\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the decimals places of the token.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor() {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface Uniswap {\n', '  function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '  function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '  function token0() external view returns (address);\n', '  function token1() external view returns (address);\n', '  function factory() external pure returns (address);\n', '  function WETH() external pure returns (address);\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '/// @title The interface for a Uniswap V3 Pool\n', '/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\n', '/// to the ERC20 specification\n', '/// @dev The pool interface is broken up into many smaller pieces\n', 'interface IUniswapV3Pool {\n', '    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\n', '    /// when accessed externally.\n', '    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\n', '    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\n', '    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\n', '    /// boundary.\n', '    /// observationIndex The index of the last oracle observation that was written,\n', '    /// observationCardinality The current maximum number of observations stored in the pool,\n', '    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\n', '    /// feeProtocol The protocol fee for both tokens of the pool.\n', '    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\n', '    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\n', '    /// unlocked Whether the pool is currently locked to reentrancy\n', '    function slot0()\n', '        external\n', '        view\n', '        returns (\n', '            uint160 sqrtPriceX96,\n', '            int24 tick,\n', '            uint16 observationIndex,\n', '            uint16 observationCardinality,\n', '            uint16 observationCardinalityNext,\n', '            uint8 feeProtocol,\n', '            bool unlocked\n', '        );\n', '\n', '    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\n', '    /// @dev This value can overflow the uint256\n', '    function feeGrowthGlobal0X128() external view returns (uint256);\n', '\n', '    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\n', '    /// @dev This value can overflow the uint256\n', '    function feeGrowthGlobal1X128() external view returns (uint256);\n', '\n', '    /// @notice The amounts of token0 and token1 that are owed to the protocol\n', '    /// @dev Protocol fees will never exceed uint128 max in either token\n', '    function protocolFees() external view returns (uint128 token0, uint128 token1);\n', '\n', '    /// @notice The currently in range liquidity available to the pool\n', '    /// @dev This value has no relationship to the total liquidity across all ticks\n', '    function liquidity() external view returns (uint128);\n', '\n', '    /// @notice Look up information about a specific tick in the pool\n', '    /// @param tick The tick to look up\n', '    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\n', '    /// tick upper,\n', '    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\n', '    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\n', '    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\n', '    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\n', '    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\n', '    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\n', '    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\n', '    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\n', '    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\n', '    /// a specific position.\n', '    function ticks(int24 tick)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 liquidityGross,\n', '            int128 liquidityNet,\n', '            uint256 feeGrowthOutside0X128,\n', '            uint256 feeGrowthOutside1X128,\n', '            int56 tickCumulativeOutside,\n', '            uint160 secondsPerLiquidityOutsideX128,\n', '            uint32 secondsOutside,\n', '            bool initialized\n', '        );\n', '\n', '    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\n', '    function tickBitmap(int16 wordPosition) external view returns (uint256);\n', '\n', "    /// @notice Returns the information about a position by the position's key\n", "    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\n", '    /// @return _liquidity The amount of liquidity in the position,\n', '    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\n', '    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\n', '    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\n', '    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\n', '    function positions(bytes32 key)\n', '        external\n', '        view\n', '        returns (\n', '            uint128 _liquidity,\n', '            uint256 feeGrowthInside0LastX128,\n', '            uint256 feeGrowthInside1LastX128,\n', '            uint128 tokensOwed0,\n', '            uint128 tokensOwed1\n', '        );\n', '\n', '    /// @notice Returns data about a specific observation index\n', '    /// @param index The element of the observations array to fetch\n', '    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\n', '    /// ago, rather than at a specific index in the array.\n', '    /// @return blockTimestamp The timestamp of the observation,\n', '    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\n', '    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\n', '    /// Returns initialized whether the observation has been initialized and the values are safe to use\n', '    function observations(uint256 index)\n', '        external\n', '        view\n', '        returns (\n', '            uint32 blockTimestamp,\n', '            int56 tickCumulative,\n', '            uint160 secondsPerLiquidityCumulativeX128,\n', '            bool initialized\n', '        );\n', '\n', '    /// @notice The first of the two tokens of the pool, sorted by address\n', '    /// @return The token contract address\n', '    function token0() external view returns (address);\n', '\n', '    /// @notice The second of the two tokens of the pool, sorted by address\n', '    /// @return The token contract address\n', '    function token1() external view returns (address);\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '/// @title The interface for the Uniswap V3 Factory\n', '/// @notice The Uniswap V3 Factory facilitates creation of Uniswap V3 pools and control over the protocol fees\n', 'interface IUniswapV3Factory {\n', '    /// @notice Emitted when the owner of the factory is changed\n', '    /// @param oldOwner The owner before the owner was changed\n', '    /// @param newOwner The owner after the owner was changed\n', '    event OwnerChanged(address indexed oldOwner, address indexed newOwner);\n', '\n', '    /// @notice Emitted when a pool is created\n', '    /// @param token0 The first token of the pool by address sort order\n', '    /// @param token1 The second token of the pool by address sort order\n', '    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n', '    /// @param tickSpacing The minimum number of ticks between initialized ticks\n', '    /// @param pool The address of the created pool\n', '    event PoolCreated(\n', '        address indexed token0,\n', '        address indexed token1,\n', '        uint24 indexed fee,\n', '        int24 tickSpacing,\n', '        address pool\n', '    );\n', '\n', '    /// @notice Emitted when a new fee amount is enabled for pool creation via the factory\n', '    /// @param fee The enabled fee, denominated in hundredths of a bip\n', '    /// @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee\n', '    event FeeAmountEnabled(uint24 indexed fee, int24 indexed tickSpacing);\n', '\n', '    /// @notice Returns the current owner of the factory\n', '    /// @dev Can be changed by the current owner via setOwner\n', '    /// @return The address of the factory owner\n', '    function owner() external view returns (address);\n', '\n', '    /// @notice Returns the tick spacing for a given fee amount, if enabled, or 0 if not enabled\n', '    /// @dev A fee amount can never be removed, so this value should be hard coded or cached in the calling context\n', '    /// @param fee The enabled fee, denominated in hundredths of a bip. Returns 0 in case of unenabled fee\n', '    /// @return The tick spacing\n', '    function feeAmountTickSpacing(uint24 fee) external view returns (int24);\n', '\n', '    /// @notice Returns the pool address for a given pair of tokens and a fee, or address 0 if it does not exist\n', '    /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\n', '    /// @param tokenA The contract address of either token0 or token1\n', '    /// @param tokenB The contract address of the other token\n', '    /// @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip\n', '    /// @return pool The pool address\n', '    function getPool(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint24 fee\n', '    ) external view returns (address pool);\n', '\n', '    /// @notice Creates a pool for the given two tokens and fee\n', '    /// @param tokenA One of the two tokens in the desired pool\n', '    /// @param tokenB The other of the two tokens in the desired pool\n', '    /// @param fee The desired fee for the pool\n', '    /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0. tickSpacing is retrieved\n', '    /// from the fee. The call will revert if the pool already exists, the fee is invalid, or the token arguments\n', '    /// are invalid.\n', '    /// @return pool The address of the newly created pool\n', '    function createPool(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint24 fee\n', '    ) external returns (address pool);\n', '\n', '    /// @notice Updates the owner of the factory\n', '    /// @dev Must be called by the current owner\n', '    /// @param _owner The new owner of the factory\n', '    function setOwner(address _owner) external;\n', '\n', '    /// @notice Enables a fee amount with the given tickSpacing\n', '    /// @dev Fee amounts may never be removed once enabled\n', '    /// @param fee The fee amount to enable, denominated in hundredths of a bip (i.e. 1e-6)\n', '    /// @param tickSpacing The spacing between ticks to be enforced for all pools created with the given fee amount\n', '    function enableFeeAmount(uint24 fee, int24 tickSpacing) external;\n', '}\n', '\n', '// "SPDX-License-Identifier: MIT"\n', '\n', 'pragma solidity ^0.8.3;\n', '\n', 'contract MainnetMultiBridgePool is AccessControl, ReentrancyGuard {\n', '  bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");\n', '\n', '  using SafeMath  for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  event Deposited(address indexed token, address outToken, address indexed spender, address recipient, uint256 amount, uint256 requestId);\n', '  event Withdrawn(address indexed token, address indexed owner, uint256 amount, uint256 requestId);\n', '  event EthWithdrawn(uint256 amount);\n', '\n', '  event FeeSet(address token, uint256 fee, uint256 percentFee, uint256 percentFeeDecimals, uint256 tokenToEth);\n', '  event TokenConfigSet(address token, address outAddress, uint256 maxTxsCount, uint256 txsCount);\n', '  event Initialized(address token, address outAddress, uint256 maxTxsCount, uint256 fee, uint256 percentFee, uint256 percentFeeDecimals, uint256 tokenToEth);\n', '  event Removed(address token);\n', '\n', '  event AutoWithdrawFeeSet(bool autoWithdraw);\n', '  event TreasuryAddressSet(address treasuryAddress);\n', '  event ConfigSet(address uniV2Router, address uniV3Factory);\n', '\n', '  struct TokenInfo {\n', '    address outAddress;\n', '    uint256 maxTxsCount;\n', '    uint256 txsCount;\n', '    bool exists;\n', '    uint256 fee;\n', '    uint256 percentFee;\n', '    uint256 percentFeeDecimals;\n', '    uint256 tokenToEth;\n', '  }\n', '\n', '  mapping(address => TokenInfo) private tokens;\n', '\n', '  uint256 private requestId;\n', '\n', '  bool    private autoWithdrawFee;\n', '  address private treasuryAddress;\n', '\n', '  address private UniV2Router;\n', '  address private UniV3Factory;\n', '  address private WETH;\n', '\n', '  constructor() {\n', '    _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());\n', '    _setupRole(MINTER_ROLE, _msgSender());\n', '\n', '    treasuryAddress = _msgSender();\n', '  }\n', '\n', '  modifier onlyMinter() {\n', '    require(hasRole(MINTER_ROLE, _msgSender()), "MainnetMultiBridgePool: caller is not a minter");\n', '    _;\n', '  }\n', '\n', '  modifier onlyOwner() {\n', '    require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), "MainnetMultiBridgePool: caller is not an owner");\n', '    _;\n', '  }\n', '\n', '  function _getUniV3TokenInEth(address _token, uint256 _amount) \n', '    internal view returns (uint256) {\n', '      address lp;\n', '      // check if pool exists for all fee types\n', '      lp = IUniswapV3Factory(UniV3Factory).getPool(WETH, _token, 10000);\n', '      if (lp == address(0)) {\n', '        lp = IUniswapV3Factory(UniV3Factory).getPool(WETH, _token, 3000);\n', '        if (lp == address(0)) { \n', '          lp = IUniswapV3Factory(UniV3Factory).getPool(WETH, _token, 500);\n', '          if (lp == address(0)) {\n', '            return 0;\n', '          }\n', '        }\n', '      }\n', '\n', '      (uint160 sqrtPriceX96,,,,,,) = IUniswapV3Pool(lp).slot0();\n', '      if (IUniswapV3Pool(lp).token0() == _token) {\n', '        return (_amount * sqrtPriceX96 * sqrtPriceX96) >> (96 * 2);\n', '      } else {\n', '        return _amount / ((sqrtPriceX96 * sqrtPriceX96) >> (96 * 2));\n', '      }\n', '  }\n', '\n', '  function _getUniV2TokenInEth(address _token, uint256 _amount) \n', '    internal view returns (uint256) {\n', '      address lp = Uniswap(Uniswap(UniV2Router).factory()).getPair(_token, WETH);\n', '      if (lp == address(0)) {\n', '         return 0;\n', '      }\n', '\n', '      (uint reserve0, uint reserve1, ) = Uniswap(lp).getReserves();\n', '\n', '      if (Uniswap(lp).token0() == _token) {\n', '        return reserve1.mul(_amount).div(reserve0);\n', '      } else {\n', '        return reserve0.mul(_amount).div(reserve1);\n', '      }\n', '  }\n', '\n', '  function getFee(address _token, uint256 _amount) \n', '    public view returns (uint256) {\n', '      TokenInfo memory info = tokens[_token];\n', '      if (!info.exists) {\n', '        return 0;\n', '      }\n', '\n', '      if (info.percentFee == 0) {\n', '        return info.fee;\n', '      }\n', '\n', '      uint256 _tokenInEth = _getUniV3TokenInEth(_token, _amount);\n', '      if (_tokenInEth == 0) {\n', '        _tokenInEth = _getUniV2TokenInEth(_token, _amount);\n', '        if (_tokenInEth == 0) {\n', '          _tokenInEth = _amount.div(info.tokenToEth);\n', '        }\n', '      }\n', '\n', '      uint256 decimals = IERC20Metadata(_token).decimals();\n', '\n', '      return info.fee.add(_tokenInEth.mul(1e18).mul(info.percentFee).div(10 ** info.percentFeeDecimals).div(10 ** decimals)); \n', '  }\n', '\n', '  function getTokenInfo(address _token)\n', '    public view returns (TokenInfo memory) {\n', '      return tokens[_token];\n', '  }\n', '\n', '  function setFee(address _token, uint256 _fee, uint256 _percentFee, uint256 _percentFeeDecimals, uint256 _tokenToEth)\n', '    external onlyOwner {\n', '      require(tokens[_token].exists, "MainnetMultiBridgePool: token unsupported");\n', '\n', '      tokens[_token].fee = _fee;\n', '      tokens[_token].percentFee = _percentFee;\n', '      tokens[_token].percentFeeDecimals = _percentFeeDecimals;\n', '      tokens[_token].tokenToEth = _tokenToEth;\n', '\n', '      emit FeeSet(_token, _fee, _percentFee, _percentFeeDecimals, _tokenToEth);\n', '  }\n', '\n', '  function setTokenConfig(address _token, address _outAddress, uint256 _maxTxsCount, uint256 _txsCount) \n', '    external onlyOwner {\n', '      require(tokens[_token].exists, "MainnetMultiBridgePool: token unsupported");\n', '\n', '      tokens[_token].outAddress = _outAddress;\n', '      tokens[_token].maxTxsCount = _maxTxsCount;\n', '      tokens[_token].txsCount = _txsCount;\n', '\n', '      emit TokenConfigSet(_token, _outAddress, _maxTxsCount, _txsCount);      \n', '  }\n', '\n', '  function init(address _token, address _outAddress, uint256 _maxTxsCount, uint256 _fee, uint256 _percentFee, uint256 _percentFeeDecimals, uint256 _tokenToEth) \n', '    external onlyOwner {\n', '      require(!tokens[_token].exists, "MainnetMultiBridgePool: token already exists");\n', '      \n', '      tokens[_token] = TokenInfo({\n', '         outAddress: _outAddress,\n', '         maxTxsCount: _maxTxsCount,\n', '         txsCount: 0,\n', '         exists: true,\n', '         fee: _fee,\n', '         percentFee: _percentFee,\n', '         percentFeeDecimals: _percentFeeDecimals,\n', '         tokenToEth: _tokenToEth\n', '      });\n', '\n', '      emit Initialized({\n', '        token: _token,\n', '        outAddress: _outAddress,\n', '        maxTxsCount: _maxTxsCount,\n', '        fee: _fee,\n', '        percentFee: _percentFee,\n', '        percentFeeDecimals: _percentFeeDecimals,\n', '        tokenToEth: _tokenToEth\n', '      });\n', '  }\n', '\n', '  function remove(address _token) \n', '    external onlyOwner {\n', '      delete tokens[_token];\n', '      emit Removed(_token);\n', '  }\n', '\n', '  function setAutoWithdrawFee(bool _autoWithdrawFee)\n', '    external onlyOwner {\n', '      autoWithdrawFee = _autoWithdrawFee;\n', '      emit AutoWithdrawFeeSet(autoWithdrawFee);\n', '  }\n', '\n', '  function setTreasuryAddress(address _treasuryAddress)\n', '    external onlyOwner {\n', '      treasuryAddress = _treasuryAddress;\n', '      emit TreasuryAddressSet(_treasuryAddress);\n', '  } \n', '\n', '  function setConfig(address _uniV2Router, address _uniV3Factory)\n', '    external onlyOwner {\n', '      UniV2Router = _uniV2Router;\n', '      UniV3Factory = _uniV3Factory;\n', '      WETH = Uniswap(_uniV2Router).WETH();\n', '\n', '      emit ConfigSet(_uniV2Router, _uniV3Factory);\n', '  } \n', '\n', '  function deposit(address _token, address _recipient, uint256 _amount) \n', '    external payable nonReentrant {\n', '      require(tokens[_token].exists, "MainnetMultiBridgePool: token unsupported");\n', '      require(tokens[_token].maxTxsCount > tokens[_token].txsCount, "MainnetMultiBridgePool: max transactions count reached");\n', '\n', '      uint256 depositFee = getFee(_token, _amount);\n', '      require(msg.value >= depositFee, "MainnetMultiBridgePool: not enough eth");\n', '\n', '      uint256 balanceBefore = IERC20(_token).balanceOf(address(this));\n', '      IERC20(_token).safeTransferFrom(_msgSender(), address(this), _amount);\n', '      uint256 balanceAfter = IERC20(_token).balanceOf(address(this));\n', '\n', '      uint256 refund = msg.value.sub(depositFee);\n', '      if(refund > 0) {\n', '        (bool refundSuccess, ) = _msgSender().call{ value: refund }("");\n', '        require(refundSuccess, "MainnetMultiBridgePool: refund transfer failed");\n', '      }\n', '\n', '      if (autoWithdrawFee) {\n', '        (bool withdrawSuccess, ) = treasuryAddress.call{ value: depositFee }("");\n', '        require(withdrawSuccess, "MainnetMultiBridgePool: withdraw transfer failed");\n', '      }\n', '\n', '      requestId++;\n', '      tokens[_token].txsCount++;\n', '      emit Deposited(_token, tokens[_token].outAddress, _msgSender(), _recipient, balanceAfter - balanceBefore, requestId);\n', '  }\n', '\n', '  function withdraw(address[] calldata _tokens, address[] calldata _owners, uint256[] calldata _amounts, uint256[] calldata _requestsIds) \n', '    external onlyMinter {\n', '      require(_owners.length == _amounts.length && _owners.length == _requestsIds.length && _owners.length == _tokens.length, "MainnetMultiBridgePool: Arrays length not equal");\n', '\n', '      for (uint256 i; i < _owners.length; i++) {\n', '        IERC20(_tokens[i]).safeTransfer(_owners[i], _amounts[i]);\n', '        emit Withdrawn(_tokens[i], _owners[i], _amounts[i], _requestsIds[i]);\n', '      }\n', '  }\n', '\n', '  function withdrawEth(uint256 _amount)\n', '    external onlyOwner {\n', '      require(_amount <= address(this).balance, "MainnetMultiBridgePool: not enough balance");\n', '      \n', '      (bool success, ) = _msgSender().call{ value: _amount }("");\n', '      require(success, "MainnetMultiBridgePool: transfer failed");\n', '\n', '      emit EthWithdrawn(_amount);\n', '  }\n', '}']