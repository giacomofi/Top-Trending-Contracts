['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./ProxyStorage.sol";\n', '\n', 'contract BridgeProxy is ProxyStorage {\n', '\n', '    event NewAdmin(address oldAdmin, address newAdmin);\n', '    event NewImplementation(address oldImplementation, address newImplementation);\n', '\n', '    constructor(\n', '        address bridgeImplementation_,\n', '        address _courier,\n', '        address _guardian,\n', '        address _bridgeToken,\n', '        uint _fee,\n', '        uint[] memory _newRoutes\n', '    ) {\n', '        // Set admin to caller\n', '        admin = msg.sender;\n', '\n', '        _setImplementation(bridgeImplementation_);\n', '\n', '        // First delegate gets to initialize the delegator (i.e. storage contract)\n', '        delegateTo(implementation, abi.encodeWithSignature("initialize(address,address,address,uint256,uint256[])",\n', '            _courier,\n', '            _guardian,\n', '            _bridgeToken,\n', '            _fee,\n', '            _newRoutes)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Internal method to delegate execution to another contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     * @param callee The contract to delegatecall\n', '     * @param data The raw data to delegatecall\n', '     * @return The returned bytes from the delegatecall\n', '     */\n', '    function delegateTo(address callee, bytes memory data) internal returns (bytes memory) {\n', '        (bool success, bytes memory returnData) = callee.delegatecall(data);\n', '        assembly {\n', '            if eq(success, 0) {\n', '                revert(add(returnData, 0x20), returndatasize())\n', '            }\n', '        }\n', '        return returnData;\n', '    }\n', '\n', '    function delegateAndReturn() internal returns (bytes memory) {\n', '        (bool success, ) = implementation.delegatecall(msg.data);\n', '\n', '        assembly {\n', '            let free_mem_ptr := mload(0x40)\n', '            returndatacopy(free_mem_ptr, 0, returndatasize())\n', '\n', '            switch success\n', '            case 0 { revert(free_mem_ptr, returndatasize()) }\n', '            default { return(free_mem_ptr, returndatasize()) }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Delegates execution to an implementation contract\n', '     * @dev It returns to the external caller whatever the implementation returns or forwards reverts\n', '     */\n', '    fallback() external {\n', '        // delegate all other functions to current implementation\n', '        delegateAndReturn();\n', '    }\n', '\n', '    function setImplementation(address newImplementation) external returns (bool) {\n', "        require(msg.sender == admin, 'BridgeProxy: Only admin can set implementation');\n", '\n', '        address oldImplementation = implementation;\n', '        _setImplementation(newImplementation);\n', '\n', '        emit NewImplementation(oldImplementation, implementation);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _setPendingAdmin(address newPendingAdmin) public returns (bool) {\n', '        // Check caller = admin\n', "        require(msg.sender == admin, 'BridgeProxy: Only admin can set pending admin');\n", '\n', '        // Store pendingAdmin with value newPendingAdmin\n', '        pendingAdmin = newPendingAdmin;\n', '\n', '        return true;\n', '    }\n', '\n', '    function _acceptAdmin() public returns (bool) {\n', '        // Check caller is pendingAdmin\n', "        require(msg.sender == pendingAdmin, 'BridgeProxy: Only pendingAdmin can accept admin');\n", '\n', '        address oldAdmin = admin;\n', '\n', '        // Store admin with value pendingAdmin\n', '        admin = pendingAdmin;\n', '\n', '        // Clear the pending value\n', '        pendingAdmin = address(0);\n', '\n', '        emit NewAdmin(oldAdmin, admin);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _setImplementation(address implementation_) internal {\n', '        implementation = implementation_;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'contract ProxyStorage {\n', '    address public implementation;\n', '    address public admin;\n', '    address public pendingAdmin;\n', '}']