['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-29\n', '*/\n', '\n', 'pragma solidity ^0.4.26;\n', '\n', '// ----------------------------------------------------------------------------\n', '// LHASA ICO contract\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Safe math\n', '// ----------------------------------------------------------------------------\n', 'library SafeMath {\n', '    function add(uint a, uint b) internal pure returns (uint c) {\n', '        c = a + b;\n', '        require(c >= a);\n', '    }\n', '    function sub(uint a, uint b) internal pure returns (uint c) {\n', '        require(b <= a);\n', '        c = a - b;\n', '    }\n', '    function mul(uint a, uint b) internal pure returns (uint c) {\n', '        c = a * b;\n', '        require(a == 0 || c / a == b);\n', '    }\n', '    function div(uint a, uint b) internal pure returns (uint c) {\n', '        require(b > 0);\n', '        c = a / b;\n', '    }\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// Ownership contract\n', '// _newOwner is address of new owner\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    \n', '    address public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    // transfer Ownership to other address\n', '    function transferOwnership(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0x0));\n', '        emit OwnershipTransferred(owner,_newOwner);\n', '        owner = _newOwner;\n', '    }\n', '    \n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// LHASAToken interface\n', '// ----------------------------------------------------------------------------\n', 'contract LHASAToken {\n', '    \n', '    function balanceOf(address _owner) public constant returns (uint256 balance);\n', '    function transfer(address _to, uint256 _value) public returns (bool success);\n', '}\n', '\n', '\n', '// ----------------------------------------------------------------------------\n', '// LHASAICO smart contract\n', '// ----------------------------------------------------------------------------\n', 'contract LHASAICO is Owned {\n', '\n', '    using SafeMath for uint256;\n', '    \n', '    enum State {\n', '        PrivateSale,\n', '        PreSale,\n', '        Successful\n', '    }\n', '    \n', '    // public variables\n', '    State public state; // Set initial stage\n', '    uint256 public totalRaised; // eth in wei\n', '    uint256 public totalDistributed; // tokens distributed\n', '    LHASAToken public LHASA; // LHASA token address\n', '    \n', '    // caps\n', '    uint256 public hardcap_PrivateSale = 37.5 ether;\n', '    uint256 public hardcap_PreSale = 116 ether;\n', '    uint256 public currentcap_PrivateSale;\n', '    uint256 public currentcap_PreSale;\n', '\n', '    // events for log\n', '    event LogFundingReceived(address _addr, uint _amount, uint _currentTotal);\n', '    event LogBeneficiaryPaid(address _beneficiaryAddress);\n', '    event LogFundingSuccessful(uint _totalRaised);\n', '    event LogFunderInitialized(address _creator);\n', '    event LogContributorsPayout(address _addr, uint _amount);\n', '    \n', '    // To determine whether the ICO is running or stopped\n', '    modifier onlyIfNotFinished {\n', '        require(state != State.Successful);\n', '        _;\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // LHASAICO constructor\n', '    // _addressOfToken is the token totalDistributed\n', '    // ----------------------------------------------------------------------------\n', '    constructor(LHASAToken _addressOfToken) public {\n', '        require(_addressOfToken != address(0)); // should have valid address\n', '        LHASA = LHASAToken(_addressOfToken);\n', '        state = State.PrivateSale;\n', '        emit LogFunderInitialized(owner);\n', '    }\n', '    \n', '    \n', '    // ----------------------------------------------------------------------------\n', '    // Function to handle eth transfers\n', '    // It invokes when someone sends ETH to this contract address.\n', "    // Requires enough gas for the execution otherwise it'll throw out of gas error.\n", '    // tokens are transferred to user\n', '    // ETH are transferred to current owner\n', '    // ----------------------------------------------------------------------------\n', '    function() public payable {\n', '        contribute();\n', '    }\n', '\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Acceptes ETH and send equivalent LHASA with bonus if any.\n', '    // ----------------------------------------------------------------------------\n', '    function contribute() onlyIfNotFinished public payable {\n', '        \n', '        uint256 tokenBought; // Variable to store amount of tokens bought\n', '        uint256 tokenPrice;\n', '        \n', '        // Token allocation calculation\n', '        if (state == State.PrivateSale){\n', '            // check min and max investment\n', '            require(msg.value >= 0.1 ether && msg.value <= 2 ether, "Private sale investment should be between 0.1 - 2 ETH");\n', '            \n', '            // token price\n', '            tokenPrice = 4000000000000; // 1 ETH = 4 Trillions\n', '            \n', '            // increase current cap\n', '            currentcap_PrivateSale = currentcap_PrivateSale.add(msg.value);\n', '            \n', '            // check hardcap \n', '            require(currentcap_PrivateSale <= hardcap_PrivateSale, "PrivateSale hardcap reached");\n', '        } \n', '        else if (state == State.PreSale){\n', '            // check min and max investment\n', '            require(msg.value >= 0.1 ether && msg.value <= 5 ether, "Pre sale investment should be between 0.1 - 5 ETH");\n', '            \n', '            // token price\n', '            tokenPrice = 3000000000000; // 1 ETH = 3 Trillions\n', '            \n', '            // increase current cap\n', '            currentcap_PreSale = currentcap_PreSale.add(msg.value);\n', '            \n', '            // check hardcap \n', '            require(currentcap_PreSale <= hardcap_PreSale, "PreSale hardcap reached");\n', '        } \n', '        else {\n', '            revert();\n', '        }\n', '    \n', '        tokenBought = (msg.value).mul(tokenPrice).div(10 ** 9);\n', '        \n', '        // this smart contract should have enough tokens to distribute\n', '        require(LHASA.balanceOf(this) >= tokenBought);\n', '        \n', '        totalRaised = totalRaised.add(msg.value); // Save the total eth totalRaised (in wei)\n', '        totalDistributed = totalDistributed.add(tokenBought); //Save to total tokens distributed\n', '        \n', '        LHASA.transfer(msg.sender,tokenBought); // Send Tokens to user\n', '        owner.transfer(msg.value); // Send ETH to owner\n', '        \n', '        // LOGS\n', '        emit LogContributorsPayout(msg.sender,tokenBought); // Log investor paid event\n', '        emit LogBeneficiaryPaid(owner); // Log owner paid event\n', '        emit LogFundingReceived(msg.sender, msg.value, totalRaised); // Log funding event\n', '    }\n', '    \n', '    \n', '    function finished() onlyOwner public { \n', '        \n', '        uint256 remainder = LHASA.balanceOf(this); //Remaining tokens on contract\n', '        \n', '        // Funds send to creator if any\n', '        if(address(this).balance > 0) {\n', '            owner.transfer(address(this).balance);\n', '            emit LogBeneficiaryPaid(owner);\n', '        }\n', ' \n', '        LHASA.transfer(owner,remainder); //remainder tokens send to creator\n', '        emit LogContributorsPayout(owner, remainder);\n', '        \n', '        state = State.Successful; // updating the state\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Move to next ICO state\n', '    // ------------------------------------------------------------------------\n', '    function nextState() onlyOwner public {\n', '        require(state != State.PreSale);\n', '        state = State(uint(state) + 1);\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Move to previous ICO state\n', '    // ------------------------------------------------------------------------\n', '    function previousState() onlyOwner public {\n', '        require(state != State.PrivateSale);\n', '        state = State(uint(state) - 1);\n', '    }\n', '\n', '    // ----------------------------------------------------------------------------\n', '    // Function to claim any token stuck on contract\n', '    // ----------------------------------------------------------------------------\n', '    function claimTokens() onlyOwner public {\n', '        uint256 remainder = LHASA.balanceOf(this); //Check remainder tokens\n', '        LHASA.transfer(owner,remainder); //Transfer tokens to owner\n', '    }\n', '    \n', '}']