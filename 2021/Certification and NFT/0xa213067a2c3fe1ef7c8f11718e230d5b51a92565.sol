['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-07\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-12-07\n', '*/\n', '\n', 'pragma solidity ^0.5.16;\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(initializing || isConstructor() || !initialized);\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract ERC20Token\n', '{\n', '    function decimals() external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '    function balanceOf(address account) external view returns (uint);\n', '    function approve(address spender, uint value) external;\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '}\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    uint256 constant WAD = 10 ** 18;\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type,\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * This test is non-exhaustive, and there may be false-negatives: during the\n', "     * execution of a contract's constructor, its address will be reported as\n", '     * not containing a contract.\n', '     *\n', '     * > It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20Token token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20Token token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(ERC20Token token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0));\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20Token token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20Token token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(ERC20Token token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract());\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success);\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)));\n', '        }\n', '    }\n', '}\n', '\n', '\n', 'library UniversalERC20 {\n', '\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for ERC20Token;\n', '\n', '    ERC20Token private constant ZERO_ADDRESS = ERC20Token(0x0000000000000000000000000000000000000000);\n', '    ERC20Token private constant ETH_ADDRESS = ERC20Token(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\n', '\n', '    function universalTransfer(ERC20Token token, address to, uint256 amount) internal {\n', '        universalTransfer(token, to, amount, false);\n', '    }\n', '\n', '    function universalTransfer(ERC20Token token, address to, uint256 amount, bool mayFail) internal returns(bool) {\n', '        if (amount == 0) {\n', '            return true;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            if (mayFail) {\n', '                return address(uint160(to)).send(amount);\n', '            } else {\n', '                address(uint160(to)).transfer(amount);\n', '                return true;\n', '            }\n', '        } else {\n', '            token.safeTransfer(to, amount);\n', '            return true;\n', '        }\n', '    }\n', '\n', '    function universalApprove(ERC20Token token, address to, uint256 amount) internal {\n', '        if (token != ZERO_ADDRESS && token != ETH_ADDRESS) {\n', '            token.safeApprove(to, amount);\n', '        }\n', '    }\n', '\n', '    function universalTransferFrom(ERC20Token token, address from, address to, uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            require(from == msg.sender && msg.value >= amount, "msg.value is zero");\n', '            if (to != address(this)) {\n', '                address(uint160(to)).transfer(amount);\n', '            }\n', '            if (msg.value > amount) {\n', '                msg.sender.transfer(uint256(msg.value).sub(amount));\n', '            }\n', '        } else {\n', '            token.safeTransferFrom(from, to, amount);\n', '        }\n', '    }\n', '\n', '    function universalBalanceOf(ERC20Token token, address who) internal view returns (uint256) {\n', '        if (token == ZERO_ADDRESS || token == ETH_ADDRESS) {\n', '            return who.balance;\n', '        } else {\n', '            return token.balanceOf(who);\n', '        }\n', '    }\n', '}\n', '\n', 'contract Ownable {\n', '    address payable public owner = msg.sender;\n', '    address payable public newOwnerCandidate;\n', '\n', '    modifier onlyOwner()\n', '    {\n', '        assert(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\n', '        newOwnerCandidate = newOwner;\n', '    }\n', '\n', '    function acceptOwner() public {\n', '        require(msg.sender == newOwnerCandidate);\n', '        owner = newOwnerCandidate;\n', '    }\n', '}\n', '\n', 'contract VMRDepo is Initializable\n', '{\n', '    using SafeMath for uint256;\n', '    using UniversalERC20 for ERC20Token;\n', '\n', '    //  = ERC20Token(0xeE1a71a00aa9771cBbb5a9816aF5bB43fa3c6810); // Kovan\n', '    ERC20Token constant TokenVMR =  ERC20Token(0x063b98a414EAA1D4a5D4fC235a22db1427199024); // Mainnet\n', '\n', '    address payable public owner;\n', '    address payable public newOwnerCandidate;\n', '    mapping(address => bool) public admins;\n', '\n', '    uint256 constant delayBeforeRewardWithdrawn = 30 days;\n', '    \n', '    struct GlobalState {\n', '        uint256 totalVMR; // current amount\n', '        \n', '        uint256 maxTotalVMR; // 50\n', '        uint256 maxVMRPerUser; // 3 * 1e18\n', '        \n', '        // reward per token for 30 days\n', '        uint256 rewardPerToken;\n', '        uint256 startRewardDate;\n', '        uint256 totalUniqueUsers;    \n', '        mapping (address => uint256) investors;\n', '    }\n', '    GlobalState[] states;\n', '    uint256 public currentState;\n', '    \n', '    event DepositTokens(address indexed userAddress, uint256 prevAmount, uint256 newAmount);\n', '    event NewPeriodStarted(uint256 newState);\n', '\n', '    modifier onlyOwner()\n', '    {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin()\n', '    {\n', '        require(admins[msg.sender]);\n', '        _;\n', '    }\n', '    \n', '    modifier onlyOwnerOrAdmin()\n', '    {\n', '        require(msg.sender == owner || admins[msg.sender]);\n', '        _;\n', '    }\n', '\n', '    function initialize() initializer public {\n', '        owner = msg.sender;\n', '        addState(500 * 1e18, 10 * 1e18, 1100000, true);  // 1\n', '        addState(5000 * 1e18, 50 * 1e18, 900000, false); // 2\n', '        setAdmin(0x6Ecb917AfD0611F8Ab161f992a12c82e29dc533c, true);\n', '        owner = 0x4B7b1878338251874Ad8Dace56D198e31278676d;\n', '    }\n', '\n', '    function addState(uint256 _maxTotalVMRInWei, uint256 _maxVMRPerUserInWei, uint256 _rewardPerTokenInUSDT, bool finishNow) public onlyOwnerOrAdmin {\n', '        require(_rewardPerTokenInUSDT < 1e16);\n', '        GlobalState memory newState;\n', '        newState.maxTotalVMR = _maxTotalVMRInWei;\n', '        newState.maxVMRPerUser = _maxVMRPerUserInWei;\n', '        newState.rewardPerToken = _rewardPerTokenInUSDT;\n', '        if (finishNow) newState.startRewardDate = now - delayBeforeRewardWithdrawn;\n', '        states.push(newState);\n', '        if (currentState == 0) currentState = 1;\n', '    }\n', '    function changeStartDateState(uint256 _stateNumber, uint256 _startRewardDate) public onlyOwnerOrAdmin {\n', '        states[_stateNumber].startRewardDate = _startRewardDate;    \n', '    }\n', '    \n', '    function editState(uint256 _stateNumber, uint256 _maxTotalVMRInWei, uint256 _maxVMRPerUserInWei, uint256 _rewardPerTokenInUSDT) public onlyOwnerOrAdmin {\n', '        require(_rewardPerTokenInUSDT < 1e16);\n', '        GlobalState storage activeState = states[_stateNumber];\n', '        activeState.maxTotalVMR = _maxTotalVMRInWei;\n', '        activeState.maxVMRPerUser = _maxVMRPerUserInWei;\n', '        activeState.rewardPerToken = _rewardPerTokenInUSDT;\n', '    }\n', '\n', '    function setAdmin(address newAdmin, bool activate) onlyOwner public {\n', '        admins[newAdmin] = activate;\n', '    }\n', '\n', '    function withdraw(uint256 amount)  public onlyOwner {\n', '        owner.transfer(amount);\n', '    }\n', '\n', '    function changeOwnerCandidate(address payable newOwner) public onlyOwner {\n', '        newOwnerCandidate = newOwner;\n', '    }\n', '\n', '    function acceptOwner() public {\n', '        require(msg.sender == newOwnerCandidate);\n', '        owner = newOwnerCandidate;\n', '    }\n', '\n', '    // function for transfer any token from contract\n', '    function transferTokens (address token, address target, uint256 amount) onlyOwner public\n', '    {\n', '        ERC20Token(token).universalTransfer(target, amount);\n', '    }\n', '\n', '\n', '    // 0 - balance ether\n', '    // 1 - balance VMR\n', '    // 2 - balance investor\n', '    // 3 - rewards started (0 if still depo period)\n', '    // 4 - effective user tokens\n', '        // 5 - current epoch (first epoch started after delayBeforeRewardWithdrawn period) - we not need it\n', '    // 6 - current user reward\n', '        // 7 - pending user reward in next epoch - we not need it\n', '    // 8 - max total VMR (when amount reached deposit - period ends)\n', '    // 9 - current total effective VMR for all users\n', '    // 10 - max effective VMR per each user\n', '    // 11 - epoch duration\n', '    // 12 - reward per epoch\n', '    // 13 - total unique users\n', '    function getInfo(address investor, uint256 _state) view external returns (uint256[14] memory ret)\n', '    {\n', '        if (_state == 0) _state = currentState;\n', '        GlobalState storage dataState = states[_state - 1];\n', '        \n', '        ret[0] = address(this).balance;\n', '        ret[1] = TokenVMR.balanceOf(address(this));\n', '        ret[2] = dataState.investors[investor];\n', '        ret[3] = dataState.startRewardDate > 0 ? (dataState.startRewardDate + delayBeforeRewardWithdrawn) : 0;\n', '        ret[4] = min(ret[2], dataState.maxVMRPerUser);\n', '        // ret[5] = startRewardDate > 0 ? (now - dataState.startRewardDate).div(delayBeforeRewardWithdrawn) : 0;\n', '        ret[6] = dataState.rewardPerToken.wmul(ret[4]);\n', '        // ret[7] = rewardPerToken.wmul(ret[4]);\n', '        \n', '        ret[8] = dataState.maxTotalVMR;\n', '        ret[9] = dataState.totalVMR;\n', '        ret[10] = dataState.maxVMRPerUser;\n', '        ret[11] = delayBeforeRewardWithdrawn;\n', '        ret[12] = dataState.rewardPerToken;\n', '        ret[13] = dataState.totalUniqueUsers;\n', '    }\n', '    \n', '    function readState(uint256 _stateNumber) view public returns(uint256[6] memory ret) {\n', '        GlobalState storage activeState = states[_stateNumber];\n', '        ret[0] = activeState.totalVMR; // current amount\n', '        ret[1] = activeState.maxTotalVMR; \n', '        ret[2] = activeState.maxVMRPerUser;\n', '        ret[3] = activeState.rewardPerToken;\n', '        ret[4] = activeState.startRewardDate;\n', '        ret[5] = activeState.totalUniqueUsers;   \n', '    }\n', '\n', '    function addDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {\n', '        internalSetDepositTokens(userAddress, amountTokens, 1); // add mode\n', '    }\n', '\n', '    function setDepositTokens(address[] calldata userAddress, uint256[] calldata amountTokens) onlyAdmin external {\n', '        internalSetDepositTokens(userAddress, amountTokens, 0); // set mode\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) pure internal returns (uint256) {\n', '        return (a < b) ? a : b;\n', '    }\n', '    // mode = 0 (set mode)\n', '    // mode = 1 (add mode)\n', '    function internalSetDepositTokens(address[] memory userAddress, uint256[] memory amountTokens, uint8 mode) internal {\n', '        GlobalState storage activeState = states[currentState - 1];\n', '        uint256 _maxTotalVMR = activeState.maxTotalVMR;\n', '        uint256 _totalVMR = activeState.totalVMR;\n', '        \n', '        require(_totalVMR < _maxTotalVMR || mode == 0);\n', '\n', '        uint256 _maxVMRPerUser = activeState.maxVMRPerUser;\n', '        uint256 len = userAddress.length;\n', '        require(len == amountTokens.length);        \n', '        for(uint16 i = 0;i < len; i++) {\n', '            uint256 currentAmount = activeState.investors[userAddress[i]];\n', '        \n', '            uint256 prevAmount = currentAmount;\n', '            \n', '            // set mode\n', '            if (mode == 0) {\n', '                currentAmount = amountTokens[i];\n', '            } else {\n', '                currentAmount = currentAmount.add(amountTokens[i]);\n', '            }\n', '            \n', '            if (prevAmount == 0 && currentAmount > 0) {\n', '                activeState.totalUniqueUsers++;\n', '            }\n', '            \n', '            uint256 addedPrev = min(prevAmount, _maxVMRPerUser); \n', '            uint256 addedNow = min(currentAmount, _maxVMRPerUser); \n', '            _totalVMR = _totalVMR.sub(addedPrev).add(addedNow);\n', '            \n', '            activeState.investors[userAddress[i]] = currentAmount;\n', '            emit DepositTokens(userAddress[i], prevAmount, currentAmount);\n', '            \n', '            if (_totalVMR >= _maxTotalVMR) {\n', '                if (activeState.startRewardDate == 0) activeState.startRewardDate = now;\n', '                break;\n', '            }\n', '        }\n', '        \n', '        activeState.totalVMR = _totalVMR;\n', '    }\n', '\n', '\n', '    function () payable external\n', '    {\n', '        require(msg.sender == tx.origin); // prevent bots to interact with contract\n', '\n', '        if (msg.sender == owner) return;\n', '        \n', '        uint256 _currentState = currentState;\n', '        uint256 _maxState = _currentState;\n', '        if (_currentState > states.length) _currentState = states.length;\n', '        // \n', '        while (_currentState > 0) {\n', '            GlobalState storage activeState = states[_currentState - 1];\n', '            \n', '            uint256 depositedVMR = activeState.investors[msg.sender];\n', '            if (depositedVMR > 0)\n', '            {\n', '                uint256 _startRewardDate = activeState.startRewardDate;\n', '                // можно раздавать награды в периоде _currentState\n', '                if (_startRewardDate > 0 && now > _startRewardDate + delayBeforeRewardWithdrawn)\n', '                {\n', '                    activeState.investors[msg.sender] = 0;\n', '                    uint256 effectiveTokens = min(depositedVMR, activeState.maxVMRPerUser);\n', '                    \n', '                    uint256 reward = activeState.rewardPerToken.wmul(effectiveTokens);\n', '                    \n', '                    TokenVMR.universalTransfer(msg.sender, depositedVMR); // withdraw body\n', '                    \n', '                    if (reward > 0) {\n', '                        ERC20Token(0xdAC17F958D2ee523a2206206994597C13D831ec7).transfer(msg.sender, reward); // withdraw reward\n', '                    }\n', '                    if (_currentState == _maxState) {\n', '                        currentState++;\n', '                        emit NewPeriodStarted(currentState);\n', '                    }\n', '                }\n', '            }\n', '            _currentState--;\n', '        }\n', '    }\n', '    \n', '}']