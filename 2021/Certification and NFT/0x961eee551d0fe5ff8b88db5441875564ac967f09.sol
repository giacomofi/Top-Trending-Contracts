['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-23\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.6.12 >=0.5.12 >=0.6.12 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.12; */\n', '/* pragma experimental ABIEncoderV2; */\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'library DssExecLib {\n', '    function vat()        public view returns (address) {}\n', '    function cat()        public view returns (address) {}\n', '    function pot()        public view returns (address) {}\n', '    function vow()        public view returns (address) {}\n', '    function end()        public view returns (address) {}\n', '    function reg()        public view returns (address) {}\n', '    function spotter()    public view returns (address) {}\n', '    function flipperMom() public view returns (address) {}\n', '    function flip(bytes32) public view returns (address) {}\n', '    function getChangelogAddress(bytes32) public view returns (address) {}\n', '    function setChangelogAddress(bytes32, address) public {}\n', '    function setChangelogVersion(string memory) public {}\n', '    function authorize(address, address) public {}\n', '    function deauthorize(address, address) public {}\n', '    function canCast(uint40, bool) public pure returns (bool) {}\n', '    function nextCastTime(uint40, uint40, bool) public pure returns (uint256) {}\n', '    function setContract(address, bytes32, address) public {}\n', '    function setContract(address, bytes32, bytes32, address) public {}\n', '    function setIlkStabilityFee(bytes32, uint256, bool) public {}\n', '    function decreaseIlkDebtCeiling(bytes32, uint256, bool) public {}\n', '    function setIlkAutoLineParameters(bytes32, uint256, uint256, uint256) public {}\n', '    function setIlkAutoLineDebtCeiling(bytes32, uint256) public {}\n', '    function addReaderToOSMWhitelist(address, address) public {}\n', '    function removeReaderFromOSMWhitelist(address, address) public {}\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Modifier used to limit execution time when office hours is enabled\n', '    modifier limited {\n', '        require(DssExecLib.canCast(uint40(block.timestamp), officeHours()), "Outside office hours");\n', '        _;\n', '    }\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Returns the next available cast time\n', '    function nextCastTime(uint256 eta) external returns (uint256 castTime) {\n', '        require(eta <= uint40(-1));\n', '        castTime = DssExecLib.nextCastTime(uint40(eta), uint40(block.timestamp), officeHours());\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.12; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '    function nextCastTime(uint256) external view returns (uint256);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        return SpellAction(action).nextCastTime(eta);\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipAbstract.sol\n', '\n', '/// ClipAbstract.sol -- Clip Interface\n', '\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', 'interface ClipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilk() external view returns (bytes32);\n', '    function vat() external view returns (address);\n', '    function dog() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function spotter() external view returns (address);\n', '    function calc() external view returns (address);\n', '    function buf() external view returns (uint256);\n', '    function tail() external view returns (uint256);\n', '    function cusp() external view returns (uint256);\n', '    function chip() external view returns (uint64);\n', '    function tip() external view returns (uint192);\n', '    function chost() external view returns (uint256);\n', '    function kicks() external view returns (uint256);\n', '    function active(uint256) external view returns (uint256);\n', '    function sales(uint256) external view returns (uint256,uint256,uint256,address,uint96,uint256);\n', '    function stopped() external view returns (uint256);\n', '    function file(bytes32,uint256) external;\n', '    function file(bytes32,address) external;\n', '    function kick(uint256,uint256,address,address) external returns (uint256);\n', '    function redo(uint256,address) external;\n', '    function take(uint256,uint256,uint256,address,bytes calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (uint256[] memory);\n', '    function getStatus(uint256) external view returns (bool,uint256,uint256,uint256);\n', '    function upchost() external;\n', '    function yank(uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ClipperMomAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/Clipper-mom/blob/master/src/ClipperMom.sol\n', 'interface ClipperMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function locked(address) external view returns (uint256);\n', '    function tolerance(address) external view returns (uint256);\n', '    function spotter() external view returns (address);\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function setPriceTolerance(address, uint256) external;\n', '    function setBreaker(address, uint256, uint256) external;\n', '    function tripBreaker(address) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/DogAbstract.sol\n', '\n', '/// DogAbstract.sol -- Dog Interface\n', '\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity >=0.5.12; */\n', '\n', 'interface DogAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function ilks(bytes32) external view returns (address,uint256,uint256,uint256);\n', '    function vow() external view returns (address);\n', '    function live() external view returns (uint256);\n', '    function Hole() external view returns (uint256);\n', '    function Dirt() external view returns (uint256);\n', '    function file(bytes32,address) external;\n', '    function file(bytes32,uint256) external;\n', '    function file(bytes32,bytes32,uint256) external;\n', '    function file(bytes32,bytes32,address) external;\n', '    function chop(bytes32) external view returns (uint256);\n', '    function bark(bytes32,address,address) external returns (uint256);\n', '    function digs(bytes32,uint256) external;\n', '    function cage() external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/ESMAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/esm/blob/master/src/ESM.sol\n', 'interface ESMAbstract {\n', '    function gem() external view returns (address);\n', '    function end() external view returns (address);\n', '    function proxy() external view returns (address);\n', '    function min() external view returns (uint256);\n', '    function sum(address) external view returns (address);\n', '    function Sum() external view returns (uint256);\n', '    function revokesGovernanceAccess() external view returns (bool);\n', '    function fire() external;\n', '    function deny(address) external;\n', '    function join(uint256) external;\n', '    function burn() external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/EndAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/end.sol\n', 'interface EndAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function dog() external view returns (address);\n', '    function vow() external view returns (address);\n', '    function pot() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function live() external view returns (uint256);\n', '    function when() external view returns (uint256);\n', '    function wait() external view returns (uint256);\n', '    function debt() external view returns (uint256);\n', '    function tag(bytes32) external view returns (uint256);\n', '    function gap(bytes32) external view returns (uint256);\n', '    function Art(bytes32) external view returns (uint256);\n', '    function fix(bytes32) external view returns (uint256);\n', '    function bag(address) external view returns (uint256);\n', '    function out(bytes32, address) external view returns (uint256);\n', '    function WAD() external view returns (uint256);\n', '    function RAY() external view returns (uint256);\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function cage() external;\n', '    function cage(bytes32) external;\n', '    function skip(bytes32, uint256) external;\n', '    function snip(bytes32, uint256) external;\n', '    function skim(bytes32, address) external;\n', '    function free(bytes32) external;\n', '    function thaw() external;\n', '    function flow(bytes32) external;\n', '    function pack(uint256) external;\n', '    function cash(bytes32, uint256) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/IlkRegistryAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/ilk-registry\n', 'interface IlkRegistryAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function dog() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function ilkData(bytes32) external view returns (\n', '        uint96, address, address, uint8, uint96, address, address, string memory, string memory\n', '    );\n', '    function ilks() external view returns (bytes32[] memory);\n', '    function ilks(uint) external view returns (bytes32);\n', '    function add(address) external;\n', '    function remove(bytes32) external;\n', '    function update(bytes32) external;\n', '    function removeAuth(bytes32) external;\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, string calldata) external;\n', '    function count() external view returns (uint256);\n', '    function list() external view returns (bytes32[] memory);\n', '    function list(uint256, uint256) external view returns (bytes32[] memory);\n', '    function get(uint256) external view returns (bytes32);\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, uint256, address, address, address, address\n', '    );\n', '    function pos(bytes32) external view returns (uint256);\n', '    function class(bytes32) external view returns (uint256);\n', '    function gem(bytes32) external view returns (address);\n', '    function pip(bytes32) external view returns (address);\n', '    function join(bytes32) external view returns (address);\n', '    function xlip(bytes32) external view returns (address);\n', '    function dec(bytes32) external view returns (uint256);\n', '    function symbol(bytes32) external view returns (string memory);\n', '    function name(bytes32) external view returns (string memory);\n', '    function put(bytes32, address, address, uint256, uint256, address, address, string calldata, string calldata) external;\n', '}\n', '\n', '////// lib/dss-interfaces/src/dss/VowAbstract.sol\n', '/* pragma solidity >=0.5.12; */\n', '\n', '// https://github.com/makerdao/dss/blob/master/src/vow.sol\n', 'interface VowAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function vat() external view returns (address);\n', '    function flapper() external view returns (address);\n', '    function flopper() external view returns (address);\n', '    function sin(uint256) external view returns (uint256);\n', '    function Sin() external view returns (uint256);\n', '    function Ash() external view returns (uint256);\n', '    function wait() external view returns (uint256);\n', '    function dump() external view returns (uint256);\n', '    function sump() external view returns (uint256);\n', '    function bump() external view returns (uint256);\n', '    function hump() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, address) external;\n', '    function fess(uint256) external;\n', '    function flog(uint256) external;\n', '    function heal(uint256) external;\n', '    function kiss(uint256) external;\n', '    function flop() external returns (uint256);\n', '    function flap() external returns (uint256);\n', '    function cage() external;\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import {Fileable, ChainlogLike} from "dss-exec-lib/DssExecLib.sol"; */\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '/* import "dss-interfaces/dss/IlkRegistryAbstract.sol"; */\n', '/* import "dss-interfaces/dss/VowAbstract.sol"; */\n', '/* import "dss-interfaces/dss/DogAbstract.sol"; */\n', '/* import "dss-interfaces/dss/ClipAbstract.sol"; */\n', '/* import "dss-interfaces/dss/ClipperMomAbstract.sol"; */\n', '/* import "dss-interfaces/dss/EndAbstract.sol"; */\n', '/* import "dss-interfaces/dss/ESMAbstract.sol"; */\n', '\n', 'interface LerpFabLike_1 {\n', '    function newLerp(bytes32, address, bytes32, uint256, uint256, uint256, uint256) external returns (address);\n', '}\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/57f8d6d1f2a7882879901ca52aaf65c0c4f0a916/governance/votes/Executive%20vote%20-%20April%2023%2C%202021.md -q -O - 2>/dev/null)"\n', '    string public constant description =\n', '        "2021-04-23 MakerDAO Executive Spell | Hash: 0x43eaf55ab4d67c46081871b142f37e85e36c72476dd31b0422e79e9520450d63";\n', '\n', '    // New addresses\n', '    address constant MCD_CLIP_YFI_A      = 0x9daCc11dcD0aa13386D295eAeeBBd38130897E6f;\n', '    address constant MCD_CLIP_CALC_YFI_A = 0x1f206d7916Fd3B1b5B0Ce53d5Cab11FCebc124DA;\n', '    address constant LERP_FAB            = 0x00B416da876fe42dd02813da435Cc030F0d72434;\n', '\n', '    // Units used\n', '    uint256 constant MILLION    = 10**6;\n', '    uint256 constant WAD        = 10**18;\n', '    uint256 constant RAY        = 10**27;\n', '    uint256 constant RAD        = 10**45;\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '    uint256 constant ZERO_PCT           = 1000000000000000000000000000;\n', '    uint256 constant ONE_PCT            = 1000000000315522921573372069;\n', '    uint256 constant TWO_PCT            = 1000000000627937192491029810;\n', '    uint256 constant THREE_PCT          = 1000000000937303470807876289;\n', '    uint256 constant THREE_PT_FIVE_PCT  = 1000000001090862085746321732;\n', '    uint256 constant FOUR_PCT           = 1000000001243680656318820312;\n', '    uint256 constant FOUR_PT_FIVE_PCT   = 1000000001395766281313196627;\n', '    uint256 constant FIVE_PCT           = 1000000001547125957863212448;\n', '    uint256 constant TEN_PCT            = 1000000003022265980097387650;\n', '\n', '    function actions() public override {\n', '        // ------------- Get all the needed addresses from Chainlog -------------\n', '\n', '        address MCD_VAT        = DssExecLib.vat();\n', '        address MCD_CAT        = DssExecLib.cat();\n', '        address MCD_DOG        = DssExecLib.getChangelogAddress("MCD_DOG");\n', '        address MCD_VOW        = DssExecLib.vow();\n', '        address MCD_SPOT       = DssExecLib.spotter();\n', '        address MCD_END        = DssExecLib.end();\n', '        address MCD_ESM        = DssExecLib.getChangelogAddress("MCD_ESM");\n', '        address FLIPPER_MOM    = DssExecLib.flipperMom();\n', '        address CLIPPER_MOM    = DssExecLib.getChangelogAddress("CLIPPER_MOM");\n', '        address ILK_REGISTRY   = DssExecLib.getChangelogAddress("ILK_REGISTRY");\n', '        address PIP_YFI        = DssExecLib.getChangelogAddress("PIP_YFI");\n', '        address MCD_FLIP_YFI_A = DssExecLib.getChangelogAddress("MCD_FLIP_YFI_A");\n', '        address CHANGELOG      = DssExecLib.getChangelogAddress("CHANGELOG");\n', '\n', '        // ------------- Increase the System Surplus Buffer And Add Burn Percentage -------------\n', '\n', '        address lerp = LerpFabLike_1(LERP_FAB).newLerp("20210423_VOW_HUMP1", MCD_VOW, "hump", 1619773200, 30 * MILLION * RAD, 60 * MILLION * RAD, 99 days);\n', '        VowAbstract(MCD_VOW).rely(lerp);\n', '        DssExecLib.setChangelogAddress("LERP_FAB", LERP_FAB);\n', '\n', '        // ------------- Add YFI-A to Liquidations 2.0 Framework -------------\n', '\n', '        // Check constructor values of Clipper\n', '        require(ClipAbstract(MCD_CLIP_YFI_A).vat() == MCD_VAT, "DssSpell/clip-wrong-vat");\n', '        require(ClipAbstract(MCD_CLIP_YFI_A).spotter() == MCD_SPOT, "DssSpell/clip-wrong-spotter");\n', '        require(ClipAbstract(MCD_CLIP_YFI_A).dog() == MCD_DOG, "DssSpell/clip-wrong-dog");\n', '        require(ClipAbstract(MCD_CLIP_YFI_A).ilk() == "YFI-A", "DssSpell/clip-wrong-ilk");\n', '\n', '        // Set CLIP for YFI-A in the DOG\n', '        DssExecLib.setContract(MCD_DOG, "YFI-A", "clip", MCD_CLIP_YFI_A);\n', '\n', '        // Set VOW in the YFI-A CLIP\n', '        DssExecLib.setContract(MCD_CLIP_YFI_A, "vow", MCD_VOW);\n', '\n', '        // Set CALC in the YFI-A CLIP\n', '        DssExecLib.setContract(MCD_CLIP_YFI_A, "calc", MCD_CLIP_CALC_YFI_A);\n', '\n', '        // Authorize CLIP can access to VAT\n', '        DssExecLib.authorize(MCD_VAT, MCD_CLIP_YFI_A);\n', '\n', '        // Authorize CLIP can access to DOG\n', '        DssExecLib.authorize(MCD_DOG, MCD_CLIP_YFI_A);\n', '\n', '        // Authorize DOG can kick auctions on CLIP\n', '        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_DOG);\n', '\n', '        // Authorize the new END to access the YFI CLIP\n', '        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_END);\n', '\n', '        // Authorize CLIPPERMOM can set the stopped flag in CLIP\n', '        DssExecLib.authorize(MCD_CLIP_YFI_A, CLIPPER_MOM);\n', '\n', '        // Authorize new ESM to execute in YFI-A Clipper\n', '        DssExecLib.authorize(MCD_CLIP_YFI_A, MCD_ESM);\n', '\n', '        // Whitelist CLIP in the YFI osm\n', '        DssExecLib.addReaderToOSMWhitelist(PIP_YFI, MCD_CLIP_YFI_A);\n', '\n', '        // Whitelist CLIPPER_MOM in the YFI osm\n', '        DssExecLib.addReaderToOSMWhitelist(PIP_YFI, CLIPPER_MOM);\n', '\n', '        // No more auctions kicked via the CAT:\n', '        DssExecLib.deauthorize(MCD_FLIP_YFI_A, MCD_CAT);\n', '\n', '        // No more circuit breaker for the FLIP in YFI-A:\n', '        DssExecLib.deauthorize(MCD_FLIP_YFI_A, FLIPPER_MOM);\n', '\n', '        Fileable(MCD_DOG).file("YFI-A", "hole", 5 * MILLION * RAD);\n', '        Fileable(MCD_DOG).file("YFI-A", "chop", 113 * WAD / 100);\n', '        Fileable(MCD_CLIP_YFI_A).file("buf", 130 * RAY / 100);\n', '        Fileable(MCD_CLIP_YFI_A).file("tail", 140 minutes);\n', '        Fileable(MCD_CLIP_YFI_A).file("cusp", 40 * RAY / 100);\n', '        Fileable(MCD_CLIP_YFI_A).file("chip", 1 * WAD / 1000);\n', '        Fileable(MCD_CLIP_YFI_A).file("tip", 0);\n', '        Fileable(MCD_CLIP_CALC_YFI_A).file("cut", 99 * RAY / 100); // 1% cut\n', '        Fileable(MCD_CLIP_CALC_YFI_A).file("step", 90 seconds);\n', '\n', '        //  Tolerance currently set to 50%.\n', '        //   n.b. 600000000000000000000000000 == 40% acceptable drop\n', '        ClipperMomAbstract(CLIPPER_MOM).setPriceTolerance(MCD_CLIP_YFI_A, 50 * RAY / 100);\n', '\n', '        ClipAbstract(MCD_CLIP_YFI_A).upchost();\n', '\n', '        // Replace flip to clip in the ilk registry\n', '        DssExecLib.setContract(ILK_REGISTRY, "YFI-A", "xlip", MCD_CLIP_YFI_A);\n', '        Fileable(ILK_REGISTRY).file("YFI-A", "class", 1);\n', '\n', '        DssExecLib.setChangelogAddress("MCD_CLIP_YFI_A", MCD_CLIP_YFI_A);\n', '        DssExecLib.setChangelogAddress("MCD_CLIP_CALC_YFI_A", MCD_CLIP_CALC_YFI_A);\n', '        ChainlogLike(CHANGELOG).removeAddress("MCD_FLIP_YFI_A");\n', '\n', '        // ------------- Stability fees -------------\n', '        DssExecLib.setIlkStabilityFee("LINK-A", FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("ETH-B", TEN_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("ZRX-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("LRC-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIETH-A", THREE_PT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2USDCETH-A", FOUR_PT_FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("AAVE-A", THREE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("BAT-A", FIVE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("MANA-A", THREE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("BAL-A", TWO_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIUSDC-A", ONE_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2LINKETH-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2WBTCDAI-A", ZERO_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2AAVEETH-A", FOUR_PCT, true);\n', '        DssExecLib.setIlkStabilityFee("UNIV2DAIUSDT-A", THREE_PCT, true);\n', '\n', '        // ------------- Regular debt ceilings -------------\n', '\n', '        DssExecLib.decreaseIlkDebtCeiling("USDT-A", 25 * MILLION / 10, true);\n', '\n', '        // ------------- Auto line max ceiling changes -------------\n', '\n', '        DssExecLib.setIlkAutoLineDebtCeiling("YFI-A", 90 * MILLION);\n', '        // DssExecLib.setIlkAutoLineDebtCeiling("AAVE-A", 50 * MILLION);\n', '        DssExecLib.setIlkAutoLineDebtCeiling("BAT-A", 7 * MILLION);\n', '        // DssExecLib.setIlkAutoLineDebtCeiling("RENBTC-A", 10 * MILLION);\n', '        // DssExecLib.setIlkAutoLineDebtCeiling("MANA-A", 5 * MILLION);\n', '        // DssExecLib.setIlkAutoLineDebtCeiling("BAL-A", 30 * MILLION);\n', '        DssExecLib.setIlkAutoLineDebtCeiling("UNIV2DAIETH-A", 50 * MILLION);\n', '        // DssExecLib.setIlkAutoLineDebtCeiling("LRC-A", 5 * MILLION);\n', '\n', '        // ------------- Auto line gap changes -------------\n', '\n', '        DssExecLib.setIlkAutoLineParameters("AAVE-A", 50 * MILLION, 5 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("RENBTC-A", 10 * MILLION, 1 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("MANA-A", 5 * MILLION, 1 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("BAL-A", 30 * MILLION, 3 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("LRC-A", 5 * MILLION, 1 * MILLION, 12 hours);\n', '\n', '        // ------------- Auto line new ilks -------------\n', '\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2WBTCETH-A", 20 * MILLION, 3 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2UNIETH-A", 20 * MILLION, 3 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2LINKETH-A", 20 * MILLION, 2 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2AAVEETH-A", 20 * MILLION, 2 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2ETHUSDT-A", 10 * MILLION, 2 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2DAIUSDT-A", 10 * MILLION, 2 * MILLION, 12 hours);\n', '        DssExecLib.setIlkAutoLineParameters("UNIV2WBTCDAI-A", 20 * MILLION, 3 * MILLION, 12 hours);\n', '\n', '        // ------------- Chainlog version -------------\n', '\n', '        DssExecLib.setChangelogVersion("1.4.0");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 30 days, address(action_)) public {}\n', '}']