['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', 'pragma solidity ^0.4.19;\n', '\n', 'contract Plethori {\n', '    // @dev enter the value for each data required\n', '    // Token details would need to be inputed in the required fields makred "*"\n', '    // Note: only strings need the double quotation, uint details should be entered without the quotation marks\n', '    // Once the values have been set and contract deloyed, they cannot be changed\n', '    //Token totalSupply must have an additional 18 zeros because solidity does not make provision for decimals in code\n', '\n', '\n', '    // Token details\n', '    string public constant name = "Plethori";\n', '    string public constant symbol = "PLE";\n', '    uint8 public constant decimals = 18;  \n', '    uint256 public totalSupply = 100000000000000000000000000;\n', '    address public owner;\n', '\n', '\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n', '    event Transfer(address indexed from, address indexed to, uint tokens);\n', '\n', '\n', '    mapping(address => uint256) balances;\n', '    mapping(address => mapping (address => uint256)) allowed;\n', '    \n', '\n', '    using SafeMath for uint256;\n', '\n', '\n', '    // The constructor sets the admin/owner which manages the tokens\n', '   constructor() public {  \n', '\tbalances[msg.sender] = totalSupply;\n', '    }  \n', '\n', '    \n', '    //Restricts select functions to onlyOwner\n', '    modifier onlyOwner(){\n', '    require(owner == msg.sender, "You are not the owner");\n', '        _;\n', '    }\n', '\n', '    // Functions\n', '    function totalSupply() external view returns (uint256) {\n', '\treturn totalSupply;\n', '    }\n', '\n', '    // *balanceOf reads the balance of the specified address\n', '    function balanceOf(address tokenOwner) external view returns (uint) {\n', '        return balances[tokenOwner];\n', '    }\n', '\n', '\n', '    // allows a delegated smartcontract spend a specified amount of tokens on behalf of admin/owner\n', '    function transfer(address receiver, uint numTokens) external returns (bool) {\n', '        require(numTokens <= balances[msg.sender]);\n', '        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n', '        balances[receiver] = balances[receiver].add(numTokens);\n', '        emit Transfer(msg.sender, receiver, numTokens);\n', '        return true;\n', '    }\n', '\n', '\n', '    // approves a delegated smartcontract to spend a specified amount of tokens on behalf of admin/owner\n', '    function approve(address delegate, uint numTokens) external returns (bool) {\n', '        allowed[msg.sender][delegate] = numTokens;\n', '        emit Approval(msg.sender, delegate, numTokens);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address delegate) external view returns (uint) {\n', '        return allowed[_owner][delegate];\n', '    }\n', '\n', '\n', '    // allows a delegated smartcontract spend a specified amount of tokens on behalf of admin/owner\n', '    function transferFrom(address _owner, address buyer, uint numTokens) external returns (bool) {\n', '        require(numTokens <= balances[_owner]);    \n', '        require(numTokens <= allowed[_owner][msg.sender]);\n', '    \n', '        balances[_owner] = balances[owner].sub(numTokens);\n', '        allowed[_owner][msg.sender] = allowed[_owner][msg.sender].sub(numTokens);\n', '        balances[buyer] = balances[buyer].add(numTokens);\n', '        emit Transfer(_owner, buyer, numTokens);\n', '        return true;\n', '    }\n', '    \n', '    }\n', '    //SafeMath corrects overflow\n', '    library SafeMath { \n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      assert(b <= a);\n', '      return a - b;\n', '    }\n', '    \n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '      uint256 c = a + b;\n', '      assert(c >= a);\n', '      return c;\n', '    }\n', '}']