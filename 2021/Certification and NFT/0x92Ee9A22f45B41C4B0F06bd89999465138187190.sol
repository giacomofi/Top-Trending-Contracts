['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.5.3;\n', '\n', '/// @title Proxy - GSVE  proxy contract allows to execute all transactions applying the code of a master contract and then burning a gas token.\n', '/// @author Stefan George - <[email\xa0protected]>\n', '/// @author Richard Meissner - <[email\xa0protected]>\n', '/// @author Gas Save Protocol - <GasSave.org>\n', '\n', 'interface IGasToken {\n', '    /**\n', '     * @dev return number of tokens freed up.\n', '     */\n', '    function freeFromUpTo(address from, uint256 value) external returns (uint256); \n', '}\n', '\n', '/**\n', '* @dev interface to allow gsve to be burned for upgrades\n', '*/\n', 'interface IBeacon {\n', '    function getAddressGastoken(address safe) external view returns(address);\n', '    function getAddressGasTokenSaving(address safe) external view returns(uint256);\n', '}\n', '\n', 'contract Proxy {\n', '\n', '    // masterCopy always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n', '    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n', '    address internal masterCopy;\n', '\n', '    /// @dev Constructor function sets address of master copy contract.\n', '    /// @param _masterCopy Master copy address.\n', '    constructor(address _masterCopy)\n', '        public\n', '    {\n', '        require(_masterCopy != address(0), "Invalid master copy address provided");\n', '        masterCopy = _masterCopy;\n', '    }\n', '\n', '    /// @dev Fallback function forwards all transactions and returns all received return data.\n', '    function () \n', '        external\n', '        payable\n', '    {\n', '        uint256 gasStart = gasleft();\n', '        uint256 returnDataLength;\n', '        bool success;\n', '        bytes memory returndata;\n', '\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            let masterCopy := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n', '            // 0xa619486e == keccak("masterCopy()"). The value is right padded to 32-bytes with 0s\n', '            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n', '                mstore(0, masterCopy)\n', '                return(0, 0x20)\n', '            }\n', '\n', '            //set returndata to the location of the free data pointer\n', '            returndata := mload(0x40)\n', '            calldatacopy(0, 0, calldatasize())\n', '            success := delegatecall(gas, masterCopy, 0, calldatasize(), 0, 0)\n', '\n', '            //copy the return data and then MOVE the free data pointer to avoid overwriting. Without this movement, the operation reverts.\n', '            //ptr movement amount is probably overkill and wastes a few hundred gas for no reason, but better to be safe!\n', '            returndatacopy(returndata, 0, returndatasize())\n', '            returnDataLength:= returndatasize()\n', '            mstore(0x40, add(0x40, add(0x200, mul(returndatasize(), 0x20)))) \n', '        }\n', '\n', "        //work out how much gas we've spent so far\n", '        uint256 gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '        \n', "        //if the gas amount is low, then don't burn anything and finish the proxy operation\n", '        if(gasSpent < 48000){\n', '            assembly{\n', '                if eq(success, 0) { revert(returndata, returnDataLength) }\n', '                return(returndata, returnDataLength)\n', '            }\n', '        }\n', '        //if the operation has been expensive, then look at burning gas tokens\n', '        else{\n', "            //query the beacon to see what gas token the user want's to burn\n", '            IBeacon beacon = IBeacon(0x1370CAf8181771871cb493DFDC312cdeD17a2de8);\n', '            address gsveBeaconGastoken = beacon.getAddressGastoken(address(this));\n', '            if(gsveBeaconGastoken == address(0)){\n', '                assembly{\n', '                    if eq(success, 0) { revert(returndata, returnDataLength) }\n', '                    return(returndata, returnDataLength)\n', '                }\n', '            }\n', '            else{\n', '                uint256 gsveBeaconAmount = beacon.getAddressGasTokenSaving(gsveBeaconGastoken);\n', '                gasSpent = 21000 + gasStart - gasleft() + 16 * msg.data.length;\n', '                IGasToken(gsveBeaconGastoken).freeFromUpTo(msg.sender,  (gasSpent + 16000) / gsveBeaconAmount);\n', '                assembly{\n', '                    if eq(success, 0) { revert(returndata, returnDataLength) }\n', '                    return(returndata, returnDataLength)\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.5.3;\n', '\n', 'import "./Proxy.sol";\n', '\n', 'interface IProxyCreationCallback {\n', '    function proxyCreated(Proxy proxy, address _mastercopy, bytes calldata initializer, uint256 saltNonce) external;\n', '}\n', '\n', '/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n', '/// @author Richard Meissner - <[email\xa0protected]>\n', '/// @author Gas Save - <GasSave.org>\n', 'interface IProxy {\n', '    function masterCopy() external view returns (address);\n', '}\n', '\n', '/**\n', '* @dev interface to allow gsve to be burned for upgrades\n', '*/\n', 'interface IGSVEToken {\n', '    function burnFrom(address account, uint256 amount) external;\n', '}\n', '\n', '/**\n', '* @dev interface to allow gsve to be burned for upgrades\n', '*/\n', 'interface IGSVEBeacon {\n', '    function initSafe(address owner, address safe) external;\n', '}\n', '\n', '/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '/// @author Stefan George - <[email\xa0protected]>\n', '/// @author Gas Save - <GasSave.org>\n', 'contract ProxyFactory {\n', '    address public GSVEToken;\n', '    address public GSVEBeacon;\n', '    event ProxyCreation(Proxy proxy);\n', '    \n', '    /// @dev sets the addresses of the GSVE token AND GSVE Beacon. Used in the creation process\n', '    constructor (address _GSVEToken, address _GSVEBeacon) public {\n', '        GSVEToken = _GSVEToken;\n', '        GSVEBeacon = _GSVEBeacon;\n', '    }\n', '    \n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param masterCopy Address of master copy.\n', '    /// @param data Payload for message call sent to new proxy contract.\n', '    function createProxy(address masterCopy, bytes memory data)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        proxy = new Proxy(masterCopy);\n', '        if (data.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) { revert(0, 0) }\n', '            }\n', '        emit ProxyCreation(proxy);\n', '    }\n', '\n', '    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n', '    function proxyRuntimeCode() public pure returns (bytes memory) {\n', '        return type(Proxy).runtimeCode;\n', '    }\n', '\n', '    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n', '    function proxyCreationCode() public pure returns (bytes memory) {\n', '        return type(Proxy).creationCode;\n', '    }\n', '\n', "    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\n", '    ///      This method is only meant as an utility to be called from other methods\n', '    /// @param _mastercopy Address of master copy.\n', '    /// @param initializer Payload for message call sent to new proxy contract.\n', '    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n', '    function deployProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\n', '        internal\n', '        returns (Proxy proxy)\n', '    {\n', '        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n', '        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n', '        bytes memory deploymentData = abi.encodePacked(type(Proxy).creationCode, uint256(_mastercopy));\n', '        // solium-disable-next-line security/no-inline-assembly\n', '        assembly {\n', '            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n', '        }\n', '        require(address(proxy) != address(0), "Create2 call failed");\n', '    }\n', '\n', '    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n', '    /// @param _mastercopy Address of master copy.\n', '    /// @param initializer Payload for message call sent to new proxy contract.\n', '    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n', '    /// BURNS GSVE IN THE PROCESS OF CREATING THE PROXY AND ADDS THE CREATED SAFE TO THE BEACON\n', '    function createProxyWithNonce(address _mastercopy, bytes memory initializer, uint256 saltNonce)\n', '        public\n', '        returns (Proxy proxy)\n', '    {\n', '        IGSVEToken(GSVEToken).burnFrom(msg.sender, 50*10**18);\n', '        proxy = deployProxyWithNonce(_mastercopy, initializer, saltNonce);\n', '        if (initializer.length > 0)\n', '            // solium-disable-next-line security/no-inline-assembly\n', '            assembly {\n', '                if eq(call(gas, proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) { revert(0,0) }\n', '            }\n', '\n', '        IGSVEBeacon(GSVEBeacon).initSafe(msg.sender, address(proxy));\n', '        emit ProxyCreation(proxy);\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']