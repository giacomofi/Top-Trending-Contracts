['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '\n', 'pragma solidity 0.6.7;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    function decimals() external view returns (uint8);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function mint(address account, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '\n', 'interface PauseLike {\n', '    function delay() external returns (uint);\n', '    function exec(address, bytes32, bytes calldata, uint256) external;\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '}\n', '\n', 'interface IlkRegistryAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function spot() external view returns (address);\n', '    function add(address) external;\n', '}\n', '\n', 'interface ChainlogAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function keys() external view returns (bytes32[] memory);\n', '    function version() external view returns (string memory);\n', '    function ipfs() external view returns (string memory);\n', '    function setVersion(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setAddress(bytes32,address) external;\n', '    function removeAddress(bytes32) external;\n', '    function count() external view returns (uint256);\n', '    function get(uint256) external view returns (bytes32,address);\n', '    function list() external view returns (bytes32[] memory);\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface GemJoinAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function vat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function gem() external view returns (address);\n', '    function dec() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function cage() external;\n', '    function join(address, uint256) external;\n', '    function exit(address, uint256) external;\n', '}\n', '\n', 'interface FlipAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address usr) external;\n', '    function deny(address usr) external;\n', '    function bids(uint256) external view returns (uint256, uint256, address, uint48, uint48, address, address, uint256);\n', '    function vat() external view returns (address);\n', '    function cat() external view returns (address);\n', '    function ilk() external view returns (bytes32);\n', '    function beg() external view returns (uint256);\n', '    function ttl() external view returns (uint48);\n', '    function tau() external view returns (uint48);\n', '    function kicks() external view returns (uint256);\n', '    function file(bytes32, uint256) external;\n', '    function kick(address, address, uint256, uint256, uint256) external returns (uint256);\n', '    function tick(uint256) external;\n', '    function tend(uint256, uint256, uint256) external;\n', '    function dent(uint256, uint256, uint256) external;\n', '    function deal(uint256) external;\n', '    function yank(uint256) external;\n', '}\n', '\n', 'interface OsmMomAbstract {\n', '    function owner() external view returns (address);\n', '    function authority() external view returns (address);\n', '    function osms(bytes32) external view returns (address);\n', '    function setOsm(bytes32, address) external;\n', '    function setOwner(address) external;\n', '    function setAuthority(address) external;\n', '    function stop(bytes32) external;\n', '}\n', '\n', 'interface VatAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function urns(bytes32, address) external view returns (uint256, uint256);\n', '    function gem(bytes32, address) external view returns (uint256);\n', '    function dai(address) external view returns (uint256);\n', '    function vice() external view returns (uint256);\n', '    function Line() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function init(bytes32) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '}\n', '\n', '\n', 'interface ConfigLike {\n', '    function init(bytes32) external;\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, bytes32, uint) external;\n', '    function rely(address) external;\n', '}\n', '\n', '\n', 'interface SpotAbstract {\n', '    function wards(address) external view returns (uint256);\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '    function ilks(bytes32) external view returns (address, uint256);\n', '    function vat() external view returns (address);\n', '    function par() external view returns (uint256);\n', '    function live() external view returns (uint256);\n', '    function file(bytes32, bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function poke(bytes32) external;\n', '    function cage() external;\n', '}\n', '\n', 'library SharedStructs {\n', '\n', '    // decimals & precision\n', '    uint256 constant THOUSAND = 10 ** 3;\n', '    uint256 constant MILLION  = 10 ** 6;\n', '    uint256 constant WAD      = 10 ** 18;\n', '    uint256 constant RAY      = 10 ** 27;\n', '    uint256 constant RAD      = 10 ** 45;\n', '\n', '    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\n', '\n', '\n', '    struct IlkNetSpecific {   \n', '        address gem;\n', '        address join;\n', '        address flip;\n', '        address pip;\n', '        ChainlogAbstract CHANGELOG;\n', '    }\n', '\n', '    struct IlkDesc {   \n', '        bytes32 ilk;\n', '        bytes32 joinName;\n', '        bytes32 flipName;\n', '        bytes32 pipName;\n', '        bytes32 gemName;\n', '        uint256 line;\n', '        uint256 dust;\n', '        uint256 dunk;\n', '        uint256 chop;\n', '        uint256 duty;\n', '        uint256 beg;\n', '        uint256 ttl;\n', '        uint256 tau;\n', '        uint256 mat;\n', '    }\n', '}\n', '\n', 'contract SpellAction {\n', '\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '    uint256 constant ZERO_PERCENT_RATE            = 1000000000000000000000000000;\n', '    uint256 constant ONE_PERCENT_RATE             = 1000000000315522921573372069;\n', '    uint256 constant TWO_PERCENT_RATE             = 1000000000627937192491029810;\n', '    uint256 constant TWO_POINT_FIVE_PERCENT_RATE  = 1000000000782997609082909351;\n', '    uint256 constant THREE_PERCENT_RATE           = 1000000000937303470807876289;\n', '    uint256 constant FOUR_POINT_FIVE_PERCENT_RATE = 1000000001395766281313196627;\n', '    uint256 constant FIVE_PERCENT_RATE            = 1000000001547125957863212448;\n', '    uint256 constant SIX_PERCENT_RATE             = 1000000001847694957439350562;\n', '    uint256 constant EIGHT_PERCENT_RATE           = 1000000002440418608258400030;\n', '    uint256 constant NINE_PERCENT_RATE            = 1000000002732676825177582095;\n', '    uint256 constant TEN_PERCENT_RATE             = 1000000003022265980097387650;\n', '\n', '\n', '\n', '    function execute(SharedStructs.IlkDesc memory desc, \n', '                     SharedStructs.IlkNetSpecific memory net) internal {\n', '\n', '        ChainlogAbstract CHANGELOG = net.CHANGELOG;\n', '\n', '        address MCD_VAT      = CHANGELOG.getAddress("MCD_VAT");\n', '        address MCD_CAT      = CHANGELOG.getAddress("MCD_CAT");\n', '        address MCD_JUG      = CHANGELOG.getAddress("MCD_JUG");\n', '        address MCD_SPOT     = CHANGELOG.getAddress("MCD_SPOT");\n', '        address MCD_END      = CHANGELOG.getAddress("MCD_END");\n', '        address FLIPPER_MOM  = CHANGELOG.getAddress("FLIPPER_MOM");\n', '        address OSM_MOM      = CHANGELOG.getAddress("OSM_MOM"); // Only if PIP_TOKEN = Osm\n', '        address ILK_REGISTRY = CHANGELOG.getAddress("ILK_REGISTRY");\n', '\n', '\n', '        // Set the global debt ceiling\n', '        // +  100 M for gem-A\n', '        VatAbstract(MCD_VAT).file("Line", VatAbstract(MCD_VAT).Line() + desc.line * SharedStructs.MILLION * SharedStructs.RAD);\n', '\n', '        // Sanity checks\n', '        require(GemJoinAbstract(net.join).vat() == MCD_VAT, "join-vat-not-match");\n', '        require(GemJoinAbstract(net.join).ilk() == desc.ilk, "join-ilk-not-match");\n', '        require(GemJoinAbstract(net.join).gem() == net.gem, "join-gem-not-match");\n', '        require(GemJoinAbstract(net.join).dec() == IERC20(net.gem).decimals(), "join-dec-not-match");\n', '        require(FlipAbstract(net.flip).vat() == MCD_VAT, "flip-vat-not-match");\n', '        require(FlipAbstract(net.flip).cat() == MCD_CAT, "flip-cat-not-match");\n', '        require(FlipAbstract(net.flip).ilk() == desc.ilk, "flip-ilk-not-match");\n', '\n', '        // Set the gem PIP in the Spotter\n', '        SpotAbstract(MCD_SPOT).file(desc.ilk, "pip", net.pip);\n', '\n', '        // Set the gem-A Flipper in the Cat\n', '        ConfigLike(MCD_CAT).file(desc.ilk, "flip", net.flip);\n', '\n', '        // Init gem-A ilk in Vat & Jug\n', '        VatAbstract(MCD_VAT).init(desc.ilk);\n', '        ConfigLike(MCD_JUG).init(desc.ilk);\n', '\n', '        // Allow gem-A Join to modify Vat registry\n', '        VatAbstract(MCD_VAT).rely(net.join);\n', '        // Allow the gem-A Flipper to reduce the Cat litterbox on deal()\n', '        ConfigLike(MCD_CAT).rely(net.flip);\n', '        // Allow Cat to kick auctions in gem-A Flipper\n', '        FlipAbstract(net.flip).rely(MCD_CAT);\n', '        // Allow End to yank auctions in gem-A Flipper\n', '        FlipAbstract(net.flip).rely(MCD_END);\n', '        // Allow FlipperMom to access to the gem-A Flipper\n', '        FlipAbstract(net.flip).rely(FLIPPER_MOM);\n', '        // Disallow Cat to kick auctions in gem-A Flipper\n', '        // !!!!!!!! Only for certain collaterals that do not trigger liquidations like USDC-A)\n', '        //FlipperMomAbstract(FLIPPER_MOM).deny(net.flip);\n', '\n', '        // Set gem Osm in the OsmMom for new ilk\n', '        // !!!!!!!! Only if net.pip = Osm\n', '        OsmMomAbstract(OSM_MOM).setOsm(desc.ilk, net.pip);\n', '\n', '        // Set the gem-A debt ceiling\n', '        VatAbstract(MCD_VAT).file(desc.ilk, "line", desc.line * SharedStructs.MILLION * SharedStructs.RAD);\n', '        // Set the gem-A dust\n', '        VatAbstract(MCD_VAT).file(desc.ilk, "dust", desc.dust * SharedStructs.RAD);\n', '        // Set the Lot size\n', '        ConfigLike(MCD_CAT).file(desc.ilk, "dunk", desc.dunk * SharedStructs.RAD);\n', '        // Set the gem-A liquidation penalty (e.g. 13% => X = 113)\n', '        ConfigLike(MCD_CAT).file(desc.ilk, "chop", desc.chop);\n', '        // Set the gem-A stability fee (e.g. 1% = 1000000000315522921573372069)\n', '        ConfigLike(MCD_JUG).file(desc.ilk, "duty", desc.duty);\n', '        // Set the gem-A percentage between bids (e.g. 3% => X = 103)\n', '        FlipAbstract(net.flip).file("beg", desc.beg);\n', '        // Set the gem-A time max time between bids\n', '        FlipAbstract(net.flip).file("ttl", desc.ttl);\n', '        // Set the gem-A max auction duration to\n', '        FlipAbstract(net.flip).file("tau", desc.tau);\n', '        // Set the gem-A min collateralization ratio (e.g. 150% => X = 150)\n', '        SpotAbstract(MCD_SPOT).file(desc.ilk, "mat", desc.mat);\n', '\n', '        // Update gem-A spot value in Vat\n', '        SpotAbstract(MCD_SPOT).poke(desc.ilk);\n', '\n', '        // Add new ilk to the IlkRegistry\n', '        IlkRegistryAbstract(ILK_REGISTRY).add(net.join);\n', '\n', '        // Update the changelog\n', '        CHANGELOG.setAddress(desc.gemName, net.gem);\n', '        CHANGELOG.setAddress(desc.joinName, net.join);\n', '        CHANGELOG.setAddress(desc.flipName, net.flip);\n', '        CHANGELOG.setAddress(desc.pipName, net.pip);\n', '        // Bump version\n', '    }\n', '}\n', '\n', '\n', 'contract IlkCurveCfg {\n', '\n', '    function getIlkCfg() internal pure returns (SharedStructs.IlkDesc memory desc) {\n', '\n', '        desc.ilk = "CRV_3POOL-A";\n', '        desc.joinName = "MCD_JOIN_CRV_3POOL_A";\n', '        desc.flipName = "MCD_FLIP_CRV_3POOL_A";\n', '        desc.pipName = "PIP_CRV_3POOL";\n', '        desc.gemName = "CRV_3POOL";\n', '        desc.line = 150;\n', '        desc.dust = 100;\n', '        desc.dunk = 50000;\n', '        desc.chop = 113 * SharedStructs.WAD / 100;\n', '        desc.duty = SharedStructs.ZERO_PERCENT_RATE;\n', '        desc.beg = 101 * SharedStructs.WAD / 100;\n', '        desc.ttl = 21600;\n', '        desc.tau = 21600;\n', '        desc.mat = 110 * SharedStructs.RAY / 100;\n', '    }\n', '}\n', '\n', 'contract SpellActionMainnet is SpellAction, IlkCurveCfg {\n', '    function execute() external {\n', '\n', '        SharedStructs.IlkNetSpecific memory net;\n', '\n', '        net.gem  = 0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490;\n', '        net.join = 0xDcd8cad273373DD52B23194EC9B4a207EfEC99CD;\n', '        net.flip = 0xDA03DAD7D4B012214F353E15F5656c4dFF35ABC2;\n', '        net.pip = 0x7BBa7664baaec1DB10b16E6cf712007BEA644dc0;\n', '        net.CHANGELOG = ChainlogAbstract(0xE0fb0a1B0F1db37D803bad3F6d55158291Bb7bAc);\n', '\n', '        execute(getIlkCfg(), net);\n', '\n', '        net.CHANGELOG.setVersion("1.1.0");\n', '    }\n', '}\n', '\n', 'contract SpellActionKovan is SpellAction, IlkCurveCfg {\n', '    function execute() external {\n', '\n', '        SharedStructs.IlkNetSpecific memory net;\n', '\n', '        net.gem  = 0x168a6114396aAB83Ba14b8Bd8E5B4D7CB3c2E82e;\n', '        net.join = 0xcf68FB166293cDE638FA55451FdCC6F9E569fe15;\n', '        net.flip = 0x0Fe624186e46EF16bc3c483eA0790d2694DD5Acc;\n', '        net.pip = 0x0F5ad35285A9D4e27E932777494a77461A579Bd6;\n', '        net.CHANGELOG = ChainlogAbstract(0x873396d69b017e3Ed499406892E1cd2f3EE1CFA7);\n', '\n', '\n', '        execute(getIlkCfg(), net);\n', '\n', '        net.CHANGELOG.setVersion("1.2.0");\n', '    }\n', '}\n', '\n', '\n', 'contract ActionSpell {\n', '    bool      public done;\n', '    address   public pause;\n', '    uint256   public expiration;\n', '\n', '\n', '    address   public action;\n', '    bytes32   public tag;\n', '    uint256   public eta;\n', '    bytes     public sig;\n', '\n', '\n', '\n', '\n', '    function setup(address deployer) internal {\n', '        expiration = block.timestamp + 30 days;\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag; assembly { _tag := extcodehash(deployer) }\n', '        action = deployer;\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() external {\n', '        require(block.timestamp <= expiration, "DSSSpell/spell-has-expired");\n', '        require(eta == 0, "spell-already-scheduled");\n', '        eta = now + PauseLike(pause).delay();\n', '        PauseLike(pause).plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        PauseLike(pause).exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '\n', 'contract ActionSpellMainnet is ActionSpell {\n', '    constructor() public {\n', '        pause = 0x146921eF7A94C50b96cb53Eb9C2CA4EB25D4Bfa8;\n', '        setup(address(new SpellActionMainnet()));\n', '    }\n', '}\n', '\n', '\n', 'contract ActionSpellKovan is ActionSpell {\n', '    constructor() public {\n', '        pause = 0x95D6fBdD8bE0FfBEB62b3B3eB2A7dFD19cFae8F5;\n', '        setup(address(new SpellActionKovan()));\n', '    }\n', '}']