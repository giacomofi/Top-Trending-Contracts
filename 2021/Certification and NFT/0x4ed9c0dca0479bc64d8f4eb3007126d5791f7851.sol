['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-14\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '/// OracleRelayer.sol\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'abstract contract SAFEEngineLike {\n', '    function modifyParameters(bytes32, bytes32, uint256) virtual external;\n', '}\n', '\n', 'abstract contract OracleLike {\n', '    function getResultWithValidity() virtual public view returns (uint256, bool);\n', '}\n', '\n', 'contract OracleRelayer {\n', '    // --- Auth ---\n', '    mapping (address => uint256) public authorizedAccounts;\n', '    /**\n', '     * @notice Add auth to an account\n', '     * @param account Account to add auth to\n', '     */\n', '    function addAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 1;\n', '        emit AddAuthorization(account);\n', '    }\n', '    /**\n', '     * @notice Remove auth from an account\n', '     * @param account Account to remove auth from\n', '     */\n', '    function removeAuthorization(address account) external isAuthorized {\n', '        authorizedAccounts[account] = 0;\n', '        emit RemoveAuthorization(account);\n', '    }\n', '    /**\n', '    * @notice Checks whether msg.sender can call an authed function\n', '    **/\n', '    modifier isAuthorized {\n', '        require(authorizedAccounts[msg.sender] == 1, "OracleRelayer/account-not-authorized");\n', '        _;\n', '    }\n', '\n', '    // --- Data ---\n', '    struct CollateralType {\n', '        // Usually an oracle security module that enforces delays to fresh price feeds\n', '        OracleLike orcl;\n', "        // CRatio used to compute the 'safePrice' - the price used when generating debt in SAFEEngine\n", '        uint256 safetyCRatio;\n', "        // CRatio used to compute the 'liquidationPrice' - the price used when liquidating SAFEs\n", '        uint256 liquidationCRatio;\n', '    }\n', '\n', '    // Data about each collateral type\n', '    mapping (bytes32 => CollateralType) public collateralTypes;\n', '\n', '    SAFEEngineLike public safeEngine;\n', '\n', '    // Whether this contract is enabled\n', '    uint256 public contractEnabled;\n', '    // Virtual redemption price (not the most updated value)\n', '    uint256 internal _redemptionPrice;                                                        // [ray]\n', "    // The force that changes the system users' incentives by changing the redemption price\n", '    uint256 public redemptionRate;                                                            // [ray]\n', '    // Last time when the redemption price was changed\n', '    uint256 public redemptionPriceUpdateTime;                                                 // [unix epoch time]\n', '    // Upper bound for the per-second redemption rate\n', '    uint256 public redemptionRateUpperBound;                                                  // [ray]\n', '    // Lower bound for the per-second redemption rate\n', '    uint256 public redemptionRateLowerBound;                                                  // [ray]\n', '\n', '    // --- Events ---\n', '    event AddAuthorization(address account);\n', '    event RemoveAuthorization(address account);\n', '    event DisableContract();\n', '    event ModifyParameters(\n', '        bytes32 collateralType,\n', '        bytes32 parameter,\n', '        address addr\n', '    );\n', '    event ModifyParameters(bytes32 parameter, uint256 data);\n', '    event ModifyParameters(\n', '        bytes32 collateralType,\n', '        bytes32 parameter,\n', '        uint256 data\n', '    );\n', '    event UpdateRedemptionPrice(uint256 redemptionPrice);\n', '    event UpdateCollateralPrice(\n', '      bytes32 indexed collateralType,\n', '      uint256 priceFeedValue,\n', '      uint256 safetyPrice,\n', '      uint256 liquidationPrice\n', '    );\n', '\n', '    // --- Init ---\n', '    constructor(address safeEngine_) public {\n', '        authorizedAccounts[msg.sender] = 1;\n', '        safeEngine                 = SAFEEngineLike(safeEngine_);\n', '        _redemptionPrice           = RAY;\n', '        redemptionRate             = RAY;\n', '        redemptionPriceUpdateTime  = now;\n', '        redemptionRateUpperBound   = RAY * WAD;\n', '        redemptionRateLowerBound   = 1;\n', '        contractEnabled            = 1;\n', '        emit AddAuthorization(msg.sender);\n', '    }\n', '\n', '    // --- Math ---\n', '    uint256 constant WAD = 10 ** 18;\n', '    uint256 constant RAY = 10 ** 27;\n', '\n', '    function subtract(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = x - y;\n', '        require(z <= x, "OracleRelayer/sub-underflow");\n', '    }\n', '    function multiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x, "OracleRelayer/mul-overflow");\n', '    }\n', '    function rmultiply(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        // always rounds down\n', '        z = multiply(x, y) / RAY;\n', '    }\n', '    function rdivide(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y > 0, "OracleRelayer/rdiv-by-zero");\n', '        z = multiply(x, RAY) / y;\n', '    }\n', '    function rpower(uint256 x, uint256 n, uint256 base) internal pure returns (uint256 z) {\n', '        assembly {\n', '            switch x case 0 {switch n case 0 {z := base} default {z := 0}}\n', '            default {\n', '                switch mod(n, 2) case 0 { z := base } default { z := x }\n', '                let half := div(base, 2)  // for rounding.\n', '                for { n := div(n, 2) } n { n := div(n,2) } {\n', '                    let xx := mul(x, x)\n', '                    if iszero(eq(div(xx, x), x)) { revert(0,0) }\n', '                    let xxRound := add(xx, half)\n', '                    if lt(xxRound, xx) { revert(0,0) }\n', '                    x := div(xxRound, base)\n', '                    if mod(n,2) {\n', '                        let zx := mul(z, x)\n', '                        if and(iszero(iszero(x)), iszero(eq(div(zx, x), z))) { revert(0,0) }\n', '                        let zxRound := add(zx, half)\n', '                        if lt(zxRound, zx) { revert(0,0) }\n', '                        z := div(zxRound, base)\n', '                    }\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    // --- Administration ---\n', '    /**\n', '     * @notice Modify oracle price feed addresses\n', '     * @param collateralType Collateral whose oracle we change\n', '     * @param parameter Name of the parameter\n', '     * @param addr New oracle address\n', '     */\n', '    function modifyParameters(\n', '        bytes32 collateralType,\n', '        bytes32 parameter,\n', '        address addr\n', '    ) external isAuthorized {\n', '        require(contractEnabled == 1, "OracleRelayer/contract-not-enabled");\n', '        if (parameter == "orcl") collateralTypes[collateralType].orcl = OracleLike(addr);\n', '        else revert("OracleRelayer/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '            collateralType,\n', '            parameter,\n', '            addr\n', '        );\n', '    }\n', '    /**\n', '     * @notice Modify redemption related parameters\n', '     * @param parameter Name of the parameter\n', '     * @param data New param value\n', '     */\n', '    function modifyParameters(bytes32 parameter, uint256 data) external isAuthorized {\n', '        require(contractEnabled == 1, "OracleRelayer/contract-not-enabled");\n', '        require(data > 0, "OracleRelayer/null-data");\n', '        if (parameter == "redemptionPrice") {\n', '          _redemptionPrice = data;\n', '        }\n', '        else if (parameter == "redemptionRate") {\n', '          require(now == redemptionPriceUpdateTime, "OracleRelayer/redemption-price-not-updated");\n', '          uint256 adjustedRate = data;\n', '          if (data > redemptionRateUpperBound) {\n', '            adjustedRate = redemptionRateUpperBound;\n', '          } else if (data < redemptionRateLowerBound) {\n', '            adjustedRate = redemptionRateLowerBound;\n', '          }\n', '          redemptionRate = adjustedRate;\n', '        }\n', '        else if (parameter == "redemptionRateUpperBound") {\n', '          require(data > RAY, "OracleRelayer/invalid-redemption-rate-upper-bound");\n', '          redemptionRateUpperBound = data;\n', '        }\n', '        else if (parameter == "redemptionRateLowerBound") {\n', '          require(data < RAY, "OracleRelayer/invalid-redemption-rate-lower-bound");\n', '          redemptionRateLowerBound = data;\n', '        }\n', '        else revert("OracleRelayer/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '            parameter,\n', '            data\n', '        );\n', '    }\n', '    /**\n', '     * @notice Modify CRatio related parameters\n', '     * @param collateralType Collateral whose parameters we change\n', '     * @param parameter Name of the parameter\n', '     * @param data New param value\n', '     */\n', '    function modifyParameters(\n', '        bytes32 collateralType,\n', '        bytes32 parameter,\n', '        uint256 data\n', '    ) external isAuthorized {\n', '        require(contractEnabled == 1, "OracleRelayer/contract-not-enabled");\n', '        if (parameter == "safetyCRatio") {\n', '          require(data >= collateralTypes[collateralType].liquidationCRatio, "OracleRelayer/safety-lower-than-liquidation-cratio");\n', '          collateralTypes[collateralType].safetyCRatio = data;\n', '        }\n', '        else if (parameter == "liquidationCRatio") {\n', '          require(data <= collateralTypes[collateralType].safetyCRatio, "OracleRelayer/safety-lower-than-liquidation-cratio");\n', '          collateralTypes[collateralType].liquidationCRatio = data;\n', '        }\n', '        else revert("OracleRelayer/modify-unrecognized-param");\n', '        emit ModifyParameters(\n', '            collateralType,\n', '            parameter,\n', '            data\n', '        );\n', '    }\n', '\n', '    // --- Redemption Price Update ---\n', '    /**\n', '     * @notice Update the redemption price according to the current redemption rate\n', '     */\n', '    function updateRedemptionPrice() internal returns (uint256) {\n', '        // Update redemption price\n', '        _redemptionPrice = rmultiply(\n', '          rpower(redemptionRate, subtract(now, redemptionPriceUpdateTime), RAY),\n', '          _redemptionPrice\n', '        );\n', '        if (_redemptionPrice == 0) _redemptionPrice = 1;\n', '        redemptionPriceUpdateTime = now;\n', '        emit UpdateRedemptionPrice(_redemptionPrice);\n', '        // Return updated redemption price\n', '        return _redemptionPrice;\n', '    }\n', '    /**\n', '     * @notice Fetch the latest redemption price by first updating it\n', '     */\n', '    function redemptionPrice() public returns (uint256) {\n', '        if (now > redemptionPriceUpdateTime) return updateRedemptionPrice();\n', '        return _redemptionPrice;\n', '    }\n', '\n', '    // --- Update value ---\n', '    /**\n', '     * @notice Update the collateral price inside the system (inside SAFEEngine)\n', '     * @param collateralType The collateral we want to update prices (safety and liquidation prices) for\n', '     */\n', '    function updateCollateralPrice(bytes32 collateralType) external {\n', '        (uint256 priceFeedValue, bool hasValidValue) =\n', '          collateralTypes[collateralType].orcl.getResultWithValidity();\n', '        uint256 redemptionPrice_ = redemptionPrice();\n', '        uint256 safetyPrice_ = hasValidValue ? rdivide(rdivide(multiply(uint256(priceFeedValue), 10 ** 9), redemptionPrice_), collateralTypes[collateralType].safetyCRatio) : 0;\n', '        uint256 liquidationPrice_ = hasValidValue ? rdivide(rdivide(multiply(uint256(priceFeedValue), 10 ** 9), redemptionPrice_), collateralTypes[collateralType].liquidationCRatio) : 0;\n', '\n', '        safeEngine.modifyParameters(collateralType, "safetyPrice", safetyPrice_);\n', '        safeEngine.modifyParameters(collateralType, "liquidationPrice", liquidationPrice_);\n', '        emit UpdateCollateralPrice(collateralType, priceFeedValue, safetyPrice_, liquidationPrice_);\n', '    }\n', '\n', '    /**\n', '     * @notice Disable this contract (normally called by GlobalSettlement)\n', '     */\n', '    function disableContract() external isAuthorized {\n', '        contractEnabled = 0;\n', '        redemptionRate = RAY;\n', '        emit DisableContract();\n', '    }\n', '\n', '    /**\n', '     * @notice Fetch the safety CRatio of a specific collateral type\n', '     * @param collateralType The collateral type we want the safety CRatio for\n', '     */\n', '    function safetyCRatio(bytes32 collateralType) public view returns (uint256) {\n', '        return collateralTypes[collateralType].safetyCRatio;\n', '    }\n', '    /**\n', '     * @notice Fetch the liquidation CRatio of a specific collateral type\n', '     * @param collateralType The collateral type we want the liquidation CRatio for\n', '     */\n', '    function liquidationCRatio(bytes32 collateralType) public view returns (uint256) {\n', '        return collateralTypes[collateralType].liquidationCRatio;\n', '    }\n', '    /**\n', '     * @notice Fetch the oracle price feed of a specific collateral type\n', '     * @param collateralType The collateral type we want the oracle price feed for\n', '     */\n', '    function orcl(bytes32 collateralType) public view returns (address) {\n', '        return address(collateralTypes[collateralType].orcl);\n', '    }\n', '}']