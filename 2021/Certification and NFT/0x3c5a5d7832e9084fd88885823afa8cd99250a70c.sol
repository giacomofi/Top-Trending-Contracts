['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-01\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves.\n", '\n', '        // A Solidity high level call has three parts:\n', '        //  1. The target address is checked to verify it contains contract code\n', '        //  2. The call itself is made, and success asserted\n', '        //  3. The return value is decoded, which in turn checks the size of the returned data.\n', '        // solhint-disable-next-line max-line-length\n', '        require(address(token).isContract(), "SafeERC20: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = address(token).call(data);\n', '        require(success, "SafeERC20: low-level call failed");\n', '\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interfaces/IAToken.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IAToken {\n', '  function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/ILendingProtocol.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface ILendingProtocol {\n', '  function mint() external returns (uint256);\n', '  function redeem(address account) external returns (uint256);\n', '  function nextSupplyRate(uint256 amount) external view returns (uint256);\n', '  function nextSupplyRateWithParams(uint256[] calldata params) external view returns (uint256);\n', '  function getAPR() external view returns (uint256);\n', '  function getPriceInToken() external view returns (uint256);\n', '  function token() external view returns (address);\n', '  function underlying() external view returns (address);\n', '  function availableLiquidity() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/AaveLendingPoolProviderV2.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface AaveLendingPoolProviderV2 {\n', '  function getLendingPool() external view returns (address);\n', '}\n', '\n', '// File: contracts/interfaces/DataTypes.sol\n', '\n', '// SPDX-License-Identifier: agpl-3.0\n', 'pragma solidity 0.5.16;\n', '\n', 'contract DataTypes {\n', '  // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n', '  struct ReserveData {\n', '    //stores the reserve configuration\n', '    ReserveConfigurationMap configuration;\n', '    //the liquidity index. Expressed in ray\n', '    uint128 liquidityIndex;\n', '    //variable borrow index. Expressed in ray\n', '    uint128 variableBorrowIndex;\n', '    //the current supply rate. Expressed in ray\n', '    uint128 currentLiquidityRate;\n', '    //the current variable borrow rate. Expressed in ray\n', '    uint128 currentVariableBorrowRate;\n', '    //the current stable borrow rate. Expressed in ray\n', '    uint128 currentStableBorrowRate;\n', '    uint40 lastUpdateTimestamp;\n', '    //tokens addresses\n', '    address aTokenAddress;\n', '    address stableDebtTokenAddress;\n', '    address variableDebtTokenAddress;\n', '    //address of the interest rate strategy\n', '    address interestRateStrategyAddress;\n', '    //the id of the reserve. Represents the position in the list of the active reserves\n', '    uint8 id;\n', '  }\n', '\n', '  struct ReserveConfigurationMap {\n', '    //bit 0-15: LTV\n', '    //bit 16-31: Liq. threshold\n', '    //bit 32-47: Liq. bonus\n', '    //bit 48-55: Decimals\n', '    //bit 56: Reserve is active\n', '    //bit 57: reserve is frozen\n', '    //bit 58: borrowing is enabled\n', '    //bit 59: stable rate borrowing enabled\n', '    //bit 60-63: reserved\n', '    //bit 64-79: reserve factor\n', '    uint256 data;\n', '  }\n', '\n', '  struct UserConfigurationMap {\n', '    uint256 data;\n', '  }\n', '\n', '  enum InterestRateMode {NONE, STABLE, VARIABLE}\n', '\n', '  // copied from https://github.com/aave/protocol-v2/blob/dbd77ad9312f607b420da746c2cb7385d734b015/contracts/protocol/libraries/configuration/ReserveConfiguration.sol#L242\n', '  function getReserveFactor(DataTypes.ReserveConfigurationMap memory self) internal pure returns (uint256) {\n', '    uint256 RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFFFFFFFFFFFFFFF; // prettier-ignore\n', '    uint256 RESERVE_FACTOR_START_BIT_POSITION = 64;\n', '\n', '    return (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/AaveLendingPoolV2.sol\n', '\n', 'pragma solidity 0.5.16;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'interface AaveLendingPoolV2 {\n', '  function deposit(address asset, uint256 amount, address onBehalfOf, uint16 referralCode) external;\n', '  function withdraw(address asset, uint256 amount, address to) external;\n', '  function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n', '}\n', '\n', '// File: contracts/interfaces/IVariableDebtToken.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IVariableDebtToken {\n', '  function scaledTotalSupply() external view returns (uint256);\n', '}\n', '\n', '// File: contracts/interfaces/IStableDebtToken.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface IStableDebtToken {\n', '  function getTotalSupplyAndAvgRate() external view returns (uint256, uint256);\n', '}\n', '\n', '// File: contracts/interfaces/AaveInterestRateStrategyV2.sol\n', '\n', 'pragma solidity 0.5.16;\n', '\n', 'interface AaveInterestRateStrategyV2 {\n', '  function calculateInterestRates(\n', '    address reserve,\n', '    uint256 utilizationRate,\n', '    uint256 totalStableDebt,\n', '    uint256 totalVariableDebt,\n', '    uint256 averageStableBorrowRate,\n', '    uint256 reserveFactor\n', '  )\n', '    external\n', '    view\n', '    returns (\n', '      uint256 liquidityRate,\n', '      uint256 stableBorrowRate,\n', '      uint256 variableBorrowRate\n', '    );\n', '}\n', '\n', '// File: contracts/wrappers/IdleAaveV2.sol\n', '\n', '/**\n', ' * @title: Aave wrapper\n', ' * @summary: Used for interacting with Aave. Has\n', ' *           a common interface with all other protocol wrappers.\n', ' *           This contract holds assets only during a tx, after tx it should be empty\n', ' * @author: Idle Labs Inc., idle.finance\n', ' */\n', 'pragma solidity 0.5.16;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract IdleAaveV2 is ILendingProtocol, DataTypes, Ownable {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  // protocol token (aToken) address\n', '  address public token;\n', '  // underlying token (token eg DAI) address\n', '  address public underlying;\n', '  address public idleToken;\n', '  bool public initialized;\n', '\n', '  AaveLendingPoolProviderV2 public provider;\n', '\n', '  /**\n', '   * @param _token : aToken address\n', '   * @param _addressesProvider : aave addresses provider\n', '   * @param _idleToken : idleToken address\n', '   */\n', '  constructor(address _token, address _addressesProvider, address _idleToken) public {\n', "    require(_token != address(0), 'AAVE: addr is 0');\n", '    token = _token;\n', '    underlying = IAToken(_token).UNDERLYING_ASSET_ADDRESS();\n', '    idleToken = _idleToken;\n', '    provider = AaveLendingPoolProviderV2(_addressesProvider);\n', '    _approveProvider();\n', '  }\n', '\n', '  function _approveProvider() public onlyOwner {\n', '    require(!initialized, "Already approved");\n', '    IERC20(underlying).safeApprove(provider.getLendingPool(), uint256(-1));\n', '    initialized = true;\n', '  }\n', '\n', '  /**\n', '   * Throws if called by any account other than IdleToken contract.\n', '   */\n', '  modifier onlyIdle() {\n', '    require(msg.sender == idleToken, "Ownable: caller is not IdleToken");\n', '    _;\n', '  }\n', '\n', '  /**\n', '   * Not used\n', '   */\n', '  function nextSupplyRateWithParams(uint256[] calldata)\n', '    external view\n', '    returns (uint256) {\n', '    return 0;\n', '  }\n', '\n', '  /**\n', '   * Calculate next supply rate for Aave, given an `_amount` supplied\n', '   *\n', '   * @param _amount : new underlying amount supplied (eg DAI)\n', '   * @return : yearly net rate\n', '   */\n', '  function nextSupplyRate(uint256 _amount)\n', '    external view\n', '    returns (uint256) {\n', '      AaveLendingPoolV2 core = AaveLendingPoolV2(provider.getLendingPool());\n', '      DataTypes.ReserveData memory data = core.getReserveData(underlying);\n', '      AaveInterestRateStrategyV2 apr = AaveInterestRateStrategyV2(data.interestRateStrategyAddress);\n', '\n', '      (uint256 totalStableDebt, uint256 avgStableRate) = IStableDebtToken(data.stableDebtTokenAddress).getTotalSupplyAndAvgRate();\n', '\n', '      uint256 totalVariableDebt = IVariableDebtToken(data.variableDebtTokenAddress)\n', '        .scaledTotalSupply()\n', '        .mul(data.variableBorrowIndex).div(10**27);\n', '\n', '      uint256 availableLiquidity = IERC20(underlying).balanceOf(data.aTokenAddress);\n', '\n', '      (uint256 newLiquidityRate,,) = apr.calculateInterestRates(\n', '        underlying,\n', '        availableLiquidity.add(_amount),\n', '        totalStableDebt,\n', '        totalVariableDebt,\n', '        avgStableRate,\n', '        getReserveFactor(data.configuration)\n', '      );\n', '      return newLiquidityRate.div(10**7); // .mul(100).div(10**9)\n', '  }\n', '\n', '  /**\n', '   * @return current price of aToken in underlying, Aave price is always 1\n', '   */\n', '  function getPriceInToken()\n', '    external view\n', '    returns (uint256) {\n', '      return 10**18;\n', '  }\n', '\n', '  /**\n', '   * @return apr : current yearly net rate\n', '   */\n', '  function getAPR()\n', '    external view\n', '    returns (uint256) {\n', '      DataTypes.ReserveData memory data = AaveLendingPoolV2(provider.getLendingPool()).getReserveData(underlying);\n', '      return uint256(data.currentLiquidityRate).div(10**7); // .mul(100).div(10**9)\n', '  }\n', '\n', '  /**\n', '   * Gets all underlying tokens in this contract and mints aTokens\n', '   * tokens are then transferred to msg.sender\n', '   * NOTE: underlying tokens needs to be sent here before calling this\n', '   * NOTE2: given that aToken price is always 1 token -> underlying.balanceOf(this) == token.balanceOf(this)\n', '   *\n', '   * @return aTokens minted\n', '   */\n', '  function mint()\n', '    external onlyIdle\n', '    returns (uint256 tokens) {\n', '      tokens = IERC20(underlying).balanceOf(address(this));\n', '      AaveLendingPoolV2 lendingPool = AaveLendingPoolV2(provider.getLendingPool());\n', '      lendingPool.deposit(underlying, tokens, msg.sender, 29); // 29 -> referral\n', '  }\n', '\n', '  /**\n', '   * Gets all aTokens in this contract and redeems underlying tokens.\n', '   * underlying tokens are then transferred to `_account`\n', '   * NOTE: aTokens needs to be sent here before calling this\n', '   *\n', '   * @return underlying tokens redeemd\n', '   */\n', '  function redeem(address _account)\n', '    external onlyIdle\n', '    returns (uint256 tokens) {\n', '      tokens = IERC20(token).balanceOf(address(this));\n', '      AaveLendingPoolV2(provider.getLendingPool()).withdraw(underlying, tokens, _account);\n', '  }\n', '\n', '  /**\n', '   * Get the underlying balance on the lending protocol\n', '   *\n', '   * @return underlying tokens available\n', '   */\n', '  function availableLiquidity() external view returns (uint256) {\n', '    return IERC20(underlying).balanceOf(token);\n', '  }\n', '}']