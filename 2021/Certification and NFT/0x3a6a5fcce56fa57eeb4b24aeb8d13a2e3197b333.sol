['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-02\n', '*/\n', '\n', '// File: contracts\\index\\util\\IEthItemOrchestrator.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IEthItemOrchestrator {\n', '    function createNative(bytes calldata modelInitPayload, string calldata ens)\n', '        external\n', '        returns (address newNativeAddress, bytes memory modelInitCallResponse);\n', '}\n', '\n', '// File: contracts\\index\\util\\IERC1155.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC1155 {\n', '\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: contracts\\index\\util\\IERC20.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC20 {\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts\\index\\util\\IEthItemInteroperableInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'interface IEthItemInteroperableInterface is IERC20 {\n', '\n', '    function mainInterface() external view returns (address);\n', '\n', '    function objectId() external view returns (uint256);\n', '\n', '    function mint(address owner, uint256 amount) external;\n', '\n', '    function burn(address owner, uint256 amount) external;\n', '\n', '    function permitNonce(address sender) external view returns(uint256);\n', '\n', '    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\n', '}\n', '\n', '// File: contracts\\index\\util\\IEthItem.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '\n', 'interface IEthItem is IERC1155 {\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function totalSupply(uint256 objectId) external view returns (uint256);\n', '\n', '    function name(uint256 objectId) external view returns (string memory);\n', '\n', '    function symbol(uint256 objectId) external view returns (string memory);\n', '\n', '    function decimals(uint256 objectId) external view returns (uint256);\n', '\n', '    function uri(uint256 objectId) external view returns (string memory);\n', '\n', '    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\n', '\n', '    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\n', '\n', '    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\n', '\n', '    function interoperableInterfaceModel() external view returns (address, uint256);\n', '\n', '    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\n', '\n', '    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\n', '\n', '    function mint(uint256 amount, string calldata partialUri)\n', '        external\n', '        returns (uint256, address);\n', '\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function burnBatch(\n', '        uint256[] calldata objectIds,\n', '        uint256[] calldata amounts\n', '    ) external;\n', '}\n', '\n', '// File: contracts\\index\\util\\INativeV1.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'interface INativeV1 is IEthItem {\n', '\n', '    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\n', '\n', '    function extension() external view returns (address extensionAddress);\n', '\n', '    function canMint(address operator) external view returns (bool result);\n', '\n', '    function isEditable(uint256 objectId) external view returns (bool result);\n', '\n', '    function releaseExtension() external;\n', '\n', '    function uri() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\n', '\n', '    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\n', '\n', '    function mint(uint256 objectId, uint256 amount) external;\n', '\n', '    function makeReadOnly(uint256 objectId) external;\n', '\n', '    function setUri(string calldata newUri) external;\n', '\n', '    function setUri(uint256 objectId, string calldata newUri) external;\n', '}\n', '\n', '// File: contracts\\index\\util\\ERC1155Receiver.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'abstract contract ERC1155Receiver {\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor() {\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '        _registerInterface(\n', '            ERC1155Receiver(0).onERC1155Received.selector ^\n', '            ERC1155Receiver(0).onERC1155BatchReceived.selector\n', '        );\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceId) public view returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        virtual\n', '        returns(bytes4);\n', '\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        virtual\n', '        returns(bytes4);\n', '}\n', '\n', '// File: contracts\\index\\util\\DFOHub.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IDoubleProxy {\n', '    function proxy() external view returns (address);\n', '}\n', '\n', 'interface IMVDProxy {\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns (address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '}\n', '\n', 'interface IStateHolder {\n', '    function getUint256(string calldata name) external view returns(uint256);\n', '    function getAddress(string calldata name) external view returns(address);\n', '    function clear(string calldata varName) external returns(string memory oldDataType, bytes memory oldVal);\n', '}\n', '\n', '// File: contracts\\index\\Index.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', '\n', '\n', '\n', 'contract Index is ERC1155Receiver {\n', '\n', '    address public _doubleProxy;\n', '\n', '    mapping(address => bool) _temporaryIndex;\n', '\n', '    event NewIndex(uint256 indexed id, address indexed interoperableInterfaceAddress, address indexed token, uint256 amount);\n', '\n', '    address public collection;\n', '\n', '    mapping(uint256 => address[]) public tokens;\n', '    mapping(uint256 => uint256[]) public amounts;\n', '\n', '    constructor(address doubleProxy, address ethItemOrchestrator, string memory name, string memory symbol, string memory uri) {\n', '        _doubleProxy = doubleProxy;\n', '        (collection,) = IEthItemOrchestrator(ethItemOrchestrator).createNative(abi.encodeWithSignature("init(string,string,bool,string,address,bytes)", name, symbol, true, uri, address(this), ""), "");\n', '    }\n', '\n', '    modifier onlyDFO() {\n', '        require(IMVDFunctionalitiesManager(IMVDProxy(IDoubleProxy(_doubleProxy).proxy()).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized");\n', '        _;\n', '    }\n', '\n', '    function setDoubleProxy(address newDoubleProxy) public onlyDFO {\n', '        _doubleProxy = newDoubleProxy;\n', '    }\n', '\n', '    function setCollectionUri(string memory uri) public onlyDFO {\n', '        INativeV1(collection).setUri(uri);\n', '    }\n', '\n', '    function info(uint256 objectId, uint256 value) public view returns(address[] memory _tokens, uint256[] memory _amounts) {\n', '        uint256 amount = value == 0 ? 1e18 : value;\n', '        _tokens = tokens[objectId];\n', '        _amounts = new uint256[](_tokens.length);\n', '        for(uint256 i = 0; i < _amounts.length; i++) {\n', '            _amounts[i] = (amounts[objectId][i] * amount) / 1e18;\n', '        }\n', '    }\n', '\n', '    function mint(string memory name, string memory symbol, string memory uri, address[] memory _tokens, uint256[] memory _amounts, uint256 value, address receiver) public payable returns(uint256 objectId, address interoperableInterfaceAddress) {\n', '        require(_tokens.length > 0 && _tokens.length == _amounts.length, "invalid length");\n', '        for(uint256 i = 0; i < _tokens.length; i++) {\n', '            require(!_temporaryIndex[_tokens[i]], "already done");\n', '            require(_amounts[i] > 0, "amount");\n', '            _temporaryIndex[_tokens[i]] = true;\n', '            if(value > 0) {\n', '                uint256 tokenValue = (_amounts[i] * value) / 1e18;\n', '                require(tokenValue > 0, "Insufficient balance");\n', '                if(_tokens[i] == address(0)) {\n', '                    require(msg.value == tokenValue, "insufficient eth");\n', '                } else {\n', '                    _safeTransferFrom(_tokens[i], msg.sender, address(this), tokenValue);\n', '                }\n', '            }\n', '        }\n', '        require(_temporaryIndex[address(0)] || msg.value == 0, "eth not involved");\n', '        INativeV1 theCollection = INativeV1(collection);\n', '        (objectId, interoperableInterfaceAddress) = theCollection.mint(value == 0 ? 1e18 : value, name, symbol, uri, true);\n', '        tokens[objectId] = _tokens;\n', '        amounts[objectId] = _amounts;\n', '        if(value == 0) {\n', '            theCollection.burn(objectId, theCollection.balanceOf(address(this), objectId));\n', '        } else {\n', '            _safeTransfer(interoperableInterfaceAddress, receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));\n', '        }\n', '        for(uint256 i = 0; i < _tokens.length; i++) {\n', '            delete _temporaryIndex[_tokens[i]];\n', '            emit NewIndex(objectId, interoperableInterfaceAddress, _tokens[i], _amounts[i]);\n', '        }\n', '    }\n', '\n', '    function mint(uint256 objectId, uint256 value, address receiver) public payable {\n', '        require(value > 0, "value");\n', '        bool ethInvolved = false;\n', '        for(uint256 i = 0; i < tokens[objectId].length; i++) {\n', '            uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;\n', '            require(tokenValue > 0, "Insufficient balance");\n', '            if(tokens[objectId][i] == address(0)) {\n', '                ethInvolved = true;\n', '                 require(msg.value == tokenValue, "insufficient eth");\n', '            } else {\n', '                _safeTransferFrom(tokens[objectId][i], msg.sender, address(this), tokenValue);\n', '            }\n', '        }\n', '        require(ethInvolved || msg.value == 0, "eth not involved");\n', '        INativeV1 theCollection = INativeV1(collection);\n', '        theCollection.mint(objectId, value);\n', '        _safeTransfer(address(theCollection.asInteroperable(objectId)), receiver == address(0) ? msg.sender : receiver, theCollection.toInteroperableInterfaceAmount(objectId, theCollection.balanceOf(address(this), objectId)));\n', '    }\n', '\n', '    function onERC1155Received(\n', '        address,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        public\n', '        override\n', '        returns(bytes4) {\n', '            require(msg.sender == collection, "Only Index collection allowed here");\n', '            _onSingleReceived(from, id, value, data);\n', '            return this.onERC1155Received.selector;\n', '    }\n', '\n', '    function onERC1155BatchReceived(\n', '        address,\n', '        address from,\n', '        uint256[] memory ids,\n', '        uint256[] memory values,\n', '        bytes memory data\n', '    )\n', '        public\n', '        override\n', '        returns(bytes4) {\n', '\n', '        require(msg.sender == collection, "Only Index collection allowed here");\n', '        bytes[] memory payloads = abi.decode(data, (bytes[]));\n', '        require(payloads.length == ids.length, "Wrong payloads length");\n', '        for(uint256 i = 0; i < ids.length; i++) {\n', '            _onSingleReceived(from, ids[i], values[i], payloads[i]);\n', '        }\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '\n', '    function _onSingleReceived(\n', '        address from,\n', '        uint256 objectId,\n', '        uint256 value,\n', '        bytes memory data) private {\n', '            address receiver = data.length == 0 ? from : abi.decode(data, (address));\n', '            receiver = receiver == address(0) ? from : receiver;\n', '            INativeV1 theCollection = INativeV1(collection);\n', '            theCollection.burn(objectId, value);\n', '            for(uint256 i = 0; i < tokens[objectId].length; i++) {\n', '                uint256 tokenValue = (amounts[objectId][i] * value) / 1e18;\n', '                if(tokens[objectId][i] == address(0)) {\n', '                    payable(receiver).transfer(tokenValue);\n', '                } else {\n', '                    _safeTransfer(tokens[objectId][i], receiver, tokenValue);\n', '                }\n', '            }\n', '    }\n', '\n', '    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\n", '    }\n', '\n', '    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\n", '    }\n', '\n', '    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) private {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\n", '    }\n', '\n', '    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\n', '        assembly {\n', '            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\n', '            let size := returndatasize()\n', '            returnData := mload(0x40)\n', '            mstore(returnData, size)\n', '            let returnDataPayloadStart := add(returnData, 0x20)\n', '            returndatacopy(returnDataPayloadStart, 0, size)\n', '            mstore(0x40, add(returnDataPayloadStart, size))\n', '            switch result case 0 {revert(returnDataPayloadStart, size)}\n', '        }\n', '    }\n', '}']