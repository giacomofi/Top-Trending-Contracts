['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-17\n', '*/\n', '\n', '// File: contracts\\interfaces\\ISaffronBase.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronBase {\n', '  enum Tranche {S, AA, A}\n', '  enum LPTokenType {dsec, principal}\n', '\n', '  // Store values (balances, dsec, vdsec) with TrancheUint256\n', '  struct TrancheUint256 {\n', '    uint256 S;\n', '    uint256 AA;\n', '    uint256 A;\n', '  }\n', '\n', '  struct epoch_params {\n', '    uint256 start_date;       // Time when the platform launched\n', '    uint256 duration;         // Duration of epoch\n', '  }\n', '}\n', '\n', '// File: contracts\\interfaces\\ISaffronStrategy.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', 'interface ISaffronStrategy is ISaffronBase{\n', '  function deploy_all_capital() external;\n', '  function select_adapter_for_liquidity_removal() external returns(address);\n', '  function add_adapter(address adapter_address) external;\n', '  function add_pool(address pool_address) external;\n', '  function delete_adapters() external;\n', '  function set_governance(address to) external;\n', '  function get_adapter_address(uint256 adapter_index) external view returns(address);\n', '  function set_pool_SFI_reward(uint256 poolIndex, uint256 reward) external;\n', '}\n', '\n', '// File: contracts\\interfaces\\ISaffronPool.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronPool is ISaffronBase {\n', '  function add_liquidity(uint256 amount, Tranche tranche) external;\n', '  function remove_liquidity(address v1_dsec_token_address, uint256 dsec_amount, address v1_principal_token_address, uint256 principal_amount) external;\n', '  function get_base_asset_address() external view returns(address);\n', '  function hourly_strategy(address adapter_address) external;\n', '  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) external;\n', '  function set_governance(address to) external;\n', '  function get_epoch_cycle_params() external view returns (uint256, uint256);\n', '  function shutdown() external;\n', '}\n', '\n', '// File: contracts\\interfaces\\ISaffronAdapter.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronAdapter is ISaffronBase {\n', '    function deploy_capital(uint256 amount) external;\n', '    function return_capital(uint256 base_asset_amount, address to) external;\n', '    function approve_transfer(address addr,uint256 amount) external;\n', '    function get_base_asset_address() external view returns(address);\n', '    function set_base_asset(address addr) external;\n', '    function get_holdings() external returns(uint256);\n', '    function get_interest(uint256 principal) external returns(uint256);\n', '    function set_governance(address to) external;\n', '}\n', '\n', '// File: contracts\\lib\\SafeMath.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\IERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts\\lib\\Context.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\Address.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts\\lib\\ERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts\\lib\\SafeERC20.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '  }\n', '\n', '  /**\n', '   * @dev Deprecated. This function has issues similar to the ones found in\n', '   * {IERC20-approve}, and its usage is discouraged.\n', '   *\n', '   * Whenever possible, use {safeIncreaseAllowance} and\n', '   * {safeDecreaseAllowance} instead.\n', '   */\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    // solhint-disable-next-line max-line-length\n', '    require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '      "SafeERC20: approve from non-zero to non-zero allowance"\n', '    );\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  /**\n', '   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '   * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '   * @param token The token targeted by the call.\n', '   * @param data The call data (encoded using abi.encode or one of its variants).\n', '   */\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '    // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '    bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '    if (returndata.length > 0) { // Return data is optional\n', '      // solhint-disable-next-line max-line-length\n', '      require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts\\SFI.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', 'contract SFI is ERC20 {\n', '  using SafeERC20 for IERC20;\n', '\n', '  address public governance;\n', '  address public SFI_minter;\n', '  uint256 public MAX_TOKENS = 100000 ether;\n', '\n', '  constructor (string memory name, string memory symbol) ERC20(name, symbol) {\n', '    // Initial governance is Saffron Deployer\n', '    governance = msg.sender;\n', '  }\n', '\n', '  function mint_SFI(address to, uint256 amount) public {\n', '    require(msg.sender == SFI_minter, "must be SFI_minter");\n', '    require(this.totalSupply() + amount < MAX_TOKENS, "cannot mint more than MAX_TOKENS");\n', '    _mint(to, amount);\n', '  }\n', '\n', '  function set_minter(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    SFI_minter = to;\n', '  }\n', '\n', '  function set_governance(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    governance = to;\n', '  }\n', '\n', '  event ErcSwept(address who, address to, address token, uint256 amount);\n', '  function erc_sweep(address _token, address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '\n', '    IERC20 tkn = IERC20(_token);\n', '    uint256 tBal = tkn.balanceOf(address(this));\n', '    tkn.safeTransfer(_to, tBal);\n', '\n', '    emit ErcSwept(msg.sender, _to, _token, tBal);\n', '  }\n', '}\n', '\n', '// File: contracts\\SaffronLPBalanceToken.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', 'contract SaffronLPBalanceToken is ERC20 {\n', '  address public pool_address;\n', '\n', '  constructor (string memory name, string memory symbol) ERC20(name, symbol) {\n', '    // Set pool_address to saffron pool that created token\n', '    pool_address = msg.sender;\n', '  }\n', '\n', '  // Allow creating new tranche tokens\n', '  function mint(address to, uint256 amount) public {\n', '    require(msg.sender == pool_address, "must be pool");\n', '    _mint(to, amount);\n', '  }\n', '\n', '  function burn(address account, uint256 amount) public {\n', '    require(msg.sender == pool_address, "must be pool");\n', '    _burn(account, amount);\n', '  }\n', '\n', '  function set_governance(address to) external {\n', '    require(msg.sender == pool_address, "must be pool");\n', '    pool_address = to;\n', '  }\n', '}\n', '\n', '// File: contracts\\SaffronPool.sol\n', '\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract SaffronPool is ISaffronPool {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  address public governance;           // Governance (v3: add off-chain/on-chain governance)\n', '  address public base_asset_address;   // Base asset managed by the pool (DAI, USDT, YFI...)\n', '  address public SFI_address;          // SFI token\n', '  uint256 public pool_principal;       // Current principal balance (added minus removed)\n', '  uint256 public pool_interest;        // Current interest balance (redeemable by dsec tokens)\n', '  uint256 public tranche_A_multiplier; // Current yield multiplier for tranche A\n', '  uint256 public SFI_ratio;            // Ratio of base asset to SFI necessary to join tranche A\n', '\n', '  bool public _shutdown = false;       // v0, v1: shutdown the pool after the final capital deploy to prevent burning funds\n', '\n', '  /**** ADAPTERS ****/\n', '  address public best_adapter_address;              // Current best adapter selected by strategy\n', '  uint256 public adapter_total_principal;           // v0, v1: only one adapter\n', '  ISaffronAdapter[] private adapters;               // v2: list of adapters\n', '  mapping(address=>uint256) private adapter_index;  // v1: adapter contract address lookup for array indexes\n', '\n', '  /**** STRATEGY ****/\n', '  address public strategy;\n', '\n', '  /**** EPOCHS ****/\n', '  epoch_params public epoch_cycle = epoch_params({\n', '    start_date: 1604239200,   // 11/01/2020 @ 2:00pm (UTC)\n', '    duration:   14 days       // 1210000 seconds\n', '  });\n', '\n', '  /**** EPOCH INDEXED STORAGE ****/\n', '  uint256[] public epoch_principal;               // Total principal owned by the pool (all tranches)\n', '  mapping(uint256=>bool) public epoch_wound_down; // True if epoch has been wound down already (governance)\n', '\n', '  /**** EPOCH-TRANCHE INDEXED STORAGE ****/\n', '  // Array of arrays, example: tranche_SFI_earned[epoch][Tranche.S]\n', '  address[3][] public dsec_token_addresses;         // Address for each dsec token\n', '  address[3][] public principal_token_addresses;    // Address for each principal token\n', '  uint256[3][] public tranche_total_dsec;           // Total dsec (tokens + vdsec)\n', '  uint256[3][] public tranche_total_principal;      // Total outstanding principal tokens\n', '  uint256[3][] public tranche_total_utilized;       // Total utilized balance in each tranche\n', '  uint256[3][] public tranche_total_unutilized;     // Total unutilized balance in each tranche\n', '  uint256[3][] public tranche_S_virtual_utilized;   // Total utilized virtual balance taken from tranche S (first index unused)\n', '  uint256[3][] public tranche_S_virtual_unutilized; // Total unutilized virtual balance taken from tranche S (first index unused)\n', '  uint256[3][] public tranche_interest_earned;      // Interest earned (calculated at wind_down_epoch)\n', '  uint256[3][] public tranche_SFI_earned;           // Total SFI earned (minted at wind_down_epoch)\n', '\n', '  /**** SFI GENERATION ****/\n', '  // v0: pool generates SFI based on subsidy schedule\n', '  // v1: pool is distributed SFI generated by the strategy contract\n', '  // v1: pools each get an amount of SFI generated depending on the total liquidity added within each interval\n', '  TrancheUint256 public TRANCHE_SFI_MULTIPLIER = TrancheUint256({\n', '    S:   90000,\n', '    AA:  0,\n', '    A:   10000\n', '  });\n', '\n', '  /**** TRANCHE BALANCES ****/\n', '  // (v0 & v1: epochs are hard-forks)\n', '  // (v2: epoch rollover implemented)\n', '  // TrancheUint256 private eternal_unutilized_balances; // Unutilized balance (in base assets) for each tranche (assets held in this pool + assets held in platforms)\n', '  // TrancheUint256 private eternal_utilized_balances;   // Balance for each tranche that is not held within this pool but instead held on a platform via an adapter\n', '\n', '  /**** SAFFRON LP TOKENS ****/\n', '  // If we just have a token address then we can look up epoch and tranche balance tokens using a mapping(address=>SaffronLPdsecInfo)\n', '  // LP tokens are dsec (redeemable for interest+SFI) and principal (redeemable for base asset) tokens\n', '  struct SaffronLPTokenInfo {\n', '    bool        exists;\n', '    uint256     epoch;\n', '    Tranche     tranche;\n', '    LPTokenType token_type;\n', '  }\n', '  mapping(address=>SaffronLPTokenInfo) private saffron_LP_token_info;\n', '\n', '  constructor(address _strategy, address _base_asset, address _SFI_address, uint256 _SFI_ratio, bool epoch_cycle_reset) {\n', '    governance = msg.sender;\n', '    base_asset_address = _base_asset;\n', '    strategy = _strategy;\n', '    SFI_address = _SFI_address;\n', '    tranche_A_multiplier = 10; // v1: start enhanced yield at 10X\n', '    SFI_ratio = _SFI_ratio;    // v1: constant ratio\n', '    epoch_cycle.duration = (epoch_cycle_reset ? 20 minutes : 14 days); // Make testing previous epochs easier\n', '    epoch_cycle.start_date = (epoch_cycle_reset ? (block.timestamp) - (4 * epoch_cycle.duration) : 1604239200); // Make testing previous epochs easier\n', '  }\n', '\n', '  function new_epoch(uint256 epoch, address[] memory saffron_LP_dsec_token_addresses, address[] memory saffron_LP_principal_token_addresses) public {\n', '    require(tranche_total_principal.length == epoch, "improper new epoch");\n', '    require(governance == msg.sender, "must be governance");\n', '\n', '    epoch_principal.push(0);\n', '    tranche_total_dsec.push([0,0,0]);\n', '    tranche_total_principal.push([0,0,0]);\n', '    tranche_total_utilized.push([0,0,0]);\n', '    tranche_total_unutilized.push([0,0,0]);\n', '    tranche_S_virtual_utilized.push([0,0,0]);\n', '    tranche_S_virtual_unutilized.push([0,0,0]);\n', '    tranche_interest_earned.push([0,0,0]);\n', '    tranche_SFI_earned.push([0,0,0]);\n', '\n', '    dsec_token_addresses.push([       // Address for each dsec token\n', '      saffron_LP_dsec_token_addresses[uint256(Tranche.S)],\n', '      saffron_LP_dsec_token_addresses[uint256(Tranche.AA)],\n', '      saffron_LP_dsec_token_addresses[uint256(Tranche.A)]\n', '    ]);\n', '\n', '    principal_token_addresses.push([  // Address for each principal token\n', '      saffron_LP_principal_token_addresses[uint256(Tranche.S)],\n', '      saffron_LP_principal_token_addresses[uint256(Tranche.AA)],\n', '      saffron_LP_principal_token_addresses[uint256(Tranche.A)]\n', '    ]);\n', '\n', '    // Token info for looking up epoch and tranche of dsec tokens by token contract address\n', '    saffron_LP_token_info[saffron_LP_dsec_token_addresses[uint256(Tranche.S)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.S,\n', '      token_type: LPTokenType.dsec\n', '    });\n', '\n', '    saffron_LP_token_info[saffron_LP_dsec_token_addresses[uint256(Tranche.AA)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.AA,\n', '      token_type: LPTokenType.dsec\n', '    });\n', '\n', '    saffron_LP_token_info[saffron_LP_dsec_token_addresses[uint256(Tranche.A)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.A,\n', '      token_type: LPTokenType.dsec\n', '    });\n', '\n', '    // for looking up epoch and tranche of PRINCIPAL tokens by token contract address\n', '    saffron_LP_token_info[saffron_LP_principal_token_addresses[uint256(Tranche.S)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.S,\n', '      token_type: LPTokenType.principal\n', '    });\n', '\n', '    saffron_LP_token_info[saffron_LP_principal_token_addresses[uint256(Tranche.AA)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.AA,\n', '      token_type: LPTokenType.principal\n', '    });\n', '\n', '    saffron_LP_token_info[saffron_LP_principal_token_addresses[uint256(Tranche.A)]] = SaffronLPTokenInfo({\n', '      exists: true,\n', '      epoch: epoch,\n', '      tranche: Tranche.A,\n', '      token_type: LPTokenType.principal\n', '    });\n', '  }\n', '\n', '  struct BalanceVars {\n', '    // Tranche balance\n', '    uint256 deposit;  // User deposit\n', "    uint256 capacity; // Capacity for user's intended tranche\n", '    uint256 change;   // Change from deposit - capacity\n', '\n', '    // S tranche specific vars\n', '    uint256 consumed; // Total consumed\n', '    uint256 utilized_consumed;\n', '    uint256 unutilized_consumed;\n', '    uint256 available_utilized;\n', '    uint256 available_unutilized;\n', '  }\n', '  event TrancheBalance(uint256 tranche, uint256 amount, uint256 deposit, uint256 capacity, uint256 change, uint256 consumed, uint256 utilized_consumed, uint256 unutilized_consumed, uint256 available_utilized, uint256 available_unutilized);\n', '  event DsecGeneration(uint256 time_remaining, uint256 amount, uint256 dsec, address dsec_address, uint256 epoch, uint256 tranche, address user_address, address principal_token_addr);\n', '  event AddLiquidity(uint256 new_pool_principal, uint256 new_epoch_principal, uint256 new_eternal_balance, uint256 new_tranche_principal, uint256 new_tranche_dsec);\n', '  // LP user adds liquidity to the pool\n', '  // Pre-requisite (front-end): have user approve transfer on front-end to base asset using our contract address\n', '  function add_liquidity(uint256 amount, Tranche tranche) external override {\n', '    require(!_shutdown, "pool shutdown");\n', '    require(tranche == Tranche.S || tranche == Tranche.A, "v1: can\'t add_liquidity into AA tranche");\n', '    uint256 epoch = get_current_epoch();\n', '    require(amount != 0, "can\'t add 0");\n', '    require(epoch == 12, "v1.12: only epoch 12 only");\n', '    BalanceVars memory bv = BalanceVars({\n', '      deposit: 0,\n', '      capacity: 0,\n', '      change: 0,\n', '      consumed: 0,\n', '      utilized_consumed: 0,\n', '      unutilized_consumed: 0,\n', '      available_utilized: 0,\n', '      available_unutilized: 0\n', '    });\n', '    (bv.available_utilized, bv.available_unutilized) = get_available_S_balances();\n', '\n', '    if (tranche == Tranche.S) {\n', '      tranche_total_unutilized[epoch][uint256(Tranche.S)] = tranche_total_unutilized[epoch][uint256(Tranche.S)].add(amount);\n', '      bv.deposit = amount;\n', '    }\n', '    // if (tranche == Tranche.AA) {} // v1: AA tranche disabled (S tranche is effectively AA)\n', '    if (tranche == Tranche.A) {\n', "      // Find capacity for S tranche to facilitate a deposit into A. Deposit is min(principal, capacity): restricted by the user's capital or S tranche capacity\n", '      bv.capacity = (bv.available_utilized.add(bv.available_unutilized)).div(tranche_A_multiplier);\n', '      bv.deposit  = (amount < bv.capacity) ? amount : bv.capacity;\n', '      bv.consumed = bv.deposit.mul(tranche_A_multiplier);\n', '      if (bv.consumed <= bv.available_utilized) {\n', '        // Take capacity from tranche S utilized first and give virtual utilized balance to AA\n', '        bv.utilized_consumed = bv.consumed;\n', '      } else {\n', '        // Take capacity from tranche S utilized and tranche S unutilized and give virtual utilized/unutilized balances to AA\n', '        bv.utilized_consumed = bv.available_utilized;\n', '        bv.unutilized_consumed = bv.consumed.sub(bv.utilized_consumed);\n', '        tranche_S_virtual_unutilized[epoch][uint256(Tranche.AA)] = tranche_S_virtual_unutilized[epoch][uint256(Tranche.AA)].add(bv.unutilized_consumed);\n', '      }\n', '      tranche_S_virtual_utilized[epoch][uint256(Tranche.AA)] = tranche_S_virtual_utilized[epoch][uint256(Tranche.AA)].add(bv.utilized_consumed);\n', '      if (bv.deposit < amount) bv.change = amount.sub(bv.deposit);\n', '    }\n', '\n', '    // Calculate the dsec for deposited DAI\n', '    uint256 dsec = bv.deposit.mul(get_seconds_until_epoch_end(epoch));\n', '\n', '    // Update pool principal eternal and epoch state\n', '    pool_principal = pool_principal.add(bv.deposit);                 // Add DAI to principal totals\n', '    epoch_principal[epoch] = epoch_principal[epoch].add(bv.deposit); // Add DAI total balance for epoch\n', '\n', '    // Update dsec and principal balance state\n', '    tranche_total_dsec[epoch][uint256(tranche)] = tranche_total_dsec[epoch][uint256(tranche)].add(dsec);\n', '    tranche_total_principal[epoch][uint256(tranche)] = tranche_total_principal[epoch][uint256(tranche)].add(bv.deposit);\n', '\n', '    // Transfer DAI from LP to pool\n', '    IERC20(base_asset_address).safeTransferFrom(msg.sender, address(this), bv.deposit);\n', '    if (tranche == Tranche.A) IERC20(SFI_address).safeTransferFrom(msg.sender, address(this), bv.deposit * 1 ether / SFI_ratio);\n', '\n', '    // Mint Saffron LP epoch 1 tranche dsec tokens and transfer them to sender\n', '    SaffronLPBalanceToken(dsec_token_addresses[epoch][uint256(tranche)]).mint(msg.sender, dsec);\n', '\n', '    // Mint Saffron LP epoch 1 tranche principal tokens and transfer them to sender\n', '    SaffronLPBalanceToken(principal_token_addresses[epoch][uint256(tranche)]).mint(msg.sender, bv.deposit);\n', '\n', '    emit TrancheBalance(uint256(tranche), bv.deposit, bv.deposit, bv.capacity, bv.change, bv.consumed, bv.utilized_consumed, bv.unutilized_consumed, bv.available_utilized, bv.available_unutilized);\n', '    emit DsecGeneration(get_seconds_until_epoch_end(epoch), bv.deposit, dsec, dsec_token_addresses[epoch][uint256(tranche)], epoch, uint256(tranche), msg.sender, principal_token_addresses[epoch][uint256(tranche)]);\n', '    emit AddLiquidity(pool_principal, epoch_principal[epoch], 0, tranche_total_principal[epoch][uint256(tranche)], tranche_total_dsec[epoch][uint256(tranche)]);\n', '  }\n', '\n', '\n', '  event WindDownEpochSFI(uint256 previous_epoch, uint256 S_SFI, uint256 AA_SFI, uint256 A_SFI);\n', '  event WindDownEpochState(uint256 epoch, uint256 tranche_S_interest, uint256 tranche_AA_interest, uint256 tranche_A_interest, uint256 tranche_SFI_earnings_S, uint256 tranche_SFI_earnings_AA, uint256 tranche_SFI_earnings_A);\n', '  struct WindDownVars {\n', '    uint256 previous_epoch;\n', '    uint256 epoch_interest;\n', '    uint256 epoch_dsec;\n', '    uint256 tranche_A_interest_ratio;\n', '    uint256 tranche_A_interest;\n', '    uint256 tranche_S_interest;\n', '  }\n', '\n', '  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) public override {\n', '    require(msg.sender == strategy, "must be strategy");\n', '    require(!epoch_wound_down[epoch], "epoch already wound down");\n', '    uint256 current_epoch = get_current_epoch();\n', '    require(epoch < current_epoch, "cannot wind down future epoch");\n', '    WindDownVars memory wind_down = WindDownVars({\n', '      previous_epoch: 0,\n', '      epoch_interest: 0,\n', '      epoch_dsec: 0,\n', '      tranche_A_interest_ratio: 0,\n', '      tranche_A_interest: 0,\n', '      tranche_S_interest: 0\n', '    });\n', '    wind_down.previous_epoch = current_epoch - 1;\n', '    require(block.timestamp >= get_epoch_end(wind_down.previous_epoch), "can\'t call before epoch ended");\n', '\n', '    // Calculate SFI earnings per tranche\n', '    tranche_SFI_earned[epoch][uint256(Tranche.S)]  = TRANCHE_SFI_MULTIPLIER.S.mul(amount_sfi).div(100000);\n', '    tranche_SFI_earned[epoch][uint256(Tranche.AA)] = TRANCHE_SFI_MULTIPLIER.AA.mul(amount_sfi).div(100000);\n', '    tranche_SFI_earned[epoch][uint256(Tranche.A)]  = TRANCHE_SFI_MULTIPLIER.A.mul(amount_sfi).div(100000);\n', '\n', '    emit WindDownEpochSFI(wind_down.previous_epoch, tranche_SFI_earned[epoch][uint256(Tranche.S)], tranche_SFI_earned[epoch][uint256(Tranche.AA)], tranche_SFI_earned[epoch][uint256(Tranche.A)]);\n', '    // Calculate interest earnings per tranche\n', '    // Wind down will calculate interest and SFI earned by each tranche for the epoch which has ended\n', '    // Liquidity cannot be removed until wind_down_epoch is called and epoch_wound_down[epoch] is set to true\n', '\n', '    // Calculate pool_interest\n', '    // v0, v1: we only have one adapter\n', '\n', '    ISaffronAdapter adapter = ISaffronAdapter(best_adapter_address);\n', '    wind_down.epoch_interest = adapter.get_interest(adapter_total_principal);\n', '    pool_interest = pool_interest.add(wind_down.epoch_interest);\n', '\n', '    // Total dsec\n', '    // TODO: assert (dsec.totalSupply == epoch_dsec)\n', '    wind_down.epoch_dsec = tranche_total_dsec[epoch][uint256(Tranche.S)].add(tranche_total_dsec[epoch][uint256(Tranche.A)]);\n', '    wind_down.tranche_A_interest_ratio = tranche_total_dsec[epoch][uint256(Tranche.A)].mul(1 ether).div(wind_down.epoch_dsec);\n', '\n', '    // Calculate tranche share of interest\n', '    wind_down.tranche_A_interest = (wind_down.epoch_interest.mul(wind_down.tranche_A_interest_ratio).div(1 ether)).mul(tranche_A_multiplier);\n', '    wind_down.tranche_S_interest = wind_down.epoch_interest.sub(wind_down.tranche_A_interest);\n', '\n', '    // Update state for remove_liquidity\n', '    tranche_interest_earned[epoch][uint256(Tranche.S)]  = wind_down.tranche_S_interest;\n', '    tranche_interest_earned[epoch][uint256(Tranche.AA)] = 0;\n', '    tranche_interest_earned[epoch][uint256(Tranche.A)]  = wind_down.tranche_A_interest;\n', '\n', '    // Distribute SFI earnings to S tranche based on S tranche % share of dsec via vdsec\n', '    emit WindDownEpochState(epoch, wind_down.tranche_S_interest, 0, wind_down.tranche_A_interest, uint256(tranche_SFI_earned[epoch][uint256(Tranche.S)]), uint256(tranche_SFI_earned[epoch][uint256(Tranche.AA)]), uint256(tranche_SFI_earned[epoch][uint256(Tranche.A)]));\n', '    epoch_wound_down[epoch] = true;\n', '    delete wind_down;\n', '  }\n', '\n', '  event RemoveLiquidityDsec(uint256 dsec_percent, uint256 interest_owned, uint256 SFI_owned);\n', '  event RemoveLiquidityPrincipal(uint256 principal);\n', '  function remove_liquidity(address dsec_token_address, uint256 dsec_amount, address principal_token_address, uint256 principal_amount) external override {\n', '    require(dsec_amount > 0 || principal_amount > 0, "can\'t remove 0");\n', '    ISaffronAdapter best_adapter = ISaffronAdapter(best_adapter_address);\n', '    uint256 interest_owned;\n', '    uint256 SFI_earn;\n', '    uint256 SFI_return;\n', '    uint256 dsec_percent;\n', '\n', '    // Update state for removal via dsec token\n', '    if (dsec_token_address != address(0x0) && dsec_amount > 0) {\n', '      // Get info about the v1 dsec token from its address and check that it exists\n', '      SaffronLPTokenInfo memory token_info = saffron_LP_token_info[dsec_token_address];\n', '      require(token_info.exists, "balance token lookup failed");\n', '      SaffronLPBalanceToken sbt = SaffronLPBalanceToken(dsec_token_address);\n', '      require(sbt.balanceOf(msg.sender) >= dsec_amount, "insufficient dsec balance");\n', '\n', '      // Token epoch must be a past epoch\n', '      uint256 token_epoch = token_info.epoch;\n', '      require(token_info.token_type == LPTokenType.dsec, "bad dsec address");\n', '      require(token_epoch == 12, "v1.12: bal token epoch must be 12");\n', '      require(epoch_wound_down[token_epoch], "can\'t remove from wound up epoch");\n', '      uint256 tranche_dsec = tranche_total_dsec[token_epoch][uint256(token_info.tranche)];\n', '\n', "      // Dsec gives user claim over a tranche's earned SFI and interest\n", '      dsec_percent = (tranche_dsec == 0) ? 0 : dsec_amount.mul(1 ether).div(tranche_dsec);\n', '      interest_owned = tranche_interest_earned[token_epoch][uint256(token_info.tranche)].mul(dsec_percent) / 1 ether;\n', '      SFI_earn = tranche_SFI_earned[token_epoch][uint256(token_info.tranche)].mul(dsec_percent) / 1 ether;\n', '\n', '      tranche_interest_earned[token_epoch][uint256(token_info.tranche)] = tranche_interest_earned[token_epoch][uint256(token_info.tranche)].sub(interest_owned);\n', '      tranche_SFI_earned[token_epoch][uint256(token_info.tranche)] = tranche_SFI_earned[token_epoch][uint256(token_info.tranche)].sub(SFI_earn);\n', '      tranche_total_dsec[token_epoch][uint256(token_info.tranche)] = tranche_total_dsec[token_epoch][uint256(token_info.tranche)].sub(dsec_amount);\n', '      pool_interest = pool_interest.sub(interest_owned);\n', '    }\n', '\n', '    // Update state for removal via principal token\n', '    if (principal_token_address != address(0x0) && principal_amount > 0) {\n', '      // Get info about the v1 dsec token from its address and check that it exists\n', '      SaffronLPTokenInfo memory token_info = saffron_LP_token_info[principal_token_address];\n', '      require(token_info.exists, "balance token info lookup failed");\n', '      SaffronLPBalanceToken sbt = SaffronLPBalanceToken(principal_token_address);\n', '      require(sbt.balanceOf(msg.sender) >= principal_amount, "insufficient principal balance");\n', '\n', '      // Token epoch must be a past epoch\n', '      uint256 token_epoch = token_info.epoch;\n', '      require(token_info.token_type == LPTokenType.principal, "bad balance token address");\n', '      require(token_epoch == 12, "v1.12: bal token epoch must be 12");\n', '      require(epoch_wound_down[token_epoch], "can\'t remove from wound up epoch");\n', '\n', '      tranche_total_principal[token_epoch][uint256(token_info.tranche)] = tranche_total_principal[token_epoch][uint256(token_info.tranche)].sub(principal_amount);\n', '      epoch_principal[token_epoch] = epoch_principal[token_epoch].sub(principal_amount);\n', '      pool_principal = pool_principal.sub(principal_amount);\n', '      adapter_total_principal = adapter_total_principal.sub(principal_amount);\n', '      if (token_info.tranche == Tranche.A) SFI_return = principal_amount * 1 ether / SFI_ratio;\n', '    }\n', '\n', '    // Transfer\n', '    if (dsec_token_address != address(0x0) && dsec_amount > 0) {\n', '      SaffronLPBalanceToken sbt = SaffronLPBalanceToken(dsec_token_address);\n', '      require(sbt.balanceOf(msg.sender) >= dsec_amount, "insufficient dsec balance");\n', '      sbt.burn(msg.sender, dsec_amount);\n', '      if (interest_owned > 0) {\n', '        best_adapter.return_capital(interest_owned, msg.sender);\n', '      }\n', '      IERC20(SFI_address).safeTransfer(msg.sender, SFI_earn);\n', '      emit RemoveLiquidityDsec(dsec_percent, interest_owned, SFI_earn);\n', '    }\n', '    if (principal_token_address != address(0x0) && principal_amount > 0) {\n', '      SaffronLPBalanceToken sbt = SaffronLPBalanceToken(principal_token_address);\n', '      require(sbt.balanceOf(msg.sender) >= principal_amount, "insufficient principal balance");\n', '      sbt.burn(msg.sender, principal_amount);\n', '      best_adapter.return_capital(principal_amount, msg.sender);\n', '      IERC20(SFI_address).safeTransfer(msg.sender, SFI_return);\n', '      emit RemoveLiquidityPrincipal(principal_amount);\n', '    }\n', '\n', '    require((dsec_token_address != address(0x0) && dsec_amount > 0) || (principal_token_address != address(0x0) && principal_amount > 0), "no action performed");\n', '  }\n', '\n', '  // Strategy contract calls this to deploy capital to platforms\n', '  event StrategicDeploy(address adapter_address, uint256 amount, uint256 epoch);\n', '  function hourly_strategy(address adapter_address) external override {\n', '    require(msg.sender == strategy, "must be strategy");\n', '    require(!_shutdown, "pool shutdown");\n', '    uint256 epoch = get_current_epoch();\n', '    best_adapter_address = adapter_address;\n', '    ISaffronAdapter best_adapter = ISaffronAdapter(adapter_address);\n', '    uint256 amount = IERC20(base_asset_address).balanceOf(address(this));\n', '\n', '    // Update utilized/unutilized epoch-tranche state\n', '    tranche_total_utilized[epoch][uint256(Tranche.S)] = tranche_total_utilized[epoch][uint256(Tranche.S)].add(tranche_total_unutilized[epoch][uint256(Tranche.S)]);\n', '    tranche_total_utilized[epoch][uint256(Tranche.A)] = tranche_total_utilized[epoch][uint256(Tranche.A)].add(tranche_total_unutilized[epoch][uint256(Tranche.A)]);\n', '    tranche_S_virtual_utilized[epoch][uint256(Tranche.AA)] = tranche_S_virtual_utilized[epoch][uint256(Tranche.AA)].add(tranche_S_virtual_unutilized[epoch][uint256(Tranche.AA)]);\n', '\n', '    tranche_total_unutilized[epoch][uint256(Tranche.S)] = 0;\n', '    tranche_total_unutilized[epoch][uint256(Tranche.A)] = 0;\n', '    tranche_S_virtual_unutilized[epoch][uint256(Tranche.AA)] = 0;\n', '\n', '    // Add principal to adapter total\n', '    adapter_total_principal = adapter_total_principal.add(amount);\n', '    emit StrategicDeploy(adapter_address, amount, epoch);\n', '\n', '    // Move base assets to adapter and deploy\n', '    IERC20(base_asset_address).safeTransfer(adapter_address, amount);\n', '    best_adapter.deploy_capital(amount);\n', '  }\n', '\n', '  function shutdown() external override {\n', '    require(msg.sender == strategy || msg.sender == governance, "must be strategy");\n', '    require(block.timestamp > get_epoch_end(1) - 1 days, "trying to shutdown too early");\n', '    _shutdown = true;\n', '  }\n', '\n', '  /*** GOVERNANCE ***/\n', '  function set_governance(address to) external override {\n', '    require(msg.sender == governance, "must be governance");\n', '    governance = to;\n', '  }\n', '\n', '  function set_best_adapter(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    best_adapter_address = to;\n', '  }\n', '\n', '  /*** TIME UTILITY FUNCTIONS ***/\n', '  function get_epoch_end(uint256 epoch) public view returns (uint256) {\n', '    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration));\n', '  }\n', '\n', '  function get_current_epoch() public view returns (uint256) {\n', '    require(block.timestamp > epoch_cycle.start_date, "before epoch 0");\n', '    return (block.timestamp - epoch_cycle.start_date) / epoch_cycle.duration;\n', '  }\n', '\n', '  function get_seconds_until_epoch_end(uint256 epoch) public view returns (uint256) {\n', '    return epoch_cycle.start_date.add(epoch.add(1).mul(epoch_cycle.duration)).sub(block.timestamp);\n', '  }\n', '\n', '  /*** GETTERS ***/\n', '  function get_available_S_balances() public view returns(uint256, uint256) {\n', '    uint256 epoch = get_current_epoch();\n', '    uint256 AA_A_utilized = tranche_S_virtual_utilized[epoch][uint256(Tranche.A)].add(tranche_S_virtual_utilized[epoch][uint256(Tranche.AA)]);\n', '    uint256 AA_A_unutilized = tranche_S_virtual_unutilized[epoch][uint256(Tranche.A)].add(tranche_S_virtual_unutilized[epoch][uint256(Tranche.AA)]);\n', '    uint256 S_utilized = tranche_total_utilized[epoch][uint256(Tranche.S)];\n', '    uint256 S_unutilized = tranche_total_unutilized[epoch][uint256(Tranche.S)];\n', '    return ((S_utilized > AA_A_utilized ? S_utilized - AA_A_utilized : 0), (S_unutilized > AA_A_unutilized ? S_unutilized - AA_A_unutilized : 0));\n', '  }\n', '\n', '  function get_epoch_cycle_params() external view override returns (uint256, uint256) {\n', '    return (epoch_cycle.start_date, epoch_cycle.duration);\n', '  }\n', '\n', '  function get_base_asset_address() external view override returns(address) {\n', '    return base_asset_address;\n', '  }\n', '\n', '  //***** ADAPTER FUNCTIONS *****//\n', '  // Delete adapters (v0: for v0 wind-down)\n', '  function delete_adapters() external {\n', '    require(msg.sender == governance, "must be governance");\n', '    require(block.timestamp > get_epoch_end(12) + 10 weeks, "too soon");\n', '    delete adapters;\n', '  }\n', '\n', '  event ErcSwept(address who, address to, address token, uint256 amount);\n', '  function erc_sweep(address _token, address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '    require(_token != base_asset_address && _token != SFI_address, "cannot sweep pool assets");\n', '\n', '    IERC20 tkn = IERC20(_token);\n', '    uint256 tBal = tkn.balanceOf(address(this));\n', '    tkn.safeTransfer(_to, tBal);\n', '\n', '    emit ErcSwept(msg.sender, _to, _token, tBal);\n', '  }\n', '\n', '  event Swept(address who, address to, uint256 sfiBal, uint256 baseBal);\n', '  function sweep(address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '\n', '    IERC20 tkn = IERC20(address(SFI_address));\n', '    uint256 sfiBal = tkn.balanceOf(address(this));\n', '    tkn.safeTransfer(_to, sfiBal);\n', '\n', '    IERC20 base = IERC20(address(base_asset_address));\n', '    uint256 baseBal = base.balanceOf(address(this));\n', '    base.safeTransfer(_to, baseBal);\n', '\n', '    emit Swept(msg.sender, _to, sfiBal, baseBal);\n', '  }\n', '\n', '  function set_strategy(address to) external {\n', '    require(msg.sender == governance, "must be governance");\n', '    strategy = to;\n', '  }\n', '}']