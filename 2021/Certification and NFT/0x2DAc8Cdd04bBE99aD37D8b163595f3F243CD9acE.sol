['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-04\n', '*/\n', '\n', 'pragma solidity ^0.5.12;\n', '\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProof {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '//TODO add safemath\n', 'interface IDPR {\n', '    function transferFrom(address _spender, address _to, uint256 _amount) external returns(bool);\n', '    function transfer(address _to, uint256 _amount) external returns(bool);\n', '    function balanceOf(address _owner) external view returns(uint256);\n', '}\n', '\n', 'contract MerkleClaim {\n', '    using SafeMath for uint256;\n', '\n', '    bytes32 public root;\n', '    IDPR public dpr;\n', '    //system info\n', '    address public owner;\n', '    uint256 public total_release_periods = 276;\n', '    uint256 public start_time = 1620604800; //2021 年 05 月 10 日 08:00\n', '    // uer info \n', '    mapping(address=>uint256) public total_lock_amount;\n', '    mapping(address=>uint256) public release_per_period;\n', '    mapping(address=>uint256) public user_released;\n', '    mapping(bytes32=>bool) public claimMap;\n', '    mapping(address=>bool) public userMap;\n', '    //=====events=======\n', '    event claim(address _addr, uint256 _amount);\n', '    event distribute(address _addr, uint256 _amount);\n', '    event OwnerTransfer(address _newOwner);\n', '\n', '    //====modifiers====\n', '    modifier onlyOwner(){\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor(bytes32 _root, address _token) public{\n', '        root = _root;\n', '        dpr = IDPR(_token);\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function transferOwnerShip(address _newOwner) onlyOwner external {\n', '        require(_newOwner != address(0), "MerkleClaim: Wrong owner");\n', '        owner = _newOwner;\n', '        emit OwnerTransfer(_newOwner);\n', '    }\n', '\n', '    function setClaim(bytes32 node) private {\n', '        claimMap[node] = true;\n', '    }\n', '\n', '    function distributeAndLock(address _addr, uint256 _amount, bytes32[]  memory proof) public{\n', '        require(!userMap[_addr], "MerkleClaim: Account is already claimed");\n', '        bytes32 node = keccak256(abi.encodePacked(_addr, _amount));\n', '        require(!claimMap[node], "MerkleClaim: Account is already claimed");\n', '        require(MerkleProof.verify(proof, root, node), "MerkleClaim: Verify failed");\n', '        //update status\n', '        setClaim(node);\n', '        lockTokens(_addr, _amount);\n', '        userMap[_addr] = true;\n', '        emit distribute(_addr, _amount);\n', '    }\n', '\n', '    function lockTokens(address _addr, uint256 _amount) private{\n', '        total_lock_amount[_addr] = _amount;\n', '        release_per_period[_addr] = _amount.div(total_release_periods);\n', '    }\n', '\n', '    function claimTokens() external {\n', '        require(total_lock_amount[msg.sender] != 0, "User does not have lock record");\n', '        require(total_lock_amount[msg.sender].sub(user_released[msg.sender]) > 0, "all token has been claimed");\n', '        uint256 periods = block.timestamp.sub(start_time).div(1 days);\n', '        uint256 total_release_amount = release_per_period[msg.sender].mul(periods);\n', '        \n', '        if(total_release_amount >= total_lock_amount[msg.sender]){\n', '            total_release_amount = total_lock_amount[msg.sender];\n', '        }\n', '\n', '        uint256 release_amount = total_release_amount.sub(user_released[msg.sender]);\n', '        // update user info\n', '        user_released[msg.sender] = total_release_amount;\n', '        require(dpr.balanceOf(address(this)) >= release_amount, "MerkleClaim: Balance not enough");\n', '        require(dpr.transfer(msg.sender, release_amount), "MerkleClaim: Transfer Failed");    \n', '        emit claim(msg.sender, release_amount);\n', '    }\n', '\n', '    function unreleased() external view returns(uint256){\n', '        return total_lock_amount[msg.sender].sub(user_released[msg.sender]);\n', '    }\n', '\n', '    function withdraw(address _to) external onlyOwner{\n', '        require(dpr.transfer(_to, dpr.balanceOf(address(this))), "MerkleClaim: Transfer Failed");\n', '    }\n', '\n', '    function pullTokens(uint256 _amount) external onlyOwner{\n', '        require(dpr.transferFrom(owner, address(this), _amount), "MerkleClaim: TransferFrom failed");\n', '    }\n', '}']