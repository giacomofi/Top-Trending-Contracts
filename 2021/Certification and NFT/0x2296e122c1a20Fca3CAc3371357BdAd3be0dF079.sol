['// SPDX-License-Identifier: AGPL-3.0-only\n', '\n', 'pragma solidity 0.7.5;\n', '\n', 'import "@openzeppelin/contracts/utils/Address.sol";\n', 'import "../interfaces/IPoolEscrow.sol";\n', '\n', '/**\n', ' * @title PoolEscrow\n', ' *\n', ' * @dev PoolEscrow contract is used to receive transfers from ETH2 system contract for the pool validators.\n', ' * The withdrawal credentials of the Pool must be set to\n', ' * https://github.com/ethereum/eth2.0-specs/blob/v1.1.0-alpha.2/specs/phase0/validator.md#eth1_address_withdrawal_prefix\n', ' * using the address of this contract as a destination.\n', ' */\n', 'contract PoolEscrow is IPoolEscrow {\n', '    using Address for address payable;\n', '\n', '    // @dev The address of the current contract owner.\n', '    address public override owner;\n', '\n', '    // @dev The address the ownership is planned to be transferred to.\n', '    address public override futureOwner;\n', '\n', '    /**\n', '    * @dev Constructor for initializing the PoolEscrow contract.\n', '    * @param _owner - address of the contract owner.\n', '    */\n', '    constructor(address _owner) {\n', '        owner = _owner;\n', '        emit OwnershipTransferApplied(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender, "PoolEscrow: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPoolEscrow-commitOwnershipTransfer}.\n', '     */\n', '    function commitOwnershipTransfer(address newOwner) external override onlyOwner {\n', '        // can be zero address to reset incorrect future owner\n', '        futureOwner = newOwner;\n', '        emit OwnershipTransferCommitted(msg.sender, newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPoolEscrow-applyOwnershipTransfer}.\n', '     */\n', '    function applyOwnershipTransfer() external override {\n', '        address newOwner = futureOwner;\n', '        require(newOwner == msg.sender, "PoolEscrow: caller is not the future owner");\n', '\n', '        emit OwnershipTransferApplied(owner, newOwner);\n', '        (owner, futureOwner) = (newOwner, address(0));\n', '    }\n', '\n', '    /**\n', '     * @dev See {IPoolEscrow-withdraw}.\n', '     */\n', '    function withdraw(address payable payee, uint256 amount) external override onlyOwner {\n', '        require(payee != address(0), "PoolEscrow: payee is the zero address");\n', '        emit Withdrawn(msg.sender, payee, amount);\n', '        payee.sendValue(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev Function for receiving withdrawals from ETH2 system contract.\n', '    */\n', '    receive() external payable { }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-only\n', '\n', 'pragma solidity 0.7.5;\n', '\n', '/**\n', ' * @dev Interface of the PoolEscrow contract.\n', ' */\n', 'interface IPoolEscrow {\n', '    /**\n', '    * @dev Event for tracking withdrawn ether.\n', '    * @param sender - the address of the transaction sender.\n', '    * @param payee - the address where the funds were transferred to.\n', '    * @param amount - the amount of ether transferred to payee.\n', '    */\n', '    event Withdrawn(address indexed sender, address indexed payee, uint256 amount);\n', '\n', '    /**\n', '    * @dev Event for tracking ownership transfer commits.\n', '    * @param currentOwner - the address of the current owner.\n', '    * @param futureOwner - the address the ownership is planned to be transferred to.\n', '    */\n', '    event OwnershipTransferCommitted(address indexed currentOwner, address indexed futureOwner);\n', '\n', '    /**\n', '    * @dev Event for tracking ownership transfers.\n', '    * @param previousOwner - the address the ownership was transferred from.\n', '    * @param newOwner - the address the ownership was transferred to.\n', '    */\n', '    event OwnershipTransferApplied(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '    * @dev Function for retrieving the address of the current owner.\n', '    */\n', '    function owner() external view returns (address);\n', '\n', '    /**\n', '    * @dev Function for retrieving the address of the future owner.\n', '    */\n', '    function futureOwner() external view returns (address);\n', '\n', '    /**\n', '     * @dev Commit contract ownership transfer to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function commitOwnershipTransfer(address newOwner) external;\n', '\n', '    /**\n', '     * @dev Apply contract ownership transfer to a new account (`futureOwner`).\n', '     * Can only be called by the future owner.\n', '     */\n', '    function applyOwnershipTransfer() external;\n', '\n', '    /**\n', '     * @dev Withdraw balance for a payee, forwarding all gas to the\n', '     * recipient. Can only be called by the current owner.\n', '     *\n', '     * WARNING: Forwarding all gas opens the door to reentrancy vulnerabilities.\n', '     * Make sure you trust the recipient, or are either following the\n', '     * checks-effects-interactions pattern or using {ReentrancyGuard}.\n', '     *\n', '     * @param payee - the address where the funds will be transferred to.\n', '     * @param amount - the amount of ether to transfer to payee.\n', '     */\n', '    function withdraw(address payable payee, uint256 amount) external;\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']