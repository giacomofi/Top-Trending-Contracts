['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        unchecked {\n', '            uint256 oldAllowance = token.allowance(address(this), spender);\n', '            require(oldAllowance >= value, "SafeERC20: decreased allowance below zero");\n', '            uint256 newAllowance = oldAllowance - value;\n', '            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableData {\n', '    address public owner;\n', '    address public pendingOwner;\n', '}\n', '\n', 'abstract contract Ownable is OwnableData {\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), msg.sender);\n', '    }\n', '\n', '    function transferOwnership(address newOwner, bool direct, bool renounce) public onlyOwner {\n', '        if (direct) {\n', '\n', '            require(newOwner != address(0) || renounce, "Ownable: zero address");\n', '\n', '            emit OwnershipTransferred(owner, newOwner);\n', '            owner = newOwner;\n', '        } else {\n', '            pendingOwner = newOwner;\n', '        }\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        address _pendingOwner = pendingOwner;\n', '\n', '        require(msg.sender == _pendingOwner, "Ownable: caller != pending owner");\n', '\n', '        emit OwnershipTransferred(owner, _pendingOwner);\n', '        owner = _pendingOwner;\n', '        pendingOwner = address(0);\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '}\n', '\n', 'contract StorageBuffer {\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[20] private _gap;\n', '\n', '    function getStore(uint a) internal view returns(uint) {\n', '        require(a < 20, "Not allowed");\n', '        return _gap[a];\n', '    }\n', '\n', '    function setStore(uint a, uint val) internal {\n', '        require(a < 20, "Not allowed");\n', '        _gap[a] = val;\n', '    }\n', '}\n', '\n', '// This contract is dedicated to process LP tokens of the users. More precisely, this allows Popsicle to track how much tokens\n', '// the user has deposited and indicate how much he is eligible to withdraw \n', 'abstract contract LPTokenWrapper is StorageBuffer {\n', '    using SafeERC20 for IERC20;\n', '\n', '// Address of ICE token\n', '    IERC20 public immutable ice;\n', '    // Address of LP token\n', '    IERC20 public immutable lpToken;\n', '\n', '// Amount of Lp tokens deposited\n', '    uint256 private _totalSupply;\n', '    // A place where user token balance is stored\n', '    mapping(address => uint256) private _balances;\n', '\n', '// Function modifier that calls update reward function\n', '    modifier updateReward(address account) {\n', '        _updateReward(account);\n', '        _;\n', '    }\n', '\n', '    constructor(address _ice, address _lpToken) {\n', '        require(_ice != address(0) && _lpToken != address(0), "NULL_ADDRESS");\n', '        ice = IERC20(_ice);\n', '        lpToken = IERC20(_lpToken);\n', '    }\n', '// View function that provides tptal supply for the front end \n', '    function totalSupply() public view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '// View function that provides the LP balance of a user\n', '    function balanceOf(address account) public view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '// Fuction that is responsible for the recival of  LP tokens of the user and the update of the user balance \n', '    function stake(uint256 amount) virtual public {\n', '        _totalSupply += amount;\n', '        _balances[msg.sender] += amount;\n', '        lpToken.safeTransferFrom(msg.sender, address(this), amount);\n', '    }\n', '// Function that is reponsible for releasing LP tokens to the user and for the update of the user balance \n', '    function withdraw(uint256 amount) virtual public {\n', '        _totalSupply -= amount;\n', '        _balances[msg.sender] -= amount;\n', '        lpToken.safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '//Interface \n', '    function _updateReward(address account) virtual internal;\n', '}\n', '\n', '/**\n', ' * This contract is responsible fpr forwarding LP tokens to Masterchef contract.\n', ' * It calculates ICE rewards and distrubutes both ICE and Sushi\n', ' */\n', 'contract PopsicleJointStaking is LPTokenWrapper, Ownable {\n', '    using SafeERC20 for IERC20;\n', '    // Immutable Address of Sushi token\n', '    IERC20 public immutable sushi;\n', '    // Immutable masterchef contract address\n', '    IMasterChef public immutable masterChef;\n', '    uint256 public immutable pid; // sushi pool id\n', '\n', '// Reward rate - This is done to set ICE reward rate proportion. \n', '    uint256 public rewardRate = 2000000;\n', '// Custom divisioner that is implemented in order to give the ability to alter rate reward according to the project needs\n', '    uint256 public constant DIVISIONER = 10 ** 6;\n', '\n', '// Set of variables that is storing user Sushi rewards\n', '    uint256 public sushiPerTokenStored;\n', '    // Info of each user.\n', '    struct UserInfo {\n', '        uint256 remainingIceTokenReward; // Remaining Token amount that is owned to the user.\n', '        uint256 sushiPerTokenPaid;\n', '        uint256 sushiRewards;\n', '    }\n', '    \n', '    // Info of each user that stakes ICE tokens.\n', '    mapping(address => UserInfo) public userInfo;\n', '    //mapping(address => uint256) public sushiPerTokenPaid;\n', '    //mapping(address => uint256) public sushiRewards;\n', '\n', '    event Staked(address indexed user, uint256 amount);\n', '    event Withdrawn(address indexed user, uint256 amount);\n', '    event RewardPaid(address indexed user, uint256 reward);\n', '    event SushiPaid(address indexed user, uint256 reward);\n', '\n', '    constructor(\n', '        address _ice,\n', '        address _sushi,\n', '        address _lpToken,\n', '        address _masterChef,\n', '        uint256 _pid\n', '    )\n', '        LPTokenWrapper(_ice, _lpToken)\n', '    {\n', '        require(\n', '           _sushi != address(0) && _masterChef != address(0),\n', '           "NULL_ADDRESSES"\n', '        );\n', '        sushi = IERC20(_sushi);\n', '        masterChef = IMasterChef(_masterChef);\n', '        pid = _pid;\n', '    }\n', '// Function which tracks rewards of a user and harvests all sushi rewards from Masterchef\n', '    function _updateReward(address account) override internal {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint _then = sushi.balanceOf(address(this));\n', '        masterChef.withdraw(pid, 0); // harvests sushi\n', '        sushiPerTokenStored = _sushiPerToken(sushi.balanceOf(address(this)) - _then);\n', '\n', '        if (account != address(0)) {\n', '            user.sushiRewards = _sushiEarned(account, sushiPerTokenStored);\n', '            user.sushiPerTokenPaid = sushiPerTokenStored;\n', '        }\n', '    }\n', '\n', '// View function which shows sushi rewards amount of our Pool \n', '    function sushiPerToken() public view returns (uint256) {\n', '        return _sushiPerToken(masterChef.pendingSushi(pid, address(this)));\n', '    }\n', '// Calculates how much sushi is provied per LP token \n', '    function _sushiPerToken(uint earned_) internal view returns (uint256) {\n', '        uint _totalSupply = totalSupply();\n', '        if (_totalSupply > 0) {\n', '            return (sushiPerTokenStored + earned_) * 1e18 / _totalSupply;\n', '        }\n', '        return sushiPerTokenStored;\n', '    }\n', '// View function which shows user ICE reward for displayment on frontend\n', '    function earned(address account) public view returns (uint256) {\n', '        UserInfo memory user = userInfo[account];\n', '        return _sushiEarned(account, sushiPerToken()) * rewardRate / DIVISIONER + user.remainingIceTokenReward;\n', '    }\n', '// View function which shows user Sushi reward for displayment on frontend\n', '    function sushiEarned(address account) public view returns (uint256) {\n', '        return _sushiEarned(account, sushiPerToken());\n', '    }\n', '// Calculates how much sushi is entitled for a particular user\n', '    function _sushiEarned(address account, uint256 sushiPerToken_) internal view returns (uint256) {\n', '        UserInfo memory user = userInfo[account];\n', '        return\n', '            balanceOf(account) * (sushiPerToken_ - user.sushiPerTokenPaid) / 1e18 + user.sushiRewards;\n', '    }\n', '\n', "    // stake visibility is public as overriding LPTokenWrapper's stake() function\n", '    //Recieves users LP tokens and deposits them to Masterchef contract\n', '    function stake(uint256 amount) override public updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot stake 0");\n', '        super.stake(amount);\n', '        lpToken.approve(address(masterChef), amount);\n', '        masterChef.deposit(pid, amount);\n', '        emit Staked(msg.sender, amount);\n', '    }\n', '// Recieves Lp tokens from Masterchef and give it out to the user\n', '    function withdraw(uint256 amount) override public updateReward(msg.sender) {\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        masterChef.withdraw(pid, amount); // harvests sushi\n', '        super.withdraw(amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '    }\n', '\n', '    // "Go home" function which withdraws all Funds and distributes all rewards to the user\n', '    function exit() external {\n', '        require(msg.sender != address(0));\n', '        \n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint _then = sushi.balanceOf(address(this));\n', '        uint256 amount = balanceOf(msg.sender);\n', '        require(amount > 0, "Cannot withdraw 0");\n', '        \n', '        masterChef.withdraw(pid, amount); // harvests sushi\n', '        sushiPerTokenStored = _sushiPerToken(sushi.balanceOf(address(this)) - _then);\n', '        \n', '        user.sushiRewards = _sushiEarned(msg.sender, sushiPerTokenStored);\n', '        user.sushiPerTokenPaid = sushiPerTokenStored;\n', '        \n', '        super.withdraw(amount);\n', '        emit Withdrawn(msg.sender, amount);\n', '        \n', '        uint256 reward = user.sushiRewards;\n', '        if (reward > 0) {\n', '            user.sushiRewards = 0;\n', '            sushi.safeTransfer(msg.sender, reward);\n', '            emit SushiPaid(msg.sender, reward);\n', '        }\n', '        reward = reward * rewardRate / DIVISIONER + user.remainingIceTokenReward;\n', '        if (reward > 0)\n', '        {\n', '            user.remainingIceTokenReward = safeRewardTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '        \n', '    }\n', '    // Changes rewards rate of ICE token\n', '    function setRewardRate(uint256 _rewardRate) external onlyOwner {\n', '        rewardRate = _rewardRate;\n', '    }\n', '// Harvests rewards to the user but leaves the Lp tokens deposited\n', '    function getReward() public updateReward(msg.sender) {\n', '        UserInfo storage user = userInfo[msg.sender];\n', '        uint256 reward = user.sushiRewards;\n', '        if (reward > 0) {\n', '            user.sushiRewards = 0;\n', '            sushi.safeTransfer(msg.sender, reward);\n', '            emit SushiPaid(msg.sender, reward);\n', '        }\n', '        reward = reward * rewardRate / DIVISIONER + user.remainingIceTokenReward;\n', '        if (reward > 0)\n', '        {\n', '            user.remainingIceTokenReward = safeRewardTransfer(msg.sender, reward);\n', '            emit RewardPaid(msg.sender, reward);\n', '        }\n', '    }\n', '    \n', '    // Safe token distribution\n', '    function safeRewardTransfer(address _to, uint256 _amount) internal returns(uint256) {\n', '        uint256 rewardTokenBalance = ice.balanceOf(address(this));\n', '        if (rewardTokenBalance == 0) { //save some gas fee\n', '            return _amount;\n', '        }\n', '        if (_amount > rewardTokenBalance) { //save some gas fee\n', '            ice.transfer(_to, rewardTokenBalance);\n', '            return _amount - rewardTokenBalance;\n', '        }\n', '        ice.transfer(_to, _amount);\n', '        return 0;\n', '    }\n', '}\n', '// Implemented to call functions of masterChef\n', 'interface IMasterChef {\n', '    function deposit(uint256 pid, uint256 amount) external;\n', '    function withdraw(uint256 pid, uint256 amount) external;\n', '    function pendingSushi(uint256 pid, address user) external view returns(uint);\n', '}']