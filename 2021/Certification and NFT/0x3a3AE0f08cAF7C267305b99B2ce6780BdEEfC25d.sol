['// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./ERC20/IERC20.sol";\n', 'import "./ERC20/IERC20Permit.sol";\n', 'import "./ERC20/SafeERC20.sol";\n', 'import "./interfaces/IRERC20.sol";\n', 'import "./interfaces/IRulerCore.sol";\n', 'import "./interfaces/IRouter.sol";\n', 'import "./interfaces/IRulerZap.sol";\n', 'import "./interfaces/IMetaPool.sol";\n', 'import "./utils/Ownable.sol";\n', '\n', '/**\n', ' * @title Ruler Protocol Zap\n', ' * @author alan\n', ' * Main logic is in _depositAndAddLiquidity & _depositAndSwapToPaired\n', ' */\n', 'contract RulerZap is Ownable, IRulerZap {\n', '    using SafeERC20 for IERC20;\n', '    IRulerCore public override core;\n', '    IRouter public override router;\n', '\n', '    constructor (IRulerCore _core, IRouter _router) {\n', '        require(address(_core) != address(0), "RulerZap: _core is 0");\n', '        require(address(_router) != address(0), "RulerZap: _router is 0");\n', '        core = _core;\n', '        router = _router;\n', '        initializeOwner();\n', '    }\n', '\n', '    /**\n', '    * @notice Deposit collateral `_col` to receive paired token `_paired` and rrTokens\n', '    *  - deposits collateral to receive rcTokens and rrTokens\n', '    *  - rcTokens are swapped into paired token through router\n', '    *  - paired token and rrTokens are sent to sender\n', '    */\n', '    function depositAndSwapToPaired(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _minPairedOut,\n', '        address[] calldata _path,\n', '        uint256 _deadline\n', '    ) external override {\n', '        _depositAndSwapToPaired(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _minPairedOut, \n', '            _path, \n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function depositWithPermitAndSwapToPaired(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _minPairedOut,\n', '        address[] calldata _path,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_col), _colPermit);\n', '        _depositAndSwapToPaired(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _minPairedOut, \n', '            _path, \n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function depositAndSwapWithCurve(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        address _poolAddress,\n', '        int128 _outTokenIndex,\n', '        uint256 _minOut\n', '    ) external override {\n', '        _depositAndSwapWithCurve(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _poolAddress, \n', '            _outTokenIndex, \n', '            _minOut\n', '        );\n', '    }\n', '\n', '    function depositWithPermitAndSwapWithCurve(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        address _poolAddress,\n', '        int128 _outTokenIndex,\n', '        uint256 _minOut,\n', '        Permit calldata _colPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_col), _colPermit);\n', '        _depositAndSwapWithCurve(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _poolAddress, \n', '            _outTokenIndex, \n', '            _minOut\n', '        );\n', '    }\n', '\n', '    /**\n', '    * @notice Deposit collateral `_col` to receive LP tokens and rrTokens\n', '    *  - deposits collateral to receive rcTokens and rrTokens\n', '    *  - transfers paired token from sender\n', '    *  - rcTokens and `_paired` tokens are added as liquidity to receive LP tokens\n', '    *  - LP tokens and rrTokens are sent to sender\n', '    */\n', '    function depositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) external override {\n', '        _depositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function depositWithColPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_col), _colPermit);\n', '        _depositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function depositWithPairedPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _pairedPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_paired), _pairedPermit);\n', '        _depositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function depositWithBothPermitsAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit,\n', '        Permit calldata _pairedPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_col), _colPermit);\n', '        _permit(IERC20Permit(_paired), _pairedPermit);\n', '        _depositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _colAmt, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function mmDepositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) external override {\n', '        _mmDepositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    function mmDepositWithPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _pairedPermit\n', '    ) external override {\n', '        _permit(IERC20Permit(_paired), _pairedPermit);\n', '        _mmDepositAndAddLiquidity(\n', '            _col, \n', '            _paired, \n', '            _expiry, \n', '            _mintRatio, \n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin, \n', '            _pairedDepositMin,\n', '            _deadline\n', '        );\n', '    }\n', '\n', '    /// @notice This contract should never hold any funds.\n', '    /// Any tokens sent here by accident can be retreived.\n', '    function collect(IERC20 _token) external override onlyOwner {\n', '        uint256 balance = _token.balanceOf(address(this));\n', '        require(balance > 0, "RulerZap: balance is 0");\n', '        _token.safeTransfer(msg.sender, balance);\n', '    }\n', '\n', '    function updateCore(IRulerCore _core) external override onlyOwner {\n', '        require(address(_core) != address(0), "RulerZap: _core is 0");\n', '        core = _core;\n', '    }\n', '\n', '    function updateRouter(IRouter _router) external override onlyOwner {\n', '        require(address(_router) != address(0), "RulerZap: _router is 0");\n', '        router = _router;\n', '    }\n', '\n', '    /// @notice check received amount from swap, tokenOut is always the last in array\n', '    function getAmountOut(\n', '        uint256 _tokenInAmt, \n', '        address[] calldata _path\n', '    ) external view override returns (uint256) {\n', '        return router.getAmountsOut(_tokenInAmt, _path)[_path.length - 1];\n', '    }\n', '\n', '    function _depositAndSwapToPaired(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _minPairedOut,\n', '        address[] calldata _path,\n', '        uint256 _deadline\n', '    ) private {\n', '        require(_colAmt > 0, "RulerZap: _colAmt is 0");\n', '        require(_path.length >= 2, "RulerZap: _path length < 2");\n', '        require(_path[_path.length - 1] == _paired, "RulerZap: output != _paired");\n', '        require(_deadline >= block.timestamp, "RulerZap: _deadline in past");\n', '        (address _rcToken, uint256 _rcTokensReceived, ) = _deposit(_col, _paired, _expiry, _mintRatio, _colAmt);\n', '\n', '        require(_path[0] == _rcToken, "RulerZap: input != rcToken");\n', '        _approve(IERC20(_rcToken), address(router), _rcTokensReceived);\n', '        router.swapExactTokensForTokens(_rcTokensReceived, _minPairedOut, _path, msg.sender, _deadline);\n', '    }\n', '\n', '    function _depositAndSwapWithCurve(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        address _poolAddress,\n', '        int128 _outTokenIndex,\n', '        uint256 _minOut\n', '    ) private {\n', '        require(_colAmt > 0, "RulerZap: _colAmt is 0");\n', '        require(_outTokenIndex != 0, "RulerZap: _outTokenIndex is 0");\n', '        (address _rcToken, uint256 _rcTokensReceived, ) = _deposit(_col, _paired, _expiry, _mintRatio, _colAmt);\n', '        _approve(IERC20(_rcToken), _poolAddress, _rcTokensReceived);\n', '        IMetaPool(_poolAddress).exchange_underlying(0, _outTokenIndex, _rcTokensReceived, _minOut, msg.sender);\n', '    }\n', '\n', '    function _depositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) private {\n', '        require(_colAmt > 0, "RulerZap: _colAmt is 0");\n', '        require(_deadline >= block.timestamp, "RulerZap: _deadline in past");\n', '        require(_rcTokenDepositAmt > 0, "RulerZap: 0 rcTokenDepositAmt");\n', '        require(_rcTokenDepositAmt >= _rcTokenDepositMin, "RulerZap: rcToken Amt < min");\n', '        require(_pairedDepositAmt > 0, "RulerZap: 0 pairedDepositAmt");\n', '        require(_pairedDepositAmt >= _pairedDepositMin, "RulerZap: paired Amt < min");\n', '\n', '        // deposit collateral to Ruler\n', '        IERC20 rcToken;\n', '        uint256 rcTokensBalBefore;\n', '        { // scope to avoid stack too deep errors\n', '            (address _rcToken, uint256 _rcTokensReceived, uint256 _rcTokensBalBefore) = _deposit(_col, _paired, _expiry, _mintRatio, _colAmt);\n', '            require(_rcTokenDepositAmt <= _rcTokensReceived, "RulerZap: rcToken Amt > minted");\n', '            rcToken = IERC20(_rcToken);\n', '            rcTokensBalBefore = _rcTokensBalBefore;\n', '        }\n', '\n', '        // received paired tokens from sender\n', '        IERC20 paired = IERC20(_paired);\n', '        uint256 pairedBalBefore = paired.balanceOf(address(this));\n', '        paired.safeTransferFrom(msg.sender, address(this), _pairedDepositAmt);\n', '        uint256 receivedPaired = paired.balanceOf(address(this)) - pairedBalBefore;\n', '        require(receivedPaired > 0, "RulerZap: paired transfer failed");\n', '\n', '        // add liquidity for sender\n', '        _approve(rcToken, address(router), _rcTokenDepositAmt);\n', '        _approve(paired, address(router), _pairedDepositAmt);\n', '        router.addLiquidity(\n', '            address(rcToken), \n', '            address(paired), \n', '            _rcTokenDepositAmt, \n', '            receivedPaired, \n', '            _rcTokenDepositMin,\n', '            _pairedDepositMin,\n', '            msg.sender,\n', '            _deadline\n', '        );\n', '\n', '        // sending leftover tokens back to sender\n', '        uint256 rcTokensLeftover = rcToken.balanceOf(address(this)) - rcTokensBalBefore;\n', '        if (rcTokensLeftover > 0) {\n', '            rcToken.safeTransfer(msg.sender, rcTokensLeftover);\n', '        }\n', '        uint256 pairedTokensLeftover = paired.balanceOf(address(this)) - pairedBalBefore;\n', '        if (pairedTokensLeftover > 0) {\n', '            paired.safeTransfer(msg.sender, pairedTokensLeftover);\n', '        }\n', '    }\n', '\n', '    function _mmDepositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) private {\n', '        require(_deadline >= block.timestamp, "RulerZap: _deadline in past");\n', '        require(_rcTokenDepositAmt > 0, "RulerZap: 0 rcTokenDepositAmt");\n', '        require(_rcTokenDepositAmt >= _rcTokenDepositMin, "RulerZap: rcToken Amt < min");\n', '        require(_pairedDepositAmt > 0, "RulerZap: 0 pairedDepositAmt");\n', '        require(_pairedDepositAmt >= _pairedDepositMin, "RulerZap: paired Amt < min");\n', '\n', '        // transfer all paired tokens from sender to this contract\n', '        IERC20 paired = IERC20(_paired);\n', '        uint256 pairedBalBefore = paired.balanceOf(address(this));\n', '        paired.safeTransferFrom(msg.sender, address(this), _rcTokenDepositAmt + _pairedDepositAmt);\n', '        require(paired.balanceOf(address(this)) - pairedBalBefore == _rcTokenDepositAmt + _pairedDepositAmt, "RulerZap: paired transfer failed");\n', '\n', '        // mmDeposit paired to Ruler to receive rcTokens\n', '        ( , , , IRERC20 rcToken, , , , ) = core.pairs(_col, _paired, _expiry, _mintRatio);\n', '        require(address(rcToken) != address(0), "RulerZap: pair not exist");\n', '        uint256 rcTokenBalBefore = rcToken.balanceOf(address(this));\n', '        _approve(paired, address(core), _rcTokenDepositAmt);\n', '        core.mmDeposit(_col, _paired, _expiry, _mintRatio, _rcTokenDepositAmt);\n', '        uint256 rcTokenReceived = rcToken.balanceOf(address(this)) - rcTokenBalBefore;\n', '        require(_rcTokenDepositAmt <= rcTokenReceived, "RulerZap: rcToken Amt > minted");\n', '\n', '        // add liquidity for sender\n', '        _approve(rcToken, address(router), _rcTokenDepositAmt);\n', '        _approve(paired, address(router), _pairedDepositAmt);\n', '        router.addLiquidity(\n', '            address(rcToken),\n', '            _paired,\n', '            _rcTokenDepositAmt, \n', '            _pairedDepositAmt, \n', '            _rcTokenDepositMin,\n', '            _pairedDepositMin,\n', '            msg.sender,\n', '            _deadline\n', '        );\n', '\n', '        // sending leftover tokens (since the beginning of user call) back to sender\n', '        _transferRem(rcToken, rcTokenBalBefore);\n', '        _transferRem(paired, pairedBalBefore);\n', '    }\n', '\n', '    function _deposit(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt\n', '    ) private returns (address rcTokenAddr, uint256 rcTokenReceived, uint256 rcTokenBalBefore) {\n', '        ( , , , IRERC20 rcToken, IRERC20 rrToken, , , ) = core.pairs(_col, _paired, _expiry, _mintRatio);\n', '        require(address(rcToken) != address(0) && address(rrToken) != address(0), "RulerZap: pair not exist");\n', '        // receive collateral from sender\n', '        IERC20 collateral = IERC20(_col);\n', '        uint256 colBalBefore = collateral.balanceOf(address(this));\n', '        collateral.safeTransferFrom(msg.sender, address(this), _colAmt);\n', '        uint256 received = collateral.balanceOf(address(this)) - colBalBefore;\n', '        require(received > 0, "RulerZap: col transfer failed");\n', '\n', '        // deposit collateral to Ruler\n', '        rcTokenBalBefore = rcToken.balanceOf(address(this));\n', '        uint256 rrTokenBalBefore = rrToken.balanceOf(address(this));\n', '        _approve(collateral, address(core), received);\n', '        core.deposit(_col, _paired, _expiry, _mintRatio, received);\n', '\n', '        // send rrToken back to sender, and record received rcTokens\n', '        _transferRem(rrToken, rrTokenBalBefore);\n', '        rcTokenReceived = rcToken.balanceOf(address(this)) - rcTokenBalBefore;\n', '        rcTokenAddr = address(rcToken);\n', '    }\n', '\n', '    function _approve(IERC20 _token, address _spender, uint256 _amount) private {\n', '        uint256 allowance = _token.allowance(address(this), _spender);\n', '        if (allowance < _amount) {\n', '            if (allowance != 0) {\n', '                _token.safeApprove(_spender, 0);\n', '            }\n', '            _token.safeApprove(_spender, type(uint256).max);\n', '        }\n', '    }\n', '\n', '    function _permit(IERC20Permit _token, Permit calldata permit) private {\n', '        _token.permit(\n', '            permit.owner,\n', '            permit.spender,\n', '            permit.amount,\n', '            permit.deadline,\n', '            permit.v,\n', '            permit.r,\n', '            permit.s\n', '        );\n', '    }\n', '\n', '    // transfer remaining amount (since the beginnning of action) back to sender\n', '    function _transferRem(IERC20 _token, uint256 _balBefore) private {\n', '        uint256 tokensLeftover = _token.balanceOf(address(this)) - _balBefore;\n', '        if (tokensLeftover > 0) {\n', '            _token.safeTransfer(msg.sender, tokensLeftover);\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n', ' * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n', ' *\n', " * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n", " * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n", ' * need to send a transaction, and thus is not required to hold Ether at all.\n', ' */\n', 'interface IERC20Permit {\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over `owner`'s tokens,\n", "     * given `owner`'s signed approval.\n", '     *\n', '     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n', '     * ordering also apply here.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `deadline` must be a timestamp in the future.\n', '     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n', '     * over the EIP712-formatted function arguments.\n', "     * - the signature must use ``owner``'s current nonce (see {nonces}).\n", '     *\n', '     * For more information on the signature format, see the\n', '     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n', '     * section].\n', '     */\n', '    function permit(address owner, address spender, uint256 amount, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    /**\n', '     * @dev Returns the current nonce for `owner`. This value must be\n', '     * included whenever a signature is generated for {permit}.\n', '     *\n', "     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n", '     * prevents a signature from being used multiple times.\n', '     */\n', '    function nonces(address owner) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the domain separator used in the encoding of the signature for `permit`, as defined by {EIP712}.\n', '     */\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IERC20.sol";\n', 'import "../utils/Address.sol";\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) - value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../ERC20/IERC20.sol";\n', '\n', '/**\n', ' * @title RERC20 contract interface, implements {IERC20}. See {RERC20}.\n', ' * @author crypto-pumpkin\n', ' */\n', 'interface IRERC20 is IERC20 {\n', '    /// @notice access restriction - owner (R)\n', '    function mint(address _account, uint256 _amount) external returns (bool);\n', '    function burnByRuler(address _account, uint256 _amount) external returns (bool);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IRERC20.sol";\n', 'import "./IOracle.sol";\n', '\n', '/**\n', ' * @title IRulerCore contract interface. See {RulerCore}.\n', ' * @author crypto-pumpkin\n', ' */\n', 'interface IRulerCore {\n', '  event RTokenCreated(address);\n', '  event CollateralUpdated(address col, uint256 old, uint256 _new);\n', '  event PairAdded(address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio);\n', '  event MarketMakeDeposit(address indexed user, address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio, uint256 amount);\n', '  event Deposit(address indexed user, address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio, uint256 amount);\n', '  event Repay(address indexed user, address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio, uint256 amount);\n', '  event Redeem(address indexed user, address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio, uint256 amount);\n', '  event Collect(address indexed user, address indexed collateral, address indexed paired, uint48 expiry, uint256 mintRatio, uint256 amount);\n', '  event AddressUpdated(string _type, address old, address _new);\n', '  event PausedStatusUpdated(bool old, bool _new);\n', '  event RERC20ImplUpdated(address rERC20Impl, address newImpl);\n', '  event FlashLoanRateUpdated(uint256 old, uint256 _new);\n', '\n', '  struct Pair {\n', '    bool active;\n', '    uint48 expiry;\n', '    address pairedToken;\n', '    IRERC20 rcToken; // ruler capitol token, e.g. RC_Dai_wBTC_2_2021\n', '    IRERC20 rrToken; // ruler repayment token, e.g. RR_Dai_wBTC_2_2021\n', '    uint256 mintRatio; // 1e18, price of collateral / collateralization ratio\n', '    uint256 feeRate; // 1e18\n', '    uint256 colTotal;\n', '  }\n', '\n', '  struct Permit {\n', '    address owner;\n', '    address spender;\n', '    uint256 amount;\n', '    uint256 deadline;\n', '    uint8 v;\n', '    bytes32 r;\n', '    bytes32 s;\n', '  }\n', '\n', '  // state vars\n', '  function oracle() external view returns (IOracle);\n', '  function version() external pure returns (string memory);\n', '  function flashLoanRate() external view returns (uint256);\n', '  function paused() external view returns (bool);\n', '  function responder() external view returns (address);\n', '  function feeReceiver() external view returns (address);\n', '  function rERC20Impl() external view returns (address);\n', '  function collaterals(uint256 _index) external view returns (address);\n', '  function minColRatioMap(address _col) external view returns (uint256);\n', '  function feesMap(address _token) external view returns (uint256);\n', '  function pairs(address _col, address _paired, uint48 _expiry, uint256 _mintRatio) external view returns (\n', '    bool active, \n', '    uint48 expiry, \n', '    address pairedToken, \n', '    IRERC20 rcToken, \n', '    IRERC20 rrToken, \n', '    uint256 mintRatio, \n', '    uint256 feeRate, \n', '    uint256 colTotal\n', '  );\n', '\n', '  // extra view\n', '  function getCollaterals() external view returns (address[] memory);\n', '  function getPairList(address _col) external view returns (Pair[] memory);\n', '  function viewCollectible(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rcTokenAmt\n', '  ) external view returns (uint256 colAmtToCollect, uint256 pairedAmtToCollect);\n', '\n', '  // user action - only when not paused\n', '  function mmDeposit(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rcTokenAmt\n', '  ) external;\n', '  function mmDepositWithPermit(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rcTokenAmt,\n', '    Permit calldata _pairedPermit\n', '  ) external;\n', '  function deposit(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _colAmt\n', '  ) external;\n', '  function depositWithPermit(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _colAmt,\n', '    Permit calldata _colPermit\n', '  ) external;\n', '  function redeem(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rTokenAmt\n', '  ) external;\n', '  function repay(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rrTokenAmt\n', '  ) external;\n', '  function repayWithPermit(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rrTokenAmt,\n', '    Permit calldata _pairedPermit\n', '  ) external;\n', '  function collect(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    uint256 _rcTokenAmt\n', '  ) external;\n', '  function collectFees(IERC20[] calldata _tokens) external;\n', '\n', '  // access restriction - owner (dev) & responder\n', '  function setPaused(bool _paused) external;\n', '\n', '  // access restriction - owner (dev)\n', '  function addPair(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    string calldata _expiryStr,\n', '    uint256 _mintRatio,\n', '    string calldata _mintRatioStr,\n', '    uint256 _feeRate\n', '  ) external;\n', '  function setPairActive(\n', '    address _col,\n', '    address _paired,\n', '    uint48 _expiry,\n', '    uint256 _mintRatio,\n', '    bool _active\n', '  ) external;\n', '  function updateCollateral(address _col, uint256 _minColRatio) external;\n', '  function setFeeReceiver(address _addr) external;\n', '  function setResponder(address _addr) external;\n', '  function setRERC20Impl(address _addr) external;\n', '  function setOracle(address _addr) external;\n', '  function setFlashLoanRate(uint256 _newRate) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IRouter {\n', '  function getAmountsOut(uint256 amountIn, address[] memory path) external view returns (uint256[] memory amounts);\n', '\n', '  function addLiquidity(\n', '    address tokenA,\n', '    address tokenB,\n', '    uint256 amountADesired,\n', '    uint256 amountBDesired,\n', '    uint256 amountAMin,\n', '    uint256 amountBMin,\n', '    address to,\n', '    uint256 deadline\n', '  ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n', '\n', '  function swapExactTokensForTokens(uint256 amountIn, uint256 amountOutMin, address[] calldata path, address to, uint256 deadline)\n', '      external\n', '      returns (uint256[] memory amounts);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./IRulerCore.sol";\n', 'import "./IRouter.sol";\n', 'import "../ERC20/IERC20.sol";\n', '\n', 'interface IRulerZap {\n', '    struct Permit {\n', '        address owner;\n', '        address spender;\n', '        uint256 amount;\n', '        uint256 deadline;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    // state vars\n', '    function core() external view returns (IRulerCore);\n', '    function router() external view returns (IRouter);\n', '\n', '    // extra view\n', '    function getAmountOut(uint256 _tokenInAmt, address[] calldata _path) external view returns (uint256);\n', '\n', '    // user interactions\n', '    function depositAndSwapToPaired(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _minPairedOut,\n', '        address[] calldata _path,\n', '        uint256 _deadline\n', '    ) external;\n', '\n', '    function depositWithPermitAndSwapToPaired(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _minPairedOut,\n', '        address[] calldata _path,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit\n', '    ) external;\n', '\n', '    function depositAndSwapWithCurve(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        address _poolAddress,\n', '        int128 _outTokenIndex,\n', '        uint256 _minOut\n', '    ) external;\n', '\n', '    function depositWithPermitAndSwapWithCurve(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        address _poolAddress,\n', '        int128 _outTokenIndex,\n', '        uint256 _minOut,\n', '        Permit calldata _colPermit\n', '    ) external;\n', '\n', '    function depositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) external;\n', '\n', '    function depositWithColPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit\n', '    ) external;\n', '\n', '    function depositWithPairedPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _pairedPermit\n', '    ) external;\n', '\n', '    function depositWithBothPermitsAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _colAmt,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _colPermit,\n', '        Permit calldata _pairedPermit\n', '    ) external;\n', '\n', '    function mmDepositAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline\n', '    ) external;\n', '\n', '    function mmDepositWithPermitAndAddLiquidity(\n', '        address _col, \n', '        address _paired,\n', '        uint48 _expiry,\n', '        uint256 _mintRatio,\n', '        uint256 _rcTokenDepositAmt,\n', '        uint256 _pairedDepositAmt,\n', '        uint256 _rcTokenDepositMin,\n', '        uint256 _pairedDepositMin,\n', '        uint256 _deadline,\n', '        Permit calldata _pairedPermit\n', '    ) external;\n', '\n', '    // admin\n', '    function collect(IERC20 _token) external;\n', '    function updateCore(IRulerCore _core) external;\n', '    function updateRouter(IRouter _router) external;\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IMetaPool {\n', '    function exchange_underlying(int128 i, int128 j, uint256 dx, uint256 min_dy, address _receiver) external returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: No License\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "./Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' * @author crypto-pumpkin\n', ' *\n', ' * By initialization, the owner account will be the one that called initializeOwner. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Initializable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Ruler: Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initializeOwner() internal initializer {\n', '        _owner = msg.sender;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IOracle {\n', '    function getPriceUSD(address _asset) external view returns (uint256 price);\n', '    function getPricesUSD(address[] calldata _assets) external view returns (uint256[] memory prices);\n', '    \n', '    // admin functions\n', '    function updateFeedETH(address _asset, address _feed) external;\n', '    function updateFeedUSD(address _asset, address _feed) external;\n', '    function setSushiKeeperOracle(address _sushiOracle) external;\n', '    function setUniKeeperOracle(address _uniOracle) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}']