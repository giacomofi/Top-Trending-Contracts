['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import {IERC20} from "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', 'import {IERC721} from "@openzeppelin/contracts/token/ERC721/IERC721.sol";\n', 'import {SafeMath} from "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import {Address} from "@openzeppelin/contracts/utils/Address.sol";\n', '\n', '/// @author Alchemy Team\n', '/// @title Alchemy\n', '/// @notice The Alchemy contract wraps nfts into erc20\n', 'contract Alchemy is IERC20 {\n', '\n', '    // using Openzeppelin contracts for SafeMath and Address\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    // presenting the total supply\n', '    uint256 internal _totalSupply;\n', '\n', '    // representing the name of the governance token\n', '    string internal _name;\n', '\n', '    // representing the symbol of the governance token\n', '    string internal _symbol;\n', '\n', '    // representing the decimals of the governance token\n', '    uint8 internal constant _decimals = 18;\n', '\n', '    // a record of balance of a specific account by address\n', '    mapping(address => uint256) private _balances;\n', '\n', '    // a record of allowances for a specific address by address to address mapping\n', '    mapping(address => mapping(address => uint256)) private _allowances;\n', '\n', '    // presenting the shares for sale\n', '    uint256 public _sharesForSale;\n', '\n', '    // struct for raised nfts\n', '    struct _raisedNftStruct {\n', '        IERC721 nftaddress;\n', '        bool forSale;\n', '        uint256 tokenid;\n', '        uint256 price;\n', '    }\n', '\n', '    // The total number of NfTs in the DAO\n', '    uint256 public _nftCount;\n', '\n', '    // array for raised nfts\n', '    _raisedNftStruct[] public _raisedNftArray;\n', '\n', '    // mapping to store the already owned nfts\n', '    mapping (address => mapping( uint256 => bool)) public _ownedAlready;\n', '\n', '    // the owner and creator of the contract\n', '    address public _owner;\n', '\n', '    // the buyout price. once its met, all nfts will be transferred to the buyer\n', '    uint256 public _buyoutPrice;\n', '\n', '    // the address which has bought the dao\n', '    address public _buyoutAddress;\n', '\n', '    // representing the governance contract of the nft\n', '    address public _governor;\n', '\n', '    // representing the timelock address of the nft for the governor\n', '    address public _timelock;\n', '\n', '    // factory contract address\n', '    address public _factoryContract;\n', '\n', '    // A record of each accounts delegate\n', '    mapping (address => address) public delegates;\n', '\n', '    // A checkpoint for marking number of votes from a given block\n', '    struct Checkpoint {\n', '        uint256 votes;\n', '        uint32 fromBlock;\n', '    }\n', '\n', '    // A record of votes checkpoints for each account, by index\n', '    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n', '\n', '    // The number of checkpoints for each account\n', '    mapping (address => uint32) public numCheckpoints;\n', '\n', '    // A record of states for signing / validating signatures\n', '    mapping (address => uint) public nonces;\n', '\n', '    // An event thats emitted when an account changes its delegate\n', '    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', "    // An event thats emitted when a delegate account's vote balance changes\n", '    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n', '\n', '    constructor() {\n', "        // Don't allow implementation to be initialized.\n", '        _factoryContract = address(1);\n', '    }\n', '\n', '    function initialize(\n', '        IERC721 nftAddress_,\n', '        address owner_,\n', '        uint256 tokenId_,\n', '        uint256 totalSupply_,\n', '        string memory name_,\n', '        string memory symbol_,\n', '        uint256 buyoutPrice_,\n', '        address factoryContract,\n', '        address governor_,\n', '        address timelock_\n', '    ) external {\n', '        require(_factoryContract == address(0), "already initialized");\n', '        require(factoryContract != address(0), "factory can not be null");\n', '\n', '        _owner = owner_;\n', '        _factoryContract = factoryContract;\n', '        _governor = governor_;\n', '        _timelock = timelock_;\n', '\n', '        _raisedNftStruct memory temp_struct;\n', '        temp_struct.nftaddress = nftAddress_;\n', '        temp_struct.tokenid = tokenId_;\n', '        _raisedNftArray.push(temp_struct);\n', '        _nftCount++;\n', '\n', '        _ownedAlready[address(nftAddress_)][tokenId_] = true;\n', '\n', '        _totalSupply = totalSupply_;\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _buyoutPrice = buyoutPrice_;\n', '        _balances[_owner] = _totalSupply;\n', '        emit Transfer(address(0), owner_, _totalSupply);\n', '    }\n', '\n', '    /**\n', '    * @notice modifier only timelock can call these functions\n', '    */\n', '    modifier onlyTimeLock() {\n', '        require(msg.sender == _timelock, "ALC:Only Timelock can call");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @notice modifier only if buyoutAddress is not initialized\n', '    */\n', '    modifier stillToBuy() {\n', '        require(_buyoutAddress == address(0), "ALC:Already bought out");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    * @dev Destroys `amount` tokens from `account`, reducing\n', '    * and updating burn tokens for abstraction\n', '    *\n', '    * @param amount the amount to be burned\n', '    */\n', '    function _burn(uint256 amount) internal {\n', '        _totalSupply = _totalSupply.sub(amount);\n', '    }\n', '\n', '    /**\n', '    * @dev After a buyout token holders can burn their tokens and get a proportion of the contract balance as a reward\n', '    */\n', '    function burnForETH() external {\n', '        uint256 balance = balanceOf(msg.sender);\n', '        _balances[msg.sender] = 0;\n', '        uint256 contractBalance = address(this).balance;\n', '        uint256 cashOut = contractBalance.mul(balance).div(_totalSupply);\n', '        _burn(balance);\n', '        msg.sender.transfer(cashOut);\n', '        emit Transfer(msg.sender, address(0), balance);\n', '    }\n', '\n', '    /**\n', '    * @notice Lets any user buy shares if there are shares to be sold\n', '    *\n', '    * @param amount the amount to be bought\n', '    */\n', '    function buyShares(uint256 amount) external payable {\n', '        require(_sharesForSale >= amount, "low shares");\n', '        require(msg.value == amount.mul(_buyoutPrice).div(_totalSupply), "low value");\n', '\n', '        _balances[msg.sender] = _balances[msg.sender].add(amount);\n', '        _sharesForSale = _sharesForSale.sub(amount);\n', '\n', '        emit Transfer(address(0), msg.sender, amount);\n', '    }\n', '\n', '    /**\n', '    * @notice view function to get the discounted buyout price\n', '    *\n', '    * @param account the account\n', '    */\n', '    function getBuyoutPriceWithDiscount(address account) public view returns (uint256) {\n', '        uint256 balance = _balances[account];\n', '        return _buyoutPrice.mul((_totalSupply.sub(balance)).mul(10**18).div(_totalSupply)).div(10**18);\n', '    }\n', '\n', '    /**\n', '    * @notice Lets anyone buyout the whole dao if they send ETH according to the buyout price\n', '    * all nfts will be transferred to the buyer\n', '    * also a fee will be distributed 0.5%\n', '    */\n', '    function buyout() external payable stillToBuy {\n', '        uint256 buyoutPriceWithDiscount = getBuyoutPriceWithDiscount(msg.sender);\n', '        require(msg.value == buyoutPriceWithDiscount, "buy value not met");\n', '\n', '        uint256 balance = _balances[msg.sender];\n', '        _balances[msg.sender] = 0;\n', '        _burn(balance);\n', '\n', '        // Take 0.5% fee\n', '        address payable alchemyRouter = IAlchemyFactory(_factoryContract).getAlchemyRouter();\n', '        IAlchemyRouter(alchemyRouter).deposit{value:buyoutPriceWithDiscount / 200}();\n', '\n', '        // set buyer address\n', '        _buyoutAddress = msg.sender;\n', '\n', '        emit Transfer(msg.sender, address(0), balance);\n', '    }\n', '\n', '    /**\n', '    * @notice transfers specific nfts after the buyout happened\n', '    *\n', '    * @param nftids the aray of nft ids\n', '    */\n', '    function buyoutWithdraw(uint[] memory nftids) external {\n', '        require(msg.sender == _buyoutAddress, "can only be called by the buyer");\n', '\n', '        _raisedNftStruct[] memory raisedNftArray = _raisedNftArray;\n', '\n', '        for (uint i=0; i < nftids.length; i++) {\n', '            raisedNftArray[nftids[i]].nftaddress.safeTransferFrom(address(this), msg.sender, raisedNftArray[nftids[i]].tokenid);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice decreases shares for sale on the open market\n', '    *\n', '    * @param amount the amount to be burned\n', '    */\n', '    function burnSharesForSale(uint256 amount) onlyTimeLock external {\n', '        require(_sharesForSale >= amount, "Low shares");\n', '\n', '        _burn(amount);\n', '        _sharesForSale = _sharesForSale.sub(amount);\n', '\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '\n', '    /**\n', '    * @notice increases shares for sale on the open market\n', '    *\n', '    * @param amount the amount to be minted\n', '    */\n', '    function mintSharesForSale(uint256 amount) onlyTimeLock external {\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _sharesForSale = _sharesForSale.add(amount);\n', '\n', '        emit Transfer(address(0), address(this), amount);\n', '    }\n', '\n', '    /**\n', '    * @notice changes the buyout price for the whole dao\n', '    *\n', '    * @param amount to set the new price\n', '    */\n', '    function changeBuyoutPrice(uint256 amount) onlyTimeLock external {\n', '        _buyoutPrice = amount;\n', '    }\n', '\n', '    /**\n', '    * @notice allows the dao to set a specific nft on sale or to close the sale\n', '    *\n', '    * @param nftarrayid the nftarray id\n', '    * @param price the buyout price for the specific nft\n', '    * @param sale bool indicates the sale status\n', '    */\n', '    function setNftSale(uint256 nftarrayid, uint256 price, bool sale) onlyTimeLock external {\n', '        _raisedNftArray[nftarrayid].forSale = sale;\n', '        _raisedNftArray[nftarrayid].price = price;\n', '    }\n', '\n', '    /**\n', '    * @notice allows anyone to buy a specific nft if it is on sale\n', '    * takes a fee of 0.5% on sale\n', '    * @param nftarrayid the nftarray id\n', '    */\n', '    function buySingleNft(uint256 nftarrayid) stillToBuy external payable {\n', '        _raisedNftStruct memory singleNft = _raisedNftArray[nftarrayid];\n', '\n', '        require(singleNft.forSale, "Not for sale");\n', '        require(msg.value == singleNft.price, "Price too low");\n', '\n', '        // Take 0.5% fee\n', '        address payable alchemyRouter = IAlchemyFactory(_factoryContract).getAlchemyRouter();\n', '        IAlchemyRouter(alchemyRouter).deposit{value:singleNft.price / 200}();\n', '\n', '        _ownedAlready[address(singleNft.nftaddress)][singleNft.tokenid] = false;\n', '        _nftCount--;\n', '\n', '        for (uint i = nftarrayid; i < _raisedNftArray.length - 1; i++) {\n', '            _raisedNftArray[i] = _raisedNftArray[i+1];\n', '        }\n', '        _raisedNftArray.pop();\n', '\n', '        singleNft.nftaddress.safeTransferFrom(address(this), msg.sender, singleNft.tokenid);\n', '    }\n', '\n', '    /**\n', '    * @notice adds a new nft to the nft array\n', '    * must be approved an transferred seperately\n', '    *\n', '    * @param new_nft the address of the new nft\n', '    * @param tokenid the if of the nft token\n', '    */\n', '    function addNft(address new_nft, uint256 tokenid) onlyTimeLock public {\n', '        require(_ownedAlready[new_nft][tokenid] == false, "ALC: Cant add duplicate NFT");\n', '        _raisedNftStruct memory temp_struct;\n', '        temp_struct.nftaddress = IERC721(new_nft);\n', '        temp_struct.tokenid = tokenid;\n', '        _raisedNftArray.push(temp_struct);\n', '        _nftCount++;\n', '\n', '        _ownedAlready[new_nft][tokenid] = true;\n', '    }\n', '\n', '    /**\n', '    * @notice transfers an NFT to the DAO contract (called by executeTransaction function)\n', '    *\n', '    * @param new_nft the address of the new nft\n', '    * @param tokenid the if of the nft token\n', '    */\n', '    function transferFromAndAdd(address new_nft, uint256 tokenid) onlyTimeLock public {\n', '        IERC721(new_nft).transferFrom(IERC721(new_nft).ownerOf(tokenid), address(this), tokenid);\n', '        addNft(new_nft, tokenid);\n', '    }\n', '\n', '    /**\n', '    * @notice adds an NFT collection to the DAO contract\n', '    *\n', '    * @param new_nft_array the address of the new nft\n', '    * @param tokenid_array the id of the nft token\n', '    */\n', '    function addNftCollection(address[] memory new_nft_array, uint256[] memory tokenid_array) onlyTimeLock public {\n', '        for (uint i = 0; i <= new_nft_array.length - 1; i++) {\n', '            addNft(new_nft_array[i], tokenid_array[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice transfers an NFT collection to the DAO contract\n', '    *\n', '    * @param new_nft_array the address of the new nft\n', '    * @param tokenid_array the id of the nft token\n', '    */\n', '    function transferFromAndAddCollection(address[] memory new_nft_array, uint256[] memory tokenid_array) onlyTimeLock public {\n', '        for (uint i = 0; i <= new_nft_array.length - 1; i++) {\n', '            transferFromAndAdd(new_nft_array[i], tokenid_array[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @notice returns the nft to the dao owner if allowed by the dao\n', '    */\n', '    function sendNftBackToOwner(uint256 nftarrayid) onlyTimeLock public {\n', '        _raisedNftStruct memory singleNft = _raisedNftArray[nftarrayid];\n', '\n', '        _nftCount--;\n', '        _ownedAlready[address(singleNft.nftaddress)][singleNft.tokenid] = false;\n', '\n', '        for (uint i = nftarrayid; i < _raisedNftArray.length - 1; i++) {\n', '            _raisedNftArray[i] = _raisedNftArray[i+1];\n', '        }\n', '        _raisedNftArray.pop();\n', '\n', '        singleNft.nftaddress.safeTransferFrom(address(this), _owner, singleNft.tokenid);\n', '    }\n', '\n', '    /**\n', '    * @notice executes any transaction\n', '    *\n', '    * @param target the target of the call\n', '    * @param value the value of the call\n', '    * @param signature the signature of the function call\n', '    * @param data the calldata\n', '    */\n', '    function executeTransaction(address target, uint256 value, string memory signature, bytes memory data) onlyTimeLock external payable returns (bytes memory) {\n', '        bytes memory callData;\n', '\n', '        if (bytes(signature).length == 0) {\n', '            callData = data;\n', '        } else {\n', '            callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\n', '        }\n', '\n', '        // solium-disable-next-line security/no-call-value\n', '        (bool success, bytes memory returnData) = target.call{value:value}(callData);\n', '        require(success, "ALC:exec reverted");\n', '\n', '        return returnData;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public pure returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-totalSupply}.\n', '    */\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-balanceOf}. Uses burn abstraction for balance updates without gas and universally.\n', '    */\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '    * @dev See {IERC20-transfer}.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `recipient` cannot be the zero address.\n', '    * - the caller must have a balance of at least `amount`.\n', '    */\n', '    function transfer(address dst, uint256 rawAmount) external override returns (bool) {\n', '        uint256 amount = rawAmount;\n', '        _transferTokens(msg.sender, dst, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '    * fallback function for collection funds\n', '    */\n', '    fallback() external payable {}\n', '\n', '    receive() external payable {}\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender)\n', '    public\n', '    override\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount)\n', '    public\n', '    override\n', '    returns (bool)\n', '    {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero ress.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address src, address dst, uint256 rawAmount) external override returns (bool) {\n', '        address spender = msg.sender;\n', '        uint256 spenderAllowance = _allowances[src][spender];\n', '        uint256 amount = rawAmount;\n', '\n', '        if (spender != src && spenderAllowance != uint256(-1)) {\n', '            uint256 newAllowance = spenderAllowance.sub(amount, "NFTDAO:amount exceeds");\n', '            _allowances[src][spender] = newAllowance;\n', '        }\n', '\n', '        _transferTokens(src, dst, amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner`s tokens.\n', '     *\n', '     * This is internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount\n', '    ) internal {\n', '        require(owner != address(0), "ERC20: approve from 0");\n', '        require(spender != address(0), "ERC20: approve to 0");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function _transfer(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) internal {\n', '        require(sender != address(0), "ERC20: transfer from 0");\n', '        require(recipient != address(0), "ERC20: transfer to 0");\n', '        _balances[sender] = _balances[sender].sub(\n', '            amount,\n', '            "ERC20: transfer amount exceeds"\n', '        );\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Delegate votes from `msg.sender` to `delegatee`\n', '     * @param delegatee The address to delegate votes to\n', '     */\n', '    function delegate(address delegatee) public {\n', '        return _delegate(msg.sender, delegatee);\n', '    }\n', '\n', '    /**\n', '     * @notice Gets the current votes balance for `account`\n', '     * @param account The address to get votes balance\n', '     * @return The number of current votes for `account`\n', '     */\n', '    function getCurrentVotes(address account) external view returns (uint256) {\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '    }\n', '\n', '    /**\n', '     * @notice Determine the prior number of votes for an account as of a block number\n', '     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n', '     * @param account The address of the account to check\n', '     * @param blockNumber The block number to get the vote balance at\n', '     * @return The number of votes the account had as of the given block\n', '     */\n', '    function getPriorVotes(address account, uint blockNumber) public view returns (uint256) {\n', '        require(blockNumber < block.number, "ALC:getPriorVotes");\n', '\n', '        uint32 nCheckpoints = numCheckpoints[account];\n', '        if (nCheckpoints == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // First check most recent balance\n', '        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '            return checkpoints[account][nCheckpoints - 1].votes;\n', '        }\n', '\n', '        // Next check implicit zero balance\n', '        if (checkpoints[account][0].fromBlock > blockNumber) {\n', '            return 0;\n', '        }\n', '\n', '        uint32 lower = 0;\n', '        uint32 upper = nCheckpoints - 1;\n', '        while (upper > lower) {\n', '            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n', '            Checkpoint memory cp = checkpoints[account][center];\n', '            if (cp.fromBlock == blockNumber) {\n', '                return cp.votes;\n', '            } else if (cp.fromBlock < blockNumber) {\n', '                lower = center;\n', '            } else {\n', '                upper = center - 1;\n', '            }\n', '        }\n', '        return checkpoints[account][lower].votes;\n', '    }\n', '\n', '    function _delegate(address delegator, address delegatee) internal {\n', '        address currentDelegate = delegates[delegator];\n', '        uint256 delegatorBalance = _balances[delegator];\n', '        delegates[delegator] = delegatee;\n', '\n', '        emit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '    }\n', '\n', '    function _transferTokens(address src, address dst, uint256 amount) internal {\n', '        require(src != address(0), "ALC: cannot transfer 0");\n', '        require(dst != address(0), "ALC: cannot transfer 0");\n', '\n', '        _balances[src] = _balances[src].sub( amount, "ALC:_transferTokens");\n', '        _balances[dst] = _balances[dst].add( amount);\n', '        emit Transfer(src, dst, amount);\n', '\n', '        _moveDelegates(delegates[src], delegates[dst], amount);\n', '    }\n', '\n', '    function _moveDelegates(address srcRep, address dstRep, uint256 amount) internal {\n', '        if (srcRep != dstRep && amount > 0) {\n', '            if (srcRep != address(0)) {\n', '                uint32 srcRepNum = numCheckpoints[srcRep];\n', '                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '                uint256 srcRepNew = srcRepOld.sub( amount, "ALC:_moveVotes");\n', '                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '            }\n', '\n', '            if (dstRep != address(0)) {\n', '                uint32 dstRepNum = numCheckpoints[dstRep];\n', '                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '                uint256 dstRepNew = dstRepOld.add(amount);\n', '                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint256 oldVotes, uint256 newVotes) internal {\n', '        uint32 blockNumber = safe32(block.number, "ALC:_writeCheck");\n', '\n', '        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '        } else {\n', '            checkpoints[delegatee][nCheckpoints] = Checkpoint(newVotes, blockNumber);\n', '            numCheckpoints[delegatee] = nCheckpoints + 1;\n', '        }\n', '\n', '        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '    }\n', '\n', '    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n', '        require(n < 2**32, errorMessage);\n', '        return uint32(n);\n', '    }\n', '\n', '\n', '    function getChainId() internal pure returns (uint) {\n', '        uint256 chainId;\n', '        assembly { chainId := chainid() }\n', '        return chainId;\n', '    }\n', '}\n', '\n', '\n', 'interface IAlchemyFactory {\n', '    function getAlchemyRouter() external view returns (address payable);\n', '}\n', '\n', 'interface IAlchemyRouter {\n', '    function deposit() external payable;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', 'import "../../introspection/IERC165.sol";\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']