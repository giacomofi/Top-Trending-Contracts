['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-26\n', '*/\n', '\n', 'pragma solidity >= 0.5.0 < 0.6.0;\n', '\n', 'contract UsbekDrawLottery {\n', '    uint public winnersAmount;\n', '    uint public registeredUsers;\n', '    uint public currLotteryId;\n', '    uint public launchTime;\n', '    string public lotteryName;\n', '    uint[] public winnersId;\n', '    address private owner = msg.sender;\n', '    uint private nonce;\n', '    uint private up;\n', '    uint private down;\n', '\n', '    event LogConstructorInitiated(string nextStep);\n', '    event LogDrawLaunched(uint winAmount, uint regUser, uint lotteryId, uint256 date);\n', '\n', '    constructor() public {\n', '        emit LogConstructorInitiated("Constructor was initiated. Call \'launchDraw()\' to start the lottery draw.");\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function launchDraw(uint _winAmount, uint _regUser, uint _lotteryId, string memory _name) public payable {\n', '        require(owner == msg.sender, "Not valid address (only creator)");\n', '        require(_winAmount >= 1, "Need at least 1 winner");\n', '        require(_regUser >= 1, "Need at least 1 registered user");\n', '        require(_regUser >= _winAmount, "Need at least same registered user amount than winner amount");\n', '        require(_lotteryId >= 0, "A lottery id is mandatory");\n', '        require(bytes(_name).length >= 1, "A lottery id is mandatory");\n', '\n', '        delete winnersId;\n', '\n', '        emit LogDrawLaunched(_winAmount, _regUser, _lotteryId, now);\n', '        winnersAmount = _winAmount;\n', '        registeredUsers = _regUser;\n', '        currLotteryId = _lotteryId;\n', '        launchTime = now;\n', '        lotteryName = _name;\n', '        setRandomNum(_winAmount, _regUser);\n', '    }\n', '\n', '    function setRandomNum(uint _winAmount, uint _users) private {\n', '        uint rand = uint(keccak256(abi.encodePacked(now, nonce, msg.sender))) % _users;\n', '        uint randNum = rand;\n', '\n', '        nonce++;\n', '        up = rand;\n', '        down = rand;\n', '        setWinnersId(randNum, _winAmount, _users);\n', '    }\n', '\n', '    function setWinnersId(uint _randNum, uint _winAmount, uint _users) private {\n', '        winnersId.push(_randNum);\n', '\n', '        while(winnersId.length < _winAmount) {\n', '            if ((_winAmount % 2 == 0) && (winnersId.length == _winAmount - 1)) {\n', '                setNext(_users);\n', '                uint rand = uint(keccak256(abi.encodePacked(now, nonce, msg.sender))) % 1;\n', '                if (rand == 1) {\n', '                    winnersId.push(down);\n', '                } else {\n', '                    winnersId.push(up);\n', '                }\n', '            } else {\n', '                setNext(_users);\n', '                winnersId.push(down);\n', '                winnersId.push(up);\n', '            }\n', '        }\n', '    }\n', '\n', '    function setNext(uint _users) private {\n', '        if ((up + 1) > _users) {\n', '            up = 1;\n', '        } else {\n', '            up += 1;\n', '        }\n', '\n', '        if ((down - 1) < 1) {\n', '            down = _users;\n', '        } else {\n', '            down -= 1;\n', '        }\n', '    }\n', '\n', '    function getWinnersId() public view returns(uint[] memory) {\n', '        return winnersId;\n', '    }\n', '}']