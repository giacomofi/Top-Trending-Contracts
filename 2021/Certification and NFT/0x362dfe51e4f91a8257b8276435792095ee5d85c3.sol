['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-22\n', '*/\n', '\n', '// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.6.12 >=0.6.11 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/CollateralOpts.sol\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'struct CollateralOpts {\n', '    bytes32 ilk;\n', '    address gem;\n', '    address join;\n', '    address flip;\n', '    address pip;\n', '    bool    isLiquidatable;\n', '    bool    isOSM;\n', '    bool    whitelistOSM;\n', '    uint256 ilkDebtCeiling;\n', '    uint256 minVaultAmount;\n', '    uint256 maxLiquidationAmount;\n', '    uint256 liquidationPenalty;\n', '    uint256 ilkStabilityFee;\n', '    uint256 bidIncrease;\n', '    uint256 bidDuration;\n', '    uint256 auctionDuration;\n', '    uint256 liquidationRatio;\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExecLib.sol\n', '//\n', '// DssExecLib.sol -- MakerDAO Executive Spellcrafting Library\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'interface Initializable {\n', '    function init(bytes32) external;\n', '}\n', '\n', 'interface Authorizable {\n', '    function rely(address) external;\n', '    function deny(address) external;\n', '}\n', '\n', 'interface Fileable {\n', '    function file(bytes32, address) external;\n', '    function file(bytes32, uint256) external;\n', '    function file(bytes32, bytes32, uint256) external;\n', '    function file(bytes32, bytes32, address) external;\n', '}\n', '\n', 'interface Drippable {\n', '    function drip() external returns (uint256);\n', '    function drip(bytes32) external returns (uint256);\n', '}\n', '\n', 'interface Pricing {\n', '    function poke(bytes32) external;\n', '}\n', '\n', 'interface ERC20 {\n', '    function decimals() external returns (uint8);\n', '}\n', '\n', 'interface DssVat {\n', '    function hope(address) external;\n', '    function nope(address) external;\n', '    function ilks(bytes32) external returns (uint256 Art, uint256 rate, uint256 spot, uint256 line, uint256 dust);\n', '    function Line() external view returns (uint256);\n', '    function suck(address, address, uint) external;\n', '}\n', '\n', 'interface AuctionLike {\n', '    function vat() external returns (address);\n', '    function cat() external returns (address); // Only flip\n', '    function beg() external returns (uint256);\n', '    function pad() external returns (uint256); // Only flop\n', '    function ttl() external returns (uint256);\n', '    function tau() external returns (uint256);\n', '    function ilk() external returns (bytes32); // Only flip\n', '    function gem() external returns (bytes32); // Only flap/flop\n', '}\n', '\n', 'interface JoinLike {\n', '    function vat() external returns (address);\n', '    function ilk() external returns (bytes32);\n', '    function gem() external returns (address);\n', '    function dec() external returns (uint256);\n', '    function join(address, uint) external;\n', '    function exit(address, uint) external;\n', '}\n', '\n', '// Includes Median and OSM functions\n', 'interface OracleLike_2 {\n', '    function src() external view returns (address);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', 'interface MomLike {\n', '    function setOsm(bytes32, address) external;\n', '}\n', '\n', 'interface RegistryLike {\n', '    function add(address) external;\n', '    function info(bytes32) external view returns (\n', '        string memory, string memory, uint256, address, address, address, address\n', '    );\n', '    function ilkData(bytes32) external view returns (\n', '        uint256       pos,\n', '        address       gem,\n', '        address       pip,\n', '        address       join,\n', '        address       flip,\n', '        uint256       dec,\n', '        string memory name,\n', '        string memory symbol\n', '    );\n', '}\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function setVersion(string calldata) external;\n', '    function setIPFS(string calldata) external;\n', '    function setSha256sum(string calldata) external;\n', '    function getAddress(bytes32) external view returns (address);\n', '    function setAddress(bytes32, address) external;\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface IAMLike {\n', '    function ilks(bytes32) external view returns (uint256,uint256,uint48,uint48,uint48);\n', '    function setIlk(bytes32,uint256,uint256,uint256) external;\n', '    function remIlk(bytes32) external;\n', '    function exec(bytes32) external returns (uint256);\n', '}\n', '\n', '\n', 'library DssExecLib {\n', '\n', '    /*****************/\n', '    /*** Constants ***/\n', '    /*****************/\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '\n', '    uint256 constant internal WAD      = 10 ** 18;\n', '    uint256 constant internal RAY      = 10 ** 27;\n', '    uint256 constant internal RAD      = 10 ** 45;\n', '    uint256 constant internal THOUSAND = 10 ** 3;\n', '    uint256 constant internal MILLION  = 10 ** 6;\n', '\n', '    uint256 constant internal BPS_ONE_PCT             = 100;\n', '    uint256 constant internal BPS_ONE_HUNDRED_PCT     = 100 * BPS_ONE_PCT;\n', '    uint256 constant internal RATES_ONE_HUNDRED_PCT   = 1000000021979553151239153027;\n', '\n', '\n', '    /**********************/\n', '    /*** Math Functions ***/\n', '    /**********************/\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    /****************************/\n', '    /*** Core Address Helpers ***/\n', '    /****************************/\n', '    function dai()        public view returns (address) { return getChangelogAddress("MCD_DAI"); }\n', '    function mkr()        public view returns (address) { return getChangelogAddress("MCD_GOV"); }\n', '    function vat()        public view returns (address) { return getChangelogAddress("MCD_VAT"); }\n', '    function cat()        public view returns (address) { return getChangelogAddress("MCD_CAT"); }\n', '    function jug()        public view returns (address) { return getChangelogAddress("MCD_JUG"); }\n', '    function pot()        public view returns (address) { return getChangelogAddress("MCD_POT"); }\n', '    function vow()        public view returns (address) { return getChangelogAddress("MCD_VOW"); }\n', '    function end()        public view returns (address) { return getChangelogAddress("MCD_END"); }\n', '    function reg()        public view returns (address) { return getChangelogAddress("ILK_REGISTRY"); }\n', '    function spotter()    public view returns (address) { return getChangelogAddress("MCD_SPOT"); }\n', '    function flap()       public view returns (address) { return getChangelogAddress("MCD_FLAP"); }\n', '    function flop()       public view returns (address) { return getChangelogAddress("MCD_FLOP"); }\n', '    function osmMom()     public view returns (address) { return getChangelogAddress("OSM_MOM"); }\n', '    function govGuard()   public view returns (address) { return getChangelogAddress("GOV_GUARD"); }\n', '    function flipperMom() public view returns (address) { return getChangelogAddress("FLIPPER_MOM"); }\n', '    function pauseProxy() public view returns (address) { return getChangelogAddress("MCD_PAUSE_PROXY"); }\n', '    function autoLine()   public view returns (address) { return getChangelogAddress("MCD_IAM_AUTO_LINE"); }\n', '    function daiJoin()    public view returns (address) { return getChangelogAddress("MCD_JOIN_DAI"); }\n', '\n', '    function flip(bytes32 ilk) public view returns (address _flip) {\n', '        (,,,, _flip,,,) = RegistryLike(reg()).ilkData(ilk);\n', '    }\n', '\n', '    function getChangelogAddress(bytes32 key) public view returns (address) {\n', '        return ChainlogLike(LOG).getAddress(key);\n', '    }\n', '\n', '    /****************************/\n', '    /*** Changelog Management ***/\n', '    /****************************/\n', '    /**\n', '        @dev Set an address in the MCD on-chain changelog.\n', '        @param _key Access key for the address (e.g. "MCD_VAT")\n', '        @param _val The address associated with the _key\n', '    */\n', '    function setChangelogAddress(bytes32 _key, address _val) public {\n', '        ChainlogLike(LOG).setAddress(_key, _val);\n', '    }\n', '\n', '    /**\n', '        @dev Set version in the MCD on-chain changelog.\n', '        @param _version Changelog version (e.g. "1.1.2")\n', '    */\n', '    function setChangelogVersion(string memory _version) public {\n', '        ChainlogLike(LOG).setVersion(_version);\n', '    }\n', '    /**\n', '        @dev Set IPFS hash of IPFS changelog in MCD on-chain changelog.\n', '        @param _ipfsHash IPFS hash (e.g. "QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW")\n', '    */\n', '    function setChangelogIPFS(string memory _ipfsHash) public {\n', '        ChainlogLike(LOG).setIPFS(_ipfsHash);\n', '    }\n', '    /**\n', '        @dev Set SHA256 hash in MCD on-chain changelog.\n', '        @param _SHA256Sum SHA256 hash (e.g. "e42dc9d043a57705f3f097099e6b2de4230bca9a020c797508da079f9079e35b")\n', '    */\n', '    function setChangelogSHA256(string memory _SHA256Sum) public {\n', '        ChainlogLike(LOG).setSha256sum(_SHA256Sum);\n', '    }\n', '\n', '\n', '    /**********************/\n', '    /*** Authorizations ***/\n', '    /**********************/\n', '    /**\n', '        @dev Give an address authorization to perform auth actions on the contract.\n', '        @param _base   The address of the contract where the authorization will be set\n', '        @param _ward   Address to be authorized\n', '    */\n', '    function authorize(address _base, address _ward) public {\n', '        Authorizable(_base).rely(_ward);\n', '    }\n', '    /**\n', '        @dev Revoke contract authorization from an address.\n', '        @param _base   The address of the contract where the authorization will be revoked\n', '        @param _ward   Address to be deauthorized\n', '    */\n', '    function deauthorize(address _base, address _ward) public {\n', '        Authorizable(_base).deny(_ward);\n', '    }\n', '    /**\n', '        @dev Delegate vat authority to the specified address.\n', '        @param _usr Address to be authorized\n', '    */\n', '    function delegateVat(address _usr) public {\n', '        DssVat(vat()).hope(_usr);\n', '    }\n', '    /**\n', '        @dev Revoke vat authority to the specified address.\n', '        @param _usr Address to be deauthorized\n', '    */\n', '    function undelegateVat(address _usr) public {\n', '        DssVat(vat()).nope(_usr);\n', '    }\n', '\n', '    /**************************/\n', '    /*** Accumulating Rates ***/\n', '    /**************************/\n', '    /**\n', '        @dev Update rate accumulation for the Dai Savings Rate (DSR).\n', '    */\n', '    function accumulateDSR() public {\n', '        Drippable(pot()).drip();\n', '    }\n', '    /**\n', '        @dev Update rate accumulation for the stability fees of a given collateral type.\n', '        @param _ilk   Collateral type\n', '    */\n', '    function accumulateCollateralStabilityFees(bytes32 _ilk) public {\n', '        Drippable(jug()).drip(_ilk);\n', '    }\n', '\n', '    /*********************/\n', '    /*** Price Updates ***/\n', '    /*********************/\n', '    /**\n', '        @dev Update price of a given collateral type.\n', '        @param _ilk   Collateral type\n', '    */\n', '    function updateCollateralPrice(bytes32 _ilk) public {\n', '        Pricing(spotter()).poke(_ilk);\n', '    }\n', '\n', '    /****************************/\n', '    /*** System Configuration ***/\n', '    /****************************/\n', '    /**\n', '        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\n', '        @param _base   The address of the contract where the new contract address will be filed\n', '        @param _what   Name of contract to file\n', '        @param _addr   Address of contract to file\n', '    */\n', '    function setContract(address _base, bytes32 _what, address _addr) public {\n', '        Fileable(_base).file(_what, _addr);\n', '    }\n', '    /**\n', '        @dev Set a contract in another contract, defining the relationship (ex. set a new Cat contract in the Vat)\n', '        @param _base   The address of the contract where the new contract address will be filed\n', '        @param _ilk    Collateral type\n', '        @param _what   Name of contract to file\n', '        @param _addr   Address of contract to file\n', '    */\n', '    function setContract(address _base, bytes32 _ilk, bytes32 _what, address _addr) public {\n', '        Fileable(_base).file(_ilk, _what, _addr);\n', '    }\n', '\n', '    /******************************/\n', '    /*** System Risk Parameters ***/\n', '    /******************************/\n', '    // function setGlobalDebtCeiling(uint256 _amount) public { setGlobalDebtCeiling(vat(), _amount); }\n', '    /**\n', '        @dev Set the global debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setGlobalDebtCeiling(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-global-Line-precision"\n', '        Fileable(vat()).file("Line", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Increase the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to add in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function increaseGlobalDebtCeiling(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-Line-increase-precision"\n', '        address _vat = vat();\n', '        Fileable(_vat).file("Line", add(DssVat(_vat).Line(), _amount * RAD));\n', '    }\n', '    /**\n', '        @dev Decrease the global debt ceiling by a specific amount. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to reduce in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function decreaseGlobalDebtCeiling(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-Line-decrease-precision"\n', '        address _vat = vat();\n', '        Fileable(_vat).file("Line", sub(DssVat(_vat).Line(), _amount * RAD));\n', '    }\n', '    /**\n', '        @dev Set the Dai Savings Rate. See: docs/rates.txt\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '    */\n', '    function setDSR(uint256 _rate) public {\n', '        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // "LibDssExec/dsr-out-of-bounds"\n', '        Fileable(pot()).file("dsr", _rate);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system surplus auctions. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setSurplusAuctionAmount(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-vow-bump-precision"\n', '        Fileable(vow()).file("bump", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system surplus buffer, must be exceeded before surplus auctions start. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setSurplusBuffer(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-vow-hump-precision"\n', '        Fileable(vow()).file("hump", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for surplus auctions. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _pct_bps The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setMinSurplusAuctionBidIncrease(uint256 _pct_bps) public {\n', '        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-flap-beg-precision"\n', '        Fileable(flap()).file("beg", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for surplus auctions.\n', '        @param _duration Amount of time for bids.\n', '    */\n', '    function setSurplusAuctionBidDuration(uint256 _duration) public {\n', '        Fileable(flap()).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set total auction duration for surplus auctions.\n', '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setSurplusAuctionDuration(uint256 _duration) public {\n', '        Fileable(flap()).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the number of seconds that pass before system debt is auctioned for MKR tokens.\n', '        @param _duration Duration in seconds\n', '    */\n', '    function setDebtAuctionDelay(uint256 _duration) public {\n', '        Fileable(vow()).file("wait", _duration);\n', '    }\n', '    /**\n', '        @dev Set the DAI amount for system debt to be covered by each debt auction. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setDebtAuctionDAIAmount(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-vow-sump-precision"\n', '        Fileable(vow()).file("sump", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set the starting MKR amount to be auctioned off to cover system debt in debt auctions. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in MKR (ex. 250 MKR amount == 250)\n', '    */\n', '    function setDebtAuctionMKRAmount(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-vow-dump-precision"\n', '        Fileable(vow()).file("dump", _amount * WAD);\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for debt auctions. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setMinDebtAuctionBidIncrease(uint256 _pct_bps) public {\n', '        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-flap-beg-precision"\n', '        Fileable(flop()).file("beg", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for debt auctions.\n', '        @param _duration Amount of time for bids.\n', '    */\n', '    function setDebtAuctionBidDuration(uint256 _duration) public {\n', '        Fileable(flop()).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set total auction duration for debt auctions.\n', '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setDebtAuctionDuration(uint256 _duration) public {\n', '        Fileable(flop()).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the rate of increasing amount of MKR out for auction during debt auctions. Amount will be converted to the correct internal precision.\n', '        @dev MKR amount is increased by this rate every "tick" (if auction duration has passed and no one has bid on the MKR)\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setDebtAuctionMKRIncreaseRate(uint256 _pct_bps) public {\n', '        Fileable(flop()).file("pad", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set the maximum total DAI amount that can be out for liquidation in the system at any point. Amount will be converted to the correct internal precision.\n', '        @param _amount The amount to set in DAI (ex. 250,000 DAI amount == 250000)\n', '    */\n', '    function setMaxTotalDAILiquidationAmount(uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-vow-dump-precision"\n', '        Fileable(cat()).file("box", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set the duration of time that has to pass during emergency shutdown before collateral can start being claimed by DAI holders.\n', '        @param _duration Time in seconds to set for ES processing time\n', '    */\n', '    function setEmergencyShutdownProcessingTime(uint256 _duration) public {\n', '        Fileable(end()).file("wait", _duration);\n', '    }\n', '    /**\n', '        @dev Set the global stability fee (is not typically used, currently is 0).\n', '            Many of the settings that change weekly rely on the rate accumulator\n', '            described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '            To check this yourself, use the following rate calculation (example 8%):\n', '\n', "            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '\n', '            A table of rates can also be found at:\n', '            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '    */\n', '    function setGlobalStabilityFee(uint256 _rate) public {\n', '        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // "LibDssExec/global-stability-fee-out-of-bounds"\n', '        Fileable(jug()).file("base", _rate);\n', '    }\n', '    /**\n', '        @dev Set the value of DAI in the reference asset (e.g. $1 per DAI). Value will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is value * RAY / 1000\n', '        @param _value The value to set as integer (x1000) (ex. $1.025 == 1025)\n', '    */\n', '    function setDAIReferenceValue(uint256 _value) public {\n', '        require(_value < WAD);  // "LibDssExec/incorrect-ilk-dunk-precision"\n', '        Fileable(spotter()).file("par", rdiv(_value, 1000));\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Management ***/\n', '    /*****************************/\n', '    /**\n', '        @dev Set a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkDebtCeiling(bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        Fileable(vat()).file(_ilk, "line", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Increase a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to increase in DAI (ex. 10m DAI amount == 10000000)\n', '        @param _global If true, increases the global debt ceiling by _amount\n', '    */\n', '    function increaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        address _vat = vat();\n', '        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\n', '        Fileable(_vat).file(_ilk, "line", add(line_, _amount * RAD));\n', '        if (_global) { increaseGlobalDebtCeiling(_amount); }\n', '    }\n', '    /**\n', '        @dev Decrease a collateral debt ceiling. Amount will be converted to the correct internal precision.\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\n', '        @param _global If true, decreases the global debt ceiling by _amount\n', '    */\n', '    function decreaseIlkDebtCeiling(bytes32 _ilk, uint256 _amount, bool _global) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        address _vat = vat();\n', '        (,,,uint256 line_,) = DssVat(_vat).ilks(_ilk);\n', '        Fileable(_vat).file(_ilk, "line", sub(line_, _amount * RAD));\n', '        if (_global) { decreaseGlobalDebtCeiling(_amount); }\n', '    }\n', '    /**\n', '        @dev Set the parameters for an ilk in the "MCD_IAM_AUTO_LINE" auto-line\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The Maximum value (ex. 100m DAI amount == 100000000)\n', '        @param _gap    The amount of Dai per step (ex. 5m Dai == 5000000)\n', '        @param _ttl    The amount of time (in seconds)\n', '    */\n', '    function setIlkAutoLineParameters(bytes32 _ilk, uint256 _amount, uint256 _gap, uint256 _ttl) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-auto-line-amount-precision"\n', '        require(_gap < WAD);  // "LibDssExec/incorrect-auto-line-gap-precision"\n', '        IAMLike(autoLine()).setIlk(_ilk, _amount * RAD, _gap * RAD, _ttl);\n', '    }\n', '    /**\n', '        @dev Set the debt ceiling for an ilk in the "MCD_IAM_AUTO_LINE" auto-line without updating the time values\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to decrease in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkAutoLineDebtCeiling(bytes32 _ilk, uint256 _amount) public {\n', '        address _autoLine = autoLine();\n', '        (, uint256 gap, uint48 ttl,,) = IAMLike(_autoLine).ilks(_ilk);\n', '        require(gap != 0 && ttl != 0);  // "LibDssExec/auto-line-not-configured"\n', '        IAMLike(_autoLine).setIlk(_ilk, _amount * RAD, uint256(gap), uint256(ttl));\n', '    }\n', '    /**\n', '        @dev Remove an ilk in the "MCD_IAM_AUTO_LINE" auto-line\n', '        @param _ilk    The ilk to remove (ex. bytes32("ETH-A"))\n', '    */\n', '    function removeIlkFromAutoLine(bytes32 _ilk) public {\n', '        IAMLike(autoLine()).remIlk(_ilk);\n', '    }\n', '    /**\n', '        @dev Set a collateral minimum vault amount. Amount will be converted to the correct internal precision.\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkMinVaultAmount(bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-dust-precision"\n', '        Fileable(vat()).file(_ilk, "dust", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set a collateral liquidation penalty. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 10.25% = 10.25 * 100 = 1025)\n', '    */\n', '    function setIlkLiquidationPenalty(bytes32 _ilk, uint256 _pct_bps) public {\n', '        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-ilk-chop-precision"\n', '        Fileable(cat()).file(_ilk, "chop", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set max DAI amount for liquidation per vault for collateral. Amount will be converted to the correct internal precision.\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _amount The amount to set in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function setIlkMaxLiquidationAmount(bytes32 _ilk, uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-dunk-precision"\n', '        Fileable(cat()).file(_ilk, "dunk", _amount * RAD);\n', '    }\n', '    /**\n', '        @dev Set a collateral liquidation ratio. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is pct * RAY / 10,000\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 150% = 150 * 100 = 15000)\n', '    */\n', '    function setIlkLiquidationRatio(bytes32 _ilk, uint256 _pct_bps) public {\n', '        require(_pct_bps < 10 * BPS_ONE_HUNDRED_PCT); // "LibDssExec/incorrect-ilk-mat-precision" // Fails if pct >= 1000%\n', '        require(_pct_bps >= BPS_ONE_HUNDRED_PCT); // the liquidation ratio has to be bigger or equal to 100%\n', '        Fileable(spotter()).file(_ilk, "mat", rdiv(_pct_bps, BPS_ONE_HUNDRED_PCT));\n', '    }\n', '    /**\n', '        @dev Set minimum bid increase for collateral. Amount will be converted to the correct internal precision.\n', '        @dev Equation used for conversion is (1 + pct / 10,000) * WAD\n', '        @param _ilk   The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _pct_bps    The pct, in basis points, to set in integer form (x100). (ex. 5% = 5 * 100 = 500)\n', '    */\n', '    function setIlkMinAuctionBidIncrease(bytes32 _ilk, uint256 _pct_bps) public {\n', '        require(_pct_bps < BPS_ONE_HUNDRED_PCT);  // "LibDssExec/incorrect-ilk-chop-precision"\n', '        Fileable(flip(_ilk)).file("beg", add(WAD, wdiv(_pct_bps, BPS_ONE_HUNDRED_PCT)));\n', '    }\n', '    /**\n', '        @dev Set bid duration for a collateral type.\n', '        @param _ilk   The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _duration Amount of time for bids.\n', '    */\n', '    function setIlkBidDuration(bytes32 _ilk, uint256 _duration) public {\n', '        Fileable(flip(_ilk)).file("ttl", _duration);\n', '    }\n', '    /**\n', '        @dev Set auction duration for a collateral type.\n', '        @param _ilk   The ilk to update (ex. bytes32("ETH-A"))\n', '        @param _duration Amount of time for auctions.\n', '    */\n', '    function setIlkAuctionDuration(bytes32 _ilk, uint256 _duration) public {\n', '        Fileable(flip(_ilk)).file("tau", _duration);\n', '    }\n', '    /**\n', '        @dev Set the stability fee for a given ilk.\n', '            Many of the settings that change weekly rely on the rate accumulator\n', '            described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '            To check this yourself, use the following rate calculation (example 8%):\n', '\n', "            $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '\n', '            A table of rates can also be found at:\n', '            https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '\n', '        @param _ilk    The ilk to update (ex. bytes32("ETH-A") )\n', '        @param _rate   The accumulated rate (ex. 4% => 1000000001243680656318820312)\n', '        @param _doDrip `true` to accumulate stability fees for the collateral\n', '    */\n', '    function setIlkStabilityFee(bytes32 _ilk, uint256 _rate, bool _doDrip) public {\n', '        require((_rate >= RAY) && (_rate <= RATES_ONE_HUNDRED_PCT));  // "LibDssExec/ilk-stability-fee-out-of-bounds"\n', '        address _jug = jug();\n', '        if (_doDrip) Drippable(_jug).drip(_ilk);\n', '\n', '        Fileable(_jug).file(_ilk, "duty", _rate);\n', '    }\n', '\n', '\n', '    /*************************/\n', '    /*** Oracle Management ***/\n', '    /*************************/\n', '    /**\n', "        @dev Adds oracle feeds to the Median's writer whitelist, allowing the feeds to write prices.\n", '        @param _median Median core contract address\n', '        @param _feeds      Array of oracle feed addresses to add to whitelist\n', '    */\n', '    function addWritersToMedianWhitelist(address _median, address[] memory _feeds) public {\n', '        OracleLike_2(_median).lift(_feeds);\n', '    }\n', '    /**\n', "        @dev Removes oracle feeds to the Median's writer whitelist, disallowing the feeds to write prices.\n", '        @param _median Median core contract address\n', '        @param _feeds      Array of oracle feed addresses to remove from whitelist\n', '    */\n', '    function removeWritersFromMedianWhitelist(address _median, address[] memory _feeds) public {\n', '        OracleLike_2(_median).drop(_feeds);\n', '    }\n', '    /**\n', "        @dev Adds addresses to the Median's reader whitelist, allowing the addresses to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _readers    Array of addresses to add to whitelist\n', '    */\n', '    function addReadersToMedianWhitelist(address _median, address[] memory _readers) public {\n', '        OracleLike_2(_median).kiss(_readers);\n', '    }\n', '    /**\n', "        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _reader     Address to add to whitelist\n', '    */\n', '    function addReaderToMedianWhitelist(address _median, address _reader) public {\n', '        OracleLike_2(_median).kiss(_reader);\n', '    }\n', '    /**\n', "        @dev Removes addresses from the Median's reader whitelist, disallowing the addresses to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _readers    Array of addresses to remove from whitelist\n', '    */\n', '    function removeReadersFromMedianWhitelist(address _median, address[] memory _readers) public {\n', '        OracleLike_2(_median).diss(_readers);\n', '    }\n', '    /**\n', "        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the median.\n", '        @param _median Median core contract address\n', '        @param _reader     Address to remove from whitelist\n', '    */\n', '    function removeReaderFromMedianWhitelist(address _median, address _reader) public {\n', '        OracleLike_2(_median).diss(_reader);\n', '    }\n', '    /**\n', '        @dev Sets the minimum number of valid messages from whitelisted oracle feeds needed to update median price.\n', '        @param _median Median core contract address\n', '        @param _minQuorum  Minimum number of valid messages from whitelisted oracle feeds needed to update median price (NOTE: MUST BE ODD NUMBER)\n', '    */\n', '    function setMedianWritersQuorum(address _median, uint256 _minQuorum) public {\n', '        OracleLike_2(_median).setBar(_minQuorum);\n', '    }\n', '    /**\n', "        @dev Adds an address to the Median's reader whitelist, allowing the address to read prices from the OSM.\n", '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _reader     Address to add to whitelist\n', '    */\n', '    function addReaderToOSMWhitelist(address _osm, address _reader) public {\n', '        OracleLike_2(_osm).kiss(_reader);\n', '    }\n', '    /**\n', "        @dev Removes an address to the Median's reader whitelist, disallowing the address to read prices from the OSM.\n", '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _reader     Address to remove from whitelist\n', '    */\n', '    function removeReaderFromOSMWhitelist(address _osm, address _reader) public {\n', '        OracleLike_2(_osm).diss(_reader);\n', '    }\n', '    /**\n', '        @dev Add OSM address to OSM mom, allowing it to be frozen by governance.\n', '        @param _osm        Oracle Security Module (OSM) core contract address\n', '        @param _ilk        Collateral type using OSM\n', '    */\n', '    function allowOSMFreeze(address _osm, bytes32 _ilk) public {\n', '        MomLike(osmMom()).setOsm(_ilk, _osm);\n', '    }\n', '\n', '\n', '    /*****************************/\n', '    /*** Collateral Onboarding ***/\n', '    /*****************************/\n', '\n', '    /**\n', '        @dev Performs basic functions and sanity checks to add a new collateral type to the MCD system\n', '        @param _ilk      Collateral type key code [Ex. "ETH-A"]\n', '        @param _gem      Address of token contract\n', '        @param _join     Address of join adapter\n', '        @param _flip     Address of flipper\n', '        @param _pip      Address of price feed\n', '    */\n', '    function addCollateralBase(\n', '        bytes32 _ilk,\n', '        address _gem,\n', '        address _join,\n', '        address _flip,\n', '        address _pip\n', '    ) public {\n', '        // Sanity checks\n', '        address _vat = vat();\n', '        address _cat = cat();\n', '        require(JoinLike(_join).vat() == _vat);     // "join-vat-not-match"\n', '        require(JoinLike(_join).ilk() == _ilk);     // "join-ilk-not-match"\n', '        require(JoinLike(_join).gem() == _gem);     // "join-gem-not-match"\n', '        require(JoinLike(_join).dec() ==\n', '                   ERC20(_gem).decimals());         // "join-dec-not-match"\n', '        require(AuctionLike(_flip).vat() == _vat);  // "flip-vat-not-match"\n', '        require(AuctionLike(_flip).cat() == _cat);  // "flip-cat-not-match"\n', '        require(AuctionLike(_flip).ilk() == _ilk);  // "flip-ilk-not-match"\n', '\n', '        // Set the token PIP in the Spotter\n', '        setContract(spotter(), _ilk, "pip", _pip);\n', '\n', '        // Set the ilk Flipper in the Cat\n', '        setContract(_cat, _ilk, "flip", _flip);\n', '\n', '        // Init ilk in Vat & Jug\n', '        Initializable(_vat).init(_ilk);  // Vat\n', '        Initializable(jug()).init(_ilk);  // Jug\n', '\n', '        // Allow ilk Join to modify Vat registry\n', '        authorize(_vat, _join);\n', '\t\t// Allow the ilk Flipper to reduce the Cat litterbox on deal()\n', '        authorize(_cat, _flip);\n', '        // Allow Cat to kick auctions in ilk Flipper\n', '        authorize(_flip, _cat);\n', '        // Allow End to yank auctions in ilk Flipper\n', '        authorize(_flip, end());\n', '\n', '        // Add new ilk to the IlkRegistry\n', '        RegistryLike(reg()).add(_join);\n', '    }\n', '\n', '\n', '    /***************/\n', '    /*** Payment ***/\n', '    /***************/\n', '    /**\n', '        @dev Send a payment in ERC20 DAI from the surplus buffer.\n', '        @param _target The target address to send the DAI to.\n', '        @param _amount The amount to send in DAI (ex. 10m DAI amount == 10000000)\n', '    */\n', '    function sendPaymentFromSurplusBuffer(address _target, uint256 _amount) public {\n', '        require(_amount < WAD);  // "LibDssExec/incorrect-ilk-line-precision"\n', '        DssVat(vat()).suck(vow(), address(this), _amount * RAD);\n', '        JoinLike(daiJoin()).exit(_target, _amount * WAD);\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', '/* import "./CollateralOpts.sol"; */\n', '/* import { DssExecLib } from "./DssExecLib.sol"; */\n', '\n', 'interface OracleLike_1 {\n', '    function src() external view returns (address);\n', '}\n', '\n', 'abstract contract DssAction {\n', '\n', '    using DssExecLib for *;\n', '\n', '    // Office Hours defaults to true by default.\n', '    //   To disable office hours, override this function and\n', '    //    return false in the inherited action.\n', '    function officeHours() public virtual returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Modifier required to\n', '    modifier limited {\n', '        if (officeHours()) {\n', '            uint day = (block.timestamp / 1 days + 3) % 7;\n', '            require(day < 5, "Can only be cast on a weekday");\n', '            uint hour = block.timestamp / 1 hours % 24;\n', '            require(hour >= 14 && hour < 21, "Outside office hours");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Onboarding ***/\n', '    /*****************************/\n', '\n', '    // Complete collateral onboarding logic.\n', '    function addNewCollateral(CollateralOpts memory co) internal {\n', '        // Add the collateral to the system.\n', '        DssExecLib.addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\n', '\n', '        // Allow FlipperMom to access to the ilk Flipper\n', '        address _flipperMom = DssExecLib.flipperMom();\n', '        DssExecLib.authorize(co.flip, _flipperMom);\n', '        // Disallow Cat to kick auctions in ilk Flipper\n', '        if(!co.isLiquidatable) { DssExecLib.deauthorize(_flipperMom, co.flip); }\n', '\n', '        if(co.isOSM) { // If pip == OSM\n', '            // Allow OsmMom to access to the TOKEN OSM\n', '            DssExecLib.authorize(co.pip, DssExecLib.osmMom());\n', '            if (co.whitelistOSM) { // If median is src in OSM\n', '                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\n', '                DssExecLib.addReaderToMedianWhitelist(address(OracleLike_1(co.pip).src()), co.pip);\n', '            }\n', '            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            DssExecLib.addReaderToOSMWhitelist(co.pip, DssExecLib.spotter());\n', '            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            DssExecLib.addReaderToOSMWhitelist(co.pip, DssExecLib.end());\n', '            // Set TOKEN OSM in the OsmMom for new ilk\n', '            DssExecLib.allowOSMFreeze(co.pip, co.ilk);\n', '        }\n', '        // Increase the global debt ceiling by the ilk ceiling\n', '        DssExecLib.increaseGlobalDebtCeiling(co.ilkDebtCeiling);\n', '        // Set the ilk debt ceiling\n', '        DssExecLib.setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\n', '        // Set the ilk dust\n', '        DssExecLib.setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\n', '        // Set the dunk size\n', '        DssExecLib.setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\n', '        // Set the ilk liquidation penalty\n', '        DssExecLib.setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\n', '\n', '        // Set the ilk stability fee\n', '        DssExecLib.setIlkStabilityFee(co.ilk, co.ilkStabilityFee, true);\n', '\n', '        // Set the ilk percentage between bids\n', '        DssExecLib.setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\n', '        // Set the ilk time max time between bids\n', '        DssExecLib.setIlkBidDuration(co.ilk, co.bidDuration);\n', '        // Set the ilk max auction duration\n', '        DssExecLib.setIlkAuctionDuration(co.ilk, co.auctionDuration);\n', '        // Set the ilk min collateralization ratio\n', '        DssExecLib.setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\n', '\n', '        // Update ilk spot value in Vat\n', '        DssExecLib.updateCollateralPrice(co.ilk);\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        require(eta != 0, "DssExec/spell-not-scheduled");\n', '        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\n', '\n', '        if (SpellAction(action).officeHours()) {\n', '            uint256 day    = (castTime / 1 days + 3) % 7;\n', '            uint256 hour   = castTime / 1 hours % 24;\n', '            uint256 minute = castTime / 1 minutes % 60;\n', '            uint256 second = castTime % 60;\n', '\n', '            if (day >= 5) {\n', '                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\n', '                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\n', '                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\n', '            } else {\n', '                if (hour >= 21) {\n', '                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\n', '                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                } else if (hour < 14) {\n', '                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity 0.6.12; */\n', '\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/8ec1c4a85d86c80711782068c0c1841d4a22cb2c/governance/votes/Executive%20vote%20-%20March%2022%2C%202021.md -q -O - 2>/dev/null)"\n', '    string public constant description =\n', '        "2021-03-22 MakerDAO Executive Spell | Hash: 0x6340de8661da4482d004b9dc9c0eb7dfd725cad4ea0441f5df33405e8bc878bc";\n', '\n', '    // MIP38: DAO Primitives State\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP38/mip38.md -q -O - 2>/dev/null)"\n', '    string constant public MIP38 = "0x45ba0a20e7c72334b3c735b33a4726a23a75d92b36f111dc4d09f2ecdf420fea";\n', '\n', '    // MIP39: Core Unit Framework\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP39/mip39.md -q -O - 2>/dev/null)"\n', '    string constant public MIP39 = "0xbdf82a7fe0dbe8e93738792d43bfab0327fa2db500718b178f48257f219ff89a";\n', '\n', '    // MIP40: Budget Framework\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP40/mip40.md -q -O - 2>/dev/null)"\n', '    string constant public MIP40 = "0xf873b83231f506fed45fa55c2cf073fd8b9bf36cbe4e9d29c2611ccf2dd3bddb";\n', '\n', '    // MIP41: Facilitator Framework\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP41/mip41.md -q -O - 2>/dev/null)"\n', '    string constant public MIP41 = "0x2f5cba5b9ca5b15d0c2a896224105763bd0346d2722cbc03a88d7ed01a666b95";\n', '\n', '    // MIP4c2-SP12: MIP16 Amendments\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP4/MIP4c2-Subproposals/MIP4c2-SP12.md -q -O - 2>/dev/null)"\n', '    string constant public MIP4c2SP12 = "0x0a9c87c613deeea92efc3bc4cc00f036af415a6017883aaa1c1e3dc206c843dd";\n', '\n', '    // MIP4c2-SP10: MIP0 Amendments\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP4/MIP4c2-Subproposals/MIP4c2-SP10.md -q -O - 2>/dev/null)"\n', '    string constant public MIP4c2SP10 = "0x5f6ce94d58b206e9c3c72dced5f44ff57ae6975eb93877e91a7b48ff15736009";\n', '\n', '    // MIP39c2-SP1: Adding Core Unit Real-World Finance\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP39/MIP39c2-Subproposals/MIP39c2-SP1.md -q -O - 2>/dev/null)"\n', '    string constant public MIP39c2SP1 = "0xaa2b1fa7b3c4f64e3130c86bd8e8164868ca597bdebfe542917dddc13ed30a1e";\n', '\n', '    // MIP40c2-SP1: Modify Core Unit Budget Real-World Finance\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP40/MIP40c2-Subproposals/MIP40c2-SP1.md -q -O - 2>/dev/null)"\n', '    string constant public MIP40c2SP1 = "0x674d51a98f5cf80923b9ccf310f64a5890ae424386cf69dee5b11c54e2488aaf";\n', '\n', '    // MIP41c4-SP1: Facilitator Onboarding Real-World Finance\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP41/MIP41c4-Subproposals/MIP41c4-SP1.md -q -O - 2>/dev/null)"\n', '    string constant public MIP41c4SP1 = "0x347266a80c162643a3ad94373dc1318b9878790e3cd94c4806768912054f00a7";\n', '\n', '    // MIP39c2-SP2: Adding Risk Core Unit\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP39/MIP39c2-Subproposals/MIP39c2-SP2.md -q -O - 2>/dev/null)"\n', '    string constant public MIP39c2SP2 = "0xd1989672d982ca42dccbaf6d2682e68fd0ecc8c0b9537f2c970665af25c593c3";\n', '\n', '    // MIP40c2-SP2: Add Core Unit Budget Risk Core Unit\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP40/MIP40c2-Subproposals/MIP40c2-SP2.md -q -O - 2>/dev/null)"\n', '    string constant public MIP40c2SP2 = "0xf1a5ef4150b678fe6de3367be171f2ea809262c089bb13095e4e5391fbcf5ae8";\n', '\n', '    // MIP41c4-SP2: Risk Core Unit Facilitator Onboarding\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP41/MIP41c4-Subproposals/MIP41c4-SP2.md -q -O - 2>/dev/null)"\n', '    string constant public MIP41c4SP2 = "0xe589a0ffe300708fdd1be72729dba211c4681f5a78b5bc285b4a34c053bcef2d";\n', '\n', '    // MIP39c2-SP3: Governance Core Unit - GOV-001\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP39/MIP39c2-Subproposals/MIP39c2-SP3.md -q -O - 2>/dev/null)"\n', '    string constant public MIP39c2SP3 = "0x4476ffdb3a354f629e30766aaa0d6747490e2644f0f49d91f9dd2586c33c8c6e";\n', '\n', '    // MIP40c2-SP3: Core Unit Budget - GOV-001\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP40/MIP40c2-Subproposals/MIP40c2-SP3.md -q -O - 2>/dev/null)"\n', '    string constant public MIP40c2SP3 = "0x697448c9661344aacae3f73bb1d8af706f4ce2de10813fccb0911e2ac6c4a7b9";\n', '\n', '    // MIP41c4-SP3: Core Unit Facilitator Onboarding\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP41/MIP41c4-Subproposals/MIP41c4-SP3.md -q -O - 2>/dev/null)"\n', '    string constant public MIP41c4SP3 = "0x75177fbec9175c15ab50be6efcc909ce86e7fa60776078353858d9af824a46b8";\n', '\n', '    // MIP34: Keg Streaming Payments Module\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP34/mip34.md -q -O - 2>/dev/null)"\n', '    string constant public MIP34 = "0x72302509ab818d46cf2430f68b3f73b042e5bc2f3874392fd7342cf5fa83428d";\n', '\n', '    // MIP48: Streaming Payments via the Keg\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP48/MIP48.md -q -O - 2>/dev/null)"\n', '    string constant public MIP48 = "0x3705522884a1ca064a48e5f4169d776a18d9d3c1644ab000d6647ddc6bc7f0ee";\n', '\n', '    // MIP43 - Term Lending Module TLM\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP43/mip43.md -q -O - 2>/dev/null)"\n', '    string constant public MIP43 = "0x2d25bb60678daf9f7aa42da47341f11123362d19f092d34d0045b23f839546a8";\n', '\n', '    // MIP45: Liquidations 2.0 LIQ-2.0 - Liquidation System Redesign\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP45/mip45.md -q -O - 2>/dev/null)"\n', '    string constant public MIP45 = "0x5a9b309a1e21943f5ccca4b10554514e778d2a582580d421a750f5365e0f2536";\n', '\n', '    // MIP46: Parameter Proposal Groups\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP46/MIP46.md -q -O - 2>/dev/null)"\n', '    string constant public MIP46 = "0x1758d3b5cb0ec5c2f50548d31682432938a6c856786585e4035aca70ee68d813";\n', '\n', '    // MIP47: MakerDAO Multisignature Wallet Management\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/mips/5c981b8b24c966d110f133c792d27e7728cc77ab/MIP47/MIP47.md -q -O - 2>/dev/null)"\n', '    string constant public MIP47 = "0xbddccb8186167ab5288466928d78a9578301ddbfa09e0e83826fadbf9fc394be";\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '\n', '    // Disable Office Hours\n', '    function officeHours() public override returns (bool) {\n', '        return false;\n', '    }\n', '\n', '    function actions() public override {\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    DssSpellAction internal action_ = new DssSpellAction();\n', '    constructor() DssExec(action_.description(), block.timestamp + 4 days, address(action_)) public {}\n', '}']