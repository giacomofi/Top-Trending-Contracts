['/*\n', '    Copyright 2020 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '\n', '/**\n', ' * @title CompoundLikeGovernanceAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * Governance adapter for Compound-like governance systems (e.g. Uniswap) that returns data for voting, delegating and making proposals\n', ' */\n', 'contract CompoundLikeGovernanceAdapter {\n', '\n', '    /* ============ Constants ============ */\n', '\n', '    // Signature of the propose function in Compound Governor Alpha. This is used to encode the calldata for the propose function\n', '    string public constant PROPOSE_SIGNATURE = "propose(address[],uint256[],string[],bytes[],string)";\n', '    \n', '    // Signature of the delegate function in Compound Governor Alpha\n', '    string public constant DELEGATE_SIGNATURE = "delegate(address)";\n', '\n', '    address public constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000;\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of governance token\n', '    address public immutable governanceToken;\n', '\n', '    // Address of Compound-like Governor Alpha contract\n', '    address public immutable governorAlpha;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _governorAlpha    Address of Governor Alpha contract\n', '     * @param _governanceToken  Address of governance token\n', '     */\n', '    constructor(address _governorAlpha, address _governanceToken) public {\n', '        governorAlpha = _governorAlpha;\n', '        governanceToken = _governanceToken;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Generates the calldata to vote on a proposal. Bytes data paramater is unused in Compound\n', '     *\n', '     * @param _proposalId           ID of the proposal to vote on\n', '     * @param _support              Boolean indicating whether to support proposal\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Propose calldata\n', '     */\n', '    function getVoteCalldata(uint256 _proposalId, bool _support, bytes memory /* _data */) external view returns (address, uint256, bytes memory) {\n', '        // castVote(uint256 _proposalId, bool _support)\n', '        bytes memory callData = abi.encodeWithSignature("castVote(uint256,bool)", _proposalId, _support);\n', '\n', '        return (governorAlpha, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to delegate votes to another ETH address. Self and zero address allowed, which is equivalent to registering and revoking in Compound\n', '     * like governance systems.\n', '     *\n', '     * @param _delegatee            Address of the delegatee\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Propose calldata\n', '     */\n', '    function getDelegateCalldata(address _delegatee) external view returns (address, uint256, bytes memory) {\n', '        // delegate(address _delegatee)\n', '        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, _delegatee);\n', '\n', '        return (governanceToken, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to register for voting. This is equivalent to delegating to the SetToken address in Compound.\n', '     *\n', '     * @param _setToken             Address of SetToken\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Propose calldata\n', '     */\n', '    function getRegisterCalldata(address _setToken) external view returns (address, uint256, bytes memory) {\n', '        // delegate(address _delegatee)\n', '        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, _setToken);\n', '\n', '        return (governanceToken, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to revoke voting. This is equivalent to delegating to the zero address in Compound.\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Propose calldata\n', '     */\n', '    function getRevokeCalldata() external view returns (address, uint256, bytes memory) {\n', '        // delegate(address _delegatee)\n', '        bytes memory callData = abi.encodeWithSignature(DELEGATE_SIGNATURE, ZERO_ADDRESS);\n', '\n', '        return (governanceToken, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Generates the calldata to create a new proposal\n', '     *\n', '     * @param _proposalData         Byte data containing data about the proposal\n', '     *\n', '     * @return address              Target contract address\n', '     * @return uint256              Total quantity of ETH (Set to 0)\n', '     * @return bytes                Propose calldata\n', '     */\n', '    function getProposeCalldata(bytes memory _proposalData) external view returns (address, uint256, bytes memory) {\n', '        // Decode proposal data\n', '        (\n', '            address[] memory targets,\n', '            uint256[] memory values,\n', '            string[] memory signatures,\n', '            bytes[] memory calldatas,\n', '            string memory description\n', '        ) = abi.decode(_proposalData, (address[],uint256[],string[],bytes[],string));\n', '\n', '        // propose(address[],uint256[],string[],bytes[],string)\n', '        bytes memory callData = abi.encodeWithSignature(PROPOSE_SIGNATURE, targets, values, signatures, calldatas, description);\n', '\n', '        return (governorAlpha, 0, callData);\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']