['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-24\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library EnumerableSet {\n', '\n', '    struct Set {\n', '\n', '        bytes32[] _values;\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', "            set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n", '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract Owned is Context {\n', '    address private _owner;\n', '    address private _operator;\n', '    address private _pendingOwner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier ownerOnly {\n', '        require(_owner == _msgSender() || _msgSender() == _operator, "not allowed");\n', '        _;\n', '    }\n', '\n', '\n', '    modifier pendingOnly {\n', '        require (_pendingOwner == msg.sender, "cannot claim");\n', '        _;\n', '    }\n', '\n', '    function pendingOwner() public view returns (address) {\n', '        return _pendingOwner;\n', '    }\n', '\n', '    function renounceOwnership() public virtual ownerOnly {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public ownerOnly {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        _pendingOwner = newOwner;\n', '    }\n', '\n', '    function cancelTransfer() public ownerOnly {\n', '        require(_pendingOwner != address(0), "no pending owner");\n', '        _pendingOwner = address(0);\n', '    }\n', '\n', '    function claimOwnership() public pendingOnly {\n', '        _pendingOwner = address(0);\n', '        emit OwnershipTransferred(_owner, _msgSender());\n', '        _owner = _msgSender();\n', '    }\n', '\n', '\n', '}\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '    function migrator() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '    function setMigrator(address) external;\n', '}\n', '\n', 'interface IUniswapV2Router01 {\n', '    function factory() external pure returns (address);\n', '    function WETH() external pure returns (address);\n', '\n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint amountADesired,\n', '        uint amountBDesired,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB, uint liquidity);\n', '    function addLiquidityETH(\n', '        address token,\n', '        uint amountTokenDesired,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETH(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function removeLiquidityWithPermit(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint liquidity,\n', '        uint amountAMin,\n', '        uint amountBMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountA, uint amountB);\n', '    function removeLiquidityETHWithPermit(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountToken, uint amountETH);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapTokensForExactTokens(\n', '        uint amountOut,\n', '        uint amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n', '        external\n', '        returns (uint[] memory amounts);\n', '    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n', '        external\n', '        payable\n', '        returns (uint[] memory amounts);\n', '\n', '    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n', '    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n', '    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n', '}\n', '\n', 'interface IUniswapV2Router02 is IUniswapV2Router01 {\n', '    function removeLiquidityETHSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint amountETH);\n', '    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n', '        address token,\n', '        uint liquidity,\n', '        uint amountTokenMin,\n', '        uint amountETHMin,\n', '        address to,\n', '        uint deadline,\n', '        bool approveMax, uint8 v, bytes32 r, bytes32 s\n', '    ) external returns (uint amountETH);\n', '\n', '    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external payable;\n', '    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external;\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface ITValues {\n', '    struct TxValue {\n', '        uint256 amount;\n', '        uint256 transferAmount;\n', '        uint256 fee;\n', '        uint256 buyFee;\n', '        uint256 sellFee;\n', '        uint256 buyBonus;\n', '        uint256 donationFee;\n', '        uint256 burnFee;\n', '        uint256 farmFee;\n', '        uint256 lpFee;\n', '        uint256 nftFee;\n', '    }\n', '    enum TxType { FromExcluded, ToExcluded, BothExcluded, Standard }\n', '    enum TState { Buy, Sell, Normal }\n', '}\n', '\n', 'interface IStates {\n', '\n', '    struct Balances {\n', '        uint256 tokenSupply;\n', '        uint256 networkSupply;\n', '        uint256 targetSupply;\n', '        uint256 pairSupply;\n', '        uint256 lpSupply;\n', '        uint256 fees;\n', '    }\n', '\n', '    struct Divisors {\n', '        uint256 buy;\n', '        uint256 sell;\n', '        uint256 burn;\n', '        uint256 tx;\n', '        uint256 donate;\n', '    }\n', '\n', '    struct Account {\n', '        bool feeless;\n', '        bool transferPair;\n', '        bool excluded;\n', '        uint256 tTotal;\n', '        uint256 nTotal;\n', '    }\n', '}\n', '\n', 'contract MUSKITO is IERC20, Owned {\n', '\n', '    using Address for address;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    IStates.Balances balances;\n', '    IStates.Divisors divisors;\n', '    ITValues.TState lastTState;\n', '\n', '    EnumerableSet.AddressSet excludedAccounts;\n', '    EnumerableSet.AddressSet blackListedBots;\n', '\n', '\n', '    address private _op;\n', '    address private _donations;\n', '    address private _router;\n', '    address public  _pool;\n', '    address private _pair;\n', '\n', '    uint256 private _lastFee;\n', '    uint256 public buys;\n', '    uint256 public burns;\n', '\n', '\n', '    bool private _paused;\n', '    bool private _lpAdded;\n', '\n', '    mapping(address => IStates.Account) accounts;\n', '    mapping(address => mapping(address => uint256)) allowances;\n', '\n', '    constructor() {\n', '\n', '        _name = "MUSKITO Token";\n', '        _symbol = "MUSKITO";\n', '        _decimals = 18;\n', '\n', '        balances.tokenSupply = 1_000_000_000 ether;\n', '        balances.networkSupply = (~uint256(0) - (~uint256(0) % balances.tokenSupply));\n', '\n', '        divisors.tx = 50;    // 2%\n', '        divisors.sell = 100;  // 1%\n', '        divisors.buy = 100;   // 1%\n', '        divisors.burn = 100; // 1%\n', '        divisors.donate = 100;   // 1%\n', '\n', '        _router = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '        _op = address(0x9C5142ca89EAC453C1Eb9EF8d5E854ca01743F6e);\n', '        _donations = address(0x9C5142ca89EAC453C1Eb9EF8d5E854ca01743F6e);\n', '        _pair = IUniswapV2Router02(_router).WETH();\n', '        _pool = IUniswapV2Factory(IUniswapV2Router02(_router).factory()).createPair(address(this), _pair);\n', '        _paused = true;\n', '\n', '        EnumerableSet.add(blackListedBots, address(0xE031b36b53E53a292a20c5F08fd1658CDdf74fce));\n', '        EnumerableSet.add(blackListedBots, address(0x000000000000084e91743124a982076C59f10084));\n', '        EnumerableSet.add(blackListedBots, address(0x000000917de6037d52b1F0a306eeCD208405f7cd));\n', '        EnumerableSet.add(blackListedBots, address(0x1d6E8BAC6EA3730825bde4B005ed7B2B39A2932d));\n', '        EnumerableSet.add(blackListedBots, address(0x7100e690554B1c2FD01E8648db88bE235C1E6514));\n', '        EnumerableSet.add(blackListedBots, address(0x72b30cDc1583224381132D379A052A6B10725415));\n', '        EnumerableSet.add(blackListedBots, address(0x9282dc5c422FA91Ff2F6fF3a0b45B7BF97CF78E7));\n', '        EnumerableSet.add(blackListedBots, address(0x9eDD647D7d6Eceae6bB61D7785Ef66c5055A9bEE));\n', '        EnumerableSet.add(blackListedBots, address(0xfad95B6089c53A0D1d861eabFaadd8901b0F8533));\n', '\n', '        accounts[_msgSender()].feeless = true;\n', '        accounts[_donations].feeless = true;\n', '        accounts[_pool].transferPair = true;\n', '        accounts[_msgSender()].nTotal = balances.networkSupply / 2;\n', '        accounts[address(0)].nTotal = balances.networkSupply / 2;\n', '\n', '        _approve(_msgSender(), _router, balances.tokenSupply);\n', '\n', '    }\n', '\n', '    //------ ERC20 Functions -----\n', '\n', '    function name() public view returns(string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function decimals() public view returns(uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public view override returns (uint256) {\n', '        return allowances[owner][spender];\n', '    }\n', '\n', '    // This is important to show the rebalanced values.\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        if(getExcluded(account)) {\n', '            return accounts[account].tTotal;\n', '        }\n', '        return accounts[account].nTotal / ratio();\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) private {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, allowances[_msgSender()][spender] + addedValue);\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, allowances[_msgSender()][spender] - (subtractedValue));\n', '        return true;\n', '    }\n', '\n', '    function totalSupply() public view override returns (uint256) {\n', '        return balances.tokenSupply;\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _rTransfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _rTransfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), allowances[sender][_msgSender()] - amount);\n', '        return true;\n', '    }\n', '\n', '\n', '    function whaleCheck(uint256 amount, address account) internal view {\n', '        if(_paused) {\n', '            require(amount <= (balances.tokenSupply / 2) / 100, "whale limit on");\n', '            require(balanceOf(account) <= (balances.tokenSupply / 2) / 100, "already bought 500, wait till check off");\n', '        }\n', '    }\n', '\n', '    // one way function, once called it will always be false.\n', '    function enableTrading() external ownerOnly {\n', '        _paused = false;\n', '    }\n', '\n', '    function _rTransfer(address sender, address recipient, uint256 amount) internal returns(bool) {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '        require(amount > 0, "Transfer amount must be greater than zero");\n', '        require(!EnumerableSet.contains(blackListedBots, recipient), "fuck you bot");\n', '        require(!EnumerableSet.contains(blackListedBots, msg.sender), "fuck you bot");\n', '        if(sender == _pool) {\n', '            whaleCheck(amount, recipient);\n', '        }\n', '        if(_paused){\n', '            require(sender == owner() || recipient != _pool, "still paused");\n', '        }\n', '        uint256 rate = ratio();\n', '        uint256 lpAmount = getCurrentLPBal();\n', '        bool isFeeless = isFeelessTx(sender, recipient);\n', '        (ITValues.TxValue memory t, ITValues.TState ts, ITValues.TxType txType) = calcT(sender, recipient, amount, isFeeless, lpAmount);\n', '        balances.lpSupply = lpAmount;\n', '        if(!isFeeless) {\n', '            accounts[_donations].nTotal += (t.donationFee * rate);\n', '            accounts[address(0)].nTotal += (t.burnFee) * rate;\n', '            accounts[address(0)].tTotal += (t.burnFee);\n', '            if(ts == ITValues.TState.Sell) {\n', '                accounts[_donations].nTotal += (_lastFee) * rate;\n', '                accounts[_donations].tTotal += (_lastFee);\n', '                _lastFee = 0;\n', '            } else if(ts == ITValues.TState.Buy) {\n', '                accounts[recipient].nTotal += _lastFee * rate;\n', '                buys++;\n', '                _lastFee = 0;\n', '            } else { // liq transfers\n', '                accounts[address(0)].nTotal += (_lastFee * rate);\n', '                _lastFee = 0;\n', '            }\n', '            _lastFee = t.sellFee + t.buyFee;\n', '            balances.fees += t.fee;\n', '            balances.networkSupply -= t.fee * rate;\n', '        }\n', '        _transfer(sender, recipient, rate, t, txType);\n', '        lastTState = ts;\n', '        return true;\n', '    }\n', '\n', '    function calcT(address sender, address recipient, uint256 amount, bool noFee, uint256 lpAmount) public view returns (ITValues.TxValue memory t, ITValues.TState ts, ITValues.TxType txType) {\n', '        ts = getTState(sender, recipient, lpAmount);\n', '        txType = getTxType(sender, recipient);\n', '        t.amount = amount;\n', '        if(!noFee) {\n', '            if(!_paused) {\n', '                t.fee = amount / divisors.tx;\n', '                t.donationFee = amount / divisors.donate;\n', '                t.burnFee = amount / divisors.burn;\n', '                if(ts == ITValues.TState.Sell) {\n', '                    t.sellFee = amount / divisors.sell;\n', '                }\n', '                if(ts == ITValues.TState.Buy) {\n', '                    t.buyFee = amount / divisors.buy;\n', '                }\n', '            }\n', '        }\n', '        t.transferAmount = t.amount - t.fee - t.sellFee - t.buyFee - t.donationFee - t.burnFee;\n', '        return (t, ts, txType);\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 rate, ITValues.TxValue memory t, ITValues.TxType txType) internal {\n', '        if (txType == ITValues.TxType.ToExcluded) {\n', '            accounts[sender].nTotal         -= t.amount * rate;\n', '            accounts[recipient].tTotal      += (t.transferAmount);\n', '            accounts[recipient].nTotal      += t.transferAmount * rate;\n', '        } else if (txType == ITValues.TxType.FromExcluded) {\n', '            accounts[sender].tTotal         -= t.amount;\n', '            accounts[sender].nTotal         -= t.amount * rate;\n', '            accounts[recipient].nTotal      += t.transferAmount * rate;\n', '        } else if (txType == ITValues.TxType.BothExcluded) {\n', '            accounts[sender].tTotal         -= t.amount;\n', '            accounts[sender].nTotal         -= (t.amount * rate);\n', '            accounts[recipient].tTotal      += t.transferAmount;\n', '            accounts[recipient].nTotal      += (t.transferAmount * rate);\n', '        } else {\n', '            accounts[sender].nTotal         -= (t.amount * rate);\n', '            accounts[recipient].nTotal      += (t.transferAmount * rate);\n', '        }\n', '        emit Transfer(sender, recipient, t.transferAmount);\n', '    }\n', '\n', '    function include(address account) external ownerOnly {\n', '        require(accounts[account].excluded, "Account is already excluded");\n', '        require(accounts[account].nTotal > 3 ether * ratio(), "not enough to include yourself");\n', '        accounts[account].tTotal = 0;\n', '        EnumerableSet.remove(excludedAccounts, account);\n', '    }\n', '\n', '    function exclude(address account) external ownerOnly {\n', '        require(!accounts[account].excluded, "Account is already excluded");\n', '        accounts[account].excluded = true;\n', '        if(accounts[account].nTotal > 0) {\n', '            accounts[account].tTotal = accounts[account].nTotal / ratio();\n', '        }\n', '        accounts[account].excluded = true;\n', '        EnumerableSet.add(excludedAccounts, account);\n', '    }\n', '\n', '    function donate(uint256 amount) external {\n', '        address sender = _msgSender();\n', '        uint256 rate = ratio();\n', '        require(!getExcluded(sender), "Excluded addresses can\'t call this function");\n', '        require(amount * rate < accounts[sender].nTotal, "too much");\n', '        accounts[sender].nTotal -= (amount * rate);\n', '        accounts[_donations].nTotal -= (amount * rate);\n', '        emit Transfer(msg.sender, _donations, amount);\n', '    }\n', '\n', '    function burn() external {\n', '        require(buys >= 5000 * burns, "can\'t call yet");\n', '        uint256 r = accounts[_pool].nTotal;\n', '        uint256 rTarget = (r / 5); // 20%\n', '        uint256 t = rTarget / ratio();\n', '        accounts[_pool].nTotal -= rTarget;\n', '        accounts[address(0)].nTotal += rTarget;\n', '        emit Transfer(_pool, address(0), t);\n', '        burns++;\n', '        syncPool();\n', '    }\n', '\n', '    function burned() public view returns(uint256) {\n', '        return balanceOf(address(0));\n', '    }\n', '\n', '    function isFeelessTx(address sender, address recipient) public view returns(bool) {\n', '        return accounts[sender].feeless || accounts[recipient].feeless;\n', '    }\n', '\n', '    function getAccount(address account) external view returns(IStates.Account memory) {\n', '        return accounts[account];\n', '    }\n', '\n', '    function getDivisors() external view returns(IStates.Divisors memory) {\n', '        return divisors;\n', '    }\n', '\n', '    function getBalances() external view returns(IStates.Balances memory) {\n', '        return balances;\n', '    }\n', '\n', '    function getExcluded(address account) public view returns(bool) {\n', '        return accounts[account].excluded;\n', '    }\n', '\n', '    function getCurrentLPBal() public view returns(uint256) {\n', '        return IERC20(_pool).totalSupply();\n', '    }\n', '\n', '    function getTState(address sender, address recipient, uint256 lpAmount) public view returns(ITValues.TState) {\n', '        ITValues.TState t;\n', '        if(sender == _router) {\n', '            t = ITValues.TState.Normal;\n', '        } else if(accounts[sender].transferPair) {\n', '            if(balances.lpSupply != lpAmount) { // withdraw vs buy\n', '                t = ITValues.TState.Normal;\n', '            }\n', '            t = ITValues.TState.Buy;\n', '        } else if(accounts[recipient].transferPair) {\n', '            t = ITValues.TState.Sell;\n', '        } else {\n', '            t = ITValues.TState.Normal;\n', '        }\n', '        return t;\n', '    }\n', '\n', '    function getCirculatingSupply() public view returns(uint256, uint256) {\n', '        uint256 rSupply = balances.networkSupply;\n', '        uint256 tSupply = balances.tokenSupply;\n', '        for (uint256 i = 0; i < EnumerableSet.length(excludedAccounts); i++) {\n', '            address account = EnumerableSet.at(excludedAccounts, i);\n', '            uint256 rBalance = accounts[account].nTotal;\n', '            uint256 tBalance = accounts[account].tTotal;\n', '            if (rBalance > rSupply || tBalance > tSupply) return (balances.networkSupply, balances.tokenSupply);\n', '            rSupply -= rBalance;\n', '            tSupply -= tBalance;\n', '        }\n', '        if (rSupply < balances.networkSupply / balances.tokenSupply) return (balances.networkSupply, balances.tokenSupply);\n', '        return (rSupply, tSupply);\n', '    }\n', '\n', '    function getTxType(address sender, address recipient) public view returns(ITValues.TxType t) {\n', '        bool isSenderExcluded = accounts[sender].excluded;\n', '        bool isRecipientExcluded = accounts[recipient].excluded;\n', '        if (isSenderExcluded && !isRecipientExcluded) {\n', '            t = ITValues.TxType.FromExcluded;\n', '        } else if (!isSenderExcluded && isRecipientExcluded) {\n', '            t = ITValues.TxType.ToExcluded;\n', '        } else if (!isSenderExcluded && !isRecipientExcluded) {\n', '            t = ITValues.TxType.Standard;\n', '        } else if (isSenderExcluded && isRecipientExcluded) {\n', '            t = ITValues.TxType.BothExcluded;\n', '        } else {\n', '            t = ITValues.TxType.Standard;\n', '        }\n', '        return t;\n', '    }\n', '\n', '    function ratio() public view returns(uint256) {\n', '        (uint256 n, uint256 t) = getCirculatingSupply();\n', '        return n / t;\n', '    }\n', '\n', '    function syncPool() public  {\n', '        IUniswapV2Pair(_pool).sync();\n', '    }\n', '\n', '}']