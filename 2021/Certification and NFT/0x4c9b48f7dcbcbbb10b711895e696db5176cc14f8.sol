['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', 'pragma solidity ^0.6.0; \n', 'pragma experimental ABIEncoderV2;\n', '\n', ' contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  contract Discount {\n', '    address public owner;\n', '    mapping(address => CustomServiceFee) public serviceFees;\n', '\n', '    uint256 constant MAX_SERVICE_FEE = 400;\n', '\n', '    struct CustomServiceFee {\n', '        bool active;\n', '        uint256 amount;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isCustomFeeSet(address _user) public view returns (bool) {\n', '        return serviceFees[_user].active;\n', '    }\n', '\n', '    function getCustomServiceFee(address _user) public view returns (uint256) {\n', '        return serviceFees[_user].amount;\n', '    }\n', '\n', '    function setServiceFee(address _user, uint256 _fee) public {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n', '    }\n', '\n', '    function disableServiceFee(address _user) public {\n', '        require(msg.sender == owner, "Only owner");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n', '    }\n', '}  abstract contract PipInterface {\n', '    function read() public virtual returns (bytes32);\n', '}  abstract contract Spotter {\n', '    struct Ilk {\n', '        PipInterface pip;\n', '        uint256 mat;\n', '    }\n', '\n', '    mapping (bytes32 => Ilk) public ilks;\n', '\n', '    uint256 public par;\n', '\n', '}  abstract contract Jug {\n', '    struct Ilk {\n', '        uint256 duty;\n', '        uint256  rho;\n', '    }\n', '\n', '    mapping (bytes32 => Ilk) public ilks;\n', '\n', '    function drip(bytes32) public virtual returns (uint);\n', '}  abstract contract Vat {\n', '\n', '    struct Urn {\n', '        uint256 ink;   // Locked Collateral  [wad]\n', '        uint256 art;   // Normalised Debt    [wad]\n', '    }\n', '\n', '    struct Ilk {\n', '        uint256 Art;   // Total Normalised Debt     [wad]\n', '        uint256 rate;  // Accumulated Rates         [ray]\n', '        uint256 spot;  // Price with Safety Margin  [ray]\n', '        uint256 line;  // Debt Ceiling              [rad]\n', '        uint256 dust;  // Urn Debt Floor            [rad]\n', '    }\n', '\n', '    mapping (bytes32 => mapping (address => Urn )) public urns;\n', '    mapping (bytes32 => Ilk)                       public ilks;\n', '    mapping (bytes32 => mapping (address => uint)) public gem;  // [wad]\n', '\n', '    function can(address, address) virtual public view returns (uint);\n', '    function dai(address) virtual public view returns (uint);\n', '    function frob(bytes32, address, address, address, int, int) virtual public;\n', '    function hope(address) virtual public;\n', '    function move(address, address, uint) virtual public;\n', '    function fork(bytes32, address, address, int, int) virtual public;\n', '}  abstract contract Gem {\n', '    function dec() virtual public returns (uint);\n', '    function gem() virtual public returns (Gem);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '\n', '    function approve(address, uint) virtual public;\n', '    function transfer(address, uint) virtual public returns (bool);\n', '    function transferFrom(address, address, uint) virtual public returns (bool);\n', '    function deposit() virtual public payable;\n', '    function withdraw(uint) virtual public;\n', '    function allowance(address, address) virtual public returns (uint);\n', '}  abstract contract DaiJoin {\n', '    function vat() public virtual returns (Vat);\n', '    function dai() public virtual returns (Gem);\n', '    function join(address, uint) public virtual payable;\n', '    function exit(address, uint) public virtual;\n', '}  abstract contract Join {\n', '    bytes32 public ilk;\n', '\n', '    function dec() virtual public view returns (uint);\n', '    function gem() virtual public view returns (Gem);\n', '    function join(address, uint) virtual public payable;\n', '    function exit(address, uint) virtual public;\n', '}  contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}  abstract contract DSAuthority {\n', '    function canCall(address src, address dst, bytes4 sig) public virtual view returns (bool);\n', '}  contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig));\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}  contract DSNote {\n', '    event LogNote(\n', '        bytes4 indexed sig,\n', '        address indexed guy,\n', '        bytes32 indexed foo,\n', '        bytes32 indexed bar,\n', '        uint256 wad,\n', '        bytes fax\n', '    ) anonymous;\n', '\n', '    modifier note {\n', '        bytes32 foo;\n', '        bytes32 bar;\n', '\n', '        assembly {\n', '            foo := calldataload(4)\n', '            bar := calldataload(36)\n', '        }\n', '\n', '        emit LogNote(msg.sig, msg.sender, foo, bar, msg.value, msg.data);\n', '\n', '        _;\n', '    }\n', '}  abstract contract DSProxy is DSAuth, DSNote {\n', '    DSProxyCache public cache; // global cache for contracts\n', '\n', '    constructor(address _cacheAddr) public {\n', '        require(setCache(_cacheAddr));\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external payable {}\n', '\n', '    // use the proxy to execute calldata _data on contract _code\n', '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public\n', '    //     payable\n', '    //     virtual\n', '    //     returns (address target, bytes32 response);\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        payable\n', '        virtual\n', '        returns (bytes32 response);\n', '\n', '    //set new cache\n', '    function setCache(address _cacheAddr) public virtual payable returns (bool);\n', '}\n', '\n', '\n', 'contract DSProxyCache {\n', '    mapping(bytes32 => address) cache;\n', '\n', '    function read(bytes memory _code) public view returns (address) {\n', '        bytes32 hash = keccak256(_code);\n', '        return cache[hash];\n', '    }\n', '\n', '    function write(bytes memory _code) public returns (address target) {\n', '        assembly {\n', '            target := create(0, add(_code, 0x20), mload(_code))\n', '            switch iszero(extcodesize(target))\n', '                case 1 {\n', '                    // throw if contract failed to deploy\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '        bytes32 hash = keccak256(_code);\n', '        cache[hash] = target;\n', '    }\n', '}  abstract contract Manager {\n', '    function last(address) virtual public returns (uint);\n', '    function cdpCan(address, uint, address) virtual public view returns (uint);\n', '    function ilks(uint) virtual public view returns (bytes32);\n', '    function owns(uint) virtual public view returns (address);\n', '    function urns(uint) virtual public view returns (address);\n', '    function vat() virtual public view returns (address);\n', '    function open(bytes32, address) virtual public returns (uint);\n', '    function give(uint, address) virtual public;\n', '    function cdpAllow(uint, address, uint) virtual public;\n', '    function urnAllow(address, uint) virtual public;\n', '    function frob(uint, int, int) virtual public;\n', '    function flux(uint, address, uint) virtual public;\n', '    function move(uint, address, uint) virtual public;\n', '    function exit(address, uint, address, uint) virtual public;\n', '    function quit(uint, address) virtual public;\n', '    function enter(address, uint) virtual public;\n', '    function shift(uint, uint) virtual public;\n', '}  /// @title Helper methods for MCDSaverProxy\n', 'contract MCDSaverProxyHelper is DSMath {\n', '\n', '    enum ManagerType { MCD, BPROTOCOL }\n', '\n', '    /// @notice Returns a normalized debt _amount based on the current rate\n', '    /// @param _amount Amount of dai to be normalized\n', '    /// @param _rate Current rate of the stability fee\n', '    /// @param _daiVatBalance Balance od Dai in the Vat for that CDP\n', '    function normalizeDrawAmount(uint _amount, uint _rate, uint _daiVatBalance) internal pure returns (int dart) {\n', '        if (_daiVatBalance < mul(_amount, RAY)) {\n', '            dart = toPositiveInt(sub(mul(_amount, RAY), _daiVatBalance) / _rate);\n', '            dart = mul(uint(dart), _rate) < mul(_amount, RAY) ? dart + 1 : dart;\n', '        }\n', '    }\n', '\n', '    /// @notice Converts a number to Rad percision\n', '    /// @param _wad The input number in wad percision\n', '    function toRad(uint _wad) internal pure returns (uint) {\n', '        return mul(_wad, 10 ** 27);\n', '    }\n', '\n', '    /// @notice Converts a number to 18 decimal percision\n', '    /// @param _joinAddr Join address of the collateral\n', '    /// @param _amount Number to be converted\n', '    function convertTo18(address _joinAddr, uint256 _amount) internal view returns (uint256) {\n', '        return mul(_amount, 10 ** (18 - Join(_joinAddr).dec()));\n', '    }\n', '\n', '    /// @notice Converts a uint to int and checks if positive\n', '    /// @param _x Number to be converted\n', '    function toPositiveInt(uint _x) internal pure returns (int y) {\n', '        y = int(_x);\n', '        require(y >= 0, "int-overflow");\n', '    }\n', '\n', '    /// @notice Gets Dai amount in Vat which can be added to Cdp\n', '    /// @param _vat Address of Vat contract\n', '    /// @param _urn Urn of the Cdp\n', '    /// @param _ilk Ilk of the Cdp\n', '    function normalizePaybackAmount(address _vat, address _urn, bytes32 _ilk) internal view returns (int amount) {\n', '        uint dai = Vat(_vat).dai(_urn);\n', '\n', '        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n', '        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n', '\n', '        amount = toPositiveInt(dai / rate);\n', '        amount = uint(amount) <= art ? - amount : - toPositiveInt(art);\n', '    }\n', '\n', '    /// @notice Gets the whole debt of the CDP\n', '    /// @param _vat Address of Vat contract\n', '    /// @param _usr Address of the Dai holder\n', '    /// @param _urn Urn of the Cdp\n', '    /// @param _ilk Ilk of the Cdp\n', '    function getAllDebt(address _vat, address _usr, address _urn, bytes32 _ilk) internal view returns (uint daiAmount) {\n', '        (, uint rate,,,) = Vat(_vat).ilks(_ilk);\n', '        (, uint art) = Vat(_vat).urns(_ilk, _urn);\n', '        uint dai = Vat(_vat).dai(_usr);\n', '\n', '        uint rad = sub(mul(art, rate), dai);\n', '        daiAmount = rad / RAY;\n', '\n', '        daiAmount = mul(daiAmount, RAY) < rad ? daiAmount + 1 : daiAmount;\n', '    }\n', '\n', '    /// @notice Gets the token address from the Join contract\n', '    /// @param _joinAddr Address of the Join contract\n', '    function getCollateralAddr(address _joinAddr) internal view returns (address) {\n', '        return address(Join(_joinAddr).gem());\n', '    }\n', '\n', '    /// @notice Checks if the join address is one of the Ether coll. types\n', '    /// @param _joinAddr Join address to check\n', '    function isEthJoinAddr(address _joinAddr) internal view returns (bool) {\n', "        // if it's dai_join_addr don't check gem() it will fail\n", '        if (_joinAddr == 0x9759A6Ac90977b93B58547b4A71c78317f391A28) return false;\n', '\n', "        // if coll is weth it's and eth type coll\n", '        if (address(Join(_joinAddr).gem()) == 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2) {\n', '            return true;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    /// @notice Gets CDP info (collateral, debt)\n', '    /// @param _manager Manager contract\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    function getCdpInfo(Manager _manager, uint _cdpId, bytes32 _ilk) public view returns (uint, uint) {\n', '        address vat = _manager.vat();\n', '        address urn = _manager.urns(_cdpId);\n', '\n', '        (uint collateral, uint debt) = Vat(vat).urns(_ilk, urn);\n', '        (,uint rate,,,) = Vat(vat).ilks(_ilk);\n', '\n', '        return (collateral, rmul(debt, rate));\n', '    }\n', '\n', '    /// @notice Address that owns the DSProxy that owns the CDP\n', '    /// @param _manager Manager contract\n', '    /// @param _cdpId Id of the CDP\n', '    function getOwner(Manager _manager, uint _cdpId) public view returns (address) {\n', '        DSProxy proxy = DSProxy(uint160(_manager.owns(_cdpId)));\n', '\n', '        return proxy.owner();\n', '    }\n', '\n', '    /// @notice Based on the manager type returns the address\n', '    /// @param _managerType Type of vault manager to use\n', '    function getManagerAddr(ManagerType _managerType) public pure returns (address) {\n', '        if (_managerType == ManagerType.MCD) {\n', '            return 0x5ef30b9986345249bc32d8928B7ee64DE9435E39;\n', '        } else if (_managerType == ManagerType.BPROTOCOL) {\n', '            return 0x3f30c2381CD8B917Dd96EB2f1A4F96D91324BBed;\n', '        }\n', '    }\n', '}  interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '}  contract BotRegistry is AdminAuth {\n', '\n', '    mapping (address => bool) public botList;\n', '\n', '    constructor() public {\n', '        botList[0x776B4a13093e30B05781F97F6A4565B6aa8BE330] = true;\n', '\n', '        botList[0xAED662abcC4FA3314985E67Ea993CAD064a7F5cF] = true;\n', '        botList[0xa5d330F6619d6bF892A5B87D80272e1607b3e34D] = true;\n', '        botList[0x5feB4DeE5150B589a7f567EA7CADa2759794A90A] = true;\n', '        botList[0x7ca06417c1d6f480d3bB195B80692F95A6B66158] = true;\n', '    }\n', '\n', '    function setBot(address _botAddr, bool _state) public onlyOwner {\n', '        botList[_botAddr] = _state;\n', '    }\n', '\n', '}  abstract contract TokenInterface {\n', '\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(address, address, uint256) public virtual returns (bool);\n', '\n', '    function deposit() public virtual payable;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  interface ExchangeInterfaceV3 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '}  contract ZrxAllowlist is AdminAuth {\n', '\n', '    mapping (address => bool) public zrxAllowlist;\n', '    mapping(address => bool) private nonPayableAddrs;\n', '\n', '    constructor() public {\n', '        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\n', '        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\n', '        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n', '        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '\n', '        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '    }\n', '\n', '    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n', '        zrxAllowlist[_zrxAddr] = _state;\n', '    }\n', '\n', '    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n', '        return zrxAllowlist[_zrxAddr];\n', '    }\n', '\n', '    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = true;\n', '\t}\n', '\n', '\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = false;\n', '\t}\n', '\n', '\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\n', '\t\treturn nonPayableAddrs[_addr];\n', '\t}\n', '}    \n', '\n', 'contract DFSExchangeData {\n', '\n', '    // first is empty to keep the legacy order in place\n', '    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n', '\n', '    enum ActionType { SELL, BUY }\n', '\n', '    struct OffchainData {\n', '        address wrapper;\n', '        address exchangeAddr;\n', '        address allowanceTarget;\n', '        uint256 price;\n', '        uint256 protocolFee;\n', '        bytes callData;\n', '    }\n', '\n', '    struct ExchangeData {\n', '        address srcAddr;\n', '        address destAddr;\n', '        uint256 srcAmount;\n', '        uint256 destAmount;\n', '        uint256 minPrice;\n', '        uint256 dfsFeeDivider; // service fee divider\n', '        address user; // user to check special fee\n', '        address wrapper;\n', '        bytes wrapperData;\n', '        OffchainData offchainData;\n', '    }\n', '\n', '    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n', '        return abi.encode(_exData);\n', '    }\n', '\n', '    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n', '        _exData = abi.decode(_data, (ExchangeData));\n', '    }\n', '}  // SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'abstract contract IFeeRecipient {\n', '    function getFeeAddr() public view virtual returns (address);\n', '    function changeWalletAddr(address _newWallet) public virtual;\n', '}  contract DFSExchangeHelper {\n', '\n', '    string public constant ERR_OFFCHAIN_DATA_INVALID = "Offchain data invalid";\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\n', '\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n', '\n', '    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n', '\n', '\n', '    function getDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == KYBER_ETH_ADDRESS) return 18;\n', '\n', '        return ERC20(_token).decimals();\n', '    }\n', '\n', '    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n', '        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n', '            balance = address(this).balance;\n', '        } else {\n', '            balance = ERC20(_tokenAddr).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n', '        // send back any leftover ether or tokens\n', '        if (address(this).balance > 0) {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '\n', '        if (getBalance(_srcAddr) > 0) {\n', '            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n', '        }\n', '\n', '        if (getBalance(_destAddr) > 0) {\n', '            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n', '        }\n', '    }\n', '\n', '    /// @notice Takes a feePercentage and sends it to wallet\n', '    /// @param _amount Dai amount of the whole trade\n', '    /// @param _user Address of the user\n', '    /// @param _token Address of the token\n', '    /// @param _dfsFeeDivider Dfs fee divider\n', '    /// @return feeAmount Amount in Dai owner earned on the fee\n', '    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\n', '        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n', '            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n', '        }\n', '\n', '        if (_dfsFeeDivider == 0) {\n', '            feeAmount = 0;\n', '        } else {\n', '            feeAmount = _amount / _dfsFeeDivider;\n', '\n', "            // fee can't go over 10% of the whole amount\n", '            if (feeAmount > (_amount / 10)) {\n', '                feeAmount = _amount / 10;\n', '            }\n', '\n', '            address walletAddr = _feeRecipient.getFeeAddr();\n', '\n', '            if (_token == KYBER_ETH_ADDRESS) {\n', '                payable(walletAddr).transfer(feeAmount);\n', '            } else {\n', '                ERC20(_token).safeTransfer(walletAddr, feeAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '\n', '        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n', '        if (_b.length < _index + 32) {\n', '            revert(ERR_OFFCHAIN_DATA_INVALID);\n', '        }\n', '\n', '        bytes32 input = bytes32(_input);\n', '\n', '        _index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(_b, _index), input)\n', '        }\n', '    }\n', '\n', '    /// @notice Converts Kybers Eth address -> Weth\n', '    /// @param _src Input address\n', '    function ethToWethAddr(address _src) internal pure returns (address) {\n', '        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\n', '    }\n', '}  contract SaverExchangeRegistry is AdminAuth {\n', '\n', '\tmapping(address => bool) private wrappers;\n', '\n', '\tconstructor() public {\n', '\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\n', '\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\n', '\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\n', '\t}\n', '\n', '\tfunction addWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = true;\n', '\t}\n', '\n', '\tfunction removeWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = false;\n', '\t}\n', '\n', '\tfunction isWrapper(address _wrapper) public view returns(bool) {\n', '\t\treturn wrappers[_wrapper];\n', '\t}\n', '}    \n', '\n', '\n', '\n', 'abstract contract OffchainWrapperInterface is DFSExchangeData {\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) virtual public payable returns (bool success, uint256);\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\n', '\n', '    string public constant ERR_SLIPPAGE_HIT = "Slippage hit";\n', '    string public constant ERR_DEST_AMOUNT_MISSING = "Dest amount missing";\n', '    string public constant ERR_WRAPPER_INVALID = "Wrapper invalid";\n', '    string public constant ERR_NOT_ZEROX_EXCHANGE = "Zerox exchange invalid";\n', '\n', '    /// @notice Internal method that preforms a sell on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and destAmount\n', '    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n', '        }\n', '\n', '        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.offchainData.price > 0) {\n', '            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\n', '\n', '            if (success) {\n', '                wrapper = exData.offchainData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.SELL);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n', '                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n', '            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        } else {\n', '            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        }\n', '\n', '        return (wrapper, swapedTokens);\n', '    }\n', '\n', '\n', '    /// @notice Takes order from 0x and returns bool indicating if it is successful\n', '    /// @param _exData Exchange data\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) private returns (bool success, uint256) {\n', '        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        // send src amount\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n', '\n', '        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\n', '    }\n', '\n', '    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n', '    /// @param _exData Exchange data struct\n', '    /// @param _type Type of action SELL|BUY\n', '    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n', '    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\n', '        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\n', '\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n', '\n', '        if (_type == ActionType.SELL) {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\n', '        } else {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\n', '        }\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external virtual payable {}\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Implements Boost and Repay for MCD CDPs\n', 'contract MCDSaverProxy is DFSExchangeCore, MCDSaverProxyHelper {\n', '\n', '    uint public constant MANUAL_SERVICE_FEE = 400; // 0.25% Fee\n', '    uint public constant AUTOMATIC_SERVICE_FEE = 333; // 0.3% Fee\n', '\n', '    bytes32 public constant ETH_ILK = 0x4554482d41000000000000000000000000000000000000000000000000000000;\n', '\n', '    address public constant VAT_ADDRESS = 0x35D1b3F3D7966A1DFe207aa4514C12a259A0492B;\n', '    address public constant SPOTTER_ADDRESS = 0x65C79fcB50Ca1594B025960e539eD7A9a6D434A3;\n', '    address public constant DAI_JOIN_ADDRESS = 0x9759A6Ac90977b93B58547b4A71c78317f391A28;\n', '    address public constant JUG_ADDRESS = 0x19c0976f590D67707E62397C87829d896Dc0f1F1;\n', '    address public constant DAI_ADDRESS = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '\n', '    address public constant BOT_REGISTRY_ADDRESS = 0x637726f8b08a7ABE3aE3aCaB01A80E2d8ddeF77B;\n', '\n', '    Vat public constant vat = Vat(VAT_ADDRESS);\n', '    DaiJoin public constant daiJoin = DaiJoin(DAI_JOIN_ADDRESS);\n', '    Spotter public constant spotter = Spotter(SPOTTER_ADDRESS);\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    /// @notice Repay - draws collateral, converts to Dai and repays the debt\n', '    /// @dev Must be called by the DSProxy contract that owns the CDP\n', '    function repay(\n', '        ExchangeData memory _exchangeData,\n', '        uint _cdpId,\n', '        uint _gasCost,\n', '        address _joinAddr,\n', '        ManagerType _managerType\n', '    ) public payable {\n', '\n', '        address managerAddr = getManagerAddr(_managerType);\n', '\n', '        address user = getOwner(Manager(managerAddr), _cdpId);\n', '        bytes32 ilk = Manager(managerAddr).ilks(_cdpId);\n', '\n', '        drawCollateral(managerAddr, _cdpId, _joinAddr, _exchangeData.srcAmount);\n', '\n', '        _exchangeData.user = user;\n', '        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n', '        (, uint daiAmount) = _sell(_exchangeData);\n', '\n', '        daiAmount -= takeFee(_gasCost, daiAmount);\n', '\n', '        paybackDebt(managerAddr, _cdpId, ilk, daiAmount, user);\n', '\n', '        // if there is some eth left (0x fee), return it to user\n', '        if (address(this).balance > 0) {\n', '            tx.origin.transfer(address(this).balance);\n', '        }\n', '\n', '        logger.Log(address(this), msg.sender, "MCDRepay", abi.encode(_cdpId, user, _exchangeData.srcAmount, daiAmount));\n', '\n', '    }\n', '\n', '    /// @notice Boost - draws Dai, converts to collateral and adds to CDP\n', '    /// @dev Must be called by the DSProxy contract that owns the CDP\n', '    function boost(\n', '        ExchangeData memory _exchangeData,\n', '        uint _cdpId,\n', '        uint _gasCost,\n', '        address _joinAddr,\n', '        ManagerType _managerType\n', '    ) public payable {\n', '\n', '        address managerAddr = getManagerAddr(_managerType);\n', '\n', '        address user = getOwner(Manager(managerAddr), _cdpId);\n', '        bytes32 ilk = Manager(managerAddr).ilks(_cdpId);\n', '\n', '        uint daiDrawn = drawDai(managerAddr, _cdpId, ilk, _exchangeData.srcAmount);\n', '\n', '        _exchangeData.user = user;\n', '        _exchangeData.dfsFeeDivider = isAutomation() ? AUTOMATIC_SERVICE_FEE : MANUAL_SERVICE_FEE;\n', '        _exchangeData.srcAmount = daiDrawn - takeFee(_gasCost, daiDrawn);\n', '        (, uint swapedColl) = _sell(_exchangeData);\n', '\n', '        addCollateral(managerAddr, _cdpId, _joinAddr, swapedColl);\n', '\n', '        // if there is some eth left (0x fee), return it to user\n', '        if (address(this).balance > 0) {\n', '            tx.origin.transfer(address(this).balance);\n', '        }\n', '\n', '        logger.Log(address(this), msg.sender, "MCDBoost", abi.encode(_cdpId, user, _exchangeData.srcAmount, swapedColl));\n', '    }\n', '\n', '    /// @notice Draws Dai from the CDP\n', "    /// @dev If _daiAmount is bigger than max available we'll draw max\n", '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    /// @param _daiAmount Amount of Dai to draw\n', '    function drawDai(address _managerAddr, uint _cdpId, bytes32 _ilk, uint _daiAmount) internal returns (uint) {\n', '        uint rate = Jug(JUG_ADDRESS).drip(_ilk);\n', '        uint daiVatBalance = vat.dai(Manager(_managerAddr).urns(_cdpId));\n', '\n', '        uint maxAmount = getMaxDebt(_managerAddr, _cdpId, _ilk);\n', '\n', '        if (_daiAmount >= maxAmount) {\n', '            _daiAmount = sub(maxAmount, 1);\n', '        }\n', '\n', '        Manager(_managerAddr).frob(_cdpId, int(0), normalizeDrawAmount(_daiAmount, rate, daiVatBalance));\n', '        Manager(_managerAddr).move(_cdpId, address(this), toRad(_daiAmount));\n', '\n', '        if (vat.can(address(this), address(DAI_JOIN_ADDRESS)) == 0) {\n', '            vat.hope(DAI_JOIN_ADDRESS);\n', '        }\n', '\n', '        DaiJoin(DAI_JOIN_ADDRESS).exit(address(this), _daiAmount);\n', '\n', '        return _daiAmount;\n', '    }\n', '\n', '    /// @notice Adds collateral to the CDP\n', '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _joinAddr Address of the join contract for the CDP collateral\n', '    /// @param _amount Amount of collateral to add\n', '    function addCollateral(address _managerAddr, uint _cdpId, address _joinAddr, uint _amount) internal {\n', '        int convertAmount = 0;\n', '\n', '        if (isEthJoinAddr(_joinAddr)) {\n', '            Join(_joinAddr).gem().deposit{value: _amount}();\n', '            convertAmount = toPositiveInt(_amount);\n', '        } else {\n', '            convertAmount = toPositiveInt(convertTo18(_joinAddr, _amount));\n', '        }\n', '\n', '        ERC20(address(Join(_joinAddr).gem())).safeApprove(_joinAddr, _amount);\n', '\n', '        Join(_joinAddr).join(address(this), _amount);\n', '\n', '        vat.frob(\n', '            Manager(_managerAddr).ilks(_cdpId),\n', '            Manager(_managerAddr).urns(_cdpId),\n', '            address(this),\n', '            address(this),\n', '            convertAmount,\n', '            0\n', '        );\n', '\n', '    }\n', '\n', '    /// @notice Draws collateral and returns it to DSProxy\n', '    /// @param _managerAddr Address of the CDP Manager\n', "    /// @dev If _amount is bigger than max available we'll draw max\n", '    /// @param _cdpId Id of the CDP\n', '    /// @param _joinAddr Address of the join contract for the CDP collateral\n', '    /// @param _amount Amount of collateral to draw\n', '    function drawCollateral(address _managerAddr, uint _cdpId, address _joinAddr, uint _amount) internal returns (uint) {\n', '        uint frobAmount = _amount;\n', '\n', '        if (Join(_joinAddr).dec() != 18) {\n', '            frobAmount = _amount * (10 ** (18 - Join(_joinAddr).dec()));\n', '        }\n', '\n', '        Manager(_managerAddr).frob(_cdpId, -toPositiveInt(frobAmount), 0);\n', '        Manager(_managerAddr).flux(_cdpId, address(this), frobAmount);\n', '\n', '        Join(_joinAddr).exit(address(this), _amount);\n', '\n', '        if (isEthJoinAddr(_joinAddr)) {\n', '            Join(_joinAddr).gem().withdraw(_amount); // Weth -> Eth\n', '        }\n', '\n', '        return _amount;\n', '    }\n', '\n', '    /// @notice Paybacks Dai debt\n', '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @dev If the _daiAmount is bigger than the whole debt, returns extra Dai\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    /// @param _daiAmount Amount of Dai to payback\n', '    /// @param _owner Address that owns the DSProxy that owns the CDP\n', '    function paybackDebt(address _managerAddr, uint _cdpId, bytes32 _ilk, uint _daiAmount, address _owner) internal {\n', '        address urn = Manager(_managerAddr).urns(_cdpId);\n', '\n', '        uint wholeDebt = getAllDebt(VAT_ADDRESS, urn, urn, _ilk);\n', '\n', '        if (_daiAmount > wholeDebt) {\n', '            ERC20(DAI_ADDRESS).transfer(_owner, sub(_daiAmount, wholeDebt));\n', '            _daiAmount = wholeDebt;\n', '        }\n', '\n', '        if (ERC20(DAI_ADDRESS).allowance(address(this), DAI_JOIN_ADDRESS) == 0) {\n', '            ERC20(DAI_ADDRESS).approve(DAI_JOIN_ADDRESS, uint(-1));\n', '        }\n', '\n', '        daiJoin.join(urn, _daiAmount);\n', '\n', '        Manager(_managerAddr).frob(_cdpId, 0, normalizePaybackAmount(VAT_ADDRESS, urn, _ilk));\n', '    }\n', '\n', '    /// @notice Gets the maximum amount of collateral available to draw\n', '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    /// @param _joinAddr Joind address of collateral\n', '    /// @dev Substracts 10 wei to aviod rounding error later on\n', '    function getMaxCollateral(address _managerAddr, uint _cdpId, bytes32 _ilk, address _joinAddr) public view returns (uint) {\n', '        uint price = getPrice(_ilk);\n', '\n', '        (uint collateral, uint debt) = getCdpInfo(Manager(_managerAddr), _cdpId, _ilk);\n', '\n', '        (, uint mat) = Spotter(SPOTTER_ADDRESS).ilks(_ilk);\n', '\n', '        uint maxCollateral = sub(collateral, (div(mul(mat, debt), price)));\n', '\n', '        uint normalizeMaxCollateral = maxCollateral / (10 ** (18 - Join(_joinAddr).dec()));\n', '\n', '        // take one percent due to precision issues\n', '        return normalizeMaxCollateral * 99 / 100;\n', '    }\n', '\n', '    /// @notice Gets the maximum amount of debt available to generate\n', '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    /// @dev Substracts 10 wei to aviod rounding error later on\n', '    function getMaxDebt(address _managerAddr, uint _cdpId, bytes32 _ilk) public virtual view returns (uint) {\n', '        uint price = getPrice(_ilk);\n', '\n', '        (, uint mat) = spotter.ilks(_ilk);\n', '        (uint collateral, uint debt) = getCdpInfo(Manager(_managerAddr), _cdpId, _ilk);\n', '\n', '        return sub(sub(div(mul(collateral, price), mat), debt), 10);\n', '    }\n', '\n', '    /// @notice Gets a price of the asset\n', '    /// @param _ilk Ilk of the CDP\n', '    function getPrice(bytes32 _ilk) public view returns (uint) {\n', '        (, uint mat) = spotter.ilks(_ilk);\n', '        (,,uint spot,,) = vat.ilks(_ilk);\n', '\n', '        return rmul(rmul(spot, spotter.par()), mat);\n', '    }\n', '\n', '    function isAutomation() internal view returns(bool) {\n', '        return BotRegistry(BOT_REGISTRY_ADDRESS).botList(tx.origin);\n', '    }\n', '\n', '    function takeFee(uint256 _gasCost, uint _amount) internal returns(uint) {\n', '        if (_gasCost > 0) {\n', '            uint ethDaiPrice = getPrice(ETH_ILK);\n', '            uint feeAmount = rmul(_gasCost, ethDaiPrice);\n', '\n', '            if (feeAmount > _amount / 10) {\n', '                feeAmount = _amount / 10;\n', '            }\n', '\n', '            address walletAddr = _feeRecipient.getFeeAddr();\n', '\n', '            ERC20(DAI_ADDRESS).transfer(walletAddr, feeAmount);\n', '\n', '            return feeAmount;\n', '        }\n', '\n', '        return 0;\n', '    }\n', '}  abstract contract GasTokenInterface is ERC20 {\n', '    function free(uint256 value) public virtual returns (bool success);\n', '\n', '    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n', '\n', '    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n', '\n', '    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n', '}  contract GasBurner {\n', '    // solhint-disable-next-line const-name-snakecase\n', '    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n', '\n', '    modifier burnGas(uint _amount) {\n', '        if (gasToken.balanceOf(address(this)) >= _amount) {\n', '            gasToken.free(_amount);\n', '        }\n', '\n', '        _;\n', '    }\n', '}  abstract contract ILendingPool {\n', '    function flashLoan( address payable _receiver, address _reserve, uint _amount, bytes calldata _params) external virtual;\n', '    function deposit(address _reserve, uint256 _amount, uint16 _referralCode) external virtual payable;\n', '\tfunction setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external virtual;\n', '\tfunction borrow(address _reserve, uint256 _amount, uint256 _interestRateMode, uint16 _referralCode) external virtual;\n', '\tfunction repay( address _reserve, uint256 _amount, address payable _onBehalfOf) external virtual payable;\n', '\tfunction swapBorrowRateMode(address _reserve) external virtual;\n', '    function getReserves() external virtual view returns(address[] memory);\n', '\n', '    /// @param _reserve underlying token address\n', '    function getReserveData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidity,               // reserve total liquidity\n', '            uint256 availableLiquidity,           // reserve available liquidity for borrowing\n', '            uint256 totalBorrowsStable,           // total amount of outstanding borrows at Stable rate\n', '            uint256 totalBorrowsVariable,         // total amount of outstanding borrows at Variable rate\n', '            uint256 liquidityRate,                // current deposit APY of the reserve for depositors, in Ray units.\n', '            uint256 variableBorrowRate,           // current variable rate APY of the reserve pool, in Ray units.\n', '            uint256 stableBorrowRate,             // current stable rate APY of the reserve pool, in Ray units.\n', '            uint256 averageStableBorrowRate,      // current average stable borrow rate\n', '            uint256 utilizationRate,              // expressed as total borrows/total liquidity.\n', '            uint256 liquidityIndex,               // cumulative liquidity index\n', '            uint256 variableBorrowIndex,          // cumulative variable borrow index\n', '            address aTokenAddress,                // aTokens contract address for the specific _reserve\n', '            uint40 lastUpdateTimestamp            // timestamp of the last update of reserve data\n', '        );\n', '\n', '    /// @param _user users address\n', '    function getUserAccountData(address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityETH,            // user aggregated deposits across all the reserves. In Wei\n', '            uint256 totalCollateralETH,           // user aggregated collateral across all the reserves. In Wei\n', '            uint256 totalBorrowsETH,              // user aggregated outstanding borrows across all the reserves. In Wei\n', '            uint256 totalFeesETH,                 // user aggregated current outstanding fees in ETH. In Wei\n', '            uint256 availableBorrowsETH,          // user available amount to borrow in ETH\n', '            uint256 currentLiquidationThreshold,  // user current average liquidation threshold across all the collaterals deposited\n', '            uint256 ltv,                          // user average Loan-to-Value between all the collaterals\n', '            uint256 healthFactor                  // user current Health Factor\n', '    );\n', '\n', '    /// @param _reserve underlying token address\n', '    /// @param _user users address\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,         // user current reserve aToken balance\n', '            uint256 currentBorrowBalance,         // user current reserve outstanding borrow balance\n', '            uint256 principalBorrowBalance,       // user balance of borrowed asset\n', '            uint256 borrowRateMode,               // user borrow rate mode either Stable or Variable\n', '            uint256 borrowRate,                   // user current borrow rate APY\n', '            uint256 liquidityRate,                // user current earn rate on _reserve\n', '            uint256 originationFee,               // user outstanding loan origination fee\n', '            uint256 variableBorrowIndex,          // user variable cumulative index\n', '            uint256 lastUpdateTimestamp,          // Timestamp of the last data update\n', "            bool usageAsCollateralEnabled         // Whether the user's current reserve is enabled as a collateral\n", '    );\n', '\n', '    function getReserveConfigurationData(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            address rateStrategyAddress,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive\n', '    );\n', '\n', '    // ------------------ LendingPoolCoreData ------------------------\n', '    function getReserveATokenAddress(address _reserve) public virtual view returns (address);\n', '    function getReserveConfiguration(address _reserve)\n', '        external virtual\n', '        view\n', '        returns (uint256, uint256, uint256, bool);\n', '    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    function getReserveCurrentLiquidityRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentVariableBorrowRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveCurrentStableBorrowRate(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveAvailableLiquidity(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalBorrowsVariable(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '    function getReserveTotalBorrowsStable(address _reserve)\n', '        public virtual\n', '        view\n', '        returns (uint256);\n', '\n', '    // ---------------- LendingPoolDataProvider ---------------------\n', '    function calculateUserGlobalData(address _user)\n', '        public virtual\n', '        view\n', '        returns (\n', '            uint256 totalLiquidityBalanceETH,\n', '            uint256 totalCollateralBalanceETH,\n', '            uint256 totalBorrowBalanceETH,\n', '            uint256 totalFeesETH,\n', '            uint256 currentLtv,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 healthFactor,\n', '            bool healthFactorBelowThreshold\n', '        );\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract MCDSaverTaker is MCDSaverProxy, GasBurner {\n', '\n', '    address payable public constant MCD_SAVER_FLASH_LOAN = 0x9222c4f253bD0bdb387Fc97D44e5A6b90cDF4389;\n', '    address public constant AAVE_POOL_CORE = 0x3dfd23A6c5E8BbcFc9581d2E864a68feb6a076d3;\n', '\n', '    ILendingPool public constant lendingPool = ILendingPool(0x398eC7346DcD622eDc5ae82352F02bE94C62d119);\n', '\n', '    function boostWithLoan(\n', '        ExchangeData memory _exchangeData,\n', '        uint _cdpId,\n', '        uint _gasCost,\n', '        address _joinAddr,\n', '        ManagerType _managerType\n', '    ) public payable burnGas(25) {\n', '        address managerAddr = getManagerAddr(_managerType);\n', '\n', '        uint256 maxDebt = getMaxDebt(managerAddr, _cdpId, Manager(managerAddr).ilks(_cdpId));\n', '\n', '        uint maxLiq = getAvailableLiquidity(DAI_JOIN_ADDRESS);\n', '\n', '        if (maxDebt >= _exchangeData.srcAmount || maxLiq == 0) {\n', '            if (_exchangeData.srcAmount > maxDebt) {\n', '                _exchangeData.srcAmount = maxDebt;\n', '            }\n', '\n', '            boost(_exchangeData, _cdpId, _gasCost, _joinAddr, _managerType);\n', '            return;\n', '        }\n', '\n', '        uint256 loanAmount = sub(_exchangeData.srcAmount, maxDebt);\n', '        loanAmount = loanAmount > maxLiq ? maxLiq : loanAmount;\n', '\n', '        MCD_SAVER_FLASH_LOAN.transfer(msg.value); // 0x fee\n', '\n', '        Manager(managerAddr).cdpAllow(_cdpId, MCD_SAVER_FLASH_LOAN, 1);\n', '\n', '        bytes memory paramsData = abi.encode(packExchangeData(_exchangeData), _cdpId, _gasCost, _joinAddr, false, uint8(_managerType));\n', '\n', '        lendingPool.flashLoan(MCD_SAVER_FLASH_LOAN, DAI_ADDRESS, loanAmount, paramsData);\n', '\n', '        Manager(managerAddr).cdpAllow(_cdpId, MCD_SAVER_FLASH_LOAN, 0);\n', '    }\n', '\n', '    function repayWithLoan(\n', '        ExchangeData memory _exchangeData,\n', '        uint _cdpId,\n', '        uint _gasCost,\n', '        address _joinAddr,\n', '        ManagerType _managerType\n', '    ) public payable burnGas(25) {\n', '        address managerAddr = getManagerAddr(_managerType);\n', '\n', '        uint256 maxColl = getMaxCollateral(managerAddr, _cdpId, Manager(managerAddr).ilks(_cdpId), _joinAddr);\n', '\n', '        uint maxLiq = getAvailableLiquidity(_joinAddr);\n', '\n', '        if (maxColl >= _exchangeData.srcAmount || maxLiq == 0) {\n', '            if (_exchangeData.srcAmount > maxColl) {\n', '                _exchangeData.srcAmount = maxColl;\n', '            }\n', '\n', '            repay(_exchangeData, _cdpId, _gasCost, _joinAddr, _managerType);\n', '            return;\n', '        }\n', '\n', '        uint256 loanAmount = sub(_exchangeData.srcAmount, maxColl);\n', '        loanAmount = loanAmount > maxLiq ? maxLiq : loanAmount;\n', '\n', '        MCD_SAVER_FLASH_LOAN.transfer(msg.value); // 0x fee\n', '\n', '        Manager(managerAddr).cdpAllow(_cdpId, MCD_SAVER_FLASH_LOAN, 1);\n', '\n', '        bytes memory paramsData = abi.encode(packExchangeData(_exchangeData), _cdpId, _gasCost, _joinAddr, true, uint8(_managerType));\n', '\n', '        lendingPool.flashLoan(MCD_SAVER_FLASH_LOAN, getAaveCollAddr(_joinAddr), loanAmount, paramsData);\n', '\n', '        Manager(managerAddr).cdpAllow(_cdpId, MCD_SAVER_FLASH_LOAN, 0);\n', '    }\n', '\n', '\n', '    /// @notice Gets the maximum amount of debt available to generate\n', '    /// @param _managerAddr Address of the CDP Manager\n', '    /// @param _cdpId Id of the CDP\n', '    /// @param _ilk Ilk of the CDP\n', '    function getMaxDebt(address _managerAddr, uint256 _cdpId, bytes32 _ilk) public override view returns (uint256) {\n', '        uint256 price = getPrice(_ilk);\n', '\n', '        (, uint256 mat) = spotter.ilks(_ilk);\n', '        (uint256 collateral, uint256 debt) = getCdpInfo(Manager(_managerAddr), _cdpId, _ilk);\n', '\n', '        return sub(wdiv(wmul(collateral, price), mat), debt);\n', '    }\n', '\n', '    function getAaveCollAddr(address _joinAddr) internal view returns (address) {\n', '        if (isEthJoinAddr(_joinAddr)\n', '            || _joinAddr == 0x775787933e92b709f2a3C70aa87999696e74A9F8) {\n', '            return KYBER_ETH_ADDRESS;\n', '        } else if (_joinAddr == DAI_JOIN_ADDRESS) {\n', '            return DAI_ADDRESS;\n', '        } else\n', '         {\n', '            return getCollateralAddr(_joinAddr);\n', '        }\n', '    }\n', '\n', '    function getAvailableLiquidity(address _joinAddr) internal view returns (uint liquidity) {\n', '        address tokenAddr = getAaveCollAddr(_joinAddr);\n', '\n', '        if (tokenAddr == KYBER_ETH_ADDRESS) {\n', '            liquidity = AAVE_POOL_CORE.balance;\n', '        } else {\n', '            liquidity = ERC20(tokenAddr).balanceOf(AAVE_POOL_CORE);\n', '        }\n', '    }\n', '\n', '}']