['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-07\n', '*/\n', '\n', '// File: localhost/contracts/interfaces/ICollateralRegistry.sol\n', '\n', '// SPDX-License-Identifier: bsl-1.1\n', '\n', 'interface ICollateralRegistry {\n', '    function addCollateral ( address asset ) external;\n', '    function collateralId ( address ) external view returns ( uint256 );\n', '    function collaterals (  ) external view returns ( address[] memory );\n', '    function removeCollateral ( address asset ) external;\n', '    function vaultParameters (  ) external view returns ( address );\n', '    function isCollateral ( address asset ) external view returns ( bool );\n', '    function collateralList ( uint id ) external view returns ( address );\n', '    function collateralsCount (  ) external view returns ( uint );\n', '}\n', '\n', '// File: localhost/contracts/interfaces/IVault.sol\n', '\n', 'interface IVault {\n', '    function DENOMINATOR_1E2 (  ) external view returns ( uint256 );\n', '    function DENOMINATOR_1E5 (  ) external view returns ( uint256 );\n', '    function borrow ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function calculateFee ( address asset, address user, uint256 amount ) external view returns ( uint256 );\n', '    function changeOracleType ( address asset, address user, uint256 newOracleType ) external;\n', '    function chargeFee ( address asset, address user, uint256 amount ) external;\n', '    function col (  ) external view returns ( address );\n', '    function colToken ( address, address ) external view returns ( uint256 );\n', '    function collaterals ( address, address ) external view returns ( uint256 );\n', '    function debts ( address, address ) external view returns ( uint256 );\n', '    function depositCol ( address asset, address user, uint256 amount ) external;\n', '    function depositEth ( address user ) external payable;\n', '    function depositMain ( address asset, address user, uint256 amount ) external;\n', '    function destroy ( address asset, address user ) external;\n', '    function getTotalDebt ( address asset, address user ) external view returns ( uint256 );\n', '    function lastUpdate ( address, address ) external view returns ( uint256 );\n', '    function liquidate ( address asset, address positionOwner, uint256 mainAssetToLiquidator, uint256 colToLiquidator, uint256 mainAssetToPositionOwner, uint256 colToPositionOwner, uint256 repayment, uint256 penalty, address liquidator ) external;\n', '    function liquidationBlock ( address, address ) external view returns ( uint256 );\n', '    function liquidationFee ( address, address ) external view returns ( uint256 );\n', '    function liquidationPrice ( address, address ) external view returns ( uint256 );\n', '    function oracleType ( address, address ) external view returns ( uint256 );\n', '    function repay ( address asset, address user, uint256 amount ) external returns ( uint256 );\n', '    function spawn ( address asset, address user, uint256 _oracleType ) external;\n', '    function stabilityFee ( address, address ) external view returns ( uint256 );\n', '    function tokenDebts ( address ) external view returns ( uint256 );\n', '    function triggerLiquidation ( address asset, address positionOwner, uint256 initialPrice ) external;\n', '    function update ( address asset, address user ) external;\n', '    function usdp (  ) external view returns ( address );\n', '    function vaultParameters (  ) external view returns ( address );\n', '    function weth (  ) external view returns ( address payable );\n', '    function withdrawCol ( address asset, address user, uint256 amount ) external;\n', '    function withdrawEth ( address user, uint256 amount ) external;\n', '    function withdrawMain ( address asset, address user, uint256 amount ) external;\n', '}\n', '\n', '// File: localhost/contracts/CDPRegistry.sol\n', '\n', '/*\n', '  Copyright 2020 Unit Protocol: Artem Zakharov ([email\xa0protected]).\n', '*/\n', 'pragma solidity ^0.7.1;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', 'contract CDPRegistry {\n', '\n', '    struct CDP {\n', '        address asset;\n', '        address owner;\n', '    }\n', '\n', '    mapping (address => address[]) cdpList;\n', '    mapping (address => mapping (address => uint)) cdpIndex;\n', '\n', '    IVault public immutable vault;\n', '    ICollateralRegistry public immutable cr;\n', '\n', '    event Added(address indexed asset, address indexed owner);\n', '    event Removed(address indexed asset, address indexed owner);\n', '\n', '    constructor (address _vault, address _collateralRegistry) {\n', '        require(_vault != address(0) && _collateralRegistry != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '        vault = IVault(_vault);\n', '        cr = ICollateralRegistry(_collateralRegistry);\n', '    }\n', '\n', '    function checkpoint(address asset, address owner) public {\n', '        require(asset != address(0) && owner != address(0), "Unit Protocol: ZERO_ADDRESS");\n', '\n', '        bool listed = isListed(asset, owner);\n', '        bool alive = isAlive(asset, owner);\n', '\n', '        if (alive && !listed) {\n', '            _addCdp(asset, owner);\n', '        } else if (listed && !alive) {\n', '            _removeCdp(asset, owner);\n', '        }\n', '    }\n', '\n', '    function batchCheckpointForAsset(address asset, address[] calldata owners) external {\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            checkpoint(asset, owners[i]);\n', '        }\n', '    }\n', '\n', '    function batchCheckpoint(address[] calldata assets, address[] calldata owners) external {\n', '        require(assets.length == owners.length, "Unit Protocol: ARGUMENTS_LENGTH_MISMATCH");\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            checkpoint(assets[i], owners[i]);\n', '        }\n', '    }\n', '\n', '    function isAlive(address asset, address owner) public view returns (bool) {\n', '        return vault.debts(asset, owner) != 0;\n', '    }\n', '\n', '    function isListed(address asset, address owner) public view returns (bool) {\n', '        if (cdpList[asset].length == 0) { return false; }\n', '        return cdpIndex[asset][owner] != 0 || cdpList[asset][0] == owner;\n', '    }\n', '\n', '    function _removeCdp(address asset, address owner) internal {\n', '        uint id = cdpIndex[asset][owner];\n', '\n', '        delete cdpIndex[asset][owner];\n', '\n', '        uint lastId = cdpList[asset].length - 1;\n', '\n', '        if (id != lastId) {\n', '            address lastOwner = cdpList[asset][lastId];\n', '            cdpList[asset][id] = lastOwner;\n', '            cdpIndex[asset][lastOwner] = id;\n', '        }\n', '\n', '        cdpList[asset].pop();\n', '\n', '        emit Removed(asset, owner);\n', '    }\n', '\n', '    function _addCdp(address asset, address owner) internal {\n', '        cdpIndex[asset][owner] = cdpList[asset].length;\n', '        cdpList[asset].push(owner);\n', '\n', '        emit Added(asset, owner);\n', '    }\n', '\n', '    function getCdpsByCollateral(address asset) external view returns (CDP[] memory cdps) {\n', '        address[] memory owners = cdpList[asset];\n', '        cdps = new CDP[](owners.length);\n', '        for (uint i = 0; i < owners.length; i++) {\n', '            cdps[i] = CDP(asset, owners[i]);\n', '        }\n', '    }\n', '\n', '    function getCdpsByOwner(address owner) external view returns (CDP[] memory r) {\n', '        address[] memory assets = cr.collaterals();\n', '        CDP[] memory cdps = new CDP[](assets.length);\n', '        uint actualCdpsCount;\n', '\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            if (isListed(assets[i], owner)) {\n', '                cdps[actualCdpsCount++] = CDP(assets[i], owner);\n', '            }\n', '        }\n', '\n', '        r = new CDP[](actualCdpsCount);\n', '\n', '        for (uint i = 0; i < actualCdpsCount; i++) {\n', '            r[i] = cdps[i];\n', '        }\n', '\n', '    }\n', '\n', '    function getAllCdps() external view returns (CDP[] memory r) {\n', '        uint totalCdpCount = getCdpsCount();\n', '        \n', '        uint cdpCount;\n', '\n', '        r = new CDP[](totalCdpCount);\n', '\n', '        address[] memory assets = cr.collaterals();\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            address[] memory owners = cdpList[assets[i]];\n', '            for (uint j = 0; j < owners.length; j++) {\n', '                r[cdpCount++] = CDP(assets[i], owners[j]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function getCdpsCount() public view returns (uint totalCdpCount) {\n', '        address[] memory assets = cr.collaterals();\n', '        for (uint i = 0; i < assets.length; i++) {\n', '            totalCdpCount += cdpList[assets[i]].length;\n', '        }\n', '    }\n', '\n', '    function getCdpsCountForCollateral(address asset) public view returns (uint) {\n', '        return cdpList[asset].length;\n', '    }\n', '}']