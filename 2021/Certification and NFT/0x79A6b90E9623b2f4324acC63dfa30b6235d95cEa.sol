['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-04\n', '*/\n', '\n', '// File: contracts/interfaces/ISaffronBase.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronBase {\n', '  enum Tranche {S, AA, A}\n', '  enum LPTokenType {dsec, principal}\n', '\n', '  // Store values (balances, dsec, vdsec) with TrancheUint256\n', '  struct TrancheUint256 {\n', '    uint256 S;\n', '    uint256 AA;\n', '    uint256 A;\n', '  }\n', '\n', '  struct epoch_params {\n', '    uint256 start_date;       // Time when the platform launched\n', '    uint256 duration;         // Duration of epoch\n', '  }\n', '}\n', '\n', '// File: contracts/interfaces/ISaffronAdapter.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronAdapter is ISaffronBase {\n', '    function deploy_capital(uint256 amount) external;\n', '    function return_capital(uint256 base_asset_amount, address to) external;\n', '    function approve_transfer(address addr,uint256 amount) external;\n', '    function get_base_asset_address() external view returns(address);\n', '    function set_base_asset(address addr) external;\n', '    function get_holdings() external returns(uint256);\n', '    function get_interest(uint256 principal) external returns(uint256);\n', '    function set_governance(address to) external;\n', '}\n', '\n', '// File: contracts/adapters/ICErc20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '// https://compound.finance/docs/ctokens\n', 'interface ICErc20 {\n', '    function mint(uint256) external returns (uint256);\n', '    function exchangeRateCurrent() external returns (uint256);\n', '    function supplyRatePerBlock() external returns (uint256);\n', '    function redeem(uint) external returns (uint);\n', '    function redeemUnderlying(uint) external returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '}\n', '\n', '// File: contracts/interfaces/ISaffronPool.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', 'interface ISaffronPool is ISaffronBase {\n', '  function add_liquidity(uint256 amount, Tranche tranche) external;\n', '  function remove_liquidity(address v1_dsec_token_address, uint256 dsec_amount, address v1_principal_token_address, uint256 principal_amount) external;\n', '  function get_base_asset_address() external view returns(address);\n', '  function hourly_strategy(address adapter_address) external;\n', '  function wind_down_epoch(uint256 epoch, uint256 amount_sfi) external;\n', '  function set_governance(address to) external;\n', '  function get_epoch_cycle_params() external view returns (uint256, uint256);\n', '  function shutdown() external;\n', '}\n', '\n', '// File: contracts/lib/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/Address.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/SafeERC20.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '  using SafeMath for uint256;\n', '  using Address for address;\n', '\n', '  function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '  }\n', '\n', '  function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '  }\n', '\n', '  /**\n', '   * @dev Deprecated. This function has issues similar to the ones found in\n', '   * {IERC20-approve}, and its usage is discouraged.\n', '   *\n', '   * Whenever possible, use {safeIncreaseAllowance} and\n', '   * {safeDecreaseAllowance} instead.\n', '   */\n', '  function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '    // safeApprove should only be called when setting an initial allowance,\n', '    // or when resetting it to zero. To increase and decrease it, use\n', "    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '    // solhint-disable-next-line max-line-length\n', '    require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '      "SafeERC20: approve from non-zero to non-zero allowance"\n', '    );\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '  }\n', '\n', '  function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '    uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '    _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '  }\n', '\n', '  /**\n', '   * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '   * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '   * @param token The token targeted by the call.\n', '   * @param data The call data (encoded using abi.encode or one of its variants).\n', '   */\n', '  function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "    // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "    // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '    // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '    bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '    if (returndata.length > 0) { // Return data is optional\n', '      // solhint-disable-next-line max-line-length\n', '      require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '    }\n', '  }\n', '}\n', '\n', '// File: contracts/adapters/USDTCompoundAdapter.sol\n', '\n', '\n', 'pragma solidity ^0.7.1;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract USDT_Compound_Adapter is ISaffronAdapter {\n', '  using SafeERC20 for IERC20;\n', '  using SafeMath for uint256;\n', '\n', '  address public governance;                    // Governance address\n', '  ISaffronPool public saffron_pool;             // SaffronPool that owns this adapter\n', '  IERC20 public USDT;                           // Base asset (USDT)\n', '  ICErc20 public cUSDT;                         // cUSDT redeemable for USDT\n', '  string public constant platform = "Compound"; // Platform name\n', '  string public constant name = "USDT/Compound"; // Adapter name\n', '\n', '  uint256 public created;\n', '\n', '  constructor(address _saffron_pool, address CErc20_contract_address, address base_asset_address) {\n', '    saffron_pool = ISaffronPool(_saffron_pool);\n', '    governance   = msg.sender; // saffron_pool.get_governance();\n', '    cUSDT        = ICErc20(CErc20_contract_address);\n', '    USDT         = IERC20(base_asset_address);\n', '    created      = block.timestamp;\n', '  }\n', '\n', "  // Called from pool's hourly strategy\n", '  function deploy_capital(uint256 amount) external override {\n', '    require(msg.sender == address(saffron_pool), "must be pool");\n', '    USDT.safeApprove(address(cUSDT), amount); // Approve the transfer\n', '    uint mint_result = cUSDT.mint(amount);   // Mint the cTokens and assert there is no error\n', '\n', '    // Check for success, RETURN: 0 on success, otherwise an Error code\n', '    assert(mint_result==0);\n', '  }\n', '\n', '  // Called from remove_liquidity\n', '  event ReturnCapital(uint256 cdai_balance, uint256 base_asset_amount);\n', '  function return_capital(uint256 base_asset_amount, address to) external override {\n', '    require(msg.sender == address(saffron_pool), "must be pool");\n', '    uint256 redeem_result = cUSDT.redeemUnderlying(base_asset_amount);\n', '    // Check for success: 0 on success, otherwise an error code\n', '    // v0: revert on bad redeem result because S tranche only\n', '    // v1: execute waterfall strategy to cover AA tranche LPs\n', '    assert(redeem_result == 0);\n', '    USDT.safeTransfer(to, base_asset_amount);\n', '    emit ReturnCapital(cUSDT.balanceOf(address(this)), base_asset_amount);\n', '  }\n', '\n', '  event Swept(address who, address to, uint256 cBal, uint256 dBal);\n', '  function sweep(address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '\n', '    IERC20 tkn = IERC20(address(cUSDT));\n', '    uint256 cBal = tkn.balanceOf(address(this));\n', '    tkn.transfer(_to, cBal);\n', '\n', '    uint256 dBal = USDT.balanceOf(address(this));\n', '    USDT.transfer(_to, dBal);\n', '\n', '    emit Swept(msg.sender, _to, cBal, dBal);\n', '  }\n', '\n', '  event ErcSwept(address who, address to, address token, uint256 amount);\n', '  function erc_sweep(address _token, address _to) public {\n', '    require(msg.sender == governance, "must be governance");\n', '    require(_token != address(USDT) && _token != address(cUSDT), "cannot sweep adapter assets");\n', '\n', '    IERC20 tkn = IERC20(_token);\n', '    uint256 tBal = tkn.balanceOf(address(this));\n', '    tkn.transfer(_to, tBal);\n', '\n', '    emit ErcSwept(msg.sender, _to, _token, tBal);\n', '  }\n', '\n', '  event GetExchangeRate(uint256, uint256);\n', '  function get_exchange_rate() public returns(uint256) {\n', '    uint256 rate = cUSDT.exchangeRateCurrent();\n', '    emit GetExchangeRate(rate, rate.div(10**18));\n', '    return rate;\n', '  }\n', '\n', '  // WARNING: holdings expressed in 18 decimals (cUSDT only has 8 decimals)\n', '  event GetHoldings(uint256 holdings);\n', '  function get_holdings() external override returns(uint256) {\n', '    uint256 holdings = cUSDT.balanceOf(address(this)).mul(cUSDT.exchangeRateCurrent()).div(10**18);\n', '    emit GetHoldings(holdings);\n', '    return holdings;\n', '  }\n', '\n', '  function _get_holdings() private returns(uint256) {\n', '    uint256 holdings = cUSDT.balanceOf(address(this)).mul(cUSDT.exchangeRateCurrent()).div(10**18);\n', '    emit GetHoldings(holdings);\n', '    return holdings;\n', '  }\n', '\n', '  event GetInterestEvaluatedToZero(bool zero_interest);\n', '  function get_interest(uint256 principal) external override returns(uint256) {\n', '    if (_get_holdings() < principal) {\n', '      emit GetInterestEvaluatedToZero(true);\n', "      return 0; // don't revert on negative interest\n", '    }\n', '    return _get_holdings().sub(principal);\n', '  }\n', '\n', '  function approve_transfer(address addr,uint256 amount) external override {\n', '    require(msg.sender == governance, "must be governance");\n', '    USDT.safeApprove(addr, amount);\n', '  }\n', '\n', '  function get_base_asset_address() external override view returns(address) {\n', '    return address(USDT);\n', '  }\n', '\n', '  function get_ctoken_balance() public view returns(uint256) {\n', '    return cUSDT.balanceOf(address(this));\n', '  }\n', '\n', '  function set_base_asset(address addr) external override {\n', '    require(msg.sender == governance, "must be governance");\n', '    USDT=IERC20(addr);\n', '  }\n', '\n', '  function set_governance(address to) external override {\n', '    require(msg.sender == governance, "must be governance");\n', '    governance = to;\n', '  }\n', '}']