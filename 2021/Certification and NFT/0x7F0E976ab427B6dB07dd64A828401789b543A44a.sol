['// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "./IFilter.sol";\n', '\n', 'abstract contract BaseFilter is IFilter {\n', '    function getMethod(bytes memory _data) internal pure returns (bytes4 method) {\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            method := mload(add(_data, 0x20))\n', '        }\n', '    }\n', '}\n', '\n', '// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'interface IFilter {\n', '    function isValid(address _wallet, address _spender, address _to, bytes calldata _data) external view returns (bool valid);\n', '}\n', '\n', '// Copyright (C) 2020  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', '/**\n', ' * @title ParaswapUtils\n', ' * @notice Common methods used by Paraswap filters\n', ' */\n', 'library ParaswapUtils {\n', '    address constant internal ETH_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    struct ZeroExV2Order {\n', '        address makerAddress;\n', '        address takerAddress;\n', '        address feeRecipientAddress;\n', '        address senderAddress;\n', '        uint256 makerAssetAmount;\n', '        uint256 takerAssetAmount;\n', '        uint256 makerFee;\n', '        uint256 takerFee;\n', '        uint256 expirationTimeSeconds;\n', '        uint256 salt;\n', '        bytes makerAssetData;\n', '        bytes takerAssetData;\n', '    }\n', '\n', '    struct ZeroExV2Data {\n', '        ZeroExV2Order[] orders;\n', '        bytes[] signatures;\n', '    }\n', '\n', '    struct ZeroExV4Order {\n', '        address makerToken;\n', '        address takerToken;\n', '        uint128 makerAmount;\n', '        uint128 takerAmount;\n', '        address maker;\n', '        address taker;\n', '        address txOrigin;\n', '        bytes32 pool;\n', '        uint64 expiry;\n', '        uint256 salt;\n', '    }\n', '\n', '    struct ZeroExV4Signature {\n', '        uint8 signatureType;\n', '        uint8 v;\n', '        bytes32 r;\n', '        bytes32 s;\n', '    }\n', '\n', '    struct ZeroExV4Data {\n', '        ZeroExV4Order order;\n', '        ZeroExV4Signature signature;\n', '    }\n', '\n', '    function hasValidUniV2Path(\n', '        address[] memory _path,\n', '        address _tokenRegistry,\n', '        address _factory,\n', '        bytes32 _initCode,\n', '        address _weth\n', '    )\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        address[] memory lpTokens = new address[](_path.length - 1);\n', '        for(uint i = 0; i < lpTokens.length; i++) {\n', '            lpTokens[i] = pairFor(_path[i], _path[i+1], _factory, _initCode, _weth);\n', '        }\n', '        return hasTradableTokens(_tokenRegistry, lpTokens);\n', '    }\n', '\n', '    function pairFor(address _tokenA, address _tokenB, address _factory, bytes32 _initCode, address _weth) internal pure returns (address) {\n', '        (address tokenA, address tokenB) = (_tokenA == ETH_TOKEN ? _weth : _tokenA, _tokenB == ETH_TOKEN ? _weth : _tokenB);\n', '        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n', '        return(address(uint160(uint(keccak256(abi.encodePacked(\n', '            hex"ff",\n', '            _factory,\n', '            keccak256(abi.encodePacked(token0, token1)),\n', '            _initCode\n', '        ))))));\n', '    }\n', '\n', '    function hasTradableTokens(address _tokenRegistry, address[] memory _tokens) internal view returns (bool) {\n', '        (bool success, bytes memory res) = _tokenRegistry.staticcall(abi.encodeWithSignature("areTokensTradable(address[])", _tokens));\n', '        return success && abi.decode(res, (bool));\n', '    }\n', '}\n', '\n', '// Copyright (C) 2021  Argent Labs Ltd. <https://argent.xyz>\n', '\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU General Public License for more details.\n', '\n', '// You should have received a copy of the GNU General Public License\n', '// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', 'pragma solidity ^0.8.3;\n', '\n', 'import "../BaseFilter.sol";\n', 'import "./ParaswapUtils.sol";\n', '\n', '/**\n', ' * @title WhitelistedZeroExV4Filter\n', ' * @notice Filter used for calls to the ZeroExV4 exchange at 0xdef1c0ded9bec7f1a1670819833240f027b25eff.\n', " * Only trades with whitelisted market makers are allowed. Currently deployed to work with Paraswap's market makers only.\n", ' * @author Olivier VDB - <[email\xa0protected]>\n', ' */\n', 'contract WhitelistedZeroExV4Filter is BaseFilter {\n', '\n', '    bytes4 private constant FILL = bytes4(keccak256(\n', '        "fillRfqOrder((address,address,uint128,uint128,address,address,address,bytes32,uint64,uint256),(uint8,uint8,bytes32,bytes32),uint128)"\n', '    ));\n', '    bytes4 private constant ERC20_APPROVE = bytes4(keccak256("approve(address,uint256)"));\n', '\n', '    // Supported ParaswapPool market makers\n', '    mapping(address => bool) public marketMakers;\n', '\n', '    constructor(address[] memory _marketMakers) {\n', '        for(uint i = 0; i < _marketMakers.length; i++) {\n', '            marketMakers[_marketMakers[i]] = true;\n', '        }\n', '    }\n', '\n', '    function isValid(address /*_wallet*/, address _spender, address _to, bytes calldata _data) external view override returns (bool valid) {\n', '        // disable ETH transfer\n', '        if (_data.length < 4) {\n', '            return false;\n', '        }\n', '\n', '        bytes4 methodId = getMethod(_data);\n', '\n', '        if(methodId == FILL) {\n', '            ParaswapUtils.ZeroExV4Order memory order = abi.decode(_data[4:], (ParaswapUtils.ZeroExV4Order));\n', '            return marketMakers[order.maker];\n', '        } \n', '        \n', '        return methodId == ERC20_APPROVE && _spender != _to;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {\n', '    "": {}\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']