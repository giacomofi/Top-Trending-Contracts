['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.7.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'enum PurchaseMethod {Invalid, Contract, ZeroEx}\n', '\n', '\n', '/**\n', ' * @title Types: Library of Swap Protocol Types and Hashes\n', ' */\n', 'library Types {\n', '    struct Order {\n', '        uint256 nonce; // Unique per order and should be sequential\n', '        uint256 expiry; // Expiry in seconds since 1 January 1970\n', '        Party signer; // Party to the trade that sets terms\n', '        Party sender; // Party to the trade that accepts terms\n', '        Party affiliate; // Party compensated for facilitating (optional)\n', '        Signature signature; // Signature of the order\n', '    }\n', '\n', '    struct Party {\n', '        bytes4 kind; // Interface ID of the token\n', '        address wallet; // Wallet address of the party\n', '        address token; // Contract address of the token\n', '        uint256 amount; // Amount for ERC-20 or ERC-1155\n', '        uint256 id; // ID for ERC-721 or ERC-1155\n', '    }\n', '\n', '    struct Signature {\n', '        address signatory; // Address of the wallet used to sign\n', '        address validator; // Address of the intended swap contract\n', '        bytes1 version; // EIP-191 signature version\n', '        uint8 v; // `v` value of an ECDSA signature\n', '        bytes32 r; // `r` value of an ECDSA signature\n', '        bytes32 s; // `s` value of an ECDSA signature\n', '    }\n', '}\n', '\n', '\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', '\n', '// \n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// \n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// \n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', 'contract DSMath {\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x + y) >= x, "ds-math-add-overflow");\n', '    }\n', '    function sub(uint x, uint y) internal pure returns (uint z) {\n', '        require((z = x - y) <= x, "ds-math-sub-underflow");\n', '    }\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        require(y == 0 || (z = x * y) / y == x, "ds-math-mul-overflow");\n', '    }\n', '\n', '    function min(uint x, uint y) internal pure returns (uint z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function max(uint x, uint y) internal pure returns (uint z) {\n', '        return x >= y ? x : y;\n', '    }\n', '    function imin(int x, int y) internal pure returns (int z) {\n', '        return x <= y ? x : y;\n', '    }\n', '    function imax(int x, int y) internal pure returns (int z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '    //rounds to zero if x*y < WAD / 2\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '    //rounds to zero if x*y < RAY / 2\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint x, uint n) internal pure returns (uint z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', 'struct OptionTerms {\n', '    address underlying;\n', '    address strikeAsset;\n', '    address collateralAsset;\n', '    uint256 expiry;\n', '    uint256 strikePrice;\n', '    OptionType optionType;\n', '    address paymentToken;\n', '}\n', '\n', 'interface IProtocolAdapter {\n', '    /**\n', '     * @notice Emitted when a new option contract is purchased\n', '     */\n', '    event Purchased(\n', '        address indexed caller,\n', '        string indexed protocolName,\n', '        address indexed underlying,\n', '        address strikeAsset,\n', '        uint256 expiry,\n', '        uint256 strikePrice,\n', '        OptionType optionType,\n', '        uint256 amount,\n', '        uint256 premium,\n', '        uint256 optionID\n', '    );\n', '\n', '    /**\n', '     * @notice Emitted when an option contract is exercised\n', '     */\n', '    event Exercised(\n', '        address indexed caller,\n', '        address indexed options,\n', '        uint256 indexed optionID,\n', '        uint256 amount,\n', '        uint256 exerciseProfit\n', '    );\n', '\n', '    /**\n', '     * @notice Name of the adapter. E.g. "HEGIC", "OPYN_V1". Used as index key for adapter addresses\n', '     */\n', '    function protocolName() external pure returns (string memory);\n', '\n', '    /**\n', '     * @notice Boolean flag to indicate whether to use option IDs or not.\n', '     * Fungible protocols normally use tokens to represent option contracts.\n', '     */\n', '    function nonFungible() external pure returns (bool);\n', '\n', '    /**\n', '     * @notice Returns the purchase method used to purchase options\n', '     */\n', '    function purchaseMethod() external pure returns (PurchaseMethod);\n', '\n', '    /**\n', '     * @notice Check if an options contract exist based on the passed parameters.\n', '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function optionsExist(OptionTerms calldata optionTerms)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    /**\n', "     * @notice Get the options contract's address based on the passed parameters\n", '     * @param optionTerms is the terms of the option contract\n', '     */\n', '    function getOptionsAddress(OptionTerms calldata optionTerms)\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    /**\n', '     * @notice Gets the premium to buy `purchaseAmount` of the option contract in ETH terms.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param purchaseAmount is the number of options purchased\n', '     */\n', '    function premium(OptionTerms calldata optionTerms, uint256 purchaseAmount)\n', '        external\n', '        view\n', '        returns (uint256 cost);\n', '\n', '    /**\n', '     * @notice Amount of profit made from exercising an option contract (current price - strike price). 0 if exercising out-the-money.\n', '     * @param options is the address of the options contract\n', '     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\n', '     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\n', '     */\n', '    function exerciseProfit(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount\n', '    ) external view returns (uint256 profit);\n', '\n', '    function canExercise(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount\n', '    ) external view returns (bool);\n', '\n', '    /**\n', '     * @notice Purchases the options contract.\n', '     * @param optionTerms is the terms of the option contract\n', '     * @param amount is the purchase amount in Wad units (10**18)\n', '     */\n', '    function purchase(\n', '        OptionTerms calldata optionTerms,\n', '        uint256 amount,\n', '        uint256 maxCost\n', '    ) external payable returns (uint256 optionID);\n', '\n', '    /**\n', '     * @notice Exercises the options contract.\n', '     * @param options is the address of the options contract\n', '     * @param optionID is the ID of the option position in non fungible protocols like Hegic.\n', '     * @param amount is the amount of tokens or options contract to exercise. Only relevant for fungle protocols like Opyn\n', '     * @param recipient is the account that receives the exercised profits. This is needed since the adapter holds all the positions and the msg.sender is an instrument contract.\n', '     */\n', '    function exercise(\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount,\n', '        address recipient\n', '    ) external payable;\n', '\n', '    function createShort(OptionTerms calldata optionTerms, uint256 amount)\n', '        external\n', '        returns (uint256);\n', '\n', '    function closeShort() external returns (uint256);\n', '}\n', '\n', 'enum OptionType {Invalid, Put, Call}\n', '\n', 'struct ZeroExOrder {\n', '    address exchangeAddress;\n', '    address buyTokenAddress;\n', '    address sellTokenAddress;\n', '    address allowanceTarget;\n', '    uint256 protocolFee;\n', '    uint256 makerAssetAmount;\n', '    uint256 takerAssetAmount;\n', '    bytes swapData;\n', '}\n', '\n', 'library ProtocolAdapter {\n', '    function delegateOptionsExist(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms\n', '    ) external view returns (bool) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).staticcall(\n', '                abi.encodeWithSignature(\n', '                    "optionsExist((address,address,address,uint256,uint256,uint8,address))",\n', '                    optionTerms\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (bool));\n', '    }\n', '\n', '    function delegateGetOptionsAddress(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms\n', '    ) external view returns (address) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).staticcall(\n', '                abi.encodeWithSignature(\n', '                    "getOptionsAddress((address,address,address,uint256,uint256,uint8,address))",\n', '                    optionTerms\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (address));\n', '    }\n', '\n', '    function delegatePremium(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms,\n', '        uint256 purchaseAmount\n', '    ) external view returns (uint256) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).staticcall(\n', '                abi.encodeWithSignature(\n', '                    "premium((address,address,address,uint256,uint256,uint8,address),uint256)",\n', '                    optionTerms,\n', '                    purchaseAmount\n', '                )\n', '            );\n', '        require(success, "premium staticcall failed");\n', '        return abi.decode(result, (uint256));\n', '    }\n', '\n', '    function delegateExerciseProfit(\n', '        IProtocolAdapter adapter,\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount\n', '    ) external view returns (uint256) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).staticcall(\n', '                abi.encodeWithSignature(\n', '                    "exerciseProfit(address,uint256,uint256)",\n', '                    options,\n', '                    optionID,\n', '                    amount\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (uint256));\n', '    }\n', '\n', '    function delegatePurchase(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms,\n', '        uint256 purchaseAmount,\n', '        uint256 maxCost\n', '    ) external returns (uint256) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature(\n', '                    "purchase((address,address,address,uint256,uint256,uint8,address),uint256,uint256)",\n', '                    optionTerms,\n', '                    purchaseAmount,\n', '                    maxCost\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (uint256));\n', '    }\n', '\n', '    function delegatePurchaseWithZeroEx(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms,\n', '        ZeroExOrder calldata zeroExOrder\n', '    ) external {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature(\n', '                    "purchaseWithZeroEx((address,address,address,uint256,uint256,uint8,address),(address,address,address,address,uint256,uint256,uint256,bytes))",\n', '                    optionTerms,\n', '                    zeroExOrder\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '    }\n', '\n', '    function delegateExercise(\n', '        IProtocolAdapter adapter,\n', '        address options,\n', '        uint256 optionID,\n', '        uint256 amount,\n', '        address recipient\n', '    ) external {\n', '        (bool success, bytes memory res) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature(\n', '                    "exercise(address,uint256,uint256,address)",\n', '                    options,\n', '                    optionID,\n', '                    amount,\n', '                    recipient\n', '                )\n', '            );\n', '        require(success, getRevertMsg(res));\n', '    }\n', '\n', '    function delegateClaimRewards(\n', '        IProtocolAdapter adapter,\n', '        address rewardsAddress,\n', '        uint256[] calldata optionIDs\n', '    ) external returns (uint256) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature(\n', '                    "claimRewards(address,uint256[])",\n', '                    rewardsAddress,\n', '                    optionIDs\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (uint256));\n', '    }\n', '\n', '    function delegateRewardsClaimable(\n', '        IProtocolAdapter adapter,\n', '        address rewardsAddress,\n', '        uint256[] calldata optionIDs\n', '    ) external view returns (uint256) {\n', '        (bool success, bytes memory result) =\n', '            address(adapter).staticcall(\n', '                abi.encodeWithSignature(\n', '                    "rewardsClaimable(address,uint256[])",\n', '                    rewardsAddress,\n', '                    optionIDs\n', '                )\n', '            );\n', '        require(success, getRevertMsg(result));\n', '        return abi.decode(result, (uint256));\n', '    }\n', '\n', '    function delegateCreateShort(\n', '        IProtocolAdapter adapter,\n', '        OptionTerms calldata optionTerms,\n', '        uint256 amount\n', '    ) external returns (uint256) {\n', '        (bool success, bytes memory res) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature(\n', '                    "createShort((address,address,address,uint256,uint256,uint8,address),uint256)",\n', '                    optionTerms,\n', '                    amount\n', '                )\n', '            );\n', '        require(success, getRevertMsg(res));\n', '        return abi.decode(res, (uint256));\n', '    }\n', '\n', '    function delegateCloseShort(IProtocolAdapter adapter)\n', '        external\n', '        returns (uint256)\n', '    {\n', '        (bool success, bytes memory res) =\n', '            address(adapter).delegatecall(\n', '                abi.encodeWithSignature("closeShort()")\n', '            );\n', '        require(success, getRevertMsg(res));\n', '        return abi.decode(res, (uint256));\n', '    }\n', '\n', '    function getRevertMsg(bytes memory _returnData)\n', '        internal\n', '        pure\n', '        returns (string memory)\n', '    {\n', '        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n', '        if (_returnData.length < 68) return "Transaction reverted silently";\n', '\n', '        assembly {\n', '            // Slice the sighash.\n', '            _returnData := add(_returnData, 0x04)\n', '        }\n', '        return abi.decode(_returnData, (string)); // All that remains is the revert string\n', '    }\n', '}\n', '\n', 'interface IRibbonFactory {\n', '    function isInstrument(address instrument) external returns (bool);\n', '\n', '    function getAdapter(string calldata protocolName)\n', '        external\n', '        view\n', '        returns (address);\n', '\n', '    function getAdapters()\n', '        external\n', '        view\n', '        returns (address[] memory adaptersArray);\n', '\n', '    function burnGasTokens() external;\n', '}\n', '\n', 'interface IWETH {\n', '    function deposit() external payable;\n', '\n', '    function withdraw(uint256) external;\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '}\n', '\n', 'interface ISwap {\n', '    event Swap(\n', '        uint256 indexed nonce,\n', '        uint256 timestamp,\n', '        address indexed signerWallet,\n', '        uint256 signerAmount,\n', '        uint256 signerId,\n', '        address signerToken,\n', '        address indexed senderWallet,\n', '        uint256 senderAmount,\n', '        uint256 senderId,\n', '        address senderToken,\n', '        address affiliateWallet,\n', '        uint256 affiliateAmount,\n', '        uint256 affiliateId,\n', '        address affiliateToken\n', '    );\n', '\n', '    event Cancel(uint256 indexed nonce, address indexed signerWallet);\n', '\n', '    event CancelUpTo(uint256 indexed nonce, address indexed signerWallet);\n', '\n', '    event AuthorizeSender(\n', '        address indexed authorizerAddress,\n', '        address indexed authorizedSender\n', '    );\n', '\n', '    event AuthorizeSigner(\n', '        address indexed authorizerAddress,\n', '        address indexed authorizedSigner\n', '    );\n', '\n', '    event RevokeSender(\n', '        address indexed authorizerAddress,\n', '        address indexed revokedSender\n', '    );\n', '\n', '    event RevokeSigner(\n', '        address indexed authorizerAddress,\n', '        address indexed revokedSigner\n', '    );\n', '\n', '    /**\n', '     * @notice Atomic Token Swap\n', '     * @param order Types.Order\n', '     */\n', '    function swap(Types.Order calldata order) external;\n', '\n', '    /**\n', '     * @notice Cancel one or more open orders by nonce\n', '     * @param nonces uint256[]\n', '     */\n', '    function cancel(uint256[] calldata nonces) external;\n', '\n', '    /**\n', '     * @notice Cancels all orders below a nonce value\n', '     * @dev These orders can be made active by reducing the minimum nonce\n', '     * @param minimumNonce uint256\n', '     */\n', '    function cancelUpTo(uint256 minimumNonce) external;\n', '\n', '    /**\n', '     * @notice Authorize a delegated sender\n', '     * @param authorizedSender address\n', '     */\n', '    function authorizeSender(address authorizedSender) external;\n', '\n', '    /**\n', '     * @notice Authorize a delegated signer\n', '     * @param authorizedSigner address\n', '     */\n', '    function authorizeSigner(address authorizedSigner) external;\n', '\n', '    /**\n', '     * @notice Revoke an authorization\n', '     * @param authorizedSender address\n', '     */\n', '    function revokeSender(address authorizedSender) external;\n', '\n', '    /**\n', '     * @notice Revoke an authorization\n', '     * @param authorizedSigner address\n', '     */\n', '    function revokeSigner(address authorizedSigner) external;\n', '\n', '    function senderAuthorizations(address, address)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function signerAuthorizations(address, address)\n', '        external\n', '        view\n', '        returns (bool);\n', '\n', '    function signerNonceStatus(address, uint256) external view returns (bytes1);\n', '\n', '    function signerMinimumNonce(address) external view returns (uint256);\n', '\n', '    function registry() external view returns (address);\n', '}\n', '\n', 'interface OtokenInterface {\n', '    function addressBook() external view returns (address);\n', '\n', '    function underlyingAsset() external view returns (address);\n', '\n', '    function strikeAsset() external view returns (address);\n', '\n', '    function collateralAsset() external view returns (address);\n', '\n', '    function strikePrice() external view returns (uint256);\n', '\n', '    function expiryTimestamp() external view returns (uint256);\n', '\n', '    function isPut() external view returns (bool);\n', '\n', '    function init(\n', '        address _addressBook,\n', '        address _underlyingAsset,\n', '        address _strikeAsset,\n', '        address _collateralAsset,\n', '        uint256 _strikePrice,\n', '        uint256 _expiry,\n', '        bool _isPut\n', '    ) external;\n', '\n', '    function mintOtoken(address account, uint256 amount) external;\n', '\n', '    function burnOtoken(address account, uint256 amount) external;\n', '}\n', '\n', 'abstract contract Ownable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function initialize(address newOwner) public {\n', '        _owner = newOwner;\n', '        emit OwnershipTransferred(address(0), newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == msg.sender, "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(\n', '            initializing || isConstructor() || !initialized,\n', '            "Contract instance has already been initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '}\n', '\n', 'contract OptionsVaultStorageV1 is Initializable, Ownable, ReentrancyGuard {\n', '    // Ribbon Factory used to access adapters\n', '    IRibbonFactory public factory;\n', '\n', '    // Privileged role that is able to select the option terms (strike price, expiry) to short\n', '    address public manager;\n', '\n', '    // Option that the vault is currently shorting\n', '    address public currentOption;\n', '\n', '    // Amount that is currently locked for selling options\n', '    uint256 public lockedAmount;\n', '}\n', '\n', '// \n', 'contract RibbonETHCoveredCall is DSMath, ERC20, OptionsVaultStorageV1 {\n', '    using ProtocolAdapter for IProtocolAdapter;\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '\n', '    enum ExchangeMechanism {Unknown, AirSwap}\n', '    string private constant _tokenName = "Ribbon ETH Covered Call Vault";\n', '    string private constant _tokenSymbol = "rETH-COVCALL";\n', '    string private constant _adapterName = "OPYN_GAMMA";\n', '    address private constant _WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // AirSwap Swap contract https://github.com/airswap/airswap-protocols/blob/master/source/swap/contracts/interfaces/ISwap.sol\n', '    ISwap private constant _swapContract =\n', '        ISwap(0x4572f2554421Bd64Bef1c22c8a81840E8D496BeA);\n', '\n', '    address public constant asset = _WETH;\n', '    ExchangeMechanism public constant exchangeMechanism =\n', '        ExchangeMechanism.AirSwap;\n', '\n', '    // 1% for an instant withdrawal\n', '    uint256 public constant instantWithdrawalFee = 0.01 ether;\n', '\n', '    // 90% locked in options protocol, 10% of the pool reserved for withdrawals\n', '    uint256 public constant lockedRatio = 0.9 ether;\n', '\n', '    event ManagerChanged(address oldManager, address newManager);\n', '\n', '    event Deposit(address indexed account, uint256 amount, uint256 share);\n', '\n', '    event Withdraw(address indexed account, uint256 amount, uint256 share);\n', '\n', '    event OpenShort(\n', '        address indexed options,\n', '        uint256 depositAmount,\n', '        address manager\n', '    );\n', '\n', '    event CloseShort(\n', '        address indexed options,\n', '        uint256 withdrawAmount,\n', '        address manager\n', '    );\n', '\n', '    constructor() ERC20(_tokenName, _tokenSymbol) {}\n', '\n', '    /**\n', '     * @notice Initializes the OptionVault contract with an owner and a factory.\n', '     * @param _owner is the owner of the contract who can set the manager\n', '     * @param _factory is the RibbonFactory instance\n', '     */\n', '    function initialize(address _owner, address _factory) public initializer {\n', '        Ownable.initialize(_owner);\n', '        factory = IRibbonFactory(_factory);\n', '    }\n', '\n', '    /**\n', '     * @notice Sets the new manager of the vault. Revoke the airswap signer authorization from the old manager, and authorize the manager.\n', '     * @param _manager is the new manager of the vault\n', '     */\n', '    function setManager(address _manager) public onlyOwner {\n', '        require(_manager != address(0), "New manager cannot be 0x0");\n', '        address oldManager = manager;\n', '        if (oldManager != address(0)) {\n', '            _swapContract.revokeSigner(oldManager);\n', '        }\n', '        manager = _manager;\n', '        _swapContract.authorizeSigner(_manager);\n', '\n', '        emit ManagerChanged(oldManager, _manager);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposits ETH into the contract and mint vault shares.\n', '     */\n', '    function depositETH() external payable nonReentrant {\n', '        require(msg.value > 0, "No value passed");\n', '        require(asset == _WETH, "Asset is not WETH");\n', '\n', '        IWETH(_WETH).deposit{value: msg.value}();\n', '        _deposit(msg.value);\n', '    }\n', '\n', '    /**\n', '     * @notice Deposits the `asset` into the contract and mint vault shares.\n', '     * @param amount is the amount of `asset` to deposit\n', '     */\n', '    function deposit(uint256 amount) external nonReentrant {\n', '        IERC20(asset).safeTransferFrom(msg.sender, address(this), amount);\n', '        _deposit(amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Mints the vault shares to the msg.sender\n', '     * @param amount is the amount of `asset` deposited\n', '     */\n', '    function _deposit(uint256 amount) private {\n', '        // amount needs to be subtracted from totalBalance because it has already been\n', '        // added to it from either IWETH.deposit and IERC20.safeTransferFrom\n', '        uint256 total = totalBalance().sub(amount);\n', '\n', '        // Following the pool share calculation from Alpha Homora: https://github.com/AlphaFinanceLab/alphahomora/blob/340653c8ac1e9b4f23d5b81e61307bf7d02a26e8/contracts/5/Bank.sol#L104\n', '        uint256 share =\n', '            total == 0 ? amount : amount.mul(totalSupply()).div(total);\n', '        _mint(msg.sender, share);\n', '        emit Deposit(msg.sender, amount, share);\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraws ETH from vault using vault shares\n', '     * @param share is the number of vault shares to be burned\n', '     */\n', '    function withdrawETH(uint256 share) external nonReentrant {\n', '        uint256 withdrawAmount = _withdraw(share);\n', '\n', '        IWETH(_WETH).withdraw(withdrawAmount);\n', '        (bool success, ) = msg.sender.call{value: withdrawAmount}("");\n', '        require(success, "ETH transfer failed");\n', '    }\n', '\n', '    /**\n', '     * @notice Withdraws WETH from vault using vault shares\n', '     * @param share is the number of vault shares to be burned\n', '     */\n', '    function withdraw(uint256 share) external nonReentrant {\n', '        uint256 withdrawAmount = _withdraw(share);\n', '        require(\n', '            IERC20(asset).transfer(msg.sender, withdrawAmount),\n', '            "ERC20 transfer failed"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Burns vault shares and checks if eligible for withdrawal\n', '     * @param share is the number of vault shares to be burned\n', '     */\n', '    function _withdraw(uint256 share) private returns (uint256) {\n', '        uint256 _lockedAmount = lockedAmount;\n', '        uint256 currentAssetBalance = IERC20(asset).balanceOf(address(this));\n', '        uint256 total = _lockedAmount.add(currentAssetBalance);\n', '        uint256 availableForWithdrawal =\n', '            _availableToWithdraw(_lockedAmount, currentAssetBalance);\n', '\n', '        // Following the pool share calculation from Alpha Homora: https://github.com/AlphaFinanceLab/alphahomora/blob/340653c8ac1e9b4f23d5b81e61307bf7d02a26e8/contracts/5/Bank.sol#L111\n', '        uint256 withdrawAmount = share.mul(total).div(totalSupply());\n', '        require(\n', '            withdrawAmount <= availableForWithdrawal,\n', '            "Cannot withdraw more than available"\n', '        );\n', '\n', '        uint256 feeAmount = wmul(withdrawAmount, instantWithdrawalFee);\n', '        uint256 amountAfterFee = withdrawAmount.sub(feeAmount);\n', '\n', '        _burn(msg.sender, share);\n', '\n', '        emit Withdraw(msg.sender, amountAfterFee, share);\n', '\n', '        return amountAfterFee;\n', '    }\n', '\n', '    /**\n', '     * @notice Rolls from one short option position to another. Closes the expired short position, withdraw from it, then open a new position.\n', '     * @param optionTerms are the option contract terms the vault will be short\n', '     */\n', '    function rollToNextOption(OptionTerms calldata optionTerms)\n', '        external\n', '        onlyManager\n', '        nonReentrant\n', '    {\n', '        // We can save gas by storing the factory address as a constant\n', '        IProtocolAdapter adapter =\n', '            IProtocolAdapter(factory.getAdapter(_adapterName));\n', '\n', '        address oldOption = currentOption;\n', '        if (oldOption != address(0)) {\n', '            require(\n', '                block.timestamp >= OtokenInterface(oldOption).expiryTimestamp(),\n', '                "Otoken not expired"\n', '            );\n', '            uint256 withdrawAmount = adapter.delegateCloseShort();\n', '            emit CloseShort(oldOption, withdrawAmount, msg.sender);\n', '        }\n', '\n', '        uint256 currentBalance = IERC20(asset).balanceOf(address(this));\n', '        uint256 shortAmount = wmul(currentBalance, lockedRatio);\n', '        uint256 shortBalance =\n', '            adapter.delegateCreateShort(optionTerms, shortAmount);\n', '\n', '        address newOption = adapter.getOptionsAddress(optionTerms);\n', '        IERC20 optionToken = IERC20(newOption);\n', '        optionToken.approve(address(_swapContract), shortBalance);\n', '\n', '        currentOption = newOption;\n', '        lockedAmount = shortAmount;\n', '\n', '        emit OpenShort(newOption, shortAmount, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the expiry of the current option the vault is shorting\n', '     */\n', '    function currentOptionExpiry() external view returns (uint256) {\n', '        address _currentOption = currentOption;\n', '        if (_currentOption == address(0)) {\n', '            return 0;\n', '        }\n', '\n', '        OtokenInterface oToken = OtokenInterface(currentOption);\n', '        return oToken.expiryTimestamp();\n', '    }\n', '\n', '    /**\n', "     * @notice Returns the vault's total balance, including the amounts locked into a short position\n", '     */\n', '    function totalBalance() public view returns (uint256) {\n', '        return lockedAmount.add(IERC20(asset).balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the amount available for users to withdraw. MIN(10% * (locked + assetBalance), assetBalance)\n', '     */\n', '    function availableToWithdraw() external view returns (uint256) {\n', '        return\n', '            _availableToWithdraw(\n', '                lockedAmount,\n', '                IERC20(asset).balanceOf(address(this))\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @notice Helper function that returns amount available to withdraw. Used to save gas.\n', '     */\n', '    function _availableToWithdraw(uint256 lockedBalance, uint256 freeBalance)\n', '        private\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 total = lockedBalance.add(freeBalance);\n', '        uint256 reserveRatio = uint256(1 ether).sub(lockedRatio);\n', '        uint256 reserve = wmul(total, reserveRatio);\n', '\n', '        return min(reserve, freeBalance);\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the token name\n', '     */\n', '    function name() public pure override returns (string memory) {\n', '        return _tokenName;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the token symbol\n', '     */\n', '    function symbol() public pure override returns (string memory) {\n', '        return _tokenSymbol;\n', '    }\n', '\n', '    /**\n', '     * @notice Only allows manager to execute a function\n', '     */\n', '    modifier onlyManager {\n', '        require(msg.sender == manager, "Only manager");\n', '        _;\n', '    }\n', '}']