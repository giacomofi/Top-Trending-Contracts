['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '// Part: IBank\n', '\n', 'interface IBank {\n', '  /// The governor adds a new bank gets added to the system.\n', '  event AddBank(address token, address cToken);\n', '  /// The governor sets the address of the oracle smart contract.\n', '  event SetOracle(address oracle);\n', '  /// The governor sets the basis point fee of the bank.\n', '  event SetFeeBps(uint feeBps);\n', '  /// The governor withdraw tokens from the reserve of a bank.\n', '  event WithdrawReserve(address user, address token, uint amount);\n', '  /// Someone borrows tokens from a bank via a spell caller.\n', '  event Borrow(uint positionId, address caller, address token, uint amount, uint share);\n', '  /// Someone repays tokens to a bank via a spell caller.\n', '  event Repay(uint positionId, address caller, address token, uint amount, uint share);\n', '  /// Someone puts tokens as collateral via a spell caller.\n', '  event PutCollateral(uint positionId, address caller, address token, uint id, uint amount);\n', '  /// Someone takes tokens from collateral via a spell caller.\n', '  event TakeCollateral(uint positionId, address caller, address token, uint id, uint amount);\n', '  /// Someone calls liquidatation on a position, paying debt and taking collateral tokens.\n', '  event Liquidate(\n', '    uint positionId,\n', '    address liquidator,\n', '    address debtToken,\n', '    uint amount,\n', '    uint share,\n', '    uint bounty\n', '  );\n', '\n', '  /// @dev Return the current position while under execution.\n', '  function POSITION_ID() external view returns (uint);\n', '\n', '  /// @dev Return the current target while under execution.\n', '  function SPELL() external view returns (address);\n', '\n', '  /// @dev Return the current executor (the owner of the current position).\n', '  function EXECUTOR() external view returns (address);\n', '\n', '  /// @dev Return bank information for the given token.\n', '  function getBankInfo(address token)\n', '    external\n', '    view\n', '    returns (\n', '      bool isListed,\n', '      address cToken,\n', '      uint reserve,\n', '      uint totalDebt,\n', '      uint totalShare\n', '    );\n', '\n', '  /// @dev Return position information for the given position id.\n', '  function getPositionInfo(uint positionId)\n', '    external\n', '    view\n', '    returns (\n', '      address owner,\n', '      address collToken,\n', '      uint collId,\n', '      uint collateralSize\n', '    );\n', '\n', '  /// @dev Return the borrow balance for given positon and token without trigger interest accrual.\n', '  function borrowBalanceStored(uint positionId, address token) external view returns (uint);\n', '\n', '  /// @dev Trigger interest accrual and return the current borrow balance.\n', '  function borrowBalanceCurrent(uint positionId, address token) external returns (uint);\n', '\n', '  /// @dev Borrow tokens from the bank.\n', '  function borrow(address token, uint amount) external;\n', '\n', '  /// @dev Repays tokens to the bank.\n', '  function repay(address token, uint amountCall) external;\n', '\n', '  /// @dev Transmit user assets to the spell.\n', '  function transmit(address token, uint amount) external;\n', '\n', '  /// @dev Put more collateral for users.\n', '  function putCollateral(\n', '    address collToken,\n', '    uint collId,\n', '    uint amountCall\n', '  ) external;\n', '\n', '  /// @dev Take some collateral back.\n', '  function takeCollateral(\n', '    address collToken,\n', '    uint collId,\n', '    uint amount\n', '  ) external;\n', '\n', '  /// @dev Liquidate a position.\n', '  function liquidate(\n', '    uint positionId,\n', '    address debtToken,\n', '    uint amountCall\n', '  ) external;\n', '\n', '  function getBorrowETHValue(uint positionId) external view returns (uint);\n', '\n', '  function accrue(address token) external;\n', '\n', '  function nextPositionId() external view returns (uint);\n', '\n', '  /// @dev Return current position information.\n', '  function getCurrentPositionInfo()\n', '    external\n', '    view\n', '    returns (\n', '      address owner,\n', '      address collToken,\n', '      uint collId,\n', '      uint collateralSize\n', '    );\n', '\n', '  function support(address token) external view returns (bool);\n', '\n', '}\n', '\n', '// Part: ICurvePool\n', '\n', 'interface ICurvePool {\n', '  function add_liquidity(uint[2] calldata, uint) external;\n', '\n', '  function add_liquidity(uint[3] calldata, uint) external;\n', '\n', '  function add_liquidity(uint[4] calldata, uint) external;\n', '\n', '  function remove_liquidity(uint, uint[2] calldata) external;\n', '\n', '  function remove_liquidity(uint, uint[3] calldata) external;\n', '\n', '  function remove_liquidity(uint, uint[4] calldata) external;\n', '\n', '  function remove_liquidity_imbalance(uint[2] calldata, uint) external;\n', '\n', '  function remove_liquidity_imbalance(uint[3] calldata, uint) external;\n', '\n', '  function remove_liquidity_imbalance(uint[4] calldata, uint) external;\n', '\n', '  function remove_liquidity_one_coin(\n', '    uint,\n', '    int128,\n', '    uint\n', '  ) external;\n', '\n', '  function get_virtual_price() external view returns (uint);\n', '}\n', '\n', '// Part: ICurveRegistry\n', '\n', 'interface ICurveRegistry {\n', '  function get_n_coins(address lp) external view returns (uint, uint);\n', '\n', '  function pool_list(uint id) external view returns (address);\n', '\n', '  function get_coins(address pool) external view returns (address[8] memory);\n', '\n', '  function get_gauges(address pool) external view returns (address[10] memory, uint128[10] memory);\n', '\n', '  function get_lp_token(address pool) external view returns (address);\n', '\n', '  function get_pool_from_lp_token(address lp) external view returns (address);\n', '}\n', '\n', '// Part: IERC20Wrapper\n', '\n', 'interface IERC20Wrapper {\n', '  /// @dev Return the underlying ERC-20 for the given ERC-1155 token id.\n', '  function getUnderlyingToken(uint id) external view returns (address);\n', '\n', '  /// @dev Return the conversion rate from ERC-1155 to ERC-20, multiplied by 2**112.\n', '  function getUnderlyingRate(uint id) external view returns (uint);\n', '}\n', '\n', '// Part: IWETH\n', '\n', 'interface IWETH {\n', '  function balanceOf(address user) external returns (uint);\n', '\n', '  function approve(address to, uint value) external returns (bool);\n', '\n', '  function transfer(address to, uint value) external returns (bool);\n', '\n', '  function deposit() external payable;\n', '\n', '  function withdraw(uint) external;\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC165\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: HomoraMath\n', '\n', 'library HomoraMath {\n', '  using SafeMath for uint;\n', '\n', '  function divCeil(uint lhs, uint rhs) internal pure returns (uint) {\n', '    return lhs.add(rhs).sub(1) / rhs;\n', '  }\n', '\n', '  function fmul(uint lhs, uint rhs) internal pure returns (uint) {\n', '    return lhs.mul(rhs) / (2**112);\n', '  }\n', '\n', '  function fdiv(uint lhs, uint rhs) internal pure returns (uint) {\n', '    return lhs.mul(2**112) / rhs;\n', '  }\n', '\n', '  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n', '  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '  function sqrt(uint x) internal pure returns (uint) {\n', '    if (x == 0) return 0;\n', '    uint xx = x;\n', '    uint r = 1;\n', '\n', '    if (xx >= 0x100000000000000000000000000000000) {\n', '      xx >>= 128;\n', '      r <<= 64;\n', '    }\n', '\n', '    if (xx >= 0x10000000000000000) {\n', '      xx >>= 64;\n', '      r <<= 32;\n', '    }\n', '    if (xx >= 0x100000000) {\n', '      xx >>= 32;\n', '      r <<= 16;\n', '    }\n', '    if (xx >= 0x10000) {\n', '      xx >>= 16;\n', '      r <<= 8;\n', '    }\n', '    if (xx >= 0x100) {\n', '      xx >>= 8;\n', '      r <<= 4;\n', '    }\n', '    if (xx >= 0x10) {\n', '      xx >>= 4;\n', '      r <<= 2;\n', '    }\n', '    if (xx >= 0x8) {\n', '      r <<= 1;\n', '    }\n', '\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1;\n', '    r = (r + x / r) >> 1; // Seven iterations should be enough\n', '    uint r1 = x / r;\n', '    return (r < r1 ? r : r1);\n', '  }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/ERC165\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC1155\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC1155Receiver\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Initializable\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !Address.isContract(address(this));\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: Governable\n', '\n', 'contract Governable is Initializable {\n', '  event SetGovernor(address governor);\n', '  event SetPendingGovernor(address pendingGovernor);\n', '  event AcceptGovernor(address governor);\n', '\n', '  address public governor; // The current governor.\n', '  address public pendingGovernor; // The address pending to become the governor once accepted.\n', '\n', '  bytes32[64] _gap; // reserve space for upgrade\n', '\n', '  modifier onlyGov() {\n', "    require(msg.sender == governor, 'not the governor');\n", '    _;\n', '  }\n', '\n', '  /// @dev Initialize using msg.sender as the first governor.\n', '  function __Governable__init() internal initializer {\n', '    governor = msg.sender;\n', '    pendingGovernor = address(0);\n', '    emit SetGovernor(msg.sender);\n', '  }\n', '\n', '  /// @dev Set the pending governor, which will be the governor once accepted.\n', '  /// @param _pendingGovernor The address to become the pending governor.\n', '  function setPendingGovernor(address _pendingGovernor) external onlyGov {\n', '    pendingGovernor = _pendingGovernor;\n', '    emit SetPendingGovernor(_pendingGovernor);\n', '  }\n', '\n', '  /// @dev Accept to become the new governor. Must be called by the pending governor.\n', '  function acceptGovernor() external {\n', "    require(msg.sender == pendingGovernor, 'not the pending governor');\n", '    pendingGovernor = address(0);\n', '    governor = msg.sender;\n', '    emit AcceptGovernor(msg.sender);\n', '  }\n', '}\n', '\n', '// Part: IWERC20\n', '\n', 'interface IWERC20 is IERC1155, IERC20Wrapper {\n', '  /// @dev Return the underlying ERC20 balance for the user.\n', '  function balanceOfERC20(address token, address user) external view returns (uint);\n', '\n', '  /// @dev Mint ERC1155 token for the given ERC20 token.\n', '  function mint(address token, uint amount) external;\n', '\n', '  /// @dev Burn ERC1155 token to redeem ERC20 token back.\n', '  function burn(address token, uint amount) external;\n', '}\n', '\n', '// Part: IWLiquidityGauge\n', '\n', 'interface IWLiquidityGauge is IERC1155, IERC20Wrapper {\n', '  /// @dev Mint ERC1155 token for the given ERC20 token.\n', '  function mint(\n', '    uint pid,\n', '    uint gid,\n', '    uint amount\n', '  ) external returns (uint id);\n', '\n', '  /// @dev Burn ERC1155 token to redeem ERC20 token back.\n', '  function burn(uint id, uint amount) external returns (uint pid);\n', '\n', '  function crv() external returns (IERC20);\n', '\n', '  function registry() external returns (ICurveRegistry);\n', '\n', '  function encodeId(\n', '    uint,\n', '    uint,\n', '    uint\n', '  ) external pure returns (uint);\n', '\n', '  function decodeId(uint id)\n', '    external\n', '    pure\n', '    returns (\n', '      uint,\n', '      uint,\n', '      uint\n', '    );\n', '\n', '  function getUnderlyingTokenFromIds(uint pid, uint gid) external view returns (address);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/ERC1155Receiver\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'abstract contract ERC1155Receiver is ERC165, IERC1155Receiver {\n', '    constructor() internal {\n', '        _registerInterface(\n', '            ERC1155Receiver(address(0)).onERC1155Received.selector ^\n', '            ERC1155Receiver(address(0)).onERC1155BatchReceived.selector\n', '        );\n', '    }\n', '}\n', '\n', '// Part: ERC1155NaiveReceiver\n', '\n', 'contract ERC1155NaiveReceiver is ERC1155Receiver {\n', '  bytes32[64] __gap; // reserve space for upgrade\n', '\n', '  function onERC1155Received(\n', '    address, /* operator */\n', '    address, /* from */\n', '    uint, /* id */\n', '    uint, /* value */\n', '    bytes calldata /* data */\n', '  ) external override returns (bytes4) {\n', '    return this.onERC1155Received.selector;\n', '  }\n', '\n', '  function onERC1155BatchReceived(\n', '    address, /* operator */\n', '    address, /* from */\n', '    uint[] calldata, /* ids */\n', '    uint[] calldata, /* values */\n', '    bytes calldata /* data */\n', '  ) external override returns (bytes4) {\n', '    return this.onERC1155BatchReceived.selector;\n', '  }\n', '}\n', '\n', '// Part: BasicSpell\n', '\n', 'abstract contract BasicSpell is ERC1155NaiveReceiver {\n', '  using SafeERC20 for IERC20;\n', '\n', '  IBank public immutable bank;\n', '  IWERC20 public immutable werc20;\n', '  address public immutable weth;\n', '\n', '  mapping(address => mapping(address => bool)) public approved; // Mapping from token to (mapping from spender to approve status)\n', '\n', '  constructor(\n', '    IBank _bank,\n', '    address _werc20,\n', '    address _weth\n', '  ) public {\n', '    bank = _bank;\n', '    werc20 = IWERC20(_werc20);\n', '    weth = _weth;\n', '    ensureApprove(_weth, address(_bank));\n', '    IWERC20(_werc20).setApprovalForAll(address(_bank), true);\n', '  }\n', '\n', '  /// @dev Ensure that the spell has approved the given spender to spend all of its tokens.\n', '  /// @param token The token to approve.\n', '  /// @param spender The spender to allow spending.\n', '  /// NOTE: This is safe because spell is never built to hold fund custody.\n', '  function ensureApprove(address token, address spender) internal {\n', '    if (!approved[token][spender]) {\n', '      IERC20(token).safeApprove(spender, uint(-1));\n', '      approved[token][spender] = true;\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to convert msg.value ETH to WETH inside the contract.\n', '  function doTransmitETH() internal {\n', '    if (msg.value > 0) {\n', '      IWETH(weth).deposit{value: msg.value}();\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to transmit tokens from the bank if amount is positive.\n', '  /// @param token The token to perform the transmit action.\n', '  /// @param amount The amount to transmit.\n', '  /// @notice Do not use `amount` input argument to handle the received amount.\n', '  function doTransmit(address token, uint amount) internal {\n', '    if (amount > 0) {\n', '      bank.transmit(token, amount);\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to refund tokens to the current bank executor.\n', '  /// @param token The token to perform the refund action.\n', '  function doRefund(address token) internal {\n', '    uint balance = IERC20(token).balanceOf(address(this));\n', '    if (balance > 0) {\n', '      IERC20(token).safeTransfer(bank.EXECUTOR(), balance);\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to refund all WETH to the current executor as native ETH.\n', '  function doRefundETH() internal {\n', '    uint balance = IWETH(weth).balanceOf(address(this));\n', '    if (balance > 0) {\n', '      IWETH(weth).withdraw(balance);\n', '      (bool success, ) = bank.EXECUTOR().call{value: balance}(new bytes(0));\n', "      require(success, 'refund ETH failed');\n", '    }\n', '  }\n', '\n', '  /// @dev Internal call to borrow tokens from the bank on behalf of the current executor.\n', '  /// @param token The token to borrow from the bank.\n', '  /// @param amount The amount to borrow.\n', '  /// @notice Do not use `amount` input argument to handle the received amount.\n', '  function doBorrow(address token, uint amount) internal {\n', '    if (amount > 0) {\n', '      bank.borrow(token, amount);\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to repay tokens to the bank on behalf of the current executor.\n', '  /// @param token The token to repay to the bank.\n', '  /// @param amount The amount to repay.\n', '  function doRepay(address token, uint amount) internal {\n', '    if (amount > 0) {\n', '      ensureApprove(token, address(bank));\n', '      bank.repay(token, amount);\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to put collateral tokens in the bank.\n', '  /// @param token The token to put in the bank.\n', '  /// @param amount The amount to put in the bank.\n', '  function doPutCollateral(address token, uint amount) internal {\n', '    if (amount > 0) {\n', '      ensureApprove(token, address(werc20));\n', '      werc20.mint(token, amount);\n', '      bank.putCollateral(address(werc20), uint(token), amount);\n', '    }\n', '  }\n', '\n', '  /// @dev Internal call to take collateral tokens from the bank.\n', '  /// @param token The token to take back.\n', '  /// @param amount The amount to take back.\n', '  function doTakeCollateral(address token, uint amount) internal {\n', '    if (amount > 0) {\n', '      if (amount == uint(-1)) {\n', '        (, , , amount) = bank.getCurrentPositionInfo();\n', '      }\n', '      bank.takeCollateral(address(werc20), uint(token), amount);\n', '      werc20.burn(token, amount);\n', '    }\n', '  }\n', '\n', '  /// @dev Fallback function. Can only receive ETH from WETH contract.\n', '  receive() external payable {\n', "    require(msg.sender == weth, 'ETH must come from WETH');\n", '  }\n', '}\n', '\n', '// Part: WhitelistSpell\n', '\n', 'contract WhitelistSpell is BasicSpell, Governable {\n', '  mapping(address => bool) public whitelistedLpTokens; // mapping from lp token to whitelist status\n', '\n', '  constructor(\n', '    IBank _bank,\n', '    address _werc20,\n', '    address _weth\n', '  ) public BasicSpell(_bank, _werc20, _weth) {\n', '    __Governable__init();\n', '  }\n', '\n', '  /// @dev Set whitelist LP token statuses for spell\n', '  /// @param lpTokens LP tokens to set whitelist statuses\n', '  /// @param statuses Whitelist statuses\n', '  function setWhitelistLPTokens(address[] calldata lpTokens, bool[] calldata statuses)\n', '    external\n', '    onlyGov\n', '  {\n', "    require(lpTokens.length == statuses.length, 'lpTokens & statuses length mismatched');\n", '    for (uint idx = 0; idx < lpTokens.length; idx++) {\n', '      if (statuses[idx]) {\n', "        require(bank.support(lpTokens[idx]), 'oracle not support lp token');\n", '      }\n', '      whitelistedLpTokens[lpTokens[idx]] = statuses[idx];\n', '    }\n', '  }\n', '}\n', '\n', '// File: CurveSpellV1.sol\n', '\n', 'contract CurveSpellV1 is WhitelistSpell {\n', '  using SafeMath for uint;\n', '  using HomoraMath for uint;\n', '\n', '  ICurveRegistry public immutable registry; // Curve registry\n', '  IWLiquidityGauge public immutable wgauge; // Wrapped liquidity gauge\n', '  address public immutable crv; // CRV token address\n', '  mapping(address => address[]) public ulTokens; // Mapping from LP token address -> underlying token addresses\n', '  mapping(address => address) public poolOf; // Mapping from LP token address to -> pool address\n', '\n', '  constructor(\n', '    IBank _bank,\n', '    address _werc20,\n', '    address _weth,\n', '    address _wgauge\n', '  ) public WhitelistSpell(_bank, _werc20, _weth) {\n', '    wgauge = IWLiquidityGauge(_wgauge);\n', '    IWLiquidityGauge(_wgauge).setApprovalForAll(address(_bank), true);\n', '    registry = IWLiquidityGauge(_wgauge).registry();\n', '    crv = address(IWLiquidityGauge(_wgauge).crv());\n', '  }\n', '\n', '  /// @dev Return pool address given LP token and update pool info if not exist.\n', '  /// @param lp LP token to find the corresponding pool.\n', '  function getPool(address lp) public returns (address) {\n', '    address pool = poolOf[lp];\n', '    if (pool == address(0)) {\n', "      require(lp != address(0), 'no lp token');\n", '      pool = registry.get_pool_from_lp_token(lp);\n', "      require(pool != address(0), 'no corresponding pool for lp token');\n", '      poolOf[lp] = pool;\n', '      (uint n, ) = registry.get_n_coins(pool);\n', '      address[8] memory tokens = registry.get_coins(pool);\n', '      ulTokens[lp] = new address[](n);\n', '      for (uint i = 0; i < n; i++) {\n', '        ulTokens[lp][i] = tokens[i];\n', '      }\n', '    }\n', '    return pool;\n', '  }\n', '\n', '  /// @dev Ensure approval of underlying tokens to the corresponding Curve pool\n', '  /// @param lp LP token for the pool\n', "  /// @param n Number of pool's underlying tokens\n", '  function ensureApproveN(address lp, uint n) public {\n', "    require(ulTokens[lp].length == n, 'incorrect pool length');\n", '    address pool = poolOf[lp];\n', '    address[] memory tokens = ulTokens[lp];\n', '    for (uint idx = 0; idx < n; idx++) {\n', '      ensureApprove(tokens[idx], pool);\n', '    }\n', '  }\n', '\n', '  /// @dev Add liquidity to Curve pool with 2 underlying tokens, with staking to Curve gauge\n', '  /// @param lp LP token for the pool\n', '  /// @param amtsUser Supplied underlying token amounts\n', '  /// @param amtLPUser Supplied LP token amount\n', '  /// @param amtsBorrow Borrow underlying token amounts\n', '  /// @param amtLPBorrow Borrow LP token amount\n', '  /// @param minLPMint Desired LP token amount (slippage control)\n', '  /// @param pid Curve pool id for the pool\n', '  /// @param gid Curve gauge id for the pool\n', '  function addLiquidity2(\n', '    address lp,\n', '    uint[2] calldata amtsUser,\n', '    uint amtLPUser,\n', '    uint[2] calldata amtsBorrow,\n', '    uint amtLPBorrow,\n', '    uint minLPMint,\n', '    uint pid,\n', '    uint gid\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', "    require(ulTokens[lp].length == 2, 'incorrect pool length');\n", "    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. Take out collateral\n', '    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\n', '    if (collSize > 0) {\n', '      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\n', "      require(decodedPid == pid && decodedGid == gid, 'bad pid or gid');\n", "      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '      bank.takeCollateral(address(wgauge), collId, collSize);\n', '      wgauge.burn(collId, collSize);\n', '    }\n', '\n', '    // 1. Ensure approve 2 underlying tokens\n', '    ensureApproveN(lp, 2);\n', '\n', '    // 2. Get user input amounts\n', '    for (uint i = 0; i < 2; i++) doTransmit(tokens[i], amtsUser[i]);\n', '    doTransmit(lp, amtLPUser);\n', '\n', '    // 3. Borrow specified amounts\n', '    for (uint i = 0; i < 2; i++) doBorrow(tokens[i], amtsBorrow[i]);\n', '    doBorrow(lp, amtLPBorrow);\n', '\n', '    // 4. add liquidity\n', '    uint[2] memory suppliedAmts;\n', '    for (uint i = 0; i < 2; i++) {\n', '      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\n', '    }\n', '    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0) {\n', '      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\n', '    }\n', '\n', '    // 5. Put collateral\n', '    ensureApprove(lp, address(wgauge));\n', '    {\n', '      uint amount = IERC20(lp).balanceOf(address(this));\n', '      uint id = wgauge.mint(pid, gid, amount);\n', '      bank.putCollateral(address(wgauge), id, amount);\n', '    }\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 2; i++) doRefund(tokens[i]);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', '  /// @dev Add liquidity to Curve pool with 3 underlying tokens, with staking to Curve gauge\n', '  /// @param lp LP token for the pool\n', '  /// @param amtsUser Supplied underlying token amounts\n', '  /// @param amtLPUser Supplied LP token amount\n', '  /// @param amtsBorrow Borrow underlying token amounts\n', '  /// @param amtLPBorrow Borrow LP token amount\n', '  /// @param minLPMint Desired LP token amount (slippage control)\n', '  /// @param pid CUrve pool id for the pool\n', '  /// @param gid Curve gauge id for the pool\n', '  function addLiquidity3(\n', '    address lp,\n', '    uint[3] calldata amtsUser,\n', '    uint amtLPUser,\n', '    uint[3] calldata amtsBorrow,\n', '    uint amtLPBorrow,\n', '    uint minLPMint,\n', '    uint pid,\n', '    uint gid\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', "    require(ulTokens[lp].length == 3, 'incorrect pool length');\n", "    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. take out collateral\n', '    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\n', '    if (collSize > 0) {\n', '      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\n', "      require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');\n", "      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '      bank.takeCollateral(address(wgauge), collId, collSize);\n', '      wgauge.burn(collId, collSize);\n', '    }\n', '\n', '    // 1. Ensure approve 3 underlying tokens\n', '    ensureApproveN(lp, 3);\n', '\n', '    // 2. Get user input amounts\n', '    for (uint i = 0; i < 3; i++) doTransmit(tokens[i], amtsUser[i]);\n', '    doTransmit(lp, amtLPUser);\n', '\n', '    // 3. Borrow specified amounts\n', '    for (uint i = 0; i < 3; i++) doBorrow(tokens[i], amtsBorrow[i]);\n', '    doBorrow(lp, amtLPBorrow);\n', '\n', '    // 4. add liquidity\n', '    uint[3] memory suppliedAmts;\n', '    for (uint i = 0; i < 3; i++) {\n', '      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\n', '    }\n', '    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0) {\n', '      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\n', '    }\n', '\n', '    // 5. put collateral\n', '    ensureApprove(lp, address(wgauge));\n', '    {\n', '      uint amount = IERC20(lp).balanceOf(address(this));\n', '      uint id = wgauge.mint(pid, gid, amount);\n', '      bank.putCollateral(address(wgauge), id, amount);\n', '    }\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 3; i++) doRefund(tokens[i]);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', '  /// @dev Add liquidity to Curve pool with 4 underlying tokens, with staking to Curve gauge\n', '  /// @param lp LP token for the pool\n', '  /// @param amtsUser Supplied underlying token amounts\n', '  /// @param amtLPUser Supplied LP token amount\n', '  /// @param amtsBorrow Borrow underlying token amounts\n', '  /// @param amtLPBorrow Borrow LP token amount\n', '  /// @param minLPMint Desired LP token amount (slippage control)\n', '  /// @param pid CUrve pool id for the pool\n', '  /// @param gid Curve gauge id for the pool\n', '  function addLiquidity4(\n', '    address lp,\n', '    uint[4] calldata amtsUser,\n', '    uint amtLPUser,\n', '    uint[4] calldata amtsBorrow,\n', '    uint amtLPBorrow,\n', '    uint minLPMint,\n', '    uint pid,\n', '    uint gid\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', "    require(ulTokens[lp].length == 4, 'incorrect pool length');\n", "    require(wgauge.getUnderlyingTokenFromIds(pid, gid) == lp, 'incorrect underlying');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. Take out collateral\n', '    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\n', '    if (collSize > 0) {\n', '      (uint decodedPid, uint decodedGid, ) = wgauge.decodeId(collId);\n', "      require(decodedPid == pid && decodedGid == gid, 'incorrect coll id');\n", "      require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '      bank.takeCollateral(address(wgauge), collId, collSize);\n', '      wgauge.burn(collId, collSize);\n', '    }\n', '\n', '    // 1. Ensure approve 4 underlying tokens\n', '    ensureApproveN(lp, 4);\n', '\n', '    // 2. Get user input amounts\n', '    for (uint i = 0; i < 4; i++) doTransmit(tokens[i], amtsUser[i]);\n', '    doTransmit(lp, amtLPUser);\n', '\n', '    // 3. Borrow specified amounts\n', '    for (uint i = 0; i < 4; i++) doBorrow(tokens[i], amtsBorrow[i]);\n', '    doBorrow(lp, amtLPBorrow);\n', '\n', '    // 4. add liquidity\n', '    uint[4] memory suppliedAmts;\n', '    for (uint i = 0; i < 4; i++) {\n', '      suppliedAmts[i] = IERC20(tokens[i]).balanceOf(address(this));\n', '    }\n', '    if (suppliedAmts[0] > 0 || suppliedAmts[1] > 0 || suppliedAmts[2] > 0 || suppliedAmts[3] > 0) {\n', '      ICurvePool(pool).add_liquidity(suppliedAmts, minLPMint);\n', '    }\n', '\n', '    // 5. Put collateral\n', '    ensureApprove(lp, address(wgauge));\n', '    {\n', '      uint amount = IERC20(lp).balanceOf(address(this));\n', '      uint id = wgauge.mint(pid, gid, amount);\n', '      bank.putCollateral(address(wgauge), id, amount);\n', '    }\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 4; i++) doRefund(tokens[i]);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', '  /// @dev Remove liquidity from Curve pool with 2 underlying tokens\n', '  /// @param lp LP token for the pool\n', '  /// @param amtLPTake Take out LP token amount (from Homora)\n', '  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\n', '  /// @param amtsRepay Repay underlying token amounts\n', '  /// @param amtLPRepay Repay LP token amount\n', '  /// @param amtsMin Desired underlying token amounts (slippage control)\n', '  function removeLiquidity2(\n', '    address lp,\n', '    uint amtLPTake,\n', '    uint amtLPWithdraw,\n', '    uint[2] calldata amtsRepay,\n', '    uint amtLPRepay,\n', '    uint[2] calldata amtsMin\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', '    uint positionId = bank.POSITION_ID();\n', '    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\n', "    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\n", "    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. Ensure approve\n', '    ensureApproveN(lp, 2);\n', '\n', '    // 1. Compute repay amount if MAX_INT is supplied (max debt)\n', '    uint[2] memory actualAmtsRepay;\n', '    for (uint i = 0; i < 2; i++) {\n', '      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\n', '        ? bank.borrowBalanceCurrent(positionId, tokens[i])\n', '        : amtsRepay[i];\n', '    }\n', '    uint[2] memory amtsDesired;\n', '    for (uint i = 0; i < 2; i++) {\n', '      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\n', '    }\n', '\n', '    // 2. Take out collateral\n', '    bank.takeCollateral(address(wgauge), collId, amtLPTake);\n', '    wgauge.burn(collId, amtLPTake);\n', '\n', '    // 3. Compute amount to actually remove. Remove to repay just enough\n', '    uint amtLPToRemove;\n', '    if (amtsDesired[0] > 0 || amtsDesired[1] > 0) {\n', '      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\n', '    }\n', '\n', '    // 4. Compute leftover amount to remove. Remove balancedly.\n', '    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '    if (amtLPToRemove > 0) {\n', '      uint[2] memory mins;\n', '      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\n', '    }\n', '    // 5. Repay\n', '    for (uint i = 0; i < 2; i++) {\n', '      doRepay(tokens[i], actualAmtsRepay[i]);\n', '    }\n', '    doRepay(lp, amtLPRepay);\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 2; i++) {\n', '      doRefund(tokens[i]);\n', '    }\n', '    doRefund(lp);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', '  /// @dev Remove liquidity from Curve pool with 3 underlying tokens\n', '  /// @param lp LP token for the pool\n', '  /// @param amtLPTake Take out LP token amount (from Homora)\n', '  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\n', '  /// @param amtsRepay Repay underlying token amounts\n', '  /// @param amtLPRepay Repay LP token amount\n', '  /// @param amtsMin Desired underlying token amounts (slippage control)\n', '  function removeLiquidity3(\n', '    address lp,\n', '    uint amtLPTake,\n', '    uint amtLPWithdraw,\n', '    uint[3] calldata amtsRepay,\n', '    uint amtLPRepay,\n', '    uint[3] calldata amtsMin\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', '    uint positionId = bank.POSITION_ID();\n', '    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\n', "    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\n", "    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. Ensure approve\n', '    ensureApproveN(lp, 3);\n', '\n', '    // 1. Compute repay amount if MAX_INT is supplied (max debt)\n', '    uint[3] memory actualAmtsRepay;\n', '    for (uint i = 0; i < 3; i++) {\n', '      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\n', '        ? bank.borrowBalanceCurrent(positionId, tokens[i])\n', '        : amtsRepay[i];\n', '    }\n', '    uint[3] memory amtsDesired;\n', '    for (uint i = 0; i < 3; i++) {\n', '      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\n', '    }\n', '\n', '    // 2. Take out collateral\n', '    bank.takeCollateral(address(wgauge), collId, amtLPTake);\n', '    wgauge.burn(collId, amtLPTake);\n', '\n', '    // 3. Compute amount to actually remove. Remove to repay just enough\n', '    uint amtLPToRemove;\n', '    if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0) {\n', '      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\n', '    }\n', '\n', '    // 4. Compute leftover amount to remove. Remove balancedly.\n', '    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '    if (amtLPToRemove > 0) {\n', '      uint[3] memory mins;\n', '      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\n', '    }\n', '\n', '    // 5. Repay\n', '    for (uint i = 0; i < 3; i++) {\n', '      doRepay(tokens[i], actualAmtsRepay[i]);\n', '    }\n', '    doRepay(lp, amtLPRepay);\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 3; i++) {\n', '      doRefund(tokens[i]);\n', '    }\n', '    doRefund(lp);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', '  /// @dev Remove liquidity from Curve pool with 4 underlying tokens\n', '  /// @param lp LP token for the pool\n', '  /// @param amtLPTake Take out LP token amount (from Homora)\n', '  /// @param amtLPWithdraw Withdraw LP token amount (back to caller)\n', '  /// @param amtsRepay Repay underlying token amounts\n', '  /// @param amtLPRepay Repay LP token amount\n', '  /// @param amtsMin Desired underlying token amounts (slippage control)\n', '  function removeLiquidity4(\n', '    address lp,\n', '    uint amtLPTake,\n', '    uint amtLPWithdraw,\n', '    uint[4] calldata amtsRepay,\n', '    uint amtLPRepay,\n', '    uint[4] calldata amtsMin\n', '  ) external {\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", '    address pool = getPool(lp);\n', '    uint positionId = bank.POSITION_ID();\n', '    (, address collToken, uint collId, ) = bank.getPositionInfo(positionId);\n', "    require(IWLiquidityGauge(collToken).getUnderlyingToken(collId) == lp, 'incorrect underlying');\n", "    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '    address[] memory tokens = ulTokens[lp];\n', '\n', '    // 0. Ensure approve\n', '    ensureApproveN(lp, 4);\n', '\n', '    // 1. Compute repay amount if MAX_INT is supplied (max debt)\n', '    uint[4] memory actualAmtsRepay;\n', '    for (uint i = 0; i < 4; i++) {\n', '      actualAmtsRepay[i] = amtsRepay[i] == uint(-1)\n', '        ? bank.borrowBalanceCurrent(positionId, tokens[i])\n', '        : amtsRepay[i];\n', '    }\n', '    uint[4] memory amtsDesired;\n', '    for (uint i = 0; i < 4; i++) {\n', '      amtsDesired[i] = actualAmtsRepay[i].add(amtsMin[i]); // repay amt + slippage control\n', '    }\n', '\n', '    // 2. Take out collateral\n', '    bank.takeCollateral(address(wgauge), collId, amtLPTake);\n', '    wgauge.burn(collId, amtLPTake);\n', '\n', '    // 3. Compute amount to actually remove. Remove to repay just enough\n', '    uint amtLPToRemove;\n', '    if (amtsDesired[0] > 0 || amtsDesired[1] > 0 || amtsDesired[2] > 0 || amtsDesired[3] > 0) {\n', '      amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '      ICurvePool(pool).remove_liquidity_imbalance(amtsDesired, amtLPToRemove);\n', '    }\n', '\n', '    // 4. Compute leftover amount to remove. Remove balancedly.\n', '    amtLPToRemove = IERC20(lp).balanceOf(address(this)).sub(amtLPWithdraw);\n', '    if (amtLPToRemove > 0) {\n', '      uint[4] memory mins;\n', '      ICurvePool(pool).remove_liquidity(amtLPToRemove, mins);\n', '    }\n', '\n', '    // 5. Repay\n', '    for (uint i = 0; i < 4; i++) {\n', '      doRepay(tokens[i], actualAmtsRepay[i]);\n', '    }\n', '    doRepay(lp, amtLPRepay);\n', '\n', '    // 6. Refund\n', '    for (uint i = 0; i < 4; i++) {\n', '      doRefund(tokens[i]);\n', '    }\n', '    doRefund(lp);\n', '\n', '    // 7. Refund crv\n', '    doRefund(crv);\n', '  }\n', '\n', "  /// @dev Harvest CRV reward tokens to in-exec position's owner\n", '  function harvest() external {\n', '    (, address collToken, uint collId, uint collSize) = bank.getCurrentPositionInfo();\n', '    (uint pid, uint gid, ) = wgauge.decodeId(collId);\n', '    address lp = wgauge.getUnderlyingToken(collId);\n', "    require(whitelistedLpTokens[lp], 'lp token not whitelisted');\n", "    require(collToken == address(wgauge), 'collateral token & wgauge mismatched');\n", '\n', '    // 1. Take out collateral\n', '    bank.takeCollateral(address(wgauge), collId, collSize);\n', '    wgauge.burn(collId, collSize);\n', '\n', '    // 2. Put collateral\n', '    uint amount = IERC20(lp).balanceOf(address(this));\n', '    ensureApprove(lp, address(wgauge));\n', '    uint id = wgauge.mint(pid, gid, amount);\n', '    bank.putCollateral(address(wgauge), id, amount);\n', '\n', '    // 3. Refund crv\n', '    doRefund(crv);\n', '  }\n', '}']