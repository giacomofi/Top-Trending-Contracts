['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-22\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'contract DeriVoteWithPayment {\n', '\n', '    event Vote(address indexed voter, uint256 votingId, uint256 optionId, uint256 amount);\n', '\n', "    string public constant name = 'DeriVote';\n", '\n', '    address public controller;\n', '\n', '    // current voting id\n', '    uint256 public votingId;\n', '    // current voting name\n', '    string  public votingName;\n', '    // number of options for current voting\n', '    uint256 public numOptions;\n', '    // current vote deadline\n', '    uint256 public votingDeadline;\n', '\n', '    // voting topics, votingId => topic\n', '    mapping (uint256 => string) public votingTopics;\n', '\n', '    // current voting token, voters spend token to vote\n', '    // the amount of token transferred to this contract is the amount of this vote\n', '    address public votingToken;\n', '    // current voting token receipient, must be intailized during initializeVote\n', '    // this receipient cannot be changed for a specific vote\n', '    address public votingTokenReceipient;\n', '\n', '    // votings for options, votingId => optionId => votes\n', '    mapping (uint256 => mapping (uint256 => uint256)) public votingsForOptions;\n', '\n', '    modifier _controller_() {\n', "        require(msg.sender == controller, 'DeriVote2: only controller');\n", '        _;\n', '    }\n', '\n', '    constructor () {\n', '        controller = msg.sender;\n', '    }\n', '\n', '    function setController(address newController) public _controller_ {\n', '        controller = newController;\n', '    }\n', '\n', '    function initializeVote(\n', '        string  memory _votingName,\n', '        string  memory _topic,\n', '        uint256 _numOptions,\n', '        uint256 _votingDeadline,\n', '        address _votingToken,\n', '        address _votingTokenReceipient\n', '    ) public _controller_ {\n', "        require(block.timestamp >= votingDeadline, 'DeriVote2: still in vote');\n", "        require(block.timestamp < _votingDeadline, 'DeriVote2: invalid deadline');\n", '        require(\n', '            votingToken == address(0) || IERC20(votingToken).balanceOf(address(this)) == 0,\n', "            'DeriVote2: remain untransferred voting tokens'\n", '        );\n', '\n', '        votingId += 1;\n', '        votingName = _votingName;\n', '        numOptions = _numOptions;\n', '        votingDeadline = _votingDeadline;\n', '        votingToken = _votingToken;\n', '        votingTokenReceipient = _votingTokenReceipient;\n', '        votingTopics[votingId] = _topic;\n', '    }\n', '\n', '    // finalize vote, transfers voting token from this contract to predefined receipient\n', '    function finalizeVote() public {\n', "        require(block.timestamp >= votingDeadline, 'DeriVote2: still in vote');\n", '        if (votingToken != address(0)) {\n', '            uint256 balance = IERC20(votingToken).balanceOf(address(this));\n', '            if (balance != 0) {\n', '                IERC20(votingToken).transfer(votingTokenReceipient, balance);\n', '            }\n', '        }\n', '    }\n', '\n', '    function vote(uint256 optionId, uint256 amount) public {\n', "        require(block.timestamp < votingDeadline, 'DeriVote2.vote: voting ended');\n", "        require(optionId < numOptions, 'DeriVote2.vote: invalid voting optionId');\n", '\n', '        IERC20(votingToken).transferFrom(msg.sender, address(this), amount);\n', '        votingsForOptions[votingId][optionId] += amount;\n', '\n', '        emit Vote(msg.sender, votingId, optionId, amount);\n', '    }\n', '\n', '}\n', '\n', '\n', 'interface IERC20 {\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address to, uint256 amount) external;\n', '    function transferFrom(address from, address to, uint256 amount) external;\n', '}']