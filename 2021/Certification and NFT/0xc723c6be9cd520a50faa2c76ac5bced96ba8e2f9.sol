['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-19\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage)\n', '        internal\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'abstract contract Pausable is Context {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor () {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', 'interface IPLUGV1 {\n', '    function upgradePlug(uint256 nextLevelCap) external;\n', '    function chargePlug(uint256 amount) external;\n', '    function dischargePlug(uint256 plugPercentage) external;\n', '    function rebalancePlug() external;\n', '    function tokenWant() external view returns(address);\n', '    function tokenStrategy() external view returns(address);\n', '    function tokenReward() external view returns(address);\n', '}\n', '\n', '\n', 'abstract contract IdleYield {\n', '    function mintIdleToken(uint256 amount, bool skipRebalance, address referral) external virtual returns(uint256);\n', '    function redeemIdleToken(uint256 amount) external virtual returns(uint256);\n', '    function balanceOf(address user) external virtual returns(uint256);\n', '    function tokenPrice() external virtual view returns(uint256);\n', '    function userAvgPrices(address user) external virtual view returns(uint256);\n', '    function fee() external virtual view returns(uint256);\n', '}\n', '\n', 'contract PLUGIDLEV1 is IPLUGV1, Ownable, Pausable {\n', '    \n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    uint256 private constant ONE_18 = 10**18;\n', '    uint256 private constant FULL_ALLOC = 100000;\n', '    \n', '    address public constant override tokenWant = address(0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48); // USDC\n', '    address public constant override tokenStrategy = address(0x5274891bEC421B39D23760c04A6755eCB444797C); // IDLEUSDC\n', '    address public override tokenReward = address(0x20a68F9e34076b2dc15ce726d7eEbB83b694702d); // ISLA\n', '    IdleYield strategy = IdleYield(tokenStrategy);\n', '    IERC20 iTokenWant = IERC20(tokenWant);\n', '    \n', '    // addresses to send interests generated\n', '    address public rewardOutOne;\n', '    address public rewardOutTwo;\n', '    // it should be used only when plug balance has to move to another plug\n', '    address public plugHelper;\n', '    \n', '    // Plug parameter\n', '    uint256 public currentLevelCap = uint256(150000).mul(ONE_18); // 150K token want\n', '    uint256 public plugLimit = uint256(50000).mul(ONE_18); // 50K plug limit\n', '    uint256 public plugLevel;\n', '    mapping (address => uint256) public tokenStrategyAmounts;\n', '    mapping (address => uint256) public tokenWantAmounts;\n', '    mapping (address => uint256) public tokenWantDonated;\n', '    uint256 public usersTokenWant;\n', '    uint256 public lastRebalanceTs;\n', '    uint256 twInStrategyLastRebalance;\n', '    uint256 public rebalancePeriod = 3 days;\n', '    uint256 public rewardRate = ONE_18;\n', '\n', '    event PlugCharged(address user, uint256 amount, uint256 amountMinted);\n', '    event PlugDischarged(address user, uint256 userAmount, uint256 rewardForUSer, uint256 rewardForPlug);\n', '    event SentRewardToOutOne(address token, uint256 amount);\n', '    event SentRewardToOutTwo(address token, uint256 amount);\n', '    event Rebalance(uint256 amountEarned);\n', '\n', '    constructor() {\n', '        iTokenWant.approve(tokenStrategy, uint256(-1));\n', '    }\n', '\n', '    /**\n', '     * Charge plug staking token want into idle.\n', '     */\n', '    function chargePlug(uint256 _amount) external override whenNotPaused() {\n', '        usersTokenWant = usersTokenWant.add(_amount);\n', '        require(usersTokenWant < plugLimit);\n', '        iTokenWant.safeTransferFrom(msg.sender, address(this), _amount);\n', '        require(_getPlugBalance(tokenWant) >= _amount);\n', '        uint256 amountMinted = strategy.mintIdleToken(_amount, true, address(0));\n', '        \n', '        tokenStrategyAmounts[msg.sender] = tokenStrategyAmounts[msg.sender].add(amountMinted);\n', '        tokenWantAmounts[msg.sender] = tokenWantAmounts[msg.sender].add(_amount);\n', '        emit PlugCharged(msg.sender, _amount, amountMinted);\n', '    }\n', '    \n', '    /**\n', '     * Discharge plug withdrawing all token staked into idle\n', '     * Choose the percentage to donate into the plug (0, 50, 100)\n', '     * If there is any reward active it will be send respecting the actual reward rate\n', '     */\n', '    function dischargePlug(uint256 _plugPercentage) external override whenNotPaused() {\n', '        _dischargePlug(_plugPercentage);\n', '    }\n', '    \n', '    /**\n', '     * Internal function to discharge plug\n', '     */\n', '    function _dischargePlug(uint256 _plugPercentage) internal {\n', '        require(_plugPercentage == 0 || _plugPercentage == 50 || _plugPercentage == 100);\n', '        uint256 userAmount = tokenWantAmounts[msg.sender];\n', '        require(userAmount > 0);\n', '\n', '        // transfer token want from IDLE to plug\n', '        uint256 amountRedeemed = strategy.redeemIdleToken(tokenStrategyAmounts[msg.sender]);\n', '        usersTokenWant = usersTokenWant.sub(userAmount); \n', '\n', '        // token want earned\n', '        uint256 tokenEarned;\n', '        uint256 rewardForUser;\n', '        uint256 rewardForPlug;\n', '        uint256 amountToDischarge;\n', '\n', '        // it should be always greater, added for safe\n', '        if (amountRedeemed <= userAmount) {\n', '            tokenEarned = 0;\n', '            userAmount = amountRedeemed;\n', '        } else {\n', '            tokenEarned = amountRedeemed.sub(userAmount);\n', '            rewardForUser = tokenEarned; \n', '        }\n', '        \n', '        // calculate token earned percentage to donate into plug \n', '        if (_plugPercentage > 0 && tokenEarned > 0) {\n', '            rewardForPlug = tokenEarned;\n', '            rewardForUser = 0;\n', '            if (_plugPercentage == 50) {\n', '                rewardForPlug = rewardForPlug.div(2);\n', '                rewardForUser = tokenEarned.sub(rewardForPlug);\n', '            }\n', '            uint256 rewardLeft = _getPlugBalance(tokenReward);\n', '            if (rewardLeft > 0) {\n', '                uint256 rewardWithRate = rewardForPlug.mul(rewardRate).div(ONE_18);\n', '                _sendReward(rewardLeft, rewardWithRate); \n', '            }\n', '            tokenWantDonated[msg.sender] = tokenWantDonated[msg.sender].add(rewardForPlug);\n', '        }\n', '\n', '        // transfer tokenWant userAmount to user\n', '        amountToDischarge = userAmount.add(rewardForUser);\n', '        _dischargeUser(amountToDischarge);\n', '        emit PlugDischarged(msg.sender, userAmount, rewardForUser, rewardForPlug);\n', '    }\n', '\n', '    /**\n', '     * Sending all token want owned by an user.\n', '     */\n', '    function _dischargeUser(uint256 _amount) internal {\n', '        _sendTokenWant(_amount);\n', '        tokenWantAmounts[msg.sender] = 0;\n', '        tokenStrategyAmounts[msg.sender] = 0;\n', '    }\n', '\n', '    /**\n', '     * Send token want to msg.sender.\n', '     */\n', '    function _sendTokenWant(uint256 _amount) internal {\n', '        iTokenWant.safeTransfer(msg.sender, _amount); \n', '    }\n', '\n', '    /**\n', '     * Send token reward to users,\n', '     */\n', '    function _sendReward(uint256 _rewardLeft, uint256 _rewardWithRate) internal {\n', '        if (_rewardLeft >= _rewardWithRate) {\n', '            IERC20(tokenReward).safeTransfer(msg.sender, _rewardWithRate); \n', '        } else {\n', '            IERC20(tokenReward).safeTransfer(msg.sender, _rewardLeft); \n', '        } \n', '    }\n', '    \n', '    /**\n', '     * Rebalance plug every rebalance period.\n', '     */\n', '    function rebalancePlug() external override whenNotPaused() {\n', '        _rebalancePlug();\n', '    }\n', '    \n', '    /**\n', '     * Internsal function for rebalance.\n', '     */\n', '    function _rebalancePlug() internal {\n', '        require(lastRebalanceTs.add(rebalancePeriod) < block.timestamp);\n', '        lastRebalanceTs = block.timestamp;\n', '        \n', '        uint256 twPlug = iTokenWant.balanceOf(address(this));\n', '        \n', '        uint256 twInStrategy;\n', '        uint256 teInStrategy;\n', '        uint256 teByPlug;\n', '        \n', '        // reinvest token want to strategy\n', '        if (plugLevel == 0) {\n', '            _rebalanceAtLevel0(twPlug);\n', '        } else {\n', '            twInStrategy = _getTokenWantInS();\n', '            teInStrategy = twInStrategy.sub(twInStrategyLastRebalance);\n', '            teByPlug = twPlug.add(teInStrategy);\n', '            if (plugLevel == 1) {\n', '                _rebalanceAtLevel1Plus(teByPlug.div(2));\n', '            } else {\n', '                _rebalanceAtLevel1Plus(teByPlug.div(3));\n', '            }\n', '        }\n', '        twInStrategyLastRebalance = _getTokenWantInS();\n', '    }\n', '    \n', '    /**\n', '     * Rebalance plug at level 0\n', '     * Mint all tokens want owned by plug to idle pool \n', '     */\n', '    function _rebalanceAtLevel0(uint256 _amount) internal {\n', '        uint256 mintedTokens = strategy.mintIdleToken(_amount, true, address(0));\n', '        tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].add(mintedTokens); \n', '    }\n', '    \n', '    /**\n', '     * Rebalance plug at level1+.\n', '     * level1 -> 50% remain into plug and 50% send to reward1\n', '     * level2+ -> 33.3% to plug 33.3% to reward1 and 33.3% to reward2\n', '     */\n', '    function _rebalanceAtLevel1Plus(uint256 _amount) internal {\n', '        uint256 plugAmount = _getPlugBalance(tokenWant);\n', '        uint256 amountToSend = _amount;\n', '        \n', '        if (plugLevel > 1) {\n', '            amountToSend = amountToSend.mul(2);\n', '        }\n', '        \n', '        if (plugAmount < amountToSend) {\n', '            uint256 amountToRetrieveFromS = amountToSend.sub(plugAmount);\n', '            uint256 amountToRedeem = amountToRetrieveFromS.div(_getRedeemPrice()).mul(ONE_18);\n', '            strategy.redeemIdleToken(amountToRedeem);\n', '            tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].sub(amountToRedeem);\n', '        }\n', '        \n', '        // send to reward out 1\n', '        _transferToOutside(tokenWant, rewardOutOne, _amount);\n', '        \n', '        if (plugLevel > 1) {\n', '            _transferToOutside(tokenWant, rewardOutTwo, _amount);\n', '        }\n', '        \n', '        //send all remain token want from plug to idle strategy\n', '        uint256 balanceLeft = plugAmount.sub(amountToSend);\n', '        if (balanceLeft > 0) {\n', '            _rebalanceAtLevel0(balanceLeft);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Upgrade plug to the next level.\n', '     */\n', '    function upgradePlug(uint256 _nextLevelCap) external override onlyOwner {\n', '        require(_nextLevelCap > currentLevelCap && plugTotalAmount() > currentLevelCap);\n', '        require(rewardOutOne != address(0));\n', '        if (plugLevel >= 1) {\n', '            require(rewardOutTwo != address(0));\n', '            require(plugHelper != address(0));\n', '        }\n', '        plugLevel = plugLevel + 1;\n', '        currentLevelCap = _nextLevelCap;\n', '    }\n', '    \n', '    /**\n', '     * Redeem all token owned by plug from idle strategy.\n', '     */\n', '    function safePlugExitStrategy(uint256 _amount) external onlyOwner {\n', '        strategy.redeemIdleToken(_amount);\n', '        tokenStrategyAmounts[address(this)] = tokenStrategyAmounts[address(this)].sub(_amount);\n', '        twInStrategyLastRebalance = _getTokenWantInS();\n', '    }\n', '    \n', '    /**\n', '     * Transfer token want to factory.\n', '     */\n', '    function transferToHelper() external onlyOwner {\n', '        require(plugHelper != address(0));\n', '        uint256 amount = iTokenWant.balanceOf(address(this));\n', '        _transferToOutside(tokenWant, plugHelper, amount);\n', '    }\n', '    \n', '    /**\n', '     * Transfer token different than token strategy to external allowed address (ex IDLE, COMP, ecc).\n', '     */\n', '    function transferToRewardOut(address _token, address _rewardOut) external onlyOwner {\n', '        require(_token != address(0) && _rewardOut != address(0));\n', '        require(_rewardOut == rewardOutOne || _rewardOut == rewardOutTwo);\n', '        // it prevents to tranfer idle tokens outside\n', '        require(_token != tokenStrategy);\n', '        uint256 amount = IERC20(_token).balanceOf(address(this));\n', '        _transferToOutside(_token, _rewardOut, amount);\n', '    }\n', '    \n', '    /**\n', '     * Transfer any token to external address.\n', '     */\n', '    function _transferToOutside(address _token, address _outside, uint256 _amount) internal {\n', '      IERC20(_token).safeTransfer(_outside, _amount);  \n', '    }\n', '\n', '    /**\n', '     * Approve token to spender.\n', '     */\n', '    function safeTokenApprore(address _token, address _spender, uint256 _amount) external onlyOwner {\n', '        IERC20(_token).approve(_spender, _amount);\n', '    }\n', '    \n', '    /**\n', '     * Set the current level cap.\n', '     */\n', '    function setCurrentLevelCap(uint256 _newCap) external onlyOwner {\n', '        require(_newCap > plugTotalAmount());\n', '        currentLevelCap = _newCap;\n', '    }\n', '    \n', '    /**\n', '     * Set a new token reward.\n', '     */\n', '    function setTokenReward(address _tokenReward) external onlyOwner {\n', '        tokenReward = _tokenReward;\n', '    }\n', '\n', '    /**\n', '     * Set the new reward rate in decimals (18).\n', '     */\n', '    function setRewardRate(uint256 _rate) external onlyOwner {\n', '        rewardRate = _rate;\n', '    }\n', '    \n', '    /**\n', '     * Set the first reward pool address.\n', '     */\n', '    function setRewardOutOne(address _reward) external onlyOwner {\n', '        rewardOutOne = _reward;\n', '    }\n', '    \n', '    /**\n', '     * Set the second reward pool address.\n', '     */\n', '    function setRewardOutTwo(address _reward) external onlyOwner {\n', '        rewardOutTwo = _reward;\n', '    }\n', '    \n', '    /**\n', '     * Set the plug helper address.\n', '     */\n', '    function setPlugHelper(address _plugHelper) external onlyOwner {\n', '        plugHelper = _plugHelper;\n', '    }\n', '    \n', '    /**\n', '     * Set the new rebalance period duration.\n', '     */ \n', '    function setRebalancePeriod(uint256 _newPeriod) external onlyOwner {\n', '        // at least 12 hours (60 * 60 * 12)\n', '        require(_newPeriod >= 43200);\n', '        rebalancePeriod = _newPeriod;\n', '    }\n', '\n', '    /**\n', '     * Set the new plug cap for token want to store in it.\n', '     */ \n', '    function setPlugUsersLimit(uint256 _newLimit) external onlyOwner {\n', '        require(_newLimit > plugLimit);\n', '        plugLimit = _newLimit;\n', '    }\n', '\n', '    /**\n', '     * Get the current reedem price.\n', '     * @notice function helper for retrieving the idle token price counting fees, developed by @emilianobonassi\n', '     * https://github.com/emilianobonassi/idle-token-helper\n', '     */\n', '    function _getRedeemPrice() view internal returns (uint256 redeemPrice) {\n', '        uint256 userAvgPrice = strategy.userAvgPrices(address(this));\n', '        uint256 currentPrice = strategy.tokenPrice();\n', '\n', '        // When no deposits userAvgPrice is 0 equiv currentPrice\n', '        // and in the case of issues\n', '        if (userAvgPrice == 0 || currentPrice < userAvgPrice) {\n', '            redeemPrice = currentPrice;\n', '        } else {\n', '            uint256 fee = strategy.fee();\n', '\n', '            redeemPrice = ((currentPrice.mul(FULL_ALLOC))\n', '                .sub(\n', '                    fee.mul(\n', '                         currentPrice.sub(userAvgPrice)\n', '                    )\n', '                )).div(FULL_ALLOC);\n', '        }\n', '\n', '        return redeemPrice;\n', '    }\n', '\n', '    /**\n', '     * Get the plug balance of a token.\n', '     */\n', '    function _getPlugBalance(address _token) internal view returns(uint256) {\n', '        return IERC20(_token).balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * Get the plug balance of token want into idle strategy.\n', '     */\n', '    function _getTokenWantInS() internal view returns (uint256) {\n', '        uint256 tokenPrice = _getRedeemPrice();\n', '        return tokenStrategyAmounts[address(this)].mul(tokenPrice).div(ONE_18);\n', '    }\n', '\n', '    /**\n', '     * Get the plug total amount between the ineer and the amount store into idle.\n', '     */\n', '    function plugTotalAmount() public view returns(uint256) {\n', '        uint256 tokenWantInStrategy = _getTokenWantInS();\n', '        return iTokenWant.balanceOf(address(this)).add(tokenWantInStrategy);\n', '    }\n', '}']