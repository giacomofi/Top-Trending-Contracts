['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-06\n', '*/\n', '\n', '// File: contracts/lib/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/lib/interfaces/IUniswapV2Factory.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IUniswapV2Factory {\n', '    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n', '\n', '    function feeTo() external view returns (address);\n', '    function feeToSetter() external view returns (address);\n', '\n', '    function getPair(address tokenA, address tokenB) external view returns (address pair);\n', '    function allPairs(uint) external view returns (address pair);\n', '    function allPairsLength() external view returns (uint);\n', '\n', '    function createPair(address tokenA, address tokenB) external returns (address pair);\n', '\n', '    function setFeeTo(address) external;\n', '    function setFeeToSetter(address) external;\n', '}\n', '\n', '// File: contracts/lib/interfaces/IUniswapV2Pair.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '// File: contracts/lib/utils/Babylonian.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '// computes square roots using the babylonian method\n', '// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\n', 'library Babylonian {\n', '    function sqrt(uint y) internal pure returns (uint z) {\n', '        if (y > 3) {\n', '            z = y;\n', '            uint x = y / 2 + 1;\n', '            while (x < z) {\n', '                z = x;\n', '                x = (y / x + x) / 2;\n', '            }\n', '        } else if (y != 0) {\n', '            z = 1;\n', '        }\n', '        // else z = 0\n', '    }\n', '}\n', '\n', '// File: contracts/lib/utils/FixedPoint.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n', 'library FixedPoint {\n', '    // range: [0, 2**112 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq112x112 {\n', '        uint224 _x;\n', '    }\n', '\n', '    // range: [0, 2**144 - 1]\n', '    // resolution: 1 / 2**112\n', '    struct uq144x112 {\n', '        uint _x;\n', '    }\n', '\n', '    uint8 private constant RESOLUTION = 112;\n', '    uint private constant Q112 = uint(1) << RESOLUTION;\n', '    uint private constant Q224 = Q112 << RESOLUTION;\n', '\n', '    // encode a uint112 as a UQ112x112\n', '    function encode(uint112 x) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(x) << RESOLUTION);\n', '    }\n', '\n', '    // encodes a uint144 as a UQ144x112\n', '    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\n', '        return uq144x112(uint256(x) << RESOLUTION);\n', '    }\n', '\n', '    // divide a UQ112x112 by a uint112, returning a UQ112x112\n', '    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\n', "        require(x != 0, 'FixedPoint: DIV_BY_ZERO');\n", '        return uq112x112(self._x / uint224(x));\n', '    }\n', '\n', '    // multiply a UQ112x112 by a uint, returning a UQ144x112\n', '    // reverts on overflow\n', '    function mul(uq112x112 memory self, uint y) internal pure returns (uq144x112 memory) {\n', '        uint z;\n', '        require(y == 0 || (z = uint(self._x) * y) / y == uint(self._x), "FixedPoint: MULTIPLICATION_OVERFLOW");\n', '        return uq144x112(z);\n', '    }\n', '\n', '    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\n', '    // equivalent to encode(numerator).div(denominator)\n', '    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\n', '        require(denominator > 0, "FixedPoint: DIV_BY_ZERO");\n', '        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\n', '    }\n', '\n', '    // decode a UQ112x112 into a uint112 by truncating after the radix point\n', '    function decode(uq112x112 memory self) internal pure returns (uint112) {\n', '        return uint112(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // decode a UQ144x112 into a uint144 by truncating after the radix point\n', '    function decode144(uq144x112 memory self) internal pure returns (uint144) {\n', '        return uint144(self._x >> RESOLUTION);\n', '    }\n', '\n', '    // take the reciprocal of a UQ112x112\n', '    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', "        require(self._x != 0, 'FixedPoint: ZERO_RECIPROCAL');\n", '        return uq112x112(uint224(Q224 / self._x));\n', '    }\n', '\n', '    // square root of a UQ112x112\n', '    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n', '        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\n', '    }\n', '}\n', '\n', '// File: contracts/lib/oracle/UniswapV2OracleLibrary.sol\n', '\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', '\n', '\n', '\n', '// library with helper methods for oracles that are concerned with computing average prices\n', 'library UniswapV2OracleLibrary {\n', '    using FixedPoint for *;\n', '\n', '    // helper function that returns the current block timestamp within the range of uint32, i.e. [0, 2**32 - 1]\n', '    function currentBlockTimestamp() internal view returns (uint32) {\n', '        return uint32(block.timestamp % 2 ** 32);\n', '    }\n', '\n', '    // produces the cumulative price using counterfactuals to save gas and avoid a call to sync.\n', '    function currentCumulativePrices(\n', '        address pair\n', '    ) internal view returns (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) {\n', '        blockTimestamp = currentBlockTimestamp();\n', '        price0Cumulative = IUniswapV2Pair(pair).price0CumulativeLast();\n', '        price1Cumulative = IUniswapV2Pair(pair).price1CumulativeLast();\n', '\n', '        // if time has elapsed since the last update on the pair, mock the accumulated price values\n', '        (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast) = IUniswapV2Pair(pair).getReserves();\n', '        if (blockTimestampLast != blockTimestamp) {\n', '            // subtraction overflow is desired\n', '            uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n', '            // addition overflow is desired\n', '            // counterfactual\n', '            price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n', '            // counterfactual\n', '            price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/lib/oracle/AggregatorV3Interface.sol\n', '\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorV3Interface {\n', '\n', '  function decimals() external view returns (uint8);\n', '  function description() external view returns (string memory);\n', '  function version() external view returns (uint256);\n', '\n', '  // getRoundData and latestRoundData should both raise "No data present"\n', '  // if they do not have data to report, instead of returning unset values\n', '  // which could be misinterpreted as actual reported values.\n', '  function getRoundData(uint80 _roundId)\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '  function latestRoundData()\n', '    external\n', '    view\n', '    returns (\n', '      uint80 roundId,\n', '      int256 answer,\n', '      uint256 startedAt,\n', '      uint256 updatedAt,\n', '      uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '// File: contracts/Oracle_pWING_chainlink.sol\n', '\n', 'pragma solidity >=0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/* \n', '*  This will be used with sushi pWING/ETH to get pWING/USDC price.\n', '*  It will use a TWAP of 1 hr and chainlink sport price to determine of there is recent\n', '*  change in price.  It chooses the lower price between spot and twap. \n', '*/\n', 'contract oracle_pWING_USD {\n', '    using SafeMath for uint256;\n', '    using FixedPoint for *;\n', '\n', '    uint public constant HOURLY = 1 hours;  // 1 hour price updates\n', '\n', '    uint PERIOD; //not used but needed for interface requirments since some oneTokens call update period\n', '\n', '    struct UniswapPair {\n', '        IUniswapV2Pair pair;\n', '        address token0;\n', '        address token1;\n', '        uint price0CumulativeLast;\n', '        uint price1CumulativeLast;\n', '        uint32 blockTimestampLast;\n', '        FixedPoint.uq112x112 price0Average;\n', '        FixedPoint.uq112x112 price1Average;\n', '        uint PERIOD;\n', '    }\n', '\n', '    uint constant numUniswapPairs = 2;\n', '    mapping (uint => UniswapPair) pairs;\n', '\n', '    enum PairTypes{ pWING_ETH_HOURLY, ETH_USDC_HOURLY }\n', '\n', '    address public pWING; \n', '    address public USDC; \n', '    address public WETH;\n', '\n', '    address public owner;  //oneToken address\n', '    uint256 public outputDecimals;\n', '\n', '    address public spotOracle;\n', '    uint256 public spotOracle_decimals;\n', '\n', '    /*\n', '     *  oneToken - will be the owner of this oracle which can run update\n', '     *  factory - sushi factory - mainnet 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac\n', '     *  pWING - pWING token\n', '     *  USDC - USDC token\n', '     *  WETH - WETH token\n', '     *  chainlink - spotPrice - mainnet 0x134fE0a225Fb8e6683617C13cEB6B3319fB4fb82\n', '     */\n', '    constructor(\n', '        address oneToken, \n', '        address factory, \n', '        address pWING_, \n', '        address USDC_,\n', '        address WETH_, \n', '        uint256 outputDecimals_,\n', '        address spotOracle_) \n', '        public {\n', '\n', '            // spot check price oracle\n', '\n', '            spotOracle = spotOracle_;\n', '            spotOracle_decimals = AggregatorV3Interface(spotOracle)\n', '                .decimals();\n', '\n', '\n', '            IUniswapV2Pair _pair = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(pWING_, WETH_));\n', '            uint112 reserve0;\n', '            uint112 reserve1;\n', '            uint32 blockTimestampLast;\n', '         \n', '            (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n', "            require(reserve0 != 0 && reserve1 != 0, 'oracle_pWING_WETH: NO_RESERVES');\n", '\n', '            pairs[uint(PairTypes.pWING_ETH_HOURLY)] = UniswapPair(\n', '                _pair,\n', '                pWING_,\n', '                WETH_,\n', '                _pair.price0CumulativeLast(),\n', '                _pair.price1CumulativeLast(),\n', '                blockTimestampLast,\n', '                FixedPoint.uq112x112(0),\n', '                FixedPoint.uq112x112(0),\n', '                HOURLY\n', '            );\n', '\n', '            _pair = IUniswapV2Pair(IUniswapV2Factory(factory).getPair(USDC_, WETH_));\n', '            (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n', "            require(reserve0 != 0 && reserve1 != 0, 'oracle_USDC_WETH: NO_RESERVES');\n", '\n', '            pairs[uint(PairTypes.ETH_USDC_HOURLY)] = UniswapPair(\n', '                _pair,\n', '                USDC_,\n', '                WETH_,\n', '                _pair.price0CumulativeLast(),\n', '                _pair.price1CumulativeLast(),\n', '                blockTimestampLast,\n', '                FixedPoint.uq112x112(0),\n', '                FixedPoint.uq112x112(0),\n', '                HOURLY\n', '            );\n', '\n', '            pWING = pWING_;\n', '            USDC = USDC_;\n', '            WETH = WETH_;\n', '            owner = oneToken;\n', '            outputDecimals = outputDecimals_;\n', '           \n', '    }\n', '\n', '    function changeInterval(uint256 period_) external {\n', '        require(msg.sender == owner, "unauthorized");\n', '        PERIOD = period_;\n', '    }\n', '\n', '    function update() external {\n', '        for (uint i = 0; i < numUniswapPairs; i++) {\n', '            (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) =\n', '            UniswapV2OracleLibrary.currentCumulativePrices(address(pairs[i].pair));\n', '            uint32 timeElapsed = blockTimestamp - pairs[i].blockTimestampLast; // overflow is desired\n', '\n', '            if (timeElapsed >= pairs[i].PERIOD || pairs[i].price0Average.mul(1).decode144() == uint(0)) {\n', '                pairs[i].price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - pairs[i].price0CumulativeLast) / timeElapsed));\n', '                pairs[i].price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - pairs[i].price1CumulativeLast) / timeElapsed));\n', '\n', '                pairs[i].price0CumulativeLast = price0Cumulative;\n', '                pairs[i].price1CumulativeLast = price1Cumulative;\n', '                \n', '                pairs[i].blockTimestampLast = blockTimestamp;\n', '            }\n', '        }\n', '    }\n', '\n', '    // note this will always return 0 before update has been called successfully for the first time.\n', '    function consult(uint i, address token, uint amountIn) internal view returns (uint256) {\n', '        uint256 amount;\n', '        if (token == pairs[i].token0) {\n', '            amount = pairs[i].price0Average.mul(amountIn).decode144();\n', '        } else {\n', "            require(token == pairs[i].token1, 'oracle_pWING_USDC: INVALID_TOKEN');\n", '            amount = pairs[i].price1Average.mul(amountIn).decode144();\n', '        }\n', '       return amount;\n', '    }\n', '\n', '    function getHourlyPrice() public view returns (uint256) {\n', '        uint256 pWING_ETH_HOURLY = consult(uint(PairTypes.pWING_ETH_HOURLY),WETH,10**18).div(10 ** 18);\n', '        uint256 ETH_USDC_HOURLY = consult(uint(PairTypes.ETH_USDC_HOURLY),WETH,10**18).mul(10 ** 3);\n', '\n', '        uint256 pWING_USDC_HOURLY = pWING_ETH_HOURLY.mul(ETH_USDC_HOURLY).div(10 ** 9);\n', '\n', '        return pWING_USDC_HOURLY;\n', '\n', '    }\n', '\n', '    function getSpotPrice() public view returns (uint256) {\n', '        (, int256 price, , , ) = AggregatorV3Interface(spotOracle)\n', '            .latestRoundData();\n', '        uint256 price_ = uint256(price);\n', '        if (outputDecimals > spotOracle_decimals) {\n', '            price_ = price_.mul(\n', '                10**(outputDecimals - spotOracle_decimals)\n', '            );\n', '        }\n', '        if (outputDecimals < spotOracle_decimals) {\n', '            price_ = price_.div(\n', '                10**(spotOracle_decimals - outputDecimals)\n', '            );\n', '        }\n', '        return price_;\n', '    }\n', '\n', '    function getLatestPrice() public view returns (uint256) {\n', '        uint256 pWING_USDC_HOURLY = getHourlyPrice(); \n', '        uint256 sport_price = getSpotPrice();\n', '\n', '        if (pWING_USDC_HOURLY < sport_price) return pWING_USDC_HOURLY;\n', '\n', '        return sport_price;\n', '    }\n', '\n', '}']