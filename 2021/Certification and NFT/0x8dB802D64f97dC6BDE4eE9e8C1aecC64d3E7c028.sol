['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-03\n', '*/\n', '\n', '// Sources flattened with hardhat v2.2.0 https://hardhat.org\n', '\n', '// File openzeppelin-solidity/contracts/utils/introspection/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC721/extensions/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC721/extensions/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Enumerable is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the total amount of tokens stored by the contract.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\n', "     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\n", '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\n', '\n', '    /**\n', '     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\n', '     * Use along with {totalSupply} to enumerate all tokens.\n', '     */\n', '    function tokenByIndex(uint256 index) external view returns (uint256);\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev String operations.\n', ' */\n', 'library Strings {\n', '    bytes16 private constant alphabet = "0123456789abcdef";\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n', '     */\n', '    function toString(uint256 value) internal pure returns (string memory) {\n', "        // Inspired by OraclizeAPI's implementation - MIT licence\n", '        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n', '\n', '        if (value == 0) {\n', '            return "0";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 digits;\n', '        while (temp != 0) {\n', '            digits++;\n', '            temp /= 10;\n', '        }\n', '        bytes memory buffer = new bytes(digits);\n', '        while (value != 0) {\n', '            digits -= 1;\n', '            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n', '            value /= 10;\n', '        }\n', '        return string(buffer);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n', '     */\n', '    function toHexString(uint256 value) internal pure returns (string memory) {\n', '        if (value == 0) {\n', '            return "0x00";\n', '        }\n', '        uint256 temp = value;\n', '        uint256 length = 0;\n', '        while (temp != 0) {\n', '            length++;\n', '            temp >>= 8;\n', '        }\n', '        return toHexString(value, length);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n', '     */\n', '    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n', '        bytes memory buffer = new bytes(2 * length + 2);\n', '        buffer[0] = "0";\n', '        buffer[1] = "x";\n', '        for (uint256 i = 2 * length + 1; i > 1; --i) {\n', '            buffer[i] = alphabet[value & 0xf];\n', '            value >>= 4;\n', '        }\n', '        require(value == 0, "Strings: hex length insufficient");\n', '        return string(buffer);\n', '    }\n', '\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/utils/introspection/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n', ' * for the additional interface id that will be supported. For example:\n', ' *\n', ' * ```solidity\n', ' * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', ' *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n', ' * }\n', ' * ```\n', ' *\n', ' * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n', ' */\n', 'abstract contract ERC165 is IERC165 {\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return interfaceId == type(IERC165).interfaceId;\n', '    }\n', '}\n', '\n', '\n', '// File openzeppelin-solidity/contracts/token/ERC721/[email\xa0protected]\n', '\n', '\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n', ' * the Metadata extension, but not including the Enumerable extension, which is available separately as\n', ' * {ERC721Enumerable}.\n', ' */\n', 'contract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n', '    using Address for address;\n', '    using Strings for uint256;\n', '\n', '    // Token name\n', '    string private _name;\n', '\n', '    // Token symbol\n', '    string private _symbol;\n', '\n', '    // Mapping from token ID to owner address\n', '    mapping (uint256 => address) private _owners;\n', '\n', '    // Mapping owner address to token count\n', '    mapping (address => uint256) private _balances;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '\n', '    /**\n', '     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n', '        return interfaceId == type(IERC721).interfaceId\n', '            || interfaceId == type(IERC721Metadata).interfaceId\n', '            || super.supportsInterface(interfaceId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view virtual override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _balances[owner];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n', '        address owner = _owners[tokenId];\n', '        require(owner != address(0), "ERC721: owner query for nonexistent token");\n', '        return owner;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view virtual override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view virtual override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-tokenURI}.\n', '     */\n', '    mapping(uint => string) public uri;\n', '    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n', '        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");\n', '        return uri[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev Base URI for computing {tokenURI}. Empty by default, can be overriden\n', '     * in child contracts.\n', '     */\n', '    function _baseURI() internal view virtual returns (string memory) {\n', '        return "";\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || ERC721.isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n', '        return _owners[tokenId] != address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ERC721.ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || ERC721.isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ERC721.ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[owner] -= 1;\n', '        delete _owners[tokenId];\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ERC721.ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _balances[from] -= 1;\n', '        _balances[to] += 1;\n', '        _owners[tokenId] = to;\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Approve `to` to operate on `tokenId`\n', '     *\n', '     * Emits a {Approval} event.\n', '     */\n', '    function _approve(address to, uint256 tokenId) internal virtual {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (to.isContract()) {\n', '            IERC721Receiver(to).onERC721Received(from, tokenId, _data);\n', '        }\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual { }\n', '}\n', '    \n', '    pragma solidity ^ 0.8.0;\n', '    contract GreenPointLandReserves{\n', '        address THIS = address(this);\n', '        uint $ = 1e18;\n', '        uint genesis;\n', '        Totem public totemNFT;\n', '        ERC20 MVT = ERC20(0x3D46454212c61ECb7b31248047Fa033120B88668);\n', '        ERC20 MDT = ERC20(0x32A087D5fdF8c84eC32554c56727a7C81124544E);\n', '        ERC20 COLOR = ERC20(0xe324C8cF74899461Ef7aD2c3EB952DA7819aabc5);\n', '        Oracle public ORACLE = Oracle(address(0));\n', '        \n', '        address public GLR_nonprofit;\n', '        address public DEV;\n', '        address public oracleTeller;\n', '        uint public GLR_funds;\n', '        uint public devPot;\n', '\n', '        constructor(){\n', '            genesis = block.timestamp;\n', '            nextFloorRaisingTime = genesis + 86400 * 45;\n', '            totemNFT = new Totem("Totem","TOTEM");\n', '            GLR_nonprofit = msg.sender;\n', '            DEV = msg.sender;\n', '            oracleTeller = msg.sender;\n', '        }\n', '\n', '        function shiftOwnership(address addr) public{\n', '            require(msg.sender == GLR_nonprofit);\n', '            GLR_nonprofit = addr;\n', '        }\n', '\n', '        function GLR_pullFunds() public{\n', '            require(msg.sender == GLR_nonprofit && GLR_funds > 0);\n', '            uint cash = GLR_funds;\n', '            GLR_funds = 0;\n', '            (bool success, ) = GLR_nonprofit.call{value:cash}("");\n', '            require(success, "Transfer failed.");\n', '        }\n', '\n', '        function Dev_pullFunds() public{\n', '            require(msg.sender == DEV && devPot > 0);\n', '            uint cash = devPot;\n', '            devPot = 0;\n', '            (bool success, ) = DEV.call{value:cash}("");\n', '            require(success, "Transfer failed.");\n', '        }\n', '\n', '        function shiftDev(address addr) public{\n', '            require(msg.sender == DEV);\n', '            DEV = addr;\n', '        }\n', '\n', '        function shiftOracleTeller(address addr) public{\n', '            require(msg.sender == oracleTeller);\n', '            oracleTeller = addr;\n', '        }\n', '\n', '        function setOracle(address addr) public{\n', '            require(msg.sender == oracleTeller);\n', '            ORACLE = Oracle(addr);\n', '        }\n', '\n', '        function globalData() public view returns(uint _MVT_to_rollout, uint _mvt5xHodlPool, uint _nextFloorRaisingTime, uint _floorPrice, uint _totalACRESupply, uint _totalAcreWeight, uint _totalTotemWeight){\n', '            return (MVT_to_rollout, mvt5xHodlPool, nextFloorRaisingTime, floorPrice, _totalSupply, totalShares[ETHpool], totalTotemWeight);\n', '        }\n', '        \n', '        function userData(address account) public view returns(uint acreBalance, uint totemWeight, uint acreDividends, uint totemDividends, bool MDT_approval, bool MVT_approval){\n', '            return (balanceOf(account), shares[MVTpool][account], dividendsOf(ETHpool, account) + earnings[ETHpool][account], dividendsOf(MVTpool, account) + earnings[MVTpool][account], MDT.allowance(account,THIS)>$*1000000, MVT.allowance(account,THIS)>$*1000000);\n', '        }\n', '\n', '        function userData2(address account) public view returns(uint MDT_balance, uint MVT_balance, uint colorDividends){\n', '            return ( MDT.balanceOf(account), MVT.balanceOf(account), colorDividendsOf(account) + earnings[COLORpool][account] );\n', '        }\n', '\n', '        uint mvt5xHodlPool;\n', '        event PurchaseAcre(address boughtFor, uint acreBought);\n', '        function purchaseAcre(address buyFor) public payable{\n', '            if( buyFor == address(0) ){\n', '                buyFor = msg.sender;\n', '            }\n', '\n', '            require(msg.value > 0 && msg.sender == tx.origin);\n', '            uint MONEY = msg.value;\n', '            uint forDev;\n', '            if(block.timestamp - genesis <= 86400*365){forDev = MONEY * 6/1000;}\n', '            devPot += forDev;\n', '\n', '            uint val = MONEY - forDev;\n', '            mint(buyFor, val);\n', '            uint forBuyingMVT = val * (_totalSupply - totalTotemWeight + builder_totalShares) / _totalSupply;\n', '            GLR_funds += val - forBuyingMVT;\n', '            mvt5xHodlPool += forBuyingMVT;\n', '            emit PurchaseAcre(buyFor, val);\n', '            rolloutDepositedMVTRewards();\n', '        }\n', '\n', '        uint nextFloorRaisingTime;\n', '        uint floorPrice = 0.00002 ether;\n', '        bool firstBump = true;\n', '        event Sell_MVT(uint mvtSold, uint cashout,uint forManifest,uint forDaily);\n', '        function sell_MVT(uint amount) public{\n', '            address payable sender = payable(msg.sender);\n', '            require( MVT.transferFrom(sender, THIS, amount) );\n', '            uint NOW = block.timestamp;\n', '            \n', '            if(NOW >= nextFloorRaisingTime){\n', '                if(firstBump){\n', '                    firstBump = false;\n', '                    floorPrice = floorPrice * 10;\n', '                }else{\n', '                    floorPrice = floorPrice * 3;\n', '                }\n', '                nextFloorRaisingTime += 300 * 86400;\n', '            }\n', '\n', '            uint cost = floorPrice*amount/$;\n', '            require( mvt5xHodlPool >= cost && cost > 0 );\n', '            mvt5xHodlPool -= cost;\n', '\n', '            uint forManifest = amount * ( totalTotemWeight - builder_totalShares) / _totalSupply;\n', '            uint forDaily =  amount  - forManifest;\n', '            MVT_to_rollout += forDaily;\n', '            storeUpCommunityRewards(forManifest);\n', '            emit Sell_MVT(amount, cost,forManifest, forDaily);\n', '            (bool success, ) = sender.call{value:cost}("");\n', '            require(success, "Transfer failed.");\n', '        }\n', '\n', '        mapping(uint => mapping(address => uint)) public  shares;\n', '        mapping(uint => uint) public totalShares;\n', '        mapping(uint => uint)  earningsPer;\n', '        mapping(uint => mapping(address => uint)) payouts;\n', '        mapping(uint => mapping(address => uint)) public  earnings;\n', '        uint256 constant scaleFactor = 0x10000000000000000;\n', '        uint constant ETHpool = 0;\n', '        uint constant MVTpool = 1;\n', '        uint constant COLORpool = 2;\n', '\n', '        function withdraw(uint pool) public{\n', '            address payable sender = payable(msg.sender);\n', '            require(pool>=0 && pool<=2);\n', '\n', '\n', '            if(pool == COLORpool){\n', '                update(ETHpool, sender);\n', '            }else{\n', '                update(pool, sender);\n', '            }\n', '\n', '            if(pool == ETHpool){\n', '                testClean(sender);\n', '            }\n', '            \n', '\n', '            uint earned = earnings[pool][sender];\n', '            earnings[pool][sender] = 0;\n', '            require(earned > 0);\n', '\n', '            if(pool == ETHpool){\n', '                (bool success, ) = sender.call{value:earned}("");\n', '                require(success, "Transfer failed.");\n', '            }else if(pool == MVTpool){\n', '                MVT.transfer(sender, earned);\n', '            }else if(pool == COLORpool){\n', '                COLOR.transfer(sender, earned);\n', '            }\n', '        }\n', '\n', '        function addShares(uint pool, address account, uint amount) internal{\n', '            update(pool, account);\n', '            totalShares[pool] += amount;\n', '            shares[pool][account] += amount;\n', '        }\n', '\n', '        function removeShares(uint pool, address account, uint amount) internal{\n', '            update(pool, account);\n', '            totalShares[pool] -= amount;\n', '            shares[pool][account] -= amount;\n', '        }\n', '\n', '        function dividendsOf(uint pool, address account) public view returns(uint){\n', '            uint owedPerShare = earningsPer[pool] - payouts[pool][account];\n', '            return shares[pool][account] * owedPerShare / scaleFactor;\n', '        }\n', '        function colorDividendsOf(address account) public view returns(uint){\n', '            uint owedPerShare = earningsPer[COLORpool] - payouts[COLORpool][account];\n', '            return shares[ETHpool][account] * owedPerShare / scaleFactor;\n', '        }\n', '        \n', '        function update(uint pool, address account) internal {\n', '            uint newMoney = dividendsOf(pool, account);\n', '            payouts[pool][account] = earningsPer[pool];\n', '            earnings[pool][account] += newMoney;\n', '            if(pool == ETHpool){\n', '                newMoney = colorDividendsOf(account);\n', '                payouts[COLORpool][account] = earningsPer[COLORpool];\n', '                earnings[COLORpool][account] += newMoney;\n', '            }\n', '        }\n', '\n', '        event PayEthToAcreStakers(uint amount);\n', '        function payEthToAcreStakers() payable public{\n', '            uint val = msg.value;\n', '            require(totalShares[ETHpool]>0);\n', '            earningsPer[ETHpool] += val * scaleFactor / totalShares[ETHpool];\n', '            emit PayEthToAcreStakers(val);\n', '        }\n', '\n', '        event PayColor( uint amount );\n', '        function tokenFallback(address from, uint value, bytes calldata _data) external{\n', '            if(msg.sender == address(COLOR) ){\n', '                require(totalShares[ETHpool]>0);\n', '                earningsPer[COLORpool] += value * scaleFactor / totalShares[ETHpool];\n', '                emit PayColor(value);\n', '            }else{\n', '                revert("no want");\n', '            }\n', '        }\n', '\n', '\n', '        mapping(uint => uint) public  builder_shares;\n', '        uint public builder_totalShares;\n', '        uint builder_earningsPer;\n', '        mapping(uint => uint) builder_payouts;\n', '        mapping(uint => uint) public  builder_earnings;\n', '        function builder_addShares(uint TOTEM, uint amount) internal{\n', '            if(!totemManifest[TOTEM]){\n', '                builder_update(TOTEM);\n', '                builder_totalShares += amount;\n', '                builder_shares[TOTEM] += amount;\n', '            }\n', '        }\n', '\n', '        function builder_removeShares(uint TOTEM, uint amount) internal{\n', '            if(!totemManifest[TOTEM]){\n', '                builder_update(TOTEM);\n', '                builder_totalShares -= amount;\n', '                builder_shares[TOTEM] -= amount;\n', '            }\n', '        }\n', '\n', '        function builder_dividendsOf(uint TOTEM) public view returns(uint){\n', '            uint owedPerShare = builder_earningsPer - builder_payouts[TOTEM];\n', '            return builder_shares[TOTEM] * owedPerShare / scaleFactor;\n', '        }\n', '        \n', '        function builder_update(uint TOTEM) internal{\n', '            uint newMoney = builder_dividendsOf(TOTEM);\n', '            builder_payouts[TOTEM] = builder_earningsPer;\n', '            builder_earnings[TOTEM] += newMoney;        \n', '        }\n', '\n', '        uint public MVT_to_rollout;\n', '        uint public lastRollout;\n', '\n', '        event DepositMVTForRewards(address addr, uint amount);\n', '        function depositMVTForRewards(uint amount) public{\n', '            require(MVT.transferFrom(msg.sender, THIS, amount));\n', '            storeUpCommunityRewards(amount);\n', '            emit DepositMVTForRewards(msg.sender, amount);\n', '        }\n', '\n', '        function storeUpCommunityRewards(uint amount)internal{\n', '            if( builder_totalShares == 0 ){\n', '                storedUpBuilderMVT += amount;\n', '            }else{\n', '                builder_earningsPer += ( amount + storedUpBuilderMVT ) * scaleFactor / builder_totalShares;\n', '                storedUpBuilderMVT = 0;\n', '            }\n', '        }\n', '\n', '        event RolloutDepositedMVTRewards(uint amountToDistribute);\n', '        function rolloutDepositedMVTRewards() public{\n', '            uint NOW = block.timestamp;\n', '            if( (NOW - lastRollout) > 86400 && totalShares[MVTpool] > 0 &&  MVT_to_rollout > 0){\n', '                lastRollout = NOW;\n', '                uint amountToDistribute = MVT_to_rollout * (totalTotemWeight-totalShares[MVTpool]) / _totalSupply;\n', '                MVT_to_rollout -= amountToDistribute;\n', '                earningsPer[MVTpool] += amountToDistribute * scaleFactor / totalShares[MVTpool];\n', '                emit RolloutDepositedMVTRewards(amountToDistribute);\n', '            }\n', '        }\n', '\n', '        string public name = "Acre";\n', '        string public symbol = "ACRE";\n', '        uint8 constant public decimals = 18;\n', '        mapping(address => uint256) public balances;\n', '        uint _totalSupply;\n', '\n', '        mapping(address => mapping(address => uint)) approvals;\n', '\n', '        event Transfer(\n', '            address indexed from,\n', '            address indexed to,\n', '            uint256 amount,\n', '            bytes data\n', '        );\n', '        event Transfer(\n', '            address indexed from,\n', '            address indexed to,\n', '            uint256 amount\n', '        );\n', '        \n', '        event Mint(\n', '            address indexed addr,\n', '            uint256 amount\n', '        );\n', '\n', '        function mint(address _address, uint _value) internal{\n', '            balances[_address] += _value;\n', '            _totalSupply += _value;\n', '            if(!isContract(msg.sender)) addShares(ETHpool, _address, _value);\n', '            emit Mint(_address, _value);\n', '        }\n', '\n', '        function totalSupply() public view returns (uint256) {\n', '            return _totalSupply;\n', '        }\n', '\n', '        function balanceOf(address _owner) public view returns (uint256 balance) {\n', '            return balances[_owner];\n', '        }\n', '\n', '        function transfer(address _to, uint _value) public virtual returns (bool) {\n', '            bytes memory empty;\n', '            return transferToAddress(_to, _value, empty);\n', '        }\n', '\n', '        function transfer(address _to, uint _value, bytes memory _data) public virtual returns (bool) {\n', '            if( isContract(_to) ){\n', '                return transferToContract(_to, _value, _data);\n', '            }else{\n', '                return transferToAddress(_to, _value, _data);\n', '            }\n', '        }\n', '\n', '        //function that is called when transaction target is an address\n', '        function transferToAddress(address _to, uint _value, bytes memory _data) private returns (bool) {\n', '            moveTokens(msg.sender, _to, _value);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '\n', '        //function that is called when transaction target is a contract\n', '        function transferToContract(address _to, uint _value, bytes memory _data) private returns (bool) {\n', '            moveTokens(msg.sender, _to, _value);\n', '            ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n', '            receiver.tokenFallback(msg.sender, _value, _data);\n', '            emit Transfer(msg.sender, _to, _value, _data);\n', '            return true;\n', '        }\n', '\n', '        function testClean(address addr) public {\n', '            if(isContract(addr)){\n', '                clean(addr);\n', '            }\n', '        }\n', '\n', '        function clean(address addr) internal{\n', '            uint _shares = shares[ETHpool][addr];\n', '            if( _shares > 0 ){\n', '                removeShares(ETHpool, addr, _shares);\n', '                uint earned = earnings[ETHpool][addr];\n', '                earnings[ETHpool][addr] = 0;\n', '\n', '                require( totalShares[ETHpool] > 0 );\n', '                earningsPer[ETHpool] += earned * scaleFactor / totalShares[ETHpool];\n', '                emit PayEthToAcreStakers(earned);\n', '            }\n', '        }\n', '\n', '        function moveTokens(address _from, address _to, uint _amount) internal virtual{\n', '            require( _amount <= balances[_from] );\n', '            //update balances\n', '            balances[_from] -= _amount;\n', '            balances[_to] += _amount;\n', '\n', '            if(!isContract(_from) ){\n', '                if(_to != THIS ){\n', '                    require( MVT.transferFrom(_from, THIS, _amount) );\n', '                    storeUpCommunityRewards(_amount);\n', '                }\n', '                removeShares(ETHpool, _from, _amount);\n', '            }else{\n', '                clean(_from);\n', '            }\n', '\n', '            if( !isContract(_to) ){\n', '                addShares(ETHpool, _to, _amount);\n', '            }else{\n', '                clean(_to);\n', '            }\n', '\n', '            emit Transfer(_from, _to, _amount);\n', '        }\n', '\n', '        function allowance(address src, address guy) public view returns (uint) {\n', '            return approvals[src][guy];\n', '        }\n', '        \n', '        function transferFrom(address src, address dst, uint amount) public returns (bool){\n', '            address sender = msg.sender;\n', '            require(approvals[src][sender] >=  amount);\n', '            require(balances[src] >= amount);\n', '            approvals[src][sender] -= amount;\n', '            moveTokens(src,dst,amount);\n', '            bytes memory empty;\n', '            emit Transfer(sender, dst, amount, empty);\n', '            return true;\n', '        }\n', '\n', '        event Approval(address indexed src, address indexed guy, uint amount);\n', '        function approve(address guy, uint amount) public returns (bool) {\n', '            address sender = msg.sender;\n', '            approvals[sender][guy] = amount;\n', '\n', '            emit Approval( sender, guy, amount );\n', '            return true;\n', '        }\n', '\n', '        function isContract(address _addr) public view returns (bool is_contract) {\n', '            uint length;\n', '            assembly {\n', '                //retrieve the size of the code on target address, this needs assembly\n', '                length := extcodesize(_addr)\n', '            }\n', '            if(length>0) {\n', '                return true;\n', '            }else {\n', '                return false;\n', '            }\n', '        }\n', '\n', '        uint NFTcount;\n', '        \n', '        mapping(address => uint[]) public totemsHad;\n', '        mapping(address => mapping(uint => bool)) public alreadyHadAtleastOnce;\n', '\n', '        uint totalTotemWeight;\n', '        event AcreToTotem(address account, uint amount, bool autoStake);\n', '        function acreToTotem(uint amount, bool autoStake) public returns(uint TOTEM_ID){\n', '            address sender = msg.sender;\n', '            require( MDT.transferFrom(sender, THIS, $) );\n', '\n', '            totemNFT.mintUniqueTokenTo(autoStake?THIS:sender, NFTcount, amount);\n', '\n', '            if(autoStake){\n', '                stakeNFT(sender, NFTcount);\n', '            }else{\n', '                builder_addShares(NFTcount, amount);\n', '                totemsHad[sender].push(NFTcount);\n', '                alreadyHadAtleastOnce[sender][NFTcount] = true;\n', '            }\n', '\n', '            NFTcount += 1;\n', '            totalTotemWeight += amount;\n', '            moveTokens(sender, THIS, amount);\n', '            bytes memory empty;\n', '            emit Transfer(sender, THIS, amount, empty);\n', '            emit AcreToTotem(sender, amount, autoStake);\n', '            return NFTcount - 1;\n', '        }\n', '\n', '        uint storedUpBuilderMVT;\n', '        event TotemToMDT(address lastOwner, uint totemID, bool preventBurn);\n', '        mapping(uint => bool) public totemManifest;\n', '        function totemToMDT(uint totemID, bool preventBurn) public{\n', '            address sender = msg.sender;\n', '            require( sender == staker[totemID] && !totemManifest[totemID] && !requestLocked[totemID]);\n', '            require( MDT.transfer(sender, $) );\n', '            uint totemWeight = totemNFT.getWeight(totemID);\n', '            removeShares( MVTpool, sender, totemWeight );\n', '            staker[totemID] = address(0);\n', '\n', '            uint burnage;\n', '            if(preventBurn){\n', '                require( MVT.transferFrom(sender,THIS, totemWeight) );\n', '                storeUpCommunityRewards(totemWeight);\n', '            }else{\n', '                burnage = totemWeight * totalTotemWeight / _totalSupply;\n', '            }\n', '            storeUpCommunityRewards(builder_dividendsOf(totemID)+builder_earnings[totemID]);\n', '            \n', '            moveTokens(THIS, sender, totemWeight - burnage);\n', '            _totalSupply -= burnage;\n', '            balances[THIS] -= burnage;\n', '\n', '            totalTotemWeight -= totemWeight;\n', '            \n', '            emit TotemToMDT(sender, totemID, preventBurn);\n', '        }\n', '\n', '        mapping(uint => address) public staker;\n', '        mapping(uint => uint) public lastMove;\n', '        event StakeNFT(address who, uint tokenID);\n', '        function stakeNFT(address who, uint256 tokenID) internal{\n', '            staker[tokenID] = who;\n', '\n', '            if( !alreadyHadAtleastOnce[who][tokenID] ){\n', '                totemsHad[who].push(tokenID);\n', '                alreadyHadAtleastOnce[who][tokenID] = true;\n', '            }\n', '\n', '            addShares( MVTpool, who, totemNFT.getWeight(tokenID) );\n', '            emit StakeNFT(who, tokenID);\n', '        }\n', '\n', '        event UnstakeNFT(address unstaker, uint tokenID);\n', '        function unstakeNFT(uint tokenID) public{\n', '            address sender = msg.sender;\n', '            require(staker[tokenID] == sender && !requestLocked[tokenID] && block.timestamp-lastMove[tokenID]>=86400 );\n', '            uint weight = totemNFT.getWeight(tokenID);\n', '            lastMove[tokenID] = block.timestamp;\n', '            removeShares( MVTpool, sender, weight );\n', '            staker[tokenID] = address(0);\n', '            builder_addShares(tokenID, weight);\n', '\n', '            totemNFT.transferFrom(THIS, sender, tokenID);\n', '            emit UnstakeNFT(sender, tokenID);\n', '        }\n', '\n', '        function viewTotems(address account, uint[] memory totems) public view returns(uint[] memory tokenIDs, bool[] memory accountIsCurrentlyStaking, uint[] memory acreWeight, bool[] memory owned, bool[] memory manifested, bool[] memory staked, uint[] memory manifestEarnings, uint[] memory lastMoved,bool[] memory pendingManifest){\n', '            uint L;\n', '            if(totems.length==0){\n', '                L = totemsHad[account].length;\n', '            }else{\n', '                L = totems.length;\n', '            }\n', '\n', '            tokenIDs = new uint[](L);\n', '            acreWeight = new uint[](L);\n', '            accountIsCurrentlyStaking = new bool[](L);\n', '            owned = new bool[](L);\n', '            manifested = new bool[](L);\n', '            staked = new bool[](L);\n', '            pendingManifest = new bool[](L);\n', '            manifestEarnings = new uint[](L);\n', '            lastMoved = new uint[](L);\n', '\n', '            uint tID;\n', '            for(uint c = 0; c<L; c+=1){\n', '                if(totems.length==0){\n', '                    tID = totemsHad[account][c];\n', '                }else{\n', '                    tID = totems[c];\n', '                }\n', '                tokenIDs[c] = tID;\n', '                acreWeight[c] = totemNFT.getWeight(tID);\n', '                accountIsCurrentlyStaking[c] = staker[tID] == account;\n', '                staked[c] = totemNFT.ownerOf(tID) == THIS;\n', '                manifested[c] = totemManifest[tID];\n', '                pendingManifest[c] = requestLocked[tID];\n', '                manifestEarnings[c] = builder_dividendsOf(tID) + builder_earnings[tID];\n', '                lastMoved[c] = lastMove[tID];\n', '                owned[c] = ( staker[tID] == account || totemNFT.ownerOf(tID) == account );\n', '            }\n', '        }\n', '\n', '        function onERC721Received(address from, uint256 tokenID, bytes memory _data) external returns(bytes4) {\n', '            bytes4 empty;\n', '            require( msg.sender == address(totemNFT) && block.timestamp-lastMove[tokenID]>=86400 );\n', '            lastMove[tokenID] = block.timestamp;\n', '            builder_removeShares(tokenID, totemNFT.getWeight(tokenID) );\n', '            stakeNFT(from, tokenID);\n', '            return empty;\n', '        }\n', '\n', '        mapping(uint=>address) public theWork; //noita\n', '        mapping(uint=>uint) workingTotem;\n', '        mapping(uint=>string) public txt;\n', '        mapping(uint=>bool) requestLocked;\n', '        event OracleRequest(address buidlr, uint totemID, uint earningsToManifest, address _theWork, string text, uint ticketID);\n', '        function oracleRequest(uint totemID, string memory _txt, address contract_optional) public payable returns(uint ticketID){\n', '            address sender = msg.sender;\n', '            require( staker[totemID] == sender && !totemManifest[totemID] && !requestLocked[totemID] );\n', '            uint ID = ORACLE.fileRequestTicket{value: msg.value}(1, true);\n', '            workingTotem[ID] = totemID;\n', '            theWork[totemID] = contract_optional;\n', '            txt[totemID] = _txt;\n', '            requestLocked[totemID] = true;\n', '            emit OracleRequest(sender, totemID, builder_dividendsOf(totemID)+builder_earnings[totemID], contract_optional, _txt, ID);\n', '            return ID;\n', '        }\n', '\n', '        event CommunityReward(address buidlr, uint totemID, uint reward, address contractBuilt, string text, uint ticketID);\n', '        event RequestRejected(uint totemID, uint ticketID);\n', '        function oracleIntFallback(uint ticketID, bool requestRejected, uint numberOfOptions, uint[] memory optionWeights, int[] memory intOptions) public{\n', '            uint optWeight;\n', '            uint positive;\n', '            uint negative;\n', '            uint totemID = workingTotem[ticketID];\n', '            require( msg.sender == address(ORACLE) );\n', '\n', '            for(uint i; i < numberOfOptions; i+=1){\n', '                optWeight = optionWeights[i];\n', '                if(intOptions[i]>0){\n', '                    positive += optWeight;\n', '                }else{\n', '                    negative += optWeight;\n', '                }\n', '            }\n', '\n', '            if(!requestRejected && positive>negative){\n', '                //emit event and give reward\n', '                if(!totemManifest[totemID]){\n', '                    totemManifest[totemID] = true;\n', '                    uint earned = builder_earnings[totemID];\n', '                    if(earned>0){\n', '                        if( staker[totemID]==address(0) ){\n', '                            storeUpCommunityRewards(earned);\n', '                        }else{\n', '                            earnings[MVTpool][staker[totemID]] += earned;\n', '                        }\n', '                    }\n', '                    emit CommunityReward(staker[totemID], totemID, earned, theWork[totemID], txt[totemID], ticketID );\n', '                }\n', '            }else{\n', '                emit RequestRejected(totemID,ticketID);\n', '            }\n', '            requestLocked[totemID] = false;\n', '        }\n', '    }\n', '\n', '    abstract contract Oracle{\n', '        function fileRequestTicket( uint8 returnType, bool subjective) public virtual payable returns(uint ticketID);\n', '    }\n', '\n', '    abstract contract ERC20{\n', '        function totalSupply() external virtual view returns (uint256);\n', '        function balanceOf(address account) external virtual view returns (uint256);\n', '        function allowance(address owner, address spender) external virtual view returns (uint256);\n', '        function transfer(address recipient, uint256 amount) external virtual returns (bool);\n', '        function approve(address spender, uint256 amount) external virtual returns (bool);\n', '        function transferFrom(address sender, address recipient, uint256 amount) external virtual returns (bool);\n', '    }\n', '\n', '    contract Totem is ERC721 {\n', '        constructor (string memory _name, string memory _symbol)\n', '            ERC721(_name, _symbol)\n', '        {\n', '            greenpoint = msg.sender;\n', '        }\n', '\n', '        address greenpoint;\n', '        mapping(uint => uint)  weight;\n', '        function mintUniqueTokenTo(\n', '            address _to,\n', '            uint256 _tokenId,\n', '            uint _weight\n', '        ) public {\n', '            require(msg.sender == greenpoint);\n', '            super._mint(_to, _tokenId);\n', '            weight[_tokenId] = _weight;\n', '        }\n', '\n', '        function getWeight(uint ID) public view returns(uint){\n', '            return weight[ID];\n', '        }\n', '\n', '        mapping(uint => string) desiredURI;\n', '        mapping(uint => uint) workingTotem;\n', '        event URI_request(uint totemID, string desiredURI, uint ticketID);\n', '        function uriRequest(uint ID, string memory _desiredURI) public payable returns(uint){\n', '            require( msg.sender == ownerOf(ID) );\n', '            uint otID = GreenPointLandReserves(greenpoint).ORACLE().fileRequestTicket{value:msg.value}(1,true);\n', '            desiredURI[otID] = _desiredURI;\n', '            workingTotem[otID] = ID;\n', '            emit URI_request(ID, _desiredURI, otID);\n', '            return otID;\n', '        }\n', '\n', '        event AcceptedURI(uint totemID);\n', '        event RejectedURI(uint totemID);\n', '        function oracleIntFallback(uint ticketID, bool requestRejected, uint numberOfOptions, uint[] memory optionWeights, int[] memory intOptions) public{\n', '            uint optWeight;\n', '            uint positive;\n', '            uint negative;\n', '            \n', '            require( msg.sender == address( GreenPointLandReserves(greenpoint).ORACLE() ) );\n', '\n', '            for(uint i; i < numberOfOptions; i+=1){\n', '                optWeight = optionWeights[i];\n', '                if(intOptions[i]>0){\n', '                    positive += optWeight;\n', '                }else{\n', '                    negative += optWeight;\n', '                }\n', '            }\n', '            uint totemID = workingTotem[ticketID];\n', '            if(!requestRejected && positive>negative && !GreenPointLandReserves(greenpoint).totemManifest(totemID) ){\n', '                uri[totemID] = desiredURI[ticketID];\n', '                emit AcceptedURI(totemID);\n', '            }else{\n', '                emit RejectedURI(totemID);\n', '            }\n', '        }\n', '\n', '    }\n', '\n', '    abstract contract ERC223ReceivingContract{\n', '        function tokenFallback(address _from, uint _value, bytes calldata _data) external virtual;\n', '    }']