['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-17\n', '*/\n', '\n', '//SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', 'interface IERC1155 {\n', '\tevent TransferSingle(\n', '\t\taddress indexed _operator,\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint256 _id,\n', '\t\tuint256 _amount\n', '\t);\n', '\n', '\tevent TransferBatch(\n', '\t\taddress indexed _operator,\n', '\t\taddress indexed _from,\n', '\t\taddress indexed _to,\n', '\t\tuint256[] _ids,\n', '\t\tuint256[] _amounts\n', '\t);\n', '\n', '\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '\tevent URI(string _amount, uint256 indexed _id);\n', '\n', '\tfunction mint(\n', '\t\taddress _to,\n', '\t\tuint256 _id,\n', '\t\tuint256 _quantity,\n', '\t\tbytes calldata _data\n', '\t) external;\n', '\n', '\tfunction create(\n', '\t\tuint256 _maxSupply,\n', '\t\tuint256 _initialSupply,\n', '\t\tstring calldata _uri,\n', '\t\tbytes calldata _data\n', '\t) external returns (uint256 tokenId);\n', '\n', '\tfunction safeTransferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256 _id,\n', '\t\tuint256 _amount,\n', '\t\tbytes calldata _data\n', '\t) external;\n', '\n', '\tfunction safeBatchTransferFrom(\n', '\t\taddress _from,\n', '\t\taddress _to,\n', '\t\tuint256[] calldata _ids,\n', '\t\tuint256[] calldata _amounts,\n', '\t\tbytes calldata _data\n', '\t) external;\n', '\n', '\tfunction balanceOf(address _owner, uint256 _id) external view returns (uint256);\n', '\n', '\tfunction balanceOfBatch(address[] calldata _owners, uint256[] calldata _ids)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256[] memory);\n', '\n', '\tfunction setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract EggPurchase is Ownable, IERC1155Receiver {\n', '    using SafeMath for uint256;\n', '    \n', '    uint256 public nftid;\n', '    // address => purchaseId => timestamp\n', '    mapping(address => mapping(uint256 => uint256)) private userPurchased;\n', '    mapping(address => uint256) private userNextPurchasedId;\n', '    address public eggAddress;\n', '    bool public active = false;\n', '    uint256 public startTimestamp;\n', '    address payable private devWallet;\n', '    \n', '    struct SalePeriod {\n', '        uint256 duration;\n', '        uint256 price;\n', '        uint256 eggAmount;\n', '        uint256 eggsSoldThisRound;\n', '    }\n', '    \n', '    SalePeriod[] public salePeriods;\n', '    \n', '    constructor(address _eggAddress, uint256 _nftid, address payable _devWallet) public {\n', '        eggAddress = _eggAddress;\n', '        nftid = _nftid;\n', '        devWallet = _devWallet;\n', '    }\n', '    \n', '    function setActive(bool isActive) public onlyOwner {\n', '        active = isActive;\n', '    }\n', '    \n', '    function setDevWallet(address payable dev) public onlyOwner {\n', '        devWallet = dev;\n', '    }\n', '    \n', '    function initiateSale(uint256 _startTimestamp) public onlyOwner {\n', '        \n', '        if(_startTimestamp == 0) {\n', '            startTimestamp = now;\n', '        } else {\n', '            startTimestamp = _startTimestamp;\n', '        }\n', '        \n', '        active = true;\n', '    }\n', '    \n', '    \n', '    /*\n', '        24h = 86400, 0.111 ether = 111*10**15\n', '        \n', '        Planned sale setup:\n', '        [86400,86400,86400,86400,86400,86400,86400,86400,86400,86400,86400,86400,86400,86400]\n', '        [111,111,222,222,333,333,444,444,555,555,444,333,222,111]\n', '        [15,15,15,15,15,15,15,15,15,15,15,15,15,15]\n', '        [111,111,111,111,111,111,111,111,111,111,0,0,0,0]\n', '    */\n', '    \n', '    function setSalePeriods(uint256[] memory _duration, uint256[] memory _priceBase, uint256[] memory additionalDecimals, uint256[] memory _eggAmount) public onlyOwner {\n', '        \n', '        delete salePeriods;\n', '        \n', '        for (uint256 i = 0; i < _duration.length; i++) {\n', '            salePeriods.push(SalePeriod(_duration[i], _priceBase[i].mul(10**additionalDecimals[i]), _eggAmount[i], 0));\n', '        }\n', '        \n', '    }\n', '    \n', '    // returns: id, current price, total amount of eggs sold, total eggs available (until now)\n', '    function getSaleRoundInfo() public view returns (uint256, uint256, uint256, uint256) {\n', '        \n', '        uint256 lastTimestamp = startTimestamp;\n', '        uint256 totalEggsSold = 0;\n', '        uint256 totalEggsAvailable = 0;\n', '        \n', '        for (uint256 i = 0; i < salePeriods.length; i++) {     \n', '            SalePeriod storage salePeriod = salePeriods[i];\n', '            lastTimestamp = lastTimestamp.add(salePeriod.duration);\n', '            totalEggsSold = totalEggsSold.add(salePeriod.eggsSoldThisRound);\n', '            totalEggsAvailable = totalEggsAvailable.add(salePeriod.eggAmount);\n', '            \n', '            if(now <= lastTimestamp) {\n', '                return (i, salePeriod.price, totalEggsSold, totalEggsAvailable);\n', '            }\n', '        }\n', '        \n', '        return (0,0,totalEggsSold,0);\n', '        \n', '    }\n', '    \n', '    function getUserPurchased(address buyer, uint256 id) public view returns (uint256) {\n', '        return userPurchased[buyer][id];\n', '    }\n', '    \n', '    function getUserNextPurchasedId(address buyer) public view returns (uint256) {\n', '        return userNextPurchasedId[buyer];\n', '    }\n', '    \n', '    function userBought24h(address buyer) public view returns (uint256) {\n', '        \n', '        uint256 maxRange = 0;\n', '        uint256 bought24h = 0;\n', '        \n', '        if(userNextPurchasedId[buyer] >= 5) {\n', '            maxRange = 5;\n', '        } else {\n', '            maxRange = userNextPurchasedId[buyer];\n', '        }\n', '        \n', '        \n', '        for(uint256 i=1; i<=maxRange; i++) {\n', '            if(userPurchased[buyer][userNextPurchasedId[buyer].sub(i)].add(24*60*60) >= now) {\n', '                bought24h++;\n', '            }\n', '        }\n', '        \n', '        return bought24h;\n', '    }\n', '\n', '    function purchase() public payable {\n', '        purchase(1);\n', '    }\n', '\n', '    function purchase(uint256 amount) public payable {\n', '        \n', '        require(active == true && startTimestamp > 0, "Cannot buy: Sale not active yet");\n', '        \n', '        (uint256 currentRoundId, uint256 currentPrice, uint256 totalEggsSold, uint256 totalEggsAvailable) = getSaleRoundInfo();\n', '        \n', '        require(totalEggsAvailable > totalEggsSold, "Eggs sold out. Try again during the next round.");\n', '        uint256 eggsAvailableNow = totalEggsAvailable.sub(totalEggsSold);\n', '        \n', '        require(msg.value == currentPrice * amount, "You need to send the exact NFT price");\n', '        require(amount > 0, "Why would you want zero eggs");\n', '        require(amount <= 5, "You cannot buy more than 5 Eggs at once");\n', '        require(amount <= eggsAvailableNow, "You cannot buy more than the available amount");\n', '        require(userBought24h(msg.sender).add(amount) <= 5, "You cannot purchase more than 5 NFTs in 24h");\n', '        require(IERC1155(eggAddress).balanceOf(address(this), nftid) > amount, "Cannot buy: not enough Eggs!");\n', '        \n', '        salePeriods[currentRoundId].eggsSoldThisRound = salePeriods[currentRoundId].eggsSoldThisRound.add(amount);\n', '        \n', '        IERC1155(eggAddress).safeTransferFrom(address(this), msg.sender, nftid, amount, "");\n', '        if(devWallet != address(0)) {\n', '            devWallet.transfer(msg.value);\n', '        }\n', '        \n', '        for(uint256 i = 0; i < amount; i++) {\n', '            userPurchased[msg.sender][userNextPurchasedId[msg.sender]] = now;\n', '            userNextPurchasedId[msg.sender] = userNextPurchasedId[msg.sender] + 1;\n', '        }\n', '    }\n', '    \n', '    function withdrawEggs(address _to) public onlyOwner {\n', '        uint256 amount = IERC1155(eggAddress).balanceOf(address(this), nftid);\n', '        IERC1155(eggAddress).safeTransferFrom(address(this), _to, nftid, amount, "");\n', '    }\n', '    \n', '    function withdrawEther(address payable _to, uint256 _amount) public onlyOwner {\n', '        _to.transfer(_amount);\n', '    }\n', '\n', '    function withdrawTokens(address _token, address _to, uint256 _amount) public onlyOwner {\n', '        IERC20 token = IERC20(_token);\n', '        token.transfer(_to, _amount);\n', '    }\n', '    \n', '    \n', '    function onERC1155Received(address operator, address from, uint256 id, uint256 value, bytes calldata data) external returns(bytes4) {\n', '        return bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"));\n', '    }\n', '    \n', '    \n', '    function onERC1155BatchReceived(address operator, address from, uint256[] calldata ids, uint256[] calldata values, bytes calldata data) external returns(bytes4) {\n', '        return bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"));\n', '    }\n', '    \n', '}']