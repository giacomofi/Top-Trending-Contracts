['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-29\n', '*/\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', 'library UniswapV2SingleSided {\n', '\n', '  using SafeMath for uint256;\n', '    \n', '  // implementation from https://github.com/Uniswap/uniswap-lib/commit/99f3f28770640ba1bb1ff460ac7c5292fb8291a0\n', '  // original implementation: https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\n', '  function sqrt(uint256 x) internal pure returns (uint256) {\n', '        if (x == 0) return 0;\n', '        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\n', '        // however that code costs significantly more gas\n', '        uint256 xx = x;\n', '        uint256 r = 1;\n', '        if (xx >= 0x100000000000000000000000000000000) {\n', '            xx >>= 128;\n', '            r <<= 64;\n', '        }\n', '        if (xx >= 0x10000000000000000) {\n', '            xx >>= 64;\n', '            r <<= 32;\n', '        }\n', '        if (xx >= 0x100000000) {\n', '            xx >>= 32;\n', '            r <<= 16;\n', '        }\n', '        if (xx >= 0x10000) {\n', '            xx >>= 16;\n', '            r <<= 8;\n', '        }\n', '        if (xx >= 0x100) {\n', '            xx >>= 8;\n', '            r <<= 4;\n', '        }\n', '        if (xx >= 0x10) {\n', '            xx >>= 4;\n', '            r <<= 2;\n', '        }\n', '        if (xx >= 0x8) {\n', '            r <<= 1;\n', '        }\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1;\n', '        r = (r + x / r) >> 1; // Seven iterations should be enough\n', '        uint256 r1 = x / r;\n', '        return (r < r1 ? r : r1);\n', '    }\n', '    \n', '    // https://blog.alphafinance.io/onesideduniswap/\n', '    // zapperfi impl: https://etherscan.io/address/0xcff6ef0b9916682b37d80c19cff8949bc1886bc2#code#L1246\n', '    function calculateSingleSidedAmt(uint256 amtA, uint256 resA) internal pure returns (uint256) {\n', '        uint256 _swapAmt = sqrt(resA.mul(amtA.mul(3988000) + resA.mul(3988009))).sub(resA.mul(1997)) / 1994;\n', '        return _swapAmt > amtA? amtA : _swapAmt;\n', '    }\n', '    \n', '    // https://blog.alphafinance.io/fair-lp-token-pricing/\n', '    function calcFairReserves(uint256 resK, uint256 priceA2BRatioBps) internal pure returns (uint256, uint256) {\n', '        return (sqrt(resK.mul(10000).div(priceA2BRatioBps)), sqrt(resK.mul(priceA2BRatioBps).div(10000)));\n', '    }\n', '    \n', '}\n', '\n', 'interface UniswapRouterV2 {\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '    \n', '    function addLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 amountADesired,\n', '        uint256 amountBDesired,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\n', '    \n', '    function removeLiquidity(\n', '        address tokenA,\n', '        address tokenB,\n', '        uint256 liquidity,\n', '        uint256 amountAMin,\n', '        uint256 amountBMin,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256 amountA, uint256 amountB);\n', '    \n', '    function getAmountsOut(uint256 amountIn, address[] calldata path) external view returns (uint256[] memory amounts);\n', '\n', '}\n', '\n', 'interface IUniswapV2Pair {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    \n', '}\n', '\n', 'interface IController {\n', '    function vaults(address) external view returns (address);\n', '\n', '    function devfund() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '}\n', '\n', 'interface IMasterchef {\n', '    function notifyBuybackReward(uint256 _amount) external;\n', '}\n', '\n', 'interface IPickleFarmingGauge {\n', '   function balanceOf(address account) external view returns (uint256);\n', '   function earned(address account) external view returns (uint256);\t\t\n', '   function getReward() external;\n', '   function deposit(uint256 _amount) external;\n', '   function depositAll() external;\n', '   function withdraw(uint256 amount) external;\n', '   function withdrawAll() external;\n', '}\n', '\n', 'interface IPickleJar {\n', '   function balanceOf(address account) external view returns (uint256);\n', '   function deposit(uint256 _amount) external;\n', '   function depositAll() external;\n', '   function withdraw(uint256 _shares) external;\n', '   function withdrawAll() external;\n', '   function getRatio() external view returns (uint256);\n', '}\n', '\n', 'interface IYvBOOSTVault {\n', '   function pricePerShare() external view returns (uint256);\n', '   function balanceOf(address account) external view returns (uint256);\n', '   function deposit(uint256, address) external returns (uint256);\n', '   function withdraw(uint256, address, uint256) external returns (uint256);\n', '}\n', '\n', '// Strategy Contract Basics\n', 'abstract contract StrategyBase {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    // Perfomance fee 30% to buyback\n', '    uint256 public performanceFee = 30000;\n', '    uint256 public constant performanceMax = 100000;\n', '\n', '    // Withdrawal fee 0.2% to buyback\n', '    // - 0.14% to treasury\n', '    // - 0.06% to dev fund\n', '    uint256 public treasuryFee = 140;\n', '    uint256 public constant treasuryMax = 100000;\n', '\n', '    uint256 public devFundFee = 60;\n', '    uint256 public constant devFundMax = 100000;\n', '\n', '    // delay yield profit realization\n', '    uint256 public delayBlockRequired = 1000;\n', '    uint256 public lastHarvestBlock;\n', '    uint256 public lastHarvestInWant;\n', '\n', '    // buyback ready\n', '    bool public buybackEnabled = true;\n', '    address public mmToken = 0xa283aA7CfBB27EF0cfBcb2493dD9F4330E0fd304;\n', '    address public masterChef = 0xf8873a6080e8dbF41ADa900498DE0951074af577;\n', '\n', '    // Tokens\n', '    address public want;\n', '    address public constant weth = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    // buyback coins\n', '    address public constant usdcBuyback = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '\n', '    // User accounts\n', '    address public governance;\n', '    address public controller;\n', '    address public strategist;\n', '    address public timelock;\n', '\n', '    // Dex\n', '    address public univ2Router2 = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '\n', '    //Sushi\n', '    address public sushiRouter = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F;\n', '\n', '    constructor(\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    ) public {\n', '        require(_want != address(0));\n', '        require(_governance != address(0));\n', '        require(_strategist != address(0));\n', '        require(_controller != address(0));\n', '        require(_timelock != address(0));\n', '\n', '        want = _want;\n', '        governance = _governance;\n', '        strategist = _strategist;\n', '        controller = _controller;\n', '        timelock = _timelock;\n', '    }\n', '\n', '    // **** Modifiers **** //\n', '\n', '    modifier onlyBenevolent {\n', '        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-3074.md#allowing-txorigin-as-signer\n', '        require(msg.sender == tx.origin || msg.sender == governance || msg.sender == strategist);\n', '        _;\n', '    }\n', '\n', '    // **** Views **** //\n', '\n', '    function balanceOfWant() public view returns (uint256) {\n', '        return IERC20(want).balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfPool() public virtual view returns (uint256);\n', '\n', '    function balanceOf() public view returns (uint256) {\n', '        uint256 delayReduction;\n', '        uint256 currentBlock = block.number;\n', '        if (delayBlockRequired > 0 && lastHarvestInWant > 0 && currentBlock.sub(lastHarvestBlock) < delayBlockRequired){\n', '            uint256 diffBlock = lastHarvestBlock.add(delayBlockRequired).sub(currentBlock);\n', '            delayReduction = lastHarvestInWant.mul(diffBlock).mul(1e18).div(delayBlockRequired).div(1e18);\n', '        }\n', '        return balanceOfWant().add(balanceOfPool()).sub(delayReduction);\n', '    }\n', '\n', '    function getName() external virtual pure returns (string memory);\n', '\n', '    // **** Setters **** //\n', '\n', '    function setDelayBlockRequired(uint256 _delayBlockRequired) external {\n', '        require(msg.sender == governance, "!governance");\n', '        delayBlockRequired = _delayBlockRequired;\n', '    }\n', '\n', '    function setDevFundFee(uint256 _devFundFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        devFundFee = _devFundFee;\n', '    }\n', '\n', '    function setTreasuryFee(uint256 _treasuryFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        treasuryFee = _treasuryFee;\n', '    }\n', '\n', '    function setPerformanceFee(uint256 _performanceFee) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        performanceFee = _performanceFee;\n', '    }\n', '\n', '    function setStrategist(address _strategist) external {\n', '        require(msg.sender == governance, "!governance");\n', '        strategist = _strategist;\n', '    }\n', '\n', '    function setGovernance(address _governance) external {\n', '        require(msg.sender == governance, "!governance");\n', '        governance = _governance;\n', '    }\n', '\n', '    function setTimelock(address _timelock) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        timelock = _timelock;\n', '    }\n', '\n', '    function setController(address _controller) external {\n', '        require(msg.sender == timelock, "!timelock");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setMmToken(address _mmToken) external {\n', '        require(msg.sender == governance, "!governance");\n', '        mmToken = _mmToken;\n', '    }\n', '\n', '    function setBuybackEnabled(bool _buybackEnabled) external {\n', '        require(msg.sender == governance, "!governance");\n', '        buybackEnabled = _buybackEnabled;\n', '    }\n', '\n', '    function setMasterChef(address _masterChef) external {\n', '        require(msg.sender == governance, "!governance");\n', '        masterChef = _masterChef;\n', '    }\n', '\n', '    function setUniRoute(address _route) external {\n', '        require(msg.sender == governance, "!governance");\n', '        univ2Router2 = _route;\n', '    }\n', '\n', '    function setSushiRoute(address _route) external {\n', '        require(msg.sender == governance, "!governance");\n', '        sushiRouter = _route;\n', '    }\n', '\n', '    // **** State mutations **** //\n', '    function deposit() public virtual;\n', '\n', '    function withdraw(IERC20 _asset) external virtual returns (uint256 balance);\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function _withdrawNonWantAsset(IERC20 _asset) internal returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        require(want != address(_asset), "want");\n', '        balance = _asset.balanceOf(address(this));\n', '        _asset.safeTransfer(controller, balance);\n', '    }\n', '\n', '    // Withdraw partial funds, normally used with a vault withdrawal\n', '    function withdraw(uint256 _amount) external {\n', '        require(msg.sender == controller, "!controller");\n', '        uint256 _balance = IERC20(want).balanceOf(address(this));\n', '        if (_balance < _amount) {\n', '            _amount = _withdrawSome(_amount.sub(_balance));\n', '            _amount = _amount.add(_balance);\n', '        }\n', '\t\t\t\t\n', '        uint256 _feeDev = _amount.mul(devFundFee).div(devFundMax);\n', '        uint256 _feeTreasury = _amount.mul(treasuryFee).div(treasuryMax);\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '\n', '        if (buybackEnabled == true) {\n', '            // we want buyback mm using LP token\n', '            (address _buybackPrinciple, uint256 _buybackAmount) = _convertWantToBuyback(_feeDev.add(_feeTreasury));\n', '            buybackAndNotify(_buybackPrinciple, _buybackAmount);\n', '        } else {\n', '            IERC20(want).safeTransfer(IController(controller).devfund(), _feeDev);\n', '            IERC20(want).safeTransfer(IController(controller).treasury(), _feeTreasury);\n', '        }\n', '\n', '        IERC20(want).safeTransfer(_vault, _amount.sub(_feeDev).sub(_feeTreasury));\n', '    }\n', '\t\n', '    // buyback MM and notify MasterChef\n', '    function buybackAndNotify(address _buybackPrinciple, uint256 _buybackAmount) internal {\n', '        if (buybackEnabled == true) {\n', '            _swapUniswap(_buybackPrinciple, mmToken, _buybackAmount);\n', '            uint256 _mmBought = IERC20(mmToken).balanceOf(address(this));\n', '            IERC20(mmToken).safeTransfer(masterChef, _mmBought);\n', '            IMasterchef(masterChef).notifyBuybackReward(_mmBought);\n', '        }\n', '    }\n', '\n', '    // Withdraw all funds, normally used when migrating strategies\n', '    function withdrawAll() external returns (uint256 balance) {\n', '        require(msg.sender == controller, "!controller");\n', '        _withdrawAll();\n', '\n', '        balance = IERC20(want).balanceOf(address(this));\n', '\n', '        address _vault = IController(controller).vaults(address(want));\n', '        require(_vault != address(0), "!vault"); // additional protection so we don\'t burn the funds\n', '        IERC20(want).safeTransfer(_vault, balance);\n', '    }\n', '\n', '    function _withdrawAll() internal {\n', '        _withdrawSome(balanceOfPool());\n', '    }\n', '\n', '    function _withdrawSome(uint256 _amount) internal virtual returns (uint256);\t\n', '\t\n', '    // convert LP to buyback principle token\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal virtual returns (address, uint256);\n', '\n', '    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\n', '    function harvest() public virtual;\n', '\n', '    // **** Emergency functions ****\n', '\n', '    function execute(address _target, bytes memory _data)\n', '        public\n', '        payable\n', '        returns (bytes memory response)\n', '    {\n', '        require(msg.sender == timelock, "!timelock");\n', '        require(_target != address(0), "!target");\n', '\n', '        // call contract in current context\n', '        assembly {\n', '            let succeeded := delegatecall(\n', '                sub(gas(), 5000),\n', '                _target,\n', '                add(_data, 0x20),\n', '                mload(_data),\n', '                0,\n', '                0\n', '            )\n', '            let size := returndatasize()\n', '\n', '            response := mload(0x40)\n', '            mstore(\n', '                0x40,\n', '                add(response, and(add(add(size, 0x20), 0x1f), not(0x1f)))\n', '            )\n', '            mstore(response, size)\n', '            returndatacopy(add(response, 0x20), 0, size)\n', '\n', '            switch iszero(succeeded)\n', '                case 1 {\n', '                    // throw if delegatecall failed\n', '                    revert(add(response, 0x20), size)\n', '                }\n', '        }\n', '    }\n', '\n', '    // **** Internal functions ****\n', '\t\n', '    function figureOutPath(address _from, address _to, uint256 _amount) public view returns (bool useSushi, address[] memory swapPath){\n', '        address[] memory path;\n', '        address[] memory sushipath;\n', '\t\t\n', '        if (_to == mmToken && buybackEnabled == true) {\n', '            path = new address[](2);\n', '            path[0] = _from;\n', '            path[1] = _to;\n', '            \n', '            sushipath = new address[](2);\n', '            sushipath[0] = _from;\n', '            sushipath[1] = _to;\n', '        } else{\n', '            if (_from == weth || _to == weth) {\n', '                path = new address[](2);\n', '                path[0] = _from;\n', '                path[1] = _to;\n', '            }else{\n', '                path = new address[](3);\n', '                path[0] = _from;\n', '                path[1] = weth;\n', '                path[2] = _to;\n', '            }\n', '        }\n', '\n', '        uint256 _sushiOut = sushipath.length > 0? UniswapRouterV2(sushiRouter).getAmountsOut(_amount, sushipath)[sushipath.length - 1] : 0;\n', '        uint256 _uniOut = sushipath.length > 0? UniswapRouterV2(univ2Router2).getAmountsOut(_amount, path)[path.length - 1] : 1;\n', '\n', '        bool useSushi = _sushiOut > _uniOut? true : false;\t\t\n', '        address[] memory swapPath = useSushi ? sushipath : path;\n', '\t\t\n', '        return (useSushi, swapPath);\n', '    }\n', '\t\n', '    function _swapUniswapWithRouterMinOut(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount,\n', '        uint256 _amountOutMin,\n', '        address _router\n', '    ) internal {\n', '        (, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\t\t\n', '        _swapUniswapWithDetailConfig(_from, _to, _amount, _amountOutMin, swapPath, _router);\n', '    }\n', '\t\n', '    function _swapUniswapWithRouter(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount,\n', '        address _router\n', '    ) internal {\n', '        (, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\t\t\n', '        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\n', '    }\n', '\t\n', '    function _swapUniswap(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount\n', '    ) internal {\n', '        (bool useSushi, address[] memory swapPath) = figureOutPath(_from, _to, _amount);\n', '        address _router = useSushi? sushiRouter : univ2Router2;\n', '\t\t\n', '        _swapUniswapWithDetailConfig(_from, _to, _amount, 1, swapPath, _router);\n', '    }\n', '\t\n', '    function _swapUniswapWithDetailConfig(\n', '        address _from,\n', '        address _to,\n', '        uint256 _amount,\n', '        uint256 _amountOutMin,\n', '        address[] memory _swapPath,\n', '        address _router\n', '    ) internal {\n', "        require(_to != address(0), '!invalidOutToken');\n", "        require(_router != address(0), '!swapRouter');\n", "        require(IERC20(_from).balanceOf(address(this)) >= _amount, '!notEnoughtAmountIn');\n", '\n', '        if (_amount > 0){\t\t\t\n', '            IERC20(_from).safeApprove(_router, 0);\n', '            IERC20(_from).safeApprove(_router, _amount);\n', '\n', '            UniswapRouterV2(_router).swapExactTokensForTokens(\n', '                _amount,\n', '                _amountOutMin,\n', '                _swapPath,\n', '                address(this),\n', '                now\n', '            );\n', '        }\n', '    }\n', '\n', '}\n', '\n', 'interface AggregatorV3Interface {\n', '  \n', '    function latestRoundData() external view returns (\n', '        uint80 roundId,\n', '        int256 answer,\n', '        uint256 startedAt,\n', '        uint256 updatedAt,\n', '        uint80 answeredInRound\n', '    );\n', '\n', '}\n', '\n', '\n', 'contract StratYvBOOSTPickle is StrategyBase {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    address public constant yveCRV = 0xc5bDdf9843308380375a611c18B50Fb9341f502A;\n', '    address public constant yvBOOST = 0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a;\n', '    address public constant pickle = 0x429881672B9AE42b8EbA0E26cD9C73711b891Ca5;\n', '    address public constant pickleJar = 0xCeD67a187b923F0E5ebcc77C7f2F7da20099e378;\n', '    address public constant pickleGauge = 0xDA481b277dCe305B97F4091bD66595d57CF31634;\n', '    address public constant yvBOOSTSLP = 0x9461173740D27311b176476FA27e94C681b1Ea6b;\n', '    address public constant ethusdChainlink = 0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419;\n', '    address public constant crvusdChainlink = 0xCd627aA160A6fA45Eb793D19Ef54f5062F20f33f;\n', '\t\n', '    uint256 public yvBOOSTWithdrawFee = 200;\n', '    uint256 public yvBOOSTSwapSlippage = 2000;\n', '    uint256 public yvBOOSTAddLpSlippage = 1000;\n', '    uint256 public yvBOOSTRemoveLpSlippage = 1000;\n', '    uint256 public constant MAX_BPS = 10000;\t\n', '    uint256 public constant yvBOOSTDecimalMultiplier = 1e18;\t\n', '\n', '    mapping(address => bool) public keepers;\n', '\n', '    modifier onlyKeepers {\n', '        require(keepers[msg.sender] || msg.sender == governance, "!keepers");\n', '        _;\n', '    }\n', '\t\n', '    modifier onlyGovernance {\n', '        require(msg.sender == governance, "!governance");\n', '        _;\n', '    }\n', '\n', '    constructor(\n', '        address _want,\n', '        address _governance,\n', '        address _strategist,\n', '        address _controller,\n', '        address _timelock\n', '    )\n', '        public\n', '        StrategyBase(_want, _governance, _strategist, _controller, _timelock)\n', '    {\t\t\t\t\n', "        require(_want == yveCRV, '!invalidWant');\n", '        IERC20(yveCRV).approve(yvBOOST, uint256(-1));\n', '\t\t\n', '        IERC20(yvBOOSTSLP).approve(pickleJar, uint256(-1));\n', '        IERC20(pickleJar).approve(pickleGauge, uint256(-1));\n', '\t\t\n', '        IERC20(yvBOOSTSLP).approve(sushiRouter, uint256(-1));\t\n', '    }\n', '\n', '    function setYvBOOSTRemoveLpSlippage(uint256 _val) public onlyGovernance{\n', '        yvBOOSTRemoveLpSlippage = _val;\n', '    }\n', '\n', '    function setYvBOOSTSwapSlippage(uint256 _val) public onlyGovernance{\n', '        yvBOOSTSwapSlippage = _val;\n', '    }\n', '\n', '    function setYvBOOSTAddLpSlippage(uint256 _val) public onlyGovernance{\n', '        yvBOOSTAddLpSlippage = _val;\n', '    }\n', '\n', '    function setYvBOOSTWithdrawFee(uint256 _val) public onlyGovernance{\n', '        yvBOOSTWithdrawFee = _val;\n', '    }\n', '\n', '    function setKeeper(address _keeper, bool _enable) public onlyGovernance{\n', '        keepers[_keeper] = _enable;\n', '    }\n', '\n', '    // return earned but not claimed $PICKLE\n', '    function getHarvestable() external returns (uint256) {\n', '        return IPickleFarmingGauge(pickleGauge).earned(address(this));\n', '    }\n', '\t\n', '    // return estimate of yvCRV \n', '    // from Sushiswap LP position \n', '    // and PickleJar & yvBOOST ratio\n', '    function balanceOfPool() public override view returns (uint256){\n', '        uint256 pjarInGauge = IPickleFarmingGauge(pickleGauge).balanceOf(address(this));\n', '        uint256 slpInPickle = pjarInGauge.add(IERC20(pickleJar).balanceOf(address(this))).mul(IPickleJar(pickleJar).getRatio()).div(1e18);\t\t\n', '        uint256 slpInPool = slpInPickle.add(IERC20(yvBOOSTSLP).balanceOf(address(this)));\n', '\t\t\n', '        uint256 slpTotalSupply = IUniswapV2Pair(yvBOOSTSLP).totalSupply();\n', '        uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\n', '        (uint256 yvBOOSTRes, uint256 ethRes) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\n', '        uint256 yvBOOSTEstimate = slpInPool.mul(yvBOOSTRes).div(slpTotalSupply);\n', '        uint256 ethEstimate = slpInPool.mul(ethRes).div(slpTotalSupply);\n', '\t\t\n', '        uint256 yvBOOSTInPool = yvBOOSTEstimate.add(ethEstimate.mul(MAX_BPS).div(_yvBOOSTPriceInETH));\n', '        return yvBOOSTInPool.mul(IYvBOOSTVault(yvBOOST).pricePerShare()).div(yvBOOSTDecimalMultiplier);\t\n', '    }\n', '\t\n', '    // deposit into yvBOOST and \n', '    // gain LP in Sushiswap then \n', '    // deposit into PickleJar & PickleGauge \n', '    function deposit() public override{\n', '        uint256 _yveCRV = IERC20(yveCRV).balanceOf(address(this));\n', '        \n', '        if (_yveCRV > 0){\n', '            IYvBOOSTVault(yvBOOST).deposit(_yveCRV, address(this));\n', '            uint256 _yvBOOST = IERC20(yvBOOST).balanceOf(address(this));\n', '\t\t\t\n', '            // swap some yvBOOST for WETH pairing\n', '            uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\n', '            (uint256 _yvBOOSTRes, ) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\n', '            uint256 _swapAmt = UniswapV2SingleSided.calculateSingleSidedAmt(_yvBOOST, _yvBOOSTRes);\t\n', '\t\t\t\n', '            uint256 _weth = IERC20(weth).balanceOf(address(this));\n', '            _swapUniswapWithRouterMinOut(yvBOOST, weth, _swapAmt, _swapAmt.mul(_yvBOOSTPriceInETH).div(MAX_BPS).mul(MAX_BPS.sub(yvBOOSTSwapSlippage)).div(MAX_BPS), sushiRouter);\t\t\t\n', '            uint256 _wethAfter = IERC20(weth).balanceOf(address(this));\n', '\t\t\t\n', '            uint256 _pairedYvBOOST = _yvBOOST.sub(_swapAmt);\t\n', '            uint256 _pairedWETH = _wethAfter.sub(_weth);\n', '\t\t\n', '            IERC20(yvBOOST).approve(sushiRouter, 0);\n', '            IERC20(yvBOOST).approve(sushiRouter, _pairedYvBOOST);\n', '            IERC20(weth).approve(sushiRouter, 0);\n', '            IERC20(weth).approve(sushiRouter, _pairedWETH);\n', '\t\t\n', '            UniswapRouterV2(sushiRouter).addLiquidity(yvBOOST, weth, _pairedYvBOOST, _pairedWETH, \n', '                                                      _pairedYvBOOST.mul(MAX_BPS.sub(yvBOOSTAddLpSlippage)).div(MAX_BPS),\n', '                                                      _pairedWETH.mul(MAX_BPS.sub(yvBOOSTAddLpSlippage)).div(MAX_BPS), \n', '                                                      address(this), now);\n', '\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t \n', '            IPickleJar(pickleJar).depositAll();\n', '            IERC20(pickleJar).balanceOf(address(this));\t\t\n', '            IPickleFarmingGauge(pickleGauge).depositAll();\t\t\n', '        }\t\t\t\n', '    }\n', '\t\n', '    function _withdrawAllAsset(uint256 yvBOOSTRes, uint256 wethRes, uint256 slpTotalSupply, uint256 _wantBefore, uint256 _yvBOOSTPriceInETH) internal {\n', '        IPickleFarmingGauge(pickleGauge).withdrawAll();\n', '        IPickleJar(pickleJar).withdrawAll();\n', '\t\t\t\n', '        _removeSLPAndGetYvBOOST(IERC20(yvBOOSTSLP).balanceOf(address(this)), yvBOOSTRes, wethRes, slpTotalSupply, _yvBOOSTPriceInETH);\n', '\n', '        IYvBOOSTVault(yvBOOST).withdraw(IERC20(yvBOOST).balanceOf(address(this)), address(this), yvBOOSTWithdrawFee);\n', '    }\n', '\t\n', '    function _removeSLPAndGetYvBOOST(uint256 _diSLP, uint256 yvBOOSTRes, uint256 wethRes, uint256 slpTotalSupply, uint256 _yvBOOSTPriceInETH) internal returns (uint256, uint256){\n', '        uint256 _removeSLPSlippageMultiplier = MAX_BPS.sub(yvBOOSTRemoveLpSlippage); \n', '        uint256 _yvBOOSTMinReceived = _diSLP.mul(yvBOOSTRes).div(slpTotalSupply);\n', '        uint256 _wethMinReceived = _diSLP.mul(wethRes).div(slpTotalSupply);\n', '        (uint256 _divestedYvBOOST, uint256 _divestedETH) = UniswapRouterV2(sushiRouter).removeLiquidity(yvBOOST, weth, _diSLP, \n', '                                                                                                        _yvBOOSTMinReceived.mul(_removeSLPSlippageMultiplier).div(MAX_BPS),\n', '                                                                                                        _wethMinReceived.mul(_removeSLPSlippageMultiplier).div(MAX_BPS),\n', '                                                                                                        address(this), now);\n', '\n', '        uint256 _slippageMultiplier = MAX_BPS.sub(yvBOOSTSwapSlippage); \n', '        uint256 _minOut = _divestedETH.mul(MAX_BPS).div(_yvBOOSTPriceInETH);\n', '        _minOut = _minOut.mul(_slippageMultiplier).div(MAX_BPS);\n', '        _swapUniswapWithRouterMinOut(weth, yvBOOST, _divestedETH, _minOut, sushiRouter);\n', '\n', '        return (_divestedYvBOOST, _divestedETH);\t\t\n', '    }\n', '\t\n', '    function _withdrawFromPickle(uint256 _slpRequired, uint256 _slp) internal {\n', '        uint256 _diffSlp = _slpRequired.sub(_slp);\n', '\t\t\t\t\t\n', '        // https://etherscan.io/address/0xCeD67a187b923F0E5ebcc77C7f2F7da20099e378#code#F5#L129\n', '        uint256 _requiredPJar = _diffSlp.mul(1e18).div(IPickleJar(pickleJar).getRatio());\t\t\t\t\t\n', '        uint256 _pickleJar = IERC20(pickleJar).balanceOf(address(this));\n', '\t\t\t\t\t\n', '        if (_pickleJar < _requiredPJar){\n', '            uint256 _diffPJar = _requiredPJar.sub(_pickleJar);\n', '\t\t\t\t\t\t\n', '            uint256 _maxStaked = IPickleFarmingGauge(pickleGauge).balanceOf(address(this));\n', '            _diffPJar = _diffPJar > _maxStaked? _maxStaked : _diffPJar;\n', '            IPickleFarmingGauge(pickleGauge).withdraw(_diffPJar);\n', '        }\t\t\n', '\n', '        IPickleJar(pickleJar).withdraw(IERC20(pickleJar).balanceOf(address(this)));\n', '    }\n', '\t\n', '    // withdraw from PickleGauge & PicleJar then \n', '    // remove liquidity from Sushiswap to swap back for yvBOOST\n', '    // and lastly withdraw from yvBOOST to get back yveCRV\n', '    function _withdrawSome(uint256 _amount) internal override returns (uint256){\n', '        if (_amount == 0){\n', '            return 0;\n', '        }\n', '\t\t\n', '        uint256 _yvBOOSTPriceInETH = estimateYvBOOSTPriceInETH();\n', '        (uint256 yvBOOSTRes, uint256 wethRes) = fairYvBOOSTSLPReserves(_yvBOOSTPriceInETH);\n', '        uint256 slpTotalSupply = IUniswapV2Pair(yvBOOSTSLP).totalSupply();\t\n', '\t\t\n', '        uint256 _wantBefore = IERC20(want).balanceOf(address(this));\n', '\t\t\n', '        if (_amount >= balanceOfPool()){\n', '            _withdrawAllAsset(yvBOOSTRes, wethRes, slpTotalSupply, _wantBefore, _yvBOOSTPriceInETH);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n', '        }else if (_wantBefore < _amount){\t\t\t\t\n', '            uint256 _requiredYvBOOST = _amount.sub(_wantBefore).mul(yvBOOSTDecimalMultiplier).div(IYvBOOSTVault(yvBOOST).pricePerShare());\t\t\t\t\n', '            uint256 _yvBOOST = IERC20(yvBOOST).balanceOf(address(this));\n', '            if (_yvBOOST < _requiredYvBOOST){\n', '                uint256 _slpRequired = _requiredYvBOOST.sub(_yvBOOST).mul(slpTotalSupply).div(yvBOOSTRes);\n', '                uint256 _slpRmoveMultiplier = MAX_BPS.add(yvBOOSTAddLpSlippage);\n', '                _slpRequired = _slpRequired.mul(_slpRmoveMultiplier).div(MAX_BPS);//try to remove a bit more\t\t\t\t\t\t\n', '                uint256 _slp = IERC20(yvBOOSTSLP).balanceOf(address(this));\n', '\t\t\t\t\n', '                if (_slp < _slpRequired){\n', '                    _withdrawFromPickle(_slpRequired, _slp);\n', '                }\t\n', '\t\t\t\t\n', '                uint256 _diSLP = IERC20(yvBOOSTSLP).balanceOf(address(this));\n', '                _removeSLPAndGetYvBOOST(_diSLP, yvBOOSTRes, wethRes, slpTotalSupply, _yvBOOSTPriceInETH);\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n', '            }\n', '\t\t\t\n', '            IYvBOOSTVault(yvBOOST).withdraw(IERC20(yvBOOST).balanceOf(address(this)), address(this), yvBOOSTWithdrawFee);\t\t\t\n', '        }\n', '\t\t\t\t\t\n', '        uint256 _divested = IERC20(want).balanceOf(address(this)).sub(_wantBefore);\t\t\t\t\n', '        return _divested > _amount? _amount : _divested;\n', '    }\t\n', '\t\n', '    // convert yveCRV to ETH\n', '    function _convertWantToBuyback(uint256 _lpAmount) internal override returns (address, uint256){\n', '        uint256 _weth = IERC20(weth).balanceOf(address(this));\n', '        uint256 _yveCRVPriceInETH = estimateYveCRVPriceInETH();\n', '        \n', '        uint256 _slippageMultiplier = MAX_BPS.sub(yvBOOSTSwapSlippage);\n', '        uint256 _minOut = _lpAmount.mul(_yveCRVPriceInETH).div(MAX_BPS);\n', '        _minOut = _minOut.mul(_slippageMultiplier).div(MAX_BPS);\n', '        \n', '        _swapUniswapWithRouterMinOut(yveCRV, weth, _lpAmount, _minOut, sushiRouter);\n', '        uint256 _wethAfter = IERC20(weth).balanceOf(address(this));\n', '\t\t\n', "        require(_wethAfter >= _weth, '!mismatchAfterSwapWant');\t\t\n", '        return (weth, _wethAfter.sub(_weth));\n', '    }\n', '\n', '    // each harvest need to update `lastHarvestBlock=block.number` and `lastHarvestInWant=yield profit converted to want for re-invest`\n', '    function harvest() public override onlyKeepers{\n', '\t\n', '        IPickleFarmingGauge(pickleGauge).getReward();\n', '        uint256 _pickle = IERC20(pickle).balanceOf(address(this));\n', '        if (_pickle > 0){\n', '            _swapUniswapWithRouter(pickle, weth, _pickle, univ2Router2);\n', '            uint256 _weth = IERC20(weth).balanceOf(address(this));\n', '\t\t    \n', '            uint256 _buybackLpAmount = _weth.mul(performanceFee).div(performanceMax);\t\t\t\n', '            if (buybackEnabled == true && _buybackLpAmount > 0){\n', '                buybackAndNotify(weth, _buybackLpAmount);\n', '            }\n', '            \n', '            uint256 _restETH = _weth.sub(_buybackLpAmount);\n', '            uint256 _yveCRVPriceInETH = estimateYveCRVPriceInETH();\n', '            _swapUniswapWithRouterMinOut(weth, yveCRV, _restETH, _restETH.mul(MAX_BPS).div(_yveCRVPriceInETH).mul(MAX_BPS.sub(yvBOOSTSwapSlippage)).div(MAX_BPS), sushiRouter);\n', '            uint256 _want = IERC20(want).balanceOf(address(this));\n', '            if (_want > 0){\n', '                lastHarvestBlock = block.number;\n', '                lastHarvestInWant = _want;\n', '                deposit();\t\t\n', '            }\n', '        }\t\t\n', '    }\n', '\n', '    // Controller only function for creating additional rewards from dust\n', '    function withdraw(IERC20 _asset) external override returns (uint256 balance) {\n', '        require(yvBOOST != address(_asset), "!yvBOOST");\n', '        require(pickleJar != address(_asset), "!pickleJar");\n', '        require(yvBOOSTSLP != address(_asset), "!yvBOOSTSLP");\n', '        balance = _withdrawNonWantAsset(_asset);\n', '    }\t\n', '\n', '    function getName() public override pure returns(string memory){\n', '        return "StratYvBOOSTPickle";\n', '    }\n', '\t\n', '    function fairYvBOOSTSLPReserves(uint256 _yvBOOSTPriceInETH) public view returns(uint256, uint256){\n', '        (uint resA, uint resB, ) = IUniswapV2Pair(yvBOOSTSLP).getReserves();\n', '        return UniswapV2SingleSided.calcFairReserves(resA.mul(resB), _yvBOOSTPriceInETH);\t\n', '    }\n', '\t\n', '    function fairYvBOOSTSLPReserves() public view returns(uint256, uint256){\n', '        return fairYvBOOSTSLPReserves(estimateYvBOOSTPriceInETH());\t\n', '    }\n', '\t\n', '    function estimateYvBOOSTPriceInETH() public view returns(uint256){\n', '        (,int ethprice,,,) = AggregatorV3Interface(ethusdChainlink).latestRoundData();\n', '        (,int crvprice,,,) = AggregatorV3Interface(crvusdChainlink).latestRoundData();// assuming 1 crv = 1 yveCRV\n', '        uint256 pps = IYvBOOSTVault(yvBOOST).pricePerShare();\n', '        // https://etherscan.io/address/0x9d409a0A012CFbA9B15F6D4B36Ac57A46966Ab9a#code#L1119\n', '        uint256 yvBOOSTPrice = uint256(crvprice).mul(yvBOOSTDecimalMultiplier).div(pps);\n', '        return yvBOOSTPrice.mul(MAX_BPS).div(uint256(ethprice));\n', '    }\n', '\t\n', '    function estimateYveCRVPriceInETH() public view returns(uint256){\n', '        (,int ethprice,,,) = AggregatorV3Interface(ethusdChainlink).latestRoundData();\n', '        (,int crvprice,,,) = AggregatorV3Interface(crvusdChainlink).latestRoundData();// assuming 1 crv = 1 yveCRV\n', '        return uint256(crvprice).mul(MAX_BPS).div(uint256(ethprice));\n', '    }\n', '\n', '}']