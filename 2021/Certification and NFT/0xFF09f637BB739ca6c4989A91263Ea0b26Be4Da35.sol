['// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "./AddressRegistryParent.sol";\n', 'import "../IDerivativeSpecification.sol";\n', '\n', 'contract DerivativeSpecificationRegistry is AddressRegistryParent {\n', '    mapping(bytes32 => bool) internal _uniqueFieldsHashMap;\n', '\n', '    function generateKey(address _value)\n', '        public\n', '        view\n', '        override\n', '        returns (bytes32 _key)\n', '    {\n', '        return\n', '            keccak256(\n', '                abi.encodePacked(IDerivativeSpecification(_value).symbol())\n', '            );\n', '    }\n', '\n', '    function _check(bytes32 _key, address _value) internal virtual override {\n', '        super._check(_key, _value);\n', '        IDerivativeSpecification derivative = IDerivativeSpecification(_value);\n', '        require(\n', '            derivative.isDerivativeSpecification(),\n', '            "Should be derivative specification"\n', '        );\n', '\n', '        bytes32 uniqueFieldsHash =\n', '            keccak256(\n', '                abi.encode(\n', '                    derivative.oracleSymbols(),\n', '                    derivative.oracleIteratorSymbols(),\n', '                    derivative.collateralTokenSymbol(),\n', '                    derivative.collateralSplitSymbol(),\n', '                    derivative.livePeriod(),\n', '                    derivative.primaryNominalValue(),\n', '                    derivative.complementNominalValue(),\n', '                    derivative.authorFee()\n', '                )\n', '            );\n', '\n', '        require(!_uniqueFieldsHashMap[uniqueFieldsHash], "Same spec params");\n', '\n', '        _uniqueFieldsHashMap[uniqueFieldsHash] = true;\n', '    }\n', '}\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', 'pragma solidity 0.7.6;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./IAddressRegistry.sol";\n', '\n', 'abstract contract AddressRegistryParent is Ownable, IAddressRegistry {\n', '    mapping(bytes32 => address) internal _registry;\n', '\n', '    event AddressAdded(bytes32 _key, address _value);\n', '\n', '    function generateKey(address _value)\n', '        public\n', '        view\n', '        virtual\n', '        returns (bytes32 _key)\n', '    {\n', '        return keccak256(abi.encodePacked(_value));\n', '    }\n', '\n', '    function set(address _value) external override onlyOwner() {\n', '        bytes32 key = generateKey(_value);\n', '        _check(key, _value);\n', '        emit AddressAdded(key, _value);\n', '        _registry[key] = _value;\n', '    }\n', '\n', '    function get(bytes32 _key) external view override returns (address) {\n', '        return _registry[_key];\n', '    }\n', '\n', '    function _check(bytes32 _key, address _value) internal virtual {\n', '        require(_value != address(0), "Nullable address");\n', '        require(_registry[_key] == address(0), "Key already exists");\n', '    }\n', '}\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/// @title Derivative Specification interface\n', '/// @notice Immutable collection of derivative attributes\n', "/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\n", 'interface IDerivativeSpecification {\n', '    /// @notice Proof of a derivative specification\n', '    /// @dev Verifies that contract is a derivative specification\n', '    /// @return true if contract is a derivative specification\n', '    function isDerivativeSpecification() external pure returns (bool);\n', '\n', '    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\n', '    /// between the start and the end of the Live period\n', '    /// @dev Should be resolved through OracleRegistry contract\n', '    /// @return oracle symbols\n', '    function oracleSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    /// finds the value closest to a given timestamp\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbols\n', '    function oracleIteratorSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Type of collateral that users submit to mint the derivative\n', '    /// @dev Should be resolved through CollateralTokenRegistry contract\n', '    /// @return collateral token symbol\n', '    function collateralTokenSymbol() external view returns (bytes32);\n', '\n', '    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\n', '    /// and the initial collateral split to the final collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split symbol\n', '    function collateralSplitSymbol() external view returns (bytes32);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\n", '    /// @dev Set in seconds\n', '    /// @return live period value\n', '    function livePeriod() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of primary asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\n', '    /// @return primary nominal value\n', '    function primaryNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of complement asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\n', '    /// @return complement nominal value\n', '    function complementNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Minting fee rate due to the author of the derivative specification.\n', '    /// @dev Percentage fee multiplied by 10 ^ 12\n', '    /// @return author fee\n', '    function authorFee() external view returns (uint256);\n', '\n', '    /// @notice Symbol of the derivative\n', '    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\n', '    /// @return derivative specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Return optional long name of the derivative\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return long name\n', '    function name() external view returns (string memory);\n', '\n', '    /// @notice Optional URI to the derivative specs\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return URI to the derivative specs\n', '    function baseURI() external view returns (string memory);\n', '\n', '    /// @notice Derivative spec author\n', "    /// @dev Used to set and receive author's fee\n", '    /// @return address of the author\n', '    function author() external view returns (address);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'interface IAddressRegistry {\n', '    function get(bytes32 _key) external view returns (address);\n', '\n', '    function set(address _value) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']