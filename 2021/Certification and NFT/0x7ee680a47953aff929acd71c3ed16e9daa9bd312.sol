['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-06\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @uniswap/v2-core/contracts/interfaces/[email\xa0protected]\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IUniswapV2Pair {\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    function name() external pure returns (string memory);\n', '    function symbol() external pure returns (string memory);\n', '    function decimals() external pure returns (uint8);\n', '    function totalSupply() external view returns (uint);\n', '    function balanceOf(address owner) external view returns (uint);\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transfer(address to, uint value) external returns (bool);\n', '    function transferFrom(address from, address to, uint value) external returns (bool);\n', '\n', '    function DOMAIN_SEPARATOR() external view returns (bytes32);\n', '    function PERMIT_TYPEHASH() external pure returns (bytes32);\n', '    function nonces(address owner) external view returns (uint);\n', '\n', '    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    event Mint(address indexed sender, uint amount0, uint amount1);\n', '    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n', '    event Swap(\n', '        address indexed sender,\n', '        uint amount0In,\n', '        uint amount1In,\n', '        uint amount0Out,\n', '        uint amount1Out,\n', '        address indexed to\n', '    );\n', '    event Sync(uint112 reserve0, uint112 reserve1);\n', '\n', '    function MINIMUM_LIQUIDITY() external pure returns (uint);\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function price0CumulativeLast() external view returns (uint);\n', '    function price1CumulativeLast() external view returns (uint);\n', '    function kLast() external view returns (uint);\n', '\n', '    function mint(address to) external returns (uint liquidity);\n', '    function burn(address to) external returns (uint amount0, uint amount1);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '    function skim(address to) external;\n', '    function sync() external;\n', '\n', '    function initialize(address, address) external;\n', '}\n', '\n', '\n', '// File contracts/external/UniswapV2Library.sol\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', '\n', 'library UniswapV2Library {\n', '    using SafeMath for uint256;\n', '\n', '    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n', '    function sortTokens(address tokenA, address tokenB)\n', '        internal\n', '        pure\n', '        returns (address token0, address token1)\n', '    {\n', '        require(tokenA != tokenB, "UniswapV2Library: IDENTICAL_ADDRESSES");\n', '        (token0, token1) = tokenA < tokenB\n', '            ? (tokenA, tokenB)\n', '            : (tokenB, tokenA);\n', '        require(token0 != address(0), "UniswapV2Library: ZERO_ADDRESS");\n', '    }\n', '\n', '    // calculates the CREATE2 address for a pair without making any external calls\n', '    function pairFor(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal pure returns (address pair) {\n', '        (address token0, address token1) = sortTokens(tokenA, tokenB);\n', '        pair = address(\n', '            uint256(\n', '                keccak256(\n', '                    abi.encodePacked(\n', '                        hex"ff",\n', '                        factory,\n', '                        keccak256(abi.encodePacked(token0, token1)),\n', '                        hex"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f" // init code hash\n', '                    )\n', '                )\n', '            )\n', '        );\n', '    }\n', '\n', '    // fetches and sorts the reserves for a pair\n', '    function getReserves(\n', '        address factory,\n', '        address tokenA,\n', '        address tokenB\n', '    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n', '        (address token0, ) = sortTokens(tokenA, tokenB);\n', '        (uint256 reserve0, uint256 reserve1, ) =\n', '            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\n', '        (reserveA, reserveB) = tokenA == token0\n', '            ? (reserve0, reserve1)\n', '            : (reserve1, reserve0);\n', '    }\n', '\n', '    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\n', '    function quote(\n', '        uint256 amountA,\n', '        uint256 reserveA,\n', '        uint256 reserveB\n', '    ) internal pure returns (uint256 amountB) {\n', '        require(amountA > 0, "UniswapV2Library: INSUFFICIENT_AMOUNT");\n', '        require(\n', '            reserveA > 0 && reserveB > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        amountB = amountA.mul(reserveB) / reserveA;\n', '    }\n', '\n', '    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n', '    function getAmountOut(\n', '        uint256 amountIn,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountOut) {\n', '        require(amountIn > 0, "UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        uint256 numerator = amountInWithFee.mul(reserveOut);\n', '        uint256 denominator = reserveIn.mul(1000).add(amountInWithFee);\n', '        amountOut = numerator / denominator;\n', '    }\n', '\n', '    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n', '    function getAmountIn(\n', '        uint256 amountOut,\n', '        uint256 reserveIn,\n', '        uint256 reserveOut\n', '    ) internal pure returns (uint256 amountIn) {\n', '        require(amountOut > 0, "UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT");\n', '        require(\n', '            reserveIn > 0 && reserveOut > 0,\n', '            "UniswapV2Library: INSUFFICIENT_LIQUIDITY"\n', '        );\n', '        uint256 numerator = reserveIn.mul(amountOut).mul(1000);\n', '        uint256 denominator = reserveOut.sub(amountOut).mul(997);\n', '        amountIn = (numerator / denominator).add(1);\n', '    }\n', '\n', '    // performs chained getAmountOut calculations on any number of pairs\n', '    function getAmountsOut(\n', '        address factory,\n', '        uint256 amountIn,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[0] = amountIn;\n', '        for (uint256 i; i < path.length - 1; i++) {\n', '            (uint256 reserveIn, uint256 reserveOut) =\n', '                getReserves(factory, path[i], path[i + 1]);\n', '            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '\n', '    // performs chained getAmountIn calculations on any number of pairs\n', '    function getAmountsIn(\n', '        address factory,\n', '        uint256 amountOut,\n', '        address[] memory path\n', '    ) internal view returns (uint256[] memory amounts) {\n', '        require(path.length >= 2, "UniswapV2Library: INVALID_PATH");\n', '        amounts = new uint256[](path.length);\n', '        amounts[amounts.length - 1] = amountOut;\n', '        for (uint256 i = path.length - 1; i > 0; i--) {\n', '            (uint256 reserveIn, uint256 reserveOut) =\n', '                getReserves(factory, path[i - 1], path[i]);\n', '            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/core/Constants.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'library Constants {\n', '    /* Pool */\n', '    uint256 private constant INITIAL_STAKE_MULTIPLE = 1e6;\n', '    uint256 private constant VESTING_DURATION = 14; //180 days (6 months)\n', '    uint32 private constant VESTING_INTERVAL = 2; //30 days (1 month)\n', '    uint256 private constant STAKE_LOCKUP_DURATION = 30; //30 days (1 month)\n', '\n', '    /**\n', '     * Getters\n', '     */\n', '    function getInitialStakeMultiple() internal pure returns (uint256) {\n', '        return INITIAL_STAKE_MULTIPLE;\n', '    }\n', '\n', '    function getVestingDuration() internal pure returns (uint256) {\n', '        return VESTING_DURATION;\n', '    }\n', '\n', '    function getVestingInterval() internal pure returns (uint32) {\n', '        return VESTING_INTERVAL;\n', '    }\n', '\n', '    function getStakeLockupDuration() internal pure returns (uint256) {\n', '        return STAKE_LOCKUP_DURATION;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev Contract module that allows children to implement role-based access\n', ' * control mechanisms.\n', ' *\n', ' * Roles are referred to by their `bytes32` identifier. These should be exposed\n', ' * in the external API and be unique. The best way to achieve this is by\n', ' * using `public constant` hash digests:\n', ' *\n', ' * ```\n', ' * bytes32 public constant MY_ROLE = keccak256("MY_ROLE");\n', ' * ```\n', ' *\n', ' * Roles can be used to represent a set of permissions. To restrict access to a\n', ' * function call, use {hasRole}:\n', ' *\n', ' * ```\n', ' * function foo() public {\n', ' *     require(hasRole(MY_ROLE, msg.sender));\n', ' *     ...\n', ' * }\n', ' * ```\n', ' *\n', ' * Roles can be granted and revoked dynamically via the {grantRole} and\n', ' * {revokeRole} functions. Each role has an associated admin role, and only\n', " * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n", ' *\n', ' * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n', ' * that only accounts with this role will be able to grant or revoke other\n', ' * roles. More complex role relationships can be created by using\n', ' * {_setRoleAdmin}.\n', ' *\n', ' * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n', ' * grant and revoke this role. Extra precautions should be taken to secure\n', ' * accounts that have been granted it.\n', ' */\n', 'abstract contract AccessControl is Context {\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '    using Address for address;\n', '\n', '    struct RoleData {\n', '        EnumerableSet.AddressSet members;\n', '        bytes32 adminRole;\n', '    }\n', '\n', '    mapping (bytes32 => RoleData) private _roles;\n', '\n', '    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n', '\n', '    /**\n', "     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n", '     *\n', '     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n', '     * {RoleAdminChanged} not being emitted signaling this.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is granted `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call, an admin role\n', '     * bearer except when using {_setupRole}.\n', '     */\n', '    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Emitted when `account` is revoked `role`.\n', '     *\n', '     * `sender` is the account that originated the contract call:\n', '     *   - if using `revokeRole`, it is the admin role bearer\n', '     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n', '     */\n', '    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n', '\n', '    /**\n', '     * @dev Returns `true` if `account` has been granted `role`.\n', '     */\n', '    function hasRole(bytes32 role, address account) public view returns (bool) {\n', '        return _roles[role].members.contains(account);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of accounts that have `role`. Can be used\n', '     * together with {getRoleMember} to enumerate all bearers of a role.\n', '     */\n', '    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\n', '        return _roles[role].members.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns one of the accounts that have `role`. `index` must be a\n', '     * value between 0 and {getRoleMemberCount}, non-inclusive.\n', '     *\n', '     * Role bearers are not sorted in any particular way, and their ordering may\n', '     * change at any point.\n', '     *\n', '     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\n', '     * you perform all queries on the same block. See the following\n', '     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\n', '     * for more information.\n', '     */\n', '    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\n', '        return _roles[role].members.at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the admin role that controls `role`. See {grantRole} and\n', '     * {revokeRole}.\n', '     *\n', "     * To change a role's admin, use {_setRoleAdmin}.\n", '     */\n', '    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\n', '        return _roles[role].adminRole;\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function grantRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to grant");\n', '\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from `account`.\n', '     *\n', '     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n', '     *\n', '     * Requirements:\n', '     *\n', "     * - the caller must have ``role``'s admin role.\n", '     */\n', '    function revokeRole(bytes32 role, address account) public virtual {\n', '        require(hasRole(_roles[role].adminRole, _msgSender()), "AccessControl: sender must be an admin to revoke");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Revokes `role` from the calling account.\n', '     *\n', "     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n", '     * purpose is to provide a mechanism for accounts to lose their privileges\n', '     * if they are compromised (such as when a trusted device is misplaced).\n', '     *\n', '     * If the calling account had been granted `role`, emits a {RoleRevoked}\n', '     * event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the caller must be `account`.\n', '     */\n', '    function renounceRole(bytes32 role, address account) public virtual {\n', '        require(account == _msgSender(), "AccessControl: can only renounce roles for self");\n', '\n', '        _revokeRole(role, account);\n', '    }\n', '\n', '    /**\n', '     * @dev Grants `role` to `account`.\n', '     *\n', '     * If `account` had not been already granted `role`, emits a {RoleGranted}\n', "     * event. Note that unlike {grantRole}, this function doesn't perform any\n", '     * checks on the calling account.\n', '     *\n', '     * [WARNING]\n', '     * ====\n', '     * This function should only be called from the constructor when setting\n', '     * up the initial roles for the system.\n', '     *\n', '     * Using this function in any other way is effectively circumventing the admin\n', '     * system imposed by {AccessControl}.\n', '     * ====\n', '     */\n', '    function _setupRole(bytes32 role, address account) internal virtual {\n', '        _grantRole(role, account);\n', '    }\n', '\n', '    /**\n', "     * @dev Sets `adminRole` as ``role``'s admin role.\n", '     *\n', '     * Emits a {RoleAdminChanged} event.\n', '     */\n', '    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n', '        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\n', '        _roles[role].adminRole = adminRole;\n', '    }\n', '\n', '    function _grantRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.add(account)) {\n', '            emit RoleGranted(role, account, _msgSender());\n', '        }\n', '    }\n', '\n', '    function _revokeRole(bytes32 role, address account) private {\n', '        if (_roles[role].members.remove(account)) {\n', '            emit RoleRevoked(role, account, _msgSender());\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/core/PoolState.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', 'contract Account {\n', '    struct State {\n', '        uint256 staked; //LP or cook\n', '        uint256 phantom;\n', '        Vesting[] vestings;\n', '        Vesting[] stakings;\n', '        uint256 claimed; //cook\n', '        // blacklisted beneficiary,\n', "        // 1. the address won't be able to claim/harvest/zap rewarded cook,\n", '        // 2. blacklisted address can withdraw their LP token immmediately\n', "        // 3. blacklisted address won't receive anymore rewarded cook\n", '        bool isBlacklisted;\n', '    }\n', '}\n', '\n', 'struct Vesting {\n', '    uint256 start;\n', '    uint256 amount; //cook\n', '}\n', '\n', 'contract Storage {\n', '    struct Provider {\n', '        IERC20 cook;\n', '        IERC20 univ2;\n', '    }\n', '\n', '    struct Balance {\n', '        uint256 staked; //LP\n', '        uint256 rewarded; //cook\n', '        uint256 claimed; //cook\n', '        uint256 vesting; //cook\n', '        uint256 phantom;\n', '    }\n', '\n', '    struct State {\n', '        Balance balance;\n', '        Provider provider;\n', '        uint256 lastRewardBlock;\n', '        mapping(address => Account.State) accounts;\n', '        // Fields for Admin\n', '\n', '        // stop everyone from\n', '        // 1. stop accepting more LP token into pool,\n', '        // 2. stop take any zapping\n', '        // 3. stop claim/harvest/zap rewarded cook\n', '        // 4. stop distributing cook reward\n', '        bool pauseMinig;\n', '\n', '        // Mining cook reward per block\n', '        uint256 REWARD_PER_BLOCK;\n', '        // pool cap limit, 0 will be unlimited\n', '        uint256 totalPoolCapLimit;\n', '        // stake limit per address, 0 will be unlimited\n', '        uint256 stakeLimitPerAddress;\n', '    }\n', '}\n', '\n', 'contract PoolState is Ownable, AccessControl {\n', '    bytes32 public constant MANAGER_ROLE = keccak256("MANAGER");\n', '    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN");\n', '    Storage.State _state;\n', '}\n', '\n', '\n', '// File contracts/core/PoolGetters.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', 'contract PoolGetters is PoolState {\n', '    using SafeMath for uint256;\n', '\n', '    uint32 private constant SECONDS_PER_DAY = 86400; /* 86400 seconds in a day */\n', '\n', '    /**\n', '     * Global\n', '     */\n', '    function cook() public view virtual returns (IERC20) {\n', '        return _state.provider.cook;\n', '    }\n', '\n', '    function univ2() public view virtual returns (IERC20) {\n', '        return _state.provider.univ2;\n', '    }\n', '\n', '    function totalStaked() public view returns (uint256) {\n', '        return _state.balance.staked;\n', '    }\n', '\n', '    function totalRewarded() public view returns (uint256) {\n', '        return _state.balance.rewarded;\n', '    }\n', '\n', '    function totalClaimed() public view returns (uint256) {\n', '        return _state.balance.claimed;\n', '    }\n', '\n', '    function totalVesting() public view returns (uint256) {\n', '        return _state.balance.vesting;\n', '    }\n', '\n', '    function totalPhantom() public view returns (uint256) {\n', '        return _state.balance.phantom;\n', '    }\n', '\n', '    function lastRewardBlock() public view returns (uint256) {\n', '        return _state.lastRewardBlock;\n', '    }\n', '\n', '    function getRewardPerBlock() public view virtual returns (uint256) {\n', '        return _state.REWARD_PER_BLOCK;\n', '    }\n', '\n', '    // Overridable for testing\n', '    function getStakeLockupDuration() public view virtual returns (uint256) {\n', '        return Constants.getStakeLockupDuration();\n', '    }\n', '\n', '    function getVestingDuration() public view virtual returns (uint256) {\n', '        return Constants.getVestingDuration();\n', '    }\n', '\n', '    function blockNumber() public view virtual returns (uint256) {\n', '        return block.number;\n', '    }\n', '\n', '    function blockTimestamp() public view virtual returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * Account\n', '     */\n', '    function balanceOfStaked(address account) public view returns (uint256) {\n', '        return _state.accounts[account].staked;\n', '    }\n', '\n', '    function stakingScheduleStartTime(address account)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256 stakingsLength = _state.accounts[account].stakings.length;\n', '        uint256[] memory array = new uint256[](stakingsLength);\n', '        for (uint256 i = 0; i < stakingsLength; i++) {\n', '            array[i] = _state.accounts[account].stakings[i].start;\n', '        }\n', '        return array;\n', '    }\n', '\n', '    function stakingScheduleAmount(address account)\n', '        public\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256 stakingsLength = _state.accounts[account].stakings.length;\n', '        uint256[] memory array = new uint256[](stakingsLength);\n', '        for (uint256 i = 0; i < stakingsLength; i++) {\n', '            array[i] = _state.accounts[account].stakings[i].amount;\n', '        }\n', '        return array;\n', '    }\n', '\n', '    function balanceOfUnstakable(address account)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        uint256 unstakable;\n', '\n', '        for (uint256 i = 0; i < _state.accounts[account].stakings.length; i++) {\n', '            uint256 totalStakingAmount =\n', '                _state.accounts[account].stakings[i].amount;\n', '            uint256 start = _state.accounts[account].stakings[i].start;\n', '\n', '            uint32 startDay = uint32(start / SECONDS_PER_DAY);\n', '            uint32 today = uint32(blockTimestamp() / SECONDS_PER_DAY);\n', '\n', "            // IF an address is blacklisted, the account can't claim/harvest/zap cook rewrad, hence the address can unstake completely\n", '            if (\n', '                (today >= (startDay + getStakeLockupDuration())) ||\n', '                isAddrBlacklisted(account)\n', '            ) {\n', '                unstakable = unstakable.add(totalStakingAmount); // If after end of staking lockup, then the unstakable amount is total amount.\n', '            } else {\n', "                unstakable += 0; // If it's before the staking lockup then the unstakable amount is zero.\n", '            }\n', '        }\n', '        return unstakable;\n', '    }\n', '\n', '    function balanceOfPhantom(address account) public view returns (uint256) {\n', '        return _state.accounts[account].phantom;\n', '    }\n', '\n', '    function balanceOfRewarded(address account) public view returns (uint256) {\n', '        uint256 totalStakedAmount = totalStaked();\n', '        if (totalStakedAmount == 0) {\n', '            return 0;\n', '        }\n', '        uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());\n', '        uint256 balanceOfRewardedWithPhantom =\n', '            totalRewardedWithPhantom.mul(balanceOfStaked(account)).div(\n', '                totalStakedAmount\n', '            );\n', '\n', '        uint256 phantomBalance = balanceOfPhantom(account);\n', '        if (balanceOfRewardedWithPhantom > phantomBalance) {\n', '            return balanceOfRewardedWithPhantom.sub(phantomBalance);\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function balanceOfClaimed(address account) public view returns (uint256) {\n', '        return _state.accounts[account].claimed;\n', '    }\n', '\n', '    function balanceOfVesting(address account) public view returns (uint256) {\n', '        uint256 totalVestingAmount;\n', '        for (uint256 i = 0; i < _state.accounts[account].vestings.length; i++) {\n', '            totalVestingAmount = totalVestingAmount.add(_state.accounts[account].vestings[i].amount);\n', '        }\n', '        return totalVestingAmount;\n', '    }\n', '\n', '    function balanceOfClaimable(address account) public view returns (uint256) {\n', '        uint256 claimable;\n', '\n', '        for (uint256 i = 0; i < _state.accounts[account].vestings.length; i++) {\n', '            uint256 totalVestingAmount =\n', '                _state.accounts[account].vestings[i].amount;\n', '            uint256 start = _state.accounts[account].vestings[i].start;\n', '\n', '            uint32 startDay = uint32(start.div(SECONDS_PER_DAY));\n', '            uint32 today = uint32(blockTimestamp().div(SECONDS_PER_DAY));\n', '            uint32 vestingInterval = Constants.getVestingInterval();\n', '            uint256 vestingDuration = getVestingDuration();\n', '\n', '            if (today >= (startDay + vestingDuration)) {\n', '                claimable = claimable.add(totalVestingAmount); // If after end of vesting, then the vested amount is total amount.\n', '            } else if (today <= startDay) {\n', "                claimable += 0; // If it's before the vesting then the vested amount is zero.\n", '            } else {\n', '                // Otherwise a fractional amount is vested.\n', '                // Compute the exact number of days vested.\n', '                uint32 daysVested = today - startDay;\n', '                // Adjust result rounding down to take into consideration the interval.\n', '                uint32 effectiveDaysVested =\n', '                    (daysVested / vestingInterval) * vestingInterval;\n', '                uint256 vested =\n', '                    totalVestingAmount.mul(effectiveDaysVested).div(\n', '                        vestingDuration\n', '                    );\n', '                claimable = claimable.add(vested);\n', '            }\n', '        }\n', '        return claimable.sub(balanceOfClaimed(account));\n', '    }\n', '\n', '    function isMiningPaused() public view returns (bool) {\n', '        return _state.pauseMinig;\n', '    }\n', '\n', '    function isFull() public view returns (bool) {\n', '        return\n', '            _state.totalPoolCapLimit != 0 &&\n', '            _state.balance.staked >= _state.totalPoolCapLimit;\n', '    }\n', '\n', '    function isAddrBlacklisted(address addr) public view returns (bool) {\n', '        return _state.accounts[addr].isBlacklisted;\n', '    }\n', '\n', '    function totalPoolCapLimit() public view returns (uint256) {\n', '        return _state.totalPoolCapLimit;\n', '    }\n', '\n', '    function stakeLimitPerAddress() public view returns (uint256) {\n', '        return _state.stakeLimitPerAddress;\n', '    }\n', '\n', '    function checkMiningPaused() public {\n', '        require(\n', '            isMiningPaused() == false,\n', '            "liquidity mining program is paused"\n', '        );\n', '    }\n', '\n', '    function ensureAddrNotBlacklisted(address addr) public {\n', '        require(\n', '            isAddrBlacklisted(addr) == false,\n', '            "Your address is blacklisted"\n', '        );\n', '    }\n', '\n', '    function checkPoolStakeCapLimit(uint256 amountToStake) public {\n', '        require(\n', '            (_state.totalPoolCapLimit == 0 || // no limit\n', '                (_state.balance.staked.add(amountToStake)) <=\n', '                _state.totalPoolCapLimit) == true,\n', '            "Exceed pool limit"\n', '        );\n', '    }\n', '\n', '    function checkPerAddrStakeLimit(uint256 amountToStake, address account)\n', '        public\n', '    {\n', '        require(\n', '            (_state.stakeLimitPerAddress == 0 || // no limit\n', '                (balanceOfStaked(account).add(amountToStake)) <=\n', '                _state.stakeLimitPerAddress) == true,\n', '            "Exceed per address stake limit"\n', '        );\n', '    }\n', '}\n', '\n', '\n', '// File contracts/core/PoolSetters.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', 'contract PoolSetters is PoolState, PoolGetters {\n', '    using SafeMath for uint256;\n', '\n', '    /**\n', '     * Global\n', '     */\n', '    function incrementTotalRewarded(uint256 amount) internal {\n', '        _state.balance.rewarded = _state.balance.rewarded.add(amount);\n', '    }\n', '\n', '    function decrementTotalRewarded(uint256 amount, string memory reason)\n', '        internal\n', '    {\n', '        _state.balance.rewarded = _state.balance.rewarded.sub(amount, reason);\n', '    }\n', '\n', '    function updateLastRewardBlock(uint256 lastRewardBlock) internal {\n', '        _state.lastRewardBlock = lastRewardBlock;\n', '    }\n', '\n', '    /**\n', '     * Account\n', '     */\n', '    function incrementBalanceOfStaked(address account, uint256 amount)\n', '        internal\n', '    {\n', '        _state.accounts[account].staked = _state.accounts[account].staked.add(\n', '            amount\n', '        );\n', '        _state.balance.staked = _state.balance.staked.add(amount);\n', '\n', '        Vesting memory staking = Vesting(blockTimestamp(), amount);\n', '        _state.accounts[account].stakings.push(staking);\n', '    }\n', '\n', '    function decrementBalanceOfStaked(\n', '        address account,\n', '        uint256 amount,\n', '        string memory reason\n', '    ) internal {\n', '        _state.accounts[account].staked = _state.accounts[account].staked.sub(\n', '            amount,\n', '            reason\n', '        );\n', '        _state.balance.staked = _state.balance.staked.sub(amount, reason);\n', '\n', '        uint256 remainingAmount = amount;\n', '        for (uint256 i = 0; i < _state.accounts[account].stakings.length; i++) {\n', '            if (remainingAmount == 0) {\n', '                break;\n', '            }\n', '            uint256 totalStakingAmount =\n', '                _state.accounts[account].stakings[i].amount;\n', '\n', '            uint256 unstakeAmount =\n', '                totalStakingAmount > remainingAmount\n', '                    ? remainingAmount\n', '                    : totalStakingAmount;\n', '            _state.accounts[account].stakings[i].amount = totalStakingAmount\n', '                .sub(unstakeAmount, reason);\n', '            remainingAmount = remainingAmount.sub(unstakeAmount, reason);\n', '        }\n', '    }\n', '\n', '    function incrementBalanceOfPhantom(address account, uint256 amount)\n', '        internal\n', '    {\n', '        _state.accounts[account].phantom = _state.accounts[account].phantom.add(\n', '            amount\n', '        );\n', '        _state.balance.phantom = _state.balance.phantom.add(amount);\n', '    }\n', '\n', '    function decrementBalanceOfPhantom(\n', '        address account,\n', '        uint256 amount,\n', '        string memory reason\n', '    ) internal {\n', '        _state.accounts[account].phantom = _state.accounts[account].phantom.sub(\n', '            amount,\n', '            reason\n', '        );\n', '        _state.balance.phantom = _state.balance.phantom.sub(amount, reason);\n', '    }\n', '\n', '    function incrementBalanceOfClaimed(address account, uint256 amount)\n', '        internal\n', '    {\n', '        _state.accounts[account].claimed = _state.accounts[account].claimed.add(\n', '            amount\n', '        );\n', '        _state.balance.claimed = _state.balance.claimed.add(amount);\n', '    }\n', '\n', '    function addToVestingSchdule(address account, uint256 amount) internal {\n', '        Vesting memory vesting = Vesting(blockTimestamp(), amount);\n', '        _state.accounts[account].vestings.push(vesting);\n', '        _state.balance.vesting = _state.balance.vesting.add(amount);\n', '    }\n', '\n', '    // Admin Functions\n', '    // Put an evil address into blacklist\n', '    function blacklistAddress(address addr) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.accounts[addr].isBlacklisted = true;\n', '    }\n', '\n', '    //Remove an address from blacklist\n', '    function removeAddressFromBlacklist(address addr) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.accounts[addr].isBlacklisted = false;\n', '    }\n', '\n', '    // Pause all liquidity mining program\n', '    function pauseMinigReward() public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.pauseMinig = true;\n', '        _state.REWARD_PER_BLOCK = 0;\n', '    }\n', '\n', '    // resume liquidity mining program\n', '    function resumeMiningReward(uint256 rewardPerBlock) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.pauseMinig = false;\n', '        _state.REWARD_PER_BLOCK = rewardPerBlock;\n', '    }\n', '\n', '    function setTotalPoolCapLimit(uint256 totalPoolCapLimit) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.totalPoolCapLimit = totalPoolCapLimit;\n', '    }\n', '\n', '    function setStakeLimitPerAddress(uint256 stakeLimitPerAddress) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        _state.stakeLimitPerAddress = stakeLimitPerAddress;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/core/IPool.sol\n', '\n', '/*\n', '    Copyright 2020 Cook Finance Devs, based on the works of the Cook Finance Squad\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'abstract contract IPool {\n', '    function stake(uint256 value) external virtual;\n', '\n', '    function unstake(uint256 value) external virtual;\n', '\n', '    function harvest(uint256 value) public virtual;\n', '\n', '    function claim(uint256 value) public virtual;\n', '\n', '    function zapStake(uint256 value, address userAddress) external virtual;\n', '}\n', '\n', '\n', '// File contracts/oracle/IWETH.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'abstract contract IWETH {\n', '    function deposit() public payable virtual;\n', '}\n', '\n', '\n', '// File contracts/core/CookPool.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract CookPool is PoolSetters, IPool {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    constructor(\n', '        address cook,\n', '        uint256 cook_reward_per_block,\n', '        uint256 totalPoolCapLimit,\n', '        uint256 stakeLimitPerAddress\n', '    ) public {\n', '        require(cook != address(0), "Cook address can not be empty");\n', '        require(\n', '            cook_reward_per_block != 0,\n', '            "cook_reward_per_block can not be zero"\n', '        );\n', '\n', '        _state.provider.cook = IERC20(cook); //COOK\n', '        _state.pauseMinig = false;\n', '        // 2e18 is 2 cook token perblock\n', '        _state.REWARD_PER_BLOCK = cook_reward_per_block;\n', '        _state.totalPoolCapLimit = totalPoolCapLimit;\n', '        _state.stakeLimitPerAddress = stakeLimitPerAddress;\n', '\n', '        // Make the deployer defaul admin role and manager role\n', '        _setupRole(MANAGER_ROLE, msg.sender);\n', '        _setupRole(ADMIN_ROLE, msg.sender);\n', '        _setRoleAdmin(MANAGER_ROLE, ADMIN_ROLE);\n', '    }\n', '\n', '    event Stake(address indexed account, uint256 cookAmount);\n', '    event Unstake(address indexed account, uint256 cookAmount);\n', '    event Claim(address indexed account, uint256 cookAmount);\n', '    event Harvest(address indexed account, uint256 cookAmount);\n', '    event ZapCook(address indexed account, uint256 cookAmount);\n', '\n', '    function stake(uint256 cookAmount) external override {\n', '        checkMiningPaused();\n', '        ensureAddrNotBlacklisted(msg.sender);\n', '\n', '        checkPoolStakeCapLimit(cookAmount);\n', '        checkPerAddrStakeLimit(cookAmount, msg.sender);\n', '\n', '        updateStakeStates(cookAmount, msg.sender);\n', '        cook().safeTransferFrom(msg.sender, address(this), cookAmount);\n', '        cookBalanceCheck();\n', '\n', '        emit Stake(msg.sender, cookAmount);\n', '    }\n', '\n', '    function updateStakeStates(uint256 cookAmount, address userAddress)\n', '        internal\n', '    {\n', '        require(cookAmount > 0, "zero stake cook amount");\n', '\n', '        calculateNewRewardSinceLastRewardBlock();\n', '\n', '        uint256 totalRewardedWithPhantom = totalRewarded().add(totalPhantom());\n', '        uint256 newPhantom =\n', '            totalStaked() == 0\n', '                ? totalRewarded() == 0\n', '                    ? Constants.getInitialStakeMultiple().mul(cookAmount)\n', '                    : 0\n', '                : totalRewardedWithPhantom.mul(cookAmount).div(totalStaked());\n', '\n', '        incrementBalanceOfStaked(userAddress, cookAmount);\n', '        incrementBalanceOfPhantom(userAddress, newPhantom);\n', '    }\n', '\n', '    function zapStake(uint256 cookAmount, address userAddress)\n', '        external\n', '        override\n', '    {\n', '        checkMiningPaused();\n', '        ensureAddrNotBlacklisted(userAddress);\n', '\n', '        checkPoolStakeCapLimit(cookAmount);\n', '        checkPerAddrStakeLimit(cookAmount, userAddress);\n', '\n', '        updateStakeStates(cookAmount, userAddress);\n', '        cook().safeTransferFrom(msg.sender, address(this), cookAmount);\n', '        cookBalanceCheck();\n', '\n', '        emit ZapCook(userAddress, cookAmount);\n', '    }\n', '\n', '    function calculateNewRewardSinceLastRewardBlock() internal virtual {\n', '        uint256 lastRewardBlock = lastRewardBlock();\n', '        uint256 blockNumber = blockNumber();\n', '        if (blockNumber > lastRewardBlock) {\n', '            if (totalStaked() != 0) {\n', '                uint256 currentBlock = blockNumber;\n', '                uint256 numOfBlocks = currentBlock.sub(lastRewardBlock);\n', '                uint256 rewardAmount = numOfBlocks.mul(getRewardPerBlock());\n', '                incrementTotalRewarded(rewardAmount);\n', '            }\n', '            updateLastRewardBlock(blockNumber);\n', '        }\n', '        cookBalanceCheck();\n', '    }\n', '\n', '    function unstake(uint256 cookAmount) external override {\n', '        require(cookAmount > 0, "zero unstake cook amount");\n', '\n', '        uint256 stakedBalance = balanceOfStaked(msg.sender);\n', '        uint256 unstakableBalance = balanceOfUnstakable(msg.sender);\n', '        require(\n', '            unstakableBalance >= cookAmount,\n', '            "insufficient unstakable balance"\n', '        );\n', '\n', '        calculateNewRewardSinceLastRewardBlock();\n', '\n', '        uint256 newClaimable =\n', '            balanceOfRewarded(msg.sender).mul(cookAmount).div(stakedBalance);\n', '        uint256 lessPhantom =\n', '            balanceOfPhantom(msg.sender).mul(cookAmount).div(stakedBalance);\n', '\n', '        addToVestingSchdule(msg.sender, newClaimable);\n', '        decrementTotalRewarded(newClaimable, "insufficient rewarded balance");\n', '        decrementBalanceOfStaked(\n', '            msg.sender,\n', '            cookAmount,\n', '            "insufficient staked balance"\n', '        );\n', '        decrementBalanceOfPhantom(\n', '            msg.sender,\n', '            lessPhantom,\n', '            "insufficient phantom balance"\n', '        );\n', '\n', '        cook().transfer(msg.sender, cookAmount);\n', '        cookBalanceCheck();\n', '\n', '        emit Unstake(msg.sender, cookAmount);\n', '    }\n', '\n', '    function harvest(uint256 cookAmount) public override {\n', '        ensureAddrNotBlacklisted(msg.sender);\n', '\n', '        require(cookAmount > 0, "zero harvest amount");\n', '\n', '        require(totalRewarded() > 0, "insufficient total rewarded");\n', '\n', '        require(\n', '            balanceOfRewarded(msg.sender) >= cookAmount,\n', '            "insufficient rewarded balance"\n', '        );\n', '\n', '        addToVestingSchdule(msg.sender, cookAmount);\n', '        decrementTotalRewarded(cookAmount, "insufficient rewarded balance");\n', '        incrementBalanceOfPhantom(msg.sender, cookAmount);\n', '\n', '        cookBalanceCheck();\n', '\n', '        emit Harvest(msg.sender, cookAmount);\n', '    }\n', '\n', '    function claim(uint256 cookAmount) public override {\n', '        ensureAddrNotBlacklisted(msg.sender);\n', '\n', '        require(cookAmount > 0, "zero claim cook amount");\n', '\n', '        require(\n', '            balanceOfClaimable(msg.sender) >= cookAmount,\n', '            "insufficient claimable cook balance"\n', '        );\n', '\n', '        cook().safeTransfer(msg.sender, cookAmount);\n', '        incrementBalanceOfClaimed(msg.sender, cookAmount);\n', '\n', '        emit Claim(msg.sender, cookAmount);\n', '    }\n', '\n', '    function _calWethAmountToPairCook(uint256 cookAmount)\n', '        internal\n', '        returns (uint256, address)\n', '    {\n', '        IUniswapV2Pair lpPair = IUniswapV2Pair(address(univ2()));\n', '\n', '        uint256 reserve0;\n', '        uint256 reserve1;\n', '        address weth;\n', '        if (lpPair.token0() == address(cook())) {\n', '            (reserve0, reserve1, ) = lpPair.getReserves();\n', '            weth = lpPair.token1();\n', '        } else {\n', '            (reserve1, reserve0, ) = lpPair.getReserves();\n', '            weth = lpPair.token0();\n', '        }\n', '\n', '        uint256 wethAmount =\n', '            (reserve0 == 0 && reserve1 == 0)\n', '                ? cookAmount\n', '                : UniswapV2Library.quote(cookAmount, reserve0, reserve1);\n', '\n', '        return (wethAmount, weth);\n', '    }\n', '\n', '    function zapCook(uint256 cookAmount) external {\n', '        require(cookAmount > 0, "zero zap amount");\n', '\n', '        require(\n', '            balanceOfClaimable(msg.sender) >= cookAmount,\n', '            "insufficient claimable balance"\n', '        );\n', '\n', '        checkMiningPaused();\n', '        ensureAddrNotBlacklisted(msg.sender);\n', '\n', '        checkPoolStakeCapLimit(cookAmount);\n', '        checkPerAddrStakeLimit(cookAmount, msg.sender);\n', '\n', '        incrementBalanceOfClaimed(msg.sender, cookAmount);\n', '        updateStakeStates(cookAmount, msg.sender);\n', '        cookBalanceCheck();\n', '\n', '        emit ZapCook(msg.sender, cookAmount);\n', '    }\n', '\n', '    function cookBalanceCheck() private view {\n', '        require(\n', '            cook().balanceOf(address(this)) >=\n', '                totalVesting().add(totalRewarded()).sub(totalClaimed()),\n', '            "Inconsistent COOK balances"\n', '        );\n', '    }\n', '\n', '    // admin emergency to transfer token to owner\n', '    function emergencyWithdraw(uint256 amount) public onlyOwner {\n', '        cook().safeTransfer(msg.sender, amount);\n', '    }\n', '\n', '    // set cook token reward per block\n', '    function setRewardPerBlock(uint256 rewardPerBlock) public {\n', '        require(hasRole(MANAGER_ROLE, msg.sender), "Caller is not a manager");\n', '        calculateNewRewardSinceLastRewardBlock();\n', '        _state.REWARD_PER_BLOCK = rewardPerBlock;\n', '    }\n', '}']