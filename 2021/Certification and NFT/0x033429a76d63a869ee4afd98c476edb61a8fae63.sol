['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-27\n', '*/\n', '\n', 'pragma solidity 0.6.4; \n', '\n', 'library EthAddressLib {\n', '    /**\n', '     * @dev returns the address used within the protocol to identify ETH\n', '     * @return the address assigned to ETH\n', '     */\n', '    function ethAddress() internal pure returns (address) {\n', '        return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    }\n', '} \n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', '            "Address: insufficient balance"\n', '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(\n', '            success,\n', '            "Address: unable to send value, recipient may have reverted"\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '} \n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a <= b ? a : b;\n', '    }\n', '\n', '    function abs(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a < b) {\n', '            return b - a;\n', '        }\n', '        return a - b;\n', '    }\n', '} \n', '\n', 'contract Exponential {\n', '    uint256 constant expScale = 1e18;\n', '    uint256 constant doubleScale = 1e36;\n', '    uint256 constant halfExpScale = expScale / 2;\n', '\n', '    using SafeMath for uint256;\n', '\n', '    function getExp(uint256 num, uint256 denom)\n', '        public\n', '        pure\n', '        returns (uint256 rational)\n', '    {\n', '        rational = num.mul(expScale).div(denom);\n', '    }\n', '\n', '    function getDiv(uint256 num, uint256 denom)\n', '        public\n', '        pure\n', '        returns (uint256 rational)\n', '    {\n', '        rational = num.mul(expScale).div(denom);\n', '    }\n', '\n', '    function addExp(uint256 a, uint256 b) public pure returns (uint256 result) {\n', '        result = a.add(b);\n', '    }\n', '\n', '    function subExp(uint256 a, uint256 b) public pure returns (uint256 result) {\n', '        result = a.sub(b);\n', '    }\n', '\n', '    function mulExp(uint256 a, uint256 b) public pure returns (uint256) {\n', '        uint256 doubleScaledProduct = a.mul(b);\n', '\n', '        uint256 doubleScaledProductWithHalfScale =\n', '            halfExpScale.add(doubleScaledProduct);\n', '\n', '        return doubleScaledProductWithHalfScale.div(expScale);\n', '    }\n', '\n', '    function divExp(uint256 a, uint256 b) public pure returns (uint256) {\n', '        return getDiv(a, b);\n', '    }\n', '\n', '    function mulExp3(\n', '        uint256 a,\n', '        uint256 b,\n', '        uint256 c\n', '    ) public pure returns (uint256) {\n', '        return mulExp(mulExp(a, b), c);\n', '    }\n', '\n', '    function mulScalar(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256 scaled)\n', '    {\n', '        scaled = a.mul(scalar);\n', '    }\n', '\n', '    function mulScalarTruncate(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 product = mulScalar(a, scalar);\n', '        return truncate(product);\n', '    }\n', '\n', '    function mulScalarTruncateAddUInt(\n', '        uint256 a,\n', '        uint256 scalar,\n', '        uint256 addend\n', '    ) public pure returns (uint256) {\n', '        uint256 product = mulScalar(a, scalar);\n', '        return truncate(product).add(addend);\n', '    }\n', '\n', '    function divScalarByExpTruncate(uint256 scalar, uint256 divisor)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 fraction = divScalarByExp(scalar, divisor);\n', '        return truncate(fraction);\n', '    }\n', '\n', '    function divScalarByExp(uint256 scalar, uint256 divisor)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        uint256 numerator = expScale.mul(scalar);\n', '        return getExp(numerator, divisor);\n', '    }\n', '\n', '    function divScalar(uint256 a, uint256 scalar)\n', '        public\n', '        pure\n', '        returns (uint256)\n', '    {\n', '        return a.div(scalar);\n', '    }\n', '\n', '    function truncate(uint256 exp) public pure returns (uint256) {\n', '        return exp.div(expScale);\n', '    }\n', '} \n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    function decimals() external view returns (uint8);\n', '\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '} \n', '\n', 'interface IFToken is IERC20 {\n', '    function mint(address user, uint256 amount) external returns (bytes memory);\n', '\n', '    function borrow(address borrower, uint256 borrowAmount)\n', '        external\n', '        returns (bytes memory);\n', '\n', '    function withdraw(\n', '        address payable withdrawer,\n', '        uint256 withdrawTokensIn,\n', '        uint256 withdrawAmountIn\n', '    ) external returns (uint256, bytes memory);\n', '\n', '    function underlying() external view returns (address);\n', '\n', '    function accrueInterest() external;\n', '\n', '    function getAccountState(address account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '\n', '    function MonitorEventCallback(\n', '        address who,\n', '        bytes32 funcName,\n', '        bytes calldata payload\n', '    ) external;\n', '\n', '    function exchangeRateCurrent() external view returns (uint256 exchangeRate);\n', '\n', '    function repay(address borrower, uint256 repayAmount)\n', '        external\n', '        returns (uint256, bytes memory);\n', '\n', '    function borrowBalanceStored(address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function exchangeRateStored() external view returns (uint256 exchangeRate);\n', '\n', '    function liquidateBorrow(\n', '        address liquidator,\n', '        address borrower,\n', '        uint256 repayAmount,\n', '        address fTokenCollateral\n', '    ) external returns (bytes memory);\n', '\n', '    function borrowBalanceCurrent(address account) external returns (uint256);\n', '\n', '    function balanceOfUnderlying(address owner) external returns (uint256);\n', '\n', '    function _reduceReserves(uint256 reduceAmount) external;\n', '\n', '    function _addReservesFresh(uint256 addAmount) external;\n', '\n', '    function cancellingOut(address striker)\n', '        external\n', '        returns (bool strikeOk, bytes memory strikeLog);\n', '\n', '    function APR() external view returns (uint256);\n', '\n', '    function APY() external view returns (uint256);\n', '\n', '    function calcBalanceOfUnderlying(address owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function borrowSafeRatio() external view returns (uint256);\n', '\n', '    function tokenCash(address token, address account)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getBorrowRate() external view returns (uint256);\n', '\n', '    function addTotalCash(uint256 _addAmount) external;\n', '\n', '    function subTotalCash(uint256 _subAmount) external;\n', '\n', '    function totalCash() external view returns (uint256);\n', '\n', '    function totalReserves() external view returns (uint256);\n', '\n', '    function totalBorrows() external view returns (uint256);\n', '} \n', '\n', 'interface IOracle {\n', '    function get(address token) external view returns (uint256, bool);\n', '} \n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', '                "SafeERC20: decreased allowance below zero"\n', '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', '                "SafeERC20: low-level call failed"\n', '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '} \n', '\n', 'enum RewardType {\n', '    DefaultType,\n', '    Deposit,\n', '    Borrow,\n', '    Withdraw,\n', '    Repay,\n', '    Liquidation,\n', '    TokenIn,\n', '    TokenOut\n', '} \n', '\n', 'interface IBank {\n', '    function MonitorEventCallback(bytes32 funcName, bytes calldata payload)\n', '        external;\n', '\n', '    function deposit(address token, uint256 amount) external payable;\n', '\n', '    function borrow(address token, uint256 amount) external;\n', '\n', '    function withdraw(address underlying, uint256 withdrawTokens) external;\n', '\n', '    function withdrawUnderlying(address underlying, uint256 amount) external;\n', '\n', '    function repay(address token, uint256 amount) external payable;\n', '\n', '    function liquidateBorrow(\n', '        address borrower,\n', '        address underlyingBorrow,\n', '        address underlyingCollateral,\n', '        uint256 repayAmount\n', '    ) external payable;\n', '\n', '    function tokenIn(address token, uint256 amountIn) external payable;\n', '\n', '    function tokenOut(address token, uint256 amountOut) external;\n', '\n', '    function cancellingOut(address token) external;\n', '\n', '    function paused() external view returns (bool);\n', '}\n', '\n', '// reward token pool interface (FOR)\n', 'interface IRewardPool {\n', '    function theForceToken() external view returns (address);\n', '\n', '    function bankController() external view returns (address);\n', '\n', '    function admin() external view returns (address);\n', '\n', '    function deposit(uint256 amount) external;\n', '\n', '    function withdraw(uint256 amount) external;\n', '\n', '    function withdraw() external;\n', '\n', '    function setTheForceToken(address _theForceToken) external;\n', '\n', '    function setBankController(address _bankController) external;\n', '\n', '    function reward(address who, uint256 amount) external;\n', '}\n', '\n', '/**\n', ' * @title Initializable\n', ' *\n', ' * @dev Helper contract to support initializer functions. To use it, replace\n', ' * the constructor with a function that has the `initializer` modifier.\n', ' * WARNING: Unlike constructors, initializer functions must be manually\n', ' * invoked. This applies both to deploying an Initializable contract, as well\n', ' * as extending an Initializable contract via inheritance.\n', ' * WARNING: When used with inheritance, manual care must be taken to not invoke\n', ' * a parent initializer twice, or ensure that all initializers are idempotent,\n', ' * because this is not dealt with automatically as with constructors.\n', ' */\n', 'contract Initializable {\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private initializing;\n', '\n', '    /**\n', '     * @dev Modifier to use in the initializer function of a contract.\n', '     */\n', '    modifier initializer() {\n', '        require(\n', '            initializing || isConstructor() || !initialized,\n', '            "Contract instance has already been initialized"\n', '        );\n', '\n', '        bool isTopLevelCall = !initializing;\n', '        if (isTopLevelCall) {\n', '            initializing = true;\n', '            initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        assembly {\n', '            cs := extcodesize(self)\n', '        }\n', '        return cs == 0;\n', '    }\n', '\n', '    // Reserved storage space to allow for layout changes in the future.\n', '    uint256[50] private ______gap;\n', '} \n', 'pragma experimental ABIEncoderV2;\n', '\n', 'contract BankController is Exponential, Initializable {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    struct Market {\n', '        address fTokenAddress;\n', '        bool isValid;\n', '        uint256 collateralAbility;\n', '        mapping(address => bool) accountsIn;\n', '        uint256 liquidationIncentive;\n', '    }\n', '\n', '    mapping(address => Market) public markets;\n', '\n', '    address public bankEntryAddress;\n', '    address public theForceToken;\n', '\n', '    mapping(uint256 => uint256) public rewardFactors; // RewardType ==> rewardFactor (1e18 scale);\n', '\n', '    mapping(address => IFToken[]) public accountAssets;\n', '\n', '    IFToken[] public allMarkets;\n', '\n', '    address[] public allUnderlyingMarkets;\n', '\n', '    IOracle public oracle;\n', '\n', '    address public mulsig;\n', '\n', '    modifier auth {\n', '        require(\n', '            msg.sender == admin || msg.sender == bankEntryAddress,\n', '            "msg.sender need admin or bank"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setBankEntryAddress(address _newBank) external auth {\n', '        bankEntryAddress = _newBank;\n', '    }\n', '\n', '    function marketsContains(address fToken) public view returns (bool) {\n', '        return allFtokenMarkets[fToken];\n', '    }\n', '\n', '    uint256 public closeFactor;\n', '\n', '    address public admin;\n', '\n', '    address public proposedAdmin;\n', '\n', '    address public rewardPool;\n', '\n', '    uint256 public transferEthGasCost;\n', '\n', '    // @notice Borrow caps enforced by borrowAllowed for each token address. Defaults to zero which corresponds to unlimited borrowing.\n', '    mapping(address => uint256) public borrowCaps;\n', '\n', '    // @notice Supply caps enforced by mintAllowed for each token address. Defaults to zero which corresponds to unlimited supplying.\n', '    mapping(address => uint256) public supplyCaps;\n', '\n', '    struct TokenConfig {\n', '        bool depositDisabled;\n', '        bool borrowDisabled;\n', '        bool withdrawDisabled;\n', '        bool repayDisabled;\n', '        bool liquidateBorrowDisabled;\n', '    }\n', '\n', '    //underlying => TokenConfig\n', '    mapping(address => TokenConfig) public tokenConfigs;\n', '\n', '    mapping(address => uint256) public underlyingLiquidationThresholds;\n', '    event SetLiquidationThreshold(\n', '        address indexed underlying,\n', '        uint256 threshold\n', '    );\n', '\n', '    bool private entered;\n', '    modifier nonReentrant() {\n', '        require(!entered, "re-entered");\n', '        entered = true;\n', '        _;\n', '        entered = false;\n', '    }\n', '\n', '    uint256 public flashloanFeeBips; // 9 for 0.0009\n', '    address public flashloanVault; // flash loan vault(recv flash loan fee);\n', '    event SetFlashloanParams(\n', '        address indexed sender,\n', '        uint256 bips,\n', '        address flashloanVault\n', '    );\n', '\n', '    // fToken => supported or not, using mapping to save gas instead of iterator array\n', '    mapping(address => bool) public allFtokenMarkets;\n', '    event SetAllFtokenMarkets(bytes data);\n', '\n', '    // fToken => exchangeUnit, to save gas instead of runtime calc\n', '    mapping(address => uint256) public allFtokenExchangeUnits;\n', '\n', '    // _setMarketBorrowSupplyCaps = _setMarketBorrowCaps + _setMarketSupplyCaps\n', '    function _setMarketBorrowSupplyCaps(\n', '        address[] calldata tokens,\n', '        uint256[] calldata newBorrowCaps,\n', '        uint256[] calldata newSupplyCaps\n', '    ) external {\n', '        require(msg.sender == admin, "only admin can set borrow/supply caps");\n', '\n', '        uint256 numMarkets = tokens.length;\n', '        uint256 numBorrowCaps = newBorrowCaps.length;\n', '        uint256 numSupplyCaps = newSupplyCaps.length;\n', '\n', '        require(\n', '            numMarkets != 0 &&\n', '                numMarkets == numBorrowCaps &&\n', '                numMarkets == numSupplyCaps,\n', '            "invalid input"\n', '        );\n', '\n', '        for (uint256 i = 0; i < numMarkets; i++) {\n', '            borrowCaps[tokens[i]] = newBorrowCaps[i];\n', '            supplyCaps[tokens[i]] = newSupplyCaps[i];\n', '        }\n', '    }\n', '\n', '    function setTokenConfig(\n', '        address t,\n', '        bool _depositDisabled,\n', '        bool _borrowDisabled,\n', '        bool _withdrawDisabled,\n', '        bool _repayDisabled,\n', '        bool _liquidateBorrowDisabled\n', '    ) external {\n', '        require(msg.sender == admin, "only admin can set token configs");\n', '        tokenConfigs[t] = TokenConfig(\n', '            _depositDisabled,\n', '            _borrowDisabled,\n', '            _withdrawDisabled,\n', '            _repayDisabled,\n', '            _liquidateBorrowDisabled\n', '        );\n', '    }\n', '\n', '    function setLiquidationThresolds(\n', '        address[] calldata underlyings,\n', '        uint256[] calldata _liquidationThresolds\n', '    ) external onlyAdmin {\n', '        uint256 n = underlyings.length;\n', '        require(n == _liquidationThresolds.length && n >= 1, "length: wtf?");\n', '        for (uint256 i = 0; i < n; i++) {\n', '            uint256 ltv = markets[underlyings[i]].collateralAbility;\n', '            require(ltv <= _liquidationThresolds[i], "risk param error");\n', '            underlyingLiquidationThresholds[\n', '                underlyings[i]\n', '            ] = _liquidationThresolds[i];\n', '            emit SetLiquidationThreshold(\n', '                underlyings[i],\n', '                _liquidationThresolds[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    function setFlashloanParams(\n', '        uint256 _flashloanFeeBips,\n', '        address _flashloanVault\n', '    ) external onlyAdmin {\n', '        require(\n', '            _flashloanFeeBips <= 10000 && _flashloanVault != address(0),\n', '            "flashloan param error"\n', '        );\n', '        flashloanFeeBips = _flashloanFeeBips;\n', '        flashloanVault = _flashloanVault;\n', '        emit SetFlashloanParams(msg.sender, _flashloanFeeBips, _flashloanVault);\n', '    }\n', '\n', '    function setAllFtokenMarkets(address[] calldata ftokens)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        uint256 n = ftokens.length;\n', '        for (uint256 i = 0; i < n; i++) {\n', '            allFtokenMarkets[ftokens[i]] = true;\n', '            allFtokenExchangeUnits[ftokens[i]] = _calcExchangeUnit(ftokens[i]);\n', '        }\n', '        emit SetAllFtokenMarkets(abi.encode(ftokens));\n', '    }\n', '\n', '    function initialize(address _mulsig) public initializer {\n', '        admin = msg.sender;\n', '        mulsig = _mulsig;\n', '        transferEthGasCost = 5000;\n', '    }\n', '\n', '    modifier onlyMulSig {\n', '        require(msg.sender == mulsig, "require admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin {\n', '        require(msg.sender == admin, "require admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyFToken(address fToken) {\n', '        require(marketsContains(fToken), "only supported fToken");\n', '        _;\n', '    }\n', '\n', '    event AddTokenToMarket(address underlying, address fToken);\n', '\n', '    function proposeNewAdmin(address admin_) external onlyMulSig {\n', '        proposedAdmin = admin_;\n', '    }\n', '\n', '    function claimAdministration() external {\n', '        require(msg.sender == proposedAdmin, "Not proposed admin.");\n', '        admin = proposedAdmin;\n', '        proposedAdmin = address(0);\n', '    }\n', '\n', '    function getFTokeAddress(address underlying) public view returns (address) {\n', '        return markets[underlying].fTokenAddress;\n', '    }\n', '\n', '    /**\n', '     * @notice Returns the assets an account has entered\n', '     * @param account The address of the account to pull assets for\n', '     * @return A dynamic list with the assets the account has entered\n', '     */\n', '    function getAssetsIn(address account)\n', '        external\n', '        view\n', '        returns (IFToken[] memory)\n', '    {\n', '        IFToken[] memory assetsIn = accountAssets[account];\n', '\n', '        return assetsIn;\n', '    }\n', '\n', '    function checkAccountsIn(address account, IFToken fToken)\n', '        external\n', '        view\n', '        returns (bool)\n', '    {\n', '        return\n', '            markets[IFToken(address(fToken)).underlying()].accountsIn[account];\n', '    }\n', '\n', '    function userEnterMarket(IFToken fToken, address borrower) internal {\n', '        Market storage marketToJoin = markets[fToken.underlying()];\n', '\n', '        require(marketToJoin.isValid, "Market not valid");\n', '\n', '        if (marketToJoin.accountsIn[borrower]) {\n', '            return;\n', '        }\n', '\n', '        marketToJoin.accountsIn[borrower] = true;\n', '\n', '        accountAssets[borrower].push(fToken);\n', '    }\n', '\n', '    function transferCheck(\n', '        address fToken,\n', '        address src,\n', '        address dst,\n', '        uint256 transferTokens\n', '    ) external onlyFToken(msg.sender) {\n', '        withdrawCheck(fToken, src, transferTokens);\n', '        userEnterMarket(IFToken(fToken), dst);\n', '    }\n', '\n', '    function withdrawCheck(\n', '        address fToken,\n', '        address withdrawer,\n', '        uint256 withdrawTokens\n', '    ) public view returns (uint256) {\n', '        address underlying = IFToken(fToken).underlying();\n', '        require(markets[underlying].isValid, "Market not valid");\n', '        require(\n', '            !tokenConfigs[underlying].withdrawDisabled,\n', '            "withdraw disabled"\n', '        );\n', '\n', '        (uint256 sumCollaterals, uint256 sumBorrows) =\n', '            getUserLiquidity(withdrawer, IFToken(fToken), withdrawTokens, 0);\n', '        require(sumCollaterals >= sumBorrows, "Cannot withdraw tokens");\n', '    }\n', '\n', '    function transferIn(\n', '        address account,\n', '        address underlying,\n', '        uint256 amount\n', '    ) public payable nonReentrant {\n', '        require(\n', '            msg.sender == bankEntryAddress || msg.sender == account,\n', '            "auth failed"\n', '        );\n', '        if (underlying != EthAddressLib.ethAddress()) {\n', '            require(msg.value == 0, "ERC20 do not accecpt ETH.");\n', '            uint256 balanceBefore = IERC20(underlying).balanceOf(address(this));\n', '            IERC20(underlying).safeTransferFrom(account, address(this), amount);\n', '            uint256 balanceAfter = IERC20(underlying).balanceOf(address(this));\n', '            require(\n', '                balanceAfter - balanceBefore == amount,\n', '                "TransferIn amount not valid"\n', '            );\n', '            // erc 20 => transferFrom\n', '        } else {\n', '            // payable\n', '            require(msg.value >= amount, "Eth value is not enough");\n', '            if (msg.value > amount) {\n', '                //send back excess ETH\n', '                uint256 excessAmount = msg.value.sub(amount);\n', '                //solium-disable-next-line\n', '                (bool result, ) =\n', '                    account.call{value: excessAmount, gas: transferEthGasCost}(\n', '                        ""\n', '                    );\n', '                require(result, "Transfer of ETH failed");\n', '            }\n', '        }\n', '    }\n', '\n', '    function transferToUser(\n', '        address underlying,\n', '        address payable account,\n', '        uint256 amount\n', '    ) external onlyFToken(msg.sender) {\n', '        require(\n', '            markets[IFToken(msg.sender).underlying()].isValid,\n', '            "TransferToUser not allowed"\n', '        );\n', '        transferToUserInternal(underlying, account, amount);\n', '    }\n', '\n', '    function transferFlashloanAsset(\n', '        address underlying,\n', '        address payable account,\n', '        uint256 amount\n', '    ) external {\n', '        require(msg.sender == bankEntryAddress, "only bank auth");\n', '        transferToUserInternal(underlying, account, amount);\n', '    }\n', '\n', '    function transferToUserInternal(\n', '        address underlying,\n', '        address payable account,\n', '        uint256 amount\n', '    ) internal {\n', '        if (underlying != EthAddressLib.ethAddress()) {\n', '            // erc 20\n', '            // ERC20(token).safeTransfer(user, _amount);\n', '            IERC20(underlying).safeTransfer(account, amount);\n', '        } else {\n', '            (bool result, ) =\n', '                account.call{value: amount, gas: transferEthGasCost}("");\n', '            require(result, "Transfer of ETH failed");\n', '        }\n', '    }\n', '\n', '    function setTransferEthGasCost(uint256 _transferEthGasCost)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        transferEthGasCost = _transferEthGasCost;\n', '    }\n', '\n', '    function getCashPrior(address underlying) public view returns (uint256) {\n', '        IFToken fToken = IFToken(getFTokeAddress(underlying));\n', '        return fToken.totalCash();\n', '    }\n', '\n', '    function getCashAfter(address underlying, uint256 transferInAmount)\n', '        external\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return getCashPrior(underlying).add(transferInAmount);\n', '    }\n', '\n', '    function mintCheck(\n', '        address underlying,\n', '        address minter,\n', '        uint256 amount\n', '    ) external {\n', '        require(marketsContains(msg.sender), "MintCheck fails");\n', '        require(markets[underlying].isValid, "Market not valid");\n', '        require(!tokenConfigs[underlying].depositDisabled, "deposit disabled");\n', '\n', '        uint256 supplyCap = supplyCaps[underlying];\n', '        // Supply cap of 0 corresponds to unlimited supplying\n', '        if (supplyCap != 0) {\n', '            uint256 totalSupply = IFToken(msg.sender).totalSupply();\n', '            uint256 _exchangeRate = IFToken(msg.sender).exchangeRateStored();\n', '            uint256 totalUnderlyingSupply =\n', '                mulScalarTruncate(_exchangeRate, totalSupply);\n', '            uint256 nextTotalUnderlyingSupply =\n', '                totalUnderlyingSupply.add(amount);\n', '            require(\n', '                nextTotalUnderlyingSupply < supplyCap,\n', '                "market supply cap reached"\n', '            );\n', '        }\n', '\n', '        if (!markets[underlying].accountsIn[minter]) {\n', '            userEnterMarket(IFToken(getFTokeAddress(underlying)), minter);\n', '        }\n', '    }\n', '\n', '    function borrowCheck(\n', '        address account,\n', '        address underlying,\n', '        address fToken,\n', '        uint256 borrowAmount\n', '    ) external {\n', '        require(\n', '            underlying == IFToken(msg.sender).underlying(),\n', '            "invalid underlying token"\n', '        );\n', '        require(markets[underlying].isValid, "BorrowCheck fails");\n', '        require(!tokenConfigs[underlying].borrowDisabled, "borrow disabled");\n', '\n', '        uint256 borrowCap = borrowCaps[underlying];\n', '        // Borrow cap of 0 corresponds to unlimited borrowing\n', '        if (borrowCap != 0) {\n', '            uint256 totalBorrows = IFToken(msg.sender).totalBorrows();\n', '            uint256 nextTotalBorrows = totalBorrows.add(borrowAmount);\n', '            require(nextTotalBorrows < borrowCap, "market borrow cap reached");\n', '        }\n', '\n', '        require(markets[underlying].isValid, "Market not valid");\n', '        (, bool valid) = fetchAssetPrice(underlying);\n', '        require(valid, "Price is not valid");\n', '        if (!markets[underlying].accountsIn[account]) {\n', '            userEnterMarket(IFToken(getFTokeAddress(underlying)), account);\n', '        }\n', '        (uint256 sumCollaterals, uint256 sumBorrows) =\n', '            getUserLiquidity(account, IFToken(fToken), 0, borrowAmount);\n', '        require(sumBorrows > 0, "borrow value too low");\n', '        require(sumCollaterals >= sumBorrows, "insufficient liquidity");\n', '    }\n', '\n', '    function repayCheck(address underlying) external view {\n', '        require(markets[underlying].isValid, "Market not valid");\n', '        require(!tokenConfigs[underlying].repayDisabled, "repay disabled");\n', '    }\n', '\n', '    function getTotalDepositAndBorrow(address account)\n', '        public\n', '        view\n', '        returns (uint256, uint256)\n', '    {\n', '        return getUserLiquidity(account, IFToken(0), 0, 0);\n', '    }\n', '\n', '    function getAccountLiquidity(address account)\n', '        public\n', '        view\n', '        returns (uint256 liquidity, uint256 shortfall)\n', '    {\n', '        (uint256 sumCollaterals, uint256 sumBorrows) =\n', '            getTotalDepositAndBorrow(account);\n', '        // These are safe, as the underflow condition is checked first\n', '        if (sumCollaterals > sumBorrows) {\n', '            return (sumCollaterals - sumBorrows, 0);\n', '        } else {\n', '            return (0, sumBorrows - sumCollaterals);\n', '        }\n', '    }\n', '\n', '    // Get price of oracle\n', '    function fetchAssetPrice(address token)\n', '        public\n', '        view\n', '        returns (uint256, bool)\n', '    {\n', '        require(address(oracle) != address(0), "oracle not set");\n', '        return oracle.get(token);\n', '    }\n', '\n', '    function setOracle(address _oracle) external onlyAdmin {\n', '        oracle = IOracle(_oracle);\n', '    }\n', '\n', '    function _supportMarket(\n', '        IFToken fToken,\n', '        uint256 _collateralAbility,\n', '        uint256 _liquidationIncentive\n', '    ) external onlyAdmin {\n', '        address underlying = fToken.underlying();\n', '\n', '        require(!markets[underlying].isValid, "martket existed");\n', '        require(tokenDecimals(underlying) <= 18, "unsupported token decimals");\n', '\n', '        markets[underlying] = Market({\n', '            isValid: true,\n', '            collateralAbility: _collateralAbility,\n', '            fTokenAddress: address(fToken),\n', '            liquidationIncentive: _liquidationIncentive\n', '        });\n', '\n', '        addTokenToMarket(underlying, address(fToken));\n', '\n', '        allFtokenMarkets[address(fToken)] = true;\n', '        allFtokenExchangeUnits[address(fToken)] = _calcExchangeUnit(\n', '            address(fToken)\n', '        );\n', '    }\n', '\n', '    function addTokenToMarket(address underlying, address fToken) internal {\n', '        for (uint256 i = 0; i < allUnderlyingMarkets.length; i++) {\n', '            require(allUnderlyingMarkets[i] != underlying, "token exists");\n', '            require(allMarkets[i] != IFToken(fToken), "token exists");\n', '        }\n', '        allMarkets.push(IFToken(fToken));\n', '        allUnderlyingMarkets.push(underlying);\n', '\n', '        emit AddTokenToMarket(underlying, fToken);\n', '    }\n', '\n', '    function _setCollateralAbility(\n', '        address[] calldata underlyings,\n', '        uint256[] calldata newCollateralAbilities,\n', '        uint256[] calldata _liquidationIncentives\n', '    ) external onlyAdmin {\n', '        uint256 n = underlyings.length;\n', '        require(\n', '            n == newCollateralAbilities.length &&\n', '                n == _liquidationIncentives.length &&\n', '                n >= 1,\n', '            "invalid length"\n', '        );\n', '        for (uint256 i = 0; i < n; i++) {\n', '            address u = underlyings[i];\n', '            require(markets[u].isValid, "Market not valid");\n', '            Market storage market = markets[u];\n', '            market.collateralAbility = newCollateralAbilities[i];\n', '            market.liquidationIncentive = _liquidationIncentives[i];\n', '        }\n', '    }\n', '\n', '    function setCloseFactor(uint256 _closeFactor) external onlyAdmin {\n', '        closeFactor = _closeFactor;\n', '    }\n', '\n', '    function setMarketIsValid(address underlying, bool isValid)\n', '        external\n', '        onlyAdmin\n', '    {\n', '        Market storage market = markets[underlying];\n', '        market.isValid = isValid;\n', '    }\n', '\n', '    /**\n', '     * @notice Return all of the markets\n', '     * @dev The automatic getter may be used to access an individual market.\n', '     * @return The list of market addresses\n', '     */\n', '    function getAllMarkets() external view returns (IFToken[] memory) {\n', '        return allMarkets;\n', '    }\n', '\n', '    function seizeCheck(address fTokenCollateral, address fTokenBorrowed)\n', '        external\n', '        view\n', '    {\n', '        require(!IBank(bankEntryAddress).paused(), "system paused!");\n', '        require(\n', '            markets[IFToken(fTokenCollateral).underlying()].isValid &&\n', '                markets[IFToken(fTokenBorrowed).underlying()].isValid &&\n', '                marketsContains(fTokenCollateral) &&\n', '                marketsContains(fTokenBorrowed),\n', '            "Seize market not valid"\n', '        );\n', '    }\n', '\n', '    struct LiquidityLocals {\n', '        uint256 sumCollateral;\n', '        uint256 sumBorrows;\n', '        uint256 fTokenBalance;\n', '        uint256 borrowBalance;\n', '        uint256 exchangeRate;\n', '        uint256 oraclePrice;\n', '        uint256 collateralAbility;\n', '        uint256 collateral;\n', '    }\n', '\n', '    function getUserLiquidity(\n', '        address account,\n', '        IFToken fTokenNow,\n', '        uint256 withdrawTokens,\n', '        uint256 borrowAmount\n', '    ) public view returns (uint256, uint256) {\n', '        IFToken[] memory assets = accountAssets[account];\n', '        LiquidityLocals memory vars;\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            IFToken asset = assets[i];\n', '            (vars.fTokenBalance, vars.borrowBalance, vars.exchangeRate) = asset\n', '                .getAccountState(account);\n', '            vars.collateralAbility = markets[asset.underlying()]\n', '                .collateralAbility;\n', '            (uint256 oraclePrice, bool valid) =\n', '                fetchAssetPrice(asset.underlying());\n', '            require(valid, "Price is not valid");\n', '            vars.oraclePrice = oraclePrice;\n', '\n', '            uint256 fixUnit = calcExchangeUnit(address(asset));\n', '            uint256 exchangeRateFixed = mulScalar(vars.exchangeRate, fixUnit);\n', '\n', '            vars.collateral = mulExp3(\n', '                vars.collateralAbility,\n', '                exchangeRateFixed,\n', '                vars.oraclePrice\n', '            );\n', '\n', '            vars.sumCollateral = mulScalarTruncateAddUInt(\n', '                vars.collateral,\n', '                vars.fTokenBalance,\n', '                vars.sumCollateral\n', '            );\n', '\n', '            vars.borrowBalance = vars.borrowBalance.mul(fixUnit);\n', '            vars.borrowBalance = vars.borrowBalance.mul(1e18).div(\n', '                vars.collateralAbility\n', '            );\n', '\n', '            vars.sumBorrows = mulScalarTruncateAddUInt(\n', '                vars.oraclePrice,\n', '                vars.borrowBalance,\n', '                vars.sumBorrows\n', '            );\n', '\n', '            if (asset == fTokenNow) {\n', '                vars.sumBorrows = mulScalarTruncateAddUInt(\n', '                    vars.collateral,\n', '                    withdrawTokens,\n', '                    vars.sumBorrows\n', '                );\n', '\n', '                borrowAmount = borrowAmount.mul(fixUnit);\n', '                borrowAmount = borrowAmount.mul(1e18).div(\n', '                    vars.collateralAbility\n', '                );\n', '\n', '                vars.sumBorrows = mulScalarTruncateAddUInt(\n', '                    vars.oraclePrice,\n', '                    borrowAmount,\n', '                    vars.sumBorrows\n', '                );\n', '            }\n', '        }\n', '\n', '        return (vars.sumCollateral, vars.sumBorrows);\n', '    }\n', '\n', '    struct HealthFactorLocals {\n', '        uint256 sumLiquidity;\n', '        uint256 sumLiquidityPlusThreshold;\n', '        uint256 sumBorrows;\n', '        uint256 fTokenBalance;\n', '        uint256 borrowBalance;\n', '        uint256 exchangeRate;\n', '        uint256 oraclePrice;\n', '        uint256 liquidationThreshold;\n', '        uint256 liquidity;\n', '        uint256 liquidityPlusThreshold;\n', '    }\n', '\n', '    function getHealthFactor(address account)\n', '        public\n', '        view\n', '        returns (uint256 healthFactor)\n', '    {\n', '        IFToken[] memory assets = accountAssets[account];\n', '        HealthFactorLocals memory vars;\n', '        uint256 _healthFactor = uint256(-1);\n', '        for (uint256 i = 0; i < assets.length; i++) {\n', '            IFToken asset = assets[i];\n', '            address underlying = asset.underlying();\n', '            (vars.fTokenBalance, vars.borrowBalance, vars.exchangeRate) = asset\n', '                .getAccountState(account);\n', '            vars.liquidationThreshold = underlyingLiquidationThresholds[\n', '                underlying\n', '            ];\n', '            (uint256 oraclePrice, bool valid) = fetchAssetPrice(underlying);\n', '            require(valid, "Price is not valid");\n', '            vars.oraclePrice = oraclePrice;\n', '\n', '            uint256 fixUnit = calcExchangeUnit(address(asset));\n', '            uint256 exchangeRateFixed = mulScalar(vars.exchangeRate, fixUnit);\n', '\n', '            vars.liquidityPlusThreshold = mulExp3(\n', '                vars.liquidationThreshold,\n', '                exchangeRateFixed,\n', '                vars.oraclePrice\n', '            );\n', '            vars.sumLiquidityPlusThreshold = mulScalarTruncateAddUInt(\n', '                vars.liquidityPlusThreshold,\n', '                vars.fTokenBalance,\n', '                vars.sumLiquidityPlusThreshold\n', '            );\n', '\n', '            vars.borrowBalance = vars.borrowBalance.mul(fixUnit);\n', '            vars.borrowBalance = vars.borrowBalance.mul(1e18).div(\n', '                vars.liquidationThreshold\n', '            );\n', '\n', '            vars.sumBorrows = mulScalarTruncateAddUInt(\n', '                vars.oraclePrice,\n', '                vars.borrowBalance,\n', '                vars.sumBorrows\n', '            );\n', '        }\n', '\n', '        if (vars.sumBorrows > 0) {\n', '            _healthFactor = divExp(\n', '                vars.sumLiquidityPlusThreshold,\n', '                vars.sumBorrows\n', '            );\n', '        }\n', '\n', '        return _healthFactor;\n', '    }\n', '\n', '    function tokenDecimals(address token) public view returns (uint256) {\n', '        return\n', '            token == EthAddressLib.ethAddress()\n', '                ? 18\n', '                : uint256(IERC20(token).decimals());\n', '    }\n', '\n', '    function isFTokenValid(address fToken) external view returns (bool) {\n', '        return markets[IFToken(fToken).underlying()].isValid;\n', '    }\n', '\n', '    function liquidateBorrowCheck(\n', '        address fTokenBorrowed,\n', '        address fTokenCollateral,\n', '        address borrower,\n', '        address liquidator,\n', '        uint256 repayAmount\n', '    ) external onlyFToken(msg.sender) {\n', '        address underlyingBorrowed = IFToken(fTokenBorrowed).underlying();\n', '        address underlyingCollateral = IFToken(fTokenCollateral).underlying();\n', '        require(\n', '            !tokenConfigs[underlyingBorrowed].liquidateBorrowDisabled,\n', '            "liquidateBorrow: liquidate borrow disabled"\n', '        );\n', '        require(\n', '            !tokenConfigs[underlyingCollateral].liquidateBorrowDisabled,\n', '            "liquidateBorrow: liquidate colleteral disabled"\n', '        );\n', '\n', '        uint256 hf = getHealthFactor(borrower);\n', '        require(hf < 1e18, "HealthFactor > 1");\n', '        userEnterMarket(IFToken(fTokenCollateral), liquidator);\n', '\n', '        uint256 borrowBalance =\n', '            IFToken(fTokenBorrowed).borrowBalanceStored(borrower);\n', '        uint256 maxClose = mulScalarTruncate(closeFactor, borrowBalance);\n', '        require(repayAmount <= maxClose, "Too much repay");\n', '    }\n', '\n', '    function _calcExchangeUnit(address fToken) internal view returns (uint256) {\n', '        uint256 fTokenDecimals = uint256(IFToken(fToken).decimals());\n', '        uint256 underlyingDecimals =\n', '            tokenDecimals(IFToken(fToken).underlying());\n', '\n', '        return 10**SafeMath.abs(fTokenDecimals, underlyingDecimals);\n', '    }\n', '\n', '    function calcExchangeUnit(address fToken) public view returns (uint256) {\n', '        return allFtokenExchangeUnits[fToken];\n', '    }\n', '\n', '    function liquidateTokens(\n', '        address fTokenBorrowed,\n', '        address fTokenCollateral,\n', '        uint256 actualRepayAmount\n', '    ) external view returns (uint256) {\n', '        (uint256 borrowPrice, bool borrowValid) =\n', '            fetchAssetPrice(IFToken(fTokenBorrowed).underlying());\n', '        (uint256 collateralPrice, bool collateralValid) =\n', '            fetchAssetPrice(IFToken(fTokenCollateral).underlying());\n', '        require(borrowValid && collateralValid, "Price not valid");\n', '\n', '        /*\n', '         *  seizeAmount = actualRepayAmount * liquidationIncentive * priceBorrowed / priceCollateral\n', '         *  seizeTokens = seizeAmount / exchangeRate\n', '         *   = actualRepayAmount * (liquidationIncentive * priceBorrowed) / (priceCollateral * exchangeRate)\n', '         */\n', '        uint256 exchangeRate = IFToken(fTokenCollateral).exchangeRateStored();\n', '\n', '        uint256 fixCollateralUnit = calcExchangeUnit(fTokenCollateral);\n', '        uint256 fixBorrowlUnit = calcExchangeUnit(fTokenBorrowed);\n', '\n', '        uint256 numerator =\n', '            mulExp(\n', '                markets[IFToken(fTokenCollateral).underlying()]\n', '                    .liquidationIncentive,\n', '                borrowPrice\n', '            );\n', '        exchangeRate = exchangeRate.mul(fixCollateralUnit);\n', '\n', '        actualRepayAmount = actualRepayAmount.mul(fixBorrowlUnit);\n', '\n', '        uint256 denominator = mulExp(collateralPrice, exchangeRate);\n', '        uint256 seizeTokens =\n', '            mulScalarTruncate(\n', '                divExp(numerator, denominator),\n', '                actualRepayAmount\n', '            );\n', '\n', '        return seizeTokens;\n', '    }\n', '\n', '    struct ReserveWithdrawalLogStruct {\n', '        address token_address;\n', '        uint256 reserve_withdrawed;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    function reduceReserves(\n', '        address underlying,\n', '        address payable account,\n', '        uint256 reduceAmount\n', '    ) public onlyMulSig {\n', '        IFToken fToken = IFToken(getFTokeAddress(underlying));\n', '        fToken._reduceReserves(reduceAmount);\n', '        transferToUserInternal(underlying, account, reduceAmount);\n', '        fToken.subTotalCash(reduceAmount);\n', '\n', '        ReserveWithdrawalLogStruct memory rds =\n', '            ReserveWithdrawalLogStruct(\n', '                underlying,\n', '                reduceAmount,\n', '                fToken.exchangeRateStored(),\n', '                fToken.getBorrowRate(),\n', '                fToken.tokenCash(underlying, address(this))\n', '            );\n', '\n', '        IBank(bankEntryAddress).MonitorEventCallback(\n', '            "ReserveWithdrawal",\n', '            abi.encode(rds)\n', '        );\n', '    }\n', '\n', '    function batchReduceReserves(\n', '        address[] calldata underlyings,\n', '        address payable account,\n', '        uint256[] calldata reduceAmounts\n', '    ) external onlyMulSig {\n', '        require(underlyings.length == reduceAmounts.length, "length not match");\n', '        uint256 n = underlyings.length;\n', '        for (uint256 i = 0; i < n; i++) {\n', '            reduceReserves(underlyings[i], account, reduceAmounts[i]);\n', '        }\n', '    }\n', '\n', '    function batchReduceAllReserves(\n', '        address[] calldata underlyings,\n', '        address payable account\n', '    ) external onlyMulSig {\n', '        uint256 n = underlyings.length;\n', '        for (uint256 i = 0; i < n; i++) {\n', '            IFToken fToken = IFToken(getFTokeAddress(underlyings[i]));\n', '            uint256 amount =\n', '                SafeMath.min(\n', '                    fToken.totalReserves(),\n', '                    fToken.tokenCash(underlyings[i], address(this))\n', '                );\n', '            if (amount > 0) {\n', '                reduceReserves(underlyings[i], account, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function batchReduceAllReserves(address payable account)\n', '        external\n', '        onlyMulSig\n', '    {\n', '        uint256 n = allUnderlyingMarkets.length;\n', '        for (uint256 i = 0; i < n; i++) {\n', '            address underlying = allUnderlyingMarkets[i];\n', '            IFToken fToken = IFToken(getFTokeAddress(underlying));\n', '            uint256 amount =\n', '                SafeMath.min(\n', '                    fToken.totalReserves(),\n', '                    fToken.tokenCash(underlying, address(this))\n', '                );\n', '            if (amount > 0) {\n', '                reduceReserves(underlying, account, amount);\n', '            }\n', '        }\n', '    }\n', '\n', '    struct ReserveDepositLogStruct {\n', '        address token_address;\n', '        uint256 reserve_funded;\n', '        uint256 cheque_token_value;\n', '        uint256 loan_interest_rate;\n', '        uint256 global_token_reserved;\n', '    }\n', '\n', '    function balance(address token) external view returns (uint256) {\n', '        if (token == EthAddressLib.ethAddress()) {\n', '            return address(this).balance;\n', '        }\n', '        return IERC20(token).balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev receive function enforces that the caller is a contract, to support flashloan transfers\n', '     **/\n', '    receive() external payable {\n', '        //only contracts can send ETH to the bank controller\n', '        require(\n', '            address(msg.sender).isContract(),\n', '            "Only contracts can send ether to the bank controller"\n', '        );\n', '    }\n', '}']