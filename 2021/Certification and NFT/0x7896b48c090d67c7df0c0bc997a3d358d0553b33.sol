['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', 'pragma solidity 0.5.11; // 0.5.11+commit.c082d0b4 Enable optimization 200\n', '\n', 'contract ERC20Interface {\n', '  function transfer(address _to, uint256 _value) public returns (bool success);\n', '  function balanceOf(address _owner) public view returns (uint256 balance);\n', '}\n', '\n', 'interface BadERC20 {\n', '  function transfer(address to, uint value) external;\n', '}\n', '\n', 'contract etherForwarder {\n', '  address payable public ownerAddress;\n', '  address payable public trezorAddress;\n', '\n', '  constructor(address payable _trezorAddress) public {\n', '    ownerAddress = msg.sender;\n', '    trezorAddress = _trezorAddress;\n', '  }\n', '\n', '  modifier onlyOwner {\n', '    if (msg.sender != ownerAddress) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier onlyTrezorOwner {\n', '    if (msg.sender != trezorAddress) {\n', '      revert();\n', '    }\n', '    _;\n', '  }\n', '\n', '  function() external payable {\n', '    if (!trezorAddress.send(msg.value)) {\n', '      revert();\n', '    }\n', '  }\n', '\n', '  function changeOwner(address payable newOwnerAddress) external onlyTrezorOwner {\n', '    trezorAddress = newOwnerAddress;\n', '  }\n', '\n', '  function transferTokens(address tokenContractAddress) external onlyOwner {\n', '    ERC20Interface instance = ERC20Interface(tokenContractAddress);\n', '    address forwarderAddress = address(this);\n', '    uint256 forwarderBalance = instance.balanceOf(forwarderAddress);\n', '\n', '    if (forwarderBalance == 0) {\n', '      return;\n', '    }\n', '\n', '    if (!safeTransfer(tokenContractAddress,forwarderBalance)) {\n', '        revert();\n', '    }\n', '\n', '    //if (!instance.transfer(trezorAddress, forwarderBalance)) {\n', '    //  revert();\n', '    //}\n', '  }\n', '\n', '  function withdrawEther() public {\n', '    uint256 balance = address(this).balance;\n', '\n', '    if (!trezorAddress.send(balance)) {\n', '        revert();\n', '    }\n', '  }\n', '\n', '  function safeTransfer(address token,  uint value) public returns (bool result) {\n', '    BadERC20(token).transfer(trezorAddress,value);\n', '\n', '    assembly {\n', '      switch returndatasize()\n', '      case 0 {                    // This is our BadToken\n', '        result := not(0)          // result is true\n', '      }\n', '      case 32 {                   // This is our GoodToken\n', '        returndatacopy(0, 0, 32)\n', '        result := mload(0)        // result == returndata of external call\n', '      }\n', '      default {                   // This is not an ERC20 token\n', '        revert(0, 0)\n', '      }\n', '    }\n', '    require(result);              // revert() if result is false\n', '  }\n', '}']