['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-27\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !AddressUpgradeable.isContract(address(this));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/access/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC721/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Required interface of an ERC721 compliant contract.\n', ' */\n', 'interface IERC721 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n', '     */\n', '    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n', '\n', '    /**\n', '     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n', '     */\n', '    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n', '\n', '    /**\n', "     * @dev Returns the number of tokens in ``owner``'s account.\n", '     */\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '\n', '    /**\n', '     * @dev Returns the owner of the `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function ownerOf(uint256 tokenId) external view returns (address owner);\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` token from `from` to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n', '     * The approval is cleared when the token is transferred.\n', '     *\n', '     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The caller must own the token or be an approved operator.\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address to, uint256 tokenId) external;\n', '\n', '    /**\n', '     * @dev Returns the account approved for `tokenId` token.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function getApproved(uint256 tokenId) external view returns (address operator);\n', '\n', '    /**\n', '     * @dev Approve or remove `operator` as an operator for the caller.\n', '     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The `operator` cannot be the caller.\n', '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     */\n', '    function setApprovalForAll(address operator, bool _approved) external;\n', '\n', '    /**\n', '     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n', '     *\n', '     * See {setApprovalForAll}\n', '     */\n', '    function isApprovedForAll(address owner, address operator) external view returns (bool);\n', '\n', '    /**\n', '      * @dev Safely transfers `tokenId` token from `from` to `to`.\n', '      *\n', '      * Requirements:\n', '      *\n', '      * - `from` cannot be the zero address.\n', '      * - `to` cannot be the zero address.\n', '      * - `tokenId` token must exist and be owned by `from`.\n', '      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n', '      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '      *\n', '      * Emits a {Transfer} event.\n', '      */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionDelegateCall(target, data, "Address: low-level delegate call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '// : MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuardUpgradeable is Initializable {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    function __ReentrancyGuard_init() internal initializer {\n', '        __ReentrancyGuard_init_unchained();\n', '    }\n', '\n', '    function __ReentrancyGuard_init_unchained() internal initializer {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712BaseUpgradeable.sol\n', '\n', '//: MIT\n', 'pragma solidity ^0.7.4;\n', '\n', 'contract EIP712BaseUpgradeable is Initializable {\n', '  struct EIP712Domain {\n', '    string name;\n', '    string version;\n', '    uint256 salt;\n', '    address verifyingContract;\n', '  }\n', '\n', '  bytes32 internal constant EIP712_DOMAIN_TYPEHASH =\n', '    keccak256(\n', '      bytes(\n', '        "EIP712Domain(string name,string version,uint256 salt,address verifyingContract)"\n', '      )\n', '    );\n', '\n', '  bytes32 internal domainSeperator;\n', '\n', '  function _initialize(string memory name, string memory version)\n', '    public\n', '    virtual\n', '    initializer\n', '  {\n', '    domainSeperator = keccak256(\n', '      abi.encode(\n', '        EIP712_DOMAIN_TYPEHASH,\n', '        keccak256(bytes(name)),\n', '        keccak256(bytes(version)),\n', '        getChainID(),\n', '        address(this)\n', '      )\n', '    );\n', '  }\n', '\n', '  function getChainID() internal pure returns (uint256 id) {\n', '    assembly {\n', '      id := chainid()\n', '    }\n', '  }\n', '\n', '  function getDomainSeperator() private view returns (bytes32) {\n', '    return domainSeperator;\n', '  }\n', '\n', '  /**\n', '   * Accept message hash and returns hash message in EIP712 compatible form\n', '   * So that it can be used to recover signer from signature signed using EIP712 formatted data\n', '   * https://eips.ethereum.org/EIPS/eip-712\n', '   * "\\\\x19" makes the encoding deterministic\n', '   * "\\\\x01" is the version byte to make it compatible to EIP-191\n', '   */\n', '  function toTypedMessageHash(bytes32 messageHash)\n', '    internal\n', '    view\n', '    returns (bytes32)\n', '  {\n', '    return\n', '      keccak256(\n', '        abi.encodePacked("\\x19\\x01", getDomainSeperator(), messageHash)\n', '      );\n', '  }\n', '}\n', '\n', '\n', '// File contracts/lib/EIP712MetaTransactionUpgradeable/EIP712MetaTransactionUpgradeable.sol\n', '\n', '//: MIT\n', 'pragma solidity ^0.7.4;\n', '\n', '\n', '\n', 'contract EIP712MetaTransactionUpgradeable is\n', '  Initializable,\n', '  EIP712BaseUpgradeable\n', '{\n', '  using SafeMath for uint256;\n', '  bytes32 private constant META_TRANSACTION_TYPEHASH =\n', '    keccak256(\n', '      bytes(\n', '        "MetaTransaction(uint256 nonce,address from,bytes functionSignature)"\n', '      )\n', '    );\n', '\n', '  event MetaTransactionExecuted(\n', '    address userAddress,\n', '    address payable relayerAddress,\n', '    bytes functionSignature\n', '  );\n', '  mapping(address => uint256) private nonces;\n', '\n', '  /*\n', '   * Meta transaction structure.\n', '   * No point of including value field here as if user is doing value transfer then he has the funds to pay for gas\n', '   * He should call the desired function directly in that case.\n', '   */\n', '  struct MetaTransaction {\n', '    uint256 nonce;\n', '    address from;\n', '    bytes functionSignature;\n', '  }\n', '\n', '  function _initialize(string memory _name, string memory _version)\n', '    public\n', '    override\n', '    initializer\n', '  {\n', '    EIP712BaseUpgradeable._initialize(_name, _version);\n', '  }\n', '\n', '  function convertBytesToBytes4(bytes memory inBytes)\n', '    internal\n', '    pure\n', '    returns (bytes4 outBytes4)\n', '  {\n', '    if (inBytes.length == 0) {\n', '      return 0x0;\n', '    }\n', '\n', '    assembly {\n', '      outBytes4 := mload(add(inBytes, 32))\n', '    }\n', '  }\n', '\n', '  function executeMetaTransaction(\n', '    address userAddress,\n', '    bytes memory functionSignature,\n', '    bytes32 sigR,\n', '    bytes32 sigS,\n', '    uint8 sigV\n', '  ) public payable virtual returns (bytes memory) {\n', '    bytes4 destinationFunctionSig = convertBytesToBytes4(functionSignature);\n', '    require(\n', '      destinationFunctionSig != msg.sig,\n', '      "functionSignature can not be of executeMetaTransaction method"\n', '    );\n', '    MetaTransaction memory metaTx =\n', '      MetaTransaction({\n', '        nonce: nonces[userAddress],\n', '        from: userAddress,\n', '        functionSignature: functionSignature\n', '      });\n', '    require(\n', '      verify(userAddress, metaTx, sigR, sigS, sigV),\n', '      "Signer and signature do not match"\n', '    );\n', '    nonces[userAddress] = nonces[userAddress].add(1);\n', '    // Append userAddress at the end to extract it from calling context\n', '    (bool success, bytes memory returnData) =\n', '      address(this).call(abi.encodePacked(functionSignature, userAddress));\n', '\n', '    require(success, "Function call not successful");\n', '    emit MetaTransactionExecuted(userAddress, msg.sender, functionSignature);\n', '    return returnData;\n', '  }\n', '\n', '  function hashMetaTransaction(MetaTransaction memory metaTx)\n', '    internal\n', '    pure\n', '    returns (bytes32)\n', '  {\n', '    return\n', '      keccak256(\n', '        abi.encode(\n', '          META_TRANSACTION_TYPEHASH,\n', '          metaTx.nonce,\n', '          metaTx.from,\n', '          keccak256(metaTx.functionSignature)\n', '        )\n', '      );\n', '  }\n', '\n', '  function getNonce(address user) external view returns (uint256 nonce) {\n', '    nonce = nonces[user];\n', '  }\n', '\n', '  function verify(\n', '    address user,\n', '    MetaTransaction memory metaTx,\n', '    bytes32 sigR,\n', '    bytes32 sigS,\n', '    uint8 sigV\n', '  ) internal view returns (bool) {\n', '    address signer =\n', '      ecrecover(\n', '        toTypedMessageHash(hashMetaTransaction(metaTx)),\n', '        sigV,\n', '        sigR,\n', '        sigS\n', '      );\n', '    require(signer != address(0), "Invalid signature");\n', '    return signer == user;\n', '  }\n', '\n', '  function msgSender() internal view returns (address sender) {\n', '    if (msg.sender == address(this)) {\n', '      bytes memory array = msg.data;\n', '      uint256 index = msg.data.length;\n', '      assembly {\n', '        // Load the 32 bytes word from memory with the address on the lower 20 bytes, and mask those.\n', '        sender := and(\n', '          mload(add(array, index)),\n', '          0xffffffffffffffffffffffffffffffffffffffff\n', '        )\n', '      }\n', '    } else {\n', '      sender = msg.sender;\n', '    }\n', '    return sender;\n', '  }\n', '}\n', '\n', '\n', '// File hardhat/[email\xa0protected]\n', '\n', '// : MIT\n', 'pragma solidity >= 0.4.22 <0.9.0;\n', '\n', 'library console {\n', '\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '\tfunction _sendLogPayload(bytes memory payload) private view {\n', '\t\tuint256 payloadLength = payload.length;\n', '\t\taddress consoleAddress = CONSOLE_ADDRESS;\n', '\t\tassembly {\n', '\t\t\tlet payloadStart := add(payload, 32)\n', '\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n', '\t\t}\n', '\t}\n', '\n', '\tfunction log() internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log()"));\n', '\t}\n', '\n', '\tfunction logInt(int p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(int)", p0));\n', '\t}\n', '\n', '\tfunction logUint(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction logString(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction logBool(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction logAddress(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction logBytes(bytes memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes)", p0));\n', '\t}\n', '\n', '\tfunction logBytes1(bytes1 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes1)", p0));\n', '\t}\n', '\n', '\tfunction logBytes2(bytes2 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes2)", p0));\n', '\t}\n', '\n', '\tfunction logBytes3(bytes3 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes3)", p0));\n', '\t}\n', '\n', '\tfunction logBytes4(bytes4 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes4)", p0));\n', '\t}\n', '\n', '\tfunction logBytes5(bytes5 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes5)", p0));\n', '\t}\n', '\n', '\tfunction logBytes6(bytes6 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes6)", p0));\n', '\t}\n', '\n', '\tfunction logBytes7(bytes7 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes7)", p0));\n', '\t}\n', '\n', '\tfunction logBytes8(bytes8 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes8)", p0));\n', '\t}\n', '\n', '\tfunction logBytes9(bytes9 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes9)", p0));\n', '\t}\n', '\n', '\tfunction logBytes10(bytes10 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes10)", p0));\n', '\t}\n', '\n', '\tfunction logBytes11(bytes11 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes11)", p0));\n', '\t}\n', '\n', '\tfunction logBytes12(bytes12 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes12)", p0));\n', '\t}\n', '\n', '\tfunction logBytes13(bytes13 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes13)", p0));\n', '\t}\n', '\n', '\tfunction logBytes14(bytes14 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes14)", p0));\n', '\t}\n', '\n', '\tfunction logBytes15(bytes15 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes15)", p0));\n', '\t}\n', '\n', '\tfunction logBytes16(bytes16 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes16)", p0));\n', '\t}\n', '\n', '\tfunction logBytes17(bytes17 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes17)", p0));\n', '\t}\n', '\n', '\tfunction logBytes18(bytes18 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes18)", p0));\n', '\t}\n', '\n', '\tfunction logBytes19(bytes19 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes19)", p0));\n', '\t}\n', '\n', '\tfunction logBytes20(bytes20 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes20)", p0));\n', '\t}\n', '\n', '\tfunction logBytes21(bytes21 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes21)", p0));\n', '\t}\n', '\n', '\tfunction logBytes22(bytes22 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes22)", p0));\n', '\t}\n', '\n', '\tfunction logBytes23(bytes23 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes23)", p0));\n', '\t}\n', '\n', '\tfunction logBytes24(bytes24 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes24)", p0));\n', '\t}\n', '\n', '\tfunction logBytes25(bytes25 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes25)", p0));\n', '\t}\n', '\n', '\tfunction logBytes26(bytes26 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes26)", p0));\n', '\t}\n', '\n', '\tfunction logBytes27(bytes27 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes27)", p0));\n', '\t}\n', '\n', '\tfunction logBytes28(bytes28 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes28)", p0));\n', '\t}\n', '\n', '\tfunction logBytes29(bytes29 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes29)", p0));\n', '\t}\n', '\n', '\tfunction logBytes30(bytes30 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes30)", p0));\n', '\t}\n', '\n', '\tfunction logBytes31(bytes31 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes31)", p0));\n', '\t}\n', '\n', '\tfunction logBytes32(bytes32 p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bytes32)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint)", p0));\n', '\t}\n', '\n', '\tfunction log(string memory p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string)", p0));\n', '\t}\n', '\n', '\tfunction log(bool p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool)", p0));\n', '\t}\n', '\n', '\tfunction log(address p0) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address)", p0));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address)", p0, p1));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address)", p0, p1, p2));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(uint,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(string,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(bool,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,uint,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,string,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,bool,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,uint,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,string,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,bool,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,uint)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,string)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,bool)", p0, p1, p2, p3));\n', '\t}\n', '\n', '\tfunction log(address p0, address p1, address p2, address p3) internal view {\n', '\t\t_sendLogPayload(abi.encodeWithSignature("log(address,address,address,address)", p0, p1, p2, p3));\n', '\t}\n', '\n', '}\n', '\n', '\n', '// File contracts/NFTMarketplace.sol\n', '\n', '// : Unlicensed\n', 'pragma solidity 0.7.4;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// Due to restrictions of the proxy pattern, do not change the following order\n', '// of Inheritance\n', 'contract NFTMarketplace is\n', '    Initializable,\n', '    OwnableUpgradeable,\n', '    EIP712MetaTransactionUpgradeable,\n', '    ReentrancyGuardUpgradeable\n', '{\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    event NftListed(\n', '        uint256 listingId,\n', '        address nftTokenAddress,\n', '        uint256 nftTokenId,\n', '        address listedBy,\n', '        uint256 paymentType,\n', '        uint256 paymentAmount,\n', '        address paymentTokenAddress\n', '    );\n', '\n', '    event NftDelisted(uint256 listingId);\n', '\n', '    event NftListingLiked(address indexed likedBy, uint256 nftListingId);\n', '\n', '    event NftListingLikeReverted(address indexed likedBy, uint256 nftListingId);\n', '\n', '    event NftBought(address indexed buyer, uint256 nftListingId);\n', '\n', '    event WithdrawnEthPremiums(address indexed recipient, uint256 amount);\n', '\n', '    event WithdrawnErc20Premiums(\n', '        address indexed recipient,\n', '        IERC20 erc20Token,\n', '        uint256 amount\n', '    );\n', '\n', '    // TODO: SWITCH TO ENUMS\n', '    struct NftListing {\n', '        uint256 listingId;\n', '        address nftTokenAddress;\n', '        uint256 nftTokenId;\n', '        address payable listedBy;\n', '        uint256 paymentType; // 0-ETH, 1-ERC20\n', '        uint256 paymentAmount;\n', '        address paymentTokenAddress;\n', '    }\n', '\n', '    /**\n', '     * @dev Following are the state variables for this contract\n', '     *      Due to resrictions of the proxy pattern, do not change the type or order\n', '     *      of the state variables.\n', '     *      https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable\n', '     */\n', '    // Listing State\n', '    uint256 _nextNftListingId;\n', '    EnumerableSet.UintSet _listedNftTokenIds;\n', '    mapping(uint256 => NftListing) public nftListingById;\n', '\n', '    // Likes State: user => NftListingId => bool\n', '    mapping(address => mapping(uint256 => bool)) public hasUserLikedNftListing;\n', '\n', '    // Coinvise premium. If premium rate is 0.2%, is would be stored as 0.2 * 10^decimals = 20\n', '    uint256 public premiumPercentage;\n', '    uint256 public premiumPercentageDecimals;\n', '    uint256 public nftListingFee;\n', '\n', '    // Whitelisted ERC20 Tokens\n', '    mapping(address => bool) public isPaymentTokenWhiteListed;\n', '    bool isPaymentTokenWhiteListActive;\n', '\n', '    // Pausibility\n', '    bool public isPaused;\n', '\n', '    // Add any new state variables here\n', '\n', '    // End of state variables\n', '\n', '    /**\n', '     * @dev We cannot have constructors in upgradeable contracts,\n', '     *      therefore we define an initialize function which we call\n', '     *      manually once the contract is deployed.\n', '     *      the initializer modififer ensures that this can only be called once.\n', '     *      in practice, the openzeppelin library automatically calls the intitazie\n', '     *      function once deployed.\n', '     */\n', '    function initialize(\n', '        uint256 _premiumPercentage,\n', '        uint256 _premiumPercentageDecimals,\n', '        uint256 _nftListingFee,\n', '        address[] memory whiteListedTokens\n', '    ) public initializer {\n', '        // Call intialize of Base Contracts\n', '        OwnableUpgradeable.__Ownable_init();\n', '        EIP712MetaTransactionUpgradeable._initialize(\n', '            "CoinviseNftMarketplace",\n', '            "1"\n', '        );\n', '\n', '        premiumPercentage = _premiumPercentage;\n', '        premiumPercentageDecimals = _premiumPercentageDecimals;\n', '        nftListingFee = _nftListingFee;\n', '        isPaused = false;\n', '        _nextNftListingId = 1;\n', '        isPaymentTokenWhiteListActive = true;\n', '\n', '        for (uint256 i = 0; i < whiteListedTokens.length; ++i) {\n', '            isPaymentTokenWhiteListed[whiteListedTokens[i]] = true;\n', '        }\n', '    }\n', '\n', '    // Pausibilty\n', '    modifier pausable {\n', '        require(!isPaused, "MARKETPLACE_PAUSED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwnerMeta {\n', '        address _sender = msgSender();\n', '        require(_sender == owner(), "UNAUTHORIZED");\n', '        _;\n', '    }\n', '\n', '    function pauseMarketplace() external onlyOwnerMeta {\n', '        isPaused = true;\n', '    }\n', '\n', '    function resumeMarketplace() external onlyOwnerMeta {\n', '        isPaused = false;\n', '    }\n', '\n', '    // Whitelisting Tokens\n', '    function setIsWhiteListActive(bool _isPaymentTokenWhiteListActive)\n', '        external\n', '        onlyOwnerMeta\n', '    {\n', '        isPaymentTokenWhiteListActive = _isPaymentTokenWhiteListActive;\n', '    }\n', '\n', '    function whiteListTokens(address[] memory tokens) external onlyOwnerMeta {\n', '        for (uint256 i = 0; i < tokens.length; ++i) {\n', '            isPaymentTokenWhiteListed[tokens[i]] = true;\n', '        }\n', '    }\n', '\n', '    function blackListTokens(address[] memory tokens) external onlyOwnerMeta {\n', '        for (uint256 i = 0; i < tokens.length; ++i) {\n', '            isPaymentTokenWhiteListed[tokens[i]] = false;\n', '        }\n', '    }\n', '\n', '    function setPremiumPercentage(\n', '        uint256 _premiumPercentage,\n', '        uint256 _premiumPercentageDecimals\n', '    ) external onlyOwnerMeta {\n', '        premiumPercentage = _premiumPercentage;\n', '        premiumPercentageDecimals = _premiumPercentageDecimals;\n', '    }\n', '\n', '    function setNftListingFee(uint256 _nftListingFee)\n', '        external\n', '        onlyOwner\n', '    {\n', '        nftListingFee = _nftListingFee;\n', '    }\n', '\n', '    /**\n', '     *  @dev calculates cut given an amount\n', '     */\n', '    function _calculateCut(uint256 amount) internal view returns (uint256) {\n', '        return\n', '            amount.mul(premiumPercentage).div(\n', '                (10**(premiumPercentageDecimals.add(2)))\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the next id to be used for a new listing\n', '     */\n', '    function _getNextNftListingId() internal returns (uint256) {\n', '        uint256 listingId = _nextNftListingId;\n', '        _nextNftListingId = _nextNftListingId.add(1);\n', '        return listingId;\n', '    }\n', '\n', '    /**\n', '     * @dev returns an array of IDs of all the listings currently active on the market\n', '     */\n', '    function getCurrentNftListingIds()\n', '        external\n', '        view\n', '        returns (uint256[] memory)\n', '    {\n', '        uint256 length = _listedNftTokenIds.length();\n', '        uint256[] memory ids = new uint256[](length);\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            ids[i] = _listedNftTokenIds.at(i);\n', '        }\n', '        return ids;\n', '    }\n', '\n', '    function getCurrentNftListingCount() external view returns (uint256) {\n', '        return _listedNftTokenIds.length();\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a NFT listing.\n', '     *      checks if nft has been approved to transfer by the owner for this contract\n', '     */\n', '    function listNftInEth(\n', '        address _nftTokenAddress,\n', '        uint256 _nftTokenId,\n', '        uint256 _priceInWei\n', '    ) external payable nonReentrant pausable {\n', '        address payable _sender = payable(msgSender());\n', '\n', '        // Check if NFT is approved\n', '        IERC721 nftContract = IERC721(_nftTokenAddress);\n', '        require(\n', '            nftContract.getApproved(_nftTokenId) == address(this),\n', '            "NFT_NOT_APPROVED"\n', '        );\n', '\n', '        require(_priceInWei > 0, "ERR__A_PRICE_MUST_BE_PROVIDED");\n', '        require(msg.value == nftListingFee, "ERR__LISTING_FEE_MUST_BE_PAID");\n', '\n', '        // Create a listing\n', '        NftListing memory nftListing = NftListing(\n', '            _getNextNftListingId(),\n', '            _nftTokenAddress,\n', '            _nftTokenId,\n', '            _sender,\n', '            0,\n', '            _priceInWei,\n', '            address(0)\n', '        );\n', '        _listedNftTokenIds.add(nftListing.listingId);\n', '        nftListingById[nftListing.listingId] = nftListing;\n', '\n', '        emit NftListed(\n', '            nftListing.listingId,\n', '            nftListing.nftTokenAddress,\n', '            nftListing.nftTokenId,\n', '            nftListing.listedBy,\n', '            nftListing.paymentType,\n', '            nftListing.paymentAmount,\n', '            nftListing.paymentTokenAddress\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Creates a NFT listing, payable in an ERC20 Token.\n', '     *      checks if nft has been approved to transfer by the owner for this contract\n', '     */\n', '    function listNftInErc20(\n', '        address _nftTokenAddress,\n', '        uint256 _nftTokenId,\n', '        address _erc20TokenAddress,\n', '        uint256 _priceInErc20Token\n', '    ) external nonReentrant pausable {\n', '        address payable _sender = payable(msgSender());\n', '\n', '        if (isPaymentTokenWhiteListActive) {\n', '            require(\n', '                isPaymentTokenWhiteListed[_erc20TokenAddress],\n', '                "ERC20_PAYMENT_TOKEN_NOT_WHITELISTED"\n', '            );\n', '        }\n', '        // Check if NFT is approved\n', '        IERC721 nftContract = IERC721(_nftTokenAddress);\n', '        require(\n', '            nftContract.getApproved(_nftTokenId) == address(this),\n', '            "NFT_NOT_APPROVED"\n', '        );\n', '\n', '        require(_priceInErc20Token > 0, "ERR__A_PRICE_MUST_BE_PROVIDED");\n', '\n', '        // Create a listing\n', '        NftListing memory nftListing = NftListing(\n', '            _getNextNftListingId(),\n', '            _nftTokenAddress,\n', '            _nftTokenId,\n', '            _sender,\n', '            1,\n', '            _priceInErc20Token,\n', '            _erc20TokenAddress\n', '        );\n', '        _listedNftTokenIds.add(nftListing.listingId);\n', '        nftListingById[nftListing.listingId] = nftListing;\n', '\n', '        emit NftListed(\n', '            nftListing.listingId,\n', '            nftListing.nftTokenAddress,\n', '            nftListing.nftTokenId,\n', '            nftListing.listedBy,\n', '            nftListing.paymentType,\n', '            nftListing.paymentAmount,\n', '            nftListing.paymentTokenAddress\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Function for delisting a NFT from marketplace. Can be called if creator wants\n', '     *      to manually removbe the listing, or once the NFT has been bought\n', '     */\n', '    function _unlistNft(uint256 _nftListingId) internal {\n', '        _listedNftTokenIds.remove(_nftListingId);\n', '        delete nftListingById[_nftListingId];\n', '        emit NftDelisted(_nftListingId);\n', '    }\n', '\n', '    /**\n', "     * @dev Called by listing creator, to delist a NFT before it's bought by someone\n", '     */\n', '    function unlistNftByListingCreator(uint256 _nftListingId)\n', '        external\n', '        pausable\n', '    {\n', '        address _sender = msgSender();\n', '\n', '        require(\n', '            _sender == nftListingById[_nftListingId].listedBy,\n', '            "UNAUTHORIZED"\n', '        );\n', '        require(_listedNftTokenIds.contains(_nftListingId), "ALREADY_DELISTED");\n', '\n', '        _unlistNft(_nftListingId);\n', '    }\n', '\n', '    /**\n', '     *  @dev Transfers an NFT from lister to buyer if conditions are met\n', '     */\n', '    function buyNftInEth(uint256 _nftListingId) external payable pausable {\n', '        address _sender = msgSender();\n', '\n', '        NftListing memory nftListing = nftListingById[_nftListingId];\n', '\n', '        // Lister cannot be buyer\n', '        require(nftListing.listedBy != _sender, "BUYER_CANNOT_BE_LISTER");\n', '\n', '        // Validate the listing\n', '        require(_listedNftTokenIds.contains(_nftListingId), "ALREADY_DELISTED");\n', '        require(nftListing.paymentType == 0, "WRONG_PAYMENT_TYPE");\n', '\n', '        // Validate amount sent\n', '        uint256 listingAmountWei = nftListing.paymentAmount;\n', '        uint256 expectedAmountWei = listingAmountWei.add(\n', '            _calculateCut(listingAmountWei)\n', '        );\n', '        require(msg.value == expectedAmountWei, "INVALID_FUNDS_SENT");\n', '\n', '        // Check if NFT is approved\n', '        IERC721 nftContract = IERC721(nftListing.nftTokenAddress);\n', '        require(\n', '            nftContract.getApproved(nftListing.nftTokenId) == address(this),\n', '            "NFT_NOT_APPROVED"\n', '        );\n', '\n', '        // Transfer ETH to lister\n', '        nftListing.listedBy.transfer(listingAmountWei);\n', '\n', '        // Transfer NFT from lister to buyer\n', '        nftContract.safeTransferFrom(\n', '            nftListing.listedBy,\n', '            _sender,\n', '            nftListing.nftTokenId\n', '        );\n', '\n', '        // Close the listing\n', '        _unlistNft(_nftListingId);\n', '\n', '        // Emit\n', '        emit NftBought(_sender, _nftListingId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers an NFT Token on payment by ERC20\n', '     */\n', '    function buyNftInErc20Tokens(uint256 _nftListingId) external pausable {\n', '        address _sender = msgSender();\n', '\n', '        NftListing memory nftListing = nftListingById[_nftListingId];\n', '\n', '        // Lister cannot be buyer\n', '        require(nftListing.listedBy != _sender, "BUYER_CANNOT_BE_LISTER");\n', '\n', '        // Validate the listing\n', '        require(_listedNftTokenIds.contains(_nftListingId), "ALREADY_DELISTED");\n', '        require(nftListing.paymentType == 1, "WRONG_PAYMENT_TYPE");\n', '\n', '        // Validate token approved amount\n', '        uint256 listingAmountInTokens = nftListing.paymentAmount;\n', '        uint256 expectedAmountInTokens = listingAmountInTokens.add(\n', '            _calculateCut(listingAmountInTokens)\n', '        );\n', '        IERC20 erc20Token = IERC20(nftListing.paymentTokenAddress);\n', '        require(\n', '            erc20Token.allowance(_sender, address(this)) >=\n', '                expectedAmountInTokens,\n', '            "INSUFFICIENT_TOKEN_ALLOWANCE"\n', '        );\n', '\n', '        // Check if NFT is approved\n', '        IERC721 nftContract = IERC721(nftListing.nftTokenAddress);\n', '        require(\n', '            nftContract.getApproved(nftListing.nftTokenId) == address(this),\n', '            "NFT_NOT_APPROVED"\n', '        );\n', '\n', '        // Transfer funds to marketContract;\n', '        erc20Token.safeTransferFrom(\n', '            _sender,\n', '            address(this),\n', '            expectedAmountInTokens\n', '        );\n', '\n', '        // Transfer asked price to lister\n', '        erc20Token.safeTransfer(nftListing.listedBy, listingAmountInTokens);\n', '\n', '        // Transfer NFT from lister to buyer\n', '        nftContract.safeTransferFrom(\n', '            nftListing.listedBy,\n', '            _sender,\n', '            nftListing.nftTokenId\n', '        );\n', '        // Close the listing\n', '        _unlistNft(_nftListingId);\n', '\n', '        // Emit\n', '        emit NftBought(_sender, _nftListingId);\n', '    }\n', '\n', '    /**\n', "     * @dev Increments the like counter for a listing if's it's actvie\n", '     */\n', '    function likeNftListing(uint256 _nftListingId) external pausable {\n', '        address _sender = msgSender();\n', '\n', '        require(_listedNftTokenIds.contains(_nftListingId), "ALREADY_DELISTED");\n', '        require(\n', '            !hasUserLikedNftListing[_sender][_nftListingId],\n', '            "ALREADY_LIKED"\n', '        );\n', '\n', '        hasUserLikedNftListing[_sender][_nftListingId] = true;\n', '        emit NftListingLiked(_sender, _nftListingId);\n', '    }\n', '\n', '    /**\n', "     * @dev Decrements the like counter for a listing if's it's actvie\n", '     */\n', '    function undoLikeNftListing(uint256 _nftListingId) external pausable {\n', '        address _sender = msgSender();\n', '\n', '        require(_listedNftTokenIds.contains(_nftListingId), "ALREADY_DELISTED");\n', '        require(hasUserLikedNftListing[_sender][_nftListingId], "NOT_LIKED");\n', '\n', '        hasUserLikedNftListing[_sender][_nftListingId] = false;\n', '        emit NftListingLikeReverted(_sender, _nftListingId);\n', '    }\n', '\n', '    /**\n', '     * @dev Sends all eth to a specified address\n', '     */\n', '    function withdrawEthPremiums(address payable _to) external onlyOwnerMeta {\n', '        _to.transfer(address(this).balance);\n', '        emit WithdrawnEthPremiums(_to, address(this).balance);\n', '    }\n', '\n', '    /**\n', '     * @dev Sends all balance of specific ERC20 token to address\n', '     */\n', '    function withdrawErc20Premiums(address _to, IERC20 erc20Token)\n', '        external\n', '        onlyOwnerMeta\n', '    {\n', '        uint256 balance = erc20Token.balanceOf(address(this));\n', '        erc20Token.safeTransfer(_to, balance);\n', '        emit WithdrawnErc20Premiums(_to, erc20Token, balance);\n', '    }\n', '\n', '    fallback() external payable {}\n', '\n', '    receive() external payable {}\n', '}']