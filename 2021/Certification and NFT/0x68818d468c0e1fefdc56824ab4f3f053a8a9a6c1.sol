['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-10\n', '*/\n', '\n', '/*\n', '  Copyright 2019,2020 StarkWare Industries Ltd.\n', '  Licensed under the Apache License, Version 2.0 (the "License").\n', '  You may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '  https://www.starkware.co/open-source-license/\n', '  Unless required by applicable law or agreed to in writing,\n', '  software distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions\n', '  and limitations under the License.\n', '*/\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', 'interface IFactRegistry {\n', '    /*\n', '      Returns true if the given fact was previously registered in the contract.\n', '    */\n', '    function isValid(bytes32 fact)\n', '        external view\n', '        returns(bool);\n', '}\n', '\n', '/*\n', '  Extends the IFactRegistry interface with a query method that indicates\n', '  whether the fact registry has successfully registered any fact or is still empty of such facts.\n', '*/\n', 'interface IQueryableFactRegistry is IFactRegistry {\n', '\n', '    /*\n', '      Returns true if at least one fact has been registered.\n', '    */\n', '    function hasRegisteredFact()\n', '        external view\n', '        returns(bool);\n', '\n', '}\n', '\n', '\n', 'contract FactRegistry is IQueryableFactRegistry {\n', '    // Mapping: fact hash -> true.\n', '    mapping (bytes32 => bool) private verifiedFact;\n', '\n', '    // Indicates whether the Fact Registry has at least one fact registered.\n', '    bool anyFactRegistered;\n', '\n', '    /*\n', '      Checks if a fact has been verified.\n', '    */\n', '    function isValid(bytes32 fact)\n', '        external view override\n', '        returns(bool)\n', '    {\n', '        return _factCheck(fact);\n', '    }\n', '\n', '\n', '    /*\n', '      This is an internal method to check if the fact is already registered.\n', "      In current implementation of FactRegistry it's identical to isValid().\n", '      But the check is against the local fact registrey,\n', "      So for a derived referral fact registry, it's not the same.\n", '    */\n', '    function _factCheck(bytes32 fact)\n', '        internal view\n', '        returns(bool)\n', '    {\n', '        return verifiedFact[fact];\n', '    }\n', '\n', '    function registerFact(\n', '        bytes32 factHash\n', '        )\n', '        internal\n', '    {\n', '        // This function stores the fact hash in the mapping.\n', '        verifiedFact[factHash] = true;\n', '\n', '        // Mark first time off.\n', '        if (!anyFactRegistered) {\n', '            anyFactRegistered = true;\n', '        }\n', '    }\n', '\n', '    /*\n', '      Indicates whether at least one fact was registered.\n', '    */\n', '    function hasRegisteredFact()\n', '        external view override\n', '        returns(bool)\n', '    {\n', '        return anyFactRegistered;\n', '    }\n', '\n', '}\n', '\n', 'interface Identity {\n', '\n', '    /*\n', '      Allows a caller, typically another contract,\n', '      to ensure that the provided address is of the expected type and version.\n', '    */\n', '    function identify()\n', '        external view\n', '        returns(string memory);\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'contract TransferRegistry is FactRegistry, Identity {\n', '\n', '    event LogRegisteredTransfer(\n', '        address recipient,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 salt\n', '    );\n', '\n', '    function identify()\n', '        external view override\n', '        returns(string memory)\n', '    {\n', '        return "StarkWare_TransferRegistry_2020_1";\n', '    }\n', '\n', '    /*\n', '      Safe wrapper around ERC20/ERC721 calls.\n', "      This is required because many deployed ERC20 contracts don't return a value.\n", '      See https://github.com/ethereum/solidity/issues/4116.\n', '    */\n', '    function safeTokenContractCall(address tokenAddress, bytes memory callData) internal {\n', '        // solium-disable-next-line security/no-low-level-calls\n', '        // NOLINTNEXTLINE: low-level-calls.\n', '        (bool success, bytes memory returndata) = address(tokenAddress).call(callData);\n', '        require(success, string(returndata));\n', '\n', '        if (returndata.length > 0) {\n', '            require(abi.decode(returndata, (bool)), "TOKEN_OPERATION_FAILED");\n', '        }\n', '    }\n', '\n', '    /*\n', '      The actual transfer is extracted to a function, so that we can easily mock the contract.\n', '    */\n', '    function performEthTransfer(address payable recipient, uint256 value)\n', '        internal {\n', '        recipient.transfer(value);\n', '    }\n', '\n', '    /*\n', '      The actual transfer is extracted to a function, so that we can easily mock the contract.\n', '    */\n', '    function performErc20Transfer(address recipient, address erc20, uint256 amount)\n', '        internal {\n', '        safeTokenContractCall(\n', '            erc20,\n', '            abi.encodeWithSelector(IERC20(0).transferFrom.selector, msg.sender, recipient, amount)\n', '        );\n', '    }\n', '\n', '    /*\n', '      Passes on the transaction ETH value onto the recipient address,\n', '      and register the associated fact.\n', '      Reverts if the fact has already been registered.\n', '    */\n', '    function transfer(address payable recipient, uint256 salt) // NOLINT: erc20-interface.\n', '        payable\n', '        external {\n', '        bytes32 transferFact = keccak256(\n', '            abi.encodePacked(recipient, msg.value, address(0x0), salt));\n', '        require(!_factCheck(transferFact), "TRANSFER_ALREADY_REGISTERED");\n', '        registerFact(transferFact);\n', '        emit LogRegisteredTransfer(recipient, address(0x0), msg.value, salt);\n', '        performEthTransfer(recipient, msg.value);\n', '    }\n', '\n', '    /*\n', "      Transfer the specified amount of erc20 tokens from msg.sender balance to the recipient's\n", '      balance.\n', '      Pre-conditions to successful transfer are that the msg.sender has sufficient balance,\n', '      and the the approval (for the transfer) was granted to this contract.\n', '      A fact with the transfer details is registered upon success.\n', '      Reverts if the fact has already been registered.\n', '    */\n', '    function transferERC20(address recipient, address erc20, uint256 amount, uint256 salt)\n', '        external {\n', '        bytes32 transferFact = keccak256(\n', '            abi.encodePacked(recipient, amount, erc20, salt));\n', '        require(!_factCheck(transferFact), "TRANSFER_ALREADY_REGISTERED");\n', '        registerFact(transferFact);\n', '        emit LogRegisteredTransfer(recipient, erc20, amount, salt);\n', '        performErc20Transfer(recipient, erc20, amount);\n', '    }\n', '\n', '}']