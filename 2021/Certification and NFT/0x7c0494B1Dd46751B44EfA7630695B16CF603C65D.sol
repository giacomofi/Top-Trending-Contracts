['/*\n', '    Copyright 2021 Set Labs Inc.\n', '\n', '    Licensed under the Apache License, Version 2.0 (the "License");\n', '    you may not use this file except in compliance with the License.\n', '    You may obtain a copy of the License at\n', '\n', '    http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '    Unless required by applicable law or agreed to in writing, software\n', '    distributed under the License is distributed on an "AS IS" BASIS,\n', '    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '    See the License for the specific language governing permissions and\n', '    limitations under the License.\n', '\n', '    SPDX-License-Identifier: Apache License, Version 2.0\n', '*/\n', '\n', 'pragma solidity 0.6.10;\n', 'pragma experimental "ABIEncoderV2";\n', '\n', '/**\n', ' * @title UniswapV2TransferFeeExchangeAdapter\n', ' * @author Set Protocol\n', ' *\n', ' * Exchange adapter for Uniswap V2 Router02 that supports trading tokens with transfer fees\n', ' */\n', 'contract UniswapV2TransferFeeExchangeAdapter {\n', '\n', '    /* ============ State Variables ============ */\n', '\n', '    // Address of Uniswap V2 Router02 contract\n', '    address public immutable router;\n', '\n', '    /* ============ Constructor ============ */\n', '\n', '    /**\n', '     * Set state variables\n', '     *\n', '     * @param _router       Address of Uniswap V2 Router02 contract\n', '     */\n', '    constructor(address _router) public {\n', '        router = _router;\n', '    }\n', '\n', '    /* ============ External Getter Functions ============ */\n', '\n', '    /**\n', '     * Return calldata for Uniswap V2 Router02 when trading a token with a transfer fee\n', '     *\n', '     * @param  _sourceToken              Address of source token to be sold\n', '     * @param  _destinationToken         Address of destination token to buy\n', '     * @param  _destinationAddress       Address that assets should be transferred to\n', '     * @param  _sourceQuantity           Amount of source token to sell\n', '     * @param  _minDestinationQuantity   Min amount of destination token to buy\n', '     * @param  _data                     Arbitrary bytes containing trade call data\n', '     *\n', '     * @return address                   Target contract address\n', '     * @return uint256                   Call value\n', '     * @return bytes                     Trade calldata\n', '     */\n', '    function getTradeCalldata(\n', '        address _sourceToken,\n', '        address _destinationToken,\n', '        address _destinationAddress,\n', '        uint256 _sourceQuantity,\n', '        uint256 _minDestinationQuantity,\n', '        bytes memory _data\n', '    )\n', '        external\n', '        view\n', '        returns (address, uint256, bytes memory)\n', '    {   \n', '        address[] memory path;\n', '\n', '        if(_data.length == 0){\n', '            path = new address[](2);\n', '            path[0] = _sourceToken;\n', '            path[1] = _destinationToken;\n', '        } else {\n', '            path = abi.decode(_data, (address[]));\n', '        }\n', '\n', '        bytes memory callData = abi.encodeWithSignature(\n', '            "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)",\n', '            _sourceQuantity,\n', '            _minDestinationQuantity,\n', '            path,\n', '            _destinationAddress,\n', '            block.timestamp\n', '        );\n', '        return (router, 0, callData);\n', '    }\n', '\n', '    /**\n', '     * Returns the address to approve source tokens to for trading. This is the Uniswap router address\n', '     *\n', '     * @return address             Address of the contract to approve tokens to\n', '     */\n', '    function getSpender()\n', '        external\n', '        view\n', '        returns (address)\n', '    {\n', '        return router;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "metadata": {\n', '    "useLiteralContent": true\n', '  },\n', '  "libraries": {}\n', '}']