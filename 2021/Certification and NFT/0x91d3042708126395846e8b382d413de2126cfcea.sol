['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-11\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File contracts/interfaces/IERC3156FlashBorrower.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IERC3156FlashBorrower {\n', '\n', '  /**\n', '    * @dev Receive a flash loan.\n', '    * @param initiator The initiator of the loan.\n', '    * @param token The loan currency.\n', '    * @param amount The amount of tokens lent.\n', '    * @param fee The additional amount of tokens to repay.\n', '    * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '    * @return The keccak256 hash of "ERC3156FlashBorrower.onFlashLoan"\n', '    */\n', '  function onFlashLoan(\n', '      address initiator,\n', '      address token,\n', '      uint256 amount,\n', '      uint256 fee,\n', '      bytes calldata data\n', '  ) external returns (bytes32);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IERC3156FlashLender.sol\n', '\n', 'pragma solidity ^0.8.0;\n', 'interface IERC3156FlashLender {\n', '  /**\n', '    * @dev The amount of currency available to be lent.\n', '    * @param token The loan currency.\n', '    * @return The amount of `token` that can be borrowed.\n', '    */\n', '  function maxFlashLoan(\n', '      address token\n', '  ) external view returns (uint256);\n', '\n', '  /**\n', '    * @dev The fee to be charged for a given loan.\n', '    * @param token The loan currency.\n', '    * @param amount The amount of tokens lent.\n', '    * @return The amount of `token` to be charged for the loan, on top of the returned principal.\n', '    */\n', '  function flashFee(\n', '      address token,\n', '      uint256 amount\n', '  ) external view returns (uint256);\n', '\n', '  /**\n', '    * @dev Initiate a flash loan.\n', '    * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\n', '    * @param token The loan currency.\n', '    * @param amount The amount of tokens lent.\n', '    * @param data Arbitrary data structure, intended to contain user-defined parameters.\n', '    */\n', '  function flashLoan(\n', '      address receiver,\n', '      address token,\n', '      uint256 amount,\n', '      bytes calldata data\n', '  ) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/ICErc20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface ICErc20 {\n', '    function liquidateBorrow(address borrower, uint amount, address collateral) external returns (uint);\n', '    function redeem(uint256 redeemTokens) external returns (uint256);\n', '    function underlying() external view returns (address);\n', '}\n', '\n', '\n', '// File contracts/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @title Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    function name() external view returns (string memory);\n', '    function symbol() external view returns (string memory);\n', '    function decimals() external view returns (uint8);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IWeth.sol\n', '\n', 'pragma solidity ^0.8.0;\n', 'interface IWeth is IERC20 {\n', '    function deposit() external payable;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IComptroller.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IComptroller {\n', '    function getAccountLiquidity(address account) external view returns (uint256, uint256, uint256);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IRouter.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'interface IRouter {\n', '    function getAmountsIn(uint256 amountOut, address[] memory path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] memory path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '\n', '    function swapExactTokensForTokens(\n', '        uint256 amountIn,\n', '        uint256 amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256 amountOut,\n', '        uint256 amountInMax,\n', '        address[] calldata path,\n', '        address to,\n', '        uint256 deadline\n', '    ) external returns (uint256[] memory amounts);\n', '}\n', '\n', '\n', '// File contracts/utils/Context.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/utils/Ownable.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ERC20/SafeERC20.sol\n', '\n', 'pragma solidity ^0.8.0;\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) + value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender) - value;\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File contracts/AnchorFlashLiquidator.sol\n', '\n', '//SPDX-License-Identifier: None\n', '\n', 'pragma solidity ^0.8.0;\n', 'contract AnchorFlashLiquidator is Ownable {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC3156FlashLender public flashLender =\n', '        IERC3156FlashLender(0x6bdC1FCB2F13d1bA9D26ccEc3983d5D4bf318693);\n', '    IComptroller public comptroller =\n', '        IComptroller(0x4dCf7407AE5C07f8681e1659f626E114A7667339);\n', '    IRouter public constant sushiRouter =\n', '        IRouter(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F);\n', '    IRouter public constant uniRouter =\n', '        IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    IERC20 public constant dola =\n', '        IERC20(0x865377367054516e17014CcdED1e7d814EDC9ce4);\n', '    IWeth public constant weth =\n', '        IWeth(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    IERC20 public constant dai =\n', '        IERC20(0x6B175474E89094C44Da98b954EedeAC495271d0F);\n', '\n', '    struct LiquidationData {\n', '        address cErc20;\n', '        address cTokenCollateral;\n', '        address borrower;\n', '        address caller;\n', '        IRouter dolaRouter;\n', '        IRouter exitRouter;\n', '        uint256 shortfall;\n', '        uint256 minProfit;\n', '        uint256 deadline;\n', '    }\n', '\n', '    function liquidate(\n', '        address _flashLoanToken,\n', '        address _cErc20,\n', '        address _borrower,\n', '        address _cTokenCollateral,\n', '        IRouter _dolaRouter,\n', '        IRouter _exitRouter,\n', '        uint256 _minProfit,\n', '        uint256 _deadline\n', '    ) external {\n', '        require(\n', '            (_dolaRouter == sushiRouter || _dolaRouter == uniRouter) &&\n', '                (_exitRouter == sushiRouter || _exitRouter == uniRouter),\n', '            "Invalid router"\n', '        );\n', '        // make sure _borrower is liquidatable\n', '        (, , uint256 shortfall) = comptroller.getAccountLiquidity(_borrower);\n', '        require(shortfall > 0, "!liquidatable");\n', '        address[] memory path = _getDolaPath(_flashLoanToken);\n', '        uint256 tokensNeeded;\n', '        {\n', '            // scope to avoid stack too deep error\n', '            tokensNeeded = _dolaRouter.getAmountsIn(shortfall, path)[0];\n', '            require(\n', '                tokensNeeded <= flashLender.maxFlashLoan(_flashLoanToken),\n', '                "Insufficient lender reserves"\n', '            );\n', '            uint256 fee = flashLender.flashFee(_flashLoanToken, tokensNeeded);\n', '            uint256 repayment = tokensNeeded + fee;\n', '            _approve(IERC20(_flashLoanToken), address(flashLender), repayment);\n', '        }\n', '        bytes memory data =\n', '            abi.encode(\n', '                LiquidationData({\n', '                    cErc20: _cErc20,\n', '                    cTokenCollateral: _cTokenCollateral,\n', '                    borrower: _borrower,\n', '                    caller: msg.sender,\n', '                    dolaRouter: _dolaRouter,\n', '                    exitRouter: _exitRouter,\n', '                    shortfall: shortfall,\n', '                    minProfit: _minProfit,\n', '                    deadline: _deadline\n', '                })\n', '            );\n', '        flashLender.flashLoan(\n', '            address(this),\n', '            _flashLoanToken,\n', '            tokensNeeded,\n', '            data\n', '        );\n', '    }\n', '\n', '    function onFlashLoan(\n', '        address initiator,\n', '        address token,\n', '        uint256 amount,\n', '        uint256 fee,\n', '        bytes calldata data\n', '    ) external returns (bytes32) {\n', '        require(msg.sender == address(flashLender), "Untrusted lender");\n', '        require(initiator == address(this), "Untrusted loan initiator");\n', '        LiquidationData memory liqData = abi.decode(data, (LiquidationData));\n', '\n', '        // Step 1: Convert token to DOLA\n', '        _approve(IERC20(token), address(liqData.dolaRouter), amount);\n', '        address[] memory entryPath = _getDolaPath(token);\n', '        liqData.dolaRouter.swapTokensForExactTokens(\n', '            liqData.shortfall,\n', '            type(uint256).max,\n', '            entryPath,\n', '            address(this),\n', '            liqData.deadline\n', '        )[entryPath.length - 1];\n', '\n', '        // Step 2: Liquidate borrower and seize their cToken\n', '        _approve(dola, liqData.cErc20, liqData.shortfall);\n', '        ICErc20(liqData.cErc20).liquidateBorrow(\n', '            liqData.borrower,\n', '            liqData.shortfall,\n', '            liqData.cTokenCollateral\n', '        );\n', '        uint256 seizedBal =\n', '            IERC20(liqData.cTokenCollateral).balanceOf(address(this));\n', '\n', '        // Step 3: Redeem seized cTokens for collateral\n', '        _approve(IERC20(liqData.cTokenCollateral), liqData.cErc20, seizedBal);\n', '        uint256 ethBalBefore = address(this).balance; // snapshot ETH balance before redeem to determine if it is cEther\n', '        ICErc20(liqData.cTokenCollateral).redeem(seizedBal);\n', '        address underlying;\n', '\n', '        // Step 3.1: Get amount of underlying collateral redeemed\n', '        if (address(this).balance > ethBalBefore) {\n', '            // If ETH balance increased, seized cToken is cEther & wrap into WETH\n', '            weth.deposit{value: address(this).balance}();\n', '            underlying = address(weth);\n', '        } else {\n', '            underlying = ICErc20(liqData.cTokenCollateral).underlying();\n', '        }\n', '        uint256 underlyingBal = IERC20(underlying).balanceOf(address(this));\n', '\n', '        // Step 4: Swap underlying collateral for token (if collateral != token)\n', '        uint256 tokensReceived;\n', '        if (underlying != token) {\n', '            _approve(\n', '                IERC20(underlying),\n', '                address(liqData.exitRouter),\n', '                underlyingBal\n', '            );\n', '            address[] memory exitPath = _getExitPath(underlying, token);\n', '            tokensReceived = liqData.exitRouter.swapExactTokensForTokens(\n', '                underlyingBal,\n', '                0,\n', '                exitPath,\n', '                address(this),\n', '                liqData.deadline\n', '            )[exitPath.length - 1];\n', '        } else {\n', '            tokensReceived = underlyingBal;\n', '        }\n', '\n', '        // Step 5: Sanity check to ensure process is profitable\n', '        require(\n', '            tokensReceived >= amount + fee + liqData.minProfit,\n', '            "Not enough profit"\n', '        );\n', '\n', '        // Step 6: Send profits to caller\n', '        IERC20(token).safeTransfer(\n', '            liqData.caller,\n', '            tokensReceived - (amount + fee)\n', '        );\n', '        return keccak256("ERC3156FlashBorrower.onFlashLoan");\n', '    }\n', '\n', '    function receiveEth() external payable {}\n', '\n', '    function setFlashLender(IERC3156FlashLender _flashLender)\n', '        external\n', '        onlyOwner\n', '    {\n', '        flashLender = _flashLender;\n', '    }\n', '\n', '    function setComptroller(IComptroller _comptroller) external onlyOwner {\n', '        comptroller = _comptroller;\n', '    }\n', '\n', '    function _getDolaPath(address _token)\n', '        internal\n', '        pure\n', '        returns (address[] memory path)\n', '    {\n', '        if (_token == address(weth)) {\n', '            path = new address[](2);\n', '            path[0] = address(weth);\n', '            path[1] = address(dola);\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = _token;\n', '            path[1] = address(weth);\n', '            path[2] = address(dola);\n', '        }\n', '    }\n', '\n', '    function _getExitPath(address _underlying, address _token)\n', '        internal\n', '        pure\n', '        returns (address[] memory path)\n', '    {\n', '        if (_underlying == address(weth)) {\n', '            path = new address[](2);\n', '            path[0] = address(weth);\n', '            path[1] = _token;\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = address(_underlying);\n', '            path[1] = address(weth);\n', '            path[2] = _token;\n', '        }\n', '    }\n', '\n', '    function _approve(\n', '        IERC20 _token,\n', '        address _spender,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (_token.allowance(address(this), _spender) < _amount) {\n', '            _token.safeApprove(_spender, type(uint256).max);\n', '        }\n', '    }\n', '}']