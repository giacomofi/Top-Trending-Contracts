['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-06\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '// import "http://github.com/OpenZeppelin/openzeppelin-solidity/contracts/token/ERC721/ERC721Full.sol";\n', '// import "http://github.com/OpenZeppelin/openzeppelin-solidity/contracts/drafts/Counters.sol";\n', '\n', '\n', 'contract SnowDaqBuilderMaster {\n', '    \n', '    //MODIFIERS\n', '    \n', '    modifier onlyOwner() {\n', '      require((msg.sender) == contractOwner);\n', '      _;\n', '    }\n', '    \n', '    //CONSTANTS\n', '    \n', '    // how many nifties this contract is selling\n', '    // used for metadat retrieval \n', '    uint public numNiftiesCurrentlyInContract;\n', '    \n', '    //id of this contract for metadata server\n', '    uint public contractId;\n', '    \n', '    address public contractOwner;\n', '    address public tokenTransferProxy;\n', '    \n', '    //multipliers to construct token Ids\n', '    uint topLevelMultiplier = 100000000;\n', '    uint midLevelMultiplier = 10000;\n', '    \n', '    //MAPPINGS\n', '    \n', '    //ERC20s that can mube used to pay\n', '    mapping (address => bool) public ERC20sApproved;\n', '    mapping (address => uint) public ERC20sDec;\n', '    \n', '    //CONSTRUCTOR FUNCTION\n', '\n', '    constructor() public { \n', '    }\n', '    \n', '    function changeTokenTransferProxy(address newTokenTransferProxy) onlyOwner public {\n', '        tokenTransferProxy = newTokenTransferProxy;\n', '    }\n', '    \n', '    function changeOwnerKey(address newOwner) onlyOwner public {\n', '        contractOwner = newOwner;\n', '    }\n', '    \n', '    \n', '    //functions to retrieve info from token Ids\n', '    function getContractId(uint tokenId) public view returns (uint) {\n', '        return (uint(tokenId/topLevelMultiplier));\n', '    }\n', '    \n', '    function getSnowDaqTypeId(uint tokenId) public view returns (uint) {\n', '        uint top_level = getContractId(tokenId);\n', '        return uint((tokenId-(topLevelMultiplier*top_level))/midLevelMultiplier);\n', '    }\n', '    \n', '    function getSpecificSnowDaqNum(uint tokenId) public view returns (uint) {\n', '         uint top_level = getContractId(tokenId);\n', '         uint mid_level = getSnowDaqTypeId(tokenId);\n', '         return uint(tokenId - (topLevelMultiplier*top_level) - (mid_level*midLevelMultiplier));\n', '    }\n', '    \n', '    function encodeTokenId(uint contractIdCalc, uint snowDaqType, uint specificSnowDaqNum) public view returns (uint) {\n', '        return ((contractIdCalc * topLevelMultiplier) + (snowDaqType * midLevelMultiplier) + specificSnowDaqNum);\n', '    }\n', '    \n', '      // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d, string memory _e) public view returns (string memory) {\n', '      bytes memory _ba = bytes(_a);\n', '      bytes memory _bb = bytes(_b);\n', '      bytes memory _bc = bytes(_c);\n', '      bytes memory _bd = bytes(_d);\n', '      bytes memory _be = bytes(_e);\n', '      string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '      bytes memory babcde = bytes(abcde);\n', '      uint k = 0;\n', '      for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '      for (uint i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '      for (uint i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '      for (uint i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '      for (uint i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '      return string(babcde);\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c, string memory _d) public view returns (string memory) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b, string memory _c) public view returns (string memory) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b) public view returns (string memory) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function uint2str(uint _i) public pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint j = _i;\n', '        uint len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = byte(uint8(48 + _i % 10));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '\n', '}']