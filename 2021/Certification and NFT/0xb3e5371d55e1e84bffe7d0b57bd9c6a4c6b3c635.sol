['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-08\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.6;  \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'abstract contract ILendingPool {\n', '    function flashLoan(\n', '        address payable _receiver,\n', '        address _reserve,\n', '        uint256 _amount,\n', '        bytes calldata _params\n', '    ) external virtual;\n', '\n', '    function deposit(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint16 _referralCode\n', '    ) external payable virtual;\n', '\n', '    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral)\n', '        external\n', '        virtual;\n', '\n', '    function borrow(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        uint256 _interestRateMode,\n', '        uint16 _referralCode\n', '    ) external virtual;\n', '\n', '    function repay(\n', '        address _reserve,\n', '        uint256 _amount,\n', '        address payable _onBehalfOf\n', '    ) external payable virtual;\n', '\n', '    function swapBorrowRateMode(address _reserve) external virtual;\n', '\n', '    function getReserves() external view virtual returns (address[] memory);\n', '\n', '    /// @param _reserve underlying token address\n', '    function getReserveData(address _reserve)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 totalLiquidity, // reserve total liquidity\n', '            uint256 availableLiquidity, // reserve available liquidity for borrowing\n', '            uint256 totalBorrowsStable, // total amount of outstanding borrows at Stable rate\n', '            uint256 totalBorrowsVariable, // total amount of outstanding borrows at Variable rate\n', '            uint256 liquidityRate, // current deposit APY of the reserve for depositors, in Ray units.\n', '            uint256 variableBorrowRate, // current variable rate APY of the reserve pool, in Ray units.\n', '            uint256 stableBorrowRate, // current stable rate APY of the reserve pool, in Ray units.\n', '            uint256 averageStableBorrowRate, // current average stable borrow rate\n', '            uint256 utilizationRate, // expressed as total borrows/total liquidity.\n', '            uint256 liquidityIndex, // cumulative liquidity index\n', '            uint256 variableBorrowIndex, // cumulative variable borrow index\n', '            address aTokenAddress, // aTokens contract address for the specific _reserve\n', '            uint40 lastUpdateTimestamp // timestamp of the last update of reserve data\n', '        );\n', '\n', '    /// @param _user users address\n', '    function getUserAccountData(address _user)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 totalLiquidityETH, // user aggregated deposits across all the reserves. In Wei\n', '            uint256 totalCollateralETH, // user aggregated collateral across all the reserves. In Wei\n', '            uint256 totalBorrowsETH, // user aggregated outstanding borrows across all the reserves. In Wei\n', '            uint256 totalFeesETH, // user aggregated current outstanding fees in ETH. In Wei\n', '            uint256 availableBorrowsETH, // user available amount to borrow in ETH\n', '            uint256 currentLiquidationThreshold, // user current average liquidation threshold across all the collaterals deposited\n', '            uint256 ltv, // user average Loan-to-Value between all the collaterals\n', '            uint256 healthFactor // user current Health Factor\n', '        );\n', '\n', '    /// @param _reserve underlying token address\n', '    /// @param _user users address\n', '    function getUserReserveData(address _reserve, address _user)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 currentATokenBalance, // user current reserve aToken balance\n', '            uint256 currentBorrowBalance, // user current reserve outstanding borrow balance\n', '            uint256 principalBorrowBalance, // user balance of borrowed asset\n', '            uint256 borrowRateMode, // user borrow rate mode either Stable or Variable\n', '            uint256 borrowRate, // user current borrow rate APY\n', '            uint256 liquidityRate, // user current earn rate on _reserve\n', '            uint256 originationFee, // user outstanding loan origination fee\n', '            uint256 variableBorrowIndex, // user variable cumulative index\n', '            uint256 lastUpdateTimestamp, // Timestamp of the last data update\n', "            bool usageAsCollateralEnabled // Whether the user's current reserve is enabled as a collateral\n", '        );\n', '\n', '    function getReserveConfigurationData(address _reserve)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            address rateStrategyAddress,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive\n', '        );\n', '\n', '    // ------------------ LendingPoolCoreData ------------------------\n', '    function getReserveATokenAddress(address _reserve) public view virtual returns (address);\n', '\n', '    function getReserveConfiguration(address _reserve)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256,\n', '            bool\n', '        );\n', '\n', '    function getUserUnderlyingAssetBalance(address _reserve, address _user)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function getReserveCurrentLiquidityRate(address _reserve) public view virtual returns (uint256);\n', '\n', '    function getReserveCurrentVariableBorrowRate(address _reserve)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function getReserveTotalLiquidity(address _reserve) public view virtual returns (uint256);\n', '\n', '    function getReserveAvailableLiquidity(address _reserve) public view virtual returns (uint256);\n', '\n', '    function getReserveTotalBorrowsVariable(address _reserve) public view virtual returns (uint256);\n', '\n', '    // ---------------- LendingPoolDataProvider ---------------------\n', '    function calculateUserGlobalData(address _user)\n', '        public\n', '        view\n', '        virtual\n', '        returns (\n', '            uint256 totalLiquidityBalanceETH,\n', '            uint256 totalCollateralBalanceETH,\n', '            uint256 totalBorrowBalanceETH,\n', '            uint256 totalFeesETH,\n', '            uint256 currentLtv,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 healthFactor,\n', '            bool healthFactorBelowThreshold\n', '        );\n', '}  \n', '\n', '\n', '\n', 'abstract contract DSGuard {\n', '    function canCall(\n', '        address src_,\n', '        address dst_,\n', '        bytes4 sig\n', '    ) public view virtual returns (bool);\n', '\n', '    function permit(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function forbid(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function permit(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function forbid(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '}\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '}  \n', '\n', '\n', '\n', 'abstract contract DSAuthority {\n', '    function canCall(\n', '        address src,\n', '        address dst,\n', '        bytes4 sig\n', '    ) public view virtual returns (bool);\n', '}  \n', '\n', '\n', '\n', '\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig), "Not authorized");\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title ProxyPermission Proxy contract which works with DSProxy to give execute permission\n', 'contract ProxyPermission {\n', '    address public constant FACTORY_ADDRESS = 0x5a15566417e6C1c9546523066500bDDBc53F88C7;\n', '\n', '    /// @notice Called in the context of DSProxy to authorize an address\n', '    /// @param _contractAddr Address which will be authorized\n', '    function givePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '        DSGuard guard = DSGuard(currAuthority);\n', '\n', '        if (currAuthority == address(0)) {\n', '            guard = DSGuardFactory(FACTORY_ADDRESS).newGuard();\n', '            DSAuth(address(this)).setAuthority(DSAuthority(address(guard)));\n', '        }\n', '\n', '        guard.permit(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    /// @notice Called in the context of DSProxy to remove authority of an address\n', '    /// @param _contractAddr Auth address which will be removed from authority list\n', '    function removePermission(address _contractAddr) public {\n', '        address currAuthority = address(DSAuth(address(this)).authority());\n', '\n', "        // if there is no authority, that means that contract doesn't have permission\n", '        if (currAuthority == address(0)) {\n', '            return;\n', '        }\n', '\n', '        DSGuard guard = DSGuard(currAuthority);\n', '        guard.forbid(_contractAddr, address(this), bytes4(keccak256("execute(address,bytes)")));\n', '    }\n', '\n', '    function proxyOwner() internal view returns (address) {\n', '        return DSAuth(address(this)).owner();\n', '    }\n', '}  \n', '\n', '\n', '\n', 'abstract contract IDFSRegistry {\n', ' \n', '    function getAddr(bytes32 _id) public view virtual returns (address);\n', '\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public virtual;\n', '\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public virtual;\n', '\n', '    function approveContractChange(bytes32 _id) public virtual;\n', '\n', '    function cancelContractChange(bytes32 _id) public virtual;\n', '\n', '    function changeWaitPeriod(bytes32 _id, uint256 _newWaitPeriod) public virtual;\n', '}  \n', '\n', '\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(\n', '        address _from,\n', '        address _to,\n', '        uint256 _value\n', '    ) external returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  \n', '\n', '\n', '\n', 'library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', 'library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /// @dev Edited so it always first approves 0 and then the value, because of non standard tokens\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', '            "SafeERC20: decreased allowance below zero"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', '            "SafeERC20: low-level call failed"\n', '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '/// @title A stateful contract that holds and can change owner/admin\n', 'contract AdminVault {\n', '    address public owner;\n', '    address public admin;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function changeOwner(address _owner) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function changeAdmin(address _admin) public {\n', '        require(admin == msg.sender, "msg.sender not admin");\n', '        admin = _admin;\n', '    }\n', '\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title AdminAuth Handles owner/admin privileges over smart contracts\n', 'contract AdminAuth {\n', '    using SafeERC20 for IERC20;\n', '\n', '    AdminVault public constant adminVault = AdminVault(0xCCf3d848e08b94478Ed8f46fFead3008faF581fD);\n', '\n', '    modifier onlyOwner() {\n', '        require(adminVault.owner() == msg.sender, "msg.sender not owner");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(adminVault.admin() == msg.sender, "msg.sender not admin");\n', '        _;\n', '    }\n', '\n', '    /// @notice withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, address _receiver, uint256 _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(_receiver).transfer(_amount);\n', '        } else {\n', '            IERC20(_token).safeTransfer(_receiver, _amount);\n', '        }\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyAdmin {\n', '        selfdestruct(payable(msg.sender));\n', '    }\n', '}  \n', '\n', '\n', '\n', 'contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(\n', '        address _contract,\n', '        address _caller,\n', '        string memory _logName,\n', '        bytes memory _data\n', '    ) public {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Stores all the important DFS addresses and can be changed (timelock)\n', 'contract DFSRegistry is AdminAuth {\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_ENTRY_ALREADY_EXISTS = "Entry id already exists";\n', '    string public constant ERR_ENTRY_NON_EXISTENT = "Entry id doesn\'t exists";\n', '    string public constant ERR_ENTRY_NOT_IN_CHANGE = "Entry not in change process";\n', '    string public constant ERR_WAIT_PERIOD_SHORTER = "New wait period must be bigger";\n', '    string public constant ERR_CHANGE_NOT_READY = "Change not ready yet";\n', '    string public constant ERR_EMPTY_PREV_ADDR = "Previous addr is 0";\n', '    string public constant ERR_ALREADY_IN_CONTRACT_CHANGE = "Already in contract change";\n', '    string public constant ERR_ALREADY_IN_WAIT_PERIOD_CHANGE = "Already in wait period change";\n', '\n', '    struct Entry {\n', '        address contractAddr;\n', '        uint256 waitPeriod;\n', '        uint256 changeStartTime;\n', '        bool inContractChange;\n', '        bool inWaitPeriodChange;\n', '        bool exists;\n', '    }\n', '\n', '    mapping(bytes32 => Entry) public entries;\n', '    mapping(bytes32 => address) public previousAddresses;\n', '\n', '    mapping(bytes32 => address) public pendingAddresses;\n', '    mapping(bytes32 => uint256) public pendingWaitTimes;\n', '\n', '    /// @notice Given an contract id returns the registered address\n', '    /// @dev Id is keccak256 of the contract name\n', '    /// @param _id Id of contract\n', '    function getAddr(bytes32 _id) public view returns (address) {\n', '        return entries[_id].contractAddr;\n', '    }\n', '\n', '    /// @notice Helper function to easily query if id is registered\n', '    /// @param _id Id of contract\n', '    function isRegistered(bytes32 _id) public view returns (bool) {\n', '        return entries[_id].exists;\n', '    }\n', '\n', '    /////////////////////////// OWNER ONLY FUNCTIONS ///////////////////////////\n', '\n', '    /// @notice Adds a new contract to the registry\n', '    /// @param _id Id of contract\n', '    /// @param _contractAddr Address of the contract\n', '    /// @param _waitPeriod Amount of time to wait before a contract address can be changed\n', '    function addNewContract(\n', '        bytes32 _id,\n', '        address _contractAddr,\n', '        uint256 _waitPeriod\n', '    ) public onlyOwner {\n', '        require(!entries[_id].exists, ERR_ENTRY_ALREADY_EXISTS);\n', '\n', '        entries[_id] = Entry({\n', '            contractAddr: _contractAddr,\n', '            waitPeriod: _waitPeriod,\n', '            changeStartTime: 0,\n', '            inContractChange: false,\n', '            inWaitPeriodChange: false,\n', '            exists: true\n', '        });\n', '\n', '        // Remember tha address so we can revert back to old addr if needed\n', '        previousAddresses[_id] = _contractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "AddNewContract",\n', '            abi.encode(_id, _contractAddr, _waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Reverts to the previous address immediately\n', '    /// @dev In case the new version has a fault, a quick way to fallback to the old contract\n', '    /// @param _id Id of contract\n', '    function revertToPreviousAddress(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(previousAddresses[_id] != address(0), ERR_EMPTY_PREV_ADDR);\n', '\n', '        address currentAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = previousAddresses[_id];\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "RevertToPreviousAddress",\n', '            abi.encode(_id, currentAddr, previousAddresses[_id])\n', '        );\n', '    }\n', '\n', '    /// @notice Starts an address change for an existing entry\n', '    /// @dev Can override a change that is currently in progress\n', '    /// @param _id Id of contract\n', '    /// @param _newContractAddr Address of the new contract\n', '    function startContractChange(bytes32 _id, address _newContractAddr) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inWaitPeriodChange, ERR_ALREADY_IN_WAIT_PERIOD_CHANGE);\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inContractChange = true;\n', '\n', '        pendingAddresses[_id] = _newContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartContractChange",\n', '            abi.encode(_id, entries[_id].contractAddr, _newContractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new contract address, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        address oldContractAddr = entries[_id].contractAddr;\n', '        entries[_id].contractAddr = pendingAddresses[_id];\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        previousAddresses[_id] = oldContractAddr;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel pending change\n', '    /// @param _id Id of contract\n', '    function cancelContractChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inContractChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        address oldContractAddr = pendingAddresses[_id];\n', '\n', '        pendingAddresses[_id] = address(0);\n', '        entries[_id].inContractChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelContractChange",\n', '            abi.encode(_id, oldContractAddr, entries[_id].contractAddr)\n', '        );\n', '    }\n', '\n', '    /// @notice Starts the change for waitPeriod\n', '    /// @param _id Id of contract\n', '    /// @param _newWaitPeriod New wait time\n', '    function startWaitPeriodChange(bytes32 _id, uint256 _newWaitPeriod) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(!entries[_id].inContractChange, ERR_ALREADY_IN_CONTRACT_CHANGE);\n', '\n', '        pendingWaitTimes[_id] = _newWaitPeriod;\n', '\n', '        entries[_id].changeStartTime = block.timestamp; // solhint-disable-line\n', '        entries[_id].inWaitPeriodChange = true;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "StartWaitPeriodChange",\n', '            abi.encode(_id, _newWaitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Changes new wait period, correct time must have passed\n', '    /// @param _id Id of contract\n', '    function approveWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '        require(\n', '            block.timestamp >= (entries[_id].changeStartTime + entries[_id].waitPeriod), // solhint-disable-line\n', '            ERR_CHANGE_NOT_READY\n', '        );\n', '\n', '        uint256 oldWaitTime = entries[_id].waitPeriod;\n', '        entries[_id].waitPeriod = pendingWaitTimes[_id];\n', '        \n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "ApproveWaitPeriodChange",\n', '            abi.encode(_id, oldWaitTime, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '\n', '    /// @notice Cancel wait period change\n', '    /// @param _id Id of contract\n', '    function cancelWaitPeriodChange(bytes32 _id) public onlyOwner {\n', '        require(entries[_id].exists, ERR_ENTRY_NON_EXISTENT);\n', '        require(entries[_id].inWaitPeriodChange, ERR_ENTRY_NOT_IN_CHANGE);\n', '\n', '        uint256 oldWaitPeriod = pendingWaitTimes[_id];\n', '\n', '        pendingWaitTimes[_id] = 0;\n', '        entries[_id].inWaitPeriodChange = false;\n', '        entries[_id].changeStartTime = 0;\n', '\n', '        logger.Log(\n', '            address(this),\n', '            msg.sender,\n', '            "CancelWaitPeriodChange",\n', '            abi.encode(_id, oldWaitPeriod, entries[_id].waitPeriod)\n', '        );\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '/// @title Implements Action interface and common helpers for passing inputs\n', 'abstract contract ActionBase is AdminAuth {\n', '    address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\n', '    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n', '\n', '    DefisaverLogger public constant logger = DefisaverLogger(\n', '        0x5c55B921f590a89C1Ebe84dF170E655a82b62126\n', '    );\n', '\n', '    string public constant ERR_SUB_INDEX_VALUE = "Wrong sub index value";\n', '    string public constant ERR_RETURN_INDEX_VALUE = "Wrong return index value";\n', '\n', '    /// @dev Subscription params index range [128, 255]\n', '    uint8 public constant SUB_MIN_INDEX_VALUE = 128;\n', '    uint8 public constant SUB_MAX_INDEX_VALUE = 255;\n', '\n', '    /// @dev Return params index range [1, 127]\n', '    uint8 public constant RETURN_MIN_INDEX_VALUE = 1;\n', '    uint8 public constant RETURN_MAX_INDEX_VALUE = 127;\n', '\n', '    /// @dev If the input value should not be replaced\n', '    uint8 public constant NO_PARAM_MAPPING = 0;\n', '\n', '    /// @dev We need to parse Flash loan actions in a different way\n', '    enum ActionType { FL_ACTION, STANDARD_ACTION, CUSTOM_ACTION }\n', '\n', '    /// @notice Parses inputs and runs the implemented action through a proxy\n', '    /// @dev Is called by the TaskExecutor chaining actions together\n', '    /// @param _callData Array of input values each value encoded as bytes\n', '    /// @param _subData Array of subscribed vales, replaces input values if specified\n', '    /// @param _paramMapping Array that specifies how return and subscribed values are mapped in input\n', '    /// @param _returnValues Returns values from actions before, which can be injected in inputs\n', '    /// @return Returns a bytes32 value through DSProxy, each actions implements what that value is\n', '    function executeAction(\n', '        bytes[] memory _callData,\n', '        bytes[] memory _subData,\n', '        uint8[] memory _paramMapping,\n', '        bytes32[] memory _returnValues\n', '    ) public payable virtual returns (bytes32);\n', '\n', '    /// @notice Parses inputs and runs the single implemented action through a proxy\n', '    /// @dev Used to save gas when executing a single action directly\n', '    function executeActionDirect(bytes[] memory _callData) public virtual payable;\n', '\n', '    /// @notice Returns the type of action we are implementing\n', '    function actionType() public pure virtual returns (uint8);\n', '\n', '\n', '    //////////////////////////// HELPER METHODS ////////////////////////////\n', '\n', '    /// @notice Given an uint256 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamUint(\n', '        uint _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (uint) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = uint(_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (uint));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '\n', '    /// @notice Given an addr input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamAddr(\n', '        address _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (address) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = address(bytes20((_returnValues[getReturnIndex(_mapType)])));\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (address));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Given an bytes32 input, injects return/sub values if specified\n', '    /// @param _param The original input value\n', '    /// @param _mapType Indicated the type of the input in paramMapping\n', '    /// @param _subData Array of subscription data we can replace the input value with\n', '    /// @param _returnValues Array of subscription data we can replace the input value with\n', '    function _parseParamABytes32(\n', '        bytes32 _param,\n', '        uint8 _mapType,\n', '        bytes[] memory _subData,\n', '        bytes32[] memory _returnValues\n', '    ) internal pure returns (bytes32) {\n', '        if (isReplaceable(_mapType)) {\n', '            if (isReturnInjection(_mapType)) {\n', '                _param = (_returnValues[getReturnIndex(_mapType)]);\n', '            } else {\n', '                _param = abi.decode(_subData[getSubIndex(_mapType)], (bytes32));\n', '            }\n', '        }\n', '\n', '        return _param;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value indicated that we need to inject values\n', '    /// @param _type Indicated the type of the input\n', '    function isReplaceable(uint8 _type) internal pure returns (bool) {\n', '        return _type != NO_PARAM_MAPPING;\n', '    }\n', '\n', '    /// @notice Checks if the paramMapping value is in the return value range\n', '    /// @param _type Indicated the type of the input\n', '    function isReturnInjection(uint8 _type) internal pure returns (bool) {\n', '        return (_type >= RETURN_MIN_INDEX_VALUE) && (_type <= RETURN_MAX_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in return array value\n', '    /// @param _type Indicated the type of the input\n', '    function getReturnIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(isReturnInjection(_type), ERR_SUB_INDEX_VALUE);\n', '\n', '        return (_type - RETURN_MIN_INDEX_VALUE);\n', '    }\n', '\n', '    /// @notice Transforms the paramMapping value to the index in sub array value\n', '    /// @param _type Indicated the type of the input\n', '    function getSubIndex(uint8 _type) internal pure returns (uint8) {\n', '        require(_type >= SUB_MIN_INDEX_VALUE, ERR_RETURN_INDEX_VALUE);\n', '\n', '        return (_type - SUB_MIN_INDEX_VALUE);\n', '    }\n', '}  \n', '\n', '\n', '\n', 'abstract contract IDSProxy {\n', '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public\n', '    //     payable\n', '    //     virtual\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public payable virtual returns (bool);\n', '\n', '    function owner() public view virtual returns (address);\n', '}  \n', '\n', '\n', ' \n', '\n', '/// @title Struct data in a separate contract so it can be used in multiple places\n', 'contract StrategyData {\n', '    struct Template {\n', '        string name;\n', '        bytes32[] triggerIds;\n', '        bytes32[] actionIds;\n', '        uint8[][] paramMapping;\n', '    }\n', '\n', '    struct Task {\n', '        string name;\n', '        bytes[][] callData;\n', '        bytes[][] subData;\n', '        bytes32[] actionIds;\n', '        uint8[][] paramMapping;\n', '    }\n', '\n', '    struct Strategy {\n', '        uint templateId;\n', '        address proxy;\n', '        bytes[][] subData;\n', '        bytes[][] triggerData;\n', '        bool active;\n', '\n', '        uint posInUserArr;\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Storage of strategies and templates\n', 'contract Subscriptions is StrategyData, AdminAuth {\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    string public constant ERR_EMPTY_STRATEGY = "Strategy does not exist";\n', '    string public constant ERR_SENDER_NOT_OWNER = "Sender is not strategy owner";\n', '    string public constant ERR_USER_POS_EMPTY = "No user positions";\n', '\n', '    /// @dev The order of strategies might change as they are deleted\n', '    Strategy[] public strategies;\n', '\n', '    /// @dev Templates are fixed and are non removable\n', '    Template[] public templates;\n', '\n', '    /// @dev Keeps track of all the users strategies (their indexes in the array)\n', '    mapping (address => uint[]) public usersPos;\n', '\n', '    /// @dev Increments on state change, used for easier off chain tracking of changes\n', '    uint public updateCounter;\n', '\n', '    /// @notice Creates a new strategy with an existing template\n', '    /// @param _templateId Id of the template used for strategy\n', '    /// @param _active If the strategy is turned on at the start\n', '    /// @param _subData Subscription data for actions\n', '    /// @param _triggerData Subscription data for triggers\n', '    function createStrategy(\n', '        uint _templateId,\n', '        bool _active,\n', '        bytes[][] memory _subData,\n', '        bytes[][] memory _triggerData\n', '    ) public returns (uint) {\n', '        strategies.push(\n', '            Strategy({\n', '                templateId: _templateId,\n', '                proxy: msg.sender,\n', '                active: _active,\n', '                subData: _subData,\n', '                triggerData: _triggerData,\n', '                posInUserArr: (usersPos[msg.sender].length - 1)\n', '            })\n', '        );\n', '\n', '        usersPos[msg.sender].push(strategies.length - 1);\n', '\n', '        updateCounter++;\n', '\n', '        logger.Log(address(this), msg.sender, "CreateStrategy", abi.encode(strategies.length - 1));\n', '\n', '        return strategies.length - 1;\n', '    }\n', '\n', '    /// @notice Creates a new template to use in strategies\n', "    /// @dev Templates once created can't be changed\n", '    /// @param _name Name of template, used mainly for logging\n', '    /// @param _triggerIds Array of trigger ids which translate to trigger addresses\n', '    /// @param _actionIds Array of actions ids which translate to action addresses\n', '    /// @param _paramMapping Array that holds metadata of how inputs are mapped to sub/return data\n', '    function createTemplate(\n', '        string memory _name,\n', '        bytes32[] memory _triggerIds,\n', '        bytes32[] memory _actionIds,\n', '        uint8[][] memory _paramMapping\n', '    ) public returns (uint) {\n', '        \n', '        templates.push(\n', '            Template({\n', '                name: _name,\n', '                triggerIds: _triggerIds,\n', '                actionIds: _actionIds,\n', '                paramMapping: _paramMapping\n', '            })\n', '        );\n', '\n', '        updateCounter++;\n', '\n', '        logger.Log(address(this), msg.sender, "CreateTemplate", abi.encode(templates.length - 1));\n', '\n', '        return templates.length - 1;\n', '    }\n', '\n', '    /// @notice Updates the users strategy\n', '    /// @dev Only callable by proxy who created the strategy\n', '    /// @param _strategyId Id of the strategy to update\n', '    /// @param _templateId Id of the template used for strategy\n', '    /// @param _active If the strategy is turned on at the start\n', '    /// @param _subData Subscription data for actions\n', '    /// @param _triggerData Subscription data for triggers\n', '    function updateStrategy(\n', '        uint _strategyId,\n', '        uint _templateId,\n', '        bool _active,\n', '        bytes[][] memory _subData,\n', '        bytes[][] memory _triggerData\n', '    ) public {\n', '        Strategy storage s = strategies[_strategyId];\n', '\n', '        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n', '        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n', '\n', '        s.templateId = _templateId;\n', '        s.active = _active;\n', '        s.subData = _subData;\n', '        s.triggerData = _triggerData;\n', '\n', '        updateCounter++;\n', '\n', '        logger.Log(address(this), msg.sender, "UpdateStrategy", abi.encode(_strategyId));\n', '    }\n', '\n', '    /// @notice Unsubscribe an existing strategy\n', '    /// @dev Only callable by proxy who created the strategy\n', '    /// @param _subId Subscription id\n', '    function removeStrategy(uint256 _subId) public {\n', '        Strategy memory s = strategies[_subId];\n', '        require(s.proxy != address(0), ERR_EMPTY_STRATEGY);\n', '        require(msg.sender == s.proxy, ERR_SENDER_NOT_OWNER);\n', '\n', '        uint lastSub = strategies.length - 1;\n', '\n', '        _removeUserPos(msg.sender, s.posInUserArr);\n', '\n', '        strategies[_subId] = strategies[lastSub]; // last strategy put in place of the deleted one\n', '        strategies.pop(); // delete last strategy, because it moved\n', '\n', '        logger.Log(address(this), msg.sender, "Unsubscribe", abi.encode(_subId));\n', '    }\n', '\n', '    function _removeUserPos(address _user, uint _index) internal {\n', '        require(usersPos[_user].length > 0, ERR_USER_POS_EMPTY);\n', '        uint lastPos = usersPos[_user].length - 1;\n', '\n', '        usersPos[_user][_index] = usersPos[_user][lastPos];\n', '        usersPos[_user].pop();\n', '    }\n', '\n', '    ///////////////////// VIEW ONLY FUNCTIONS ////////////////////////////\n', '\n', '    function getTemplateFromStrategy(uint _strategyId) public view returns (Template memory) {\n', '        uint templateId = strategies[_strategyId].templateId;\n', '        return templates[templateId];\n', '    }\n', '\n', '    function getStrategy(uint _strategyId) public view returns (Strategy memory) {\n', '        return strategies[_strategyId];\n', '    }\n', '\n', '    function getTemplate(uint _templateId) public view returns (Template memory) {\n', '        return templates[_templateId];\n', '    }\n', '\n', '    function getStrategyCount() public view returns (uint256) {\n', '        return strategies.length;\n', '    }\n', '\n', '    function getTemplateCount() public view returns (uint256) {\n', '        return templates.length;\n', '    }\n', '\n', '    function getStrategies() public view returns (Strategy[] memory) {\n', '        return strategies;\n', '    }\n', '\n', '    function getTemplates() public view returns (Template[] memory) {\n', '        return templates;\n', '    }\n', '\n', '    function userHasStrategies(address _user) public view returns (bool) {\n', '        return usersPos[_user].length > 0;\n', '    }\n', '\n', '    function getUserStrategies(address _user) public view returns (Strategy[] memory) {\n', '        Strategy[] memory userStrategies = new Strategy[](usersPos[_user].length);\n', '        \n', '        for (uint i = 0; i < usersPos[_user].length; ++i) {\n', '            userStrategies[i] = strategies[usersPos[_user][i]];\n', '        }\n', '\n', '        return userStrategies;\n', '    }\n', '\n', '    function getPaginatedStrategies(uint _page, uint _perPage) public view returns (Strategy[] memory) {\n', '        Strategy[] memory strategiesPerPage = new Strategy[](_perPage);\n', '\n', '        uint start = _page * _perPage;\n', '        uint end = start + _perPage;\n', '\n', '        end = (end > strategiesPerPage.length) ? strategiesPerPage.length : end;\n', '\n', '        uint count = 0;\n', '        for (uint i = start; i < end; i++) {\n', '            strategiesPerPage[count] = strategies[i];\n', '            count++;\n', '        }\n', '\n', '        return strategiesPerPage;\n', '    }\n', '\n', '    function getPaginatedTemplates(uint _page, uint _perPage) public view returns (Template[] memory) {\n', '        Template[] memory templatesPerPage = new Template[](_perPage);\n', '\n', '        uint start = _page * _perPage;\n', '        uint end = start + _perPage;\n', '\n', '        end = (end > templatesPerPage.length) ? templatesPerPage.length : end;\n', '\n', '        uint count = 0;\n', '        for (uint i = start; i < end; i++) {\n', '            templatesPerPage[count] = templates[i];\n', '            count++;\n', '        }\n', '\n', '        return templatesPerPage;\n', '    }\n', '}  \n', '\n', '\n', ' \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/// @title Handles FL taking and executes actions\n', 'contract TaskExecutor is StrategyData, ProxyPermission, AdminAuth {\n', '    address public constant DEFISAVER_LOGGER = 0x5c55B921f590a89C1Ebe84dF170E655a82b62126;\n', '\n', '    address public constant REGISTRY_ADDR = 0xD6049E1F5F3EfF1F921f5532aF1A1632bA23929C;\n', '    DFSRegistry public constant registry = DFSRegistry(REGISTRY_ADDR);\n', '\n', '    bytes32 constant SUBSCRIPTION_ID = keccak256("Subscriptions");\n', '\n', '    /// @notice Called directly through DsProxy to execute a task\n', '    /// @dev This is the main entry point for Recipes/Tasks executed manually\n', '    /// @param _currTask Task to be executed\n', '    function executeTask(Task memory _currTask) public payable   {\n', '        _executeActions(_currTask);\n', '    }\n', '\n', '    /// @notice Called through the Strategy contract to execute a task\n', '    /// @param _strategyId Id of the strategy we want to execute\n', '    /// @param _actionCallData All the data related to the strategies Task\n', '    function executeStrategyTask(uint256 _strategyId, bytes[][] memory _actionCallData)\n', '        public\n', '        payable\n', '    {\n', '        address subAddr = registry.getAddr(SUBSCRIPTION_ID);\n', '        Strategy memory strategy = Subscriptions(subAddr).getStrategy(_strategyId);\n', '        Template memory template = Subscriptions(subAddr).getTemplate(strategy.templateId);\n', '\n', '        Task memory currTask =\n', '            Task({\n', '                name: template.name,\n', '                callData: _actionCallData,\n', '                subData: strategy.subData,\n', '                actionIds: template.actionIds,\n', '                paramMapping: template.paramMapping\n', '            });\n', '\n', '        _executeActions(currTask);\n', '    }\n', '\n', '    /// @notice This is the callback function that FL actions call\n', '    /// @dev FL function must be the first action and repayment is done last\n', '    /// @param _currTask Task to be executed\n', '    /// @param _flAmount Result value from FL action\n', '    function _executeActionsFromFL(Task memory _currTask, bytes32 _flAmount) public payable {\n', '        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\n', '        returnValues[0] = _flAmount; // set the flash loan action as first return value\n', '\n', '        // skips the first actions as it was the fl action\n', '        for (uint256 i = 1; i < _currTask.actionIds.length; ++i) {\n', '            returnValues[i] = _executeAction(_currTask, i, returnValues);\n', '        }\n', '    }\n', '\n', '    /// @notice Runs all actions from the task\n', '    /// @dev FL action must be first and is parsed separately, execution will go to _executeActionsFromFL\n', '    /// @param _currTask to be executed\n', '    function _executeActions(Task memory _currTask) internal {\n', '        address firstActionAddr = registry.getAddr(_currTask.actionIds[0]);\n', '\n', '        bytes32[] memory returnValues = new bytes32[](_currTask.actionIds.length);\n', '\n', '        if (isFL(firstActionAddr)) {\n', '            _parseFLAndExecute(_currTask, firstActionAddr, returnValues);\n', '        } else {\n', '            for (uint256 i = 0; i < _currTask.actionIds.length; ++i) {\n', '                returnValues[i] = _executeAction(_currTask, i, returnValues);\n', '            }\n', '        }\n', '\n', '        /// log the task name\n', '        DefisaverLogger(DEFISAVER_LOGGER).Log(address(this), msg.sender, _currTask.name, "");\n', '    }\n', '\n', '    /// @notice Gets the action address and executes it\n', '    /// @param _currTask Task to be executed\n', '    /// @param _index Index of the action in the task array\n', '    /// @param _returnValues Return values from previous actions\n', '    function _executeAction(\n', '        Task memory _currTask,\n', '        uint256 _index,\n', '        bytes32[] memory _returnValues\n', '    ) internal returns (bytes32 response) {\n', '        response = IDSProxy(address(this)).execute(\n', '            registry.getAddr(_currTask.actionIds[_index]),\n', '            abi.encodeWithSignature(\n', '                "executeAction(bytes[],bytes[],uint8[],bytes32[])",\n', '                _currTask.callData[_index],\n', '                _currTask.subData[_index],\n', '                _currTask.paramMapping[_index],\n', '                _returnValues\n', '            )\n', '        );\n', '    }\n', '\n', '    /// @notice Prepares and executes a flash loan action\n', '    /// @dev It adds to the last input value of the FL, the task data so it can be passed on\n', '    /// @param _currTask Task to be executed\n', '    /// @param _flActionAddr Address of the flash loan action\n', "    /// @param _returnValues An empty array of return values, because it's the first action\n", '    function _parseFLAndExecute(\n', '        Task memory _currTask,\n', '        address _flActionAddr,\n', '        bytes32[] memory _returnValues\n', '    ) internal {\n', '        givePermission(_flActionAddr);\n', '\n', '        bytes memory taskData = abi.encode(_currTask, address(this));\n', '\n', '        // last input value is empty for FL action, attach task data there\n', '        _currTask.callData[0][_currTask.callData[0].length - 1] = taskData;\n', '\n', '        /// @dev FL action is called directly so that we can check who the msg.sender of FL is\n', '        ActionBase(_flActionAddr).executeAction(\n', '            _currTask.callData[0],\n', '            _currTask.subData[0],\n', '            _currTask.paramMapping[0],\n', '            _returnValues\n', '        );\n', '\n', '        removePermission(_flActionAddr);\n', '    }\n', '\n', '    /// @notice Checks if the specified address is of FL type action\n', '    /// @param _actionAddr Address of the action\n', '    function isFL(address _actionAddr) internal pure returns (bool) {\n', '        return ActionBase(_actionAddr).actionType() == uint8(ActionBase.ActionType.FL_ACTION);\n', '    }\n', '}']