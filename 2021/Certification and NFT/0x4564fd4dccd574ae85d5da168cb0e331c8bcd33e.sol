['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./SafeERC20.sol";\n', '\n', '\n', '/// @title HoldefiCollaterals\n', '/// @author Holdefi Team\n', '/// @notice Collaterals is held by this contract\n', '/// @dev The address of ETH asset considered as 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE\n', '/// @dev Error codes description: \n', '/// \tCE01: Sender should be Holdefi contract\n', '/// \tCE02: Cannot transfer\n', 'contract HoldefiCollaterals {\n', '\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\taddress constant private ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '\taddress public holdefiContract;\n', '\n', '\t/// @dev Initializes the main Holdefi contract address\n', '\tconstructor() public {\n', '\t\tholdefiContract = msg.sender;\n', '\t}\n', '\n', '\t/// @notice Modifier to check that only Holdefi contract interacts with the function\n', '    modifier onlyHoldefiContract() {\n', '        require (msg.sender == holdefiContract, "CE01");\n', '        _;\n', '    }\n', '\n', '\t/// @notice Only Holdefi contract can send ETH to this contract\n', '    receive() external payable onlyHoldefiContract {\n', '\t}\n', '\n', '\t/// @notice Holdefi contract withdraws collateral from this contract to recipient account\n', '\t/// @param collateral Address of the given collateral\n', '\t/// @param recipient Address of the recipient\n', '\t/// @param amount Amount to be withdrawn\n', '\tfunction withdraw (address collateral, address recipient, uint256 amount)\n', '\t\texternal\n', '\t\tonlyHoldefiContract\n', '\t{\n', '\t\tif (collateral == ethAddress){\n', '\t\t\t(bool success, ) = recipient.call{value:amount}("");\n', '\t\t\trequire (success, "CE02");\n', '\t\t}\n', '\t\telse {\n', '\t\t\tIERC20 token = IERC20(collateral);\n', '\t\t\ttoken.safeTransfer(recipient, amount);\n', '\t\t}\n', '\t}\n', '}']