['"""\n', '@title Greenwood CompoundCalculator\n', '@notice Compound calculations for the Greenwood Protocol\n', '@author Greenwood Labs\n', '"""\n', '\n', '# define the interfaces used by the contract\n', 'interface COMPOUND_PRICE_FEED:\n', '    def price(_ticker: String[10]) -> uint256: view\n', '\n', 'interface COMPTROLLER:\n', '    def markets(_c_token: address) -> (bool, uint256, bool): view\n', '\n', 'interface CTOKEN:\n', '    def mint(_mint_amount: uint256) -> uint256: payable\n', '    def borrow(_borrow_amount: uint256) -> uint256: payable\n', '    def repayBorrow(_repay_amount: uint256) -> uint256: payable\n', '    def borrowIndex() -> uint256: nonpayable\n', '    def redeemUnderlying(_redeem_amount: uint256) -> uint256: payable\n', '    def exchangeRateStored() -> uint256: nonpayable\n', '    def borrowRatePerBlock() -> uint256: nonpayable\n', '    def borrowBalanceCurrent(_account: address) -> uint256: nonpayable\n', '    def accrualBlockNumber() -> uint256: nonpayable\n', '\n', 'interface REGISTRY:\n', '    def getAddress(_contract: String[20], _version: String[11]) -> address: nonpayable\n', '    def governance() -> address: nonpayable\n', '\n', '# define the constants used by the contract\n', 'LOOP_LIMIT: constant(uint256) = 100\n', 'TEN_EXP_6: constant(uint256) = 1000000\n', 'TEN_EXP_18: constant(uint256) = 1000000000000000000\n', 'CONTRACT_PRECISION: constant(decimal) = 10000000000.0\n', '\n', '# define the events emitted by the contract\n', 'event SetFee:\n', '    previousFee: uint256\n', '    newFee: uint256\n', '    governance: address\n', '    blockNumber: uint256\n', '\n', 'event SetRegistry:\n', '    previousRegistry: address\n', '    newRegistry: address\n', '    governance: address\n', '    blockNumber: uint256\n', '\n', '# define the structs used by the contract\n', 'struct AssetContext:\n', '    aToken: address\n', '    aaveV2PriceFeed: address\n', '    aaveV2LendingPool: address\n', '    cToken: address\n', '    compoundPriceFeed: address\n', '    comptroller: address\n', '    decimals: uint256\n', '    underlying: address\n', '\n', 'struct Loan:\n', '    collateralAsset: address\n', '    borrowAsset: address\n', '    outstanding: uint256\n', '    collateralizationRatio: uint256\n', '    collateralLocked: uint256\n', '    borrower: address\n', '    lastBorrowIndex: uint256\n', '    repaymentTime: uint256\n', '\n', 'struct CompoundBorrowCalculation:\n', '    requiredCollateral: uint256\n', '    borrowAmount: uint256\n', '    originationFee: uint256\n', '\n', 'struct CompoundRepayCalculation:\n', '    repayAmount: uint256\n', '    redemptionAmount: int128\n', '    requiredCollateral: uint256\n', '    outstanding: int128\n', '\n', 'struct CompoundWithdrawCalculation:\n', '    requiredCollateral: uint256\n', '    outstanding: uint256\n', '\n', '# define the storage variables used by the contract\n', 'protocolFee: public(uint256)\n', 'registry: public(address)\n', '\n', '@external\n', 'def __init__(_protocol_fee: uint256, _registry: address):\n', '    """\n', '    @notice Contract constructor\n', '    @param _protocol_fee The origination fee for the Greenwood Protocol scaled by 1e18\n', '    @param _registry The address of the Greenwood Registry\n', '    """\n', '\n', '    # set the protocol fee\n', '    self.protocolFee = _protocol_fee\n', '\n', '    # set the address of the Greenwood Registry\n', '    self.registry = _registry\n', '\n', '@internal\n', 'def isAuthorized(_caller: address, _role: String[20], _version: String[11]) -> bool:\n', '    """\n', '    @notice Method for role-based security\n', '    @param _caller The address that called the permissioned method\n', '    @param _role The requested authorization level\n', '    @param _version The version of Greenwood to use\n', '    @return True if the caller is authorized, False otherwise\n', '    """\n', '\n', '    # check if the requested role is "escrow"\n', '    if keccak256(_role) == keccak256("escrow"):\n', '\n', '        # get the address of the Escrow from the Registry\n', '        controller: address = REGISTRY(self.registry).getAddress("compoundEscrow", _version)\n', '\n', '        # return the equality comparison\n', '        return controller == _caller\n', '    \n', '    # check if the requested role is "governance"\n', '    elif keccak256(_role) == keccak256("governance"):\n', '\n', '        # get the address of the Governance from the Registry\n', '        governance: address = REGISTRY(self.registry).governance()\n', '\n', '        # return the equality comparison\n', '        return governance == _caller\n', '\n', '    # catch extraneous role arguments\n', '    else:\n', '\n', '        # revert\n', '        raise "Unhandled role argument"\n', '\n', '    \n', '@external\n', 'def calculateBorrow(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _amount: uint256, _collateralization_ratio: uint256, _version: String[11]) -> CompoundBorrowCalculation:\n', '    """\n', '    @notice Calculate and return values needed to open a loan on Compound\n', '    @param _borrow_ticker The ticker string of the asset that is being borrowed\n', '    @param _collateral_ticker The ticker string of the asset that is being used as collateral\n', '    @param _borrow_context The AssetContext struct of the asset being borrowed\n', '    @param _collateral_context The AssetContext struct of the asset being used as collateral\n', "    @param _amount The amount of asset being borrowed scaled by the asset's decimals\n", '    @param _collateralization_ratio The collateralization ratio for the loan\n', '    @param _version The version of the Greenwood Protocol to use\n', '    @return CompoundBorrowCalculation struct\n', '    @dev Only the CompoundEscrow or the Governance can call this method\n', '    """\n', '\n', '    # require that the method caller is the Escrow or the Governance\n', '    assert self.isAuthorized(msg.sender, "escrow", _version) == True or self.isAuthorized(msg.sender, "governance", _version) == True\n', '\n', '    # setup memory variables to handle comptroller return values\n', '    isListed: bool = False\n', '    collateralFactorMantissa: uint256 = 0\n', '    isComped: bool = False\n', '\n', '    # get the collateral factor for the collateral asset using the comptroller\n', '    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\n', '\n', '    # convert collateralFactorMantissa to a percentage\n', '    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\n', '\n', '    # get the price of the borrow asset and the collateral asset denominated in USD\n', '    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\n', '    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\n', '\n', '    # scale down the asset prices and convert them to decimals\n', '    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '\n', '    # convert the borrow amount to a decimal and scale it down\n', '    borrowAmount: decimal = convert(_amount, decimal) / convert(10 ** _borrow_context.decimals, decimal)\n', '\n', '    # calculate the protocol fee\n', '    originationFee: decimal = (borrowAmount * (convert(self.protocolFee, decimal) / convert(TEN_EXP_18, decimal))) / (collateralAssetPrice / borrowAssetPrice)\n', '\n', '    # calculate the value of the borrow request denominated in USD\n', '    borrowAmountInUSD: decimal = borrowAmount * borrowAssetPrice\n', '\n', '    # calculate the required collateral denominated in USD\n', '    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\n', '\n', '    # calculate the required collateral denominated in the collateral asset \n', '    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\n', '\n', '    # calculate the required collateral for Greenwood plus fees denominated in the collateral asset\n', '    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_collateralization_ratio, decimal) / 100.0)\n', '\n', '    # scale the required collateral for Greenwood by the decimals of the collateral asset\n', '    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\n', '\n', '    return CompoundBorrowCalculation({\n', '        requiredCollateral: requiredCollateralScaled,\n', '        borrowAmount: convert(borrowAmount * convert(10 ** _borrow_context.decimals, decimal), uint256),    # scale the borrow amount back up and convert it to a uint256\n', '        originationFee: convert(originationFee * convert(10 ** _collateral_context.decimals, decimal), uint256) # scale the protocol fee back up and convert it to a uint256\n', '    })\n', '\n', '@external\n', 'def calculateWithdraw(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _loan: Loan, _version: String[11]) -> CompoundWithdrawCalculation:\n', '    """\n', '    @notice Calculate and return values needed to withdraw collateral from Compound\n', '    @param _borrow_ticker The ticker string of the asset that is being borrowed\n', '    @param _collateral_ticker The ticker string of the asset that is being used as collateral\n', '    @param _borrow_context The AssetContext struct of the asset being borrowed\n', '    @param _collateral_context The AssetContext struct of the asset being used as collateral\n', '    @param _loan A Loan struct containing loan data\n', '    @param _version The version of the Greenwood Protocol to use\n', '    @return CompoundWithdrawCalculation struct\n', '    @dev Only the CompoundEscrow or the Governance can call this method\n', '    """\n', '\n', '    # require that the method caller is the Escrow or the Governance\n', '    assert self.isAuthorized(msg.sender, "escrow", _version) == True or self.isAuthorized(msg.sender, "governance", _version) == True, "Only Escrow or Governance can call this method"\n', '\n', '    # setup memory variables to handle comptroller return values\n', '    isListed: bool = False\n', '    collateralFactorMantissa: uint256 = 0\n', '    isComped: bool = False\n', '\n', '    # get the collateral factor for the collateral asset using the comptroller\n', '    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\n', '\n', '    # convert collateralFactorMantissa to a percentage\n', '    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\n', '\n', '    # get the current borrowIndex from the cToken\n', '    borrowIndex: uint256 = CTOKEN(_borrow_context.cToken).borrowIndex()\n', '\n', '    # calculate the interestAccrued since the last action on the loan\n', '    interestAccrued: decimal = convert(borrowIndex, decimal) / convert(_loan.lastBorrowIndex, decimal) - 1.0\n', '\n', '    # apply interest accrued to the outstanding balance of the loan\n', '    borrowBalanceScaled: uint256 = convert(convert(_loan.outstanding, decimal) * (1.0 + interestAccrued), uint256)\n', '\n', '    # get the price of the borrow asset and the collateral asset denominated in USD\n', '    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\n', '    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\n', '\n', '    # scale down the asset prices and convert them to decimals\n', '    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '\n', '    # convert the borrow balance to a decimal and scale it down\n', '    borrowBalance: decimal = convert(borrowBalanceScaled, decimal) / convert(10 ** _borrow_context.decimals, decimal)\n', '\n', '    # calculate the value of the outstanding balance denominated in USD\n', '    borrowAmountInUSD: decimal = borrowBalance * borrowAssetPrice\n', '\n', '    # calculate the required collateral denominated in USD\n', '    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\n', '\n', '    # calculate the required collateral denominated in the collateral asset \n', '    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\n', '\n', '    # calculate the required collateral for Greenwood denominated in the collateral asset \n', '    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_loan.collateralizationRatio, decimal) / 100.0)\n', '\n', '    # scale the required collateral for Greenwood by the decimals of the collateral asset\n', '    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\n', '\n', '    return CompoundWithdrawCalculation({\n', '        requiredCollateral: requiredCollateralScaled,\n', '        outstanding: borrowBalanceScaled\n', '    })\n', '\n', '@external\n', 'def calculateRepay(_borrow_ticker: String[10], _collateral_ticker: String[10], _borrow_context: AssetContext, _collateral_context: AssetContext, _amount: uint256, _loan: Loan, _version: String[11]) -> CompoundRepayCalculation:\n', '    """\n', '    @notice Calculate and return values needed to repay a loan on Compound\n', '    @param _borrow_ticker The ticker string of the asset that is being borrowed\n', '    @param _collateral_ticker The ticker string of the asset that is being used as collateral\n', '    @param _borrow_context The AssetContext struct of the asset being borrowed\n', '    @param _collateral_context The AssetContext struct of the asset being used as collateral\n', "    @param _amount The amount of asset being repaid scaled by the asset's decimals\n", '    @param _loan The Loan struct containing the data for the loan\n', '    @param _version The version of the Greenwood Protocol to use\n', '    @return CompoundRepayCalculation struct\n', '    @dev Only the CompoundEscrow or the Governance can call this method\n', '    """\n', '\n', '    # require that the method caller is the Escrow or the Governance\n', '    assert self.isAuthorized(msg.sender, "escrow", _version) == True or self.isAuthorized(msg.sender, "governance", _version) == True, "Only Escrow or Governance can call this method"\n', '    \n', '    # check if the borrow ticker is ETH\n', "    if keccak256(_borrow_ticker) == keccak256('ETH'):\n", '        \n', '        # call repayBorrow() on the cEther with a value of 0 to refresh the borrowIndex\n', '        raw_call(\n', '            _borrow_context.cToken,\n', '            method_id("repayBorrow()"),\n', '            value = 0\n', '        )\n', '    \n', '    # check if the borrow ticker is BAT\n', "    elif keccak256(_borrow_ticker) == keccak256('BAT'):\n", '\n', '        # do not attempt to refresh the borrow index\n', '        pass\n', '\n', '    else:\n', '\n', '        # call repayBorrow() on the cToken with a value of 0 to refresh the borrowIndex\n', '        CTOKEN(_borrow_context.cToken).repayBorrow(0)\n', '\n', '    # get the borrowIndex from the cToken\n', '    borrowIndex: uint256 = CTOKEN(_borrow_context.cToken).borrowIndex()\n', '\n', '    # calculate the interestAccrued on the borrow\n', '    interestAccrued: decimal = convert(borrowIndex, decimal) / convert(_loan.lastBorrowIndex, decimal) - 1.0\n', '\n', '    # apply interest accrued to the outstanding balance of the loan\n', '    borrowBalance: uint256 = convert(convert(_loan.outstanding, decimal) * (1.0 + interestAccrued), uint256)\n', '           \n', '    # declare a memory variable to store the repayment amount \n', '    repayAmount: uint256 = 0\n', '\n', '    # check if this is a full repayment or an over-repayment\n', '    if _amount == MAX_UINT256 or _amount > borrowBalance:\n', '\n', '        # set repaymentAmount to be the borrowBalance\n', '        repayAmount = borrowBalance\n', '\n', '    # handle partial repayment\n', '    else:\n', '\n', '        # set repaymentAmount to be the requested amount\n', '        repayAmount = _amount\n', '\n', '    # subtract the repayment amount from borrowBalance to get the outstandingBalance\n', '    outstandingBalanceScaled: int128 = convert(borrowBalance, int128) - convert(repayAmount, int128)\n', '\n', '    # setup memory variables to handle comptroller return values\n', '    isListed: bool = False\n', '    collateralFactorMantissa: uint256 = 0\n', '    isComped: bool = False\n', '\n', '    # get the collateral factor for the collateral asset using the comptroller\n', '    isListed, collateralFactorMantissa, isComped  = COMPTROLLER(_collateral_context.comptroller).markets(_collateral_context.cToken)\n', '\n', '    # convert collateralFactorMantissa to a percentage\n', '    collateralFactor: decimal = convert(collateralFactorMantissa, decimal) / convert(TEN_EXP_18, decimal)\n', '\n', '    # get the price of the borrow asset and the collateral asset denominated in USD\n', '    borrowAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_borrow_context.compoundPriceFeed).price(_borrow_ticker)\n', '    collateralAssetPriceExp: uint256 = COMPOUND_PRICE_FEED(_collateral_context.compoundPriceFeed).price(_collateral_ticker)\n', '\n', '    # scale down the asset prices and convert them to decimals\n', '    borrowAssetPrice: decimal = convert(borrowAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '    collateralAssetPrice: decimal = convert(collateralAssetPriceExp, decimal) / convert(TEN_EXP_6, decimal)\n', '\n', '    # convert the outstanding balance to a decimal and scale it down\n', '    outstandingBalance: decimal = convert(outstandingBalanceScaled, decimal) / convert(10 ** _borrow_context.decimals, decimal)\n', '\n', '    # calculate the value of the outstanding balance denominated in USD\n', '    borrowAmountInUSD: decimal = outstandingBalance * borrowAssetPrice\n', '\n', '    # calculate the required collateral denominated in USD\n', '    requiredCollateralInUSD: decimal = borrowAmountInUSD / collateralFactor\n', '\n', '    # calculate the required collateral denominated in the collateral asset \n', '    requiredCollateral: decimal = requiredCollateralInUSD / collateralAssetPrice\n', '\n', '    # calculate the required collateral for Greenwood denominated in the collateral asset\n', '    requiredCollateralGreenwood: decimal = requiredCollateral * (convert(_loan.collateralizationRatio, decimal) / 100.0)\n', '\n', '    # scale the required collateral for Greenwood by the decimals of the collateral asset\n', '    requiredCollateralScaled: uint256 = convert(requiredCollateralGreenwood * convert(10 ** _collateral_context.decimals, decimal), uint256)\n', '\n', '    # calculate the redemption amount\n', '    redemptionAmount: int128 = convert(_loan.collateralLocked, int128) - convert(requiredCollateralScaled, int128)\n', '\n', '    return CompoundRepayCalculation({\n', '        repayAmount: repayAmount,\n', '        redemptionAmount: redemptionAmount,\n', '        requiredCollateral: requiredCollateralScaled,\n', '        outstanding: convert(outstandingBalance * convert(10 ** _borrow_context.decimals, decimal), int128), # scale the outstanding balance back up and convert it to an int128\n', '    })\n', '\n', '@external\n', 'def setProtocolFee(_new_fee: uint256):\n', '    """\n', '    @notice Updates the protocol fee\n', '    @param _new_fee The new protocol fee\n', '    @dev Only the Governance can call this method \n', '    """\n', '\n', '    # require that the method caller is the Governance\n', '    assert self.isAuthorized(msg.sender, "governance", "") == True, "Only Governance can call this method"\n', '\n', '    # get the previous protocol fee\n', '    previousFee: uint256 = self.protocolFee\n', '\n', '    # update the protocol fee\n', '    self.protocolFee = _new_fee\n', '\n', '    # emit a SetFee event\n', '    log SetFee(previousFee, _new_fee, msg.sender, block.number)\n', '\n', '@external\n', 'def setRegistry(_new_registry: address):\n', '    """\n', '    @notice Updates the address of the Registry\n', '    @param _new_registry The address of the new Greenwood Registry\n', '    @dev Only the Governance can call this method\n', '    @dev Only call this method with a valid Greenwood Registry or subsequent calls will fail!\n', '    """\n', '\n', '    # require that the method caller is the Governance\n', '    assert self.isAuthorized(msg.sender, "governance", "") == True, "Only Governance can call this method"\n', '\n', '    # get the previous Registry\n', '    previousRegistry: address = self.registry\n', '\n', '    # update the address of the Registry\n', '    self.registry = _new_registry\n', '\n', '    # emit a SetRegistry event\n', '    log SetRegistry(previousRegistry, _new_registry, msg.sender, block.number)']