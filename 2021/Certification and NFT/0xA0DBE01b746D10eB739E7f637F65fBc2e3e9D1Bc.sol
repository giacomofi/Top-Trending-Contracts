['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-14\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', 'pragma solidity 0.6.11;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint a, uint b) internal pure returns (bool, uint) {\n', '        uint c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint a, uint b) internal pure returns (bool, uint) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint a, uint b) internal pure returns (bool, uint) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint a, uint b) internal pure returns (uint) {\n', '        uint c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint a, uint b) internal pure returns (uint) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint a, uint b) internal pure returns (uint) {\n', '        if (a == 0) return 0;\n', '        uint c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint a, uint b) internal pure returns (uint) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint a,\n', '        uint b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{value: amount}("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', '                "Address: low-level call with value failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', '            "Address: insufficient balance for call"\n', '        );\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', '                "Address: low-level delegate call failed"\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(isContract(target), "Address: delegate call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint value\n', '    ) internal {\n', '        uint newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', '                "SafeERC20: decreased allowance below zero"\n', '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, newAllowance)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', '                "SafeERC20: ERC20 operation did not succeed"\n', '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/protocol/IStrategyERC20_V3.sol\n', '\n', '/*\n', 'version 1.3.0\n', '\n', 'Changes listed here do not affect interaction with other contracts (Vault and Controller)\n', '- remove functions that are not called by other contracts (vaults and controller)\n', '*/\n', '\n', 'interface IStrategyERC20_V3 {\n', '    function admin() external view returns (address);\n', '\n', '    function controller() external view returns (address);\n', '\n', '    function vault() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns address of underlying token (ETH or ERC20)\n', '    @dev Return 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for ETH strategy\n', '    */\n', '    function underlying() external view returns (address);\n', '\n', '    /*\n', '    @notice Returns total amount of underlying token transferred from vault\n', '    */\n', '    function totalDebt() external view returns (uint);\n', '\n', '    /*\n', '    @notice Returns amount of underlying token locked in this contract\n', '    @dev Output may vary depending on price of liquidity provider token\n', '         where the underlying token is invested\n', '    */\n', '    function totalAssets() external view returns (uint);\n', '\n', '    /*\n', '    @notice Deposit `amount` underlying token\n', '    @param amount Amount of underlying token to deposit\n', '    */\n', '    function deposit(uint _amount) external;\n', '\n', '    /*\n', '    @notice Withdraw `_amount` underlying token\n', '    @param amount Amount of underlying token to withdraw\n', '    */\n', '    function withdraw(uint _amount) external;\n', '\n', '    /*\n', '    @notice Withdraw all underlying token from strategy\n', '    */\n', '    function withdrawAll() external;\n', '\n', '    /*\n', '    @notice Sell any staking rewards for underlying\n', '    */\n', '    function harvest() external;\n', '\n', '    /*\n', '    @notice Increase total debt if totalAssets > totalDebt\n', '    */\n', '    function skim() external;\n', '\n', '    /*\n', '    @notice Exit from strategy, transfer all underlying tokens back to vault\n', '    */\n', '    function exit() external;\n', '\n', '    /*\n', '    @notice Transfer token accidentally sent here to admin\n', '    @param _token Address of token to transfer\n', '    @dev _token must not be equal to underlying token\n', '    */\n', '    function sweep(address _token) external;\n', '}\n', '\n', '// File: contracts/protocol/IController.sol\n', '\n', 'interface IController {\n', '    function ADMIN_ROLE() external view returns (bytes32);\n', '\n', '    function HARVESTER_ROLE() external view returns (bytes32);\n', '\n', '    function admin() external view returns (address);\n', '\n', '    function treasury() external view returns (address);\n', '\n', '    function setAdmin(address _admin) external;\n', '\n', '    function setTreasury(address _treasury) external;\n', '\n', '    function grantRole(bytes32 _role, address _addr) external;\n', '\n', '    function revokeRole(bytes32 _role, address _addr) external;\n', '\n', '    /*\n', '    @notice Set strategy for vault\n', '    @param _vault Address of vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum undelying token current strategy must return. Prevents slippage\n', '    */\n', '    function setStrategy(\n', '        address _vault,\n', '        address _strategy,\n', '        uint _min\n', '    ) external;\n', '\n', '    // calls to strategy\n', '    /*\n', '    @notice Invest token in vault into strategy\n', '    @param _vault Address of vault\n', '    */\n', '    function invest(address _vault) external;\n', '\n', '    function harvest(address _strategy) external;\n', '\n', '    function skim(address _strategy) external;\n', '\n', '    /*\n', '    @notice Withdraw from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _amount Amount of underlying token to withdraw\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdraw(\n', '        address _strategy,\n', '        uint _amount,\n', '        uint _min\n', '    ) external;\n', '\n', '    /*\n', '    @notice Withdraw all from strategy to vault\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function withdrawAll(address _strategy, uint _min) external;\n', '\n', '    /*\n', '    @notice Exit from strategy\n', '    @param _strategy Address of strategy\n', '    @param _min Minimum amount of underlying token to withdraw\n', '    */\n', '    function exit(address _strategy, uint _min) external;\n', '}\n', '\n', '// File: contracts/StrategyERC20_V3.sol\n', '\n', '/*\n', 'Changes\n', '- remove functions related to slippage and delta\n', '- add keeper\n', '- remove _increaseDebt\n', '- remove _decreaseDebt\n', '*/\n', '\n', '// used inside harvest\n', '\n', 'abstract contract StrategyERC20_V3 is IStrategyERC20_V3 {\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint;\n', '\n', '    address public override admin;\n', '    address public nextAdmin;\n', '    address public override controller;\n', '    address public immutable override vault;\n', '    address public immutable override underlying;\n', '    // some functions specific to strategy cannot be called by controller\n', '    // so we introduce a new role\n', '    address public keeper;\n', '\n', '    // total amount of underlying transferred from vault\n', '    uint public override totalDebt;\n', '\n', '    // performance fee sent to treasury when harvest() generates profit\n', '    uint public performanceFee = 500;\n', '    uint private constant PERFORMANCE_FEE_CAP = 2000; // upper limit to performance fee\n', '    uint internal constant PERFORMANCE_FEE_MAX = 10000;\n', '\n', '    // Force exit, in case normal exit fails\n', '    bool public forceExit;\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _underlying,\n', '        address _keeper\n', '    ) public {\n', '        require(_controller != address(0), "controller = zero address");\n', '        require(_vault != address(0), "vault = zero address");\n', '        require(_underlying != address(0), "underlying = zero address");\n', '        require(_keeper != address(0), "keeper = zero address");\n', '\n', '        admin = msg.sender;\n', '        controller = _controller;\n', '        vault = _vault;\n', '        underlying = _underlying;\n', '        keeper = _keeper;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(msg.sender == admin, "!admin");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAuthorized() {\n', '        require(\n', '            msg.sender == admin ||\n', '                msg.sender == controller ||\n', '                msg.sender == vault ||\n', '                msg.sender == keeper,\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setNextAdmin(address _nextAdmin) external onlyAdmin {\n', '        require(_nextAdmin != admin, "next admin = current");\n', '        // allow next admin = zero address (cancel next admin)\n', '        nextAdmin = _nextAdmin;\n', '    }\n', '\n', '    function acceptAdmin() external {\n', '        require(msg.sender == nextAdmin, "!next admin");\n', '        admin = msg.sender;\n', '        nextAdmin = address(0);\n', '    }\n', '\n', '    function setController(address _controller) external onlyAdmin {\n', '        require(_controller != address(0), "controller = zero address");\n', '        controller = _controller;\n', '    }\n', '\n', '    function setKeeper(address _keeper) external onlyAdmin {\n', '        require(_keeper != address(0), "keeper = zero address");\n', '        keeper = _keeper;\n', '    }\n', '\n', '    function setPerformanceFee(uint _fee) external onlyAdmin {\n', '        require(_fee <= PERFORMANCE_FEE_CAP, "performance fee > cap");\n', '        performanceFee = _fee;\n', '    }\n', '\n', '    function setForceExit(bool _forceExit) external onlyAdmin {\n', '        forceExit = _forceExit;\n', '    }\n', '\n', '    function totalAssets() external view virtual override returns (uint);\n', '\n', '    function deposit(uint) external virtual override;\n', '\n', '    function withdraw(uint) external virtual override;\n', '\n', '    function withdrawAll() external virtual override;\n', '\n', '    function harvest() external virtual override;\n', '\n', '    function skim() external virtual override;\n', '\n', '    function exit() external virtual override;\n', '\n', '    function sweep(address) external virtual override;\n', '}\n', '\n', '// File: contracts/interfaces/uniswap/Uniswap.sol\n', '\n', 'interface Uniswap {\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    function swapExactTokensForETH(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '}\n', '\n', '// File: contracts/interfaces/curve/LiquidityGaugeV2.sol\n', '\n', 'interface LiquidityGaugeV2 {\n', '    function deposit(uint) external;\n', '\n', '    function balanceOf(address) external view returns (uint);\n', '\n', '    function withdraw(uint) external;\n', '\n', '    function claim_rewards() external;\n', '}\n', '\n', '// File: contracts/interfaces/curve/Minter.sol\n', '\n', '// https://github.com/curvefi/curve-dao-contracts/blob/master/contracts/Minter.vy\n', 'interface Minter {\n', '    function mint(address) external;\n', '}\n', '\n', '// File: contracts/interfaces/curve/StableSwapUsdp.sol\n', '\n', 'interface StableSwapUsdp {\n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    /*\n', '    0 USDP\n', '    1 3CRV\n', '    */\n', '    function balances(uint index) external view returns (uint);\n', '}\n', '\n', '// File: contracts/interfaces/curve/StableSwap3Pool.sol\n', '\n', 'interface StableSwap3Pool {\n', '    function get_virtual_price() external view returns (uint);\n', '\n', '    function add_liquidity(uint[3] calldata amounts, uint min_mint_amount) external;\n', '\n', '    function remove_liquidity_one_coin(\n', '        uint token_amount,\n', '        int128 i,\n', '        uint min_uamount\n', '    ) external;\n', '\n', '    function balances(uint index) external view returns (uint);\n', '}\n', '\n', '// File: contracts/interfaces/curve/DepositUsdp.sol\n', '\n', 'interface DepositUsdp {\n', '    /*\n', '    0 USDP\n', '    1 DAI\n', '    2 USDC\n', '    3 USDT\n', '    */\n', '    function add_liquidity(uint[4] memory amounts, uint min) external returns (uint);\n', '\n', '    // @dev returns amount of underlying token withdrawn\n', '    function remove_liquidity_one_coin(\n', '        uint amount,\n', '        int128 index,\n', '        uint min\n', '    ) external returns (uint);\n', '}\n', '\n', '// File: contracts/strategies/StrategyCurveUsdp.sol\n', '\n', 'contract StrategyCurveUsdp is StrategyERC20_V3 {\n', '    event Deposit(uint amount);\n', '    event Withdraw(uint amount);\n', '    event Harvest(uint profit);\n', '    event Skim(uint profit);\n', '\n', '    // Uniswap //\n', '    address private constant UNISWAP = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address private constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    address internal constant USDP = 0x1456688345527bE1f37E9e627DA0837D6f08C925;\n', '    address internal constant DAI = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '    address internal constant USDC = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '    address internal constant USDT = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '\n', '    // USDP = 0 | DAI = 1 | USDC = 2 | USDT = 3\n', '    uint private immutable UNDERLYING_INDEX;\n', '    // precision to convert 10 ** 18  to underlying decimals\n', '    uint[4] private PRECISION_DIV = [1, 1, 1e12, 1e12];\n', '    // precision div of underlying token (used to save gas)\n', '    uint private immutable PRECISION_DIV_UNDERLYING;\n', '\n', '    // Curve //\n', '    // StableSwap3Pool\n', '    address private constant BASE_POOL = 0xbEbc44782C7dB0a1A60Cb6fe97d0b483032FF1C7;\n', '    // StableSwap\n', '    address private constant SWAP = 0x42d7025938bEc20B69cBae5A77421082407f053A;\n', '    // liquidity provider token (USDP / 3CRV)\n', '    address private constant LP = 0x7Eb40E450b9655f4B3cC4259BCC731c63ff55ae6;\n', '    // Deposit\n', '    address private constant DEPOSIT = 0x3c8cAee4E09296800f8D29A68Fa3837e2dae4940;\n', '    // LiquidityGaugeV2\n', '    address private constant GAUGE = 0x055be5DDB7A925BfEF3417FC157f53CA77cA7222;\n', '    // Minter\n', '    address private constant MINTER = 0xd061D61a4d941c39E5453435B6345Dc261C2fcE0;\n', '    // CRV\n', '    address private constant CRV = 0xD533a949740bb3306d119CC777fa900bA034cd52;\n', '\n', '    // prevent slippage from deposit / withdraw\n', '    uint public slippage = 100;\n', '    uint private constant SLIPPAGE_MAX = 10000;\n', '\n', '    /*\n', '    Numerator used to update totalDebt if\n', '    totalAssets() is <= totalDebt * delta / DELTA_MIN\n', '    */\n', '    uint public delta = 10050;\n', '    uint private constant DELTA_MIN = 10000;\n', '\n', '    // enable to claim LiquidityGaugeV2 rewards\n', '    bool public shouldClaimRewards;\n', '\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _underlying,\n', '        uint _underlyingIndex,\n', '        address _keeper\n', '    ) public StrategyERC20_V3(_controller, _vault, _underlying, _keeper) {\n', '        UNDERLYING_INDEX = _underlyingIndex;\n', '        PRECISION_DIV_UNDERLYING = PRECISION_DIV[_underlyingIndex];\n', '\n', '        // Infinite approvals should be safe as long as only small amount\n', '        // of underlying is stored in this contract.\n', '\n', '        // Approve DepositUsdp.add_liquidity\n', '        IERC20(USDP).safeApprove(DEPOSIT, type(uint).max);\n', '        IERC20(DAI).safeApprove(DEPOSIT, type(uint).max);\n', '        IERC20(USDC).safeApprove(DEPOSIT, type(uint).max);\n', '        IERC20(USDT).safeApprove(DEPOSIT, type(uint).max);\n', '        // Approve LiquidityGaugeV2.deposit\n', '        IERC20(LP).safeApprove(GAUGE, type(uint).max);\n', '        // approve DepositUsdp.remove_liquidity\n', '        IERC20(LP).safeApprove(DEPOSIT, type(uint).max);\n', '\n', '        // These tokens are never held by this contract\n', '        // so the risk of them getting stolen is minimal\n', '        IERC20(CRV).safeApprove(UNISWAP, type(uint).max);\n', '    }\n', '\n', '    /*\n', '    @notice Set max slippage for deposit and withdraw from Curve pool\n', '    @param _slippage Max amount of slippage allowed\n', '    */\n', '    function setSlippage(uint _slippage) external onlyAdmin {\n', '        require(_slippage <= SLIPPAGE_MAX, "slippage > max");\n', '        slippage = _slippage;\n', '    }\n', '\n', '    /*\n', '    @notice Set delta, used to calculate difference between totalAsset and totalDebt\n', '    @param _delta Numerator of delta / DELTA_MIN\n', '    */\n', '    function setDelta(uint _delta) external onlyAdmin {\n', '        require(_delta >= DELTA_MIN, "delta < min");\n', '        delta = _delta;\n', '    }\n', '\n', '    /*\n', '    @notice Activate or decactivate LiquidityGaugeV2.claim_rewards()\n', '    */\n', '    function setShouldClaimRewards(bool _shouldClaimRewards) external onlyAdmin {\n', '        shouldClaimRewards = _shouldClaimRewards;\n', '    }\n', '\n', '    function _totalAssets() private view returns (uint) {\n', '        uint lpBal = LiquidityGaugeV2(GAUGE).balanceOf(address(this));\n', '        uint pricePerShare = StableSwapUsdp(SWAP).get_virtual_price();\n', '\n', '        return lpBal.mul(pricePerShare) / (PRECISION_DIV_UNDERLYING * 1e18);\n', '    }\n', '\n', '    function totalAssets() external view override returns (uint) {\n', '        return _totalAssets();\n', '    }\n', '\n', '    function _increaseDebt(uint _amount) private returns (uint) {\n', '        // USDT has transfer fee so we need to check balance after transfer\n', '        uint balBefore = IERC20(underlying).balanceOf(address(this));\n', '        IERC20(underlying).safeTransferFrom(vault, address(this), _amount);\n', '        uint balAfter = IERC20(underlying).balanceOf(address(this));\n', '\n', '        uint diff = balAfter.sub(balBefore);\n', '        totalDebt = totalDebt.add(diff);\n', '\n', '        return diff;\n', '    }\n', '\n', '    function _decreaseDebt(uint _amount) private returns (uint) {\n', '        // USDT has transfer fee so we need to check balance after transfer\n', '        uint balBefore = IERC20(underlying).balanceOf(address(this));\n', '        IERC20(underlying).safeTransfer(vault, _amount);\n', '        uint balAfter = IERC20(underlying).balanceOf(address(this));\n', '\n', '        uint diff = balBefore.sub(balAfter);\n', '        if (diff >= totalDebt) {\n', '            totalDebt = 0;\n', '        } else {\n', '            totalDebt -= diff;\n', '        }\n', '\n', '        return diff;\n', '    }\n', '\n', '    /*\n', '    @notice Deposit underlying token into Curve\n', '    @param _token Address of underlying token\n', '    @param _index Index of underlying token\n', '    */\n', '    function _deposit(address _token, uint _index) private {\n', '        // deposit underlying token, get LP\n', '        uint bal = IERC20(_token).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            // mint LP\n', '            uint[4] memory amounts;\n', '            amounts[_index] = bal;\n', '\n', '            /*\n', '            shares = underlying amount * precision div * 1e18 / price per share\n', '            */\n', '            uint pricePerShare = StableSwapUsdp(SWAP).get_virtual_price();\n', '            uint shares = bal.mul(PRECISION_DIV[_index]).mul(1e18).div(pricePerShare);\n', '            uint min = shares.mul(SLIPPAGE_MAX - slippage) / SLIPPAGE_MAX;\n', '\n', '            uint lpAmount = DepositUsdp(DEPOSIT).add_liquidity(amounts, min);\n', '\n', '            // stake into LiquidityGaugeV2\n', '            if (lpAmount > 0) {\n', '                LiquidityGaugeV2(GAUGE).deposit(lpAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function deposit(uint _amount) external override onlyAuthorized {\n', '        require(_amount > 0, "deposit = 0");\n', '\n', '        uint diff = _increaseDebt(_amount);\n', '        _deposit(underlying, UNDERLYING_INDEX);\n', '\n', '        emit Deposit(diff);\n', '    }\n', '\n', '    function _getTotalShares() private view returns (uint) {\n', '        return LiquidityGaugeV2(GAUGE).balanceOf(address(this));\n', '    }\n', '\n', '    function _getShares(\n', '        uint _amount,\n', '        uint _total,\n', '        uint _totalShares\n', '    ) private pure returns (uint) {\n', '        /*\n', '        calculate shares to withdraw\n', '\n', '        w = amount of underlying to withdraw\n', '        U = total redeemable underlying\n', '        s = shares to withdraw\n', '        P = total shares deposited into external liquidity pool\n', '\n', '        w / U = s / P\n', '        s = w / U * P\n', '        */\n', '        if (_total > 0) {\n', '            // avoid rounding errors and cap shares to be <= total shares\n', '            if (_amount >= _total) {\n', '                return _totalShares;\n', '            }\n', '            return _amount.mul(_totalShares) / _total;\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    /*\n', '    @notice Withdraw underlying token from Curve\n', '    @param _amount Amount of underlying token to withdraw\n', '    @return Actual amount of underlying token that was withdrawn\n', '    */\n', '    function _withdraw(uint _amount) private returns (uint) {\n', '        require(_amount > 0, "withdraw = 0");\n', '\n', '        uint total = _totalAssets();\n', '\n', '        if (_amount >= total) {\n', '            _amount = total;\n', '        }\n', '\n', '        uint totalShares = _getTotalShares();\n', '        uint shares = _getShares(_amount, total, totalShares);\n', '\n', '        if (shares > 0) {\n', '            // withdraw LP from LiquidityGaugeV2\n', '            LiquidityGaugeV2(GAUGE).withdraw(shares);\n', '\n', '            uint min = _amount.mul(SLIPPAGE_MAX - slippage) / SLIPPAGE_MAX;\n', '            // withdraw creates LP dust\n', '            return\n', '                DepositUsdp(DEPOSIT).remove_liquidity_one_coin(\n', '                    shares,\n', '                    int128(UNDERLYING_INDEX),\n', '                    min\n', '                );\n', '            // Now we have underlying\n', '        }\n', '        return 0;\n', '    }\n', '\n', '    function withdraw(uint _amount) external override onlyAuthorized {\n', '        uint withdrawn = _withdraw(_amount);\n', '\n', '        if (withdrawn < _amount) {\n', '            _amount = withdrawn;\n', '        }\n', '        // if withdrawn > _amount, excess will be deposited when deposit() is called\n', '\n', '        uint diff;\n', '        if (_amount > 0) {\n', '            diff = _decreaseDebt(_amount);\n', '        }\n', '\n', '        emit Withdraw(diff);\n', '    }\n', '\n', '    function _withdrawAll() private {\n', '        _withdraw(type(uint).max);\n', '\n', '        // There may be dust so re-calculate balance\n', '        uint bal = IERC20(underlying).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            IERC20(underlying).safeTransfer(vault, bal);\n', '            totalDebt = 0;\n', '        }\n', '\n', '        emit Withdraw(bal);\n', '    }\n', '\n', '    function withdrawAll() external override onlyAuthorized {\n', '        _withdrawAll();\n', '    }\n', '\n', '    /*\n', '    @notice Returns address and index of token with lowest balance in Curve pool\n', '    */\n', '    function _getMostPremiumToken() private view returns (address, uint) {\n', '        // meta pool balances\n', '        uint[2] memory balances;\n', '        balances[0] = StableSwapUsdp(SWAP).balances(0); // USDP\n', '        balances[1] = StableSwapUsdp(SWAP).balances(1); // 3CRV\n', '\n', '        if (balances[0] <= balances[1]) {\n', '            return (USDP, 0);\n', '        } else {\n', '            // base pool balances\n', '            uint[3] memory baseBalances;\n', '            baseBalances[0] = StableSwap3Pool(BASE_POOL).balances(0); // DAI\n', '            baseBalances[1] = StableSwap3Pool(BASE_POOL).balances(1).mul(1e12); // USDC\n', '            baseBalances[2] = StableSwap3Pool(BASE_POOL).balances(2).mul(1e12); // USDT\n', '\n', '            /*\n', '            DAI  1\n', '            USDC 2\n', '            USDT 3\n', '            */\n', '\n', '            // DAI\n', '            if (\n', '                baseBalances[0] <= baseBalances[1] && baseBalances[0] <= baseBalances[2]\n', '            ) {\n', '                return (DAI, 1);\n', '            }\n', '\n', '            // USDC\n', '            if (\n', '                baseBalances[1] <= baseBalances[0] && baseBalances[1] <= baseBalances[2]\n', '            ) {\n', '                return (USDC, 2);\n', '            }\n', '\n', '            return (USDT, 3);\n', '        }\n', '    }\n', '\n', '    /*\n', '    @dev Uniswap fails with zero address so no check is necessary here\n', '    */\n', '    function _swap(\n', '        address _from,\n', '        address _to,\n', '        uint _amount\n', '    ) private {\n', '        // create dynamic array with 3 elements\n', '        address[] memory path = new address[](3);\n', '        path[0] = _from;\n', '        path[1] = WETH;\n', '        path[2] = _to;\n', '\n', '        Uniswap(UNISWAP).swapExactTokensForTokens(\n', '            _amount,\n', '            1,\n', '            path,\n', '            address(this),\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function _claimRewards(address _token) private {\n', '        if (shouldClaimRewards) {\n', '            LiquidityGaugeV2(GAUGE).claim_rewards();\n', '            // Rewarded tokens will be managed by admin via calling sweep()\n', '        }\n', '\n', '        // claim CRV\n', '        Minter(MINTER).mint(GAUGE);\n', '\n', '        uint crvBal = IERC20(CRV).balanceOf(address(this));\n', '        // Swap only if CRV >= 1, otherwise swap may fail\n', '        if (crvBal >= 1e18) {\n', '            _swap(CRV, _token, crvBal);\n', '            // Now this contract has token\n', '        }\n', '    }\n', '\n', '    /*\n', '    @notice Claim CRV and deposit most premium token into Curve\n', '    */\n', '    function harvest() external override onlyAuthorized {\n', '        (address token, uint index) = _getMostPremiumToken();\n', '\n', '        _claimRewards(token);\n', '\n', '        uint bal = IERC20(token).balanceOf(address(this));\n', '        if (bal > 0) {\n', '            // transfer fee to treasury\n', '            uint fee = bal.mul(performanceFee) / PERFORMANCE_FEE_MAX;\n', '            if (fee > 0) {\n', '                address treasury = IController(controller).treasury();\n', '                require(treasury != address(0), "treasury = 0 address");\n', '\n', '                IERC20(token).safeTransfer(treasury, fee);\n', '            }\n', '\n', '            _deposit(token, index);\n', '\n', '            emit Harvest(bal.sub(fee));\n', '        }\n', '    }\n', '\n', '    function skim() external override onlyAuthorized {\n', '        uint total = _totalAssets();\n', '        require(total > totalDebt, "total underlying < debt");\n', '\n', '        uint profit = total - totalDebt;\n', '\n', '        // protect against price manipulation\n', '        uint max = totalDebt.mul(delta) / DELTA_MIN;\n', '        if (total <= max) {\n', '            /*\n', '            total underlying is within reasonable bounds, probaly no price\n', '            manipulation occured.\n', '            */\n', '\n', '            /*\n', '            If we were to withdraw profit followed by deposit, this would\n', '            increase the total debt roughly by the profit.\n', '\n', '            Withdrawing consumes high gas, so here we omit it and\n', '            directly increase debt, as if withdraw and deposit were called.\n', '            */\n', '            // total debt = total debt + profit = total\n', '            totalDebt = total;\n', '        } else {\n', '            /*\n', '            Possible reasons for total underlying > max\n', '            1. total debt = 0\n', '            2. total underlying really did increase over max\n', '            3. price was manipulated\n', '            */\n', '            uint withdrawn = _withdraw(profit);\n', '            if (withdrawn > 0) {\n', '                IERC20(underlying).safeTransfer(vault, withdrawn);\n', '            }\n', '        }\n', '\n', '        emit Skim(profit);\n', '    }\n', '\n', '    function exit() external override onlyAuthorized {\n', '        if (forceExit) {\n', '            return;\n', '        }\n', '        _claimRewards(underlying);\n', '        _withdrawAll();\n', '    }\n', '\n', '    function sweep(address _token) external override onlyAdmin {\n', '        require(_token != underlying, "protected token");\n', '        require(_token != GAUGE, "protected token");\n', '        IERC20(_token).safeTransfer(admin, IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// File: contracts/strategies/StrategyCurveUsdpUsdt.sol\n', '\n', 'contract StrategyCurveUsdpUsdt is StrategyCurveUsdp {\n', '    constructor(\n', '        address _controller,\n', '        address _vault,\n', '        address _keeper\n', '    ) public StrategyCurveUsdp(_controller, _vault, USDT, 3, _keeper) {}\n', '}']