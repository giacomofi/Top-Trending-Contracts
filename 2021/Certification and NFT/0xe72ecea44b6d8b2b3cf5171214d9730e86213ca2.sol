['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-12\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @title Roles\n', ' * @dev Library for managing addresses assigned to a Role.\n', ' */\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    /**\n', '     * @dev give an account access to this role\n', '     */\n', '    function add(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(!has(role, account));\n', '\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    /**\n', "     * @dev remove an account's access to this role\n", '     */\n', '    function remove(Role storage role, address account) internal {\n', '        require(account != address(0));\n', '        require(has(role, account));\n', '\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    /**\n', '     * @dev check if an account has this role\n', '     * @return bool\n', '     */\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0));\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', '/**\n', ' * @title ChainlinkConversionPath\n', ' *\n', ' * @notice ChainlinkConversionPath is a contract allowing to compute conversion rate from a Chainlink aggretators\n', ' */\n', 'interface ChainlinkConversionPath {\n', '\n', '\n', '  /**\n', '  * @notice Computes the rate from a list of conversion\n', '  * @param _path List of addresses representing the currencies for the conversions\n', '  * @return rate the rate\n', '  * @return oldestRateTimestamp he oldest timestamp of the path\n', '  * @return decimals of the conversion rate\n', '  */\n', '  function getRate(\n', '    address[] calldata _path\n', '  )\n', '    external\n', '    view\n', '    returns (uint256 rate, uint256 oldestRateTimestamp, uint256 decimals);\n', '}\n', '\n', 'interface IERC20FeeProxy {\n', '  event TransferWithReferenceAndFee(\n', '    address tokenAddress,\n', '    address to,\n', '    uint256 amount,\n', '    bytes indexed paymentReference,\n', '    uint256 feeAmount,\n', '    address feeAddress\n', '  );\n', '\n', '  function transferFromWithReferenceAndFee(\n', '    address _tokenAddress,\n', '    address _to,\n', '    uint256 _amount,\n', '    bytes calldata _paymentReference,\n', '    uint256 _feeAmount,\n', '    address _feeAddress\n', '    ) external;\n', '}\n', '\n', '\n', '/**\n', ' * @title ERC20ConversionProxy\n', ' */\n', 'contract ERC20ConversionProxy {\n', '  using SafeMath for uint256;\n', '\n', '  address public paymentProxy;\n', '  ChainlinkConversionPath public chainlinkConversionPath;\n', '\n', '  constructor(address _paymentProxyAddress, address _chainlinkConversionPathAddress) public {\n', '    paymentProxy = _paymentProxyAddress;\n', '    chainlinkConversionPath = ChainlinkConversionPath(_chainlinkConversionPathAddress);\n', '  }\n', '\n', '  // Event to declare a transfer with a reference\n', '  event TransferWithConversionAndReference(\n', '    uint256 amount,\n', '    address currency,\n', '    bytes indexed paymentReference,\n', '    uint256 feeAmount,\n', '    uint256 maxRateTimespan\n', '  );\n', '\n', '  /**\n', '   * @notice Performs an ERC20 token transfer with a reference computing the amount based on a fiat amount\n', '   * @param _to Transfer recipient\n', '   * @param _requestAmount request amount\n', '   * @param _path conversion path\n', '   * @param _paymentReference Reference of the payment related\n', '   * @param _feeAmount The amount of the payment fee\n', '   * @param _feeAddress The fee recipient\n', '   * @param _maxToSpend amount max that we can spend on the behalf of the user\n', '   * @param _maxRateTimespan max time span with the oldestrate, ignored if zero\n', '   */\n', '  function transferFromWithReferenceAndFee(\n', '    address _to,\n', '    uint256 _requestAmount,\n', '    address[] calldata _path,\n', '    bytes calldata _paymentReference,\n', '    uint256 _feeAmount,\n', '    address _feeAddress,\n', '    uint256 _maxToSpend,\n', '    uint256 _maxRateTimespan\n', '  ) external\n', '  {\n', '    (uint256 amountToPay, uint256 amountToPayInFees) = getConversions(_path, _requestAmount, _feeAmount, _maxRateTimespan);\n', '\n', '    require(amountToPay.add(amountToPayInFees) <= _maxToSpend, "Amount to pay is over the user limit");\n', '\n', '    // Pay the request and fees\n', '    (bool status, ) = paymentProxy.delegatecall(\n', '      abi.encodeWithSignature(\n', '        "transferFromWithReferenceAndFee(address,address,uint256,bytes,uint256,address)",\n', '        // payment currency\n', '        _path[_path.length - 1],\n', '        _to,\n', '        amountToPay,\n', '        _paymentReference,\n', '        amountToPayInFees,\n', '        _feeAddress\n', '      )\n', '    );\n', '    require(status, "transferFromWithReferenceAndFee failed");\n', '\n', '    // Event to declare a transfer with a reference\n', '    emit TransferWithConversionAndReference(\n', '      _requestAmount,\n', '      // request currency\n', '      _path[0],\n', '      _paymentReference,\n', '      _feeAmount,\n', '      _maxRateTimespan\n', '    );\n', '  }\n', '\n', '  function getConversions(\n', '    address[] memory _path,\n', '    uint256 _requestAmount,\n', '    uint256 _feeAmount,\n', '    uint256 _maxRateTimespan\n', '  ) internal\n', '    view\n', '    returns (uint256 amountToPay, uint256 amountToPayInFees)\n', '  {\n', '    (uint256 rate, uint256 oldestTimestampRate, uint256 decimals) = chainlinkConversionPath.getRate(_path);\n', '\n', '    // Check rate timespan\n', '    require(_maxRateTimespan == 0 || block.timestamp.sub(oldestTimestampRate) <= _maxRateTimespan, "aggregator rate is outdated");\n', '    \n', '    // Get the amount to pay in the crypto currency chosen\n', '    amountToPay = _requestAmount.mul(rate).div(decimals);\n', '    amountToPayInFees = _feeAmount.mul(rate).div(decimals);\n', '  }\n', '}']