['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-17\n', '*/\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name, string memory symbol) public {\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20};\n', '     *\n', '     * Requirements:\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// SPDX-License-Identifier: GPL-3.0-or-later\n', '\n', 'pragma solidity 0.6.12;\n', 'interface IGoaldDAO {\n', '    /** Returns the number of goalds deployed from this DAO. */\n', '    function getGoaldCount() external view returns (uint256);\n', '\n', '    /** Returns the current address that fees will be sent to. */\n', '    function getProxyAddress() external view returns (address);\n', '\n', '    /** Called if the DAO manager is no longer a holder after burning the initialization tokens. */\n', '    function initializeDecreasesHolders() external;\n', '\n', '    /** Called if the DAO manager is now a holder after claiming the initialization tokens. */\n', '    function issuanceIncreasesHolders() external;\n', '    \n', '    /** Makes this DAO ready for deployments (regardless of whether or not there are authorized ones). */\n', '    function makeReady(uint256 governanceStage, uint256 idOffset) external;\n', '\n', '    /** Update the reward balances prior to the transfer completing. */\n', '    function preTransfer(address sender, address recipient) external;\n', '\n', '    /** Updates holder counts after doing a transfer. */\n', '    function postTransfer(address sender, uint256 senderBefore, uint256 senderAfter, uint256 recipientBefore, uint256 recipientAfter) external;\n', '\n', '    /** Called when the DAO has been initialized. */\n', '    function updateGovernanceStage() external;\n', '}\n', '\n', 'contract GoaldToken is ERC20 {\n', '    address public _manager = msg.sender;\n', '\n', '    /** @dev The DAO versions. DAOs only become invalid if they have a security vulnerability that compromises this contract. */\n', '    address[] private _daoAddresses;\n', '    mapping(address => uint256) private _isValidDAO;\n', '    uint256 private constant UNTRACKED_DAO = 0;\n', '    uint256 private constant VALID_DAO     = 1;\n', '    uint256 private constant INVALID_DAO   = 2;\n', '\n', '    /** @dev The number of decimals is small to allow for rewards of tokens with substantially different exchange rates. */\n', '    uint8   private constant DECIMALS = 2;\n', '\n', '    /** \n', '     * @dev The minimum amount of tokens necessary to be eligible for a reward. This is "one token", considering decimal places. We\n', '     * are choosing two decimal places because we are initially targeting WBTC, which has 8. This way we can do a minimum reward ratio\n', '     * of 1 / 1,000,000 of a WBTC, relative to our token. So at $25,000 (2020 value), the minimum reward would be $250 (assuming we\n', '     * have issued all 10,000 tokens).\n', '     */\n', '    uint256 private constant REWARD_THRESHOLD = 10**uint256(DECIMALS);\n', '\n', '    /**\n', '     * @dev The maximum supply is 210,000 tokens. 110,000 tokens are burned on initiating the DAO; 10,000 are given to Bittrees for\n', '     * initial management. The remainder are minted on a decreasing schedule based on the total number of deployed Goalds.\n', '     */\n', '    uint256 private constant MAX_SUPPLY = 210000 * REWARD_THRESHOLD;\n', '\n', '    /** @dev The base token URI for the Goald metadata. */\n', '    string  private _baseTokenURI;\n', '\n', '    /** @dev The total number of deployed Goalds across all DAOs. */\n', '    uint256 private _goaldCount;\n', '\n', '    /**\n', '     * @dev The stage of the governance token. Tokens can be issued based on deployments regardless of what stage we are in.\n', '     *      0: Created, with no governance protocol initiated. The initial governance issuance can be claimed.\n', '     *      1: Initial governance issuance has been claimed.\n', '     *      2: The governance protocal has been initiated.\n', '     *      3: All governance tokens have been issued.\n', '     */\n', '    uint256 private constant STAGE_INITIAL               = 0;\n', '    uint256 private constant STAGE_ISSUANCE_CLAIMED      = 1;\n', '    uint256 private constant STAGE_DAO_INITIATED         = 2;\n', '    uint256 private constant STAGE_ALL_GOVERNANCE_ISSUED = 3;\n', '    uint256 private _governanceStage;\n', '\n', "    // Reentrancy reversions are the only calls to revert (in this contract) that do not have reasons. We add a third state, 'frozen'\n", '    // to allow for locking non-admin functions. The contract may be permanently frozen if it has been upgraded.\n', '    uint256 private constant RE_NOT_ENTERED = 1;\n', '    uint256 private constant RE_ENTERED     = 2;\n', '    uint256 private constant RE_FROZEN      = 3;\n', '    uint256 private _status;\n', '\n', '    // Separate reentrancy status to further guard against arbitrary calls against a DAO contract via `unsafeCallDAO()`.\n', '    uint256 private _daoStatus;\n', '\n', '    // Override decimal places to 2. See `GoaldProxy.REWARD_THRESHOLD`.\n', '    constructor() ERC20("Goald", "GOALD") public {\n', '        _setupDecimals(DECIMALS);\n', '        _status    = RE_FROZEN;\n', '        _daoStatus = RE_NOT_ENTERED;\n', '    }\n', '\n', '    /// Events ///\n', '    \n', '    event DAOStatusChanged(address daoAddress, uint256 status);\n', '\n', '    event DAOUpgraded(address daoAddress);\n', '\n', '    event GoaldDeployed(address goaldAddress);\n', '\n', '    event ManagerChanged(address newManager);\n', '\n', '    /// Admin ///\n', '\n', '    /** Freezes the contract. Only admin functions can be called. */\n', '    function freeze() external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED);\n', '        require(msg.sender == _manager, "Not manager");\n', '\n', '        _status = RE_FROZEN;\n', '    }\n', '\n', '    /** Sets the status of a given DAO. */\n', '    function setDAOStatus(address daoAddress, uint256 index, uint256 status) external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\n', '        require(msg.sender == _manager, "Not manager");\n', '\n', '        // Validate the index as well.\n', '        require(_daoAddresses[index] == daoAddress, "Non-matching DAO index");\n', '\n', '        // Validate the status.\n', '        require(status == VALID_DAO || status == INVALID_DAO, "Invalid status");\n', '        uint256 currentStatus = _isValidDAO[daoAddress];\n', '        require(currentStatus != status && (currentStatus == VALID_DAO || currentStatus == INVALID_DAO), "Invalid current status");\n', '\n', '        // Update the status.\n', '        _isValidDAO[daoAddress] = status;\n', '\n', '        // Hello world!\n', '        emit DAOStatusChanged(daoAddress, status);\n', '    }\n', '\n', '    function setManager(address newManager) external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\n', '        require(msg.sender == _manager,      "Not manager");\n', '        require(newManager != address(0),    "Can\'t be zero address");\n', '        require(newManager != address(this), "Can\'t be this address");\n', '\n', '        // If the issuance has been claimed but the DAO has not been initialized, then the new manager must be able to initialize it.\n', '        require((_governanceStage != STAGE_ISSUANCE_CLAIMED) || (balanceOf(newManager) > 110000 * REWARD_THRESHOLD), "New manager can\'t init DAO");\n', '\n', '        _manager = newManager;\n', '\n', '        // Hello world!\n', '        emit ManagerChanged(newManager);\n', '    }\n', '\n', '    /** Unfreezes the contract. Non-admin functions can again be called. */\n', '    function unfreeze() external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_FROZEN);\n', '        require(msg.sender == _manager, "Not manager");\n', '\n', '        _status = RE_NOT_ENTERED;\n', '    }\n', '\n', '    /** Upgrades to the new DAO version. Can only be done when frozen. */\n', '    function upgradeDAO(address daoAddress) external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_FROZEN);\n', '        _status = RE_ENTERED;\n', '\n', '        // It must be a contract.\n', '        uint256 codeSize;\n', '        assembly { codeSize := extcodesize(daoAddress) }\n', '        require(codeSize > 0, "Not a contract");\n', '\n', "        // Make sure it hasn't been tracked yet.\n", '        require(_isValidDAO[daoAddress] == UNTRACKED_DAO, "DAO already tracked");\n', '\n', '        // Upgrade the DAO.\n', '        _daoAddresses.push(daoAddress);\n', '        _isValidDAO[daoAddress] = VALID_DAO;\n', '\n', '        // Enable the DAO.\n', '        IGoaldDAO(daoAddress).makeReady(_governanceStage, _goaldCount);\n', '\n', '        // Hello world!\n', '        emit DAOUpgraded(daoAddress);\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _status = RE_FROZEN;\n', '    }\n', '\n', '    /// Goalds ///\n', '\n', '    /** Gets the base url for Goald metadata. */\n', '    function getBaseTokenURI() external view returns (string memory) {\n', '        return _baseTokenURI;\n', '    }\n', '\n', '    /** Gets the total number of deployed Goalds. */\n', '    function getGoaldCount() external view returns (uint256) {\n', '        return _goaldCount;\n', '    }\n', '\n', '    /** Returns the address of the DAO which deployed the Goald. */\n', '    function getGoaldDAO(uint256 id) external view returns (address) {\n', '        require(id < _goaldCount, "ID too large");\n', '\n', '        uint256 addressesCount = _daoAddresses.length;\n', '        uint256 index;\n', '        uint256 goaldCount;\n', '        address goaldAddress;\n', '\n', '        for (; index < addressesCount; index ++) {\n', '            goaldAddress = _daoAddresses[index];\n', '            goaldCount += IGoaldDAO(goaldAddress).getGoaldCount();\n', '            if (id <= goaldCount) {\n', '                return goaldAddress;\n', '            }\n', '        }\n', '\n', '        revert("Unknown DAO");\n', '    }\n', '\n', '    /**\n', '     * Called when a deployer deploys a new Goald (via the DAO contract). Currently we use this to distribute the governance token\n', '     * according to the following schedule. An additional 120,000 tokens will be claimable by the deployer of this proxy. This will\n', '     * create a total supply of 210,000 tokens. Once the governance protocal is set up, 110,000 tokens will be burned to initiate that\n', '     * mechanism. That will leave 10% ownership for the deployer of the contract, with the remaining 90% disbused on Goald creations.\n', '     * No rewards can be paid out before the governance protocal has been initiated.\n', '     *\n', '     *      # Goalds    # Tokens\n', '     *       0 -  9       1000\n', '     *      10 - 19        900\n', '     *      20 - 29        800\n', '     *      30 - 39        700\n', '     *      40 - 49        600\n', '     *      50 - 59        500\n', '     *      60 - 69        400\n', '     *      70 - 79        300\n', '     *      80 - 89        200\n', '     *      90 - 99        100\n', '     *       < 3600         10\n', '     */\n', '    function goaldDeployed(address recipient, address goaldAddress) external returns (uint256) {\n', '        // Reentrancy guard.\n', '        require(_daoStatus == RE_NOT_ENTERED);\n', '\n', '        // Validate the caller.\n', '        require(msg.sender == _daoAddresses[_daoAddresses.length - 1], "Caller not latest DAO");\n', '        require(_isValidDAO[msg.sender] == VALID_DAO, "Caller not valid DAO");\n', '\n', '        // Hello world!\n', '        emit GoaldDeployed(goaldAddress);\n', '\n', '        uint256 goaldCount = _goaldCount++;\n', '        if (_governanceStage == STAGE_ALL_GOVERNANCE_ISSUED) {\n', '            return 0;\n', '        }\n', '\n', '        // Calculate the amount of tokens issued based on the schedule.\n', '        uint256 amount;\n', '        if        (goaldCount <   10) {\n', '            amount = 1000;\n', '        } else if (goaldCount <   20) {\n', '            amount =  900;\n', '        } else if (goaldCount <   30) {\n', '            amount =  800;\n', '        } else if (goaldCount <   40) {\n', '            amount =  700;\n', '        } else if (goaldCount <   50) {\n', '            amount =  600;\n', '        } else if (goaldCount <   60) {\n', '            amount =  500;\n', '        } else if (goaldCount <   70) {\n', '            amount =  400;\n', '        } else if (goaldCount <   80) {\n', '            amount =  300;\n', '        } else if (goaldCount <   90) {\n', '            amount =  200;\n', '        } else if (goaldCount <  100) {\n', '            amount =  100;\n', '        } else if (goaldCount < 3600) {\n', '            amount =   10;\n', '        }\n', '        \n', '        // We have issued all tokens, so move to the last stage of governance. This will short circuit this function on future calls.\n', '        // This will result in unnecessary gas if the DAO is never initiated and all 3600 token-earning goalds are created. But the\n', '        // DAO should be initiated long before that.\n', '        else if (_governanceStage == STAGE_DAO_INITIATED) {\n', '            _governanceStage = STAGE_ALL_GOVERNANCE_ISSUED;\n', '        }\n', '\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // Validate the recipient.\n', '        require(_isValidDAO[recipient] == UNTRACKED_DAO, "Can\'t be DAO");\n', '        require(recipient != address(0), "Can\'t be zero address");\n', '        require(recipient != address(this), "Can\'t be Goald token");\n', '\n', '        // Validate the amount.\n', '        uint256 totalSupply = totalSupply();\n', '        require(amount + totalSupply > totalSupply, "Overflow error");\n', '        require(amount + totalSupply < MAX_SUPPLY, "Exceeds supply");\n', '        \n', '        // Mint the tokens.\n', '        _mint(recipient, amount * REWARD_THRESHOLD);\n', '\n', '        return amount;\n', '    }\n', '\n', '    /** Sets the base url for Goald metadata. */\n', '    function setBaseTokenURI(string calldata baseTokenURI) external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED || _status == RE_FROZEN);\n', '        require(msg.sender == _manager, "Not manager");\n', '\n', '        _baseTokenURI = baseTokenURI;\n', '    }\n', '\n', '    /// Governance ///\n', '\n', '    /** Claims the initial issuance of the governance token to enable bootstrapping the DAO. */\n', '    function claimIssuance() external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED);\n', '        require(msg.sender == _manager,            "Not manager");\n', '        require(_governanceStage == STAGE_INITIAL, "Already claimed");\n', '\n', '        // We are creating a new holder.\n', '        if (balanceOf(_manager) < REWARD_THRESHOLD) {\n', '            uint256 index;\n', '            uint256 count = _daoAddresses.length;\n', '            for (; index < count; index ++) {\n', '                IGoaldDAO(_daoAddresses[index]).issuanceIncreasesHolders();\n', '            }\n', '        }\n', '\n', '        // Mint the tokens.\n', '        _mint(_manager, 120000 * REWARD_THRESHOLD);\n', '\n', '        // Update the governance stage.\n', '        _governanceStage = STAGE_ISSUANCE_CLAIMED;\n', '    }\n', '\n', '    /** Returns the address of the DAO at the given index. */\n', '    function getDAOAddressAt(uint256 index) external view returns (address) {\n', '        return _daoAddresses[index];\n', '    }\n', '\n', '    /** Returns the number of historical DAO addresses. */\n', '    function getDAOCount() external view returns (uint256) {\n', '        return _daoAddresses.length;\n', '    }\n', '\n', '    /** Returns the status of the DAO with the given address. */\n', '    function getDAOStatus(address daoAddress) external view returns (uint256) {\n', '        return _isValidDAO[daoAddress];\n', '    }\n', '\n', "    /** Gets the latest dao address, so long as it's valid. */\n", '    function getLatestDAO() external view returns (address) {\n', '        address daoAddress = _daoAddresses[_daoAddresses.length - 1];\n', '        require(_isValidDAO[daoAddress] == VALID_DAO, "Latest DAO invalid");\n', '\n', '        return daoAddress;\n', '    }\n', '\n', "    /** Returns the current stage of the DAO's governance. */\n", '    function getGovernanceStage() external view returns (uint256) {\n', '        return _governanceStage;\n', '    }\n', '\n', '    /** Releases management to the DAO. */\n', '    function initializeDAO() external {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED);\n', '        _status = RE_ENTERED;\n', '\n', '        require(msg.sender == _manager,                     "Not manager");\n', '        require(_governanceStage == STAGE_ISSUANCE_CLAIMED, "Issuance unclaimed");\n', '\n', '        // Burn the tokens.\n', '        uint256 startingBalance = balanceOf(_manager);\n', '        require(startingBalance >= 110000 * REWARD_THRESHOLD, "Not enough tokens");\n', '        _burn(_manager, 110000 * REWARD_THRESHOLD);\n', '\n', '        // Update the stage.\n', '        _governanceStage = STAGE_DAO_INITIATED;\n', '\n', '        uint256 count = _daoAddresses.length;\n', '\n', '        // If the manager no longer is a holder we need to tell the latest DAO.\n', '        if (count > 0 && startingBalance - (110000 * REWARD_THRESHOLD) < REWARD_THRESHOLD) {\n', '            IGoaldDAO(_daoAddresses[count - 1]).initializeDecreasesHolders();\n', '        }\n', '\n', '        // Tell the DAOs so they can create rewards.\n', '        uint256 index;\n', '        for (; index < count; index++) {\n', '            IGoaldDAO(_daoAddresses[index]).updateGovernanceStage();\n', '        }\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _status = RE_NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * Executes a function on the DAO. Only the manager can call this function. This guards against reentrancy so any called function\n', '     * cannot execute a call against this contract. This code is duplicated with `unsafeCallDAO()` in place of having an internal\n', '     * `_callDAO()` since reentrancy guarding is not guaranteed.\n', '     *\n', '     * @param daoAddress Which DAO is being called.\n', '     * @param encodedData The non-packed, abi encoded calldata that will be included with the function call.\n', '     */\n', '    function safeCallDAO(address daoAddress, bytes calldata encodedData) external returns (bytes memory) {\n', '        // Reentrancy guard. We check against both normal reentrancy and DAO call reentrancy.\n', '        require(_status    == RE_NOT_ENTERED);\n', '        require(_daoStatus == RE_NOT_ENTERED);\n', '        _status = RE_ENTERED;\n', '        _daoStatus = RE_ENTERED;\n', '\n', '        require(msg.sender == _manager, "Not manager");\n', '        // `_isValidDAO` since DAOs can be disabled. Use `unsafeCallDAO()` if a call must be made to an invalid DAO.\n', '        require(_isValidDAO[daoAddress] == VALID_DAO, "Not a valid DAO");\n', '\n', '        // Call the function, bubbling on errors.\n', '        (bool success, bytes memory returnData) = daoAddress.call(encodedData);\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _status = RE_NOT_ENTERED;\n', '        _daoStatus = RE_NOT_ENTERED;\n', '\n', '        // See @OpenZeppelin.Address._functionCallWithValue()\n', '        if (success) {\n', '            return returnData;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returnData.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returnData_size := mload(returnData)\n', '                    revert(add(32, returnData), returnData_size)\n', '                }\n', '            } else {\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * Executes a function on the DAO. Only the manager can call this function. This DOES NOT guard against reentrancy. Do not use\n', '     * this unless reentrancy is needed or the call is made to an invlaid contract. Otherwise use `safeCallDAO()`. This code is\n', '     * duplicated in place of having an internal `_callDAO()` since reentrancy guarding is not guaranteed.\n', '     *\n', '     * @param daoAddress Which DAO is being called.\n', '     * @param encodedData The non-packed, abi encoded calldata that will be included with the function call.\n', '     */\n', '    function unsafeCallDAO(address daoAddress, bytes calldata encodedData) external returns (bytes memory) {\n', '        // Reentrancy guard. We check against both normal reentrancy and DAO call reentrancy.\n', '        require(_daoStatus == RE_NOT_ENTERED);\n', '        _daoStatus = RE_ENTERED;\n', '\n', '        require(msg.sender == _manager, "Not manager");\n', '        // `_isValidDAO` since DAOs can be disabled.\n', '        require(_isValidDAO[daoAddress] != UNTRACKED_DAO, "DAO not tracked");\n', '\n', '        // Call the function, bubbling on errors.\n', '        (bool success, bytes memory returnData) = daoAddress.call(encodedData);\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _daoStatus = RE_NOT_ENTERED;\n', '        \n', '        // See @OpenZeppelin.Address._functionCallWithValue()\n', '        if (success) {\n', '            return returnData;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returnData.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returnData_size := mload(returnData)\n', '                    revert(add(32, returnData), returnData_size)\n', '                }\n', '            } else {\n', '                revert();\n', '            }\n', '        }\n', '    }\n', '\n', '    /// ERC20 Overrides ///\n', '\n', '    /** This is overridden so we can update the reward balancees prior to the transfer completing. */\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED);\n', '        _status = RE_ENTERED;\n', '\n', '        // Preserve the original balances so we know if we need to change `_rewardHolders`. We need to call `pre()` and `post()` on\n', '        // every DAO version to make sure that the reward balances are updated correctly.\n', '        uint256 senderBefore = balanceOf(msg.sender);\n', '        uint256 recipientBefore = balanceOf(recipient);\n', '\n', '        // Update reward balances.\n', '        uint256 count = _daoAddresses.length;\n', '        uint256 index;\n', '        for (; index < count; index ++) {\n', '            IGoaldDAO(_daoAddresses[index]).preTransfer(msg.sender, recipient);\n', '        }\n', '        \n', '        // Transfer the tokens.\n', '        super.transfer(recipient, amount);\n', '        \n', '        // Update holder counts.\n', '        index = 0;\n', '        for (; index < count; index ++) {\n', '            IGoaldDAO(_daoAddresses[index]).postTransfer(msg.sender, senderBefore, balanceOf(msg.sender), recipientBefore, balanceOf(recipient));\n', '        }\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _status = RE_NOT_ENTERED;\n', '\n', '        return true;\n', '    }\n', '\n', '    /** This is overridden so we can update the reward balancees prior to the transfer completing. */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        // Reentrancy guard.\n', '        require(_status == RE_NOT_ENTERED);\n', '        _status = RE_ENTERED;\n', '\n', '        // Preserve the original balances so we know if we need to change `_rewardHolders`. We need to call `pre()` and `post()` on\n', '        // every DAO version to make sure that the reward balances are updated correctly.\n', '        uint256 senderBefore = balanceOf(sender);\n', '        uint256 recipientBefore = balanceOf(recipient);\n', '\n', '        // Update reward balances.\n', '        uint256 count = _daoAddresses.length;\n', '        uint256 index;\n', '        for (; index < count; index ++) {\n', '            IGoaldDAO(_daoAddresses[index]).preTransfer(sender, recipient);\n', '        }\n', '        \n', '        // Transfer the tokens.\n', '        super.transferFrom(sender, recipient, amount);\n', '        \n', '        // Update holder counts.\n', '        index = 0;\n', '        for (; index < count; index ++) {\n', '            IGoaldDAO(_daoAddresses[index]).postTransfer(sender, senderBefore, balanceOf(sender), recipientBefore, balanceOf(recipient));\n', '        }\n', '\n', '        // By storing the original amount once again, a refund is triggered (see https://eips.ethereum.org/EIPS/eip-2200).\n', '        _status = RE_NOT_ENTERED;\n', '\n', '        return true;\n', '    }\n', '}']