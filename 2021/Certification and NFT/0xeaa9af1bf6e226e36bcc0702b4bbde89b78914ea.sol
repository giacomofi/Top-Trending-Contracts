['// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./IERC20.sol";\n', '\n', 'interface IHoldefi {\n', '\n', '\tstruct Market {\n', '\t\tuint256 totalSupply;\n', '\n', '\t\tuint256 supplyIndex;\n', '\t\tuint256 supplyIndexUpdateTime;\n', '\n', '\t\tuint256 totalBorrow;\n', '\n', '\t\tuint256 borrowIndex;\n', '\t\tuint256 borrowIndexUpdateTime;\n', '\n', '\t\tuint256 promotionReserveScaled;\n', '\t\tuint256 promotionReserveLastUpdateTime;\n', '\n', '\t\tuint256 promotionDebtScaled;\n', '\t\tuint256 promotionDebtLastUpdateTime;\n', '\t}\n', '\n', '\n', '\tstruct Collateral {\n', '\t\tuint256 totalCollateral;\n', '\t\tuint256 totalLiquidatedCollateral;\n', '\t}\n', '\n', '\tfunction marketAssets(address market) external view returns(Market memory);\n', '\tfunction collateralAssets(address collateral) external view returns(Collateral memory);\n', '\n', '\tfunction getAccountSupply(address account, address market)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256 balance, uint256 interest, uint256 currentSupplyIndex);\n', '\n', '\tfunction getAccountBorrow(address account, address market, address collateral)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (uint256 balance, uint256 interest, uint256 currentBorrowIndex);\n', '\n', '\tfunction getAccountCollateral(address account, address collateral)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 balance,\n', '\t\t\tuint256 timeSinceLastActivity,\n', '\t\t\tuint256 borrowPowerValue,\n', '\t\t\tuint256 totalBorrowValue,\n', '\t\t\tbool underCollateral\n', '\t\t);\n', '\n', '\tfunction getCurrentSupplyIndex (address market)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 supplyIndex,\n', '\t\t\tuint256 supplyRate,\n', '\t\t\tuint256 currentTime\n', '\t\t);\n', '\n', '\tfunction getCurrentBorrowIndex (address market)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns (\n', '\t\t\tuint256 borrowIndex,\n', '\t\t\tuint256 borrowRate,\n', '\t\t\tuint256 currentTime\n', '\t\t);\n', '\n', '\tfunction marketDebt (address collateral, address market)\n', '\t\texternal\n', '\t\tview\n', '\t\treturns(\n', '\t\t\tuint256 debt\n', '\t\t);\n', '\n', '\tfunction isPaused(string memory operation) external view returns (bool res);\n', '}\n', '\n', 'interface IHoldefiSettings {\n', '\n', '\tstruct MarketSettings {\n', '\t\tbool isExist;\n', '\t\tbool isActive;      \n', '\n', '\t\tuint256 borrowRate;\n', '\t\tuint256 borrowRateUpdateTime;\n', '\n', '\t\tuint256 suppliersShareRate;\n', '\t\tuint256 suppliersShareRateUpdateTime;\n', '\n', '\t\tuint256 promotionRate;\n', '\t}\n', '\n', '\tstruct CollateralSettings {\n', '\t\tbool isExist;\n', '\t\tbool isActive;    \n', '\n', '\t\tuint256 valueToLoanRate; \n', '\t\tuint256 VTLUpdateTime;\n', '\n', '\t\tuint256 penaltyRate;\n', '\t\tuint256 penaltyUpdateTime;\n', '\n', '\t\tuint256 bonusRate;\n', '\t}\n', '\n', '\tfunction marketAssets(address market) external view returns(MarketSettings memory);\n', '\tfunction collateralAssets(address collateral) external view returns(CollateralSettings memory);\n', '}\n', '\n', '\n', 'interface IHoldefiPrices {\n', '\tfunction getPrice(address asset) external view returns (uint256 price, uint256 priceDecimals);\n', '}\n', '\n', '\n', 'contract HoldefiRead {\n', '\n', '\taddress constant public ethAddress = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '\tstring[8] private operationsList = [\n', '\t\t"supply",\n', '\t\t"withdrawSupply",\n', '\t\t"collateralize",\n', '\t\t"withdrawCollateral",\n', '\t\t"borrow",\n', '\t\t"repayBorrow",\n', '\t\t"liquidateBorrowerCollateral",\n', '\t\t"buyLiquidatedCollateral"\n', '\t];\n', '\n', '\tstruct AccountMarketData {\n', '\t\taddress market;\n', '\t\tuint256 balance;\n', '\t\tuint256 interest;\n', '\t\tuint256 index;\n', '\t}\n', '\n', '\tstruct AccountCollateralData {\n', '\t\taddress collateral;\n', '\t\tuint256 balance;\n', '\t\tuint256 timeSinceLastActivity;\n', '\t\tuint256 borrowPowerValue;\n', '\t\tuint256 totalBorrowValue;\n', '\t\tbool underCollateral;\n', '\n', '\t\tAccountMarketData[] userBorrows;\n', '\t}\n', '\n', '\tstruct AccountAssetData {\n', '\t\taddress asset;\n', '\t\tuint256 walletBalance;\n', '\t\tuint256 allowance;\n', '\t\tuint256 price;\n', '\t\tuint256 priceDecimals;\n', '\t}\n', '\n', '\tstruct MarketData {\n', '\t\taddress market;\n', '\n', '\t\tbool isExist;\n', '\t\tbool isActive;      \n', '\n', '\t\tuint256 borrowRate;\n', '\t\tuint256 supplyRate;\n', '\n', '\t\tuint256 suppliersShareRate;\n', '\t\tuint256 promotionRate;\n', '\n', '\t\tuint256 totalSupply;\n', '\t\tuint256 totalBorrow;\n', '\n', '\t\tuint256 supplyIndex;\n', '\t\tuint256 borrowIndex;\n', '\n', '\t\tuint256 price;\n', '\t\tuint256 priceDecimals;\n', '\t}\n', '\n', '\tstruct CollateralData {\n', '\t\taddress collateral;\n', '\n', '\t\tbool isExist;\n', '\t\tbool isActive;    \n', '\n', '\t\tuint256 valueToLoanRate; \n', '\t\tuint256 penaltyRate;\n', '\t\tuint256 bonusRate;\n', '\n', '\t\tuint256 totalCollateral;\n', '\t\tuint256 totalLiquidatedCollateral;\n', '\n', '\t\tMarketDebtData[] marketDebt;\n', '\n', '\t\tuint256 price;\n', '\t\tuint256 priceDecimals;\n', '\t}\n', '\n', '\tstruct OperationPauseStatus {\n', '\t\tstring operation;\n', '\t\tbool pauseStatus;\n', '\t}\n', '\n', '\tstruct MarketDebtData {\n', '\t\taddress market;\n', '\t\tuint256 debt;\n', '\t}\n', '\n', '\tIHoldefi public holdefi;\n', '\n', '\tIHoldefiSettings public holdefiSettings;\n', '\n', '\tIHoldefiPrices public holdefiPrices;\n', '\n', '\n', '\tconstructor(\n', '\t\tIHoldefi holdefiAddress,\n', '\t\tIHoldefiSettings holdefiSettingsAddress,\n', '\t\tIHoldefiPrices holdefiPricesAddress\n', '\t)\n', '\t\tpublic\n', '\t{\n', '\t\tholdefi = holdefiAddress;\n', '\t\tholdefiSettings = holdefiSettingsAddress;\n', '\t\tholdefiPrices = holdefiPricesAddress;\n', '\t}\n', '\n', '\tfunction getWalletBalance(address account, address asset) public view returns (uint256 res) {\n', '\t\tif (asset == ethAddress) {\n', '\t\t\tres = account.balance;\n', '\t\t}\n', '\t\telse {\n', '\t\t\tIERC20 token = IERC20(asset);\n', '\t\t\tres = token.balanceOf(account);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getWalletAllowance(address account, address asset) public view returns (uint256 res) {\n', '\t\tif (asset != ethAddress) {\n', '\t\t\tIERC20 token = IERC20(asset);\n', '\t\t\tres = token.allowance(account, address(holdefi));\n', '\t\t}\n', '\t}\n', '\n', '\n', '\tfunction getUserData(address userAddress, address[] memory marketList, address[] memory collateralList)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns(\n', '\t\t\tAccountMarketData[] memory userSupplies,\n', '\t\t\tAccountCollateralData[] memory userCollaterals,\n', '\t\t\tAccountAssetData[] memory userAssets\n', '\t\t)\n', '\t{\n', '\t\tuserSupplies = new AccountMarketData[](marketList.length);\n', '\t\tuserCollaterals = new AccountCollateralData[](collateralList.length);\n', '\t\taddress[] memory assets = new address[](marketList.length + collateralList.length);\n', '\n', '\t\tbool isExist;\n', '\t\tuint256 index;\n', '\t\tuint256 i;\n', '\t\tuint256 j;\n', '\t\tfor (i = 0 ; i < collateralList.length ; i++) {\n', '\t\t\tisExist = false;\n', '\t\t\tuserCollaterals[i].collateral = collateralList[i];\n', '\t\t\t(\n', '\t\t\t\tuserCollaterals[i].balance,\n', '\t\t\t\tuserCollaterals[i].timeSinceLastActivity,\n', '\t\t\t\tuserCollaterals[i].borrowPowerValue,\n', '\t\t\t\tuserCollaterals[i].totalBorrowValue,\n', '\t\t\t\tuserCollaterals[i].underCollateral\n', '\t\t\t) = holdefi.getAccountCollateral(userAddress, collateralList[i]);\n', '\t\t\tuserCollaterals[i].userBorrows = new AccountMarketData[](marketList.length);\n', '\t\t\tfor (j = 0 ; j < marketList.length ; j++) {\n', '\t\t\t\tif (i == 0) {\n', '\t\t\t\t\tuserSupplies[j].market = marketList[j];\n', '\t\t\t\t\t(\n', '\t\t\t\t\t\tuserSupplies[j].balance,\n', '\t\t\t\t\t\tuserSupplies[j].interest,\n', '\t\t\t\t\t\tuserSupplies[j].index\n', '\t\t\t\t\t) = holdefi.getAccountSupply(userAddress, marketList[j]);\n', '\n', '\t\t\t\t\tassets[j] = marketList[j];\n', '\t\t\t\t\tindex = j + 1;\n', '\t\t\t\t}\n', '\t\t\t\tif (collateralList[i] == marketList[j]) {\n', '\t\t\t\t\tisExist = true;\n', '\t\t\t\t}\n', '\n', '\t\t\t\tuserCollaterals[i].userBorrows[j].market = marketList[j];\n', '\t\t\t\t(\n', '\t\t\t\t\tuserCollaterals[i].userBorrows[j].balance,\n', '\t\t\t\t\tuserCollaterals[i].userBorrows[j].interest,\n', '\t\t\t\t\tuserCollaterals[i].userBorrows[j].index\n', '\t\t\t\t) = holdefi.getAccountBorrow(userAddress, marketList[j], collateralList[i]);\n', '\t\t\t\t\n', '\t\t\t}\n', '\n', '\t\t\tif (!isExist) {\n', '\t\t\t\tassets[index] = collateralList[i];\n', '\t\t\t\tindex = index + 1;\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tuserAssets = new AccountAssetData[](index);\n', '\t\tfor (i = 0 ; i < index ; i++) {\n', '\t\t\tuserAssets[i].asset = assets[i];\n', '\t\t\t(userAssets[i].price, userAssets[i].priceDecimals) = holdefiPrices.getPrice(assets[i]);\n', '\t\t\tuserAssets[i].walletBalance = getWalletBalance(userAddress, assets[i]);\n', '\t\t\tuserAssets[i].allowance = getWalletAllowance(userAddress, assets[i]);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction getProtocolData(address[] memory marketList, address[] memory collateralList)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns(\n', '\t\t\tMarketData[] memory markets,\n', '\t\t\tCollateralData[] memory collaterals, \n', '\t\t\tOperationPauseStatus[8] memory operations\n', '\t\t)\n', '\t{\n', '\n', '\t\tmarkets = new MarketData[](marketList.length);\n', '\t\tcollaterals = new CollateralData[](collateralList.length);\n', '\n', '\t\tuint256 i;\n', '\t\tuint256 j;\n', '\t\tfor (i = 0 ; i < marketList.length ; i++) {\n', '\t\t\tIHoldefi.Market memory holdefiMarket = holdefi.marketAssets(marketList[i]);\n', '\n', '\t\t\tmarkets[i].market = marketList[i];\n', '\t\t\tmarkets[i].totalSupply = holdefiMarket.totalSupply;\n', '\t\t\tmarkets[i].totalBorrow = holdefiMarket.totalBorrow;\n', '\n', '\t\t\t(\n', '\t\t\t\tmarkets[i].supplyIndex,\n', '\t\t\t\tmarkets[i].supplyRate,\n', '\t\t\t) = holdefi.getCurrentSupplyIndex(marketList[i]);\n', '\n', '\n', '\t\t\t(\n', '\t\t\t\tmarkets[i].borrowIndex,\n', '\t\t\t\tmarkets[i].borrowRate,\n', '\t\t\t) = holdefi.getCurrentBorrowIndex(marketList[i]);\n', '\n', '\n', '\t\t\tIHoldefiSettings.MarketSettings memory holdefiSettingsMarket = holdefiSettings.marketAssets(marketList[i]);\n', '\t\t\tmarkets[i].isExist = holdefiSettingsMarket.isExist;\n', '\t\t\tmarkets[i].isActive = holdefiSettingsMarket.isActive;\n', '\t\t\tmarkets[i].suppliersShareRate = holdefiSettingsMarket.suppliersShareRate;\n', '\t\t\tmarkets[i].promotionRate = holdefiSettingsMarket.promotionRate;\n', '\n', '\t\t\t(markets[i].price, markets[i].priceDecimals) = holdefiPrices.getPrice(marketList[i]);\n', '\t\t}\n', '\n', '\t\tfor (i = 0 ; i < collateralList.length ; i++) {\n', '\t\t\tIHoldefi.Collateral memory holdefiCollateral = holdefi.collateralAssets(collateralList[i]);\n', '\t\t\tcollaterals[i].collateral = collateralList[i];\n', '\t\t\tcollaterals[i].totalCollateral = holdefiCollateral.totalCollateral;\n', '\t\t\tcollaterals[i].totalLiquidatedCollateral = holdefiCollateral.totalLiquidatedCollateral;\n', '\n', '\t\t\tIHoldefiSettings.CollateralSettings memory holdefiSettingsCollateral = holdefiSettings.collateralAssets(collateralList[i]);\n', '\t\t\tcollaterals[i].isExist = holdefiSettingsCollateral.isExist;\n', '\t\t\tcollaterals[i].isActive = holdefiSettingsCollateral.isActive;\n', '\t\t\tcollaterals[i].valueToLoanRate = holdefiSettingsCollateral.valueToLoanRate;\n', '\t\t\tcollaterals[i].penaltyRate = holdefiSettingsCollateral.penaltyRate;\n', '\t\t\tcollaterals[i].bonusRate = holdefiSettingsCollateral.bonusRate;\n', '\n', '\t\t\t(collaterals[i].price, collaterals[i].priceDecimals) = holdefiPrices.getPrice(collateralList[i]);\n', '\n', '\t\t\tcollaterals[i].marketDebt = new MarketDebtData[](marketList.length);\n', '\t\t\tfor (j = 0 ; j < marketList.length ; j++) {\n', '\t\t\t\tcollaterals[i].marketDebt[j].market = marketList[j];\n', '\t\t\t\tcollaterals[i].marketDebt[j].debt = holdefi.marketDebt(collateralList[i], marketList[j]);\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tfor (i = 0 ; i < operationsList.length ; i++) {\n', '\t\t\toperations[i].operation = operationsList[i];\n', '\t\t\toperations[i].pauseStatus = holdefi.isPaused(operationsList[i]);\n', '\t\t}\n', '\t}\n', '\n', '\n', '\tfunction getUserProtocolData(address userAddress, address[] memory marketList, address[] memory collateralList)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns(\n', '\t\t\tAccountMarketData[] memory userSupplies,\n', '\t\t\tAccountCollateralData[] memory userCollaterals,\n', '\t\t\tAccountAssetData[] memory userAssets,\n', '\t\t\tMarketData[] memory markets,\n', '\t\t\tCollateralData[] memory collaterals,\n', '\t\t\tOperationPauseStatus[8] memory operations\n', '\t\t)\n', '\t{\n', '\t\t(userSupplies, userCollaterals, userAssets) = getUserData(userAddress, marketList, collateralList);\n', '\t\t(markets, collaterals, operations) = getProtocolData(marketList, collateralList);\n', '\t}\n', '\n', '\n', '\tfunction getUserAssetsData(address userAddress, address[] memory marketList, address[] memory collateralList)\n', '\t\tpublic\n', '\t\tview\n', '\t\treturns(\n', '\t\t\tAccountAssetData[] memory userAssets\n', '\t\t)\n', '\t{\n', '\t\taddress[] memory assets = new address[](marketList.length + collateralList.length);\n', '\n', '\t\tbool isExist;\n', '\t\tuint256 index;\n', '\t\tuint256 i;\n', '\t\tuint256 j;\n', '\t\tfor (i = 0 ; i < collateralList.length ; i++) {\n', '\t\t\tisExist = false;\n', '\t\t\tfor (j = 0 ; j < marketList.length ; j++) {\n', '\t\t\t\tif (i == 0) {\n', '\t\t\t\t\tassets[j] = marketList[j];\n', '\t\t\t\t\tindex = j + 1;\n', '\t\t\t\t}\n', '\n', '\t\t\t\tif (collateralList[i] == marketList[j]) {\n', '\t\t\t\t\tisExist = true;\n', '\t\t\t\t}\n', '\t\t\t}\n', '\n', '\t\t\tif (!isExist) {\n', '\t\t\t\tassets[index] = collateralList[i];\n', '\t\t\t\tindex = index + 1;\n', '\t\t\t}\n', '\t\t}\n', '\n', '\t\tuserAssets = new AccountAssetData[](index);\n', '\t\tfor (i = 0 ; i < index ; i++) {\n', '\t\t\tuserAssets[i].asset = assets[i];\n', '\t\t\t(userAssets[i].price, userAssets[i].priceDecimals) = holdefiPrices.getPrice(assets[i]);\n', '\t\t\tuserAssets[i].walletBalance = getWalletBalance(userAddress, assets[i]);\n', '\t\t\tuserAssets[i].allowance = getWalletAllowance(userAddress, assets[i]);\n', '\t\t}\n', '\t}\n', '}']