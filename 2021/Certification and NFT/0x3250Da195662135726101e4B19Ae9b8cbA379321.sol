['// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', 'import "@chainlink/contracts/src/v0.6/interfaces/AggregatorInterface.sol";\n', 'import "./IDerivativeSpecification.sol";\n', '\n', 'contract DerivativeSpecification is IDerivativeSpecification {\n', '    function isDerivativeSpecification() external pure override returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    string internal symbol_;\n', '\n', '    bytes32[] internal oracleSymbols_;\n', '    bytes32[] internal oracleIteratorSymbols_;\n', '    bytes32 internal collateralTokenSymbol_;\n', '    bytes32 internal collateralSplitSymbol_;\n', '\n', '    uint256 internal livePeriod_;\n', '\n', '    uint256 internal primaryNominalValue_;\n', '    uint256 internal complementNominalValue_;\n', '\n', '    uint256 internal authorFee_;\n', '\n', '    string internal name_;\n', '    string private baseURI_;\n', '    address internal author_;\n', '\n', '    function name() external view virtual override returns (string memory) {\n', '        return name_;\n', '    }\n', '\n', '    function baseURI() external view virtual override returns (string memory) {\n', '        return baseURI_;\n', '    }\n', '\n', '    function symbol() external view virtual override returns (string memory) {\n', '        return symbol_;\n', '    }\n', '\n', '    function oracleSymbols()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (bytes32[] memory)\n', '    {\n', '        return oracleSymbols_;\n', '    }\n', '\n', '    function oracleIteratorSymbols()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (bytes32[] memory)\n', '    {\n', '        return oracleIteratorSymbols_;\n', '    }\n', '\n', '    function collateralTokenSymbol()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (bytes32)\n', '    {\n', '        return collateralTokenSymbol_;\n', '    }\n', '\n', '    function collateralSplitSymbol()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (bytes32)\n', '    {\n', '        return collateralSplitSymbol_;\n', '    }\n', '\n', '    function livePeriod() external view virtual override returns (uint256) {\n', '        return livePeriod_;\n', '    }\n', '\n', '    function primaryNominalValue()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return primaryNominalValue_;\n', '    }\n', '\n', '    function complementNominalValue()\n', '        external\n', '        view\n', '        virtual\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return complementNominalValue_;\n', '    }\n', '\n', '    function authorFee() external view virtual override returns (uint256) {\n', '        return authorFee_;\n', '    }\n', '\n', '    function author() external view virtual override returns (address) {\n', '        return author_;\n', '    }\n', '\n', '    constructor(\n', '        address _author,\n', '        string memory _name,\n', '        string memory _symbol,\n', '        bytes32[] memory _oracleSymbols,\n', '        bytes32[] memory _oracleIteratorSymbols,\n', '        bytes32 _collateralTokenSymbol,\n', '        bytes32 _collateralSplitSymbol,\n', '        uint256 _livePeriod,\n', '        uint256 _primaryNominalValue,\n', '        uint256 _complementNominalValue,\n', '        uint256 _authorFee,\n', '        string memory _baseURI\n', '    ) public {\n', '        author_ = _author;\n', '        name_ = _name;\n', '        symbol_ = _symbol;\n', '        oracleSymbols_ = _oracleSymbols;\n', '        oracleIteratorSymbols_ = _oracleIteratorSymbols;\n', '        collateralTokenSymbol_ = _collateralTokenSymbol;\n', '        collateralSplitSymbol_ = _collateralSplitSymbol;\n', '        livePeriod_ = _livePeriod;\n', '        primaryNominalValue_ = _primaryNominalValue;\n', '        complementNominalValue_ = _complementNominalValue;\n', '        authorFee_ = _authorFee;\n', '        baseURI_ = _baseURI;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0;\n', '\n', 'interface AggregatorInterface {\n', '  function latestAnswer() external view returns (int256);\n', '  function latestTimestamp() external view returns (uint256);\n', '  function latestRound() external view returns (uint256);\n', '  function getAnswer(uint256 roundId) external view returns (int256);\n', '  function getTimestamp(uint256 roundId) external view returns (uint256);\n', '\n', '  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n', '  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n', '}\n', '\n', '// "SPDX-License-Identifier: GPL-3.0-or-later"\n', '\n', 'pragma solidity 0.7.6;\n', '\n', '/// @title Derivative Specification interface\n', '/// @notice Immutable collection of derivative attributes\n', "/// @dev Created by the derivative's author and published to the DerivativeSpecificationRegistry\n", 'interface IDerivativeSpecification {\n', '    /// @notice Proof of a derivative specification\n', '    /// @dev Verifies that contract is a derivative specification\n', '    /// @return true if contract is a derivative specification\n', '    function isDerivativeSpecification() external pure returns (bool);\n', '\n', '    /// @notice Set of oracles that are relied upon to measure changes in the state of the world\n', '    /// between the start and the end of the Live period\n', '    /// @dev Should be resolved through OracleRegistry contract\n', '    /// @return oracle symbols\n', '    function oracleSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Algorithm that, for the type of oracle used by the derivative,\n', '    /// finds the value closest to a given timestamp\n', '    /// @dev Should be resolved through OracleIteratorRegistry contract\n', '    /// @return oracle iterator symbols\n', '    function oracleIteratorSymbols() external view returns (bytes32[] memory);\n', '\n', '    /// @notice Type of collateral that users submit to mint the derivative\n', '    /// @dev Should be resolved through CollateralTokenRegistry contract\n', '    /// @return collateral token symbol\n', '    function collateralTokenSymbol() external view returns (bytes32);\n', '\n', '    /// @notice Mapping from the change in the underlying variable (as defined by the oracle)\n', '    /// and the initial collateral split to the final collateral split\n', '    /// @dev Should be resolved through CollateralSplitRegistry contract\n', '    /// @return collateral split symbol\n', '    function collateralSplitSymbol() external view returns (bytes32);\n', '\n', "    /// @notice Lifecycle parameter that define the length of the derivative's Live period.\n", '    /// @dev Set in seconds\n', '    /// @return live period value\n', '    function livePeriod() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of primary asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of primary asset\n', '    /// @return primary nominal value\n', '    function primaryNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Parameter that determines starting nominal value of complement asset\n', '    /// @dev Units of collateral theoretically swappable for 1 unit of complement asset\n', '    /// @return complement nominal value\n', '    function complementNominalValue() external view returns (uint256);\n', '\n', '    /// @notice Minting fee rate due to the author of the derivative specification.\n', '    /// @dev Percentage fee multiplied by 10 ^ 12\n', '    /// @return author fee\n', '    function authorFee() external view returns (uint256);\n', '\n', '    /// @notice Symbol of the derivative\n', '    /// @dev Should be resolved through DerivativeSpecificationRegistry contract\n', '    /// @return derivative specification symbol\n', '    function symbol() external view returns (string memory);\n', '\n', '    /// @notice Return optional long name of the derivative\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return long name\n', '    function name() external view returns (string memory);\n', '\n', '    /// @notice Optional URI to the derivative specs\n', "    /// @dev Isn't used directly in the protocol\n", '    /// @return URI to the derivative specs\n', '    function baseURI() external view returns (string memory);\n', '\n', '    /// @notice Derivative spec author\n', "    /// @dev Used to set and receive author's fee\n", '    /// @return address of the author\n', '    function author() external view returns (address);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 1000000\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']