['pragma solidity ^0.7.0;\n', '\n', 'import "./IERC165.sol";\n', 'import "./ERC165.sol";\n', 'import "./Address.sol";\n', 'import "./EnumerableMap.sol";\n', 'import "./EnumerableSet.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Strings.sol";\n', 'import "./Context.sol";\n', 'import "./Ownable.sol";\n', 'import "./ISPT.sol";\n', 'import "./ISpirits.sol";\n', 'import "./IERC721Enumerable.sol";\n', '\n', '/**\n', ' * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n', ' * @dev See https://eips.ethereum.org/EIPS/eip-721\n', ' */\n', 'interface IERC721Metadata is IERC721 {\n', '\n', '    /**\n', '     * @dev Returns the token collection name.\n', '     */\n', '    function name() external view returns (string memory);\n', '\n', '    /**\n', '     * @dev Returns the token collection symbol.\n', '     */\n', '    function symbol() external view returns (string memory);\n', '}\n', '\n', '/**\n', ' * @title ERC721 token receiver interface\n', ' * @dev Interface for any contract that wants to support safeTransfers\n', ' * from ERC721 asset contracts.\n', ' */\n', 'interface IERC721Receiver {\n', '    /**\n', '     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n', '     * by `operator` from `from`, this function is called.\n', '     *\n', '     * It must return its Solidity selector to confirm the token transfer.\n', '     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n', '     *\n', '     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n', '     */\n', '    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\n', '}\n', '\n', '/**\n', ' * @title CryptoSpirits contract\n', ' * @dev Extends ERC721 Non-Fungible Token Standard basic implementation\n', ' */\n', 'contract Spirits is Context, Ownable, ERC165, ISpirits, IERC721Metadata {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '    using EnumerableSet for EnumerableSet.UintSet;\n', '    using EnumerableMap for EnumerableMap.UintToAddressMap;\n', '    using Strings for uint256;\n', '\n', '    uint256 public constant SALE_START_TIMESTAMP = 1625245200; // Friday, July 2, 2021 6:00:00 PM BST\n', '\n', '    // time after which CryptoSpirits artworks are randomized and assigned to NFTs\n', '    uint256 public constant DISTRIBUTION_TIMESTAMP = SALE_START_TIMESTAMP + (86400 * 5); // 5 is number of days\n', '    \n', '    uint256 public constant REVEAL_STAGE_INTERVAL = (86400 * 1); // 1 day between reveal unlocks\n', '\n', '    uint256 public constant MAX_NFT_SUPPLY = 7777;\n', '\n', '    uint256 public usernameChangePrice = 10 * (10 ** 18);\n', '    \n', '    uint256 public nodenameChangePrice = 10 * (10 ** 18);\n', '\n', '    uint256 public startingIndexBlock;\n', '\n', '    uint256 public startingIndex;\n', '    \n', '    bool private _salePaused = false;\n', '    \n', '    uint256 public price_bracket_1 = 0.08 * (10 ** 18);\n', '    uint256 public price_bracket_2 = 0.15 * (10 ** 18);\n', '    uint256 public price_bracket_3 = 0.22 * (10 ** 18);\n', '    \n', '    // Mapping from token ID to reward multiplier numerator and denominator\n', '    mapping (uint256 => uint256) private _tokenRewardMultiplierNum;\n', '    mapping (uint256 => uint256) private _tokenRewardMultiplierDen;\n', '\n', '    // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    // which can be also obtained as `IERC721Receiver(0).onERC721Received.selector`\n', '    bytes4 private constant _ERC721_RECEIVED = 0x150b7a02;\n', '\n', '    // Mapping from holder address to their (enumerable) set of owned tokens\n', '    mapping (address => EnumerableSet.UintSet) private _holderTokens;\n', '\n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _tokenOwners;\n', '\n', '    // Mapping from token ID to approved address\n', '    mapping (uint256 => address) private _tokenApprovals;\n', '\n', '    // Mapping from address to username\n', '    mapping (address => string) private _usernames;\n', '\n', '    // Mapping if certain name string has already been reserved\n', '    mapping (string => bool) private _usernameReserved;\n', '    \n', '     // Mapping from token ID to the timestamp the NFT was minted\n', '    mapping (uint256 => uint256) private _mintedTimestamp;\n', '\n', '    // Mapping from owner to operator approvals\n', '    mapping (address => mapping (address => bool)) private _operatorApprovals;\n', '    \n', '    // node name changes\n', '    bool public nodeNameChangesEnabled = false;\n', '\n', '    // token name\n', '    string private _name;\n', '\n', '    // token symbol\n', '    string private _symbol;\n', '    \n', '    // base URI\n', '    string private _baseURI;\n', '    \n', '    // contract URI\n', '    string private _contractURI;\n', '\n', '    // name change token address\n', '    address private _sptAddress;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address)')) == 0x70a08231\n", "     *     bytes4(keccak256('ownerOf(uint256)')) == 0x6352211e\n", "     *     bytes4(keccak256('approve(address,uint256)')) == 0x095ea7b3\n", "     *     bytes4(keccak256('getApproved(uint256)')) == 0x081812fc\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('transferFrom(address,address,uint256)')) == 0x23b872dd\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256)')) == 0x42842e0e\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)')) == 0xb88d4fde\n", '     *\n', '     *     => 0x70a08231 ^ 0x6352211e ^ 0x095ea7b3 ^ 0x081812fc ^\n', '     *        0xa22cb465 ^ 0xe985e9c5 ^ 0x23b872dd ^ 0x42842e0e ^ 0xb88d4fde == 0x80ac58cd\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721 = 0x80ac58cd;\n', '\n', '    /*\n', "     *     bytes4(keccak256('name()')) == 0x06fdde03\n", "     *     bytes4(keccak256('symbol()')) == 0x95d89b41\n", '     *\n', '     *     => 0x06fdde03 ^ 0x95d89b41 == 0x93254542\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_METADATA = 0x93254542;\n', '\n', '    /*\n', "     *     bytes4(keccak256('totalSupply()')) == 0x18160ddd\n", "     *     bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) == 0x2f745c59\n", "     *     bytes4(keccak256('tokenByIndex(uint256)')) == 0x4f6ccce7\n", '     *\n', '     *     => 0x18160ddd ^ 0x2f745c59 ^ 0x4f6ccce7 == 0x780e9d63\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC721_ENUMERABLE = 0x780e9d63;\n', '\n', '    // Events\n', '    event NodeNameChange (uint256 indexed nodeId, string newName);\n', '    event UsernameChange (address user, string newName);\n', '    event NodeRegistered (uint256 indexed nodeId, string name, address owner);\n', '    event NodeUnregistered (uint256 indexed nodeId, string name, address owner);\n', '    \n', '    /**\n', '     * @dev Initializes the contract which sets a name and a symbol to the token collection.\n', '     */\n', '    constructor () {\n', '        _name = "CryptoSpirits";\n', '        _symbol = "SPIRITS";\n', '        _sptAddress = 0x3e4E8ECB65cB5bA5E791BB955F8Bbc5c9Ad421c7;\n', '        \n', '        // for third-party metadata fetching\n', '        _baseURI = "https://spirit.app:7777/api/opensea/";\n', '        _contractURI = "https://spirit.app:7777/api/contractmeta";\n', '\n', '        // register the supported interfaces to conform to ERC721 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC721);\n', '        _registerInterface(_INTERFACE_ID_ERC721_METADATA);\n', '        _registerInterface(_INTERFACE_ID_ERC721_ENUMERABLE);\n', '    }\n', '    \n', '    /*\n', '        Node Code\n', '    */\n', '    // Mapping from holder address to their (enumerable) set of owned nodes\n', '    mapping (address => EnumerableSet.UintSet) private _ownerNodes;\n', '    \n', '    // Enumerable mapping from token ids to their owners\n', '    EnumerableMap.UintToAddressMap private _nodeOwners;\n', '    \n', '    // Mapping from node ID to name\n', '    mapping (uint256 => string) private _nodeNames;\n', '    \n', '     // Mapping from node ID to the timestamp the node was registered\n', '    mapping (uint256 => uint256) private _nodeRegTimes;\n', '    \n', '    // Mapping from node ID to the timestamp the node was unregistered\n', '    mapping (uint256 => uint256) private _nodeUnregTimes;\n', '    \n', '    // Mapping from node ID to the type of node\n', '    mapping (uint256 => uint256) private _nodeTypes;\n', '    \n', '    // Mapping from node ID to the bool of whether it is valid\n', '    mapping (uint256 => bool) private _nodeValid;\n', '    \n', '    // Mapping from token ID to the node Id\n', '    mapping (uint256 => uint256) private _tokenNodeIds;\n', '    \n', '    // Mapping from node ID to the containing token Ids\n', '    mapping (uint256 => uint256[]) private _nodeTokenIds;\n', '    \n', '    // Mapping if certain name string has already been reserved\n', '    mapping (string => bool) private _nodeNameReserved;\n', '    \n', '    // number of active (registered) nodes\n', '    uint256 private _activeNodes = 0;\n', '    \n', '    function registerNode(uint256[] memory tokenIds, string memory _nodeName, uint256 _nodeType) public returns (uint256) {\n', '        require((tokenIds.length == 5 && (_nodeType == 1 || _nodeType == 3)) || (tokenIds.length == 15 && _nodeType == 2) || (tokenIds.length == 6 && _nodeType == 4), "Invalid number of tokenIds for type of node");\n', '        require(validateName(_nodeName), "Not a valid node name");\n', '        require(!isNodeNameReserved(_nodeName), "Name already reserved");\n', '        address sender = _msgSender();\n', '        for (uint i = 0; i < tokenIds.length; i++) {\n', '            // for each token, check it only appears once in the array\n', '            for (uint j = i + 1; j < tokenIds.length; j++) {\n', '               require(tokenIds[i] != tokenIds[j], "Duplicate token index");\n', '            }\n', '            require(sender == ownerOf(tokenIds[i]), "Caller does not own tokenId");\n', '            require(nodeIdFromTokenId(tokenIds[i]) == 0, "Token already registered to node");\n', '            require(revealStageByIndex(tokenIds[i]) >= 4, "All Spirits must be fully awakened to be registered to a node");\n', '        }\n', '        \n', '        // register node\n', '        uint256 nodeId = totalNodes().add(1);\n', '        _nodeOwners.set(nodeId, sender);\n', '        _ownerNodes[sender].add(nodeId);\n', '        _nodeTypes[nodeId] = _nodeType;\n', '        _nodeRegTimes[nodeId] = block.timestamp;\n', '        _nodeUnregTimes[nodeId] = 0;\n', '        _nodeTokenIds[nodeId] = tokenIds;\n', '        \n', '        // air and earth nodes auto approved\n', '        if(_nodeType == 1 || _nodeType == 2) {\n', '            _nodeValid[nodeId] = true;\n', '        }\n', '        // water and fire nodes require manual approval\n', '        else {\n', '            _nodeValid[nodeId] = false;\n', '        }\n', '        \n', '        for (uint i = 0; i < tokenIds.length; i++) {\n', '            _tokenNodeIds[tokenIds[i]] = nodeId;\n', '        }\n', '\n', '        toggleReserveNodeName(_nodeName, true);\n', '        _nodeNames[nodeId] = _nodeName;\n', '        _activeNodes = _activeNodes.add(1);\n', '        emit NodeRegistered(nodeId, _nodeName, sender);\n', '        return nodeId;\n', '    }\n', '    \n', '    function unregisterNode(uint256 nodeId) public {\n', '        address sender = _msgSender();\n', '        require(sender == ownerOfNode(nodeId), "Caller does not own node");\n', '        require(nodeActive(nodeId), "Node is already unregistered");\n', '        _unregisterNode(nodeId, sender);\n', '    }\n', '    \n', '    function _unregisterNode(uint256 nodeId, address owner) internal returns (uint256) {\n', '        require(nodeActive(nodeId), "Node is already unregistered");\n', '        // _ownerNodes[owner].remove(nodeId);\n', '        // _nodeOwners.remove(nodeId);\n', '        _nodeUnregTimes[nodeId] = block.timestamp;\n', '        uint256[] memory tokenIds = _nodeTokenIds[nodeId];\n', '        for (uint i = 0; i < tokenIds.length; i++) {\n', '            uint256 token = tokenIds[i];\n', '            _tokenNodeIds[token] = 0;\n', '        }\n', '        // dereserve old name\n', '        toggleReserveNodeName(_nodeNames[nodeId], false);\n', '        if(_activeNodes >= 1) {\n', '            _activeNodes = _activeNodes.sub(1);\n', '        }\n', '        emit NodeUnregistered(nodeId, _nodeNames[nodeId], owner);\n', '        return _nodeUnregTimes[nodeId];\n', '    }\n', '    \n', '    /* returns a plethora of node info */\n', '    function nodeInfo(uint256 nodeId) public view override returns (address, string memory, uint256, uint256, uint256, bool, uint256[] memory) {\n', '        require(nodeExists(nodeId), "Node with specified id does not exist");\n', '        return (ownerOfNode(nodeId), _nodeNames[nodeId], _nodeRegTimes[nodeId], _nodeUnregTimes[nodeId], _nodeTypes[nodeId], _nodeValid[nodeId], _nodeTokenIds[nodeId]);\n', '    }\n', '    \n', '    /* returns count of active (registered and not unregistered) nodes */\n', '    function totalActiveNodes() public view override returns (uint256) {\n', '        return _activeNodes;\n', '    }\n', '\n', '    /* returns count of nodes owned by owner */\n', '    function nodeBalanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '        return _ownerNodes[owner].length();\n', '    }\n', '    \n', '    /* returns node owner */\n', '    function ownerOfNode(uint256 nodeId) public view override returns (address) {\n', '        return _nodeOwners.get(nodeId, "ERC721: owner query for nonexistent node");\n', '    }\n', '    \n', '    /* returns node owned by owner at a given index */\n', '    function nodeOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _ownerNodes[owner].at(index);\n', '    }\n', '    \n', '    /* returns total number of nodes registered (active and inactive) */\n', '    function totalNodes() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by nodeIds, so .length() returns the number of nodeIds\n', '        return _nodeOwners.length();\n', '    }\n', '    \n', '    /* returns the type of node (1 / 2 / 3 / 4) */\n', '    function nodeType(uint256 nodeId) public view override returns (uint256) {\n', '        return _nodeTypes[nodeId];\n', '    }\n', '    \n', '     /* returns the size of the node (no. of tokens it contains) */\n', '    function nodeSize(uint256 nodeId) public view override returns (uint256) {\n', '        return _nodeTokenIds[nodeId].length;\n', '    }\n', '    \n', '    /* returns whether the node has been validated */\n', '    function nodeValid(uint256 nodeId) public view override returns (bool) {\n', '        return _nodeValid[nodeId];\n', '    }\n', '    \n', '    /* returns the timestamp the node was registered */\n', '    function nodeRegTime(uint256 nodeId) public view override returns (uint256) {\n', '        return _nodeRegTimes[nodeId];\n', '    }\n', '    \n', '    /* returns the timestamp the node was unregistered (returns 0 if still active) */\n', '    function nodeUnregTime(uint256 nodeId) public view override returns (uint256) {\n', '        return _nodeUnregTimes[nodeId];\n', '    }\n', '    \n', '    /* returns the name of the node with ID */\n', '    function nodeName(uint256 nodeId) public view override returns (string memory) {\n', '        return _nodeNames[nodeId];\n', '    }\n', '    \n', '    /* returns whether the node is still registered */\n', '    function nodeActive(uint256 nodeId) public view override returns (bool) {\n', '        return _nodeRegTimes[nodeId] != 0 && _nodeUnregTimes[nodeId] == 0;\n', '    }\n', '    \n', '    /* returns the timestamp the node was unregistered (returns 0 if still active) */\n', '    function nodeTokenIds(uint256 nodeId) public view override returns (uint256[] memory) {\n', '        return _nodeTokenIds[nodeId];\n', '    }\n', '    \n', '    /* returns is the node name has been reserved */\n', '    function isNodeNameReserved(string memory nameString) public view override returns (bool) {\n', '        return _nodeNameReserved[toLower(nameString)];\n', '    }\n', '    \n', '    /* returns the nodeId of the registered node of the tokenId */\n', '    function nodeIdFromTokenId(uint256 tokenId) public view override returns (uint256) {\n', '        return _tokenNodeIds[tokenId];\n', '    }\n', '    \n', '    function nodeExists(uint256 nodeId) public view override returns (bool) {\n', '        return _nodeOwners.contains(nodeId);\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function username(address owner) public view override returns (string memory) {\n', '        return _usernames[owner];\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC721-balanceOf}.\n', '     */\n', '    function balanceOf(address owner) public view override returns (uint256) {\n', '        require(owner != address(0), "ERC721: balance query for the zero address");\n', '\n', '        return _holderTokens[owner].length();\n', '    }\n', '    \n', '    /**\n', '     * @dev See {IERC721-ownerOf}.\n', '     */\n', '    function ownerOf(uint256 tokenId) public view override returns (address) {\n', '        return _tokenOwners.get(tokenId, "ERC721: owner query for nonexistent token");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-name}.\n', '     */\n', '    function name() public view override returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Metadata-symbol}.\n', '     */\n', '    function symbol() public view override returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\n', '     */\n', '    function tokenOfOwnerByIndex(address owner, uint256 index) public view override returns (uint256) {\n', '        return _holderTokens[owner].at(index);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        // _tokenOwners are indexed by tokenIds, so .length() returns the number of tokenIds\n', '        return _tokenOwners.length();\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721Enumerable-tokenByIndex}.\n', '     */\n', '    function tokenByIndex(uint256 index) public view override returns (uint256) {\n', '        (uint256 tokenId, ) = _tokenOwners.at(index);\n', '        return tokenId;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns if the name has been reserved.\n', '     */\n', '    function isUserNameReserved(string memory nameString) public view override returns (bool) {\n', '        return _usernameReserved[toLower(nameString)];\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns the timestamp of the block in which the NFT was minted\n', '     */\n', '    function mintedTimestampByIndex(uint256 index) public view override returns (uint256) {\n', '        return _mintedTimestamp[index];\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns an URI for a given token ID\n', '     * Throws if the token ID does not exist. May return an empty string.\n', '     * @param tokenId uint256 ID of the token to query\n', '     */\n', '    function tokenURI(uint256 tokenId) external view returns (string memory) {\n', '        require(_exists(tokenId), "Token with specified ID does not exist");\n', '        return Strings.Concatenate(\n', '            baseTokenURI(),\n', '            Strings.UintToString(tokenId)\n', '        );\n', '    }\n', '        \n', '    /**\n', '     * @dev Gets the base token URI\n', '     * @return string representing the base token URI\n', '     */\n', '    function baseTokenURI() public view returns (string memory) {\n', '        return _baseURI;\n', '    }\n', '    \n', '    /**\n', '     * @dev Gets the contract URI for contract level metadata\n', '     * @return string representing the contract URI\n', '     */\n', '    function contractURI() public view returns (string memory) {\n', '        return _contractURI;\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function changeBaseURI(string memory baseURI) onlyOwner external {\n', '       _baseURI = baseURI;\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the base URI if we want to move things in the future (Callable by owner only)\n', '    */\n', '    function changeContractURI(string memory newContractURI) onlyOwner external {\n', '       _contractURI = newContractURI;\n', '    }\n', '    \n', '    /**\n', '    * @dev Pauses / Unpauses the sale to Disable/Enable minting of new NFTs (Callable by owner only)\n', '    */\n', '    function toggleSalePause(bool salePaused) onlyOwner external {\n', '       _salePaused = salePaused;\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the price for a sale bracket - prices can never be less than current price (Callable by owner only)\n', '    */\n', '    function changeBracketPrice(uint bracket, uint256 price) onlyOwner external {\n', '        require(totalSupply() < MAX_NFT_SUPPLY, "Sale has already ended");\n', '        require(bracket > 0 && bracket < 4, "Bracket must be in the range 1-3");\n', '        require(price > 0, "Price must be set and greater than 0");\n', '        \n', '        if(bracket == 1) {\n', '            price_bracket_1 = price;\n', '        }\n', '        else if(bracket == 2) {\n', '            price_bracket_2 = price;\n', '        }\n', '        else if(bracket == 3) {\n', '            price_bracket_3 = price;\n', '        }\n', '    }\n', '    \n', '    /**\n', '    * @dev Changes the price for a name change (if in future the price needs adjusting due to token speculation) (Callable by owner only)\n', '    */\n', '    function changeUsernameChangePrice(uint256 price) onlyOwner external {\n', '        usernameChangePrice = price;\n', '    }\n', '    \n', '     /**\n', '    * @dev Changes the price for a name change (if in future the price needs adjusting due to token speculation) (Callable by owner only)\n', '    */\n', '    function changeNodeNameChangePrice(uint256 price) onlyOwner external {\n', '        nodenameChangePrice = price;\n', '    }\n', '    \n', '     /**\n', '    * @dev Changes the price for a name change (if in future the price needs adjusting due to token speculation) (Callable by owner only)\n', '    */\n', '    function toggleNodeNameChangesEnabled(bool enabled) onlyOwner external {\n', '        nodeNameChangesEnabled = enabled;\n', '    }\n', '    \n', '    /**\n', '    * @dev validates a node to enable/disable claiming of rewards (Callable by owner only)\n', '    */\n', '    function validateNode(uint256 nodeId, bool isValid) onlyOwner external {\n', '        _nodeValid[nodeId] = isValid;\n', '    }\n', '    \n', '    /**\n', '    * @dev sets the reward multiplier for a token (Callable by owner only)\n', '    */\n', '    function setTokenRewardMultiplier(uint256 tokenId, uint256 newNum, uint256 newDen) onlyOwner external {\n', '        _tokenRewardMultiplierNum[tokenId] = newNum;\n', '        _tokenRewardMultiplierDen[tokenId] = newDen;\n', '    }\n', '    \n', '     /**\n', '     * @dev Returns the reward multiplier (numerator and denominator) for a given tokenId\n', '     */\n', '    function tokenRewardMultiplier(uint256 tokenId) external view override returns (uint256, uint256) {\n', '        uint256 num = _tokenRewardMultiplierNum[tokenId];\n', '        uint256 den = _tokenRewardMultiplierDen[tokenId];\n', '        return (num, den);\n', '    }\n', '    \n', '    /**\n', '    * @dev validates a node to enable claiming of rewards (Callable by owner only)\n', '    */\n', '    function testTokenRewardMultiplier(uint256 newNum, uint256 newDen) public pure override returns (uint256) {\n', '        uint256 ONE = 1 * (10 ** 18);\n', '        uint256 TEN = ONE * 10;\n', '        uint256 newRate = (ONE.mul(newNum)).div(newDen);\n', '        require(newRate != ONE, "emission will not change");\n', '        require(newRate > ONE, "emission will decrease");\n', '        require(newRate < TEN, "emission will increase over 10x");\n', '        return newRate;\n', '    }\n', '    \n', '    /**\n', '     * @dev Returns stage of reveal for a Spirit\n', '     * 0 - token is not yet minted\n', '     */\n', '    function revealStageByIndex(uint256 index) public view override returns (uint256) {\n', '        uint256 mintTime = _mintedTimestamp[index];\n', '        require(mintTime > 0, "Mint time must be set and greater than 0");\n', '        require(mintTime <= block.timestamp, "Mint time cannot be greater than current time");\n', '        \n', '        if(mintTime < DISTRIBUTION_TIMESTAMP) {\n', '            mintTime = DISTRIBUTION_TIMESTAMP;\n', '        }\n', '        \n', '        if(block.timestamp <= mintTime) {\n', '            // not passed distribution period - no reveal stages\n', '            return 1;\n', '        }\n', '        \n', '        uint256 elapsed = block.timestamp.sub(mintTime);\n', '        \n', '        uint unlocked = 1;\n', '        for(uint i = 1; i < 4; i++) {\n', '            if(elapsed >= i.mul(REVEAL_STAGE_INTERVAL)) {\n', '                unlocked++;\n', '            }\n', '            else {\n', '                break;\n', '            }\n', '        }\n', '        return unlocked;\n', '    }\n', '\n', '    /**\n', '     * @dev Gets current NFT Price\n', '     */\n', '    function getNFTPrice() public view returns (uint256) {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started");\n', '        \n', '        uint currentSupply = totalSupply();\n', '\n', '        if (currentSupply >= 6000) {\n', '            return price_bracket_3;      // 6000 - 7777\n', '        } \n', '        else if (currentSupply >= 2000) {\n', '            return price_bracket_2;      // 2000 - 5999\n', '        } \n', '        else {\n', '            return price_bracket_1;      // 0 - 1999\n', '        }\n', '    }\n', '\n', '    /**\n', '    * @dev Mints Spirits\n', '    */\n', '    function mintNFT(uint256 numberOfNfts) public payable {\n', '        require(block.timestamp >= SALE_START_TIMESTAMP, "Sale has not started");\n', '        require(!_salePaused, "Sale has been paused");\n', '        require(totalSupply() < MAX_NFT_SUPPLY, "Sale has already ended");\n', '        require(numberOfNfts > 0, "numberOfNfts cannot be 0");\n', '        require(numberOfNfts <= 25, "You may not buy more than 25 NFTs at once");\n', '        require(totalSupply().add(numberOfNfts) <= MAX_NFT_SUPPLY, "Exceeds MAX_NFT_SUPPLY");\n', '        require(getNFTPrice().mul(numberOfNfts) == msg.value, "Ether value sent is not correct");\n', '\n', '        for (uint i = 0; i < numberOfNfts; i++) {\n', '            uint mintIndex = totalSupply();\n', '            /* final supply check */\n', '            require(mintIndex < MAX_NFT_SUPPLY, "Sale has already ended");\n', '            _mintedTimestamp[mintIndex] = block.timestamp;\n', '            _tokenRewardMultiplierNum[mintIndex] = 1;\n', '            _tokenRewardMultiplierDen[mintIndex] = 1;\n', '            _safeMint(msg.sender, mintIndex);\n', '        }\n', '\n', '        /**\n', '        * Source of randomness\n', '        */\n', '        if (startingIndexBlock == 0 && (totalSupply() >= MAX_NFT_SUPPLY || block.timestamp >= DISTRIBUTION_TIMESTAMP)) {\n', '            startingIndexBlock = block.number;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Finalize starting index\n', '     */\n', '    function finalizeStartingIndex() public {\n', '        require(startingIndex == 0, "Starting index is already set");\n', '        \n', '        if(startingIndexBlock == 0) {\n', '            require(block.timestamp >= DISTRIBUTION_TIMESTAMP, "Distribution period must be over to set the startingIndexBlock");\n', '            startingIndexBlock = block.number;\n', '        }\n', '        require(startingIndexBlock != 0, "Starting index block must be set");\n', '        \n', '        uint256 randomHash = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty)));\n', '        \n', '        startingIndex = randomHash % MAX_NFT_SUPPLY;\n', '        // Prevent default sequence / overflow\n', '        if (startingIndex == 0 || startingIndex >= MAX_NFT_SUPPLY) {\n', '            startingIndex = 1;\n', '        } \n', '    }\n', '\n', '    /**\n', '     * @dev Changes the username for a user\n', '     */\n', '    function changeUsername(string memory newName) public {\n', '        address sender = _msgSender();\n', '        require(validateName(newName) == true, "Not a valid new name");\n', '        require(sha256(bytes(newName)) != sha256(bytes(_usernames[sender])), "New username is same as the current one");\n', '        require(isUserNameReserved(newName) == false, "Username already reserved");\n', '\n', '        ISPT(_sptAddress).transferFrom(msg.sender, _sptAddress, usernameChangePrice);\n', '        // If already named, dereserve old name\n', '        if (bytes(_usernames[sender]).length > 0) {\n', '            toggleReserveUsername(_usernames[sender], false);\n', '        }\n', '        toggleReserveUsername(newName, true);\n', '        _usernames[sender] = newName;\n', '        emit UsernameChange(sender, newName);\n', '    }\n', '    \n', '    /**\n', '     * @dev Changes the name for CryptoSpirits tokenId\n', '     */\n', '    function changeNodeName(uint256 nodeId, string memory newName) public {\n', '        require(nodeNameChangesEnabled == true, "Node name changes are currently disabled");\n', '        address owner = ownerOfNode(nodeId);\n', '        require(_msgSender() == owner, "ERC721: caller is not the node owner");\n', '        require(validateName(newName) == true, "Not a valid new name");\n', '        require(sha256(bytes(newName)) != sha256(bytes(_nodeNames[nodeId])), "New name is same as the current one");\n', '        require(isNodeNameReserved(newName) == false, "Name already reserved");\n', '\n', '        ISPT(_sptAddress).transferFrom(msg.sender, _sptAddress, nodenameChangePrice);\n', '        // If already named, dereserve old name\n', '        if (bytes(_nodeNames[nodeId]).length > 0) {\n', '            toggleReserveNodeName(_nodeNames[nodeId], false);\n', '        }\n', '        toggleReserveNodeName(newName, true);\n', '        _nodeNames[nodeId] = newName;\n', '        emit NodeNameChange(nodeId, newName);\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw ether from this contract (Callable by owner)\n', '    */\n', '    function withdraw() onlyOwner public {\n', '        uint balance = address(this).balance;\n', '        msg.sender.transfer(balance);\n', '    }\n', '    \n', '    /**\n', '     * @dev Withdraw from the SPT contract (Callable by owner)\n', '     * Note: Only spent SPTs (i.e. from name changes) are withdrawable here\n', '    */\n', '    function withdrawSPT() onlyOwner public {\n', '        uint balance = ISPT(_sptAddress).balanceOf(_sptAddress);\n', '        ISPT(_sptAddress).transferFrom(_sptAddress, msg.sender, balance);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-approve}.\n', '     */\n', '    function approve(address to, uint256 tokenId) public virtual override {\n', '        address owner = ownerOf(tokenId);\n', '        require(to != owner, "ERC721: approval to current owner");\n', '\n', '        require(_msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n', '            "ERC721: approve caller is not owner nor approved for all"\n', '        );\n', '\n', '        _approve(to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-getApproved}.\n', '     */\n', '    function getApproved(uint256 tokenId) public view override returns (address) {\n', '        require(_exists(tokenId), "ERC721: approved query for nonexistent token");\n', '\n', '        return _tokenApprovals[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(operator != _msgSender(), "ERC721: approve to caller");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address owner, address operator) public view override returns (bool) {\n', '        return _operatorApprovals[owner][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-transferFrom}.\n', '     */\n', '    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        //solhint-disable-next-line max-line-length\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '\n', '        _transfer(from, to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\n', '        safeTransferFrom(from, to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC721-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory _data) public virtual override {\n', '        require(_isApprovedOrOwner(_msgSender(), tokenId), "ERC721: transfer caller is not owner nor approved");\n', '        _safeTransfer(from, to, tokenId, _data);\n', '    }\n', '\n', '    /**\n', '     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n', '     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n', '     *\n', '     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n', '     *\n', '     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n', '     * implement alternative mechanisms to perform token transfer, such as signature-based.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must exist and be owned by `from`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _transfer(from, to, tokenId);\n', '        require(_checkOnERC721Received(from, to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `tokenId` exists.\n', '     *\n', '     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n', '     *\n', '     * Tokens start existing when they are minted (`_mint`),\n', '     * and stop existing when they are burned (`_burn`).\n', '     */\n', '    function _exists(uint256 tokenId) internal view returns (bool) {\n', '        return _tokenOwners.contains(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     */\n', '    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view returns (bool) {\n', '        require(_exists(tokenId), "ERC721: operator query for nonexistent token");\n', '        address owner = ownerOf(tokenId);\n', '        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n', '    }\n', '\n', '    /**\n', '     * @dev Safely mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * Requirements:\n', '     d*\n', '     * - `tokenId` must not exist.\n', '     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId) internal virtual {\n', '        _safeMint(to, tokenId, "");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n', '     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n', '     */\n', '    function _safeMint(address to, uint256 tokenId, bytes memory _data) internal virtual {\n', '        _mint(to, tokenId);\n', '        require(_checkOnERC721Received(address(0), to, tokenId, _data), "ERC721: transfer to non ERC721Receiver implementer");\n', '    }\n', '\n', '    /**\n', '     * @dev Mints `tokenId` and transfers it to `to`.\n', '     *\n', '     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must not exist.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _mint(address to, uint256 tokenId) internal virtual {\n', '        require(to != address(0), "ERC721: mint to the zero address");\n', '        require(!_exists(tokenId), "ERC721: token already minted");\n', '\n', '        _beforeTokenTransfer(address(0), to, tokenId);\n', '\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(address(0), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `tokenId`.\n', '     * The approval is cleared when the token is burned.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `tokenId` must exist.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _burn(uint256 tokenId) internal virtual {\n', '        address owner = ownerOf(tokenId);\n', '\n', '        _beforeTokenTransfer(owner, address(0), tokenId);\n', '\n', '        // Clear approvals\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[owner].remove(tokenId);\n', '\n', '        _tokenOwners.remove(tokenId);\n', '\n', '        emit Transfer(owner, address(0), tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers `tokenId` from `from` to `to`.\n', '     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     * - `tokenId` token must be owned by `from`.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function _transfer(address from, address to, uint256 tokenId) internal virtual {\n', '        require(ownerOf(tokenId) == from, "ERC721: transfer of token that is not own");\n', '        require(to != address(0), "ERC721: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(from, to, tokenId);\n', '\n', '        // Clear approvals from the previous owner\n', '        _approve(address(0), tokenId);\n', '\n', '        _holderTokens[from].remove(tokenId);\n', '        _holderTokens[to].add(tokenId);\n', '\n', '        _tokenOwners.set(tokenId, to);\n', '\n', '        emit Transfer(from, to, tokenId);\n', '    }\n', '\n', '\n', '    /**\n', '     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n', '     * The call is not executed if the target address is not a contract.\n', '     *\n', '     * @param from address representing the previous owner of the given token ID\n', '     * @param to target address that will receive the tokens\n', '     * @param tokenId uint256 ID of the token to be transferred\n', '     * @param _data bytes optional data to send along with the call\n', '     * @return bool whether the call correctly returned the expected magic value\n', '     */\n', '    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory _data)\n', '        private returns (bool)\n', '    {\n', '        if (!to.isContract()) {\n', '            return true;\n', '        }\n', '        bytes memory returndata = to.functionCall(abi.encodeWithSelector(\n', '            IERC721Receiver(to).onERC721Received.selector,\n', '            _msgSender(),\n', '            from,\n', '            tokenId,\n', '            _data\n', '        ), "ERC721: transfer to non ERC721Receiver implementer");\n', '        bytes4 retval = abi.decode(returndata, (bytes4));\n', '        return (retval == _ERC721_RECEIVED);\n', '    }\n', '\n', '    function _approve(address to, uint256 tokenId) private {\n', '        _tokenApprovals[tokenId] = to;\n', '        emit Approval(ownerOf(tokenId), to, tokenId);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n", '     * transferred to `to`.\n', '     * - When `from` is zero, `tokenId` will be minted for `to`.\n', "     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n", '     * - `from` cannot be the zero address.\n', '     * - `to` cannot be the zero address.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal virtual {\n', '        uint256 nodeId = nodeIdFromTokenId(tokenId);\n', '        if(nodeId > 0 && nodeActive(nodeId) && to != ownerOfNode(nodeId)) {\n', '            // unregister any active nodes this token is linked to\n', '            _unregisterNode(nodeId, from);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Reserves the name if isReserve is set to true, de-reserves if set to false\n', '     */\n', '    function toggleReserveUsername(string memory str, bool isReserve) internal {\n', '        _usernameReserved[toLower(str)] = isReserve;\n', '    }\n', '    \n', '    /**\n', '     * @dev Reserves the name if isReserve is set to true, de-reserves if set to false\n', '     */\n', '    function toggleReserveNodeName(string memory str, bool isReserve) internal {\n', '        _nodeNameReserved[toLower(str)] = isReserve;\n', '    }\n', '\n', '    /**\n', '     * @dev Check if the name string is valid (Alphanumeric and spaces without leading or trailing space)\n', '     */\n', '    function validateName(string memory str) public pure returns (bool){\n', '        bytes memory b = bytes(str);\n', '        if(b.length < 1) return false;\n', '        if(b.length > 16) return false; // Cannot be longer than 16 characters\n', '        if(b[0] == 0x20) return false; // Leading space\n', '        if (b[b.length - 1] == 0x20) return false; // Trailing space\n', '\n', '        bytes1 lastChar = b[0];\n', '\n', '        for(uint i; i<b.length; i++){\n', '            bytes1 char = b[i];\n', '\n', '            if (char == 0x20 || lastChar == 0x20) return false; // Cannot contain spaces\n', '\n', '            if(\n', '                !(char >= 0x30 && char <= 0x39) && //9-0\n', '                !(char >= 0x41 && char <= 0x5A) && //A-Z\n', '                !(char >= 0x61 && char <= 0x7A) //a-z\n', '            )\n', '                return false;\n', '\n', '            lastChar = char;\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Converts the string to lowercase\n', '     */\n', '    function toLower(string memory str) public pure returns (string memory){\n', '        bytes memory bStr = bytes(str);\n', '        bytes memory bLower = new bytes(bStr.length);\n', '        for (uint i = 0; i < bStr.length; i++) {\n', '            // Uppercase character\n', '            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\n', '                bLower[i] = bytes1(uint8(bStr[i]) + 32);\n', '            } else {\n', '                bLower[i] = bStr[i];\n', '            }\n', '        }\n', '        return string(bLower);\n', '    }\n', '}']