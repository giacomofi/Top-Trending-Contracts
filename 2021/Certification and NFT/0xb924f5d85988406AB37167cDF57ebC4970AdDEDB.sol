['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-15\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library SafeMath {\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '        \n', '}\n', '\n', 'interface ItokenRecipient { \n', '    function receiveApproval(address _from, uint256 _value, address _token, bytes calldata _extraData) external returns (bool); \n', '}\n', '\n', 'interface IERC20Token {\n', '    function totalSupply() external view returns (uint256 supply);\n', '    function transfer(address _to, uint256 _value) external  returns (bool success);\n', '    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '}\n', '\n', 'contract Ownable {\n', '\n', '    address private owner;\n', '    \n', '    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n', '    \n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Caller is not owner");\n', '        _;\n', '    }\n', '\n', '    constructor() {\n', "        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n", '        emit OwnerSet(address(0), owner);\n', '    }\n', '\n', '\n', '    function changeOwner(address newOwner) public onlyOwner {\n', '        emit OwnerSet(owner, newOwner);\n', '        owner = newOwner;\n', '    }\n', '\n', '    function getOwner() external view returns (address) {\n', '        return owner;\n', '    }\n', '}\n', '\n', 'contract StandardToken is IERC20Token {\n', '    \n', '    using SafeMath for uint256;\n', '    mapping (address => uint256) public balances;\n', '    mapping (address => mapping (address => uint256)) public allowed;\n', '    uint256 public _totalSupply;\n', '    \n', '    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '    \n', '    function totalSupply() override public view returns (uint256 supply) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function transfer(address _to, uint256 _value) override virtual public returns (bool success) {\n', '        require(_to != address(0x0), "Use burn function instead");                              \n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '\t\trequire(balances[msg.sender] >= _value, "Not enough balance");\n', '\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value) override virtual public returns (bool success) {\n', '        require(_to != address(0x0), "Use burn function instead");                               \n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '\t\trequire(balances[_from] >= _value, "Not enough balance");\n', '\t\trequire(allowed[_from][msg.sender] >= _value, "You need to increase allowance");\n', '\t\tbalances[_from] = balances[_from].sub(_value);\n', '\t\tbalances[_to] = balances[_to].add(_value);\n', '\t\temit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) override public view returns (uint256 balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint256 _value) override public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) override public view returns (uint256 remaining) {\n', '        return allowed[_owner][_spender];\n', '    }\n', '    \n', '}\n', '\n', 'contract POLCToken is Ownable, StandardToken {\n', '\n', '    using SafeMath for uint256;\n', '    string public name = "Polka City";\n', '    uint8 public decimals = 18;\n', '    string public symbol = "POLC";\n', '    mapping (address => bool) public lockedWallets;\n', '\n', '    struct TimeLock {\n', '        uint firstRelease;\n', '        uint totalAmount;\n', '        uint lockedBalance;\n', '    }\n', '    \n', '    mapping (address => TimeLock) public timeLocks; \n', '    \n', '    address public platformWallet;\n', '    bool public limitContracts;\n', '    mapping (address => bool) public contractsWhiteList;\n', '    mapping (address => uint) public lastTXBlock;\n', '    uint public walletUnlockDate;\n', '    event Burn(address indexed from, uint256 value);\n', '\n', '\n', '// token sale\n', '    address payable public salesWallet;\n', '\n', '    uint256 public soldOnPSale;\n', '    uint256 public soldOnCSale;\n', '    address private marketingWallet;\n', '    uint256 public PRIVATESALE_START = block.timestamp;\n', '    uint256 public constant PRIVATESALE_END = 1613951999;\n', '    uint256 public constant CROWDSALE_START = 1614448800;\n', '    uint256 public constant CROWDSALE_END = 1615766399;\n', '    uint256 public constant PSALE_WEI_FACTOR = 20000;\n', '    uint256 public constant CSALE_WEI_FACTOR = 15000;\n', '    uint256 public constant PSALE_HARDCAP = 2500000 ether;\n', '    uint256 public constant CSALE_HARDCAP = 7500000 ether;\n', '    event TokensSold(address indexed to, uint256 amount);\n', '    \n', '    constructor() {\n', '        platformWallet = 0x2524e7e53E655cA94986f6f445a74A4796A42289;\n', '        _totalSupply = 250000000 ether;\n', '        walletUnlockDate = CROWDSALE_END;\n', '\n', '        // Marketing wallet - 5000000 tokens, (4500000 Locked - progressive release)\n', '        marketingWallet = 0x09911dD354141452a21eB69527B510a8941CaaFF;\n', '        balances[marketingWallet] = 5000000 ether;\n', '        timeLocks[marketingWallet] = TimeLock((PRIVATESALE_END - 30 days), 4000000 ether, 4000000 ether);\n', '        emit Transfer(address(0x0), marketingWallet, balances[marketingWallet]);\n', '        \n', '        // Team wallet - 10000000 tokens (Locked - progressive release)\n', '        address team = 0x3A23D3e9BE80A804fceB418b451E3100d9264F7E;\n', '        balances[team] = 10000000 ether;\n', '        timeLocks[team] = TimeLock((PRIVATESALE_START + 180 days), 10000000 ether, 10000000 ether);\n', '        \n', '        emit Transfer(address(0x0), team, balances[team]);\n', '        \n', '        // Uniswap and exchanges - 26000000 tokens locked until crowdsale ends\n', '        address exchanges = 0x6B65ddFe7f46594181A05a121Ee93FcF71e586bC;  \n', '        balances[exchanges] = 25000000 ether;\n', '        emit Transfer(address(0x0), exchanges, balances[exchanges]);\n', '        lockedWallets[exchanges]  = true;\n', '        \n', '\n', '        // Platform tokens\n', '        balances[platformWallet] = 200000000 ether;\n', '        emit Transfer(address(0x0), platformWallet, (200000000 ether));\n', '        \n', '        // Sales wallet, private and crowdsale balances\n', '        salesWallet = payable(0x8F8A97B50A325499Eb7DD72956cCd307E2B8d6a4);\n', '        balances[salesWallet] = 10000000 ether;\n', '        emit Transfer(address(0x0), salesWallet, balances[salesWallet]);\n', '\n', '    }\n', '    \n', '    function transfer(address _to, uint256 _value) override public returns (bool success) {\n', '        require(canTransfer(msg.sender));\n', '        require(_value <= (balances[msg.sender] - timeLocks[msg.sender].lockedBalance));\n', '        return super.transfer(_to, _value);\n', '    }\n', '    \n', '    function transferFrom(address _from, address _to, uint256 _value) override public returns (bool success) {\n', '        require(canTransfer(_from));\n', '        require(_value <= (balances[_from] - timeLocks[msg.sender].lockedBalance));\n', '        return super.transferFrom(_from, _to, _value);\n', '    }\n', '    \n', '    function burn(uint256 _value) public returns (bool success) {\n', '        require(balances[msg.sender] >= _value, "Not enough balance");\n', '\t\trequire(_value >= 0, "Invalid amount"); \n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        _totalSupply = _totalSupply.sub(_value);\n', '        emit Burn(msg.sender, _value);\n', '        return true;\n', '    }\n', '    \n', '    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        ItokenRecipient recipient = ItokenRecipient(_spender);\n', '        require(recipient.receiveApproval(msg.sender, _value, address(this), _extraData));\n', '        return true;\n', '    }\n', '    \n', '\n', '    function releaseTokens(address _account) public {\n', '        uint steps = (block.timestamp - timeLocks[_account].firstRelease) / (30 days);\n', '        if (steps >=20) {\n', '            timeLocks[_account].lockedBalance = 0;\n', '        } else {\n', '            timeLocks[_account].lockedBalance = timeLocks[_account].totalAmount - ((timeLocks[_account].totalAmount/20) * steps);\n', '        }\n', '    }\n', '    \n', '    function canTransfer(address _wallet) private returns (bool) {\n', '        require(checkTransferLimit() == true);\n', '        if (lockedWallets[_wallet] == true) {\n', '            if (block.timestamp > walletUnlockDate) {\n', '                lockedWallets[_wallet] = false;\n', '                return true;\n', '            } else {\n', '                return false;\n', '            }\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function isContract(address account) internal view returns (bool) {\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '    \n', '    function checkTransferLimit() internal returns (bool txAllowed) {\n', '        address _caller = msg.sender;\n', '        if (isContract(_caller)) {\n', '            if (limitContracts == true && contractsWhiteList[_caller] == false) {\n', '                if (lastTXBlock[_caller] == block.number) {\n', '                    return false;\n', '                } else {\n', '                    lastTXBlock[_caller] = block.number;\n', '                    return true;\n', '                }\n', '            } else {\n', '                return true;\n', '            }\n', '        } else {\n', '            return true;\n', '        }\n', '    }\n', '    \n', '    function setLimitContracts(bool _limit) public onlyOwner {\n', '        limitContracts = _limit;\n', '    }\n', '    \n', '    function includeWhiteList(address _contractAddress) public onlyOwner {\n', '        contractsWhiteList[_contractAddress] = true;\n', '    }\n', '    \n', '    function removeWhiteList(address _contractAddress) public onlyOwner {\n', '        contractsWhiteList[_contractAddress] = false;\n', '    }\n', '    \n', '    function isWalletLocked(address _wallet) public view returns (bool isLocked) {\n', '        return lockedWallets[_wallet];\n', '    }\n', '    \n', '    function setPlatformWallet(address _platformWallet) public onlyOwner {\n', '        platformWallet = payable(_platformWallet);\n', '    }\n', '\n', '    function getLockedBalance(address _wallet) public view returns (uint256 lockedBalance) {\n', '        return timeLocks[_wallet].lockedBalance;\n', '    }\n', '    \n', '    // token sale\n', '\n', '    function buy() public payable {\n', '        require(((block.timestamp > PRIVATESALE_START) && (block.timestamp < PRIVATESALE_END)) || ((block.timestamp > CROWDSALE_START) && (block.timestamp < CROWDSALE_END)), "Contract is not selling tokens");\n', '        uint weiValue = msg.value;\n', '        require(weiValue >= (5 * (10 ** 16)));\n', '        bool lockAccount = false;\n', '        uint amount = 0;\n', '        if ((block.timestamp > PRIVATESALE_START) && (block.timestamp < PRIVATESALE_END)) {\n', '            amount = PSALE_WEI_FACTOR * weiValue;\n', '            soldOnPSale += amount;\n', '            require((soldOnPSale) <= (PSALE_HARDCAP), "That quantity is not available");\n', '        } else {\n', '            amount = CSALE_WEI_FACTOR * weiValue;\n', '            soldOnCSale += amount;\n', '            require((soldOnCSale) <= (CSALE_HARDCAP), "That quantity is not available");\n', '            lockAccount = true;\n', '        }\n', '\n', '        balances[salesWallet] = balances[salesWallet].sub(amount);\n', '        balances[msg.sender] = balances[msg.sender].add(amount);\n', '        if ( lockAccount == true) lockedWallets[msg.sender] = true;\n', '        require(salesWallet.send(weiValue));\n', '        emit Transfer(salesWallet, msg.sender, amount);\n', '        if (CSALE_HARDCAP == soldOnCSale && block.timestamp < 1615140000) {  // If hardcap is reached before 2021/03/07 18:00, change unlock dates\n', '            timeLocks[marketingWallet].firstRelease = block.timestamp - 30 days;\n', '        }\n', '\n', '    }\n', '    \n', '    function burnUnsold() public onlyOwner {\n', '        require(block.timestamp > CROWDSALE_END);\n', '        uint currentBalance = balances[salesWallet];\n', '        balances[salesWallet] = 0;\n', '        _totalSupply = _totalSupply.sub(currentBalance);\n', '        emit Burn(salesWallet, currentBalance);\n', '    }\n', '}']