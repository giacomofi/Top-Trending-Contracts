['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-05\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-03-28\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    function transferFrom(address from, address to, uint256 value) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'library SafeMath {\n', '    int256 constant private INT256_MIN = -2**255;\n', '\n', '    /**\n', '    * @dev Multiplies two unsigned integers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Multiplies two signed integers, reverts on overflow.\n', '    */\n', '    function mul(int256 a, int256 b) internal pure returns (int256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n', '\n', '        int256 c = a * b;\n', '        require(c / a == b);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(int256 a, int256 b) internal pure returns (int256) {\n', '        require(b != 0); // Solidity only automatically asserts when dividing by 0\n', '        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n', '\n', '        int256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two signed integers, reverts on overflow.\n', '    */\n', '    function sub(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a - b;\n', '        require((b >= 0 && c <= a) || (b < 0 && c > a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two unsigned integers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two signed integers, reverts on overflow.\n', '    */\n', '    function add(int256 a, int256 b) internal pure returns (int256) {\n', '        int256 c = a + b;\n', '        require((b >= 0 && c >= a) || (b < 0 && c < a));\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        require(token.transfer(to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        require(token.transferFrom(from, to, value));\n', '    }\n', '\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        require((value == 0) || (token.allowance(msg.sender, spender) == 0));\n', '        require(token.approve(spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value);\n', '        require(token.approve(spender, newAllowance));\n', '    }\n', '}\n', '\n', '\n', '\n', '\n', 'contract Crowdsale {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    \n', '    address payable private _wallet = 0x5cDC8AC3e5aEA29cDf7fa62ac8Dd5dE475F7384a;\n', '    address payable private ceo = 0x5cDC8AC3e5aEA29cDf7fa62ac8Dd5dE475F7384a;\n', '    address payable private fas = 0x2F7dCf9414A1D1f2E83f36a828a00DE48F962a1c;\n', '    address payable private tresor = 0x122611B0AffBaFAB0fa9c68c790194517633d2eB;\n', '    address payable private dev = 0x80D45fC9fA18213b9d4f6A70641012Bc1c7CFaB1;\n', '    address payable private staking = 0x81E690Ab07a12EF57C17979E90eb34446754a751;\n', '\n', '    uint256 public totalBNBCollected;\n', '    mapping(address => uint256) public investments;\n', '    mapping(address => bool) public exist;\n', '    address payable [] public investors;\n', '    uint256 public target = 500000000000000000000000;\n', '\n', '    IERC20 private _token;\n', '\n', '    uint256 private _rate;\n', '\n', '    uint256 private _weiRaised;\n', '    \n', '    address owner;\n', '    \n', '\n', '    event TokensPurchased(address indexed purchaser, uint256 value);\n', '\n', '    constructor () public {\n', '        _rate = 1667;\n', '        _wallet = msg.sender;\n', '        _token = IERC20(0x578ADce0eB5A6E5Df371E5089214e0880Ae62b82);\n', '        owner = msg.sender;\n', '    }\n', 'modifier onlyOwner(){\n', "    require(msg.sender == owner, 'only Owner can run this function');\n", '    _;\n', '}\n', '    receive() external payable {\n', '        buyTokens();\n', '    }\n', '\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    function wallet() public view returns (address) {\n', '        return _wallet;\n', '    }\n', '\n', '    function rate() public view returns (uint256) {\n', '        return _rate;\n', '    }\n', '    function remainingTokens() public view returns (uint256) {\n', '        return _token.balanceOf(address(this));\n', '    }\n', '\n', '    function weiRaised() public view returns (uint256) {\n', '        return _weiRaised;\n', '    }\n', '    function changeRate(uint256 price) public onlyOwner() returns(bool success) {\n', '        _rate = price;\n', '        return success;\n', '    }\n', '    \n', '\n', '    function buyTokens() public payable {\n', '       // require(msg.value >= 0.5 ether && msg.value <= 10 ether);\n', '        address payable sender = msg.sender;\n', '        uint256 weiAmount = (msg.value);\n', '        if(!exist[sender]){\n', '            investors.push(sender);\n', '            exist[sender] = true;\n', '        }\n', '        totalBNBCollected = totalBNBCollected + msg.value;\n', '        investments[sender] = investments[sender] + msg.value;\n', '\n', '        // calculate token amount to be created\n', '        // update state\n', '        _weiRaised = _weiRaised.add(weiAmount);\n', '\n', '        emit TokensPurchased(msg.sender, weiAmount);\n', '\n', '    }\n', '\n', '    function _deliverTokens(address sender, uint256 tokenAmount) internal {\n', '        _token.safeTransfer(sender, tokenAmount);\n', '    }\n', '\n', '    \n', '    function _getTokenAmount(uint256 weiAmount) internal view returns (uint256) {\n', '        return weiAmount.mul(_rate);\n', '    }\n', '    \n', '    function endIco() public onlyOwner{\n', '        if(totalBNBCollected >= target){\n', '            for(uint256 i = 0; i < investors.length; i++){\n', '                address investor = investors[i];\n', '                uint256 investment = investments[investor];\n', '                uint256 numberOfTokens = _getTokenAmount(investment);\n', '                delete investors[i];\n', '                investments[investor] = 0;\n', '                exist[investor] = false;\n', '                totalBNBCollected = 0;\n', '                _token.transfer(investor, numberOfTokens);\n', '            }\n', '            uint256 balance = address(this).balance;\n', '            ceo.transfer((balance.div(100)).mul(10));\n', '            fas.transfer((balance.div(100)).mul(10));\n', '            dev.transfer((balance.div(100)).mul(40));\n', '            tresor.transfer((balance.div(100)).mul(30));\n', '            staking.transfer((balance.div(100)).mul(10));\n', '            //.transfer(_address, remainingTokens());\n', '            return;\n', '            \n', '        }\n', '        for(uint256 j =0; j < investors.length; j++){\n', '             address payable investor = investors[j];\n', '            uint256 investment = investments[investor];\n', '            investor.transfer(investment);\n', '            delete investors[j];\n', '            investments[investor] = 0;\n', '            exist[investor] = false;\n', '            totalBNBCollected = 0;\n', '        }\n', '        \n', '    }\n', '    \n', '    function changeTarget(uint256 _target) external onlyOwner{\n', '        target = _target;\n', '    }\n', '    function getTokens() external onlyOwner returns(bool){\n', '        _token.transfer(_wallet, remainingTokens());\n', '        return true;\n', '    }\n', '}']