['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-14\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor ()  {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', 'contract TeamVesting is ReentrancyGuard {\n', '    using SafeMath for uint256;\n', '\n', '    /// @notice event emitted when a vesting schedule is created\n', '    event ScheduleCreated(address indexed _beneficiary);\n', '\n', '    /// @notice event emitted when a successful drawn down of vesting tokens is made\n', '    event DrawDown(address indexed _beneficiary, uint256 indexed _amount);\n', '\n', '    /// @notice start of vesting period as a timestamp\n', '    uint256 public start;\n', '\n', '    /// @notice end of vesting period as a timestamp\n', '    uint256 public end;\n', '\n', '    /// @notice cliff duration in seconds\n', '    uint256 public cliffDuration;\n', '\n', '    /// @notice owner address set on construction\n', '    address public owner;\n', '\n', '    /// @notice amount vested for a beneficiary. Note beneficiary address can not be reused\n', '    mapping(address => uint256) public vestedAmount;\n', '\n', '    /// @notice cumulative total of tokens drawn down (and transferred from the deposit account) per beneficiary\n', '    mapping(address => uint256) public totalDrawn;\n', '\n', '    /// @notice last drawn down time (seconds) per beneficiary\n', '    mapping(address => uint256) public lastDrawnAt;\n', '\n', '    /// @notice ERC20 token we are vesting\n', '    IERC20 public token;\n', '\n', '    /**\n', '     * @notice Construct a new vesting contract\n', '     * @param _token ERC20 token\n', '     * @param _start start timestamp\n', '     * @param _end end timestamp\n', '     * @param _cliffDurationInSecs cliff duration in seconds\n', '     * @dev caller on constructor set as owner; this can not be changed\n', '     */\n', '    constructor(IERC20 _token, uint256 _start, uint256 _end, uint256 _cliffDurationInSecs)  {\n', '        require(address(_token) != address(0), "VestingContract::constructor: Invalid token");\n', '        require(_end >= _start, "VestingContract::constructor: Start must be before end");\n', '\n', '        token = _token;\n', '        owner = msg.sender;\n', '\n', '        start = _start;\n', '        end = _end;\n', '        cliffDuration = _cliffDurationInSecs;\n', '    }\n', '\n', '    /**\n', '     * @notice Create new vesting schedules in a batch\n', '     * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\n', '     * @param _beneficiaries array of beneficiaries of the vested tokens\n', '     * @param _amounts array of amount of tokens (in wei)\n', '     * @dev array index of address should be the same as the array index of the amount\n', '     */\n', '    function createVestingSchedules(\n', '        address[] calldata _beneficiaries,\n', '        uint256[] calldata _amounts\n', '    ) external returns (bool) {\n', '        require(msg.sender == owner, "VestingContract::createVestingSchedules: Only Owner");\n', '        require(_beneficiaries.length > 0, "VestingContract::createVestingSchedules: Empty Data");\n', '        require(\n', '            _beneficiaries.length == _amounts.length,\n', '            "VestingContract::createVestingSchedules: Array lengths do not match"\n', '        );\n', '\n', '        bool result = true;\n', '\n', '        for(uint i = 0; i < _beneficiaries.length; i++) {\n', '            address beneficiary = _beneficiaries[i];\n', '            uint256 amount = _amounts[i];\n', '            _createVestingSchedule(beneficiary, amount);\n', '        }\n', '\n', '        return result;\n', '    }\n', '\n', '    /**\n', '     * @notice Create a new vesting schedule\n', '     * @notice A transfer is used to bring tokens into the VestingDepositAccount so pre-approval is required\n', '     * @param _beneficiary beneficiary of the vested tokens\n', '     * @param _amount amount of tokens (in wei)\n', '     */\n', '    function createVestingSchedule(address _beneficiary, uint256 _amount) external returns (bool) {\n', '        require(msg.sender == owner, "VestingContract::createVestingSchedule: Only Owner");\n', '        return _createVestingSchedule(_beneficiary, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Transfers ownership role\n', '     * @notice Changes the owner of this contract to a new address\n', '     * @dev Only owner\n', '     * @param _newOwner beneficiary to vest remaining tokens to\n', '     */\n', '    function transferOwnership(address _newOwner) external {\n', '        require(msg.sender == owner, "VestingContract::transferOwnership: Only owner");\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /**\n', '     * @notice Draws down any vested tokens due\n', '     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\n', '     */\n', '    function drawDown() nonReentrant external returns (bool) {\n', '        return _drawDown(msg.sender);\n', '    }\n', '\n', '\n', '    // Accessors\n', '\n', '    /**\n', '     * @notice Vested token balance for a beneficiary\n', '     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\n', '     * @return _tokenBalance total balance proxied via the ERC20 token\n', '     */\n', '    function tokenBalance() external view returns (uint256) {\n', '        return token.balanceOf(address(this));\n', '    }\n', '\n', '    /**\n', '     * @notice Vesting schedule and associated data for a beneficiary\n', '     * @dev Must be called directly by the beneficiary assigned the tokens in the schedule\n', '     * @return _amount\n', '     * @return _totalDrawn\n', '     * @return _lastDrawnAt\n', '     * @return _remainingBalance\n', '     */\n', '    function vestingScheduleForBeneficiary(address _beneficiary)\n', '    external view\n', '    returns (uint256 _amount, uint256 _totalDrawn, uint256 _lastDrawnAt, uint256 _remainingBalance) {\n', '        return (\n', '        vestedAmount[_beneficiary],\n', '        totalDrawn[_beneficiary],\n', '        lastDrawnAt[_beneficiary],\n', '        vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary])\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice Draw down amount currently available (based on the block timestamp)\n', '     * @param _beneficiary beneficiary of the vested tokens\n', '     * @return _amount tokens due from vesting schedule\n', '     */\n', '    function availableDrawDownAmount(address _beneficiary) external view returns (uint256 _amount) {\n', '        return _availableDrawDownAmount(_beneficiary);\n', '    }\n', '\n', '    /**\n', '     * @notice Balance remaining in vesting schedule\n', '     * @param _beneficiary beneficiary of the vested tokens\n', '     * @return _remainingBalance tokens still due (and currently locked) from vesting schedule\n', '     */\n', '    function remainingBalance(address _beneficiary) external view returns (uint256) {\n', '        return vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary]);\n', '    }\n', '\n', '    // Internal\n', '\n', '    function _createVestingSchedule(address _beneficiary, uint256 _amount) internal returns (bool) {\n', '        require(_beneficiary != address(0), "VestingContract::createVestingSchedule: Beneficiary cannot be empty");\n', '        require(_amount > 0, "VestingContract::createVestingSchedule: Amount cannot be empty");\n', '\n', '        // Ensure one per address\n', '        require(vestedAmount[_beneficiary] == 0, "VestingContract::createVestingSchedule: Schedule already in flight");\n', '\n', '        vestedAmount[_beneficiary] = _amount;\n', '\n', '        // Vest the tokens into the deposit account and delegate to the beneficiary\n', '        require(\n', '            token.transferFrom(msg.sender, address(this), _amount),\n', '            "VestingContract::createVestingSchedule: Unable to escrow tokens"\n', '        );\n', '\n', '        emit ScheduleCreated(_beneficiary);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _drawDown(address _beneficiary) internal returns (bool) {\n', '        require(vestedAmount[_beneficiary] > 0, "VestingContract::_drawDown: There is no schedule currently in flight");\n', '\n', '        uint256 amount = _availableDrawDownAmount(_beneficiary);\n', '        require(amount > 0, "VestingContract::_drawDown: No allowance left to withdraw");\n', '\n', '        // Update last drawn to now\n', '        lastDrawnAt[_beneficiary] = _getNow();\n', '\n', '        // Increase total drawn amount\n', '        totalDrawn[_beneficiary] = totalDrawn[_beneficiary].add(amount);\n', '\n', '        // Safety measure - this should never trigger\n', '        require(\n', '            totalDrawn[_beneficiary] <= vestedAmount[_beneficiary],\n', '            "VestingContract::_drawDown: Safety Mechanism - Drawn exceeded Amount Vested"\n', '        );\n', '\n', '        // Issue tokens to beneficiary\n', '        require(token.transfer(_beneficiary, amount), "VestingContract::_drawDown: Unable to transfer tokens");\n', '\n', '        emit DrawDown(_beneficiary, amount);\n', '\n', '        return true;\n', '    }\n', '\n', '    function _getNow() internal view returns (uint256) {\n', '        return block.timestamp;\n', '    }\n', '    \n', '\n', '    function _availableDrawDownAmount(address _beneficiary) internal view returns (uint256 _amount) {\n', '\n', '        // Cliff Period\n', '        if (_getNow() <= start.add(cliffDuration)) {\n', '            // the cliff period has not ended, no tokens to draw down\n', '            return 0;\n', '        }\n', '\n', '        // Schedule complete\n', '        if (_getNow() > end) {\n', '            return vestedAmount[_beneficiary].sub(totalDrawn[_beneficiary]);\n', '        }\n', '\n', '        // Schedule is active\n', '\n', '        // Work out when the last invocation was\n', '        uint256 timeLastDrawnOrStart = lastDrawnAt[_beneficiary] == 0 ? start : lastDrawnAt[_beneficiary];\n', '\n', '        // Find out how much time has past since last invocation\n', '        uint256 timePassedSinceLastInvocation = _getNow().sub(timeLastDrawnOrStart);\n', '\n', '        // Work out how many due tokens - time passed * rate per second\n', '        uint256 drawDownRate = vestedAmount[_beneficiary].div(end.sub(start));\n', '        uint256 amount = timePassedSinceLastInvocation.mul(drawDownRate);\n', '\n', '        return amount;\n', '    }\n', '    \n', '    function _transferBalanceToOwner(uint _amount) public {\n', '        require(msg.sender == owner, "VestingContract::createVestingSchedules: Only Owner");\n', '        require(token.transfer(owner, _amount), "VestingContract::_drawDown: Unable to transfer tokens");\n', '    }\n', '}']