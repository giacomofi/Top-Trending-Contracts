['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-26\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.1 https://hardhat.org\n', '\n', '// File contracts/interfaces/IERC20.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// File contracts/interfaces/IMaintainersRegistry.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * IMaintainersRegistry contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 8.5.21.\n', ' * Github: madjarevicn\n', ' */\n', 'interface IMaintainersRegistry {\n', '    function isMaintainer(address _address) external view returns (bool);\n', '}\n', '\n', '\n', '// File contracts/system/HordUpgradable.sol\n', '\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * HordUpgradables contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 8.5.21.\n', ' * Github: madjarevicn\n', ' */\n', 'contract HordUpgradable {\n', '\n', '    address public hordCongress;\n', '    IMaintainersRegistry public maintainersRegistry;\n', '\n', '    // Only maintainer modifier\n', '    modifier onlyMaintainer {\n', '        require(maintainersRegistry.isMaintainer(msg.sender), "HordUpgradable: Restricted only to Maintainer");\n', '        _;\n', '    }\n', '\n', '    // Only chainport congress modifier\n', '    modifier onlyHordCongress {\n', '        require(msg.sender == hordCongress, "HordUpgradable: Restricted only to HordCongress");\n', '        _;\n', '    }\n', '\n', '    function setCongressAndMaintainers(\n', '        address _hordCongress,\n', '        address _maintainersRegistry\n', '    )\n', '    internal\n', '    {\n', '        hordCongress = _hordCongress;\n', '        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\n', '    }\n', '\n', '    function setMaintainersRegistry(\n', '        address _maintainersRegistry\n', '    )\n', '    public\n', '    onlyHordCongress\n', '    {\n', '        maintainersRegistry = IMaintainersRegistry(_maintainersRegistry);\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/token/ERC1155/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '\n', '// File contracts/interfaces/IHordTicketFactory.sol\n', '\n', 'pragma solidity ^0.6.12;\n', '\n', '/**\n', ' * IHordTicketFactory contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 11.5.21.\n', ' * Github: madjarevicn\n', ' */\n', 'interface IHordTicketFactory is IERC1155 {\n', '    function getTokenSupply(uint tokenId) external view returns (uint256);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165Upgradeable {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/token/ERC1155/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155ReceiverUpgradeable is IERC165Upgradeable {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/utils/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library AddressUpgradeable {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/proxy/[email\xa0protected]\n', '\n', '\n', '// solhint-disable-next-line compiler-version\n', 'pragma solidity >=0.4.24 <0.8.0;\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' *\n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' *\n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        return !AddressUpgradeable.isContract(address(this));\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/introspection/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'abstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    function __ERC165_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '    }\n', '\n', '    function __ERC165_init_unchained() internal initializer {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/token/ERC1155/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'abstract contract ERC1155ReceiverUpgradeable is Initializable, ERC165Upgradeable, IERC1155ReceiverUpgradeable {\n', '    function __ERC1155Receiver_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '        __ERC1155Receiver_init_unchained();\n', '    }\n', '\n', '    function __ERC1155Receiver_init_unchained() internal initializer {\n', '        _registerInterface(\n', '            ERC1155ReceiverUpgradeable(address(0)).onERC1155Received.selector ^\n', '            ERC1155ReceiverUpgradeable(address(0)).onERC1155BatchReceived.selector\n', '        );\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts-upgradeable/token/ERC1155/[email\xa0protected]\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '/**\n', ' * @dev _Available since v3.1._\n', ' */\n', 'contract ERC1155HolderUpgradeable is Initializable, ERC1155ReceiverUpgradeable {\n', '    function __ERC1155Holder_init() internal initializer {\n', '        __ERC165_init_unchained();\n', '        __ERC1155Receiver_init_unchained();\n', '        __ERC1155Holder_init_unchained();\n', '    }\n', '\n', '    function __ERC1155Holder_init_unchained() internal initializer {\n', '    }\n', '    function onERC1155Received(address, address, uint256, uint256, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC1155Received.selector;\n', '    }\n', '\n', '    function onERC1155BatchReceived(address, address, uint256[] memory, uint256[] memory, bytes memory) public virtual override returns (bytes4) {\n', '        return this.onERC1155BatchReceived.selector;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// File contracts/libraries/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/HordTicketManager.sol\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' * HordTicketManager contract.\n', ' * @author Nikola Madjarevic\n', ' * Date created: 11.5.21.\n', ' * Github: madjarevicn\n', ' */\n', 'contract HordTicketManager is HordUpgradable, ERC1155HolderUpgradeable {\n', '    using SafeMath for *;\n', '    // Minimal time to stake in order to be eligible for claiming NFT\n', '    uint256 public minTimeToStake;\n', '    // Minimal amount to stake in order to be eligible for claiming NFT\n', '    uint256 public minAmountToStake;\n', '    // Token being staked\n', '    IERC20 public stakingToken;\n', '    // Factory of Hord tickets\n', '    IHordTicketFactory public hordTicketFactory;\n', '    // Mapping championId to tokenIds\n', '    mapping (uint256 => uint256[]) internal championIdToMintedTokensIds;\n', '\n', '    // Users stake\n', '    struct UserStake {\n', '        uint256 amountStaked;\n', '        uint256 amountOfTicketsGetting;\n', '        uint256 unlockingTime;\n', '        bool isWithdrawn;\n', '    }\n', '\n', '    /// @dev Mapping user address to tokenId to stakes for that token\n', '    mapping(address => mapping(uint => UserStake[])) public addressToTokenIdToStakes;\n', '\n', '    // Count number of reserved tickets for tokenId\n', '    mapping(uint256 => uint256) internal tokenIdToNumberOfTicketsReserved;\n', '\n', '    event TokensStaked(\n', '        address user,\n', '        uint amountStaked,\n', '        uint inFavorOfTokenId,\n', '        uint numberOfTicketsReserved,\n', '        uint unlockingTime\n', '    );\n', '\n', '    event NFTsClaimed(\n', '        address beneficiary,\n', '        uint256 amountUnstaked,\n', '        uint256 amountTicketsClaimed,\n', '        uint tokenId\n', '    );\n', '\n', '    function initialize(\n', '        address _hordCongress,\n', '        address _maintainersRegistry,\n', '        address _stakingToken,\n', '        uint256 _minTimeToStake,\n', '        uint256 _minAmountToStake\n', '    )\n', '    public\n', '    initializer\n', '    {\n', '        // Set hord congress and maintainers registry\n', '        setCongressAndMaintainers(_hordCongress, _maintainersRegistry);\n', '        // Set staking token\n', '        stakingToken = IERC20(_stakingToken);\n', '        // Set minimal time to stake tokens\n', '        minTimeToStake = _minTimeToStake;\n', '        // Set minimal amount to stake\n', '        minAmountToStake = _minAmountToStake;\n', '    }\n', '\n', '    /**\n', '     * @notice  Set hord ticket factory contract. After set first time,\n', '     *          can be changed only by HordCongress\n', '     * @param _hordTicketFactory is the address of HordTicketFactory contract\n', '     */\n', '    function setHordTicketFactory(address _hordTicketFactory) public {\n', '        // Initial setting is allowed during deployment, after that only congress can change it\n', '        if(address(hordTicketFactory) != address(0)) {\n', '            require(msg.sender == hordCongress);\n', '        }\n', '        // Set hord ticket factory\n', '        hordTicketFactory = IHordTicketFactory(_hordTicketFactory);\n', '    }\n', '\n', '    /**\n', '     * @notice  Set minimal time to stake, callable only by HordCongress\n', '     * @param   _minimalTimeToStake is minimal amount of time (seconds) user has to stake\n', '     *          staking token in order to be eligible to claim NFT\n', '     */\n', '    function setMinTimeToStake(\n', '        uint256 _minimalTimeToStake\n', '    )\n', '    onlyHordCongress\n', '    external\n', '    {\n', '        minTimeToStake = _minimalTimeToStake;\n', '    }\n', '\n', '    /**\n', '     * @notice  Set minimal amount to stake, callable only by HordCongress\n', '     * @param   _minimalAmountToStake is minimal amount of tokens (WEI) user has to stake\n', '     *          in order to be eligible to claim NFT\n', '     */\n', '    function setMinAmountToStake(\n', '        uint256 _minimalAmountToStake\n', '    )\n', '    onlyHordCongress\n', '    external\n', '    {\n', '        minAmountToStake = _minimalAmountToStake;\n', '    }\n', '\n', '    /**\n', '     * @notice  Map token id with champion id\n', '     * @param   tokenId is the ID of the token (representing token class / series)\n', '     * @param   championId is the ID of the champion\n', '     */\n', '    function addNewTokenIdForChampion(\n', '        uint tokenId,\n', '        uint championId\n', '    )\n', '    external\n', '    {\n', '        require(msg.sender == address(hordTicketFactory), "Only Hord Ticket factory can issue a call to this function");\n', '        // Push token Id to champion id\n', '        championIdToMintedTokensIds[championId].push(tokenId);\n', '    }\n', '\n', '    /**\n', '     * @notice  Stake and reserve NFTs, per specific staking rules\n', '     * @param   tokenId is the ID of the token being staked (class == series)\n', '     * @param   numberOfTickets is representing how many NFTs of same series user wants to get\n', '     */\n', '    function stakeAndReserveNFTs(\n', '        uint tokenId,\n', '        uint numberOfTickets\n', '    )\n', '    public\n', '    {\n', '        // Get number of reserved tickets\n', '        uint256 numberOfTicketsReserved = tokenIdToNumberOfTicketsReserved[tokenId];\n', "        // Check there's enough tickets to get\n", '        require(numberOfTicketsReserved.add(numberOfTickets)<= hordTicketFactory.getTokenSupply(tokenId),\n', '            "Not enough tickets to sell.");\n', '\n', '        // Fixed stake per ticket\n', '        uint amountOfTokensToStake = minAmountToStake.mul(numberOfTickets);\n', '\n', '        // Transfer tokens from user\n', '        stakingToken.transferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            amountOfTokensToStake\n', '        );\n', '\n', '        UserStake memory userStake = UserStake({\n', '            amountStaked: amountOfTokensToStake,\n', '            amountOfTicketsGetting: numberOfTickets,\n', '            unlockingTime: minTimeToStake.add(block.timestamp),\n', '            isWithdrawn: false\n', '        });\n', '\n', '        addressToTokenIdToStakes[msg.sender][tokenId].push(userStake);\n', '\n', '        // Increase number of tickets reserved\n', '        tokenIdToNumberOfTicketsReserved[tokenId] = numberOfTicketsReserved.add(numberOfTickets);\n', '\n', '        emit TokensStaked(\n', '            msg.sender,\n', '            amountOfTokensToStake,\n', '            tokenId,\n', '            numberOfTickets,\n', '            userStake.unlockingTime\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @notice  Function to claim NFTs and withdraw tokens staked for that NFTs\n', '     * @param   tokenId is representing token class for which user has performed stake\n', '     */\n', '    function claimNFTs(\n', '        uint tokenId,\n', '        uint startIndex,\n', '        uint endIndex\n', '    )\n', '    public\n', '    {\n', '        UserStake [] storage userStakesForNft = addressToTokenIdToStakes[msg.sender][tokenId];\n', '\n', '        uint256 totalStakeToWithdraw;\n', '        uint256 ticketsToWithdraw;\n', '\n', '        uint256 i = startIndex;\n', '        while (i < userStakesForNft.length && i < endIndex) {\n', '            UserStake storage stake = userStakesForNft[i];\n', '\n', '            if(stake.isWithdrawn || stake.unlockingTime > block.timestamp) {\n', '                i++;\n', '                continue;\n', '            }\n', '\n', '            totalStakeToWithdraw = totalStakeToWithdraw.add(stake.amountStaked);\n', '            ticketsToWithdraw = ticketsToWithdraw.add(stake.amountOfTicketsGetting);\n', '\n', '            stake.isWithdrawn = true;\n', '            i++;\n', '        }\n', '\n', '        if(totalStakeToWithdraw > 0 && ticketsToWithdraw > 0) {\n', '\n', '            // Transfer staking tokens\n', '            stakingToken.transfer(msg.sender, totalStakeToWithdraw);\n', '\n', '            // Transfer NFTs\n', '            hordTicketFactory.safeTransferFrom(\n', '                address(this),\n', '                msg.sender,\n', '                tokenId,\n', '                ticketsToWithdraw,\n', '                "0x0"\n', '            );\n', '\n', '            // Emit event\n', '            emit NFTsClaimed(\n', '                msg.sender,\n', '                totalStakeToWithdraw,\n', '                ticketsToWithdraw,\n', '                tokenId\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice  Get number of specific tokens claimed\n', '     * @param   tokenId is the subject of search\n', '     */\n', '    function getAmountOfTokensClaimed(uint tokenId)\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        uint mintedSupply = hordTicketFactory.getTokenSupply(tokenId);\n', '        return mintedSupply.sub(hordTicketFactory.balanceOf(address(this), tokenId));\n', '    }\n', '\n', '    /**\n', '     * @notice  Get amount of tickets reserved for selected tokenId\n', '     * @param   tokenId is the subject of search\n', '     */\n', '    function getAmountOfTicketsReserved(\n', '        uint tokenId\n', '    )\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return tokenIdToNumberOfTicketsReserved[tokenId];\n', '    }\n', '\n', '    /**\n', '     * @notice  Get account stakes for specified token Id\n', '     * @param   account is user address\n', '     * @param   tokenId is the id of the token in favor of which stake is made.\n', '     */\n', '    function getUserStakesForTokenId(\n', '        address account,\n', '        uint tokenId\n', '    )\n', '    external\n', '    view\n', '    returns (\n', '        uint256[] memory,\n', '        uint256[] memory,\n', '        uint256[] memory,\n', '        bool[] memory\n', '    )\n', '    {\n', '        UserStake [] memory userStakes = addressToTokenIdToStakes[account][tokenId];\n', '\n', '        uint numberOfStakes = userStakes.length;\n', '\n', '        uint256[] memory amountsStaked = new uint256[](numberOfStakes);\n', '        uint256[] memory ticketsBought = new uint256[](numberOfStakes);\n', '        uint256[] memory unlockingTimes = new uint256[](numberOfStakes);\n', '        bool[] memory isWithdrawn = new bool[](numberOfStakes);\n', '\n', '        for(uint i = 0; i < numberOfStakes; i++) {\n', '            // Fulfill arrays with stake information\n', '            amountsStaked[i] = userStakes[i].amountStaked;\n', '            ticketsBought[i] = userStakes[i].amountOfTicketsGetting;\n', '            unlockingTimes[i] = userStakes[i].unlockingTime;\n', '            isWithdrawn[i] = userStakes[i].isWithdrawn;\n', '        }\n', '\n', '        return (amountsStaked, ticketsBought, unlockingTimes, isWithdrawn);\n', '    }\n', '\n', '    /**\n', '     * @notice  Get currently how many tokens is account actively staking\n', '     * @param   account is address for which stakes are being checked\n', '     * @param   tokenId is the subject of search for the passed account\n', '     */\n', '    function getCurrentAmountStakedForTokenId(\n', '        address account,\n', '        uint tokenId\n', '    )\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        UserStake [] memory userStakes = addressToTokenIdToStakes[account][tokenId];\n', '\n', '        uint numberOfStakes = userStakes.length;\n', '        uint amountCurrentlyStaking = 0;\n', '\n', '        for(uint i = 0; i < numberOfStakes; i++) {\n', '            if(userStakes[i].isWithdrawn == false) {\n', '                amountCurrentlyStaking = amountCurrentlyStaking.add(userStakes[i].amountStaked);\n', '            }\n', '        }\n', '\n', '        return amountCurrentlyStaking;\n', '    }\n', '\n', '    /**\n', '     * @notice  Function to get all token ids minted for specific champion\n', '     * @param   championId is the db id of the champion\n', '     */\n', '    function getChampionTokenIds(\n', '        uint championId\n', '    )\n', '    external\n', '    view\n', '    returns (uint[] memory)\n', '    {\n', '        return championIdToMintedTokensIds[championId];\n', '    }\n', '\n', '    /**\n', '     * @notice  Function to get number of stakes for user and token\n', '     * @param   user is the address of selected user\n', '     * @param   tokenId is the ID of the token\n', '     */\n', '    function getNumberOfStakesForUserAndToken(\n', '        address user,\n', '        uint tokenId\n', '    )\n', '    external\n', '    view\n', '    returns (uint256)\n', '    {\n', '        return addressToTokenIdToStakes[user][tokenId].length;\n', '    }\n', '}']