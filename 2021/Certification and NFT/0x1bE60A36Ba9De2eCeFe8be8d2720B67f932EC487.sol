['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-28\n', '*/\n', '\n', '// File: contracts/SLORegistry.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity 0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title SLORegistry\n', ' * @dev SLORegistry is a contract for handling creation of service level\n', ' * objectives and querying those service level objectives\n', ' */\n', 'contract SLORegistry {\n', '    enum SLOType {\n', '        EqualTo,\n', '        NotEqualTo,\n', '        SmallerThan,\n', '        SmallerOrEqualTo,\n', '        GreaterThan,\n', '        GreaterOrEqualTo\n', '    }\n', '\n', '    struct SLO {\n', '        uint256 sloValue;\n', '        SLOType sloType;\n', '    }\n', '    /**\n', '     * @dev SLO Registered event\n', '     * @param sla 1. -\n', '     * @param sloValue 2. -\n', '     * @param sloType 3. -\n', '     */\n', '    event SLORegistered(address indexed sla, uint256 sloValue, SLOType sloType);\n', '\n', '    address private slaRegistry;\n', '    mapping(address => SLO) public registeredSLO;\n', '\n', '    modifier onlySLARegistry {\n', '        require(\n', '            msg.sender == slaRegistry,\n', '            "Should only be called using the SLARegistry contract"\n', '        );\n', '        _;\n', '    }\n', '\n', '    function setSLARegistry() public {\n', '        // Only able to trigger this function once\n', '        require(\n', '            address(slaRegistry) == address(0),\n', '            "SLARegistry address has already been set"\n', '        );\n', '        slaRegistry = msg.sender;\n', '    }\n', '\n', '    /**\n', '     * @dev public function for creating service level objectives\n', '     * @param _sloValue 1. -\n', '     * @param _sloType 2. -\n', '     * @param _slaAddress 3. -\n', '     */\n', '    function registerSLO(\n', '        uint256 _sloValue,\n', '        SLOType _sloType,\n', '        address _slaAddress\n', '    ) public onlySLARegistry {\n', '        registeredSLO[_slaAddress] = SLO({\n', '            sloValue: _sloValue,\n', '            sloType: _sloType\n', '        });\n', '        emit SLORegistered(_slaAddress, _sloValue, _sloType);\n', '    }\n', '\n', '    /**\n', '     * @dev external view function to check a value against the SLO\n', '     * @param _value The SLI value to check against the SL\n', '     * @return boolean with the SLO honored state\n', '     */\n', '    function isRespected(uint256 _value, address _slaAddress)\n', '        public\n', '        view\n', '        returns (bool)\n', '    {\n', '        SLO memory slo = registeredSLO[_slaAddress];\n', '        SLOType sloType = slo.sloType;\n', '        uint256 sloValue = slo.sloValue;\n', '\n', '        if (sloType == SLOType.EqualTo) {\n', '            return _value == sloValue;\n', '        }\n', '\n', '        if (sloType == SLOType.NotEqualTo) {\n', '            return _value != sloValue;\n', '        }\n', '\n', '        if (sloType == SLOType.SmallerThan) {\n', '            return _value < sloValue;\n', '        }\n', '\n', '        if (sloType == SLOType.SmallerOrEqualTo) {\n', '            return _value <= sloValue;\n', '        }\n', '\n', '        if (sloType == SLOType.GreaterThan) {\n', '            return _value > sloValue;\n', '        }\n', '\n', '        if (sloType == SLOType.GreaterOrEqualTo) {\n', '            return _value >= sloValue;\n', '        }\n', '        revert("isRespected wasn\'t executed properly");\n', '    }\n', '}']