['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.4;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '}\n', '\n', 'contract Ownable is Context {\n', '    address private m_Owner;\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        m_Owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    function owner() public view returns (address) {\n', '        return m_Owner;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(_msgSender() == m_Owner, "Ownable: caller is not the owner");\n', '        _;\n', '    }                                                                                          \n', '} \n', '\n', 'interface UniV2Token {                                                                          // This is the contract for UniswapV2Pair\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function approve(address spender, uint value) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '}\n', '\n', 'interface DecisionToken {                                                                       // This is the contract of actual coin\n', '    function totalEarnings() external view returns (uint256);\n', '}\n', '\n', 'contract LiqLockToBurn is Context, Ownable {\n', '\n', '    UniV2Token private V2Token;\n', '    DecisionToken private DToken;\n', '    uint256 m_Balance;\n', '    uint256 m_Earnings;\n', '    uint256 m_EarningsLimit;\n', '    address m_InvestorAddressA;\n', '    address m_InvestorAddressB;\n', '    \n', '   constructor() {\n', '       UniV2Token _uniV2Token = UniV2Token(address(this));\n', '       V2Token = _uniV2Token;\n', '       DecisionToken _decisionToken = DecisionToken(address(this));\n', '       DToken = _decisionToken;\n', '    }\n', '   \n', '    function getBalance() public returns (uint256) {\n', '        m_Balance = V2Token.balanceOf(address(this));\n', '        return m_Balance;\n', '    }\n', '    \n', '    function checkEarnings() public returns (uint256) {\n', '        m_Earnings = DToken.totalEarnings();\n', '        return m_Earnings;\n', '    }\n', '\n', '    function executeTokenDecision() external onlyOwner() {\n', '        uint256 _amount;\n', '        \n', '        V2Token.approve(address(this), getBalance());\n', '        \n', '        if(checkEarnings() >= m_EarningsLimit){ // 10 ETH\n', '            _amount = m_Balance;\n', '            V2Token.transferFrom(address(this), address(0), _amount);\n', '        }\n', '        else{\n', '            _amount = m_Balance / 2;\n', '            V2Token.transferFrom(address(this), m_InvestorAddressA, _amount);\n', '            V2Token.transferFrom(address(this), m_InvestorAddressB, _amount);\n', '        }   \n', '    }\n', '    \n', '    function assignInvestorAddresses(address _addressA, address _addressB) external onlyOwner() {\n', '        m_InvestorAddressA = _addressA;\n', '        m_InvestorAddressB = _addressB;\n', '    }\n', '    \n', '    function assignV2Pair(address _address) external onlyOwner() {\n', '        UniV2Token _uniV2Token = UniV2Token(_address);\n', '        V2Token = _uniV2Token;\n', '    }\n', '    \n', '    function assignDecisionToken(address _address) external onlyOwner() {\n', '        DecisionToken _decisionToken = DecisionToken(_address);\n', '        DToken = _decisionToken;\n', '    }\n', '    \n', '    function assignEarningsLimit(uint256 _amount) external onlyOwner() {\n', '        m_EarningsLimit = _amount;\n', '    }\n', '}']