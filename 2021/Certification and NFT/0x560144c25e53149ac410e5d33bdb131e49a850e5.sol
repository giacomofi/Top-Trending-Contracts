['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-15\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', ' */\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.2;\n', '\n', '/*******************************************************\n', ' *                       Interfaces                    *\n', ' *******************************************************/\n', 'interface IOracle {\n', '    function getNormalizedValueUsdc(\n', '        address tokenAddress,\n', '        uint256 amount,\n', '        uint256 priceUsdc\n', '    ) external view returns (uint256);\n', '\n', '    function getNormalizedValueUsdc(address tokenAddress, uint256 amount)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function getPriceUsdcRecommended(address tokenAddress)\n', '        external\n', '        view\n', '        returns (uint256);\n', '}\n', '\n', 'interface IVotingEscrow {\n', '    function balanceOf(address account) external view returns (uint256);\n', '}\n', '\n', '/*******************************************************\n', ' *                     Adapter Logic                   *\n', ' *******************************************************/\n', 'contract TvlAdapterVeCrv {\n', '    IOracle public oracle; // The oracle is used to fetch USDC normalized pricing data\n', '\n', '    address public yveCrvDaoAddress =\n', '        0xc5bDdf9843308380375a611c18B50Fb9341f502A; // veCRV-DAO "Vault"\n', '    address public curveVotingEscrowAddress =\n', '        0x5f3b5DfEb7B28CDbD7FAba78963EE202a494e2A2; // veCRV\n', '    address public curveYCrvVoterAddress =\n', '        0xF147b8125d2ef93FB6965Db97D6746952a133934; // Yearn voter proxy\n', '    uint256 public assetsLength = 1;\n', '\n', '    /**\n', '     * TVL breakdown for an asset\n', '     */\n', '    struct AssetTvlBreakdown {\n', '        address assetId; // Asset address\n', '        address tokenId; // Token address\n', '        uint256 tokenPriceUsdc; // Token price in USDC\n', '        uint256 underlyingTokenBalance; // Amount of underlying token in asset\n', '        uint256 delegatedBalance; // Amount of underlying token balance that is delegated\n', '        uint256 adjustedBalance; // underlyingTokenBalance - delegatedBalance\n', '        uint256 adjustedBalanceUsdc; // TVL\n', '    }\n', '\n', '    /**\n', '     * Information about the adapter\n', '     */\n', '    struct AdapterInfo {\n', '        address id; // Adapter address\n', '        string typeId; // Adapter typeId (for example "VAULT_V2" or "IRON_BANK_MARKET")\n', '        string categoryId; // Adapter categoryId (for example "VAULT")\n', '    }\n', '\n', '    /**\n', '     * Configure adapter\n', '     */\n', '    constructor(address _oracleAddress) {\n', '        require(_oracleAddress != address(0), "Missing oracle address");\n', '        oracle = IOracle(_oracleAddress);\n', '    }\n', '\n', '    /**\n', '     * Fetch adapter info\n', '     */\n', '    function adapterInfo() public view returns (AdapterInfo memory) {\n', '        return\n', '            AdapterInfo({\n', '                id: address(this),\n', '                typeId: "VE_CRV",\n', '                categoryId: "SPECIAL"\n', '            });\n', '    }\n', '\n', '    /**\n', '     * Fetch all asset addresses for this adapter\n', '     */\n', '    function assetsAddresses() public view returns (address[] memory) {\n', '        address[] memory addresses = new address[](1);\n', '        addresses[0] = yveCrvDaoAddress;\n', '        return addresses;\n', '    }\n', '\n', '    /**\n', '     * Fetch the underlying token address of an asset\n', '     */\n', '    function underlyingTokenAddress(address assetAddress)\n', '        public\n', '        view\n', '        returns (address)\n', '    {\n', '        return 0xD533a949740bb3306d119CC777fa900bA034cd52; // CRV\n', '    }\n', '\n', '    /**\n', '     * Fetch asset balance in underlying tokens\n', '     */\n', '    function assetBalance(address assetAddress) public view returns (uint256) {\n', '        IVotingEscrow votingEscrow = IVotingEscrow(curveVotingEscrowAddress);\n', '        return votingEscrow.balanceOf(curveYCrvVoterAddress);\n', '    }\n', '\n', '    /**\n', '     * Fetch delegated balance of an asset\n', '     */\n', '    function assetDelegatedBalance(address assetAddress)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return 0;\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL of an asset in USDC\n', '     */\n', '    function assetTvlUsdc(address assetAddress) public view returns (uint256) {\n', '        address tokenAddress = underlyingTokenAddress(assetAddress);\n', '        uint256 underlyingBalanceAmount = assetBalance(assetAddress);\n', '        uint256 adjustedBalanceUsdc =\n', '            oracle.getNormalizedValueUsdc(\n', '                tokenAddress,\n', '                underlyingBalanceAmount\n', '            );\n', '        return adjustedBalanceUsdc;\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL for adapter in USDC\n', '     */\n', '    function assetsTvlUsdc(address[] memory _assetsAddresses)\n', '        public\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return assetTvlUsdc(_assetsAddresses[0]);\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL for adapter in USDC given an array of addresses\n', '     */\n', '    function assetsTvlUsdc() external view returns (uint256) {\n', '        address[] memory _assetsAddresses = assetsAddresses();\n', '        return assetsTvlUsdc(_assetsAddresses);\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL breakdown of an asset\n', '     */\n', '    function assetTvlBreakdown(address assetAddress)\n', '        public\n', '        view\n', '        returns (AssetTvlBreakdown memory)\n', '    {\n', '        address tokenAddress = underlyingTokenAddress(assetAddress);\n', '        uint256 underlyingBalanceAmount = assetBalance(assetAddress);\n', '        uint256 tokenPriceUsdc = oracle.getPriceUsdcRecommended(tokenAddress);\n', '        uint256 delegatedBalanceAmount = 0;\n', '        return\n', '            AssetTvlBreakdown({\n', '                assetId: assetAddress,\n', '                tokenId: tokenAddress,\n', '                tokenPriceUsdc: tokenPriceUsdc,\n', '                underlyingTokenBalance: underlyingBalanceAmount,\n', '                delegatedBalance: delegatedBalanceAmount,\n', '                adjustedBalance: underlyingBalanceAmount -\n', '                    delegatedBalanceAmount,\n', '                adjustedBalanceUsdc: oracle.getNormalizedValueUsdc(\n', '                    tokenAddress,\n', '                    underlyingBalanceAmount,\n', '                    tokenPriceUsdc\n', '                )\n', '            });\n', '    }\n', '\n', '    // Fetch TVL breakdown for adapter given an array of addresses\n', '    function assetsTvlBreakdown(address[] memory _assetsAddresses)\n', '        public\n', '        view\n', '        returns (AssetTvlBreakdown[] memory)\n', '    {\n', '        AssetTvlBreakdown[] memory tvlData = new AssetTvlBreakdown[](1);\n', '        tvlData[0] = assetTvlBreakdown(_assetsAddresses[0]);\n', '        return tvlData;\n', '    }\n', '\n', '    /**\n', '     * Fetch TVL breakdown for adapter\n', '     */\n', '    function assetsTvlBreakdown()\n', '        external\n', '        view\n', '        returns (AssetTvlBreakdown[] memory)\n', '    {\n', '        address[] memory _assetsAddresses = assetsAddresses();\n', '        return assetsTvlBreakdown(_assetsAddresses);\n', '    }\n', '}']