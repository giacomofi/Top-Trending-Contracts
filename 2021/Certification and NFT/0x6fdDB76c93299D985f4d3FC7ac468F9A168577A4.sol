['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-19\n', '*/\n', '\n', '// File: contracts/lib/InitializableOwnable.sol\n', '\n', '/*\n', '\n', '    Copyright 2020 DODO ZOO.\n', '    SPDX-License-Identifier: Apache-2.0\n', '\n', '*/\n', '\n', 'pragma solidity 0.6.9;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * @title Ownable\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Ownership related functions\n', ' */\n', 'contract InitializableOwnable {\n', '    address public _OWNER_;\n', '    address public _NEW_OWNER_;\n', '    bool internal _INITIALIZED_;\n', '\n', '    // ============ Events ============\n', '\n', '    event OwnershipTransferPrepared(address indexed previousOwner, address indexed newOwner);\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    // ============ Modifiers ============\n', '\n', '    modifier notInitialized() {\n', '        require(!_INITIALIZED_, "DODO_INITIALIZED");\n', '        _;\n', '    }\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == _OWNER_, "NOT_OWNER");\n', '        _;\n', '    }\n', '\n', '    // ============ Functions ============\n', '\n', '    function initOwner(address newOwner) public notInitialized {\n', '        _INITIALIZED_ = true;\n', '        _OWNER_ = newOwner;\n', '    }\n', '\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        emit OwnershipTransferPrepared(_OWNER_, newOwner);\n', '        _NEW_OWNER_ = newOwner;\n', '    }\n', '\n', '    function claimOwnership() public {\n', '        require(msg.sender == _NEW_OWNER_, "INVALID_CLAIM");\n', '        emit OwnershipTransferred(_OWNER_, _NEW_OWNER_);\n', '        _OWNER_ = _NEW_OWNER_;\n', '        _NEW_OWNER_ = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/CloneFactory.sol\n', '\n', '\n', 'interface ICloneFactory {\n', '    function clone(address prototype) external returns (address proxy);\n', '}\n', '\n', '// introduction of proxy mode design: https://docs.openzeppelin.com/upgrades/2.8/\n', '// minimum implementation of transparent proxy: https://eips.ethereum.org/EIPS/eip-1167\n', '\n', 'contract CloneFactory is ICloneFactory {\n', '    function clone(address prototype) external override returns (address proxy) {\n', '        bytes20 targetBytes = bytes20(prototype);\n', '        assembly {\n', '            let clone := mload(0x40)\n', '            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone, 0x14), targetBytes)\n', '            mstore(\n', '                add(clone, 0x28),\n', '                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n', '            )\n', '            proxy := create(0, clone, 0x37)\n', '        }\n', '        return proxy;\n', '    }\n', '}\n', '\n', '// File: contracts/DODOStablePool/intf/IDSP.sol\n', '\n', '\n', 'interface IDSP {\n', '    function init(\n', '        address maintainer,\n', '        address baseTokenAddress,\n', '        address quoteTokenAddress,\n', '        uint256 lpFeeRate,\n', '        address mtFeeRateModel,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP\n', '    ) external;\n', '\n', '    function _BASE_TOKEN_() external view returns (address);\n', '\n', '    function _QUOTE_TOKEN_() external view returns (address);\n', '\n', '    function _I_() external view returns (uint256);\n', '\n', '    function _MT_FEE_RATE_MODEL_() external view returns (address);\n', '\n', '    function getVaultReserve() external view returns (uint256 baseReserve, uint256 quoteReserve);\n', '\n', '    function sellBase(address to) external returns (uint256);\n', '\n', '    function sellQuote(address to) external returns (uint256);\n', '\n', '    function buyShares(address to) external returns (uint256,uint256,uint256);\n', '}\n', '\n', '// File: contracts/Factory/DSPFactory.sol\n', '\n', '\n', '\n', 'interface IDSPFactory {\n', '    function createDODOStablePool(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP\n', '    ) external returns (address newStablePool);\n', '}\n', '\n', '/**\n', ' * @title DODO StablePool Factory\n', ' * @author DODO Breeder\n', ' *\n', ' * @notice Create And Register DSP Pools\n', ' */\n', 'contract DSPFactory is InitializableOwnable {\n', '    // ============ Templates ============\n', '\n', '    address public immutable _CLONE_FACTORY_;\n', '    address public immutable _DEFAULT_MAINTAINER_;\n', '    address public immutable _DEFAULT_MT_FEE_RATE_MODEL_;\n', '    address public _DSP_TEMPLATE_;\n', '\n', '    // ============ Registry ============\n', '\n', '    // base -> quote -> DSP address list\n', '    mapping(address => mapping(address => address[])) public _REGISTRY_;\n', '    // creator -> DSP address list\n', '    mapping(address => address[]) public _USER_REGISTRY_;\n', '\n', '    // ============ Events ============\n', '\n', '    event NewDSP(address baseToken, address quoteToken, address creator, address DSP);\n', '\n', '    event RemoveDSP(address DSP);\n', '\n', '    // ============ Functions ============\n', '\n', '    constructor(\n', '        address cloneFactory,\n', '        address DSPTemplate,\n', '        address defaultMaintainer,\n', '        address defaultMtFeeRateModel\n', '    ) public {\n', '        _CLONE_FACTORY_ = cloneFactory;\n', '        _DSP_TEMPLATE_ = DSPTemplate;\n', '        _DEFAULT_MAINTAINER_ = defaultMaintainer;\n', '        _DEFAULT_MT_FEE_RATE_MODEL_ = defaultMtFeeRateModel;\n', '    }\n', '\n', '    function createDODOStablePool(\n', '        address baseToken,\n', '        address quoteToken,\n', '        uint256 lpFeeRate,\n', '        uint256 i,\n', '        uint256 k,\n', '        bool isOpenTWAP\n', '    ) external returns (address newStablePool) {\n', '        newStablePool = ICloneFactory(_CLONE_FACTORY_).clone(_DSP_TEMPLATE_);\n', '        {\n', '            IDSP(newStablePool).init(\n', '                _DEFAULT_MAINTAINER_,\n', '                baseToken,\n', '                quoteToken,\n', '                lpFeeRate,\n', '                _DEFAULT_MT_FEE_RATE_MODEL_,\n', '                i,\n', '                k,\n', '                isOpenTWAP\n', '            );\n', '        }\n', '        _REGISTRY_[baseToken][quoteToken].push(newStablePool);\n', '        _USER_REGISTRY_[tx.origin].push(newStablePool);\n', '        emit NewDSP(baseToken, quoteToken, tx.origin, newStablePool);\n', '    }\n', '\n', '    // ============ Admin Operation Functions ============\n', '\n', '    function updateDSPTemplate(address _newDSPTemplate) external onlyOwner {\n', '        _DSP_TEMPLATE_ = _newDSPTemplate;\n', '    }\n', '\n', '    function addPoolByAdmin(\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        address pool\n', '    ) external onlyOwner {\n', '        _REGISTRY_[baseToken][quoteToken].push(pool);\n', '        _USER_REGISTRY_[creator].push(pool);\n', '        emit NewDSP(baseToken, quoteToken, creator, pool);\n', '    }\n', '\n', '    function removePoolByAdmin(\n', '        address creator,\n', '        address baseToken,\n', '        address quoteToken,\n', '        address pool\n', '    ) external onlyOwner {\n', '        address[] memory registryList = _REGISTRY_[baseToken][quoteToken];\n', '        for (uint256 i = 0; i < registryList.length; i++) {\n', '            if (registryList[i] == pool) {\n', '                registryList[i] = registryList[registryList.length - 1];\n', '                break;\n', '            }\n', '        }\n', '        _REGISTRY_[baseToken][quoteToken] = registryList;\n', '        _REGISTRY_[baseToken][quoteToken].pop();\n', '        address[] memory userRegistryList = _USER_REGISTRY_[creator];\n', '        for (uint256 i = 0; i < userRegistryList.length; i++) {\n', '            if (userRegistryList[i] == pool) {\n', '                userRegistryList[i] = userRegistryList[userRegistryList.length - 1];\n', '                break;\n', '            }\n', '        }\n', '        _USER_REGISTRY_[creator] = userRegistryList;\n', '        _USER_REGISTRY_[creator].pop();\n', '        emit RemoveDSP(pool);\n', '    }\n', '\n', '    // ============ View Functions ============\n', '\n', '    function getDODOPool(address baseToken, address quoteToken)\n', '        external\n', '        view\n', '        returns (address[] memory machines)\n', '    {\n', '        return _REGISTRY_[baseToken][quoteToken];\n', '    }\n', '\n', '    function getDODOPoolBidirection(address token0, address token1)\n', '        external\n', '        view\n', '        returns (address[] memory baseToken0Machines, address[] memory baseToken1Machines)\n', '    {\n', '        return (_REGISTRY_[token0][token1], _REGISTRY_[token1][token0]);\n', '    }\n', '\n', '    function getDODOPoolByUser(address user) external view returns (address[] memory machines) {\n', '        return _USER_REGISTRY_[user];\n', '    }\n', '}']