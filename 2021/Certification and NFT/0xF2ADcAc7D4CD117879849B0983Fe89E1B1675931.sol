['pragma solidity ^0.8.0;\n', '\n', 'import "@openzeppelin/contracts/utils/Context.sol";\n', 'import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '\n', 'interface IERC721 {\n', '    function mint(address to, uint256 tokenId) external;\n', '    function exists(uint256 tokenId) external view returns (bool);\n', '}\n', '\n', '/**\n', ' * @title Presale\n', ' * @dev Presale contract allowing investors to purchase the cell token.\n', ' * This contract implements such functionality in its most fundamental form and can be extended \n', ' * to provide additional functionality and/or custom behavior.\n', ' */\n', 'contract Presale is Context {\n', '    // The token being sold\n', '    IERC721 private _cellToken;\n', '\n', '    // Address where fund are collected\n', '    address payable private _wallet;\n', '\n', '    // Amount of wei raised\n', '    uint256 private _weiRaised;\n', '\n', '    // Amount of token to be pay for one ERC721 token\n', '    uint256 private _weiPerToken;\n', '\n', '    /**\n', '     * Event for token purchase logging\n', '     * @param purchaser who paid for the tokens\n', '     * @param beneficiary who got the tokens\n', '     * @param tokenId uint256 ID of the token to be purchased\n', '     */\n', '    event TokensPurchased(address indexed purchaser, address indexed beneficiary, uint256 tokenId);\n', '\n', '    /**\n', '     * @param wallet_ Address where collected tokens will be forwarded to\n', '     * @param cellToken_ Address of the Cell token being sold\n', '     * @param weiPerToken_ tokens amount paid for purchase a Cell token\n', '     */\n', '    constructor (address payable wallet_, IERC721 cellToken_, uint256 weiPerToken_)\n', '        public\n', '    {\n', '        require(wallet_ != address(0), "Presale: wallet is the zero address");\n', '        require(address(cellToken_) != address(0), "Presale: cell token is the zero address");\n', '        require(weiPerToken_ > 0, "Presale: token price must be greater than zero");\n', '        _wallet = wallet_;\n', '        _cellToken = cellToken_;\n', '        _weiPerToken = weiPerToken_;\n', '    }\n', '\n', '    /**\n', '     * @dev Fallback function revert your fund.\n', '     * Only buy Cell token with the buyToken function.\n', '     */\n', '    fallback() external payable {\n', '        revert("Presale: cannot accept any amount directly");\n', '    }\n', '\n', '    /**\n', '     * @return The token being sold.\n', '     */\n', '    function cellToken() public view returns (IERC721) {\n', '        return _cellToken;\n', '    }\n', '\n', '    /**\n', '     * @return Amount of wei to be pay for a Cell token\n', '     */\n', '    function weiPerToken() public view returns (uint256) {\n', '        return _weiPerToken;\n', '    }\n', '\n', '    /**\n', '     * @return The address where tokens amounts are collected.\n', '     */\n', '    function wallet() public view returns (address payable) {\n', '        return _wallet;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns x and y where represent the position of the cell.\n', '     */\n', '    function cellById(uint256 tokenId) public pure returns (uint256 x, uint256 y){\n', '        y = tokenId / 90;\n', '        x = tokenId - (y * 90);\n', '    }\n', '\n', '    /**\n', '     * @dev token purchase with pay Land tokens\n', '     * @param beneficiary Recipient of the token purchase\n', '     * @param tokenId uint256 ID of the token to be purchase\n', '     */\n', '    function buyToken(address beneficiary, uint256 tokenId) public payable{\n', '        require(beneficiary != address(0), "Presale: beneficiary is the zero address");\n', '        require(weiPerToken() == msg.value, "Presale: Not enough Eth");\n', '        require(!_cellToken.exists(tokenId), "Presale: token already minted");\n', '        require(tokenId < 11520, "Presale: tokenId must be less than max token count");\n', '        (uint256 x, uint256 y) = cellById(tokenId);\n', '        require(x < 38 || x > 53 || y < 28 || y > 43, "Presale: tokenId should not be in the unsold range");\n', '        _wallet.transfer(msg.value);\n', '        _cellToken.mint(beneficiary, tokenId);\n', '        emit TokensPurchased(msg.sender, beneficiary, tokenId);\n', '    }\n', '    \n', '    /**\n', '     * @dev batch token purchase with pay our ERC20 tokens\n', '     * @param beneficiary Recipient of the token purchase\n', '     * @param tokenIds uint256 IDs of the token to be purchase\n', '     */\n', '    function buyBatchTokens(address beneficiary, uint256[] memory tokenIds) public payable{\n', '        require(beneficiary != address(0), "Presale: beneficiary is the zero address");\n', '        uint256 weiAmount = weiPerToken() * tokenIds.length;\n', '        require(weiAmount == msg.value, "Presale: Not enough Eth");\n', '        for (uint256 i = 0; i < tokenIds.length; ++i) {\n', '            require(!_cellToken.exists(tokenIds[i]), "Presale: token already minted");\n', '            require(tokenIds[i] < 11520, "Presale: tokenId must be less than max token count");\n', '            (uint256 x, uint256 y) = cellById(tokenIds[i]);\n', '            require(x < 38 || x > 53 || y < 28 || y > 43, "Presale: tokenId should not be in the unsold range");\n', '        }\n', '        _wallet.transfer(msg.value);\n', '        for (uint256 i = 0; i < tokenIds.length; ++i) {\n', '            _cellToken.mint(beneficiary, tokenIds[i]);\n', '            emit TokensPurchased(msg.sender, beneficiary, tokenIds[i]);\n', '        }\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']