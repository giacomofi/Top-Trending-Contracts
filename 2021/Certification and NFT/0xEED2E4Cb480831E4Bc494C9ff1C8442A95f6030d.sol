['pragma solidity ^0.6.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'import "./ACOProxy.sol";\n', 'import "./Address.sol";\n', 'import "./IACOPool2.sol";\n', '\n', '/**\n', ' * @title ACOPoolFactory\n', ' * @dev The contract is the implementation for the ACOProxy.\n', ' */\n', 'contract ACOPoolFactory2 {\n', '    \n', '    /**\n', '     * @dev Struct to store the ACO pool basic data.\n', '     */\n', '    struct ACOPoolBasicData {\n', '        \n', '        /**\n', '         * @dev Address of the underlying asset (0x0 for Ethereum).\n', '         */\n', '        address underlying;\n', '        \n', '        /**\n', '         * @dev Address of the strike asset (0x0 for Ethereum).\n', '         */\n', '        address strikeAsset;\n', '        \n', '        /**\n', '         * @dev True if the type is CALL, false for PUT.\n', '         */\n', '        bool isCall;\n', '    }\n', '    \n', '    /**\n', '     * @dev Emitted when the factory admin address has been changed.\n', '     * @param previousFactoryAdmin Address of the previous factory admin.\n', '     * @param newFactoryAdmin Address of the new factory admin.\n', '     */\n', '    event SetFactoryAdmin(address indexed previousFactoryAdmin, address indexed newFactoryAdmin);\n', '    \n', '    /**\n', '     * @dev Emitted when the ACO pool implementation has been changed.\n', '     * @param previousAcoPoolImplementation Address of the previous ACO pool implementation.\n', '     * @param previousAcoPoolImplementation Address of the new ACO pool implementation.\n', '     */\n', '    event SetAcoPoolImplementation(address indexed previousAcoPoolImplementation, address indexed newAcoPoolImplementation);\n', '    \n', '    /**\n', '     * @dev Emitted when the ACO factory has been changed.\n', '     * @param previousAcoFactory Address of the previous ACO factory.\n', '     * @param newAcoFactory Address of the new ACO factory.\n', '     */\n', '    event SetAcoFactory(address indexed previousAcoFactory, address indexed newAcoFactory);\n', '    \n', '    /**\n', '     * @dev Emitted when the Chi Token has been changed.\n', '     * @param previousChiToken Address of the previous Chi Token.\n', '     * @param newChiToken Address of the new Chi Token.\n', '     */\n', '    event SetChiToken(address indexed previousChiToken, address indexed newChiToken);\n', '    \n', '    /**\n', '     * @dev Emitted when the asset converter helper has been changed.\n', '     * @param previousAssetConverterHelper Address of the previous asset converter helper.\n', '     * @param newAssetConverterHelper Address of the new asset converter helper.\n', '     */\n', '    event SetAssetConverterHelper(address indexed previousAssetConverterHelper, address indexed newAssetConverterHelper);\n', '    \n', '    /**\n', '     * @dev Emitted when the ACO Pool fee has been changed.\n', '     * @param previousAcoFee Value of the previous ACO Pool fee.\n', '     * @param newAcoFee Value of the new ACO Pool fee.\n', '     */\n', '    event SetAcoPoolFee(uint256 indexed previousAcoFee, uint256 indexed newAcoFee);\n', '    \n', '    /**\n', '     * @dev Emitted when the ACO Pool fee destination address has been changed.\n', '     * @param previousAcoPoolFeeDestination Address of the previous ACO Pool fee destination.\n', '     * @param newAcoPoolFeeDestination Address of the new ACO Pool fee destination.\n', '     */\n', '    event SetAcoPoolFeeDestination(address indexed previousAcoPoolFeeDestination, address indexed newAcoPoolFeeDestination);\n', '     \n', '    /**\n', '     * @dev Emitted when the ACO Pool penalty percentage on withdrawing open positions has been changed.\n', '     * @param previousWithdrawOpenPositionPenalty Value of the previous penalty percentage on withdrawing open positions.\n', '     * @param newWithdrawOpenPositionPenalty Value of the new penalty percentage on withdrawing open positions.\n', '     */\n', '    event SetAcoPoolWithdrawOpenPositionPenalty(uint256 indexed previousWithdrawOpenPositionPenalty, uint256 indexed newWithdrawOpenPositionPenalty);\n', '\t\n', '    /**\n', '     * @dev Emitted when the ACO Pool underlying price percentage adjust has been changed.\n', '     * @param previousUnderlyingPriceAdjustPercentage Value of the previous ACO Pool underlying price percentage adjust.\n', '     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust.\n', '     */\n', '    event SetAcoPoolUnderlyingPriceAdjustPercentage(uint256 indexed previousUnderlyingPriceAdjustPercentage, uint256 indexed newUnderlyingPriceAdjustPercentage);\n', '\t\n', '    /**\n', '     * @dev Emitted when the ACO Pool maximum number of open ACOs allowed has been changed.\n', '     * @param previousMaximumOpenAco Value of the previous ACO Pool maximum number of open ACOs allowed.\n', '     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\n', '     */\n', '    event SetAcoPoolMaximumOpenAco(uint256 indexed previousMaximumOpenAco, uint256 indexed newMaximumOpenAco);\n', '\t\n', '    /**\n', '     * @dev Emitted when permission for an ACO pool admin has been changed.\n', '     * @param poolAdmin Address of the ACO pool admin.\n', '     * @param previousPermission The previous permission situation.\n', '     * @param newPermission The new permission situation.\n', '     */\n', '    event SetAcoPoolPermission(address indexed poolAdmin, bool indexed previousPermission, bool indexed newPermission);\n', '    \n', '    /**\n', '     * @dev Emitted when a strategy permission has been changed.\n', '     * @param strategy Address of the strategy.\n', '     * @param previousPermission The previous strategy permission.\n', '     * @param newPermission The new strategy permission.\n', '     */\n', '    event SetStrategyPermission(address indexed strategy, bool indexed previousPermission, bool newPermission);\n', '\n', '    /**\n', '     * @dev Emitted when a new ACO pool has been created.\n', '     * @param underlying Address of the underlying asset (0x0 for Ethereum).\n', '     * @param strikeAsset Address of the strike asset (0x0 for Ethereum).\n', '     * @param isCall True if the type is CALL, false for PUT.\n', '     * @param acoPool Address of the new ACO pool created.\n', '     * @param acoPoolImplementation Address of the ACO pool implementation used on creation.\n', '     */\n', '    event NewAcoPool(address indexed underlying, address indexed strikeAsset, bool indexed isCall, address acoPool, address acoPoolImplementation);\n', '    \n', '    /**\n', '     * @dev The factory admin address.\n', '     */\n', '    address public factoryAdmin;\n', '    \n', '    /**\n', '     * @dev The ACO pool implementation address.\n', '     */\n', '    address public acoPoolImplementation;\n', '    \n', '    /**\n', '     * @dev The ACO factory address.\n', '     */\n', '    address public acoFactory;\n', '    \n', '\t/**\n', '     * @dev The ACO asset converter helper.\n', '     */\n', '    address public assetConverterHelper;\n', '    \n', '    /**\n', '     * @dev The Chi Token address.\n', '     */\n', '    address public chiToken;\n', '    \n', '    /**\n', '     * @dev The ACO Pool fee value. \n', '     * It is a percentage value (100000 is 100%).\n', '     */\n', '    uint256 public acoPoolFee;\n', '    \n', '    /**\n', '     * @dev The ACO Pool fee destination address.\n', '     */\n', '    address public acoPoolFeeDestination;\n', '      \n', '    /**\n', '     * @dev The ACO Pool penalty percentage on withdrawing open positions.\n', '     */\n', '    uint256 public acoPoolWithdrawOpenPositionPenalty;\n', '\t  \n', '    /**\n', '     * @dev The ACO Pool underlying price percentage adjust.\n', '     */\n', '    uint256 public acoPoolUnderlyingPriceAdjustPercentage;\n', '\n', '    /**\n', '     * @dev The ACO Pool maximum number of open ACOs allowed.\n', '     */\n', '    uint256 public acoPoolMaximumOpenAco;\n', '\n', '    /**\n', '     * @dev The ACO pool admin permissions.\n', '     */\n', '    mapping(address => bool) public poolAdminPermission;\n', '    \n', '    /**\n', '     * @dev The strategies permitted.\n', '     */\n', '    mapping(address => bool) public strategyPermitted;\n', '    \n', '    /**\n', '     * @dev The ACO pool basic data.\n', '     */\n', '    mapping(address => ACOPoolBasicData) public acoPoolBasicData;\n', '    \n', '    /**\n', '     * @dev Modifier to check if the `msg.sender` is the factory admin.\n', '     * Only factory admin address can execute.\n', '     */\n', '    modifier onlyFactoryAdmin() {\n', '        require(msg.sender == factoryAdmin, "ACOPoolFactory::onlyFactoryAdmin");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Modifier to check if the `msg.sender` is a pool admin.\n', '     * Only a pool admin address can execute.\n', '     */\n', '    modifier onlyPoolAdmin() {\n', '        require(poolAdminPermission[msg.sender], "ACOPoolFactory::onlyPoolAdmin");\n', '        _;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to initialize the contract.\n', '     * It should be called through the `data` argument when creating the proxy.\n', '     * It must be called only once. The first `require` is to guarantee that behavior.\n', '     * @param _factoryAdmin Address of the factory admin.\n', '     * @param _acoPoolImplementation Address of the ACO pool implementation.\n', '     * @param _acoFactory Address of the ACO token factory.\n', '     * @param _assetConverterHelper Address of the asset converter helper.\n', '\t * @param _chiToken Address of the Chi token.\n', '\t * @param _acoPoolFee ACO pool fee percentage.\n', '\t * @param _acoPoolFeeDestination ACO pool fee destination.\n', '\t * @param _acoPoolWithdrawOpenPositionPenalty ACO pool penalty percentage on withdrawing open positions.\n', '\t * @param _acoPoolUnderlyingPriceAdjustPercentage ACO pool underlying price percentage adjust.\n', '     * @param _acoPoolMaximumOpenAco ACO pool maximum number of open ACOs allowed.\n', '     */\n', '    function init(\n', '        address _factoryAdmin, \n', '        address _acoPoolImplementation, \n', '        address _acoFactory, \n', '        address _assetConverterHelper,\n', '        address _chiToken,\n', '        uint256 _acoPoolFee,\n', '        address _acoPoolFeeDestination,\n', '\t\tuint256 _acoPoolWithdrawOpenPositionPenalty,\n', '\t\tuint256 _acoPoolUnderlyingPriceAdjustPercentage,\n', '        uint256 _acoPoolMaximumOpenAco\n', '    ) public {\n', '        require(factoryAdmin == address(0) && acoPoolImplementation == address(0), "ACOPoolFactory::init: Contract already initialized.");\n', '        \n', '        _setFactoryAdmin(_factoryAdmin);\n', '        _setAcoPoolImplementation(_acoPoolImplementation);\n', '        _setAcoFactory(_acoFactory);\n', '        _setAssetConverterHelper(_assetConverterHelper);\n', '        _setChiToken(_chiToken);\n', '        _setAcoPoolFee(_acoPoolFee);\n', '        _setAcoPoolFeeDestination(_acoPoolFeeDestination);\n', '\t\t_setAcoPoolWithdrawOpenPositionPenalty(_acoPoolWithdrawOpenPositionPenalty);\n', '\t\t_setAcoPoolUnderlyingPriceAdjustPercentage(_acoPoolUnderlyingPriceAdjustPercentage);\n', '        _setAcoPoolMaximumOpenAco(_acoPoolMaximumOpenAco);\n', '        _setAcoPoolPermission(_factoryAdmin, true);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to guarantee that the contract will not receive ether.\n', '     */\n', '    receive() external payable virtual {\n', '        revert();\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the factory admin address.\n', '     * Only can be called by the factory admin.\n', '     * @param newFactoryAdmin Address of the new factory admin.\n', '     */\n', '    function setFactoryAdmin(address newFactoryAdmin) onlyFactoryAdmin external virtual {\n', '        _setFactoryAdmin(newFactoryAdmin);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO pool implementation address.\n', '     * Only can be called by the factory admin.\n', '     * @param newAcoPoolImplementation Address of the new ACO pool implementation.\n', '     */\n', '    function setAcoPoolImplementation(address newAcoPoolImplementation) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolImplementation(newAcoPoolImplementation);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO factory address.\n', '     * Only can be called by the factory admin.\n', '     * @param newAcoFactory Address of the ACO token factory.\n', '     */\n', '    function setAcoFactory(address newAcoFactory) onlyFactoryAdmin external virtual {\n', '        _setAcoFactory(newAcoFactory);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the Chi Token address.\n', '     * Only can be called by the factory admin.\n', '     * @param newChiToken Address of the new Chi Token.\n', '     */\n', '    function setChiToken(address newChiToken) onlyFactoryAdmin external virtual {\n', '        _setChiToken(newChiToken);\n', '    }\n', '    \n', '\t/**\n', '     * @dev Function to set the asset converter helper address.\n', '     * Only can be called by the factory admin.\n', '     * @param newAssetConverterHelper Address of the new asset converter helper.\n', '     */\n', '    function setAssetConverterHelper(address newAssetConverterHelper) onlyFactoryAdmin external virtual {\n', '        _setAssetConverterHelper(newAssetConverterHelper);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO Pool fee.\n', '     * Only can be called by the factory admin.\n', '     * @param newAcoPoolFee Value of the new ACO Pool fee. It is a percentage value (100000 is 100%).\n', '     */\n', '    function setAcoPoolFee(uint256 newAcoPoolFee) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolFee(newAcoPoolFee);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO Pool destination address.\n', '     * Only can be called by the factory admin.\n', '     * @param newAcoPoolFeeDestination Address of the new ACO Pool destination.\n', '     */\n', '    function setAcoPoolFeeDestination(address newAcoPoolFeeDestination) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolFeeDestination(newAcoPoolFeeDestination);\n', '    }\n', '    \n', '\t/**\n', '     * @dev Function to set the ACO Pool penalty percentage on withdrawing open positions.\n', '     * Only can be called by the factory admin.\n', '     * @param newWithdrawOpenPositionPenalty Value of the new ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\n', '     */\n', '    function setAcoPoolWithdrawOpenPositionPenalty(uint256 newWithdrawOpenPositionPenalty) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolWithdrawOpenPositionPenalty(newWithdrawOpenPositionPenalty);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to set the ACO Pool underlying price percentage adjust.\n', '     * Only can be called by the factory admin.\n', '     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\n', '     */\n', '    function setAcoPoolUnderlyingPriceAdjustPercentage(uint256 newUnderlyingPriceAdjustPercentage) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolUnderlyingPriceAdjustPercentage(newUnderlyingPriceAdjustPercentage);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to set the ACO Pool maximum number of open ACOs allowed.\n', '     * Only can be called by the factory admin.\n', '     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\n', '     */\n', '    function setAcoPoolMaximumOpenAco(uint256 newMaximumOpenAco) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolMaximumOpenAco(newMaximumOpenAco);\n', '    }\n', '\t\n', '    /**\n', '     * @dev Function to set the ACO pool permission.\n', '     * Only can be called by the factory admin.\n', '     * @param poolAdmin Address of the pool admin.\n', '     * @param newPermission The permission to be set.\n', '     */\n', '    function setAcoPoolPermission(address poolAdmin, bool newPermission) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolPermission(poolAdmin, newPermission);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO pool strategies permitted.\n', '     * Only can be called by the factory admin.\n', '     * @param strategy Address of the strategy.\n', '     * @param newPermission The permission to be set.\n', '     */\n', '    function setAcoPoolStrategyPermission(address strategy, bool newPermission) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolStrategyPermission(strategy, newPermission);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools strategy.\n', '     * Only can be called by a pool admin.\n', '     * @param strategy Address of the strategy to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setStrategyOnAcoPool(address strategy, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setStrategyOnAcoPool(strategy, acoPools);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to change the ACO pools base volatilities.\n', '     * Only can be called by a pool admin.\n', '     * @param baseVolatilities Array of the base volatilities to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setBaseVolatilityOnAcoPool(uint256[] calldata baseVolatilities, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setBaseVolatility.selector, baseVolatilities, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools penalties percentages on withdrawing open positions.\n', '     * Only can be called by a pool admin.\n', '     * @param withdrawOpenPositionPenalties Array of the penalties percentages on withdrawing open positions to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setWithdrawOpenPositionPenaltyOnAcoPool(uint256[] calldata withdrawOpenPositionPenalties, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setWithdrawOpenPositionPenalty.selector, withdrawOpenPositionPenalties, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools underlying prices percentages adjust.\n', '     * Only can be called by a pool admin.\n', '     * @param underlyingPriceAdjustPercentages Array of the underlying prices percentages to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setUnderlyingPriceAdjustPercentageOnAcoPool(uint256[] calldata underlyingPriceAdjustPercentages, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setUnderlyingPriceAdjustPercentage.selector, underlyingPriceAdjustPercentages, acoPools);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to change the ACO pools maximum number of open ACOs allowed.\n', '     * Only can be called by a pool admin.\n', '     * @param maximumOpenAcos Array of the maximum number of open ACOs allowed.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setMaximumOpenAcoOnAcoPool(uint256[] calldata maximumOpenAcos, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setMaximumOpenAco.selector, maximumOpenAcos, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools below tolerance prices percentages.\n', '     * Only can be called by a pool admin.\n', '     * @param tolerancePricesBelow Array of the below tolerance prices percentages to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setTolerancePriceBelowOnAcoPool(uint256[] calldata tolerancePricesBelow, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setTolerancePriceBelow.selector, tolerancePricesBelow, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools above tolerance prices percentages.\n', '     * Only can be called by a pool admin.\n', '     * @param tolerancePricesAbove Array of the above tolerance prices percentages to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setTolerancePriceAboveOnAcoPool(uint256[] calldata tolerancePricesAbove, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setTolerancePriceAbove.selector, tolerancePricesAbove, acoPools);\n', '    }\n', '\n', '\t/**\n', '     * @dev Function to change the ACO pools minimum expirations.\n', '     * Only can be called by a pool admin.\n', '     * @param minExpirations Array of the minimum expirations.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setMinExpirationOnAcoPool(uint256[] calldata minExpirations, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setMinExpiration.selector, minExpirations, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools maximum expirations.\n', '     * Only can be called by a pool admin.\n', '     * @param maxExpirations Array of the maximum expirations to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setMaxExpirationOnAcoPool(uint256[] calldata maxExpirations, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setMaxExpiration.selector, maxExpirations, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools fee.\n', '     * Only can be called by a pool admin.\n', '     * @param fees Array of the fees.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setFeeOnAcoPool(uint256[] calldata fees, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setFee.selector, fees, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools fee destinations.\n', '     * Only can be called by a pool admin.\n', '     * @param feeDestinations Array of the fee destinations.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setFeeDestinationOnAcoPool(address[] calldata feeDestinations, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolAddressData(IACOPool2.setFeeDestination.selector, feeDestinations, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools asset converters.\n', '     * Only can be called by a pool admin.\n', '     * @param assetConverters Array of the asset converters.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setAssetConverterOnAcoPool(address[] calldata assetConverters, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolAddressData(IACOPool2.setAssetConverter.selector, assetConverters, acoPools);\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Function to change the ACO pools ACO creator permission.\n', '     * Only can be called by a pool admin.\n', '     * @param acoCreator Address of the ACO creator.\n', '\t * @param permission Permission situation.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '\tfunction setValidAcoCreatorOnAcoPool(address acoCreator, bool permission, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '\t\t_setValidAcoCreatorOnAcoPool(acoCreator, permission, acoPools);\n', '\t}\n', '\t\n', '\t/**\n', '     * @dev Function to withdraw the ACO pools stucked asset.\n', '     * @param asset Address of the asset.\n', '\t * @param destination Address of the destination.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function withdrawStuckAssetOnAcoPool(address asset, address destination, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '\t\t_withdrawStuckAssetOnAcoPool(asset, destination, acoPools);\n', '\t}\n', '\t\n', '    /**\n', '     * @dev Internal function to set the factory admin address.\n', '     * @param newFactoryAdmin Address of the new factory admin.\n', '     */\n', '    function _setFactoryAdmin(address newFactoryAdmin) internal virtual {\n', '        require(newFactoryAdmin != address(0), "ACOPoolFactory::_setFactoryAdmin: Invalid factory admin");\n', '        emit SetFactoryAdmin(factoryAdmin, newFactoryAdmin);\n', '        factoryAdmin = newFactoryAdmin;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO pool implementation address.\n', '     * @param newAcoPoolImplementation Address of the new ACO pool implementation.\n', '     */\n', '    function _setAcoPoolImplementation(address newAcoPoolImplementation) internal virtual {\n', '        require(Address.isContract(newAcoPoolImplementation), "ACOPoolFactory::_setAcoPoolImplementation: Invalid ACO pool implementation");\n', '        emit SetAcoPoolImplementation(acoPoolImplementation, newAcoPoolImplementation);\n', '        acoPoolImplementation = newAcoPoolImplementation;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO factory address.\n', '     * @param newAcoFactory Address of the new ACO token factory.\n', '     */\n', '    function _setAcoFactory(address newAcoFactory) internal virtual {\n', '        require(Address.isContract(newAcoFactory), "ACOPoolFactory::_setAcoFactory: Invalid ACO factory");\n', '        emit SetAcoFactory(acoFactory, newAcoFactory);\n', '        acoFactory = newAcoFactory;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the asset converter helper address.\n', '     * @param newAssetConverterHelper Address of the new asset converter helper.\n', '     */\n', '    function _setAssetConverterHelper(address newAssetConverterHelper) internal virtual {\n', '        require(Address.isContract(newAssetConverterHelper), "ACOPoolFactory::_setAssetConverterHelper: Invalid asset converter helper");\n', '        emit SetAssetConverterHelper(assetConverterHelper, newAssetConverterHelper);\n', '        assetConverterHelper = newAssetConverterHelper;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the Chi Token address.\n', '     * @param newChiToken Address of the new Chi Token.\n', '     */\n', '    function _setChiToken(address newChiToken) internal virtual {\n', '        require(Address.isContract(newChiToken), "ACOPoolFactory::_setChiToken: Invalid Chi Token");\n', '        emit SetChiToken(chiToken, newChiToken);\n', '        chiToken = newChiToken;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO Pool fee.\n', '     * @param newAcoPoolFee Value of the new ACO Pool fee. It is a percentage value (100000 is 100%).\n', '     */\n', '    function _setAcoPoolFee(uint256 newAcoPoolFee) internal virtual {\n', '        emit SetAcoPoolFee(acoPoolFee, newAcoPoolFee);\n', '        acoPoolFee = newAcoPoolFee;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO Pool fee destination address.\n', '     * @param newAcoPoolFeeDestination Address of the new ACO Pool fee destination.\n', '     */\n', '    function _setAcoPoolFeeDestination(address newAcoPoolFeeDestination) internal virtual {\n', '        require(newAcoPoolFeeDestination != address(0), "ACOFactory::_setAcoPoolFeeDestination: Invalid ACO Pool fee destination");\n', '        emit SetAcoPoolFeeDestination(acoPoolFeeDestination, newAcoPoolFeeDestination);\n', '        acoPoolFeeDestination = newAcoPoolFeeDestination;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO Pool penalty percentage on withdrawing open positions.\n', '     * @param newWithdrawOpenPositionPenalty Value of the new ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\n', '     */\n', '    function _setAcoPoolWithdrawOpenPositionPenalty(uint256 newWithdrawOpenPositionPenalty) internal virtual {\n', '        emit SetAcoPoolWithdrawOpenPositionPenalty(acoPoolWithdrawOpenPositionPenalty, newWithdrawOpenPositionPenalty);\n', '        acoPoolWithdrawOpenPositionPenalty = newWithdrawOpenPositionPenalty;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO Pool underlying price percentage adjust.\n', '     * @param newUnderlyingPriceAdjustPercentage Value of the new ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\n', '     */\n', '    function _setAcoPoolUnderlyingPriceAdjustPercentage(uint256 newUnderlyingPriceAdjustPercentage) internal virtual {\n', '        emit SetAcoPoolUnderlyingPriceAdjustPercentage(acoPoolUnderlyingPriceAdjustPercentage, newUnderlyingPriceAdjustPercentage);\n', '        acoPoolUnderlyingPriceAdjustPercentage = newUnderlyingPriceAdjustPercentage;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the ACO Pool maximum number of open ACOs allowed.\n', '     * @param newMaximumOpenAco Value of the new ACO Pool maximum number of open ACOs allowed.\n', '     */\n', '    function _setAcoPoolMaximumOpenAco(uint256 newMaximumOpenAco) internal virtual {\n', '        emit SetAcoPoolMaximumOpenAco(acoPoolMaximumOpenAco, newMaximumOpenAco);\n', '        acoPoolMaximumOpenAco = newMaximumOpenAco;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO pool permission.\n', '     * @param poolAdmin Address of the pool admin.\n', '     * @param newPermission The permission to be set.\n', '     */\n', '    function _setAcoPoolPermission(address poolAdmin, bool newPermission) internal virtual {\n', '        emit SetAcoPoolPermission(poolAdmin, poolAdminPermission[poolAdmin], newPermission);\n', '        poolAdminPermission[poolAdmin] = newPermission;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO pool strategies permitted.\n', '     * @param strategy Address of the strategy.\n', '     * @param newPermission The permission to be set.\n', '     */\n', '    function _setAcoPoolStrategyPermission(address strategy, bool newPermission) internal virtual {\n', '        require(Address.isContract(strategy), "ACOPoolFactory::_setAcoPoolStrategy: Invalid strategy");\n', '        emit SetStrategyPermission(strategy, strategyPermitted[strategy], newPermission);\n', '        strategyPermitted[strategy] = newPermission;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to validate strategy.\n', '     * @param strategy Address of the strategy.\n', '     */\n', '    function _validateStrategy(address strategy) view internal virtual {\n', '        require(strategyPermitted[strategy], "ACOPoolFactory::_validateStrategy: Invalid strategy");\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to change the ACO pools strategy.\n', '     * @param strategy Address of the strategy to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setStrategyOnAcoPool(address strategy, address[] memory acoPools) internal virtual {\n', '        _validateStrategy(strategy);\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '            IACOPool2(acoPools[i]).setStrategy(strategy);\n', '        }\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Internal function to change the ACO pools ACO creator permission.\n', '     * @param acoCreator Address of the ACO creator.\n', '\t * @param permission Permission situation.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setValidAcoCreatorOnAcoPool(address acoCreator, bool permission, address[] memory acoPools) internal virtual {\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '            IACOPool2(acoPools[i]).setValidAcoCreator(acoCreator, permission);\n', '        }\n', '    }\n', '\t\n', '\t/**\n', '     * @dev Internal function to withdraw the ACO pools stucked asset.\n', '     * @param asset Address of the asset.\n', '\t * @param destination Address of the destination.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _withdrawStuckAssetOnAcoPool(address asset, address destination, address[] memory acoPools) internal virtual {\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '            IACOPool2(acoPools[i]).withdrawStuckToken(asset, destination);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to change the ACO pools an uint256 data.\n', '\t * @param selector Function selector to be called on the ACO pool.\n', '     * @param numbers Array of the numbers to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setAcoPoolUint256Data(bytes4 selector, uint256[] memory numbers, address[] memory acoPools) internal virtual {\n', '        require(numbers.length == acoPools.length, "ACOPoolFactory::_setAcoPoolUint256Data: Invalid arguments");\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '\t\t\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, numbers[i]));\n', '\t\t\trequire(success, "ACOPoolFactory::_setAcoPoolUint256Data");\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to change the ACO pools an address data.\n', '\t * @param selector Function selector to be called on the ACO pool.\n', '     * @param addresses Array of the addresses to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setAcoPoolAddressData(bytes4 selector, address[] memory addresses, address[] memory acoPools) internal virtual {\n', '        require(addresses.length == acoPools.length, "ACOPoolFactory::_setAcoPoolAddressData: Invalid arguments");\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '\t\t\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, addresses[i]));\n', '\t\t\trequire(success, "ACOPoolFactory::_setAcoPoolAddressData");\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to create a new ACO pool.\n', '     * @param initData Data to initialize o ACO Pool.\n', '     * @return Address of the new minimal proxy deployed for the ACO pool.\n', '     */\n', '    function _createAcoPool(IACOPool2.InitData memory initData) internal virtual returns(address) {\n', '        address acoPool  = _deployAcoPool(initData);\n', '        acoPoolBasicData[acoPool] = ACOPoolBasicData(initData.underlying, initData.strikeAsset, initData.isCall);\n', '        emit NewAcoPool(\n', '            initData.underlying, \n', '            initData.strikeAsset, \n', '            initData.isCall, \n', '            acoPool, \n', '            acoPoolImplementation\n', '        );\n', '        return acoPool;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to deploy a minimal proxy using ACO pool implementation.\n', '     * @param initData Data to initialize o ACO Pool.\n', '     * @return Address of the new minimal proxy deployed for the ACO pool.\n', '     */\n', '    function _deployAcoPool(IACOPool2.InitData memory initData) internal virtual returns(address) {\n', '        bytes20 implentationBytes = bytes20(acoPoolImplementation);\n', '        address proxy;\n', '        assembly {\n', '            let clone := mload(0x40)\n', '            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone, 0x14), implentationBytes)\n', '            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            proxy := create(0, clone, 0x37)\n', '        }\n', '        IACOPool2(proxy).init(initData);\n', '        return proxy;\n', '    }\n', '}\n', '\n', 'contract ACOPoolFactory2V2 is ACOPoolFactory2 {\n', ' \n', '    /**\n', '     * @dev Emitted when the lending pool has been changed.\n', '     * @param oldLendingPool Address of the previous lending pool.\n', '     * @param newLendingPool Address of the new lending pool.\n', '     */\n', '    event SetAcoPoolLendingPool(address indexed oldLendingPool, address indexed newLendingPool);\n', '    \n', '    /**\n', '     * @dev Emitted when the lending pool referral has been changed.\n', '     * @param oldLendingPoolReferral Value of the previous lending pool referral.\n', '     * @param newLendingPoolReferral Value of the new lending pool referral.\n', '     */\n', '    event SetAcoPoolLendingPoolReferral(uint256 indexed oldLendingPoolReferral, uint256 indexed newLendingPoolReferral);\n', '    \n', '    /**\n', '\t * @dev Value of the lending pool referral.\n', '\t */\n', '\tuint16 public lendingPoolReferral;\n', '\t\n', '\t/**\n', '\t * @dev Address of the lending pool.\n', '\t */\n', '\taddress public lendingPool;\n', '    \n', '    /**\n', '     * @dev Function to set the lending pool.\n', '     * Only can be called by the factory admin.\n', '     * @param newLendingPool Address of the new lending pool.\n', '     */\n', '    function setAcoPoolLendingPool(address newLendingPool) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolLendingPool(newLendingPool);\n', '    }   \n', '\n', '    /**\n', '     * @dev Function to set the lending pool referral.\n', '     * Only can be called by the factory admin.\n', '     * @param newLendingPoolReferral Value of the new lending pool referral.\n', '     */\n', '    function setAcoPoolLendingPoolReferral(uint16 newLendingPoolReferral) onlyFactoryAdmin external virtual {\n', '        _setAcoPoolLendingPoolReferral(newLendingPoolReferral);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to change the ACO pools fee data.\n', '     * Only can be called by a pool admin.\n', '     * @param feeDestinations Array of the fee destinations addresses.\n', '     * @param fees Array of the fee percentages.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setFeeDataOnAcoPool(address[] calldata feeDestinations, uint256[] calldata fees, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolAddressUint256Data(IACOPool2.setFeeData.selector, feeDestinations, fees, acoPools);\n', '    }\n', '    \n', '     /**\n', '     * @dev Function to change the ACO pools restrictons for an ACO data.\n', '     * Only can be called by a pool admin.\n', '     * @param tolerancePricesBelow Array of the below tolerance price percentages.\n', '     * @param tolerancePricesAbove Array of the above tolerance price percentages.\n', '     * @param minExpirations Array of the minimum expirations.\n', '     * @param maxExpirations Array of the maximum expirations.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setAcoPermissionDataOnAcoPool(\n', '        uint256[] calldata tolerancePricesBelow, \n', '        uint256[] calldata tolerancePricesAbove, \n', '        uint256[] calldata minExpirations,\n', '        uint256[] calldata maxExpirations,\n', '        address[] calldata acoPools\n', '    ) onlyPoolAdmin external virtual {\n', '        require(tolerancePricesBelow.length == tolerancePricesAbove.length \n', '            && tolerancePricesAbove.length == minExpirations.length\n', '            && minExpirations.length == maxExpirations.length\n', '            && maxExpirations.length == acoPools.length, "ACOPoolFactory::setAcoPermissionDataOnAcoPool: Invalid arguments");\n', '        \n', '        bytes4 selector = IACOPool2.setPoolDataForAcoPermission.selector;\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '\t\t\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, tolerancePricesBelow[i], tolerancePricesAbove[i], minExpirations[i], maxExpirations[i]));\n', '\t\t\trequire(success, "ACOPoolFactory::setAcoPermissionDataOnAcoPool");\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to change the ACO pools lending pool referrals.\n', '     * Only can be called by a pool admin.\n', '     * @param lendingPoolReferrals Array of the lending pool referrals.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function setLendingPoolReferralOnAcoPool(uint256[] calldata lendingPoolReferrals, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '        _setAcoPoolUint256Data(IACOPool2.setLendingPoolReferral.selector, lendingPoolReferrals, acoPools);\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the lending pool.\n', '     * @param newLendingPool Address of the new lending pool.\n', '     */\n', '    function _setAcoPoolLendingPool(address newLendingPool) internal virtual {\n', '        emit SetAcoPoolLendingPool(lendingPool, newLendingPool);\n', '        lendingPool = newLendingPool;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the lending pool referral.\n', '     * @param newLendingPoolReferral Value of the new lending pool referral.\n', '     */\n', '    function _setAcoPoolLendingPoolReferral(uint16 newLendingPoolReferral) internal virtual {\n', '        emit SetAcoPoolLendingPoolReferral(lendingPoolReferral, newLendingPoolReferral);\n', '        lendingPoolReferral = newLendingPoolReferral;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to change the ACO pools an address and a number data.\n', '\t * @param selector Function selector to be called on the ACO pool.\n', '     * @param addresses Array of the addresses to be set.\n', '     * @param numbers Array of the numbers to be set.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setAcoPoolAddressUint256Data(bytes4 selector, address[] memory addresses, uint256[] memory numbers, address[] memory acoPools) internal virtual {\n', '        require(addresses.length == acoPools.length && numbers.length == acoPools.length, "ACOPoolFactory::_setAcoPoolAddressUint256Data: Invalid arguments");\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '\t\t\t(bool success,) = acoPools[i].call(abi.encodeWithSelector(selector, addresses[i], numbers[i]));\n', '\t\t\trequire(success, "ACOPoolFactory::_setAcoPoolAddressUint256Data");\n', '        }\n', '    }\n', '}\n', '\n', 'contract ACOPoolFactory2V3 is ACOPoolFactory2V2 {\n', '\n', '    /**\n', '     * @dev Emitted when the operator address permission has been changed.\n', '     * @param operator Address of the operator.\n', '     * @param previousPermission Whether the operator was authorized.\n', '     * @param newPermission Whether the operator will be authorized.\n', '     */\n', '    event SetOperator(address indexed operator, bool indexed previousPermission, bool indexed newPermission);\n', '    \n', '    /**\n', '     * @dev Emitted when a ACO creator address permission has been changed.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param previousPermission Whether the creator was authorized.\n', '     * @param newPermission Whether the creator will be authorized.\n', '     */\n', '    event SetAuthorizedAcoCreator(address indexed acoCreator, bool indexed previousPermission, bool indexed newPermission);\n', '\n', '    /**\n', '     * @dev A map to register the ACO Fool Factory operators permissions.\n', '     */\n', '    mapping(address => bool) public operators;\n', '    \n', '    /**\n', '     * @dev A map to register the ACO Pool creator.\n', '     */\n', '    mapping(address => address) public creators;\n', '    \n', '    /**\n', '     * @dev Addresses of authorized ACO creators for a pool.\n', '     */\n', '    address[] internal acoAuthorizedCreators;\n', '    \n', '    /**\n', '     * @dev Function to get the number of ACO creators authorized for a pool.\n', '     * @return The number of ACO creators authorized.\n', '     */\n', '    function getNumberOfAcoCreatorsAuthorized() view external virtual returns(uint256) {\n', '        return acoAuthorizedCreators.length;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to get the address of ACO creators authorized.\n', '     * @param index The index of the ACO creator.\n', '     * @return The address of ACO creators authorized.\n', '     */\n', '    function getAcoCreatorAuthorized(uint256 index) view external virtual returns(address) {\n', '        return acoAuthorizedCreators[index];\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the operator permission.\n', '     * @param operator Address of the operator.\n', '     * @param newPermission Whether the operator will be authorized.\n', '     */\n', '    function setOperator(address operator, bool newPermission) onlyFactoryAdmin external virtual {\n', '        _setOperator(operator, newPermission);\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to set the ACO creator permission.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param newPermission Whether the creator will be authorized.\n', '     */\n', '    function setAuthorizedAcoCreator(address acoCreator, bool newPermission) onlyFactoryAdmin external virtual {\n', '        _setAuthorizedAcoCreator(acoCreator, newPermission);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to change the ACO pools protocol config.\n', '     * Only can be called by a pool admin.\n', '     * @param lendingPoolReferral The value of the lending pool referral.\n', '     * @param withdrawOpenPositionPenalty Value of the ACO Pool penalty percentage on withdrawing open positions. It is a percentage value (100000 is 100%).\n', '     * @param underlyingPriceAdjustPercentage Value of the ACO Pool underlying price percentage adjust. It is a percentage value (100000 is 100%).\n', '     * @param fee Value of the ACO Pool fee percentage. It is a percentage value (100000 is 100%).\n', '     * @param maximumOpenAco Value of the ACO Pool maximum number of open ACOs allowed.\n', '     * @param feeDestination Address of the ACO Pool fee destination.\n', '     * @param assetConverter Address of the asset converter helper.\n', '     */\n', '    function setProtocolConfigOnAcoPool(\n', '        uint16 lendingPoolReferral,\n', '        uint256 withdrawOpenPositionPenalty,\n', '        uint256 underlyingPriceAdjustPercentage,\n', '        uint256 fee,\n', '        uint256 maximumOpenAco,\n', '        address feeDestination,\n', '        address assetConverter, \n', '        address[] calldata acoPools\n', '    ) onlyPoolAdmin external virtual {\n', '        IACOPool2.PoolProtocolConfig memory config = IACOPool2.PoolProtocolConfig(lendingPoolReferral, withdrawOpenPositionPenalty, underlyingPriceAdjustPercentage, fee, maximumOpenAco, feeDestination, assetConverter);\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '            IACOPool2(acoPools[i]).setProtocolConfig(config);\n', '        }\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the operator permission.\n', '     * @param operator Address of the operator.\n', '     * @param newPermission Whether the operator will be authorized.\n', '     */\n', '    function _setOperator(address operator, bool newPermission) internal virtual {\n', '        emit SetOperator(operator, operators[operator], newPermission);\n', '        operators[operator] = newPermission;\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to set the ACO creator permission.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param newPermission Whether the creator will be authorized.\n', '     */\n', '    function _setAuthorizedAcoCreator(address acoCreator, bool newPermission) internal virtual {\n', '        bool previousPermission = false;\n', '        uint256 size = acoAuthorizedCreators.length;\n', '        for (uint256 i = size; i > 0; --i) {\n', '            if (acoAuthorizedCreators[i - 1] == acoCreator) {\n', '                previousPermission = true;\n', '                if (!newPermission) {\n', '                    if (i < size) {\n', '                        acoAuthorizedCreators[i - 1] = acoAuthorizedCreators[(size - 1)];\n', '                    }\n', '                    acoAuthorizedCreators.pop();\n', '                }\n', '                break;\n', '            }\n', '        }\n', '        if (newPermission && !previousPermission) {\n', '            acoAuthorizedCreators.push(acoCreator);\n', '        }\n', '        emit SetAuthorizedAcoCreator(acoCreator, previousPermission, newPermission);\n', '    }\n', '}\n', '\n', 'contract ACOPoolFactory2V4 is ACOPoolFactory2V3 {\n', '\n', '    /**\n', '     * @dev Emitted when the pool proxy admin address has been changed.\n', '     * @param previousPoolProxyAdmin Address of the previous pool proxy admin.\n', '     * @param newPoolProxyAdmin Address of the new pool proxy admin.\n', '     */\n', '    event SetPoolProxyAdmin(address indexed previousPoolProxyAdmin, address indexed newPoolProxyAdmin);\n', '\n', '    /**\n', '     * @dev Emitted when a ACO creator address forbidden status has been changed.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param previousStatus Whether the creator was forbidden.\n', '     * @param newStatus Whether the creator will be forbidden.\n', '     */\n', '    event SetForbiddenAcoCreator(address indexed acoCreator, bool indexed previousStatus, bool indexed newStatus);\n', '\n', '    /**\n', '     * @dev The factory admin address.\n', '     */\n', '    address public poolProxyAdmin;\n', '\n', '    /**\n', '     * @dev Addresses of forbidden ACO creators for a pool.\n', '     */\n', '    address[] internal acoForbiddenCreators;\n', '    \n', '    /**\n', '     * @dev Function to set the pool proxy admin address.\n', '     * Only can be called by the factory admin.\n', '     * @param newPoolProxyAdmin Address of the new pool proxy admin.\n', '     */\n', '    function setPoolProxyAdmin(address newPoolProxyAdmin) onlyFactoryAdmin external virtual {\n', '        _setPoolProxyAdmin(newPoolProxyAdmin);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to update the pool implementation address.\n', '     * Only can be called by the pool proxy admin.\n', '     * @param pools Addresses of the new pools.\n', '     * @param initData Init data for the pool implementation.\n', '     */\n', '    function updatePoolsImplementation(\n', '        address payable[] calldata pools,\n', '        bytes calldata initData\n', '    ) external virtual {\n', '        require(poolProxyAdmin == msg.sender, "ACOPoolFactory::onlyPoolProxyAdmin");\n', '        for (uint256 i = 0; i < pools.length; ++i) {\n', '            ACOProxy(pools[i]).setImplementation(acoPoolImplementation, initData);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to transfer the pool proxy admin.\n', '     * Only can be called by the pool proxy admin.\n', '     * @param newPoolProxyAdmin Address of the new pool proxy admin.\n', '     * @param pools Addresses of the new pools.\n', '     */\n', '    function transferPoolProxyAdmin(address newPoolProxyAdmin, address payable[] calldata pools) external virtual {\n', '        require(poolProxyAdmin == msg.sender, "ACOPoolFactory::onlyPoolProxyAdmin");\n', '        for (uint256 i = 0; i < pools.length; ++i) {\n', '            ACOProxy(pools[i]).transferProxyAdmin(newPoolProxyAdmin);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Function to get the number of ACO creators forbidden for a pool.\n', '     * @return The number of ACO creators forbidden.\n', '     */\n', '    function getNumberOfAcoCreatorsForbidden() view external virtual returns(uint256) {\n', '        return acoForbiddenCreators.length;\n', '    }\n', '    \n', '    /**\n', '     * @dev Function to get the address of ACO creators forbidden.\n', '     * @param index The index of the ACO creator.\n', '     * @return The address of ACO creators forbidden.\n', '     */\n', '    function getAcoCreatorForbidden(uint256 index) view external virtual returns(address) {\n', '        return acoForbiddenCreators[index];\n', '    }\n', '\n', '    /**\n', '     * @dev Function to set the ACO creator forbidden status.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param newStatus Whether the creator will be forbidden.\n', '     */\n', '    function setForbiddenAcoCreator(address acoCreator, bool newStatus) onlyFactoryAdmin external virtual {\n', '        _setForbiddenAcoCreator(acoCreator, newStatus);\n', '    }\n', '\n', '    /**\n', '     * @dev Function to change the ACO pools ACO creator forbidden situation.\n', '     * Only can be called by a pool admin.\n', '     * @param acoCreator Address of the ACO creator.\n', '\t * @param status Forbidden situation.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '\tfunction setForbiddenAcoCreatorOnAcoPool(address acoCreator, bool status, address[] calldata acoPools) onlyPoolAdmin external virtual {\n', '\t\t_setForbiddenAcoCreatorOnAcoPool(acoCreator, status, acoPools);\n', '\t}\n', '\n', '    /**\n', '     * @dev Function to create a new ACO pool.\n', '     * It deploys a minimal proxy for the ACO pool implementation address. \n', '     * @param underlying Address of the underlying asset (0x0 for Ethereum).\n', '     * @param strikeAsset Address of the strike asset (0x0 for Ethereum).\n', '     * @param isCall True if the type is CALL, false for PUT.\n', '     * @param baseVolatility The base volatility for the pool starts. It is a percentage value (100000 is 100%).\n', '     * @param poolAdmin Address of the pool admin.\n', '     * @param strategy Address of the pool strategy to be used.\n', '     * @param acoPermissionConfig The configuration data for the ACO permission on the pool.\n', '     * @return The created ACO pool address.\n', '     */\n', '    function createAcoPool(\n', '        address underlying, \n', '        address strikeAsset, \n', '        bool isCall,\n', '        uint256 baseVolatility,\n', '        address poolAdmin,\n', '        address strategy,\n', '        IACOPool2.PoolAcoPermissionConfig calldata acoPermissionConfig\n', '    ) external virtual returns(address) {\n', '        require((operators[address(0)] || operators[msg.sender]), "ACOPoolFactory2::createAcoPool: Only authorized operators");\n', '        return _createAcoPool(IACOPool2.InitData(\n', '            acoFactory,\n', '            chiToken,\n', '            lendingPool,\n', '            underlying, \n', '            strikeAsset,\n', '            isCall,\n', '            baseVolatility,\n', '            poolAdmin,\n', '            strategy,\n', '            acoPermissionConfig,\n', '            IACOPool2.PoolProtocolConfig(\n', '                lendingPoolReferral,\n', '                acoPoolWithdrawOpenPositionPenalty,\n', '                acoPoolUnderlyingPriceAdjustPercentage,\n', '                acoPoolFee,\n', '                acoPoolMaximumOpenAco,\n', '                acoPoolFeeDestination,\n', '                assetConverterHelper\n', '            )\n', '        ));\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to deploy a proxy using ACO pool implementation.\n', '     * @param initData Data to initialize o ACO Pool.\n', '     * @return Address of the new proxy deployed for the ACO pool.\n', '     */\n', '    function _deployAcoPool(IACOPool2.InitData memory initData) internal override virtual returns(address) {\n', '        ACOProxy proxy = new ACOProxy(address(this), acoPoolImplementation, abi.encodeWithSelector(IACOPool2.init.selector, initData));\n', '        return address(proxy);\n', '    }\n', '    \n', '    /**\n', '     * @dev Internal function to create a new ACO pool.\n', '     * @param initData Data to initialize o ACO Pool.\n', '     * @return Address of the new minimal proxy deployed for the ACO pool.\n', '     */\n', '    function _createAcoPool(IACOPool2.InitData memory initData) internal override virtual returns(address) {\n', '        address acoPool  = _deployAcoPool(initData);\n', '        acoPoolBasicData[acoPool] = ACOPoolBasicData(initData.underlying, initData.strikeAsset, initData.isCall);\n', '        creators[acoPool] = msg.sender;\n', '        for (uint256 i = 0; i < acoAuthorizedCreators.length; ++i) {\n', '            IACOPool2(acoPool).setValidAcoCreator(acoAuthorizedCreators[i], true);\n', '        }\n', '        for (uint256 j = 0; j < acoForbiddenCreators.length; ++j) {\n', '            IACOPool2(acoPool).setForbiddenAcoCreator(acoForbiddenCreators[j], true);\n', '        }\n', '        emit NewAcoPool(initData.underlying, initData.strikeAsset, initData.isCall, acoPool, acoPoolImplementation);\n', '        return acoPool;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the pool proxy admin address.\n', '     * @param newPoolProxyAdmin Address of the new pool proxy admin.\n', '     */\n', '    function _setPoolProxyAdmin(address newPoolProxyAdmin) internal virtual {\n', '        require(newPoolProxyAdmin != address(0), "ACOPoolFactory::_setPoolProxyAdmin: Invalid pool proxy admin");\n', '        emit SetPoolProxyAdmin(poolProxyAdmin, newPoolProxyAdmin);\n', '        poolProxyAdmin = newPoolProxyAdmin;\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to set the ACO creator forbidden status.\n', '     * @param acoCreator Address of the ACO creator.\n', '     * @param newStatus Whether the creator will be forbidden.\n', '     */\n', '    function _setForbiddenAcoCreator(address acoCreator, bool newStatus) internal virtual {\n', '        bool previousStatus = false;\n', '        uint256 size = acoForbiddenCreators.length;\n', '        for (uint256 i = size; i > 0; --i) {\n', '            if (acoForbiddenCreators[i - 1] == acoCreator) {\n', '                previousStatus = true;\n', '                if (!newStatus) {\n', '                    if (i < size) {\n', '                        acoForbiddenCreators[i - 1] = acoForbiddenCreators[(size - 1)];\n', '                    }\n', '                    acoForbiddenCreators.pop();\n', '                }\n', '                break;\n', '            }\n', '        }\n', '        if (newStatus && !previousStatus) {\n', '            acoForbiddenCreators.push(acoCreator);\n', '        }\n', '        emit SetForbiddenAcoCreator(acoCreator, previousStatus, newStatus);\n', '    }\n', '\n', '    /**\n', '     * @dev Internal function to change the ACO pools ACO creator forbidden situation.\n', '     * @param acoCreator Address of the ACO creator.\n', '\t * @param status Forbidden situation.\n', '     * @param acoPools Array of ACO pools addresses.\n', '     */\n', '    function _setForbiddenAcoCreatorOnAcoPool(address acoCreator, bool status, address[] memory acoPools) internal virtual {\n', '        for (uint256 i = 0; i < acoPools.length; ++i) {\n', '            IACOPool2(acoPools[i]).setForbiddenAcoCreator(acoCreator, status);\n', '        }\n', '    }\n', '}']