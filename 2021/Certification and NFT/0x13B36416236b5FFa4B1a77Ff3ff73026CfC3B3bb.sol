['// SPDX-License-Identifier: P-P-P-PONZO!!!\n', 'pragma solidity ^0.7.4;\n', '\n', '/* ROOTKIT:\n', 'A floor calculator to use with ERC31337 uniswap pairs\n', 'Ensures 100% of accessible funds are backed at all times\n', '*/\n', '\n', 'import "./IFloorCalculator.sol";\n', 'import "./SafeMath.sol";\n', 'import "./UniswapV2Library.sol";\n', 'import "./IUniswapV2Factory.sol";\n', 'import "./TokensRecoverable.sol";\n', 'import "./EnumerableSet.sol";\n', '\n', 'contract EliteFloorCalculator is IFloorCalculator, TokensRecoverable\n', '{\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    IERC20 immutable rootedToken;\n', '    IUniswapV2Factory immutable uniswapV2Factory;\n', '    EnumerableSet.AddressSet ignoredAddresses;\n', '\n', '    constructor(IERC20 _rootedToken, IUniswapV2Factory _uniswapV2Factory)\n', '    {\n', '        rootedToken = _rootedToken;\n', '        uniswapV2Factory = _uniswapV2Factory;\n', '    }    \n', '\n', '    function setIgnoreAddresses(address ignoredAddress, bool add) public ownerOnly()\n', '    {\n', '        if (add) \n', '        { \n', '            ignoredAddresses.add(ignoredAddress); \n', '        } \n', '        else \n', '        { \n', '            ignoredAddresses.remove(ignoredAddress); \n', '        }\n', '    }\n', '\n', '    function isIgnoredAddress(address ignoredAddress) public view returns (bool)\n', '    {\n', '        return ignoredAddresses.contains(ignoredAddress);\n', '    }\n', '\n', '    function ignoredAddressCount() public view returns (uint256)\n', '    {\n', '        return ignoredAddresses.length();\n', '    }\n', '\n', '    function ignoredAddressAt(uint256 index) public view returns (address)\n', '    {\n', '        return ignoredAddresses.at(index);\n', '    }\n', '\n', '    function ignoredAddressesTotalBalance() public view returns (uint256)\n', '    {\n', '        uint256 total = 0;\n', '        for (uint i = 0; i < ignoredAddresses.length(); i++) {\n', '            total = total.add(rootedToken.balanceOf(ignoredAddresses.at(i)));\n', '        }\n', '\n', '        return total;\n', '    }\n', '\n', '    function calculateExcessInPool(IERC20 token, address pair, uint256 liquidityShare, uint256 rootedTokenotalSupply, uint256 rootedTokenPoolsLiquidity) internal view returns (uint256)\n', '    {\n', '        uint256 freeRootedToken = (rootedTokenotalSupply.sub(rootedTokenPoolsLiquidity)).mul(liquidityShare).div(1e12);\n', '\n', '        uint256 sellAllProceeds = 0;\n', '        if (freeRootedToken > 0) {\n', '            address[] memory path = new address[](2);\n', '            path[0] = address(rootedToken);\n', '            path[1] = address(token);\n', '            uint256[] memory amountsOut = UniswapV2Library.getAmountsOut(address(uniswapV2Factory), freeRootedToken, path);\n', '            sellAllProceeds = amountsOut[1];\n', '        }\n', '\n', '        uint256 backingInPool = token.balanceOf(pair);\n', '        if (backingInPool <= sellAllProceeds) { return 0; }\n', '        uint256 excessInPool = backingInPool - sellAllProceeds;\n', '\n', '        return excessInPool;\n', '    }\n', '\n', '    function calculateExcessInPools(IERC20 wrappedToken, IERC20 backingToken) public view returns (uint256)\n', '    {\n', '        address kethPair = UniswapV2Library.pairFor(address(uniswapV2Factory), address(rootedToken), address(backingToken));\n', '        address wethPair = UniswapV2Library.pairFor(address(uniswapV2Factory), address(rootedToken), address(wrappedToken));   \n', '        \n', '        uint256 rootedTokenotalSupply = rootedToken.totalSupply().sub(ignoredAddressesTotalBalance());\n', '        uint256 rootedTokenPoolsLiquidity = rootedToken.balanceOf(kethPair).add(rootedToken.balanceOf(wethPair));\n', '        uint256 ethPoolsLiquidity = backingToken.balanceOf(kethPair).add(wrappedToken.balanceOf(wethPair));\n', '\n', '        uint256 rootLiquidityShareInKethPair = rootedToken.balanceOf(kethPair).mul(1e12).div(rootedTokenPoolsLiquidity);\n', '        uint256 kethLiquidityShareInKethPair = backingToken.balanceOf(kethPair).mul(1e12).div(ethPoolsLiquidity);\n', '        uint256 avgLiquidityShareInKethPair = (rootLiquidityShareInKethPair.add(kethLiquidityShareInKethPair)).div(2);\n', '        uint256 one = 1e12;\n', '\n', '        uint256 excessInKethPool = calculateExcessInPool(backingToken, kethPair, avgLiquidityShareInKethPair, rootedTokenotalSupply, rootedTokenPoolsLiquidity);\n', '        uint256 excessInWethPool = calculateExcessInPool(wrappedToken, wethPair, (one).sub(avgLiquidityShareInKethPair), rootedTokenotalSupply, rootedTokenPoolsLiquidity);\n', '        return excessInKethPool.add(excessInWethPool);\n', '    }\n', '\n', '    function calculateSubFloor(IERC20 wrappedToken, IERC20 backingToken) public override view returns (uint256) // backing token = keth\n', '    {        \n', '        uint256 excessInPools = calculateExcessInPools(wrappedToken, backingToken);\n', '\n', '        uint256 requiredBacking = backingToken.totalSupply().sub(excessInPools);\n', '        uint256 currentBacking = wrappedToken.balanceOf(address(backingToken));\n', '        if (requiredBacking >= currentBacking) { return 0; }\n', '        return currentBacking - requiredBacking;\n', '    }\n', '}']