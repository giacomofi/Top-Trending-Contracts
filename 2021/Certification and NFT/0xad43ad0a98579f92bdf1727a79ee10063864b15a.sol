['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-20\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IMVDProxy {\n', '\n', '    function init(address votingTokenAddress, address functionalityProposalManagerAddress, address stateHolderAddress, address functionalityModelsManagerAddress, address functionalitiesManagerAddress, address walletAddress, address doubleProxyAddress) external;\n', '\n', '    function getDelegates() external view returns(address[] memory);\n', '    function getToken() external view returns(address);\n', '    function getMVDFunctionalityProposalManagerAddress() external view returns(address);\n', '    function getStateHolderAddress() external view returns(address);\n', '    function getMVDFunctionalityModelsManagerAddress() external view returns(address);\n', '    function getMVDFunctionalitiesManagerAddress() external view returns(address);\n', '    function getMVDWalletAddress() external view returns(address);\n', '    function getDoubleProxyAddress() external view returns(address);\n', '    function setDelegate(uint256 position, address newAddress) external returns(address oldAddress);\n', '    function changeProxy(address newAddress, bytes calldata initPayload) external;\n', '    function isValidProposal(address proposal) external view returns (bool);\n', '    function newProposal(string calldata codeName, bool emergency, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnParametersJSONArray, bool isInternal, bool needsSender, string calldata replaces) external returns(address proposalAddress);\n', '    function startProposal(address proposalAddress) external;\n', '    function disableProposal(address proposalAddress) external;\n', '    function transfer(address receiver, uint256 value, address token) external;\n', '    function transfer721(address receiver, uint256 tokenId, bytes calldata data, bool safe, address token) external;\n', '    function flushToWallet(address tokenAddress, bool is721, uint256 tokenId) external;\n', '    function setProposal() external;\n', '    function read(string calldata codeName, bytes calldata data) external view returns(bytes memory returnData);\n', '    function submit(string calldata codeName, bytes calldata data) external payable returns(bytes memory returnData);\n', '    function callFromManager(address location, bytes calldata payload) external returns(bool, bytes memory);\n', '    function emitFromManager(string calldata codeName, address proposal, string calldata replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address location, bool submitable, string calldata methodSignature, bool isInternal, bool needsSender, address proposalAddress) external;\n', '\n', '    function emitEvent(string calldata eventSignature, bytes calldata firstIndex, bytes calldata secondIndex, bytes calldata data) external;\n', '\n', '    event ProxyChanged(address indexed newAddress);\n', '    event DelegateChanged(uint256 position, address indexed oldAddress, address indexed newAddress);\n', '\n', '    event Proposal(address proposal);\n', '    event ProposalCheck(address indexed proposal);\n', '    event ProposalSet(address indexed proposal, bool success);\n', '    event FunctionalitySet(string codeName, address indexed proposal, string replaced, address replacedSourceLocation, uint256 replacedSourceLocationId, address indexed replacedLocation, bool replacedWasSubmitable, string replacedMethodSignature, bool replacedWasInternal, bool replacedNeededSender, address indexed replacedProposal);\n', '\n', '    event Event(string indexed key, bytes32 indexed firstIndex, bytes32 indexed secondIndex, bytes data);\n', '}\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IVotingToken {\n', '    function init(string calldata name, string calldata symbol, uint256 decimals, uint256 totalSupply) external;\n', '\n', '    function getProxy() external view returns (address);\n', '    function setProxy() external;\n', '\n', '    function name() external view returns(string memory);\n', '    function symbol() external view returns(string memory);\n', '    function decimals() external view returns(uint256);\n', '\n', '    function mint(uint256 amount) external;\n', '    function burn(uint256 amount) external;\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', 'interface IMVDFunctionalityProposalManager {\n', '    function newProposal(string calldata codeName, address location, string calldata methodSignature, string calldata returnAbiParametersArray, string calldata replaces) external returns(address);\n', '    function checkProposal(address proposalAddress) external;\n', '    function getProxy() external view returns (address);\n', '    function setProxy() external;\n', '    function isValidProposal(address proposal) external view returns (bool);\n', '}\n', '\n', 'interface IMVDFunctionalitiesManager {\n', '\n', '    function getProxy() external view returns (address);\n', '    function setProxy() external;\n', '\n', '    function init(address sourceLocation,\n', '        uint256 getMinimumBlockNumberSourceLocationId, address getMinimumBlockNumberFunctionalityAddress,\n', '        uint256 getEmergencyMinimumBlockNumberSourceLocationId, address getEmergencyMinimumBlockNumberFunctionalityAddress,\n', '        uint256 getEmergencySurveyStakingSourceLocationId, address getEmergencySurveyStakingFunctionalityAddress,\n', '        uint256 checkVoteResultSourceLocationId, address checkVoteResultFunctionalityAddress) external;\n', '\n', '    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender) external;\n', '    function addFunctionality(string calldata codeName, address sourceLocation, uint256 sourceLocationId, address location, bool submitable, string calldata methodSignature, string calldata returnAbiParametersArray, bool isInternal, bool needsSender, uint256 position) external;\n', '    function removeFunctionality(string calldata codeName) external returns(bool removed, uint256 position);\n', '    function isValidFunctionality(address functionality) external view returns(bool);\n', '    function isAuthorizedFunctionality(address functionality) external view returns(bool);\n', '    function setCallingContext(address location) external returns(bool);\n', '    function clearCallingContext() external;\n', '    function getFunctionalityData(string calldata codeName) external view returns(address, uint256, string memory, address, uint256);\n', '    function hasFunctionality(string calldata codeName) external view returns(bool);\n', '    function getFunctionalitiesAmount() external view returns(uint256);\n', '    function functionalitiesToJSON() external view returns(string memory);\n', '    function functionalitiesToJSON(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\n', '    function functionalityNames() external view returns(string memory);\n', '    function functionalityNames(uint256 start, uint256 l) external view returns(string memory functionsJSONArray);\n', '    function functionalityToJSON(string calldata codeName) external view returns(string memory);\n', '\n', '    function preConditionCheck(string calldata codeName, bytes calldata data, uint8 submitable, address sender, uint256 value) external view returns(address location, bytes memory payload);\n', '\n', '    function setupFunctionality(address proposalAddress) external returns (bool);\n', '}\n', '\n', 'contract VotingToken is IERC20, IVotingToken {\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '    uint256 private _decimals;\n', '    address private _proxy;\n', '    string private _name;\n', '    string private _symbol;\n', '\n', '    constructor(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public {\n', '        if(totalSupply == 0) {\n', '            return;\n', '        }\n', '        init(name, symbol, decimals, totalSupply);\n', '    }\n', '\n', '    function init(string memory name, string memory symbol, uint256 decimals, uint256 totalSupply) public override {\n', '        require(_totalSupply == 0, "Init already called!");\n', '\n', '        _name = name;\n', '        _symbol = symbol;\n', '        _decimals = decimals;\n', '        _totalSupply = totalSupply * (10 ** decimals);\n', '        _balances[msg.sender] = _totalSupply;\n', '        emit Transfer(address(this), msg.sender, _totalSupply);\n', '    }\n', '\n', '    receive() external payable {\n', '        revert("ETH not accepted");\n', '    }\n', '\n', '    function getProxy() public override view returns(address) {\n', '        return _proxy;\n', '    }\n', '\n', '    function name() public override view returns(string memory) {\n', '        return _name;\n', '    }\n', '\n', '    function symbol() public override view returns(string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    function decimals() public override view returns(uint256) {\n', '        return _decimals;\n', '    }\n', '\n', '    function totalSupply() public override view returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    function balanceOf(address account) public override view returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    function transfer(address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(msg.sender, recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address owner, address spender) public override view returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    function approve(address spender, uint256 amount) public override returns (bool) {\n', '        _approve(msg.sender, spender, amount);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        address txSender = msg.sender;\n', '        if(_proxy == address(0) || !(IMVDFunctionalityProposalManager(IMVDProxy(_proxy).getMVDFunctionalityProposalManagerAddress()).isValidProposal(txSender) && recipient == txSender)) {\n', '            _approve(sender, txSender, _allowances[sender][txSender] = sub(_allowances[sender][txSender], amount, "ERC20: transfer amount exceeds allowance"));\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n', '        _approve(msg.sender, spender, add(_allowances[msg.sender][spender], addedValue));\n', '        return true;\n', '    }\n', '\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n', '        _approve(msg.sender, spender, sub(_allowances[msg.sender][spender], subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    function _transfer(address sender, address recipient, uint256 amount) internal {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _balances[sender] = sub(_balances[sender], amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = add(_balances[recipient], amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    function _approve(address owner, address spender, uint256 amount) internal {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256 c) {\n', '        require(b <= a, errorMessage);\n', '        c = a - b;\n', '    }\n', '\n', '    function setProxy() public override {\n', '        require(_totalSupply != 0, "Init not called!");\n', '        require(_proxy == address(0) || _proxy == msg.sender, _proxy != address(0) ? "Proxy already set!" : "Only Proxy can toggle itself!");\n', '        _proxy = _proxy == address(0) ?  msg.sender : address(0);\n', '    }\n', '\n', '    function mint(uint256 amount) public override {\n', '        require(IMVDFunctionalitiesManager(IMVDProxy(_proxy).getMVDFunctionalitiesManagerAddress()).isAuthorizedFunctionality(msg.sender), "Unauthorized access!");\n', '\n', '        _totalSupply = add(_totalSupply, amount);\n', '        _balances[_proxy] = add(_balances[_proxy], amount);\n', '        emit Transfer(address(0), _proxy, amount);\n', '    }\n', '\n', '    function burn(uint256 amount) public override {\n', '        _balances[msg.sender] = sub(_balances[msg.sender], amount, "VotingToken: burn amount exceeds balance");\n', '        _totalSupply = sub(_totalSupply, amount, "VotingToken: burn amount exceeds total supply");\n', '        emit Transfer(msg.sender, address(0), amount);\n', '    }\n', '}']