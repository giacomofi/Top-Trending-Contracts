['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-14\n', '*/\n', '\n', '/// SPDX-License-Identifier: MIT\n', '/*\n', '▄▄█    ▄   ██   █▄▄▄▄ ▄█ \n', '██     █  █ █  █  ▄▀ ██ \n', '██ ██   █ █▄▄█ █▀▀▌  ██ \n', '▐█ █ █  █ █  █ █  █  ▐█ \n', ' ▐ █  █ █    █   █    ▐ \n', '   █   ██   █   ▀   \n', '           ▀          */\n', '/// Special thanks to Keno, Boring and Gonpachi for review and continued inspiration.\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// File @boringcrypto/boring-solidity/contracts/libraries/[email\xa0protected]\n', '/// License-Identifier: MIT\n', '\n', '/// @notice A library for performing overflow-/underflow-safe math,\n', '/// updated with awesomeness from of DappHub (https://github.com/dapphub/ds-math).\n', 'library BoringMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a + b) >= b, "BoringMath: Add Overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require((c = a - b) <= a, "BoringMath: Underflow");\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n', '        require(b == 0 || (c = a * b) / b == a, "BoringMath: Mul Overflow");\n', '    }\n', '\n', '    function to128(uint256 a) internal pure returns (uint128 c) {\n', '        require(a <= uint128(-1), "BoringMath: uint128 Overflow");\n', '        c = uint128(a);\n', '    }\n', '\n', '    function to64(uint256 a) internal pure returns (uint64 c) {\n', '        require(a <= uint64(-1), "BoringMath: uint64 Overflow");\n', '        c = uint64(a);\n', '    }\n', '\n', '    function to32(uint256 a) internal pure returns (uint32 c) {\n', '        require(a <= uint32(-1), "BoringMath: uint32 Overflow");\n', '        c = uint32(a);\n', '    }\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from Aave lending pool.\n', 'interface IAaveBridge {\n', '    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n', '\n', '    function deposit( \n', '        address asset, \n', '        uint256 amount, \n', '        address onBehalfOf, \n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    function withdraw( \n', '        address token, \n', '        uint256 amount, \n', '        address destination\n', '    ) external;\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from BentoBox vault.\n', 'interface IBentoBridge {\n', '    function balanceOf(IERC20, address) external view returns (uint256);\n', '    \n', '    function registerProtocol() external;\n', '\n', '    function deposit( \n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external payable returns (uint256 amountOut, uint256 shareOut);\n', '\n', '    function withdraw(\n', '        IERC20 token_,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 share\n', '    ) external returns (uint256 amountOut, uint256 shareOut);\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from Compound finance protocol.\n', 'interface ICompoundBridge {\n', '    function underlying() external view returns (address);\n', '    function mint(uint mintAmount) external returns (uint);\n', '    function redeem(uint redeemTokens) external returns (uint);\n', '}\n', '\n', '/// @notice Interface for Dai Stablecoin (DAI) `permit()` primitive.\n', 'interface IDaiPermit {\n', '    function permit(\n', '        address holder,\n', '        address spender,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        bool allowed,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '/// @notice Interface for depositing into and withdrawing from SushiBar.\n', 'interface ISushiBarBridge { \n', '    function enter(uint256 amount) external;\n', '    function leave(uint256 share) external;\n', '}\n', '\n', '/// @notice Interface for SushiSwap.\n', 'interface ISushiSwap {\n', '    function deposit() external payable;\n', '    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n', '    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/interfaces/[email\xa0protected]\n', '/// License-Identifier: MIT\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '\n', '    /// @notice EIP 2612\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 value,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) external;\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/libraries/[email\xa0protected]\n', '/// License-Identifier: MIT\n', '\n', 'library BoringERC20 {\n', '    bytes4 private constant SIG_SYMBOL = 0x95d89b41; // symbol()\n', '    bytes4 private constant SIG_NAME = 0x06fdde03; // name()\n', '    bytes4 private constant SIG_DECIMALS = 0x313ce567; // decimals()\n', '    bytes4 private constant SIG_TRANSFER = 0xa9059cbb; // transfer(address,uint256)\n', '    bytes4 private constant SIG_TRANSFER_FROM = 0x23b872dd; // transferFrom(address,address,uint256)\n', '\n', '    /// @notice Provides a safe ERC20.transfer version for different ERC-20 implementations.\n', '    /// Reverts on a failed transfer.\n', '    /// @param token The address of the ERC-20 token.\n', '    /// @param to Transfer tokens to.\n', '    /// @param amount The token amount.\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: Transfer failed");\n', '    }\n', '\n', '    /// @notice Provides a safe ERC20.transferFrom version for different ERC-20 implementations.\n', '    /// Reverts on a failed transfer.\n', '    /// @param token The address of the ERC-20 token.\n', '    /// @param from Transfer tokens from.\n', '    /// @param to Transfer tokens to.\n', '    /// @param amount The token amount.\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        (bool success, bytes memory data) = address(token).call(abi.encodeWithSelector(SIG_TRANSFER_FROM, from, to, amount));\n', '        require(success && (data.length == 0 || abi.decode(data, (bool))), "BoringERC20: TransferFrom failed");\n', '    }\n', '}\n', '\n', '// File @boringcrypto/boring-solidity/contracts/[email\xa0protected]\n', '/// License-Identifier: MIT\n', '\n', 'contract BaseBoringBatchable {\n', '    /// @dev Helper function to extract a useful revert message from a failed call.\n', '    /// If the returned data is malformed or not correctly abi encoded then this call can fail itself.\n', '    function _getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n', '        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n', '        if (_returnData.length < 68) return "Transaction reverted silently";\n', '\n', '        assembly {\n', '            // Slice the sighash.\n', '            _returnData := add(_returnData, 0x04)\n', '        }\n', '        return abi.decode(_returnData, (string)); // All that remains is the revert string\n', '    }\n', '\n', '    /// @notice Allows batched call to self (this contract).\n', '    /// @param calls An array of inputs for each call.\n', '    /// @param revertOnFail If True then reverts after a failed call and stops doing further calls.\n', '    /// @return successes An array indicating the success of a call, mapped one-to-one to `calls`.\n', '    /// @return results An array with the returned data of each function call, mapped one-to-one to `calls`.\n', '    // F1: External is ok here because this is the batch function, adding it to a batch makes no sense\n', '    // F2: Calls in the batch may be payable, delegatecall operates in the same context, so each call in the batch has access to msg.value\n', "    // C3: The length of the loop is fully under user control, so can't be exploited\n", "    // C7: Delegatecall is only used on the same contract, so it's safe\n", '    function batch(bytes[] calldata calls, bool revertOnFail) external payable returns (bool[] memory successes, bytes[] memory results) {\n', '        successes = new bool[](calls.length);\n', '        results = new bytes[](calls.length);\n', '        for (uint256 i = 0; i < calls.length; i++) {\n', '            (bool success, bytes memory result) = address(this).delegatecall(calls[i]);\n', '            require(success || !revertOnFail, _getRevertMsg(result));\n', '            successes[i] = success;\n', '            results[i] = result;\n', '        }\n', '    }\n', '}\n', '\n', '/// @notice Extends `BoringBatchable` with DAI `permit()`.\n', 'contract BoringBatchableWithDai is BaseBoringBatchable {\n', '    address constant dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F; // DAI token contract\n', '    \n', '    /// @notice Call wrapper that performs `ERC20.permit` on `dai` using EIP 2612 primitive.\n', '    /// Lookup `IDaiPermit.permit`.\n', '    function permitDai(\n', '        address holder,\n', '        address spender,\n', '        uint256 nonce,\n', '        uint256 expiry,\n', '        bool allowed,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        IDaiPermit(dai).permit(holder, spender, nonce, expiry, allowed, v, r, s);\n', '    }\n', '    \n', '    /// @notice Call wrapper that performs `ERC20.permit` on `token`.\n', '    /// Lookup `IERC20.permit`.\n', "    // F6: Parameters can be used front-run the permit and the user's permit will fail (due to nonce or other revert)\n", '    //     if part of a batch this could be used to grief once as the second call would not need the permit\n', '    function permitToken(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 deadline,\n', '        uint8 v,\n', '        bytes32 r,\n', '        bytes32 s\n', '    ) public {\n', '        token.permit(from, to, amount, deadline, v, r, s);\n', '    }\n', '}\n', '\n', '/// @notice Contract that batches SUSHI staking and DeFi strategies - V1.\n', 'contract Inari is BoringBatchableWithDai {\n', '    using BoringMath for uint256;\n', '    using BoringERC20 for IERC20;\n', '    \n', '    IERC20 constant sushiToken = IERC20(0x6B3595068778DD592e39A122f4f5a5cF09C90fE2); // SUSHI token contract\n', '    address constant sushiBar = 0x8798249c2E607446EfB7Ad49eC89dD1865Ff4272; // xSUSHI staking contract for SUSHI\n', '    IAaveBridge constant aave = IAaveBridge(0x7d2768dE32b0b80b7a3454c06BdAc94A69DDc7A9); // AAVE lending pool contract for xSUSHI staking into aXSUSHI\n', '    IERC20 constant aaveSushiToken = IERC20(0xF256CC7847E919FAc9B808cC216cAc87CCF2f47a); // aXSUSHI staking contract for xSUSHI\n', '    IBentoBridge constant bento = IBentoBridge(0xF5BCE5077908a1b7370B9ae04AdC565EBd643966); // BENTO vault contract\n', '    address constant crSushiToken = 0x338286C0BC081891A4Bda39C7667ae150bf5D206; // crSUSHI staking contract for SUSHI\n', '    address constant crXSushiToken = 0x228619CCa194Fbe3Ebeb2f835eC1eA5080DaFbb2; // crXSUSHI staking contract for xSUSHI\n', '    address constant wETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2; // ETH wrapper contract (v9)\n', '    address constant sushiSwapFactory = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac; // SushiSwap factory contract\n', '    ISushiSwap constant sushiSwapSushiETHPair = ISushiSwap(0x795065dCc9f64b5614C407a6EFDC400DA6221FB0); // SUSHI/ETH pair on SushiSwap\n', '    bytes32 constant pairCodeHash = 0xe18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303; // SushiSwap pair code hash\n', '\n', '    /// @notice Initialize this Inari contract and core SUSHI strategies.\n', '    constructor() public {\n', '        bento.registerProtocol(); // register this contract with BENTO\n', '        sushiToken.approve(address(sushiBar), type(uint256).max); // max approve `sushiBar` spender to stake SUSHI into xSUSHI from this contract\n', '        sushiToken.approve(crSushiToken, type(uint256).max); // max approve `crSushiToken` spender to stake SUSHI into crSUSHI from this contract\n', '        IERC20(sushiBar).approve(address(aave), type(uint256).max); // max approve `aave` spender to stake xSUSHI into aXSUSHI from this contract\n', '        IERC20(sushiBar).approve(address(bento), type(uint256).max); // max approve `bento` spender to stake xSUSHI into BENTO from this contract\n', '        IERC20(sushiBar).approve(crXSushiToken, type(uint256).max); // max approve `crXSushiToken` spender to stake xSUSHI into crXSUSHI from this contract\n', '        IERC20(dai).approve(address(bento), type(uint256).max); // max approve `bento` spender to pull DAI into BENTO from this contract\n', '    }\n', '\n', '    /// @notice Helper function to approve this contract to spend and bridge more tokens among DeFi contracts.\n', '    function bridgeABC(IERC20[] calldata underlying, address[] calldata cToken) external {\n', '        for (uint256 i = 0; i < underlying.length; i++) {\n', '            underlying[i].approve(address(aave), type(uint256).max); // max approve `aave` spender to pull `underlying` from this contract\n', '            underlying[i].approve(address(bento), type(uint256).max); // max approve `bento` spender to pull `underlying` from this contract\n', '            underlying[i].approve(cToken[i], type(uint256).max); // max approve `cToken` spender to pull `underlying` from this contract (also serves as generalized approval bridge)\n', '        }\n', '    }\n', '\n', '    /************\n', '    SUSHI HELPERS \n', '    ************/\n', '    /// @notice Stake SUSHI `amount` into xSushi for benefit of `to` by call to `sushiBar`.\n', '    function stakeSushi(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ISushiBarBridge(sushiBar).enter(amount); // stake deposited SUSHI into `sushiBar` xSUSHI\n', '        IERC20(sushiBar).safeTransfer(to, IERC20(sushiBar).balanceOf(address(this))); // transfer resulting xSUSHI to `to`\n', '    }\n', '    \n', '    /// @notice Stake SUSHI local balance into xSushi for benefit of `to` by call to `sushiBar`.\n', '    function stakeSushiBalance(address to) external {\n', '        ISushiBarBridge(sushiBar).enter(sushiToken.balanceOf(address(this))); // stake local SUSHI into `sushiBar` xSUSHI\n', '        IERC20(sushiBar).safeTransfer(to, IERC20(sushiBar).balanceOf(address(this))); // transfer resulting xSUSHI to `to`\n', '    }\n', '    \n', '    /**********\n', '    TKN HELPERS \n', '    **********/\n', '    /// @notice Token deposit function for `batch()` into strategies. \n', '    function depositToken(IERC20 token, uint256 amount) external {\n', '        IERC20(token).safeTransferFrom(msg.sender, address(this), amount); \n', '    }\n', '\n', '    /// @notice Token withdraw function for `batch()` into strategies. \n', '    function withdrawToken(IERC20 token, address to, uint256 amount) external {\n', '        IERC20(token).safeTransfer(to, amount); \n', '    }\n', '    \n', '    /// @notice Token local balance withdraw function for `batch()` into strategies. \n', '    function withdrawTokenBalance(IERC20 token, address to) external {\n', '        IERC20(token).safeTransfer(to, token.balanceOf(address(this))); \n', '    }\n', '/*\n', '██   ██       ▄   ▄███▄   \n', '█ █  █ █       █  █▀   ▀  \n', '█▄▄█ █▄▄█ █     █ ██▄▄    \n', '█  █ █  █  █    █ █▄   ▄▀ \n', '   █    █   █  █  ▀███▀   \n', '  █    █     █▐           \n', ' ▀    ▀      ▐         */\n', '    \n', '    /***********\n', '    AAVE HELPERS \n', '    ***********/\n', '    function toAave(address underlying, address to, uint256 amount) external {\n', '        aave.deposit(underlying, amount, to, 0); \n', '    }\n', '\n', '    function balanceToAave(address underlying, address to) external {\n', '        aave.deposit(underlying, IERC20(underlying).balanceOf(address(this)), to, 0); \n', '    }\n', '    \n', '    function fromAave(address underlying, address to, uint256 amount) external {\n', '        aave.withdraw(underlying, amount, to); \n', '    }\n', '    \n', '    function balanceFromAave(address aToken, address to) external {\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS(); // sanity check for `underlying` token\n', '        aave.withdraw(underlying, IERC20(aToken).balanceOf(address(this)), to); \n', '    }\n', '    \n', '    /**************************\n', '    AAVE -> UNDERLYING -> BENTO \n', '    **************************/\n', '    /// @notice Migrate AAVE `aToken` underlying `amount` into BENTO for benefit of `to` by batching calls to `aave` and `bento`.\n', '    function aaveToBento(address aToken, address to, uint256 amount) external {\n', '        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` `aToken` `amount` into this contract\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS(); // sanity check for `underlying` token\n', '        aave.withdraw(underlying, amount, address(this)); // burn deposited `aToken` from `aave` into `underlying`\n', '        bento.deposit(IERC20(underlying), address(this), to, amount, 0); // stake `underlying` into BENTO for `to`\n', '    }\n', '    \n', '    /**************************\n', '    BENTO -> UNDERLYING -> AAVE \n', '    **************************/\n', '    /// @notice Migrate `underlying` `amount` from BENTO into AAVE for benefit of `to` by batching calls to `bento` and `aave`.\n', '    function bentoToAave(IERC20 underlying, address to, uint256 amount) external {\n', '        bento.withdraw(underlying, msg.sender, address(this), amount, 0); // withdraw `amount` of `underlying` from BENTO into this contract\n', '        aave.deposit(address(underlying), amount, to, 0); // stake `underlying` into `aave` for `to`\n', '    }\n', '    \n', '    /*************************\n', '    AAVE -> UNDERLYING -> COMP \n', '    *************************/\n', '    /// @notice Migrate AAVE `aToken` underlying `amount` into COMP/CREAM `cToken` for benefit of `to` by batching calls to `aave` and `cToken`.\n', '    function aaveToCompound(address aToken, address cToken, address to, uint256 amount) external {\n', '        IERC20(aToken).safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` `aToken` `amount` into this contract\n', '        address underlying = IAaveBridge(aToken).UNDERLYING_ASSET_ADDRESS(); // sanity check for `underlying` token\n', '        aave.withdraw(underlying, amount, address(this)); // burn deposited `aToken` from `aave` into `underlying`\n', '        ICompoundBridge(cToken).mint(amount); // stake `underlying` into `cToken`\n', '        IERC20(cToken).safeTransfer(to, IERC20(cToken).balanceOf(address(this))); // transfer resulting `cToken` to `to`\n', '    }\n', '    \n', '    /*************************\n', '    COMP -> UNDERLYING -> AAVE \n', '    *************************/\n', '    /// @notice Migrate COMP/CREAM `cToken` underlying `amount` into AAVE for benefit of `to` by batching calls to `cToken` and `aave`.\n', '    function compoundToAave(address cToken, address to, uint256 amount) external {\n', '        IERC20(cToken).safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` `cToken` `amount` into this contract\n', '        ICompoundBridge(cToken).redeem(amount); // burn deposited `cToken` into `underlying`\n', '        address underlying = ICompoundBridge(cToken).underlying(); // sanity check for `underlying` token\n', '        aave.deposit(underlying, IERC20(underlying).balanceOf(address(this)), to, 0); // stake resulting `underlying` into `aave` for `to`\n', '    }\n', '    \n', '    /**********************\n', '    SUSHI -> XSUSHI -> AAVE \n', '    **********************/\n', '    /// @notice Stake SUSHI `amount` into aXSUSHI for benefit of `to` by batching calls to `sushiBar` and `aave`.\n', '    function stakeSushiToAave(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ISushiBarBridge(sushiBar).enter(amount); // stake deposited SUSHI into `sushiBar` xSUSHI\n', '        aave.deposit(sushiBar, IERC20(sushiBar).balanceOf(address(this)), to, 0); // stake resulting xSUSHI into `aave` aXSUSHI for `to`\n', '    }\n', '    \n', '    /**********************\n', '    AAVE -> XSUSHI -> SUSHI \n', '    **********************/\n', '    /// @notice Unstake aXSUSHI `amount` into SUSHI for benefit of `to` by batching calls to `aave` and `sushiBar`.\n', '    function unstakeSushiFromAave(address to, uint256 amount) external {\n', '        aaveSushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` aXSUSHI `amount` into this contract\n', '        aave.withdraw(sushiBar, amount, address(this)); // burn deposited aXSUSHI from `aave` into xSUSHI\n', '        ISushiBarBridge(sushiBar).leave(amount); // burn resulting xSUSHI from `sushiBar` into SUSHI\n', '        sushiToken.safeTransfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\n', '    }\n', '/*\n', '███   ▄███▄      ▄     ▄▄▄▄▀ ████▄ \n', '█  █  █▀   ▀      █ ▀▀▀ █    █   █ \n', '█ ▀ ▄ ██▄▄    ██   █    █    █   █ \n', '█  ▄▀ █▄   ▄▀ █ █  █   █     ▀████ \n', '███   ▀███▀   █  █ █  ▀            \n', '              █   ██            */ \n', '    /// @notice Helper function to `permit()` this contract to deposit `dai` into `bento` for benefit of `to`.\n', '    function daiToBentoWithPermit(\n', '        address to, uint256 amount, uint256 nonce, uint256 expiry,\n', '        uint8 v, bytes32 r, bytes32 s\n', '    ) external {\n', '        IDaiPermit(dai).permit(msg.sender, address(this), nonce, expiry, true, v, r, s); // `permit()` this contract to spend `msg.sender` `dai`\n', '        IERC20(dai).safeTransferFrom(msg.sender, address(this), amount); // pull `dai` `amount` into this contract\n', '        bento.deposit(IERC20(dai), address(this), to, amount, 0); // stake `dai` into BENTO for `to`\n', '    }\n', '    \n', '    /************\n', '    BENTO HELPERS \n', '    ************/\n', '    function toBento(IERC20 token, address to, uint256 amount) external {\n', '        bento.deposit(token, address(this), to, amount, 0); \n', '    }\n', '\n', '    function balanceToBento(IERC20 token, address to) external {\n', '        bento.deposit(token, address(this), to, token.balanceOf(address(this)), 0); \n', '    }\n', '    \n', '    function fromBento(IERC20 token, address to, uint256 amount) external {\n', '        bento.withdraw(token, msg.sender, to, amount, 0); \n', '    }\n', '    \n', '    function balanceFromBento(IERC20 token, address to) external {\n', '        bento.withdraw(token, msg.sender, to, bento.balanceOf(token, msg.sender), 0); \n', '    }\n', '\n', '    /***********************\n', '    SUSHI -> XSUSHI -> BENTO \n', '    ***********************/\n', '    /// @notice Stake SUSHI `amount` into BENTO xSUSHI for benefit of `to` by batching calls to `sushiBar` and `bento`.\n', '    function stakeSushiToBento(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ISushiBarBridge(sushiBar).enter(amount); // stake deposited SUSHI into `sushiBar` xSUSHI\n', '        bento.deposit(IERC20(sushiBar), address(this), to, IERC20(sushiBar).balanceOf(address(this)), 0); // stake resulting xSUSHI into BENTO for `to`\n', '    }\n', '    \n', '    /***********************\n', '    BENTO -> XSUSHI -> SUSHI \n', '    ***********************/\n', '    /// @notice Unstake xSUSHI `amount` from BENTO into SUSHI for benefit of `to` by batching calls to `bento` and `sushiBar`.\n', '    function unstakeSushiFromBento(address to, uint256 amount) external {\n', '        bento.withdraw(IERC20(sushiBar), msg.sender, address(this), amount, 0); // withdraw `amount` of xSUSHI from BENTO into this contract\n', '        ISushiBarBridge(sushiBar).leave(amount); // burn withdrawn xSUSHI from `sushiBar` into SUSHI\n', '        sushiToken.safeTransfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\n', '    }\n', '/*    \n', '▄█▄    █▄▄▄▄ ▄███▄   ██   █▀▄▀█ \n', '█▀ ▀▄  █  ▄▀ █▀   ▀  █ █  █ █ █ \n', '█   ▀  █▀▀▌  ██▄▄    █▄▄█ █ ▄ █ \n', '█▄  ▄▀ █  █  █▄   ▄▀ █  █ █   █ \n', '▀███▀    █   ▀███▀      █    █  \n', '        ▀              █    ▀  \n', '                      ▀      */\n', '// - COMPOUND - //\n', '    /***********\n', '    COMP HELPERS \n', '    ***********/\n', '    function toCompound(ICompoundBridge cToken, uint256 underlyingAmount) external {\n', '        cToken.mint(underlyingAmount); \n', '    }\n', '\n', '    function balanceToCompound(ICompoundBridge cToken) external {\n', '        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying()); // sanity check for `underlying` token\n', '        cToken.mint(underlying.balanceOf(address(this)));\n', '    }\n', '    \n', '    function fromCompound(ICompoundBridge cToken, uint256 cTokenAmount) external {\n', '        ICompoundBridge(cToken).redeem(cTokenAmount);\n', '    }\n', '    \n', '    function balanceFromCompound(address cToken) external {\n', '        ICompoundBridge(cToken).redeem(IERC20(cToken).balanceOf(address(this)));\n', '    }\n', '    \n', '    /**************************\n', '    COMP -> UNDERLYING -> BENTO \n', '    **************************/\n', '    /// @notice Migrate COMP/CREAM `cToken` `cTokenAmount` into underlying and BENTO for benefit of `to` by batching calls to `cToken` and `bento`.\n', '    function compoundToBento(address cToken, address to, uint256 cTokenAmount) external {\n', '        IERC20(cToken).safeTransferFrom(msg.sender, address(this), cTokenAmount); // deposit `msg.sender` `cToken` `cTokenAmount` into this contract\n', '        ICompoundBridge(cToken).redeem(cTokenAmount); // burn deposited `cToken` into `underlying`\n', '        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying()); // sanity check for `underlying` token\n', '        bento.deposit(underlying, address(this), to, underlying.balanceOf(address(this)), 0); // stake resulting `underlying` into BENTO for `to`\n', '    }\n', '    \n', '    /**************************\n', '    BENTO -> UNDERLYING -> COMP \n', '    **************************/\n', '    /// @notice Migrate `cToken` `underlyingAmount` from BENTO into COMP/CREAM for benefit of `to` by batching calls to `bento` and `cToken`.\n', '    function bentoToCompound(address cToken, address to, uint256 underlyingAmount) external {\n', '        IERC20 underlying = IERC20(ICompoundBridge(cToken).underlying()); // sanity check for `underlying` token\n', '        bento.withdraw(underlying, msg.sender, address(this), underlyingAmount, 0); // withdraw `underlyingAmount` of `underlying` from BENTO into this contract\n', '        ICompoundBridge(cToken).mint(underlyingAmount); // stake `underlying` into `cToken`\n', '        IERC20(cToken).safeTransfer(to, IERC20(cToken).balanceOf(address(this))); // transfer resulting `cToken` to `to`\n', '    }\n', '    \n', '    /**********************\n', '    SUSHI -> CREAM -> BENTO \n', '    **********************/\n', '    /// @notice Stake SUSHI `amount` into crSUSHI and BENTO for benefit of `to` by batching calls to `crSushiToken` and `bento`.\n', '    function sushiToCreamToBento(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ICompoundBridge(crSushiToken).mint(amount); // stake deposited SUSHI into crSUSHI\n', '        bento.deposit(IERC20(crSushiToken), address(this), to, IERC20(crSushiToken).balanceOf(address(this)), 0); // stake resulting crSUSHI into BENTO for `to`\n', '    }\n', '    \n', '    /**********************\n', '    BENTO -> CREAM -> SUSHI \n', '    **********************/\n', '    /// @notice Unstake crSUSHI `cTokenAmount` into SUSHI from BENTO for benefit of `to` by batching calls to `bento` and `crSushiToken`.\n', '    function sushiFromCreamFromBento(address to, uint256 cTokenAmount) external {\n', '        bento.withdraw(IERC20(crSushiToken), msg.sender, address(this), cTokenAmount, 0); // withdraw `cTokenAmount` of `crSushiToken` from BENTO into this contract\n', '        ICompoundBridge(crSushiToken).redeem(cTokenAmount); // burn deposited `crSushiToken` into SUSHI\n', '        sushiToken.safeTransfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\n', '    }\n', '    \n', '    /***********************\n', '    SUSHI -> XSUSHI -> CREAM \n', '    ***********************/\n', '    /// @notice Stake SUSHI `amount` into crXSUSHI for benefit of `to` by batching calls to `sushiBar` and `crXSushiToken`.\n', '    function stakeSushiToCream(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ISushiBarBridge(sushiBar).enter(amount); // stake deposited SUSHI `amount` into `sushiBar` xSUSHI\n', '        ICompoundBridge(crXSushiToken).mint(IERC20(sushiBar).balanceOf(address(this))); // stake resulting xSUSHI into crXSUSHI\n', '        IERC20(crXSushiToken).safeTransfer(to, IERC20(crXSushiToken).balanceOf(address(this))); // transfer resulting crXSUSHI to `to`\n', '    }\n', '    \n', '    /***********************\n', '    CREAM -> XSUSHI -> SUSHI \n', '    ***********************/\n', '    /// @notice Unstake crXSUSHI `cTokenAmount` into SUSHI for benefit of `to` by batching calls to `crXSushiToken` and `sushiBar`.\n', '    function unstakeSushiFromCream(address to, uint256 cTokenAmount) external {\n', '        IERC20(crXSushiToken).safeTransferFrom(msg.sender, address(this), cTokenAmount); // deposit `msg.sender` `crXSushiToken` `cTokenAmount` into this contract\n', '        ICompoundBridge(crXSushiToken).redeem(cTokenAmount); // burn deposited `crXSushiToken` `cTokenAmount` into xSUSHI\n', '        ISushiBarBridge(sushiBar).leave(IERC20(sushiBar).balanceOf(address(this))); // burn resulting xSUSHI `amount` from `sushiBar` into SUSHI\n', '        sushiToken.safeTransfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\n', '    }\n', '    \n', '    /********************************\n', '    SUSHI -> XSUSHI -> CREAM -> BENTO \n', '    ********************************/\n', '    /// @notice Stake SUSHI `amount` into crXSUSHI and BENTO for benefit of `to` by batching calls to `sushiBar`, `crXSushiToken` and `bento`.\n', '    function stakeSushiToCreamToBento(address to, uint256 amount) external {\n', '        sushiToken.safeTransferFrom(msg.sender, address(this), amount); // deposit `msg.sender` SUSHI `amount` into this contract\n', '        ISushiBarBridge(sushiBar).enter(amount); // stake deposited SUSHI `amount` into `sushiBar` xSUSHI\n', '        ICompoundBridge(crXSushiToken).mint(IERC20(sushiBar).balanceOf(address(this))); // stake resulting xSUSHI into crXSUSHI\n', '        bento.deposit(IERC20(crXSushiToken), address(this), to, IERC20(crXSushiToken).balanceOf(address(this)), 0); // stake resulting crXSUSHI into BENTO for `to`\n', '    }\n', '    \n', '    /********************************\n', '    BENTO -> CREAM -> XSUSHI -> SUSHI \n', '    ********************************/\n', '    /// @notice Unstake crXSUSHI `cTokenAmount` into SUSHI from BENTO for benefit of `to` by batching calls to `bento`, `crXSushiToken` and `sushiBar`.\n', '    function unstakeSushiFromCreamFromBento(address to, uint256 cTokenAmount) external {\n', '        bento.withdraw(IERC20(crXSushiToken), msg.sender, address(this), cTokenAmount, 0); // withdraw `cTokenAmount` of `crXSushiToken` from BENTO into this contract\n', '        ICompoundBridge(crXSushiToken).redeem(cTokenAmount); // burn deposited `crXSushiToken` `cTokenAmount` into xSUSHI\n', '        ISushiBarBridge(sushiBar).leave(IERC20(sushiBar).balanceOf(address(this))); // burn resulting xSUSHI from `sushiBar` into SUSHI\n', '        sushiToken.safeTransfer(to, sushiToken.balanceOf(address(this))); // transfer resulting SUSHI to `to`\n', '    }\n', '/*\n', '   ▄▄▄▄▄    ▄ ▄   ██   █ ▄▄      \n', '  █     ▀▄ █   █  █ █  █   █     \n', '▄  ▀▀▀▀▄  █ ▄   █ █▄▄█ █▀▀▀      \n', ' ▀▄▄▄▄▀   █  █  █ █  █ █         \n', '           █ █ █     █  █        \n', '            ▀ ▀     █    ▀       \n', '                   ▀     */\n', '    /// @notice SushiSwap ETH to stake SUSHI into xSUSHI for benefit of `to`. \n', '    function ethStakeSushi(address to) external payable { // SWAP `N STAKE\n', '        (uint256 reserve0, uint256 reserve1, ) = sushiSwapSushiETHPair.getReserves();\n', '        uint256 amountInWithFee = msg.value.mul(997);\n', '        uint256 amountOut =\n', '            amountInWithFee.mul(reserve0) /\n', '            reserve1.mul(1000).add(amountInWithFee);\n', '        ISushiSwap(wETH).deposit{value: msg.value}();\n', '        IERC20(wETH).safeTransfer(address(sushiSwapSushiETHPair), msg.value);\n', '        sushiSwapSushiETHPair.swap(amountOut, 0, address(this), "");\n', '        ISushiBarBridge(sushiBar).enter(sushiToken.balanceOf(address(this))); // stake resulting SUSHI into `sushiBar` xSUSHI\n', '        IERC20(sushiBar).safeTransfer(to, IERC20(sushiBar).balanceOf(address(this))); // transfer resulting xSUSHI to `to`\n', '    }\n', '\n', '    /// @notice SushiSwap `fromToken` `amountIn` to `toToken` for benefit of `to`.\n', '    function swap(address fromToken, address toToken, address to, uint256 amountIn) external returns (uint256 amountOut) {\n', '        (address token0, address token1) = fromToken < toToken ? (fromToken, toToken) : (toToken, fromToken);\n', '        ISushiSwap pair =\n', '            ISushiSwap(\n', '                uint256(\n', '                    keccak256(abi.encodePacked(hex"ff", sushiSwapFactory, keccak256(abi.encodePacked(token0, token1)), pairCodeHash))\n', '                )\n', '            );\n', '        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        IERC20(fromToken).safeTransferFrom(msg.sender, address(this), amountIn);\n', '        if (toToken > fromToken) {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve1) /\n', '                reserve0.mul(1000).add(amountInWithFee);\n', '            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n', '            pair.swap(0, amountOut, to, "");\n', '        } else {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve0) /\n', '                reserve1.mul(1000).add(amountInWithFee);\n', '            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n', '            pair.swap(amountOut, 0, to, "");\n', '        }\n', '    }\n', '    \n', '    /// @notice SushiSwap local `fromToken` balance in this contract to `toToken` for benefit of `to`.\n', '    function swapBalance(address fromToken, address toToken, address to) external returns (uint256 amountOut) {\n', '        (address token0, address token1) = fromToken < toToken ? (fromToken, toToken) : (toToken, fromToken);\n', '        ISushiSwap pair =\n', '            ISushiSwap(\n', '                uint256(\n', '                    keccak256(abi.encodePacked(hex"ff", sushiSwapFactory, keccak256(abi.encodePacked(token0, token1)), pairCodeHash))\n', '                )\n', '            );\n', '        uint256 amountIn = IERC20(fromToken).balanceOf(address(this));\n', '        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '        uint256 amountInWithFee = amountIn.mul(997);\n', '        if (toToken > fromToken) {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve1) /\n', '                reserve0.mul(1000).add(amountInWithFee);\n', '            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n', '            pair.swap(0, amountOut, to, "");\n', '        } else {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve0) /\n', '                reserve1.mul(1000).add(amountInWithFee);\n', '            IERC20(fromToken).safeTransfer(address(pair), amountIn);\n', '            pair.swap(amountOut, 0, to, "");\n', '        }\n', '    }\n', '    \n', '    /// @notice SushiSwap ETH `msg.value` to `toToken` for benefit of `to`.\n', '    function swapETH(address toToken, address to) external payable returns (uint256 amountOut) {\n', '        (address token0, address token1) = wETH < toToken ? (wETH, toToken) : (toToken, wETH);\n', '        ISushiSwap pair =\n', '            ISushiSwap(\n', '                uint256(\n', '                    keccak256(abi.encodePacked(hex"ff", sushiSwapFactory, keccak256(abi.encodePacked(token0, token1)), pairCodeHash))\n', '                )\n', '            );\n', '        (uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n', '        uint256 amountInWithFee = msg.value.mul(997);\n', '        ISushiSwap(wETH).deposit{value: msg.value}();\n', '        if (toToken > wETH) {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve1) /\n', '                reserve0.mul(1000).add(amountInWithFee);\n', '            IERC20(wETH).safeTransfer(address(pair), msg.value);\n', '            pair.swap(0, amountOut, to, "");\n', '        } else {\n', '            amountOut =\n', '                amountInWithFee.mul(reserve0) /\n', '                reserve1.mul(1000).add(amountInWithFee);\n', '            IERC20(wETH).safeTransfer(address(pair), msg.value);\n', '            pair.swap(amountOut, 0, to, "");\n', '        }\n', '    }\n', '}']