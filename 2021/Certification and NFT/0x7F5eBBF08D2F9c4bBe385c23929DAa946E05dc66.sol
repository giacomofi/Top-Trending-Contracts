['// 0.5.1-c8a2\n', '// Enable optimization\n', 'pragma solidity ^0.5.0;\n', '\n', 'import "./ERC20.sol";\n', 'import "./ERC20Detailed.sol";\n', '\n', '/**\n', ' * @title SimpleToken\n', ' * @dev Very simple ERC20 Token example, where all tokens are pre-assigned to the creator.\n', ' * Note they can later distribute these tokens as they wish using `transfer` and other\n', ' * `ERC20` functions.\n', ' */\n', 'contract Token is ERC20, ERC20Detailed {\n', '    \n', '    address public governance;\n', '    mapping (address => bool) public minters;\n', '\n', '    /**\n', '     * @dev Constructor that gives msg.sender all of existing tokens.\n', '     */\n', '    constructor () public ERC20Detailed("Pit Bull", "PB", 18) {\n', '        _mint(msg.sender, 1000000000 * (10 ** uint256(decimals())));\n', '        governance = msg.sender;\n', '    }\n', '    /**\n', '    function mint(address account, uint amount) public {\n', '      require(minters[msg.sender], "!minter");\n', '      _mint(account, amount);\n', '  }\n', '  \n', '  function setGovernance(address _governance) public {\n', '      require(msg.sender == governance, "!governance");\n', '      governance = _governance;\n', '  }\n', '  \n', '  function addMinter(address _minter) public {\n', '      require(msg.sender == governance, "!governance");\n', '      minters[_minter] = true;\n', '  }\n', '  \n', '  function removeMinter(address _minter) public {\n', '      require(msg.sender == governance, "!governance");\n', '      minters[_minter] = false;\n', '  }\n', '    */\n', '    \n', '}']