['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-31\n', '*/\n', '\n', 'pragma solidity 0.8.2;\n', '\n', '\n', 'abstract contract IERC20WithCheckpointing {\n', '    function balanceOf(address _owner) public view virtual returns (uint256);\n', '\n', '    function balanceOfAt(address _owner, uint256 _blockNumber)\n', '        public\n', '        view\n', '        virtual\n', '        returns (uint256);\n', '\n', '    function totalSupply() public view virtual returns (uint256);\n', '\n', '    function totalSupplyAt(uint256 _blockNumber) public view virtual returns (uint256);\n', '}\n', '\n', 'abstract contract IIncentivisedVotingLockup is IERC20WithCheckpointing {\n', '    function getLastUserPoint(address _addr)\n', '        external\n', '        view\n', '        virtual\n', '        returns (\n', '            int128 bias,\n', '            int128 slope,\n', '            uint256 ts\n', '        );\n', '\n', '    function createLock(uint256 _value, uint256 _unlockTime) external virtual;\n', '\n', '    function withdraw() external virtual;\n', '\n', '    function increaseLockAmount(uint256 _value) external virtual;\n', '\n', '    function increaseLockLength(uint256 _unlockTime) external virtual;\n', '\n', '    function eject(address _user) external virtual;\n', '\n', '    function expireContract() external virtual;\n', '\n', '    function claimReward() public virtual;\n', '\n', '    function earned(address _account) public view virtual returns (uint256);\n', '}\n', '\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', 'interface IBoostedVaultWithLockup {\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for the sender\n', '     * @param _amount Units of StakingToken\n', '     */\n', '    function stake(uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Stakes a given amount of the StakingToken for a given beneficiary\n', '     * @param _beneficiary Staked tokens are credited to this address\n', '     * @param _amount      Units of StakingToken\n', '     */\n', '    function stake(address _beneficiary, uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Withdraws stake from pool and claims any unlocked rewards.\n', '     * Note, this function is costly - the args for _claimRewards\n', '     * should be determined off chain and then passed to other fn\n', '     */\n', '    function exit() external;\n', '\n', '    /**\n', '     * @dev Withdraws stake from pool and claims any unlocked rewards.\n', '     * @param _first    Index of the first array element to claim\n', '     * @param _last     Index of the last array element to claim\n', '     */\n', '    function exit(uint256 _first, uint256 _last) external;\n', '\n', '    /**\n', '     * @dev Withdraws given stake amount from the pool\n', '     * @param _amount Units of the staked token to withdraw\n', '     */\n', '    function withdraw(uint256 _amount) external;\n', '\n', '    /**\n', '     * @dev Claims only the tokens that have been immediately unlocked, not including\n', '     * those that are in the lockers.\n', '     */\n', '    function claimReward() external;\n', '\n', '    /**\n', '     * @dev Claims all unlocked rewards for sender.\n', '     * Note, this function is costly - the args for _claimRewards\n', '     * should be determined off chain and then passed to other fn\n', '     */\n', '    function claimRewards() external;\n', '\n', '    /**\n', '     * @dev Claims all unlocked rewards for sender. Both immediately unlocked\n', '     * rewards and also locked rewards past their time lock.\n', '     * @param _first    Index of the first array element to claim\n', '     * @param _last     Index of the last array element to claim\n', '     */\n', '    function claimRewards(uint256 _first, uint256 _last) external;\n', '\n', '    /**\n', '     * @dev Pokes a given account to reset the boost\n', '     */\n', '    function pokeBoost(address _account) external;\n', '\n', '    /**\n', '     * @dev Gets the last applicable timestamp for this reward period\n', '     */\n', '    function lastTimeRewardApplicable() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculates the amount of unclaimed rewards per token since last update,\n', '     * and sums with stored to give the new cumulative reward per token\n', "     * @return 'Reward' per staked token\n", '     */\n', '    function rewardPerToken() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returned the units of IMMEDIATELY claimable rewards a user has to receive. Note - this\n', '     * does NOT include the majority of rewards which will be locked up.\n', '     * @param _account User address\n', '     * @return Total reward amount earned\n', '     */\n', '    function earned(address _account) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Calculates all unclaimed reward data, finding both immediately unlocked rewards\n', '     * and those that have passed their time lock.\n', '     * @param _account User address\n', '     * @return amount Total units of unclaimed rewards\n', '     * @return first Index of the first userReward that has unlocked\n', '     * @return last Index of the last userReward that has unlocked\n', '     */\n', '    function unclaimedRewards(address _account)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 amount,\n', '            uint256 first,\n', '            uint256 last\n', '        );\n', '}\n', '\n', 'interface IBoostDirector {\n', '    function getBalance(address _user) external returns (uint256);\n', '\n', '    function setDirection(\n', '        address _old,\n', '        address _new,\n', '        bool _pokeNew\n', '    ) external;\n', '\n', '    function whitelistVaults(address[] calldata _vaults) external;\n', '}\n', '\n', 'contract ModuleKeys {\n', '    // Governance\n', '    // ===========\n', '    // keccak256("Governance");\n', '    bytes32 internal constant KEY_GOVERNANCE =\n', '        0x9409903de1e6fd852dfc61c9dacb48196c48535b60e25abf92acc92dd689078d;\n', '    //keccak256("Staking");\n', '    bytes32 internal constant KEY_STAKING =\n', '        0x1df41cd916959d1163dc8f0671a666ea8a3e434c13e40faef527133b5d167034;\n', '    //keccak256("ProxyAdmin");\n', '    bytes32 internal constant KEY_PROXY_ADMIN =\n', '        0x96ed0203eb7e975a4cbcaa23951943fa35c5d8288117d50c12b3d48b0fab48d1;\n', '\n', '    // mStable\n', '    // =======\n', '    // keccak256("OracleHub");\n', '    bytes32 internal constant KEY_ORACLE_HUB =\n', '        0x8ae3a082c61a7379e2280f3356a5131507d9829d222d853bfa7c9fe1200dd040;\n', '    // keccak256("Manager");\n', '    bytes32 internal constant KEY_MANAGER =\n', '        0x6d439300980e333f0256d64be2c9f67e86f4493ce25f82498d6db7f4be3d9e6f;\n', '    //keccak256("Recollateraliser");\n', '    bytes32 internal constant KEY_RECOLLATERALISER =\n', '        0x39e3ed1fc335ce346a8cbe3e64dd525cf22b37f1e2104a755e761c3c1eb4734f;\n', '    //keccak256("MetaToken");\n', '    bytes32 internal constant KEY_META_TOKEN =\n', '        0xea7469b14936af748ee93c53b2fe510b9928edbdccac3963321efca7eb1a57a2;\n', '    // keccak256("SavingsManager");\n', '    bytes32 internal constant KEY_SAVINGS_MANAGER =\n', '        0x12fe936c77a1e196473c4314f3bed8eeac1d757b319abb85bdda70df35511bf1;\n', '    // keccak256("Liquidator");\n', '    bytes32 internal constant KEY_LIQUIDATOR =\n', '        0x1e9cb14d7560734a61fa5ff9273953e971ff3cd9283c03d8346e3264617933d4;\n', '    // keccak256("InterestValidator");\n', '    bytes32 internal constant KEY_INTEREST_VALIDATOR =\n', '        0xc10a28f028c7f7282a03c90608e38a4a646e136e614e4b07d119280c5f7f839f;\n', '}\n', '\n', 'interface INexus {\n', '    function governor() external view returns (address);\n', '\n', '    function getModule(bytes32 key) external view returns (address);\n', '\n', '    function proposeModule(bytes32 _key, address _addr) external;\n', '\n', '    function cancelProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModule(bytes32 _key) external;\n', '\n', '    function acceptProposedModules(bytes32[] calldata _keys) external;\n', '\n', '    function requestLockModule(bytes32 _key) external;\n', '\n', '    function cancelLockModule(bytes32 _key) external;\n', '\n', '    function lockModule(bytes32 _key) external;\n', '}\n', '\n', 'abstract contract ImmutableModule is ModuleKeys {\n', '    INexus public immutable nexus;\n', '\n', '    /**\n', '     * @dev Initialization function for upgradable proxy contracts\n', '     * @param _nexus Nexus contract address\n', '     */\n', '    constructor(address _nexus) {\n', '        require(_nexus != address(0), "Nexus address is zero");\n', '        nexus = INexus(_nexus);\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governor.\n', '     */\n', '    modifier onlyGovernor() {\n', '        _onlyGovernor();\n', '        _;\n', '    }\n', '\n', '    function _onlyGovernor() internal view {\n', '        require(msg.sender == _governor(), "Only governor can execute");\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Governance.\n', '     *      Governance is either Governor address or Governance address.\n', '     */\n', '    modifier onlyGovernance() {\n', '        require(\n', '            msg.sender == _governor() || msg.sender == _governance(),\n', '            "Only governance can execute"\n', '        );\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the ProxyAdmin.\n', '     */\n', '    modifier onlyProxyAdmin() {\n', '        require(msg.sender == _proxyAdmin(), "Only ProxyAdmin can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to allow function calls only from the Manager.\n', '     */\n', '    modifier onlyManager() {\n', '        require(msg.sender == _manager(), "Only manager can execute");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governor address from the Nexus\n', '     * @return Address of Governor Contract\n', '     */\n', '    function _governor() internal view returns (address) {\n', '        return nexus.governor();\n', '    }\n', '\n', '    /**\n', '     * @dev Returns Governance Module address from the Nexus\n', '     * @return Address of the Governance (Phase 2)\n', '     */\n', '    function _governance() internal view returns (address) {\n', '        return nexus.getModule(KEY_GOVERNANCE);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Staking Module address from the Nexus\n', '     * @return Address of the Staking Module contract\n', '     */\n', '    function _staking() internal view returns (address) {\n', '        return nexus.getModule(KEY_STAKING);\n', '    }\n', '\n', '    /**\n', '     * @dev Return ProxyAdmin Module address from the Nexus\n', '     * @return Address of the ProxyAdmin Module contract\n', '     */\n', '    function _proxyAdmin() internal view returns (address) {\n', '        return nexus.getModule(KEY_PROXY_ADMIN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return MetaToken Module address from the Nexus\n', '     * @return Address of the MetaToken Module contract\n', '     */\n', '    function _metaToken() internal view returns (address) {\n', '        return nexus.getModule(KEY_META_TOKEN);\n', '    }\n', '\n', '    /**\n', '     * @dev Return OracleHub Module address from the Nexus\n', '     * @return Address of the OracleHub Module contract\n', '     */\n', '    function _oracleHub() internal view returns (address) {\n', '        return nexus.getModule(KEY_ORACLE_HUB);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Manager Module address from the Nexus\n', '     * @return Address of the Manager Module contract\n', '     */\n', '    function _manager() internal view returns (address) {\n', '        return nexus.getModule(KEY_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return SavingsManager Module address from the Nexus\n', '     * @return Address of the SavingsManager Module contract\n', '     */\n', '    function _savingsManager() internal view returns (address) {\n', '        return nexus.getModule(KEY_SAVINGS_MANAGER);\n', '    }\n', '\n', '    /**\n', '     * @dev Return Recollateraliser Module address from the Nexus\n', '     * @return  Address of the Recollateraliser Module contract (Phase 2)\n', '     */\n', '    function _recollateraliser() internal view returns (address) {\n', '        return nexus.getModule(KEY_RECOLLATERALISER);\n', '    }\n', '}\n', '\n', '\n', '// Internal\n', '/**\n', ' * @title  BoostDirector\n', ' * @author mStable\n', ' * @notice Supports the directing of vMTA balance from Staking up to X accounts\n', " * @dev    Uses a bitmap to store the id's of a given users chosen vaults in a gas efficient manner.\n", ' */\n', 'contract BoostDirector is IBoostDirector, ImmutableModule {\n', '\n', '    event Directed(address user, address boosted);\n', '    event RedirectedBoost(address user, address boosted, address replaced);\n', '    event Whitelisted(address vaultAddress, uint8 vaultId);\n', '\n', '    // Read the vMTA balance from here\n', '    IIncentivisedVotingLockup public immutable stakingContract;\n', '\n', '    // Whitelisted vaults set by governance (only these vaults can read balances)\n', '    uint8 private vaultCount;\n', '    // Vault address -> internal id for tracking\n', '    mapping(address => uint8) public _vaults;\n', "    // uint128 packed with up to 16 uint8's. Each uint is a vault ID\n", '    mapping(address => uint128) public _directedBitmap;\n', '\n', '\n', '    /***************************************\n', '                      ADMIN\n', '    ****************************************/\n', '\n', '    // Simple constructor\n', '    constructor(address _nexus, address _stakingContract) ImmutableModule(_nexus) {\n', '        stakingContract = IIncentivisedVotingLockup(_stakingContract);\n', '    }\n', '\n', '    /**\n', '     * @dev Initialize function - simply sets the initial array of whitelisted vaults\n', '     */\n', '    function initialize(address[] calldata _newVaults) external {\n', '        require(vaultCount == 0, "Already initialized");\n', '        _whitelistVaults(_newVaults);\n', '    }\n', '\n', '    /**\n', '     * @dev Whitelist vaults - only callable by governance. Whitelists vaults, unless they\n', '     * have already been whitelisted\n', '     */\n', '    function whitelistVaults(address[] calldata _newVaults) external override onlyGovernor {\n', '        _whitelistVaults(_newVaults);\n', '    }\n', '\n', '    /**\n', '     * @dev Takes an array of newVaults. For each, determines if it is already whitelisted.\n', '     * If not, then increment vaultCount and same the vault with new ID\n', '     */\n', '    function _whitelistVaults(address[] calldata _newVaults) internal {\n', '        uint256 len = _newVaults.length;\n', '        require(len > 0, "Must be at least one vault");\n', '        for (uint256 i = 0; i < len; i++) {\n', '            uint8 id = _vaults[_newVaults[i]];\n', '            require(id == 0, "Vault already whitelisted");\n', '\n', '            vaultCount += 1;\n', '            _vaults[_newVaults[i]] = vaultCount;\n', '\n', '            emit Whitelisted(_newVaults[i], vaultCount);\n', '        }\n', '    }\n', '\n', '\n', '    /***************************************\n', '                      Vault\n', '    ****************************************/\n', '\n', '    /**\n', '     * @dev Gets the balance of a user that has been directed to the caller (a vault).\n', '     * If the user has not directed to this vault, or there are less than 3 directed,\n', '     * then add this to the list\n', '     * @param _user     Address of the user for which to get balance\n', '     * @return Directed balance\n', '     */\n', '    function getBalance(address _user) external override returns (uint256) {\n', '        // Get vault details\n', '        uint8 id = _vaults[msg.sender];\n', '        // If vault has not been whitelisted, just return zero\n', '        if(id == 0) return 0;\n', '\n', '        // Get existing bitmap and balance\n', '        uint128 bitmap = _directedBitmap[_user];\n', '        uint256 bal = stakingContract.balanceOf(_user);\n', '\n', '        (bool isWhitelisted, uint8 count, ) = _indexExists(bitmap, id);\n', '\n', '        if (isWhitelisted) return bal;\n', '\n', '        if (count < 3) {\n', '            _directedBitmap[_user] = _direct(bitmap, count, id);\n', '            emit Directed(_user, msg.sender);\n', '            return bal;\n', '        }\n', '\n', '        if (count >= 3) return 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Directs rewards to a vault, and removes them from the old vault. Provided\n', '     * that old is active and the new vault is whitelisted.\n', '     * @param _old     Address of the old vault that will no longer get boosted\n', '     * @param _new     Address of the new vault that will get boosted\n', '     * @param _pokeNew Bool to say if we should poke the boost on the new vault\n', '     */\n', '    function setDirection(\n', '        address _old,\n', '        address _new,\n', '        bool _pokeNew\n', '    ) external override {\n', '        uint8 idOld = _vaults[_old];\n', '        uint8 idNew = _vaults[_new];\n', '\n', '        require(idOld > 0 && idNew > 0, "Vaults not whitelisted");\n', '\n', '        uint128 bitmap = _directedBitmap[msg.sender];\n', '        (bool isWhitelisted, uint8 count, uint8 pos) = _indexExists(bitmap, idOld);\n', '        require(isWhitelisted && count >= 3, "No need to replace old");\n', '\n', '        _directedBitmap[msg.sender] = _direct(bitmap, pos, idNew);\n', '\n', '        IBoostedVaultWithLockup(_old).pokeBoost(msg.sender);\n', '\n', '        if (_pokeNew) {\n', '            IBoostedVaultWithLockup(_new).pokeBoost(msg.sender);\n', '        }\n', '\n', '        emit RedirectedBoost(msg.sender, _new, _old);\n', '    }\n', '\n', '    /**\n', '     * @dev Resets the bitmap given the new _id for _pos. Takes each uint8 in seperate and re-compiles\n', '     */\n', '    function _direct(\n', '        uint128 _bitmap,\n', '        uint8 _pos,\n', '        uint8 _id\n', '    ) internal returns (uint128 newMap) {\n', '        // bitmap          = ... 00000000 00000000 00000011 00001010\n', '        // pos = 1, id = 1 = 00000001\n', '        // step            = ... 00000000 00000000 00000001 00000000\n', '        uint8 id;\n', '        uint128 step;\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            unchecked {\n', '                // id is either the one that is passed, or existing\n', '                id = _pos == i ? _id : uint8(_bitmap >> (i * 8));\n', '                step = uint128(uint128(id) << (i * 8));\n', '            }\n', '            newMap |= step;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Given a 128 bit bitmap packed with 8 bit ids, should be able to filter for specific ids by moving\n', '     * the bitmap gradually to the right and reading each 8 bit section as a uint8.\n', '     */\n', '    function _indexExists(uint128 _bitmap, uint8 _target)\n', '        internal\n', '        view\n', '        returns (\n', '            bool isWhitelisted,\n', '            uint8 count,\n', '            uint8 pos\n', '        )\n', '    {\n', '        // bitmap   = ... 00000000 00000000 00000011 00001010 // positions 1 and 2 have ids 10 and 3 respectively\n', '        // e.g.\n', '        // i = 1: bitmap moves 8 bits to the right\n', '        // bitmap   = ... 00000000 00000000 00000000 00000011 // reading uint8 should return 3\n', '        uint8 id;\n', '        for (uint8 i = 0; i < 3; i++) {\n', '            unchecked {\n', '                id = uint8(_bitmap >> (i * 8));\n', '            }\n', '            if (id > 0) count += 1;\n', '            if (id == _target) {\n', '                isWhitelisted = true;\n', '                pos = i;\n', '            }\n', '        }\n', '    }\n', '}']