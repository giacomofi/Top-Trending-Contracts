['// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', 'import "@openzeppelin/contracts/utils/Create2.sol";\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "./IFerrumDeployer.sol";\n', 'import "./IVersioned.sol";\n', '\n', 'contract FerrumDeployer is IFerrumDeployer, IVersioned {\n', '\tstring constant public override VERSION = "0.0.1";\n', '    uint256 constant EXTERNAL_HASH = 0x0ddafcd8600839ce553cacb17e362c83ea42ccfd1e8c8b3cb4d075124196dfc0;\n', '    uint256 constant INTERNAL_HASH = 0x27fd0863a54f729686099446389b11108e6e34e7364d1f8e38a43e1661a07f3a;\n', '    bytes public override initData;\n', '    event Deployed(address);\n', '    event DeployedWithData(address conAddr, address owner);\n', '\n', '    function deploy(bytes32 salt, bytes calldata bytecode)\n', '    public returns (address) {\n', '        bytes32 _data = keccak256(abi.encode(salt, INTERNAL_HASH, msg.sender));\n', '        address deployed = Create2.deploy(0, _data, bytecode);\n', '        emit Deployed(deployed);\n', '        return deployed;\n', '    }\n', '\n', '    function deployOwnable(bytes32 salt, address owner, bytes calldata data, bytes calldata bytecode)\n', '    external returns (address) {\n', '        // Contract should get the date using IFerrumDeployer(this).initData();\n', '        initData = data;\n', '        bytes32 _data = keccak256(abi.encode(salt, EXTERNAL_HASH, owner, data));\n', '        address addr = Create2.deploy(0, _data, bytecode);\n', '        if (owner != address(0)) {\n', '            Ownable(addr).transferOwnership(owner);\n', '        }\n', '        emit DeployedWithData(addr, owner);\n', '        delete initData;\n', '        return addr;\n', '    }\n', '\n', '    function computeAddressOwnable(bytes32 salt, address owner, bytes calldata data, bytes32 bytecodeHash)\n', '    external view returns (address) {\n', '        bytes32 _data = keccak256(abi.encode(salt, EXTERNAL_HASH, owner, data));\n', '        return Create2.computeAddress(_data, bytecodeHash);\n', '    }\n', '\n', '    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer)\n', '    external view returns (address) {\n', '        bytes32 _data = keccak256(\n', '            abi.encodePacked(salt, INTERNAL_HASH, deployer)\n', '        );\n', '        return Create2.computeAddress(_data, bytecodeHash);\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/**\n', ' * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n', ' * `CREATE2` can be used to compute in advance the address where a smart\n', ' * contract will be deployed, which allows for interesting new mechanisms known\n', " * as 'counterfactual interactions'.\n", ' *\n', ' * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n', ' * information.\n', ' */\n', 'library Create2 {\n', '    /**\n', '     * @dev Deploys a contract using `CREATE2`. The address where the contract\n', '     * will be deployed can be known in advance via {computeAddress}.\n', '     *\n', '     * The bytecode for a contract can be obtained from Solidity with\n', '     * `type(contractName).creationCode`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `bytecode` must not be empty.\n', '     * - `salt` must have not been used for `bytecode` already.\n', '     * - the factory must have a balance of at least `amount`.\n', '     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n', '     */\n', '    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n', '        address addr;\n', '        require(address(this).balance >= amount, "Create2: insufficient balance");\n', '        require(bytecode.length != 0, "Create2: bytecode length is zero");\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n', '        }\n', '        require(addr != address(0), "Create2: Failed on deploy");\n', '        return addr;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n', '     * `bytecodeHash` or `salt` will result in a new destination address.\n', '     */\n', '    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n', '        return computeAddress(salt, bytecodeHash, address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n', "     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n", '     */\n', '    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n', '        bytes32 _data = keccak256(\n', '            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n', '        );\n', '        return address(uint160(uint256(_data)));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', 'interface IFerrumDeployer {\n', '    function initData() external returns (bytes memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity >=0.6.0 <=0.8.0;\n', '\n', 'interface IVersioned {\n', '\tfunction VERSION() external view returns (string memory);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']