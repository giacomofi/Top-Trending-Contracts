['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', '\n', 'pragma solidity ^0.8.1;\n', '\n', 'abstract\n', 'contract OracleCallable {\n', '    \n', '    address private oracle_key_;\n', '    \n', '    event OracleKeyChanged(address indexed _oracle_key);\n', '    \n', '    constructor (address _oracle_key) {\n', '        oracle_key_ = _oracle_key;\n', '        emit OracleKeyChanged(_oracle_key);\n', '    }    \n', '    \n', '    modifier onlyOracle() {\n', '        require(oracle_key_ == msg.sender, "Caller is not the oracle");\n', '        _;\n', '    }    \n', '    \n', '    function changeOracleKeyInternal(address _oracle_key) internal\n', '    {\n', '        require(_oracle_key != address(0), "New oracle is the zero address");\n', '        emit OracleKeyChanged(_oracle_key);\n', '        oracle_key_ = _oracle_key;\n', '    }\n', '    \n', '    function changeOracleKey(address _oracle_key) external onlyOracle returns (bool success) \n', '    {\n', '        changeOracleKeyInternal(_oracle_key);\n', '        return true;\n', '    }   \n', '    \n', '    function getOracleKey() view public returns (address)\n', '    {\n', '        return oracle_key_;\n', '    }\n', '}\n', '\n', '\n', 'abstract\n', 'contract PigeonReceive is OracleCallable {\n', '    \n', '    event PigeonCallable (address _oracleKey);\n', '    \n', '    event PigeonArrived (\n', '         uint256  _source_chain_id,    uint256 _source_contract_id,     \n', '         uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\n', '         uint256 _source_topic0,      uint256 _source_topic1,          uint256 _source_topic2,\n', '         uint256 _source_topic3,      uint256 _source_topic4,          uint256 _source_topic5\n', '    );\n', '\n', '    constructor (address _oracleKey) OracleCallable (_oracleKey) \n', '    {\n', '        emit PigeonCallable(_oracleKey);\n', '    }\n', '\n', '    function pigeonArrive (\n', '        uint256  _source_chain_id,    uint256 _source_contract_id,\n', '        uint256  _source_block_no,    uint256  _source_confirmations,   uint256 _source_txn_hash,\n', '        uint256 _topic0, uint256 _topic1, uint256 _topic2, uint256 _topic3, uint256 _topic4, uint256 _topic5\n', '    ) onlyOracle external virtual returns (bool success)\n', '    {\n', '        emit PigeonArrived(\n', '           _source_chain_id, _source_contract_id,\n', '           _source_block_no, _source_confirmations, _source_txn_hash,\n', '           _topic0, _topic1, _topic2, _topic3, _topic4, _topic5);\n', '        return true;\n', '    }\n', '    \n', '}\n', '\n', 'abstract\n', 'contract PigeonInterface {\n', '    event PigeonCall(\n', '        uint256 _source_txn_hash, uint256 _source_event_id,\n', '        uint256 _dest_chain_id,  uint256 _dest_contract_id\n', '    );\n', '    \n', '    function pigeonSend(\n', '        uint256 _source_txn_hash,    uint256 _source_event_id,\n', '        uint256 _dest_chain_id,      uint256 _dest_contract_id) external virtual payable returns (bool success);\n', ' \n', '    function pigeonCost(uint256 _dest_chain_id) external view virtual returns (uint256 pigeon_call_cost);\n', '\n', '    function setPigeonCost(uint256 _dest_chain_id, uint256 cost) external virtual returns (bool success);\n', '    \n', '    function setPigeonCosts(uint256[] memory _dest_chain_id, uint256[] memory _cost) external virtual returns (bool success);\n', '    \n', '    function chainId() external view virtual returns (uint256);\n', '    \n', '    function getPigeonOracleKey() view virtual external returns (address);\n', '\n', '}\n', '\n', 'contract Pigeon is OracleCallable, PigeonInterface {\n', '\n', '    event PigeonCostChanged(uint256 _chain_id, uint256 _cost);\n', '\n', '    mapping (uint256 => uint256) private pigeon_cost_;\n', '    \n', '    uint256 private chain_id_;\n', '\n', '    constructor (uint256 _chain_id, address _oracle_key, uint256[] memory _dest_chain_ids, uint256[] memory _dest_chain_costs) OracleCallable(_oracle_key) {\n', '        chain_id_ = _chain_id;\n', '        for (uint i = 0; i < _dest_chain_ids.length; ++i)\n', '            pigeon_cost_[_dest_chain_ids[i]] = _dest_chain_costs[i];\n', '    }\n', '    \n', '    function chainId() external view override returns (uint256) \n', '    {\n', '        return chain_id_;\n', '    }\n', '\n', '    function getPigeonOracleKey() view override external returns (address)\n', '    {\n', '        return getOracleKey();\n', '    }\n', '\n', '    function pigeonSend(\n', '        uint256 _source_txn_hash,    uint256 _source_event_id,\n', '        uint256 _dest_chain_id,      uint256 _dest_contract_id) external payable override returns (bool success)\n', '    {\n', '        require(pigeon_cost_[_dest_chain_id] != 0, "The network you are trying to call is not currently supported.");\n', '        require(msg.value >= pigeon_cost_[_dest_chain_id], "Insufficient funds sent to use pigeon. Please check pigeonCost(chain_id).");\n', '        emit PigeonCall(\n', '            _source_txn_hash,    _source_event_id,\n', '            _dest_chain_id,      _dest_contract_id\n', '        );\n', '        return true;\n', '    }\n', '   \n', '    function pigeonCost(uint256 _dest_chain_id) external view override returns (uint256 pigeon_call_cost)\n', '    {\n', '        require(pigeon_cost_[_dest_chain_id] != 0, "The network you are trying to call is not currently supported.");\n', '        return pigeon_cost_[_dest_chain_id];\n', '    }\n', '\n', '    function setPigeonCost(uint256 _dest_chain_id, uint256 _cost) external override onlyOracle returns (bool success)\n', '    {\n', '        pigeon_cost_[_dest_chain_id] = _cost;\n', '        emit PigeonCostChanged(_dest_chain_id, _cost);\n', '        return true;\n', '    }\n', '\n', '    function setPigeonCosts(uint256[] memory _dest_chain_id, uint256[] memory _cost) external override onlyOracle returns (bool success)\n', '    {\n', '        require(_dest_chain_id.length == _cost.length);\n', '        for (uint i = 0; i < _dest_chain_id.length; ++i)\n', '        {\n', '            pigeon_cost_[_dest_chain_id[i]] = _cost[i];\n', '            emit PigeonCostChanged(_dest_chain_id[i], _cost[i]);\n', '        }\n', '        return true;\n', '    }\n', '}']