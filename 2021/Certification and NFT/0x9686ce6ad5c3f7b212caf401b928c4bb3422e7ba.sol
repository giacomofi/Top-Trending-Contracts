['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-16\n', '*/\n', '\n', '// Sources flattened with hardhat v2.1.2 https://hardhat.org\n', '\n', '// File contracts/common/interfaces.sol\n', '\n', 'pragma solidity ^0.7.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface TokenInterface {\n', '    function approve(address, uint256) external;\n', '    function transfer(address, uint) external returns (bool);\n', '    function transferFrom(address, address, uint) external;\n', '    function deposit() external payable;\n', '    function withdraw(uint) external;\n', '    function balanceOf(address) external view returns (uint);\n', '    function decimals() external view returns (uint);\n', '}\n', '\n', 'interface MemoryInterface {\n', '    function getUint(uint id) external returns (uint num);\n', '    function setUint(uint id, uint val) external;\n', '}\n', '\n', 'interface AccountInterface {\n', '    function enable(address) external;\n', '    function disable(address) external;\n', '    function isAuth(address) external view returns (bool);\n', '    function cast(\n', '        string[] calldata _targets,\n', '        bytes[] calldata _datas,\n', '        address _origin\n', '    ) external payable returns (bytes32);\n', '}\n', '\n', 'interface AaveInterface {\n', '    function deposit(address _asset, uint256 _amount, address _onBehalfOf, uint16 _referralCode) external;\n', '    function withdraw(address _asset, uint256 _amount, address _to) external;\n', '    function borrow(\n', '        address _asset,\n', '        uint256 _amount,\n', '        uint256 _interestRateMode,\n', '        uint16 _referralCode,\n', '        address _onBehalfOf\n', '    ) external;\n', '    function repay(address _asset, uint256 _amount, uint256 _rateMode, address _onBehalfOf) external;\n', '    function setUserUseReserveAsCollateral(address _asset, bool _useAsCollateral) external;\n', '    function getUserAccountData(address user) external view returns (\n', '        uint256 totalCollateralETH,\n', '        uint256 totalDebtETH,\n', '        uint256 availableBorrowsETH,\n', '        uint256 currentLiquidationThreshold,\n', '        uint256 ltv,\n', '        uint256 healthFactor\n', '    );\n', '}\n', '\n', 'interface AaveLendingPoolProviderInterface {\n', '    function getLendingPool() external view returns (address);\n', '}\n', '\n', '// Aave Protocol Data Provider\n', 'interface AaveDataProviderInterface {\n', '    function getReserveTokensAddresses(address _asset) external view returns (\n', '        address aTokenAddress,\n', '        address stableDebtTokenAddress,\n', '        address variableDebtTokenAddress\n', '    );\n', '    function getUserReserveData(address _asset, address _user) external view returns (\n', '        uint256 currentATokenBalance,\n', '        uint256 currentStableDebt,\n', '        uint256 currentVariableDebt,\n', '        uint256 principalStableDebt,\n', '        uint256 scaledVariableDebt,\n', '        uint256 stableBorrowRate,\n', '        uint256 liquidityRate,\n', '        uint40 stableRateLastUpdated,\n', '        bool usageAsCollateralEnabled\n', '    );\n', '    function getReserveConfigurationData(address asset) external view returns (\n', '        uint256 decimals,\n', '        uint256 ltv,\n', '        uint256 liquidationThreshold,\n', '        uint256 liquidationBonus,\n', '        uint256 reserveFactor,\n', '        bool usageAsCollateralEnabled,\n', '        bool borrowingEnabled,\n', '        bool stableBorrowRateEnabled,\n', '        bool isActive,\n', '        bool isFrozen\n', '    );\n', '}\n', '\n', 'interface AaveAddressProviderRegistryInterface {\n', '    function getAddressesProvidersList() external view returns (address[] memory);\n', '}\n', '\n', 'interface ATokenInterface {\n', '    function scaledBalanceOf(address _user) external view returns (uint256);\n', '    function isTransferAllowed(address _user, uint256 _amount) external view returns (bool);\n', '    function balanceOf(address _user) external view returns(uint256);\n', '    function transferFrom(address, address, uint) external returns (bool);\n', '    function approve(address, uint256) external;\n', '}\n', '\n', 'interface AaveMigratorInterface {\n', '    function migrate(AaveDataRaw memory _data) external;\n', '    function migrateWithFlash(AaveDataRaw memory _data, uint ethAmt) external;\n', '}\n', '\n', 'struct AaveDataRaw {\n', '    address targetDsa;\n', '    uint[] supplyAmts;\n', '    uint[] variableBorrowAmts;\n', '    uint[] stableBorrowAmts;\n', '    address[] supplyTokens;\n', '    address[] borrowTokens;\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'contract DSMath {\n', '    uint constant WAD = 10 ** 18;\n', '    uint constant RAY = 10 ** 27;\n', '\n', '    function add(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.add(x, y);\n', '    }\n', '\n', '    function sub(uint x, uint y) internal virtual pure returns (uint z) {\n', '        z = SafeMath.sub(x, y);\n', '    }\n', '\n', '    function mul(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.mul(x, y);\n', '    }\n', '\n', '    function div(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.div(x, y);\n', '    }\n', '\n', '    function wmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.add(SafeMath.mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function wdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.add(SafeMath.mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.add(SafeMath.mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    function rmul(uint x, uint y) internal pure returns (uint z) {\n', '        z = SafeMath.add(SafeMath.mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function toInt(uint x) internal pure returns (int y) {\n', '        y = int(x);\n', '        require(y >= 0, "int-overflow");\n', '    }\n', '\n', '    function toRad(uint wad) internal pure returns (uint rad) {\n', '        rad = mul(wad, 10 ** 27);\n', '    }\n', '}\n', '\n', 'abstract contract Stores {\n', '\n', '    /**\n', '    * @dev Return ethereum address\n', '    */\n', '    address constant internal ethAddr = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '\n', '    /**\n', '    * @dev Return Wrapped ETH address\n', '    */\n', '    address constant internal wethAddr = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    /**\n', '    * @dev Return memory variable address\n', '    */\n', '    MemoryInterface constant internal instaMemory = MemoryInterface(0x8a5419CfC711B2343c17a6ABf4B2bAFaBb06957F);\n', '\n', '    /**\n', '    * @dev Get Uint value from InstaMemory Contract.\n', '    */\n', '    function getUint(uint getId, uint val) internal returns (uint returnVal) {\n', '        returnVal = getId == 0 ? val : instaMemory.getUint(getId);\n', '    }\n', '\n', '    /**\n', '    * @dev Set Uint value in InstaMemory Contract.\n', '    */\n', '    function setUint(uint setId, uint val) virtual internal {\n', '        if (setId != 0) instaMemory.setUint(setId, val);\n', '    }\n', '\n', '}\n', '\n', '\n', 'abstract contract Helpers is DSMath, Stores {\n', '\n', '    /**\n', '     * @dev Insta Aave migrator contract\n', '    */\n', '    AaveMigratorInterface constant internal migrator = AaveMigratorInterface(address(0xA0557234eB7b3c503388202D3768Cfa2f1AE9Dc2));\n', '\n', '    /**\n', '     * @dev Aave Data Provider\n', '    */\n', '    AaveDataProviderInterface constant internal aaveData = AaveDataProviderInterface(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\n', '}\n', '\n', 'contract Events {\n', '    event LogAaveV2Migrate(\n', '        address indexed user,\n', '        address indexed targetDsa,\n', '        address[] supplyTokens,\n', '        address[] borrowTokens\n', '    );\n', '}\n', '\n', 'contract AaveMigrateResolver is Helpers, Events {\n', '\n', '    function migrate(\n', '        address targetDsa,\n', '        address[] memory supplyTokens,\n', '        address[] memory borrowTokens,\n', '        uint[] memory variableBorrowAmts,\n', '        uint[] memory stableBorrowAmts,\n', '        uint[] memory supplyAmts,\n', '        uint ethAmt // if ethAmt is > 0 then use migrateWithflash\n', '    ) external payable {\n', '        require(supplyTokens.length > 0, "0-length-not-allowed");\n', '        require(supplyTokens.length == supplyAmts.length, "invalid-length");\n', '        require(borrowTokens.length == variableBorrowAmts.length && borrowTokens.length  == stableBorrowAmts.length, "invalid-length");\n', '        require(targetDsa != address(0), "invalid-address");\n', '\n', '        AaveDataRaw memory data;\n', '\n', '        data.targetDsa = targetDsa;\n', '        data.supplyTokens = supplyTokens;\n', '        data.borrowTokens = borrowTokens;\n', '        data.variableBorrowAmts = variableBorrowAmts;\n', '        data.stableBorrowAmts = stableBorrowAmts;\n', '        data.supplyAmts = supplyAmts;\n', '\n', '        for (uint i = 0; i < data.supplyTokens.length; i++) {\n', '            address _token = data.supplyTokens[i] == ethAddr ? wethAddr : data.supplyTokens[i];\n', '            data.supplyTokens[i] = _token;\n', '            (address _aToken, ,) = aaveData.getReserveTokensAddresses(_token);\n', '            ATokenInterface _aTokenContract = ATokenInterface(_aToken);\n', '\n', '            if (data.supplyAmts[i] == uint(-1)) {\n', '                data.supplyAmts[i] = _aTokenContract.balanceOf(address(this));\n', '            }\n', '\n', '            _aTokenContract.approve(address(migrator), data.supplyAmts[i]);\n', '        }\n', '\n', '        if (ethAmt > 0) {\n', '            migrator.migrateWithFlash(data, ethAmt);\n', '        } else {\n', '            migrator.migrate(data);\n', '        }\n', '\n', '        emit LogAaveV2Migrate(msg.sender, data.targetDsa, data.supplyTokens, data.borrowTokens);\n', '    }\n', '\n', '}\n', '\n', 'contract ConnectAaveV2PolygonMigrator is AaveMigrateResolver {\n', '\n', '    /**\n', '     * @dev Connector Details\n', '    */\n', '    function connectorID() public pure returns(uint _type, uint _id) {\n', '        (_type, _id) = (1, 90);\n', '    }\n', '\n', '    string constant public name = "Aave-V2-Polygon-Migrator-v1";\n', '}']