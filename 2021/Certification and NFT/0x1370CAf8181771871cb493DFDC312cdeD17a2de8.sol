['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', '\n', 'contract GSVEBeacon is Ownable{\n', '    \n', '    mapping(address => address) private _deployedAddress;\n', '    mapping(address => address) private _addressGasToken;\n', '    mapping(address => uint256) private _supportedGasTokens;\n', '    \n', '    constructor (address _wchi, address _wgst2, address _wgst1) public {\n', '        //chi, gst2 and gst1\n', '        _supportedGasTokens[0x0000000000004946c0e9F43F4Dee607b0eF1fA1c] = 30053;\n', '        _supportedGasTokens[0x0000000000b3F879cb30FE243b4Dfee438691c04] = 30870;\n', '        _supportedGasTokens[0x88d60255F917e3eb94eaE199d827DAd837fac4cB] = 20046;\n', '\n', '        //wchi, wgst2 and wgst1\n', '        _supportedGasTokens[_wchi] = 30053;\n', '        _supportedGasTokens[_wgst2] = 30870;\n', '        _supportedGasTokens[_wgst1] = 20046;\n', '    }\n', '    \n', '    /**\n', '    * @dev return the location of a users deployed wrapper\n', '    */\n', '    function getDeployedAddress(address creator) public view returns(address){\n', '        return _deployedAddress[creator];\n', '    }\n', '\n', '    /**\n', '    * @dev return the gas token used by a safe\n', '    */\n', '    function getAddressGastoken(address safe) public view returns(address){\n', '        return _addressGasToken[safe];\n', '    }\n', '\n', '    /**\n', '    * @dev return the savings a gas token gives\n', '    */\n', '    function getAddressGasTokenSaving(address gastoken) public view returns(uint256){\n', '        return _supportedGasTokens[gastoken];\n', '    }\n', '    \n', '    /**\n', '    * @dev return the address and savings for a given safe proxy\n', '    */\n', '    function getGasTokenAndSaving(address safe) public view returns(address, uint256){\n', '        return (getAddressGastoken(safe), getAddressGasTokenSaving(safe));\n', '    }\n', '\n', '    /**\n', '    * @dev allows the creator of a safe to change the gas token used by the safe\n', '    */\n', '    function setAddressGasToken(address safe, address gasToken) public{\n', '        require(_deployedAddress[msg.sender] == safe, "GSVE: Sender is not the safe creator");\n', '        if (gasToken != address(0)){\n', '            require(_supportedGasTokens[gasToken] > 0, "GSVE: Invalid Gas Token");\n', '        }\n', '        _addressGasToken[safe] = gasToken;\n', '        emit UpdatedGasToken(safe, gasToken);\n', '    }\n', '\n', '    /**\n', '    * @dev sets the initial gas token of a given safe proxy\n', '    */\n', '    function initSafe(address owner, address safe) public onlyOwner{\n', '        require(_deployedAddress[owner] == address(0), "GSVE: address already init\'d");\n', '        _deployedAddress[owner] = safe;\n', '        _addressGasToken[safe] = address(0);\n', '        emit UpdatedGasToken(safe, address(0));\n', '    }\n', '\n', '    event UpdatedGasToken(address safe, address gasToken);\n', '\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes calldata) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']