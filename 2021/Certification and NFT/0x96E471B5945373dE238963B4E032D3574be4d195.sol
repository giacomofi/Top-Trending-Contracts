['// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', '/// @notice Contains event declarations related to NutBerry.\n', '// Audit-1: ok\n', 'interface NutBerryEvents {\n', '  event BlockBeacon();\n', '  event CustomBlockBeacon();\n', '  event NewSolution();\n', '  event RollupUpgrade(address target);\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.7.6;\n', '\n', "import '@NutBerry/NutBerry/src/tsm/contracts/NutBerryEvents.sol';\n", '\n', '/// @notice Callforwarding proxy\n', '// Audit-1: ok\n', 'contract RollupProxy is NutBerryEvents {\n', '  constructor (address initialImplementation) {\n', '    assembly {\n', '      // stores the initial contract address to forward calls\n', '      sstore(not(returndatasize()), initialImplementation)\n', '      // created at block - a hint for clients to know from which block to start syncing events\n', '      sstore(0x319a610c8254af7ecb1f669fb64fa36285b80cad26faf7087184ce1dceb114df, number())\n', '    }\n', '    // emit upgrade event\n', '    emit NutBerryEvents.RollupUpgrade(initialImplementation);\n', '  }\n', '\n', '  fallback () external payable {\n', '    assembly {\n', '      // copy all calldata into memory - returndatasize() is a substitute for `0`\n', '      calldatacopy(returndatasize(), returndatasize(), calldatasize())\n', '      // keep a copy to be used after the call\n', '      let zero := returndatasize()\n', '      // call contract address loaded from storage slot with key `uint256(-1)`\n', '      let success := delegatecall(\n', '        gas(),\n', '        sload(not(returndatasize())),\n', '        returndatasize(),\n', '        calldatasize(),\n', '        returndatasize(),\n', '        returndatasize()\n', '      )\n', '\n', '      // copy all return data into memory\n', '      returndatacopy(zero, zero, returndatasize())\n', '\n', '      // if the delegatecall succeeded, then return\n', '      if success {\n', '        return(zero, returndatasize())\n', '      }\n', '      // else revert\n', '      revert(zero, returndatasize())\n', '    }\n', '  }\n', '}\n', '\n', '{\n', '  "evmVersion": "berlin",\n', '  "libraries": {},\n', '  "metadata": {\n', '    "bytecodeHash": "none"\n', '  },\n', '  "optimizer": {\n', '    "details": {\n', '      "constantOptimizer": true,\n', '      "cse": true,\n', '      "deduplicate": true,\n', '      "jumpdestRemover": true,\n', '      "orderLiterals": false,\n', '      "peephole": true,\n', '      "yul": false\n', '    },\n', '    "runs": 256\n', '  },\n', '  "remappings": [],\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']