['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-16\n', '*/\n', '\n', '/***\n', ' *    ██████╗ ███████╗ ██████╗  ██████╗ \n', ' *    ██╔══██╗██╔════╝██╔════╝ ██╔═══██╗\n', ' *    ██║  ██║█████╗  ██║  ███╗██║   ██║\n', ' *    ██║  ██║██╔══╝  ██║   ██║██║   ██║\n', ' *    ██████╔╝███████╗╚██████╔╝╚██████╔╝\n', ' *    ╚═════╝ ╚══════╝ ╚═════╝  ╚═════╝ \n', ' *    \n', ' * https://dego.finance\n', '                                  \n', '* MIT License\n', '* ===========\n', '*\n', '* Copyright (c) 2021 dego\n', '*\n', '* Permission is hereby granted, free of charge, to any person obtaining a copy\n', '* of this software and associated documentation files (the "Software"), to deal\n', '* in the Software without restriction, including without limitation the rights\n', '* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n', '* copies of the Software, and to permit persons to whom the Software is\n', '* furnished to do so, subject to the following conditions:\n', '*\n', '* The above copyright notice and this permission notice shall be included in all\n', '* copies or substantial portions of the Software.\n', '*\n', '* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n', '* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n', '* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n', '* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n', '* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n', '* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n', '*/// File: @openzeppelin/contracts/introspection/IERC165.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC165 standard, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-165[EIP].\n', ' *\n', ' * Implementers can declare support of contract interfaces, which can then be\n', ' * queried by others ({ERC165Checker}).\n', ' *\n', ' * For an implementation, see {ERC165}.\n', ' */\n', 'interface IERC165 {\n', '    /**\n', '     * @dev Returns true if this contract implements the interface defined by\n', '     * `interfaceId`. See the corresponding\n', '     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n', '     * to learn more about how these ids are created.\n', '     *\n', '     * This function call must use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC1155/IERC1155.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Required interface of an ERC1155 compliant contract, as defined in the\n', ' * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155 is IERC165 {\n', '    /**\n', '     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n', '     */\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    /**\n', '     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n', '     * transfers.\n', '     */\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    /**\n', '     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n', '     * `approved`.\n', '     */\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    /**\n', '     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n', '     *\n', '     * If an {URI} event was emitted for `id`, the standard\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n', '     * returned by {IERC1155MetadataURI-uri}.\n', '     */\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    /**\n', "     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n", '     *\n', '     * Emits an {ApprovalForAll} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `operator` cannot be the caller.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    /**\n', "     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n", '     *\n', '     * See {setApprovalForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    /**\n', '     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', "     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n", '     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n', '     *\n', '     * Emits a {TransferBatch} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC1155/IERC1155MetadataURI.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '/**\n', ' * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n', ' * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155MetadataURI is IERC1155 {\n', '    /**\n', '     * @dev Returns the URI for token type `id`.\n', '     *\n', '     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n', '     * clients with the actual token type ID.\n', '     */\n', '    function uri(uint256 id) external view returns (string memory);\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * _Available since v3.1._\n', ' */\n', 'interface IERC1155Receiver is IERC165 {\n', '\n', '    /**\n', '        @dev Handles the receipt of a single ERC1155 token type. This function is\n', '        called at the end of a `safeTransferFrom` after the balance has been updated.\n', '        To accept the transfer, this must return\n', '        `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '        (i.e. 0xf23a6e61, or its own function selector).\n', '        @param operator The address which initiated the transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param id The ID of the token being transferred\n', '        @param value The amount of tokens being transferred\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155Received(\n', '        address operator,\n', '        address from,\n', '        uint256 id,\n', '        uint256 value,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '\n', '    /**\n', '        @dev Handles the receipt of a multiple ERC1155 token types. This function\n', '        is called at the end of a `safeBatchTransferFrom` after the balances have\n', '        been updated. To accept the transfer(s), this must return\n', '        `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '        (i.e. 0xbc197c81, or its own function selector).\n', '        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n', '        @param from The address which previously owned the token\n', '        @param ids An array containing ids of each token being transferred (order and length must match values array)\n', '        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n', '        @param data Additional data with no specified format\n', '        @return `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))` if transfer is allowed\n', '    */\n', '    function onERC1155BatchReceived(\n', '        address operator,\n', '        address from,\n', '        uint256[] calldata ids,\n', '        uint256[] calldata values,\n', '        bytes calldata data\n', '    )\n', '        external\n', '        returns(bytes4);\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/introspection/ERC165.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC165} interface.\n', ' *\n', ' * Contracts may inherit from this and call {_registerInterface} to declare\n', ' * their support of an interface.\n', ' */\n', 'contract ERC165 is IERC165 {\n', '    /*\n', "     * bytes4(keccak256('supportsInterface(bytes4)')) == 0x01ffc9a7\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC165 = 0x01ffc9a7;\n', '\n', '    /**\n', "     * @dev Mapping of interface ids to whether or not it's supported.\n", '     */\n', '    mapping(bytes4 => bool) private _supportedInterfaces;\n', '\n', '    constructor () internal {\n', '        // Derived contracts need only register support for their own interfaces,\n', '        // we register support for ERC165 itself here\n', '        _registerInterface(_INTERFACE_ID_ERC165);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC165-supportsInterface}.\n', '     *\n', '     * Time complexity O(1), guaranteed to always use less than 30 000 gas.\n', '     */\n', '    function supportsInterface(bytes4 interfaceId) public view override returns (bool) {\n', '        return _supportedInterfaces[interfaceId];\n', '    }\n', '\n', '    /**\n', '     * @dev Registers the contract as an implementer of the interface defined by\n', '     * `interfaceId`. Support of the actual ERC165 interface is automatic and\n', '     * registering its interface id is not required.\n', '     *\n', '     * See {IERC165-supportsInterface}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `interfaceId` cannot be the ERC165 invalid interface (`0xffffffff`).\n', '     */\n', '    function _registerInterface(bytes4 interfaceId) internal virtual {\n', '        require(interfaceId != 0xffffffff, "ERC165: invalid interface id");\n', '        _supportedInterfaces[interfaceId] = true;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies in extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC1155/ERC1155.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '/**\n', ' *\n', ' * @dev Implementation of the basic standard multi-token.\n', ' * See https://eips.ethereum.org/EIPS/eip-1155\n', ' * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n', ' *\n', ' * _Available since v3.1._\n', ' */\n', 'contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    // Mapping from token ID to account balances\n', '    mapping (uint256 => mapping(address => uint256)) private _balances;\n', '\n', '    // Mapping from account to operator approvals\n', '    mapping (address => mapping(address => bool)) private _operatorApprovals;\n', '\n', '    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n', '    string private _uri;\n', '\n', '    /*\n', "     *     bytes4(keccak256('balanceOf(address,uint256)')) == 0x00fdd58e\n", "     *     bytes4(keccak256('balanceOfBatch(address[],uint256[])')) == 0x4e1273f4\n", "     *     bytes4(keccak256('setApprovalForAll(address,bool)')) == 0xa22cb465\n", "     *     bytes4(keccak256('isApprovedForAll(address,address)')) == 0xe985e9c5\n", "     *     bytes4(keccak256('safeTransferFrom(address,address,uint256,uint256,bytes)')) == 0xf242432a\n", "     *     bytes4(keccak256('safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)')) == 0x2eb2c2d6\n", '     *\n', '     *     => 0x00fdd58e ^ 0x4e1273f4 ^ 0xa22cb465 ^\n', '     *        0xe985e9c5 ^ 0xf242432a ^ 0x2eb2c2d6 == 0xd9b67a26\n', '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC1155 = 0xd9b67a26;\n', '\n', '    /*\n', "     *     bytes4(keccak256('uri(uint256)')) == 0x0e89341c\n", '     */\n', '    bytes4 private constant _INTERFACE_ID_ERC1155_METADATA_URI = 0x0e89341c;\n', '\n', '    /**\n', '     * @dev See {_setURI}.\n', '     */\n', '    constructor (string memory uri) public {\n', '        _setURI(uri);\n', '\n', '        // register the supported interfaces to conform to ERC1155 via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC1155);\n', '\n', '        // register the supported interfaces to conform to ERC1155MetadataURI via ERC165\n', '        _registerInterface(_INTERFACE_ID_ERC1155_METADATA_URI);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155MetadataURI-uri}.\n', '     *\n', '     * This implementation returns the same URI for *all* token types. It relies\n', '     * on the token type ID substitution mechanism\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n', '     *\n', '     * Clients calling this function must replace the `\\{id\\}` substring with the\n', '     * actual token type ID.\n', '     */\n', '    function uri(uint256) external view virtual override returns (string memory) {\n', '        return _uri;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-balanceOf}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     */\n', '    function balanceOf(address account, uint256 id) public view override returns (uint256) {\n', '        require(account != address(0), "ERC1155: balance query for the zero address");\n', '        return _balances[id][account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-balanceOfBatch}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `accounts` and `ids` must have the same length.\n', '     */\n', '    function balanceOfBatch(\n', '        address[] memory accounts,\n', '        uint256[] memory ids\n', '    )\n', '        public\n', '        view\n', '        override\n', '        returns (uint256[] memory)\n', '    {\n', '        require(accounts.length == ids.length, "ERC1155: accounts and ids length mismatch");\n', '\n', '        uint256[] memory batchBalances = new uint256[](accounts.length);\n', '\n', '        for (uint256 i = 0; i < accounts.length; ++i) {\n', '            require(accounts[i] != address(0), "ERC1155: batch balance query for the zero address");\n', '            batchBalances[i] = _balances[ids[i]][accounts[i]];\n', '        }\n', '\n', '        return batchBalances;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-setApprovalForAll}.\n', '     */\n', '    function setApprovalForAll(address operator, bool approved) public virtual override {\n', '        require(_msgSender() != operator, "ERC1155: setting approval status for self");\n', '\n', '        _operatorApprovals[_msgSender()][operator] = approved;\n', '        emit ApprovalForAll(_msgSender(), operator, approved);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-isApprovedForAll}.\n', '     */\n', '    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n', '        return _operatorApprovals[account][operator];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-safeTransferFrom}.\n', '     */\n', '    function safeTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 amount,\n', '        bytes memory data\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '    {\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: caller is not owner nor approved"\n', '        );\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n', '\n', '        _balances[id][from] = _balances[id][from].sub(amount, "ERC1155: insufficient balance for transfer");\n', '        _balances[id][to] = _balances[id][to].add(amount);\n', '\n', '        emit TransferSingle(operator, from, to, id, amount);\n', '\n', '        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC1155-safeBatchTransferFrom}.\n', '     */\n', '    function safeBatchTransferFrom(\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        public\n', '        virtual\n', '        override\n', '    {\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '        require(to != address(0), "ERC1155: transfer to the zero address");\n', '        require(\n', '            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n', '            "ERC1155: transfer caller is not owner nor approved"\n', '        );\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n', '\n', '        for (uint256 i = 0; i < ids.length; ++i) {\n', '            uint256 id = ids[i];\n', '            uint256 amount = amounts[i];\n', '\n', '            _balances[id][from] = _balances[id][from].sub(\n', '                amount,\n', '                "ERC1155: insufficient balance for transfer"\n', '            );\n', '            _balances[id][to] = _balances[id][to].add(amount);\n', '        }\n', '\n', '        emit TransferBatch(operator, from, to, ids, amounts);\n', '\n', '        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets a new URI for all token types, by relying on the token type ID\n', '     * substitution mechanism\n', '     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n', '     *\n', '     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n', '     * URI or any of the amounts in the JSON file at said URI will be replaced by\n', '     * clients with the token type ID.\n', '     *\n', '     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n', '     * interpreted by clients as\n', '     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n', '     * for token type ID 0x4cce0.\n', '     *\n', '     * See {uri}.\n', '     *\n', '     * Because these URIs cannot be meaningfully represented by the {URI} event,\n', '     * this function emits no events.\n', '     */\n', '    function _setURI(string memory newuri) internal virtual {\n', '        _uri = newuri;\n', '    }\n', '\n', '    /**\n', '     * @dev Creates `amount` tokens of token type `id`, and assigns them to `account`.\n', '     *\n', '     * Emits a {TransferSingle} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function _mint(address account, uint256 id, uint256 amount, bytes memory data) internal virtual {\n', '        require(account != address(0), "ERC1155: mint to the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, address(0), account, _asSingletonArray(id), _asSingletonArray(amount), data);\n', '\n', '        _balances[id][account] = _balances[id][account].add(amount);\n', '        emit TransferSingle(operator, address(0), account, id, amount);\n', '\n', '        _doSafeTransferAcceptanceCheck(operator, address(0), account, id, amount, data);\n', '    }\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n', '     * acceptance magic value.\n', '     */\n', '    function _mintBatch(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) internal virtual {\n', '        require(to != address(0), "ERC1155: mint to the zero address");\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n', '\n', '        for (uint i = 0; i < ids.length; i++) {\n', '            _balances[ids[i]][to] = amounts[i].add(_balances[ids[i]][to]);\n', '        }\n', '\n', '        emit TransferBatch(operator, address(0), to, ids, amounts);\n', '\n', '        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens of token type `id` from `account`\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens of token type `id`.\n', '     */\n', '    function _burn(address account, uint256 id, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC1155: burn from the zero address");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, account, address(0), _asSingletonArray(id), _asSingletonArray(amount), "");\n', '\n', '        _balances[id][account] = _balances[id][account].sub(\n', '            amount,\n', '            "ERC1155: burn amount exceeds balance"\n', '        );\n', '\n', '        emit TransferSingle(operator, account, address(0), id, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `ids` and `amounts` must have the same length.\n', '     */\n', '    function _burnBatch(address account, uint256[] memory ids, uint256[] memory amounts) internal virtual {\n', '        require(account != address(0), "ERC1155: burn from the zero address");\n', '        require(ids.length == amounts.length, "ERC1155: ids and amounts length mismatch");\n', '\n', '        address operator = _msgSender();\n', '\n', '        _beforeTokenTransfer(operator, account, address(0), ids, amounts, "");\n', '\n', '        for (uint i = 0; i < ids.length; i++) {\n', '            _balances[ids[i]][account] = _balances[ids[i]][account].sub(\n', '                amounts[i],\n', '                "ERC1155: burn amount exceeds balance"\n', '            );\n', '        }\n', '\n', '        emit TransferBatch(operator, account, address(0), ids, amounts);\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any token transfer. This includes minting\n', '     * and burning, as well as batched variants.\n', '     *\n', '     * The same hook is called on both single and batched variants. For single\n', '     * transfers, the length of the `id` and `amount` arrays will be 1.\n', '     *\n', '     * Calling conditions (for each `id` and `amount` pair):\n', '     *\n', "     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * of token type `id` will be  transferred to `to`.\n', '     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n', '     * for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n", '     * will be burned.\n', '     * - `from` and `to` are never both zero.\n', '     * - `ids` and `amounts` have the same, non-zero length.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        internal virtual\n', '    { }\n', '\n', '    function _doSafeTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256 id,\n', '        uint256 amount,\n', '        bytes memory data\n', '    )\n', '        private\n', '    {\n', '        if (to.isContract()) {\n', '            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n', '                if (response != IERC1155Receiver(to).onERC1155Received.selector) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _doSafeBatchTransferAcceptanceCheck(\n', '        address operator,\n', '        address from,\n', '        address to,\n', '        uint256[] memory ids,\n', '        uint256[] memory amounts,\n', '        bytes memory data\n', '    )\n', '        private\n', '    {\n', '        if (to.isContract()) {\n', '            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (bytes4 response) {\n', '                if (response != IERC1155Receiver(to).onERC1155BatchReceived.selector) {\n', '                    revert("ERC1155: ERC1155Receiver rejected tokens");\n', '                }\n', '            } catch Error(string memory reason) {\n', '                revert(reason);\n', '            } catch {\n', '                revert("ERC1155: transfer to non ERC1155Receiver implementer");\n', '            }\n', '        }\n', '    }\n', '\n', '    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n', '        uint256[] memory array = new uint256[](1);\n', '        array[0] = element;\n', '\n', '        return array;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/library/String.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'library Strings {\n', '    // via https://github.com/oraclize/ethereum-api/blob/master/oraclizeAPI_0.5.sol\n', '    function strConcat(\n', '        string memory _a,\n', '        string memory _b,\n', '        string memory _c,\n', '        string memory _d,\n', '        string memory _e\n', '    ) internal pure returns (string memory) {\n', '        bytes memory _ba = bytes(_a);\n', '        bytes memory _bb = bytes(_b);\n', '        bytes memory _bc = bytes(_c);\n', '        bytes memory _bd = bytes(_d);\n', '        bytes memory _be = bytes(_e);\n', '        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n', '        bytes memory babcde = bytes(abcde);\n', '        uint256 k = 0;\n', '        for (uint256 i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n', '        for (uint256 i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n', '        for (uint256 i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n', '        for (uint256 i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n', '        for (uint256 i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n', '        return string(babcde);\n', '    }\n', '\n', '    function strConcat(\n', '        string memory _a,\n', '        string memory _b,\n', '        string memory _c,\n', '        string memory _d\n', '    ) internal pure returns (string memory) {\n', '        return strConcat(_a, _b, _c, _d, "");\n', '    }\n', '\n', '    function strConcat(\n', '        string memory _a,\n', '        string memory _b,\n', '        string memory _c\n', '    ) internal pure returns (string memory) {\n', '        return strConcat(_a, _b, _c, "", "");\n', '    }\n', '\n', '    function strConcat(string memory _a, string memory _b) internal pure returns (string memory) {\n', '        return strConcat(_a, _b, "", "", "");\n', '    }\n', '\n', '    function uint2str(uint256 _i) internal pure returns (string memory _uintAsString) {\n', '        if (_i == 0) {\n', '            return "0";\n', '        }\n', '        uint256 j = _i;\n', '        uint256 len;\n', '        while (j != 0) {\n', '            len++;\n', '            j /= 10;\n', '        }\n', '        bytes memory bstr = new bytes(len);\n', '        uint256 k = len - 1;\n', '        while (_i != 0) {\n', '            bstr[k--] = bytes1(uint8(48 + (_i % 10)));\n', '            _i /= 10;\n', '        }\n', '        return string(bstr);\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IERC2981.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Implementation of royalties for 721s\n', ' * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-2981.md\n', ' */\n', 'interface IERC2981 {\n', '    // ERC165 bytes to add to interface array - set in parent contract\n', '    // implementing this standard\n', '    //\n', '    // bytes4(keccak256("royaltyInfo(uint256)")) == 0xcef6d368\n', '    // bytes4(keccak256("onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32)")) == 0xe8cb9d99\n', '    // bytes4(0xcef6d368) ^ bytes4(0xe8cb9d99) == 0x263d4ef1\n', '    // bytes4 private constant _INTERFACE_ID_ERC721ROYALTIES = 0x263d4ef1;\n', '    // _registerInterface(_INTERFACE_ID_ERC721ROYALTIES);\n', '\n', "    // @notice Called to return both the creator's address and the royalty percentage\n", '    // @param _tokenId - the NFT asset queried for royalty information\n', '    // @return receiver - address of who should be sent the royalty payment\n', '    // @return amount - a percentage calculated as a fixed point\n', '    //         with a scaling factor of 100000 (5 decimals), such that\n', '    //         100% would be the value 10000000, as 10000000/100000 = 100.\n', '    //         1% would be the value 100000, as 100000/100000 = 1\n', '    function royaltyInfo(uint256 _tokenId) external view returns (address receiver, uint256 amount);\n', '\n', '    // @notice Called when royalty is transferred to the receiver. This\n', '    //         emits the RoyaltiesReceived event as we want the NFT contract\n', '    //         itself to contain the event for easy tracking by royalty receivers.\n', '    // @param _royaltyRecipient - The address of who is entitled to the\n', '    //                            royalties as specified by royaltyInfo().\n', '    // @param _buyer - If known, the address buying the NFT on a secondary\n', '    //                 sale. 0x0 if not known.\n', '    // @param _tokenId - the ID of the ERC-721 token that was sold\n', '    // @param _tokenPaid - The address of the ERC-20 token used to pay the\n', '    //                     royalty fee amount. Set to 0x0 if paid in the\n', '    //                     native asset (ETH).\n', '    // @param _amount - The amount being paid to the creator using the\n', "    //                  correct decimals from _tokenPaid's ERC-20 contract\n", '    //                  (i.e. if 7 decimals, 10000000 for 1 token paid)\n', '    // @param _metadata - Arbitrary data attached to this payment\n', '    // @return `bytes4(keccak256("onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32)"))`\n', '    function onRoyaltiesReceived(address _royaltyRecipient, address _buyer, uint256 _tokenId, address _tokenPaid, uint256 _amount, bytes32 _metadata) external returns (bytes4);\n', '\n', '    // @dev This event MUST be emitted by `onRoyaltiesReceived()`.\n', '    event RoyaltiesReceived(\n', '        address indexed _royaltyRecipient,\n', '        address indexed _buyer,\n', '        uint256 indexed _tokenId,\n', '        address _tokenPaid,\n', '        uint256 _amount,\n', '        bytes32 _metadata\n', '    );\n', '\n', '}\n', '\n', '// File: contracts/nft/TRSR1155/TRSRTradable.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract OwnableDelegateProxy {}\n', '\n', 'contract ProxyRegistry {\n', '  mapping(address => OwnableDelegateProxy) public proxies;\n', '}\n', '\n', '/**\n', '* @title TRSRTradable\n', '* TRSRTradable - ERC1155 contract \n', '* has create and mint functionality, and supports useful standards from OpenZeppelin,\n', '  like _exists(), name(), symbol(), and totalSupply()\n', '*/\n', 'contract TRSRTradable is ERC1155, Ownable, IERC2981 {\n', '  using Strings for string;\n', '\n', '  address proxyRegistryAddress;\n', '  mapping(uint256 => uint256) public tokenSupply;\n', '  // Contract name\n', '  string public name;\n', '  // Contract symbol\n', '  string public symbol;\n', '\n', '  mapping(uint256 => string) private uris;\n', '  string private baseMetadataURI;\n', '\n', '  /// bytes4(keccak256("royaltyInfo(uint256)")) == 0xcef6d368\n', '  /// bytes4(keccak256("onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32)")) == 0xe8cb9d99\n', '  /// bytes4(0xcef6d368) ^ bytes4(0xe8cb9d99) == 0x263d4ef1\n', '  bytes4 private constant _INTERFACE_ID_ERC721ROYALTIES = 0x263d4ef1;\n', '\n', "  /// @notice Called to return both the creator's address and the royalty percentage\n", '  /// @param _tokenId - the NFT asset queried for royalty information\n', '  /// @return receiver - address of who should be sent the royalty payment\n', '  /// @return amount - a percentage calculated as a fixed point\n', '  ///         with a scaling factor of 100000 (5 decimals), such that\n', '  ///         100% would be the value 10000000, as 10000000/100000 = 100.\n', '  ///         1% would be the value 100000, as 100000/100000 = 1\n', '  struct RoyaltyInfo {\n', '      address creator;\n', '      uint256 amount;\n', '  }\n', '\n', '  uint256 public _defultRoyalty = 1000000; // 10%\n', '  mapping(uint256 => RoyaltyInfo) private _royaltyInfos;\n', '\n', '  event CreatorChanged(uint256 indexed _id, address indexed _creator);\n', '  event DefultRoyaltyChanged(uint256 _royalty);\n', '    \n', '\n', '  event URI(string _uri, uint256 indexed _id);\n', '\n', '  constructor (\n', '    string memory _name,\n', '    string memory _symbol,\n', '    address _proxyRegistryAddress\n', '  ) public ERC1155(""){\n', '    name = _name;\n', '    symbol = _symbol;\n', '    proxyRegistryAddress = _proxyRegistryAddress;\n', '    \n', '    // Royalties interface \n', '    _registerInterface(_INTERFACE_ID_ERC721ROYALTIES);\n', '  }\n', '\n', '  function uri(uint256 _id) public view override returns (string memory) {\n', '    require(_exists(_id), "TRSRTradable#uri: NONEXISTENT_TOKEN");\n', '    \n', '    if(bytes(uris[_id]).length > 0){\n', '        return uris[_id];\n', '    }\n', '    return Strings.strConcat(baseMetadataURI, Strings.uint2str(_id));\n', '  }\n', '\n', '  /**\n', '    * @dev Returns the total quantity for a token ID\n', '    * @param _id uint256 ID of the token to query\n', '    * @return amount of token in existence\n', '    */\n', '  function totalSupply(uint256 _id) public view returns (uint256) {\n', '    return tokenSupply[_id];\n', '  }\n', '\n', '  /**\n', "    * @dev Will update the base URL of token's URI\n", "    * @param _newBaseMetadataURI New base URL of token's URI\n", '    */\n', '  function setURIPrefix(string memory _newBaseMetadataURI) public onlyOwner{\n', '    baseMetadataURI = _newBaseMetadataURI;\n', '  }\n', '\n', '  function setDefultRoyalty(uint256 _royalty) public onlyOwner{\n', '    _defultRoyalty = _royalty;\n', '    emit DefultRoyaltyChanged(_royalty);\n', '  }\n', '\n', '  modifier checkMint (\n', '    address author, \n', '    uint256 _tokenId, \n', '    uint256 _quantity, \n', '    bytes memory _data) \n', '  {\n', '    if (_exists(_tokenId) == false) {\n', '        _royaltyInfos[_tokenId].creator = author;\n', '        _royaltyInfos[_tokenId].amount = _defultRoyalty;\n', '        _mint(author, _tokenId, _quantity, _data);\n', '        tokenSupply[_tokenId] = tokenSupply[_tokenId].add(_quantity);\n', '    }else{\n', '      if (_royaltyInfos[_tokenId].creator == author) {\n', '        if (balanceOf(author, _tokenId) < _quantity) {\n', '          uint256 amount = _quantity.sub(balanceOf(author, _tokenId));\n', '          _mint(author, _tokenId, amount, _data);\n', '          tokenSupply[_tokenId] = tokenSupply[_tokenId].add(amount); \n', '        }\n', '      }\n', '    }\n', '    _;\n', '  }\n', '\n', '  modifier checkBatchMint (\n', '    address author, \n', '    uint256[] memory ids, \n', '    uint256[] memory amounts,\n', '    bytes memory _data)\n', '  {\n', '    \n', '    for (uint i = 0; i < ids.length; i++) {\n', '      uint256 _tokenId = ids[i];\n', '      uint256 _quantity = amounts[i];\n', '      if (_exists(_tokenId) == false) {\n', '        _royaltyInfos[_tokenId].creator = author;\n', '        _royaltyInfos[_tokenId].amount = _defultRoyalty;\n', '        _mint(author, _tokenId, _quantity, _data);\n', '        tokenSupply[_tokenId] = tokenSupply[_tokenId].add(_quantity);\n', '      }else{\n', '        if (_royaltyInfos[_tokenId].creator == author) {\n', '          if (balanceOf(author, _tokenId) < _quantity) {\n', '            uint256 amount = _quantity.sub(balanceOf(author, _tokenId));\n', '            _mint(author, _tokenId, amount, _data);\n', '            tokenSupply[_tokenId] = tokenSupply[_tokenId].add(amount);\n', '          }\n', '        }\n', '      }\n', '    }\n', '    _;\n', '  }\n', '  \n', '  modifier creatorOnly(uint256 _tokenId) {\n', '      require(\n', '          _royaltyInfos[_tokenId].creator == msg.sender, \n', '          "MintMulTRSRNFT: ONLY_CREATOR_ALLOWED"\n', '      );\n', '      _;\n', '  }\n', '\n', '  function modifyRoyalty(uint256 _id ,uint256 amount) external creatorOnly(_id) {\n', '      _royaltyInfos[_id].amount = amount;\n', '  }\n', '\n', '  function setCreator(uint256 _id, address _to) public creatorOnly(_id) {\n', '      require(\n', '          _to != address(0),\n', '          "MintMulTRSRNFT: INVALID_ADDRESS."\n', '      );\n', '      _royaltyInfos[_id].creator = _to;\n', '      emit CreatorChanged(_id, _to);\n', '  }\n', '\n', '  function royaltyInfo(uint256 _id) external view override returns (address receiver, uint256 amount) {\n', '      receiver = _royaltyInfos[_id].creator;\n', '      amount = _royaltyInfos[_id].amount;\n', '  }\n', '\n', '  function onRoyaltiesReceived(address _royaltyRecipient, address _buyer, uint256 _tokenId, address _tokenPaid, uint256 _amount, bytes32 _metadata) external override returns (bytes4) {\n', '    emit RoyaltiesReceived(_royaltyRecipient, _buyer, _tokenId, _tokenPaid, _amount, _metadata);    \n', '    return bytes4(keccak256("onRoyaltiesReceived(address,address,uint256,address,uint256,bytes32)"));\n', '  }\n', '\n', '  function updateUri(uint256 _id, string calldata _uri) external creatorOnly(_id){\n', '    if (bytes(_uri).length > 0) {\n', '      uris[_id] = _uri;\n', '      emit URI(_uri, _id);\n', '    }\n', '  }\n', '\n', '  function burn(address _address, uint256 _id, uint256 _amount) external {\n', '      require((msg.sender == _address) || isApprovedForAll(_address, msg.sender), "ERC1155#burn: INVALID_OPERATOR");\n', '      require(balanceOf(_address,_id) >= _amount, "Trying to burn more tokens than you own");\n', '      tokenSupply[_id] = tokenSupply[_id].sub(_amount);\n', '      _burn(_address, _id, _amount);\n', '  }\n', '\n', '  function updateProxyRegistryAddress(address _proxyRegistryAddress) external onlyOwner{\n', '      require(_proxyRegistryAddress != address(0), "No zero address");\n', '      proxyRegistryAddress = _proxyRegistryAddress;\n', '  }\n', '\n', '  /**\n', '    * @dev Mints some amount of tokens to an address\n', '    * @param _id          Token ID to mint\n', '    * @param _quantity    Amount of tokens to mint\n', '    * @param _data        Data to pass if receiver is contract\n', '    */\n', '  function mint(\n', '    uint256 _id,\n', '    uint256 _quantity,\n', '    bytes memory _data\n', '  ) public {\n', '    if (_exists(_id)) {\n', '      require(_royaltyInfos[_id].creator == _msgSender(), "MintMulTRSRNFT: ONLY_CREATOR_ALLOWED"); \n', '      _royaltyInfos[_id].creator = _msgSender();\n', '      _royaltyInfos[_id].amount = _defultRoyalty;\n', '      _mint(_msgSender(), _id, _quantity, _data);\n', '      tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n', '    } else {\n', '      _royaltyInfos[_id].creator = _msgSender();\n', '      _royaltyInfos[_id].amount = _defultRoyalty;\n', '      _mint(_msgSender(), _id, _quantity, _data);\n', '      tokenSupply[_id] = tokenSupply[_id].add(_quantity);\n', '    }\n', '  }\n', '\n', '  /**\n', "    * Override isApprovedForAll to whitelist user's OpenSea proxy accounts to enable gas-free listings.\n", '    */\n', '  function isApprovedForAll(address _owner, address _operator) public view override returns (bool isOperator) {\n', '    // Whitelist OpenSea proxy contract for easy trading.\n', '    ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);\n', '    if (address(proxyRegistry.proxies(_owner)) == _operator) {\n', '      return true;\n', '    }\n', '    return super.isApprovedForAll(_owner, _operator);\n', '  }\n', '\n', '  function safeTransferFrom(\n', '      address from,\n', '      address to,\n', '      uint256 id,\n', '      uint256 amount,\n', '      bytes memory data\n', '  )\n', '  checkMint(from, id, amount, data)\n', '      public\n', '      virtual\n', '      override\n', '  {\n', '      super.safeTransferFrom(from, to, id, amount, data);\n', '  }\n', '\n', '  function safeBatchTransferFrom(\n', '      address from,\n', '      address to,\n', '      uint256[] memory ids,\n', '      uint256[] memory amounts,\n', '      bytes memory data\n', '  )\n', '  checkBatchMint(from, ids, amounts, data)\n', '      public\n', '      virtual\n', '      override\n', '  {\n', '     super.safeBatchTransferFrom(from, to, ids, amounts, data);\n', '  }\n', '\n', '  /**\n', '    * @dev Returns whether the specified token exists by checking to see if it has a creator\n', '    * @param _id uint256 ID of the token to query the existence of\n', '    * @return bool whether the token exists\n', '    */\n', '  function _exists(uint256 _id) internal view returns (bool) {\n', '    return _royaltyInfos[_id].creator != address(0);\n', '  }\n', '}\n', '\n', '// File: contracts/nft/TRSR1155/MintMulTRSRNFT.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @title MintMulTRSRNFT\n', ' * Unifty - NFT Tools\n', ' * \n', ' * Treasureland : 0xaD3eB5b1A9a5729f08C0A623c8EeacFb43Fb6B54 \n', ' */\n', 'contract MintMulTRSRNFT is TRSRTradable {\n', '  string public constant version = "1.0.0";\n', '  \n', '  constructor(address _proxyRegistryAddress) public TRSRTradable("treasureland.dego", "TRSRNFT", _proxyRegistryAddress) {\n', '    setURIPrefix("https://api.treasureland.market/v2/lazy_mint/");\n', '  }\n', '}']