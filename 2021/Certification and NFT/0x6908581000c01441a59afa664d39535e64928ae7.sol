['/**\n', ' *Submitted for verification at Etherscan.io on 2021-07-06\n', '*/\n', '\n', '//SPDX-License-Identifier: Unlicense\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'contract Staking is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct StakeInfo {\n', '        address stakeToken;\n', '        uint256 amount; // Stake amount in stakingToken (Rakucoin)\n', '        uint256 rewardAmount;\n', '        uint256 endTime;\n', '    }\n', '\n', '    struct PoolInfo {\n', '        address stakeToken;\n', '        uint256 rewardRate; // Reward rate multiplied by 10^6 (e.g. 0.03 * 10^6 = 30000 for 3%)\n', '        uint256 lockupDuration;\n', '    }\n', '\n', '    address public rewardToken; // Rakugold\n', '    PoolInfo[] public poolInfo;\n', '    mapping(address => StakeInfo[]) public stakeInfo;\n', '    mapping(address => mapping(address => uint256)) public conversionRate; // conversationRate multiplied by 10^6\n', '    mapping(address => uint256) public stakeAmount;\n', '    uint256 public totalRewardAmount;\n', '\n', '    event Deposit(\n', '        address indexed user,\n', '        address indexed stakeToken,\n', '        uint256 amount\n', '    );\n', '    event Withdraw(\n', '        address indexed user,\n', '        address indexed stakeToken,\n', '        uint256 amount\n', '    );\n', '    event Claim(\n', '        address indexed user,\n', '        address indexed rewardToken,\n', '        uint256 amount\n', '    );\n', '\n', '    constructor(address _rewardToken) public {\n', '        setRewardToken(_rewardToken);\n', '    }\n', '\n', '    /////////////// Write functions ////////////////\n', '\n', '    function setRewardToken(address _rewardToken) public onlyOwner {\n', '        rewardToken = _rewardToken;\n', '    }\n', '\n', '    function setConversionRate(\n', '        address token1,\n', '        address token2,\n', '        uint256 _conversionRate\n', '    ) public onlyOwner {\n', '        conversionRate[token1][token2] = _conversionRate;\n', '    }\n', '\n', '    function emergencyWithdraw() external onlyOwner {\n', '        require(\n', '            IERC20(rewardToken).balanceOf(address(this)) >\n', '                stakeAmount[rewardToken],\n', '            "Not enough balance"\n', '        );\n', '        require(\n', '            IERC20(rewardToken).transfer(\n', '                msg.sender,\n', '                IERC20(rewardToken).balanceOf(address(this)).sub(\n', '                    stakeAmount[rewardToken]\n', '                )\n', '            ),\n', '            "Emergency withdrawl failed"\n', '        );\n', '    }\n', '\n', '    function addPool(\n', '        address _stakeToken,\n', '        uint256 _rewardRate,\n', '        uint256 _lockupDuration\n', '    ) external onlyOwner {\n', '        poolInfo.push(\n', '            PoolInfo({\n', '                stakeToken: _stakeToken,\n', '                rewardRate: _rewardRate,\n', '                lockupDuration: _lockupDuration\n', '            })\n', '        );\n', '    }\n', '\n', '    function updatePool(\n', '        uint256 pid,\n', '        uint256 _rewardRate,\n', '        uint256 _lockupDuration\n', '    ) external onlyOwner {\n', '        require(pid < poolInfo.length, "Pool does not exist");\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        pool.rewardRate = _rewardRate;\n', '        pool.lockupDuration = _lockupDuration;\n', '    }\n', '\n', '    function removePool(uint256 pid) external onlyOwner {\n', '        require(pid < poolInfo.length, "Pool does not exist");\n', '        poolInfo[pid] = poolInfo[poolInfo.length - 1];\n', '        poolInfo.pop();\n', '    }\n', '\n', '    function deposit(uint256 pid, uint256 amount) external {\n', '        require(pid < poolInfo.length, "Pool does not exist");\n', '        uint256 rewardAmount = getRewardAmount(\n', '            poolInfo[pid].stakeToken,\n', '            amount,\n', '            poolInfo[pid].rewardRate\n', '        );\n', '        require(\n', '            rewardAmount <= getRemainingRewards(),\n', '            "Not enough rewards remaining"\n', '        );\n', '        require(\n', '            IERC20(poolInfo[pid].stakeToken).transferFrom(\n', '                msg.sender,\n', '                address(this),\n', '                amount\n', '            )\n', '        );\n', '\n', '        PoolInfo storage pool = poolInfo[pid];\n', '        stakeAmount[pool.stakeToken] = stakeAmount[pool.stakeToken].add(amount);\n', '        stakeInfo[msg.sender].push(\n', '            StakeInfo({\n', '                stakeToken: pool.stakeToken,\n', '                amount: amount,\n', '                rewardAmount: rewardAmount,\n', '                endTime: block.timestamp.add(pool.lockupDuration)\n', '            })\n', '        );\n', '        totalRewardAmount = totalRewardAmount.add(rewardAmount);\n', '\n', '        emit Deposit(msg.sender, pool.stakeToken, amount);\n', '    }\n', '\n', '    function withdraw(uint256 stakeId) external {\n', '        require(\n', '            stakeId < stakeInfo[msg.sender].length,\n', '            "Stake info does not exist"\n', '        );\n', '\n', '        StakeInfo storage info = stakeInfo[msg.sender][stakeId];\n', '\n', '        require(\n', '            IERC20(info.stakeToken).transfer(msg.sender, info.amount),\n', '            "Withdrawl failed"\n', '        );\n', '        emit Withdraw(msg.sender, info.stakeToken, info.amount);\n', '\n', '        stakeAmount[info.stakeToken] = stakeAmount[info.stakeToken].sub(\n', '            info.amount\n', '        );\n', '\n', '        if (info.endTime < block.timestamp) {\n', '            if (\n', '                info.rewardAmount.add(stakeAmount[rewardToken]) <=\n', '                IERC20(rewardToken).balanceOf(address(this))\n', '            ) {\n', '                require(\n', '                    IERC20(rewardToken).transfer(msg.sender, info.rewardAmount),\n', '                    "Claim failed"\n', '                );\n', '                totalRewardAmount = totalRewardAmount.sub(info.rewardAmount);\n', '                emit Claim(msg.sender, rewardToken, info.rewardAmount);\n', '            }\n', '        }\n', '\n', '        stakeInfo[msg.sender][stakeId] = stakeInfo[msg.sender][\n', '            stakeInfo[msg.sender].length - 1\n', '        ];\n', '        stakeInfo[msg.sender].pop();\n', '    }\n', '\n', '    /////////////// Get functions ////////////////\n', '\n', '    function getRewardAmount(\n', '        address token,\n', '        uint256 amount,\n', '        uint256 rewardRate\n', '    ) private view returns (uint256) {\n', '        return amount.mul(rewardRate).div(conversionRate[token][rewardToken]);\n', '    }\n', '\n', '    function getRemainingRewards() public view returns (uint256) {\n', '        uint256 totalBalanceInRewardToken = IERC20(rewardToken).balanceOf(\n', '            address(this)\n', '        );\n', '        uint256 filledAmount = totalRewardAmount.add(stakeAmount[rewardToken]);\n', '\n', '        if (totalBalanceInRewardToken < filledAmount) {\n', '            return 0;\n', '        }\n', '        return totalBalanceInRewardToken.sub(filledAmount);\n', '    }\n', '\n', '    function getPoolCount() public view returns (uint256) {\n', '        return poolInfo.length;\n', '    }\n', '\n', '    function getUserStakeCount(address user) public view returns (uint256) {\n', '        return stakeInfo[user].length;\n', '    }\n', '}']