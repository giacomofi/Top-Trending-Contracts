['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-28\n', '*/\n', '\n', '// Dependency file: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/math/Math.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Arrays.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/math/Math.sol";\n', '\n', '/**\n', ' * @dev Collection of functions related to array types.\n', ' */\n', 'library Arrays {\n', '   /**\n', '     * @dev Searches a sorted `array` and returns the first index that contains\n', '     * a value greater or equal to `element`. If no such index exists (i.e. all\n', '     * values in the array are strictly less than `element`), the array length is\n', '     * returned. Time complexity O(log n).\n', '     *\n', '     * `array` is expected to be sorted in ascending order, and to contain no\n', '     * repeated elements.\n', '     */\n', '    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n', '        if (array.length == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 low = 0;\n', '        uint256 high = array.length;\n', '\n', '        while (low < high) {\n', '            uint256 mid = Math.average(low, high);\n', '\n', '            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n', '            // because Math.average rounds down (it does integer division with truncation).\n', '            if (array[mid] > element) {\n', '                high = mid;\n', '            } else {\n', '                low = mid + 1;\n', '            }\n', '        }\n', '\n', '        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n', '        if (low > 0 && array[low - 1] == element) {\n', '            return low - 1;\n', '        } else {\n', '            return low;\n', '        }\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Counters.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @title Counters\n', ' * @author Matt Condon (@shrugs)\n', ' * @dev Provides counters that can only be incremented or decremented by one. This can be used e.g. to track the number\n', ' * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n', ' *\n', ' * Include with `using Counters for Counters.Counter;`\n', ' * Since it is not possible to overflow a 256 bit integer with increments of one, `increment` can skip the {SafeMath}\n', ' * overflow check, thereby saving gas. This does assume however correct usage, in that the underlying `_value` is never\n', ' * directly accessed.\n', ' */\n', 'library Counters {\n', '    using SafeMath for uint256;\n', '\n', '    struct Counter {\n', '        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n', "        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n", '        // this feature: see https://github.com/ethereum/solidity/issues/4637\n', '        uint256 _value; // default: 0\n', '    }\n', '\n', '    function current(Counter storage counter) internal view returns (uint256) {\n', '        return counter._value;\n', '    }\n', '\n', '    function increment(Counter storage counter) internal {\n', '        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n', '        counter._value += 1;\n', '    }\n', '\n', '    function decrement(Counter storage counter) internal {\n', '        counter._value = counter._value.sub(1);\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/utils/Context.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', '// pragma solidity >=0.6.0 <0.8.0;\n', '\n', '// import "@openzeppelin/contracts/utils/Context.sol";\n', '// import "@openzeppelin/contracts/token/ERC20/IERC20.sol";\n', '// import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view virtual returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view virtual returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view virtual returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view virtual override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view virtual override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal virtual {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '\n', '// Root file: contracts/BitDAO.sol\n', '\n', 'pragma solidity >=0.6.5 <0.8.0;\n', '\n', "// import '/Users/stone/Desktop/BitDAO/node_modules/@openzeppelin/contracts/math/SafeMath.sol';\n", "// import '/Users/stone/Desktop/BitDAO/node_modules/@openzeppelin/contracts/utils/Arrays.sol';\n", "// import '/Users/stone/Desktop/BitDAO/node_modules/@openzeppelin/contracts/utils/Counters.sol';\n", "// import '/Users/stone/Desktop/BitDAO/node_modules/@openzeppelin/contracts/token/ERC20/ERC20.sol';\n", '\n', 'contract BitDAO is ERC20 {\n', '\tusing SafeMath for uint256;\n', '\tusing Arrays for uint256[];\n', '\tusing Counters for Counters.Counter;\n', '\n', '\tuint256 public MAX_SUPPLY = 1e28; // 1e10 * 1e18\n', '\n', '\taddress public admin;\n', '\n', '\taddress public pendingAdmin;\n', '\n', '\tmapping(address => address) public delegates;\n', '\n', '\tstruct Checkpoint {\n', '\t\tuint256 fromBlock;\n', '\t\tuint256 votes;\n', '\t}\n', '\n', '\tmapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n', '\n', '\tmapping(address => uint256) public numCheckpoints;\n', '\n', '\tbytes32 public constant DOMAIN_TYPEHASH =\n', "\t\tkeccak256('EIP712Domain(string name,uint256 chainId,address verifyingContract)');\n", '\n', '\tbytes32 public constant DELEGATION_TYPEHASH =\n', "\t\tkeccak256('Delegation(address delegatee,uint256 nonce,uint256 expiry)');\n", '\n', '\tmapping(address => uint256) public nonces;\n', '\n', '\tstruct Snapshots {\n', '\t\tuint256[] ids;\n', '\t\tuint256[] values;\n', '\t}\n', '\n', '\tmapping(address => Snapshots) private _accountBalanceSnapshots;\n', '\n', '\tSnapshots private _totalSupplySnapshots;\n', '\n', '\tCounters.Counter private _currentSnapshotId;\n', '\n', '\tevent Snapshot(uint256 id);\n', '\n', '\tevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n', '\n', '\tevent DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n', '\n', '\tevent NewPendingAdmin(address indexed oldPendingAdmin, address indexed newPendingAdmin);\n', '\n', '\tevent NewAdmin(address indexed oldAdmin, address indexed newAdmin);\n', '\n', '\tmodifier onlyAdmin {\n', "\t\trequire(msg.sender == admin, 'Caller is not a admin');\n", '\t\t_;\n', '\t}\n', '\n', "\tconstructor(address _admin) ERC20('BitDAO', 'BIT') {\n", '\t\tadmin = _admin;\n', '\t\t_mint(_admin, MAX_SUPPLY);\n', '\t}\n', '\n', '\tfunction setPendingAdmin(address newPendingAdmin) external returns (bool) {\n', '\t\tif (msg.sender != admin) {\n', "\t\t\trevert('BitDAO:setPendingAdmin:illegal address');\n", '\t\t}\n', '\t\taddress oldPendingAdmin = pendingAdmin;\n', '\t\tpendingAdmin = newPendingAdmin;\n', '\n', '\t\temit NewPendingAdmin(oldPendingAdmin, newPendingAdmin);\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction acceptAdmin() external returns (bool) {\n', '\t\tif (msg.sender != pendingAdmin || msg.sender == address(0)) {\n', "\t\t\trevert('BitDAO:acceptAdmin:illegal address');\n", '\t\t}\n', '\t\taddress oldAdmin = admin;\n', '\t\taddress oldPendingAdmin = pendingAdmin;\n', '\t\tadmin = pendingAdmin;\n', '\t\tpendingAdmin = address(0);\n', '\n', '\t\temit NewAdmin(oldAdmin, admin);\n', '\t\temit NewPendingAdmin(oldPendingAdmin, pendingAdmin);\n', '\n', '\t\treturn true;\n', '\t}\n', '\n', '\tfunction snapshot() external virtual onlyAdmin returns (uint256) {\n', '\t\t_currentSnapshotId.increment();\n', '\n', '\t\tuint256 currentId = _currentSnapshotId.current();\n', '\t\temit Snapshot(currentId);\n', '\t\treturn currentId;\n', '\t}\n', '\n', '\tfunction balanceOfAt(address account, uint256 snapshotId) public view virtual returns (uint256) {\n', '\t\t(bool snapshotted, uint256 value) = _valueAt(snapshotId, _accountBalanceSnapshots[account]);\n', '\n', '\t\treturn snapshotted ? value : balanceOf(account);\n', '\t}\n', '\n', '\tfunction totalSupplyAt(uint256 snapshotId) public view virtual returns (uint256) {\n', '\t\t(bool snapshotted, uint256 value) = _valueAt(snapshotId, _totalSupplySnapshots);\n', '\n', '\t\treturn snapshotted ? value : totalSupply();\n', '\t}\n', '\n', '\tfunction _beforeTokenTransfer(\n', '\t\taddress from,\n', '\t\taddress to,\n', '\t\tuint256 amount\n', '\t) internal virtual override {\n', '\t\tsuper._beforeTokenTransfer(from, to, amount);\n', '\t\tif (from == address(0)) {\n', '\t\t\t// mint\n', '\t\t\t_updateAccountSnapshot(to);\n', '\t\t\t_updateTotalSupplySnapshot();\n', '\t\t} else if (to == address(0)) {\n', '\t\t\t// burn\n', '\t\t\t_updateAccountSnapshot(from);\n', '\t\t\t_updateTotalSupplySnapshot();\n', '\t\t} else {\n', '\t\t\t// transfer\n', '\t\t\t_updateAccountSnapshot(from);\n', '\t\t\t_updateAccountSnapshot(to);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _valueAt(uint256 snapshotId, Snapshots storage snapshots) private view returns (bool, uint256) {\n', "\t\trequire(snapshotId > 0, 'ERC20Snapshot: id is 0');\n", "\t\trequire(snapshotId <= _currentSnapshotId.current(), 'ERC20Snapshot: nonexistent id');\n", '\n', '\t\tuint256 index = snapshots.ids.findUpperBound(snapshotId);\n', '\n', '\t\tif (index == snapshots.ids.length) {\n', '\t\t\treturn (false, 0);\n', '\t\t} else {\n', '\t\t\treturn (true, snapshots.values[index]);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _updateAccountSnapshot(address account) private {\n', '\t\t_updateSnapshot(_accountBalanceSnapshots[account], balanceOf(account));\n', '\t}\n', '\n', '\tfunction _updateTotalSupplySnapshot() private {\n', '\t\t_updateSnapshot(_totalSupplySnapshots, totalSupply());\n', '\t}\n', '\n', '\tfunction _updateSnapshot(Snapshots storage snapshots, uint256 currentValue) private {\n', '\t\tuint256 currentId = _currentSnapshotId.current();\n', '\t\tif (_lastSnapshotId(snapshots.ids) < currentId) {\n', '\t\t\tsnapshots.ids.push(currentId);\n', '\t\t\tsnapshots.values.push(currentValue);\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _lastSnapshotId(uint256[] storage ids) private view returns (uint256) {\n', '\t\tif (ids.length == 0) {\n', '\t\t\treturn 0;\n', '\t\t} else {\n', '\t\t\treturn ids[ids.length - 1];\n', '\t\t}\n', '\t}\n', '\n', '\tfunction delegate(address delegatee) external {\n', '\t\treturn _delegate(msg.sender, delegatee);\n', '\t}\n', '\n', '\tfunction delegateBySig(\n', '\t\taddress delegatee,\n', '\t\tuint256 nonce,\n', '\t\tuint256 expiry,\n', '\t\tuint8 v,\n', '\t\tbytes32 r,\n', '\t\tbytes32 s\n', '\t) external {\n', '\t\tbytes32 domainSeparator =\n', '\t\t\tkeccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(this)));\n', '\t\tbytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n', "\t\tbytes32 digest = keccak256(abi.encodePacked('\\x19\\x01', domainSeparator, structHash));\n", '\t\taddress signatory = ecrecover(digest, v, r, s);\n', "\t\trequire(signatory != address(0), 'BitDAO::delegateBySig: invalid signature');\n", "\t\trequire(nonce == nonces[signatory]++, 'BitDAO::delegateBySig: invalid nonce');\n", "\t\trequire(block.timestamp <= expiry, 'BitDAO::delegateBySig: signature expired');\n", '\t\treturn _delegate(signatory, delegatee);\n', '\t}\n', '\n', '\tfunction getCurrentVotes(address account) external view returns (uint256) {\n', '\t\tuint256 nCheckpoints = numCheckpoints[account];\n', '\t\treturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n', '\t}\n', '\n', '\tfunction getPriorVotes(address account, uint256 blockNumber) public view returns (uint256) {\n', "\t\trequire(blockNumber < block.number, 'BitDAO::getPriorVotes: not yet determined');\n", '\n', '\t\tuint256 nCheckpoints = numCheckpoints[account];\n', '\t\tif (nCheckpoints == 0) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n', '\t\t\treturn checkpoints[account][nCheckpoints - 1].votes;\n', '\t\t}\n', '\n', '\t\tif (checkpoints[account][0].fromBlock > blockNumber) {\n', '\t\t\treturn 0;\n', '\t\t}\n', '\n', '\t\tuint256 lower = 0;\n', '\t\tuint256 upper = nCheckpoints - 1;\n', '\t\twhile (upper > lower) {\n', '\t\t\tuint256 center = upper - (upper - lower) / 2;\n', '\t\t\tCheckpoint memory cp = checkpoints[account][center];\n', '\t\t\tif (cp.fromBlock == blockNumber) {\n', '\t\t\t\treturn cp.votes;\n', '\t\t\t} else if (cp.fromBlock < blockNumber) {\n', '\t\t\t\tlower = center;\n', '\t\t\t} else {\n', '\t\t\t\tupper = center - 1;\n', '\t\t\t}\n', '\t\t}\n', '\t\treturn checkpoints[account][lower].votes;\n', '\t}\n', '\n', '\tfunction _delegate(address delegator, address delegatee) internal {\n', '\t\taddress currentDelegate = delegates[delegator];\n', '\t\tuint256 delegatorBalance = balanceOf(delegator);\n', '\t\tdelegates[delegator] = delegatee;\n', '\n', '\t\temit DelegateChanged(delegator, currentDelegate, delegatee);\n', '\n', '\t\t_moveDelegates(currentDelegate, delegatee, delegatorBalance);\n', '\t}\n', '\n', '\tfunction _transfer(\n', '\t\taddress sender,\n', '\t\taddress recipient,\n', '\t\tuint256 amount\n', '\t) internal virtual override {\n', '\t\tsuper._transfer(sender, recipient, amount);\n', '\t\t_moveDelegates(delegates[sender], delegates[recipient], amount);\n', '\t}\n', '\n', '\tfunction _moveDelegates(\n', '\t\taddress srcRep,\n', '\t\taddress dstRep,\n', '\t\tuint256 amount\n', '\t) internal {\n', '\t\tif (srcRep != dstRep && amount > 0) {\n', '\t\t\tif (srcRep != address(0)) {\n', '\t\t\t\tuint256 srcRepNum = numCheckpoints[srcRep];\n', '\t\t\t\tuint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n', '\t\t\t\tuint256 srcRepNew = srcRepOld.sub(amount);\n', '\t\t\t\t_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n', '\t\t\t}\n', '\n', '\t\t\tif (dstRep != address(0)) {\n', '\t\t\t\tuint256 dstRepNum = numCheckpoints[dstRep];\n', '\t\t\t\tuint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n', '\t\t\t\tuint256 dstRepNew = dstRepOld.add(amount);\n', '\t\t\t\t_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n', '\t\t\t}\n', '\t\t}\n', '\t}\n', '\n', '\tfunction _writeCheckpoint(\n', '\t\taddress delegatee,\n', '\t\tuint256 nCheckpoints,\n', '\t\tuint256 oldVotes,\n', '\t\tuint256 newVotes\n', '\t) internal {\n', "\t\tuint256 blockNumber = safe32(block.number, 'BitDAO::_writeCheckpoint: block number exceeds 32 bits');\n", '\n', '\t\tif (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n', '\t\t\tcheckpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n', '\t\t} else {\n', '\t\t\tcheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n', '\t\t\tnumCheckpoints[delegatee] = nCheckpoints + 1;\n', '\t\t}\n', '\n', '\t\temit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n', '\t}\n', '\n', '\tfunction safe32(uint256 n, string memory errorMessage) internal pure returns (uint256) {\n', '\t\trequire(n < 2**32, errorMessage);\n', '\t\treturn uint256(n);\n', '\t}\n', '\n', '\tfunction getChainId() internal pure returns (uint256) {\n', '\t\tuint256 chainId;\n', '\t\tassembly {\n', '\t\t\tchainId := chainid()\n', '\t\t}\n', '\t\treturn chainId;\n', '\t}\n', '}']