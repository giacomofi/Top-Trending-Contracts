['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-27\n', '*/\n', '\n', '// SPDX-License-Identifier: MPL-2.0\n', 'pragma solidity 0.7.6;\n', 'pragma experimental ABIEncoderV2;\n', '\n', 'interface IVoteEmitter {\n', '\tevent Vote(address indexed dispatcher, address voter, uint8[] percentiles);\n', '\n', '\tfunction dispatch(address voter, uint8[] memory percentiles) external;\n', '}\n', '\n', 'contract VoteEmitter is IVoteEmitter {\n', '\tfunction dispatch(address voter, uint8[] memory percentiles)\n', '\t\texternal\n', '\t\toverride\n', '\t{\n', '\t\temit Vote(msg.sender, voter, percentiles);\n', '\t}\n', '}\n', '\n', 'contract Vote {\n', '\tstruct Attributes {\n', '\t\taddress proposer;\n', '\t\tstring subject;\n', '\t\tstring body;\n', '\t\tuint256 period;\n', '\t\tstring[] options;\n', '\t\tstring bodyMimeType;\n', '\t\tstring optionsMimeType;\n', '\t}\n', '\taddress public voteEmitter;\n', '\taddress public proposer;\n', '\tstring public subject;\n', '\tstring public body;\n', '\tuint256 public period;\n', '\tstring[] public options;\n', '\tstring public bodyMimeType;\n', '\tstring public optionsMimeType;\n', '\n', '\tmapping(address => bool) public isAlreadyVote;\n', '\n', '\tconstructor(\n', '\t\tstring memory _subject,\n', '\t\tstring memory _body,\n', '\t\tstring[] memory _options,\n', '\t\tstring memory _bodyMimeType,\n', '\t\tstring memory _optionsMimeType,\n', '\t\taddress _voteEmitter,\n', '\t\tuint256 _votingBlock,\n', '\t\taddress _proposer\n', '\t) {\n', '\t\tvoteEmitter = _voteEmitter;\n', '\t\tproposer = _proposer;\n', '\t\tsubject = _subject;\n', '\t\tbody = _body;\n', '\t\tperiod = _votingBlock + block.number;\n', '\t\toptions = _options;\n', '\t\tbodyMimeType = _bodyMimeType;\n', '\t\toptionsMimeType = _optionsMimeType;\n', '\t}\n', '\n', '\tfunction attributes() external view returns (Attributes memory) {\n', '\t\treturn\n', '\t\t\tAttributes(\n', '\t\t\t\tproposer,\n', '\t\t\t\tsubject,\n', '\t\t\t\tbody,\n', '\t\t\t\tperiod,\n', '\t\t\t\toptions,\n', '\t\t\t\tbodyMimeType,\n', '\t\t\t\toptionsMimeType\n', '\t\t\t);\n', '\t}\n', '\n', '\tfunction vote(uint8[] memory percentiles) external {\n', '\t\trequire(block.number < period, "over the period");\n', '\t\trequire(isAlreadyVote[msg.sender] == false, "already vote");\n', '\t\tisAlreadyVote[msg.sender] = true;\n', '\t\tIVoteEmitter(voteEmitter).dispatch(msg.sender, percentiles);\n', '\t}\n', '}\n', '\n', 'contract VoteFactory {\n', '\taddress public voteEmitter;\n', '\n', '\tevent VoteCreate(address indexed sender, address vote);\n', '\n', '\tconstructor(address _voteEmitter) {\n', '\t\tvoteEmitter = _voteEmitter;\n', '\t}\n', '\n', '\tfunction create(\n', '\t\tstring memory _subject,\n', '\t\tstring memory _body,\n', '\t\tstring[] memory _options,\n', '\t\tstring memory _bodyMimeType,\n', '\t\tstring memory _optionsMimeType,\n', '\t\tuint256 _votingBlock\n', '\t) external {\n', '\t\tVote vote = new Vote(\n', '\t\t\t_subject,\n', '\t\t\t_body,\n', '\t\t\t_options,\n', '\t\t\t_bodyMimeType,\n', '\t\t\t_optionsMimeType,\n', '\t\t\tvoteEmitter,\n', '\t\t\t_votingBlock,\n', '\t\t\tmsg.sender\n', '\t\t);\n', '\t\temit VoteCreate(msg.sender, address(vote));\n', '\t}\n', '}']