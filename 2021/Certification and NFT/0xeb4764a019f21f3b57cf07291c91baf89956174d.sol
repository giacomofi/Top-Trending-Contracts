['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-02\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal virtual view returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '    function _msgData() internal virtual view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor()  {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '// import ierc20 & safemath & non-standard\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', 'library SafeMath {\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        assert(b <= a);\n', '        return a - b;\n', '    }\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        assert(c >= a);\n', '        return c;\n', '    }\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '        return c;\n', '    }\n', '}\n', 'interface INonStandardERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address owner) external view returns (uint256 balance);\n', '    ///\n', '    /// !!!!!!!!!!!!!!\n', '    /// !!! NOTICE !!! transfer does not return a value, in violation of the ERC-20 specification\n', '    /// !!!!!!!!!!!!!!\n', '    ///\n', '    function transfer(address dst, uint256 amount) external;\n', '    ///\n', '    /// !!!!!!!!!!!!!!\n', '    /// !!! NOTICE !!! transferFrom does not return a value, in violation of the ERC-20 specification\n', '    /// !!!!!!!!!!!!!!\n', '    ///\n', '    function transferFrom(\n', '        address src,\n', '        address dst,\n', '        uint256 amount\n', '    ) external;\n', '    function approve(address spender, uint256 amount)\n', '        external\n', '        returns (bool success);\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256 remaining);\n', '    event Transfer(address indexed from, address indexed to, uint256 amount);\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 amount\n', '    );\n', '}\n', 'contract DAO1PublicSale  is Ownable {\n', '    using SafeMath for uint256;\n', '    event ClaimableAmount(address _user, uint256 _claimableAmount);\n', '    // address public owner;\n', '    uint256 public rate;\n', '    uint256 public allowedUserBalance;\n', '    bool public presaleOver;\n', '    IERC20 public usdt;\n', '    mapping(address => uint256) public claimable;\n', '    uint256 public hardcap;\n', '    constructor(uint256 _rate, address _usdt, uint256 _hardcap, uint256 _allowedUserBalance)  {\n', '        rate = _rate;\n', '        usdt = IERC20(_usdt);\n', '        presaleOver = true;\n', '        // owner = msg.sender;\n', '        hardcap = _hardcap;\n', '        allowedUserBalance = _allowedUserBalance;\n', '    }\n', '    modifier isPresaleOver() {\n', '        require(presaleOver == true, "The presale is not over");\n', '        _;\n', '    }\n', '    function changeHardCap(uint256 _hardcap) onlyOwner public {\n', '        hardcap = _hardcap;\n', '    }\n', '    function changeAllowedUserBalance(uint256 _allowedUserBalance) onlyOwner public {\n', '        allowedUserBalance = _allowedUserBalance;\n', '    }\n', '    function endPresale() external onlyOwner returns (bool) {\n', '        presaleOver = true;\n', '        return presaleOver;\n', '    }\n', '    function startPresale() external onlyOwner returns (bool) {\n', '        presaleOver = false;\n', '        return presaleOver;\n', '    }\n', '    function buyTokenWithUSDT(uint256 _amount) external {\n', '        // user enter amount of ether which is then transfered into the smart contract and tokens to be given is saved in the mapping\n', '        require(presaleOver == false, "presale is over you cannot buy now");\n', '        uint256 tokensPurchased = _amount.mul(rate);\n', '        uint256 userUpdatedBalance = claimable[msg.sender].add(tokensPurchased);\n', '        require( _amount.add(usdt.balanceOf(address(this))) <= hardcap, "Hardcap for the tokens reached");\n', '        // for USDT\n', '        require(userUpdatedBalance.div(rate) <= allowedUserBalance, "Exceeded allowed user balance");\n', '        // usdt.transferFrom(msg.sender, address(this), _amount);\n', '        doTransferIn(address(usdt), msg.sender, _amount);\n', '        claimable[msg.sender] = userUpdatedBalance;\n', '        emit ClaimableAmount(msg.sender, tokensPurchased);\n', '    }\n', '    // function claim() external isPresaleOver {\n', '    //     // it checks for user msg.sender claimable amount and transfer them to msg.sender\n', '    //     require(claimable[msg.sender] > 0, "NO tokens left to be claim");\n', '    //     usdc.transfer(msg.sender, claimable[msg.sender]);\n', '    //     claimable[msg.sender] = 0;\n', '    // }\n', '    function doTransferIn(\n', '        address tokenAddress,\n', '        address from,\n', '        uint256 amount\n', '    ) internal returns (uint256) {\n', '        INonStandardERC20 _token = INonStandardERC20(tokenAddress);\n', '        uint256 balanceBefore = INonStandardERC20(tokenAddress).balanceOf(address(this));\n', '        _token.transferFrom(from, address(this), amount);\n', '        bool success;\n', '        assembly {\n', '            switch returndatasize()\n', '                case 0 {\n', '                    // This is a non-standard ERC-20\n', '                    success := not(0) // set success to true\n', '                }\n', '                case 32 {\n', '                    // This is a compliant ERC-20\n', '                    returndatacopy(0, 0, 32)\n', '                    success := mload(0) // Set success = returndata of external call\n', '                }\n', '                default {\n', '                    // This is an excessively non-compliant ERC-20, revert.\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '        require(success, "TOKEN_TRANSFER_IN_FAILED");\n', '        // Calculate the amount that was actually transferred\n', '        uint256 balanceAfter = INonStandardERC20(tokenAddress).balanceOf(address(this));\n', '        require(balanceAfter >= balanceBefore, "TOKEN_TRANSFER_IN_OVERFLOW");\n', '        return balanceAfter.sub(balanceBefore); // underflow already checked above, just subtract\n', '    }\n', '    function doTransferOut(\n', '        address tokenAddress,\n', '        address to,\n', '        uint256 amount\n', '    ) internal {\n', '        INonStandardERC20 _token = INonStandardERC20(tokenAddress);\n', '        _token.transfer(to, amount);\n', '        bool success;\n', '        assembly {\n', '            switch returndatasize()\n', '                case 0 {\n', '                    // This is a non-standard ERC-20\n', '                    success := not(0) // set success to true\n', '                }\n', '                case 32 {\n', '                    // This is a complaint ERC-20\n', '                    returndatacopy(0, 0, 32)\n', '                    success := mload(0) // Set success = returndata of external call\n', '                }\n', '                default {\n', '                    // This is an excessively non-compliant ERC-20, revert.\n', '                    revert(0, 0)\n', '                }\n', '        }\n', '        require(success, "TOKEN_TRANSFER_OUT_FAILED");\n', '    }\n', '    function fundsWithdrawal(uint256 _value) external onlyOwner isPresaleOver {\n', '        // claimable[owner] = claimable[owner].sub(_value);\n', '        // usdt.transfer(_msgSender(), _value);\n', '        doTransferOut(address(usdt), _msgSender(), _value);\n', '    }\n', '}']