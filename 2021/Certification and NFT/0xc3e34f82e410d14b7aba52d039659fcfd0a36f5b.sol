['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-21\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Global Enums and Structs\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library SupportStructs {\n', '    struct CalcMaxDebtLocalVars {\n', '        uint256 availableLiquidity;\n', '        uint256 totalStableDebt;\n', '        uint256 totalVariableDebt;\n', '        uint256 totalDebt;\n', '        uint256 utilizationRate;\n', '        uint256 totalLiquidity;\n', '        uint256 targetUtilizationRate;\n', '        uint256 maxProtocolDebt;\n', '    }\n', '\n', '    struct IrsVars {\n', '        uint256 optimalRate;\n', '        uint256 baseRate;\n', '        uint256 slope1;\n', '        uint256 slope2;\n', '    }\n', '}\n', '\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'library DataTypes {\n', '    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n', '    struct ReserveData {\n', '        //stores the reserve configuration\n', '        ReserveConfigurationMap configuration;\n', '        //the liquidity index. Expressed in ray\n', '        uint128 liquidityIndex;\n', '        //variable borrow index. Expressed in ray\n', '        uint128 variableBorrowIndex;\n', '        //the current supply rate. Expressed in ray\n', '        uint128 currentLiquidityRate;\n', '        //the current variable borrow rate. Expressed in ray\n', '        uint128 currentVariableBorrowRate;\n', '        //the current stable borrow rate. Expressed in ray\n', '        uint128 currentStableBorrowRate;\n', '        uint40 lastUpdateTimestamp;\n', '        //tokens addresses\n', '        address aTokenAddress;\n', '        address stableDebtTokenAddress;\n', '        address variableDebtTokenAddress;\n', '        //address of the interest rate strategy\n', '        address interestRateStrategyAddress;\n', '        //the id of the reserve. Represents the position in the list of the active reserves\n', '        uint8 id;\n', '    }\n', '\n', '    struct ReserveConfigurationMap {\n', '        //bit 0-15: LTV\n', '        //bit 16-31: Liq. threshold\n', '        //bit 32-47: Liq. bonus\n', '        //bit 48-55: Decimals\n', '        //bit 56: Reserve is active\n', '        //bit 57: reserve is frozen\n', '        //bit 58: borrowing is enabled\n', '        //bit 59: stable rate borrowing enabled\n', '        //bit 60-63: reserved\n', '        //bit 64-79: reserve factor\n', '        uint256 data;\n', '    }\n', '\n', '    struct UserConfigurationMap {\n', '        uint256 data;\n', '    }\n', '\n', '    enum InterestRateMode {NONE, STABLE, VARIABLE}\n', '}\n', '\n', '\n', '// Part: IAaveIncentivesController\n', '\n', 'interface IAaveIncentivesController {\n', '    /**\n', '     * @dev Returns the total of rewards of an user, already accrued + not yet accrued\n', '     * @param user The address of the user\n', '     * @return The rewards\n', '     **/\n', '    function getRewardsBalance(address[] calldata assets, address user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Claims reward for an user, on all the assets of the lending pool, accumulating the pending rewards\n', '     * @param amount Amount of rewards to claim\n', '     * @param to Address that will be receiving the rewards\n', '     * @return Rewards claimed\n', '     **/\n', '    function claimRewards(\n', '        address[] calldata assets,\n', '        uint256 amount,\n', '        address to\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Claims reward for an user on behalf, on all the assets of the lending pool, accumulating the pending rewards. The caller must\n', '     * be whitelisted via "allowClaimOnBehalf" function by the RewardsAdmin role manager\n', '     * @param amount Amount of rewards to claim\n', '     * @param user Address to check and claim rewards\n', '     * @param to Address that will be receiving the rewards\n', '     * @return Rewards claimed\n', '     **/\n', '    function claimRewardsOnBehalf(\n', '        address[] calldata assets,\n', '        uint256 amount,\n', '        address user,\n', '        address to\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev returns the unclaimed rewards of the user\n', '     * @param user the address of the user\n', '     * @return the unclaimed user rewards\n', '     */\n', '    function getUserUnclaimedRewards(address user)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev for backward compatibility with previous implementation of the Incentives controller\n', '     */\n', '    function REWARD_TOKEN() external view returns (address);\n', '\n', '    function getDistributionEnd() external view returns (uint256);\n', '\n', '    function getAssetData(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            uint256,\n', '            uint256,\n', '            uint256\n', '        );\n', '}\n', '\n', '// Part: ILendingPoolAddressesProvider\n', '\n', '/**\n', ' * @title LendingPoolAddressesProvider contract\n', ' * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n', ' * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n', ' * - Owned by the Aave Governance\n', ' * @author Aave\n', ' **/\n', 'interface ILendingPoolAddressesProvider {\n', '    event MarketIdSet(string newMarketId);\n', '    event LendingPoolUpdated(address indexed newAddress);\n', '    event ConfigurationAdminUpdated(address indexed newAddress);\n', '    event EmergencyAdminUpdated(address indexed newAddress);\n', '    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n', '    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n', '    event PriceOracleUpdated(address indexed newAddress);\n', '    event LendingRateOracleUpdated(address indexed newAddress);\n', '    event ProxyCreated(bytes32 id, address indexed newAddress);\n', '    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n', '\n', '    function getMarketId() external view returns (string memory);\n', '\n', '    function setMarketId(string calldata marketId) external;\n', '\n', '    function setAddress(bytes32 id, address newAddress) external;\n', '\n', '    function setAddressAsProxy(bytes32 id, address impl) external;\n', '\n', '    function getAddress(bytes32 id) external view returns (address);\n', '\n', '    function getLendingPool() external view returns (address);\n', '\n', '    function setLendingPoolImpl(address pool) external;\n', '\n', '    function getLendingPoolConfigurator() external view returns (address);\n', '\n', '    function setLendingPoolConfiguratorImpl(address configurator) external;\n', '\n', '    function getLendingPoolCollateralManager() external view returns (address);\n', '\n', '    function setLendingPoolCollateralManager(address manager) external;\n', '\n', '    function getPoolAdmin() external view returns (address);\n', '\n', '    function setPoolAdmin(address admin) external;\n', '\n', '    function getEmergencyAdmin() external view returns (address);\n', '\n', '    function setEmergencyAdmin(address admin) external;\n', '\n', '    function getPriceOracle() external view returns (address);\n', '\n', '    function setPriceOracle(address priceOracle) external;\n', '\n', '    function getLendingRateOracle() external view returns (address);\n', '\n', '    function setLendingRateOracle(address lendingRateOracle) external;\n', '}\n', '\n', '// Part: IOptionalERC20\n', '\n', 'interface IOptionalERC20 {\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// Part: IPriceOracle\n', '\n', 'interface IPriceOracle {\n', '    function getAssetPrice(address _asset) external view returns (uint256);\n', '\n', '    function getAssetsPrices(address[] calldata _assets)\n', '        external\n', '        view\n', '        returns (uint256[] memory);\n', '\n', '    function getSourceOfAsset(address _asset) external view returns (address);\n', '\n', '    function getFallbackOracle() external view returns (address);\n', '}\n', '\n', '// Part: IReserveInterestRateStrategy\n', '\n', '/**\n', ' * @title IReserveInterestRateStrategyInterface interface\n', ' * @dev Interface for the calculation of the interest rates\n', ' * @author Aave\n', ' */\n', 'interface IReserveInterestRateStrategy {\n', '    function OPTIMAL_UTILIZATION_RATE() external view returns (uint256);\n', '\n', '    function EXCESS_UTILIZATION_RATE() external view returns (uint256);\n', '\n', '    function variableRateSlope1() external view returns (uint256);\n', '\n', '    function variableRateSlope2() external view returns (uint256);\n', '\n', '    function baseVariableBorrowRate() external view returns (uint256);\n', '\n', '    function getMaxVariableBorrowRate() external view returns (uint256);\n', '\n', '    function calculateInterestRates(\n', '        address reserve,\n', '        uint256 utilizationRate,\n', '        uint256 totalStableDebt,\n', '        uint256 totalVariableDebt,\n', '        uint256 averageStableBorrowRate,\n', '        uint256 reserveFactor\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 liquidityRate,\n', '            uint256 stableBorrowRate,\n', '            uint256 variableBorrowRate\n', '        );\n', '}\n', '\n', '// Part: IScaledBalanceToken\n', '\n', 'interface IScaledBalanceToken {\n', '    /**\n', '     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n', "     * updated stored balance divided by the reserve's liquidity index at the moment of the update\n", '     * @param user The user whose balance is calculated\n', '     * @return The scaled balance of the user\n', '     **/\n', '    function scaledBalanceOf(address user) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the scaled balance of the user and the scaled total supply.\n', '     * @param user The address of the user\n', '     * @return The scaled balance of the user\n', '     * @return The scaled balance and the scaled total supply\n', '     **/\n', '    function getScaledUserBalanceAndSupply(address user)\n', '        external\n', '        view\n', '        returns (uint256, uint256);\n', '\n', '    /**\n', '     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n', '     * @return The scaled total supply\n', '     **/\n', '    function scaledTotalSupply() external view returns (uint256);\n', '}\n', '\n', '// Part: IStakedAave\n', '\n', 'interface IStakedAave {\n', '    function stake(address to, uint256 amount) external;\n', '\n', '    function redeem(address to, uint256 amount) external;\n', '\n', '    function cooldown() external;\n', '\n', '    function claimRewards(address to, uint256 amount) external;\n', '\n', '    function getTotalRewardsBalance(address) external view returns (uint256);\n', '\n', '    function COOLDOWN_SECONDS() external view returns (uint256);\n', '\n', '    function stakersCooldowns(address) external view returns (uint256);\n', '\n', '    function UNSTAKE_WINDOW() external view returns (uint256);\n', '}\n', '\n', '// Part: ISwap\n', '\n', 'interface ISwap {\n', '    function swapExactTokensForTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function swapTokensForExactTokens(\n', '        uint256,\n', '        uint256,\n', '        address[] calldata,\n', '        address,\n', '        uint256\n', '    ) external returns (uint256[] memory amounts);\n', '\n', '    function getAmountsOut(uint256 amountIn, address[] memory path)\n', '        external\n', '        view\n', '        returns (uint256[] memory amounts);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Math\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: WadRayMath\n', '\n', '/**\n', ' * @title WadRayMath library\n', ' * @author Aave\n', ' * @dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n', ' **/\n', '\n', 'library WadRayMath {\n', '    uint256 internal constant WAD = 1e18;\n', '    uint256 internal constant halfWAD = WAD / 2;\n', '\n', '    uint256 internal constant RAY = 1e27;\n', '    uint256 internal constant halfRAY = RAY / 2;\n', '\n', '    uint256 internal constant WAD_RAY_RATIO = 1e9;\n', '\n', '    /**\n', '     * @return One ray, 1e27\n', '     **/\n', '    function ray() internal pure returns (uint256) {\n', '        return RAY;\n', '    }\n', '\n', '    /**\n', '     * @return One wad, 1e18\n', '     **/\n', '\n', '    function wad() internal pure returns (uint256) {\n', '        return WAD;\n', '    }\n', '\n', '    /**\n', '     * @return Half ray, 1e27/2\n', '     **/\n', '    function halfRay() internal pure returns (uint256) {\n', '        return halfRAY;\n', '    }\n', '\n', '    /**\n', '     * @return Half ray, 1e18/2\n', '     **/\n', '    function halfWad() internal pure returns (uint256) {\n', '        return halfWAD;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two wad, rounding half up to the nearest wad\n', '     * @param a Wad\n', '     * @param b Wad\n', '     * @return The result of a*b, in wad\n', '     **/\n', '    function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(a <= (type(uint256).max - halfWAD) / b);\n', '\n', '        return (a * b + halfWAD) / WAD;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two wad, rounding half up to the nearest wad\n', '     * @param a Wad\n', '     * @param b Wad\n', '     * @return The result of a/b, in wad\n', '     **/\n', '    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        uint256 halfB = b / 2;\n', '\n', '        require(a <= (type(uint256).max - halfB) / WAD);\n', '\n', '        return (a * WAD + halfB) / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Multiplies two ray, rounding half up to the nearest ray\n', '     * @param a Ray\n', '     * @param b Ray\n', '     * @return The result of a*b, in ray\n', '     **/\n', '    function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0 || b == 0) {\n', '            return 0;\n', '        }\n', '\n', '        require(a <= (type(uint256).max - halfRAY) / b);\n', '\n', '        return (a * b + halfRAY) / RAY;\n', '    }\n', '\n', '    /**\n', '     * @dev Divides two ray, rounding half up to the nearest ray\n', '     * @param a Ray\n', '     * @param b Ray\n', '     * @return The result of a/b, in ray\n', '     **/\n', '    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0);\n', '        uint256 halfB = b / 2;\n', '\n', '        require(a <= (type(uint256).max - halfB) / RAY);\n', '\n', '        return (a * RAY + halfB) / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Casts ray down to wad\n', '     * @param a Ray\n', '     * @return a casted to wad, rounded half up to the nearest wad\n', '     **/\n', '    function rayToWad(uint256 a) internal pure returns (uint256) {\n', '        uint256 halfRatio = WAD_RAY_RATIO / 2;\n', '        uint256 result = halfRatio + a;\n', '        require(result >= halfRatio);\n', '\n', '        return result / WAD_RAY_RATIO;\n', '    }\n', '\n', '    /**\n', '     * @dev Converts wad up to ray\n', '     * @param a Wad\n', '     * @return a converted in ray\n', '     **/\n', '    function wadToRay(uint256 a) internal pure returns (uint256) {\n', '        uint256 result = a * WAD_RAY_RATIO;\n', '        require(result / WAD_RAY_RATIO == a);\n', '        return result;\n', '    }\n', '}\n', '\n', '// Part: ILendingPool\n', '\n', 'interface ILendingPool {\n', '    /**\n', '     * @dev Emitted on deposit()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address initiating the deposit\n', '     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n', '     * @param amount The amount deposited\n', '     * @param referral The referral code used\n', '     **/\n', '    event Deposit(\n', '        address indexed reserve,\n', '        address user,\n', '        address indexed onBehalfOf,\n', '        uint256 amount,\n', '        uint16 indexed referral\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on withdraw()\n', '     * @param reserve The address of the underlyng asset being withdrawn\n', '     * @param user The address initiating the withdrawal, owner of aTokens\n', '     * @param to Address that will receive the underlying\n', '     * @param amount The amount to be withdrawn\n', '     **/\n', '    event Withdraw(\n', '        address indexed reserve,\n', '        address indexed user,\n', '        address indexed to,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n', '     * @param reserve The address of the underlying asset being borrowed\n', '     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n', '     * initiator of the transaction on flashLoan()\n', '     * @param onBehalfOf The address that will be getting the debt\n', '     * @param amount The amount borrowed out\n', '     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n', '     * @param borrowRate The numeric rate at which the user has borrowed\n', '     * @param referral The referral code used\n', '     **/\n', '    event Borrow(\n', '        address indexed reserve,\n', '        address user,\n', '        address indexed onBehalfOf,\n', '        uint256 amount,\n', '        uint256 borrowRateMode,\n', '        uint256 borrowRate,\n', '        uint16 indexed referral\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on repay()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The beneficiary of the repayment, getting his debt reduced\n', '     * @param repayer The address of the user initiating the repay(), providing the funds\n', '     * @param amount The amount repaid\n', '     **/\n', '    event Repay(\n', '        address indexed reserve,\n', '        address indexed user,\n', '        address indexed repayer,\n', '        uint256 amount\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on swapBorrowRateMode()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user swapping his rate mode\n', '     * @param rateMode The rate mode that the user wants to swap to\n', '     **/\n', '    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n', '\n', '    /**\n', '     * @dev Emitted on setUserUseReserveAsCollateral()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user enabling the usage as collateral\n', '     **/\n', '    event ReserveUsedAsCollateralEnabled(\n', '        address indexed reserve,\n', '        address indexed user\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on setUserUseReserveAsCollateral()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user enabling the usage as collateral\n', '     **/\n', '    event ReserveUsedAsCollateralDisabled(\n', '        address indexed reserve,\n', '        address indexed user\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on rebalanceStableBorrowRate()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user for which the rebalance has been executed\n', '     **/\n', '    event RebalanceStableBorrowRate(\n', '        address indexed reserve,\n', '        address indexed user\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on flashLoan()\n', '     * @param target The address of the flash loan receiver contract\n', '     * @param initiator The address initiating the flash loan\n', '     * @param asset The address of the asset being flash borrowed\n', '     * @param amount The amount flash borrowed\n', '     * @param premium The fee flash borrowed\n', '     * @param referralCode The referral code used\n', '     **/\n', '    event FlashLoan(\n', '        address indexed target,\n', '        address indexed initiator,\n', '        address indexed asset,\n', '        uint256 amount,\n', '        uint256 premium,\n', '        uint16 referralCode\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when the pause is triggered.\n', '     */\n', '    event Paused();\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted.\n', '     */\n', '    event Unpaused();\n', '\n', '    /**\n', '     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n', '     * LendingPoolCollateral manager using a DELEGATECALL\n', '     * This allows to have the events in the generated ABI for LendingPool.\n', '     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '     * @param user The address of the borrower getting liquidated\n', '     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n', '     * @param liquidator The address of the liquidator\n', '     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '     * to receive the underlying collateral asset directly\n', '     **/\n', '    event LiquidationCall(\n', '        address indexed collateralAsset,\n', '        address indexed debtAsset,\n', '        address indexed user,\n', '        uint256 debtToCover,\n', '        uint256 liquidatedCollateralAmount,\n', '        address liquidator,\n', '        bool receiveAToken\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n', '     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n', '     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n', '     * gets added to the LendingPool ABI\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param liquidityRate The new liquidity rate\n', '     * @param stableBorrowRate The new stable borrow rate\n', '     * @param variableBorrowRate The new variable borrow rate\n', '     * @param liquidityIndex The new liquidity index\n', '     * @param variableBorrowIndex The new variable borrow index\n', '     **/\n', '    event ReserveDataUpdated(\n', '        address indexed reserve,\n', '        uint256 liquidityRate,\n', '        uint256 stableBorrowRate,\n', '        uint256 variableBorrowRate,\n', '        uint256 liquidityIndex,\n', '        uint256 variableBorrowIndex\n', '    );\n', '\n', '    /**\n', '     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n', '     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n', '     * @param asset The address of the underlying asset to deposit\n', '     * @param amount The amount to be deposited\n', '     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n', '     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n', '     *   is a different wallet\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     **/\n', '    function deposit(\n', '        address asset,\n', '        uint256 amount,\n', '        address onBehalfOf,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n', '     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n', '     * @param asset The address of the underlying asset to withdraw\n', '     * @param amount The underlying amount to be withdrawn\n', '     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n', '     * @param to Address that will receive the underlying, same as msg.sender if the user\n', '     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n', '     *   different wallet\n', '     * @return The final amount withdrawn\n', '     **/\n', '    function withdraw(\n', '        address asset,\n', '        uint256 amount,\n', '        address to\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n', '     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n', '     * corresponding debt token (StableDebtToken or VariableDebtToken)\n', '     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n', '     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n', '     * @param asset The address of the underlying asset to borrow\n', '     * @param amount The amount to be borrowed\n', '     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n', '     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n', '     * if he has been given credit delegation allowance\n', '     **/\n', '    function borrow(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 interestRateMode,\n', '        uint16 referralCode,\n', '        address onBehalfOf\n', '    ) external;\n', '\n', '    /**\n', '     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n', '     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n', '     * @param asset The address of the borrowed underlying asset previously borrowed\n', '     * @param amount The amount to repay\n', '     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n', '     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n', '     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n', '     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n', '     * other borrower whose debt should be removed\n', '     * @return The final amount repaid\n', '     **/\n', '    function repay(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n', '     * @param asset The address of the underlying asset borrowed\n', '     * @param rateMode The rate mode that the user wants to swap to\n', '     **/\n', '    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n', '\n', '    /**\n', '     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n', '     * - Users can be rebalanced if the following conditions are satisfied:\n', '     *     1. Usage ratio is above 95%\n', '     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n', '     *        borrowed at a stable rate and depositors are not earning enough\n', '     * @param asset The address of the underlying asset borrowed\n', '     * @param user The address of the user to be rebalanced\n', '     **/\n', '    function rebalanceStableBorrowRate(address asset, address user) external;\n', '\n', '    /**\n', '     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n', '     * @param asset The address of the underlying asset deposited\n', '     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n', '     **/\n', '    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n', '        external;\n', '\n', '    /**\n', '     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n', '     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n', '     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n', '     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '     * @param user The address of the borrower getting liquidated\n', '     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '     * to receive the underlying collateral asset directly\n', '     **/\n', '    function liquidationCall(\n', '        address collateralAsset,\n', '        address debtAsset,\n', '        address user,\n', '        uint256 debtToCover,\n', '        bool receiveAToken\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n', '     * as long as the amount taken plus a fee is returned.\n', '     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n', '     * For further details please visit https://developers.aave.com\n', '     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n', '     * @param assets The addresses of the assets being flash-borrowed\n', '     * @param amounts The amounts amounts being flash-borrowed\n', '     * @param modes Types of the debt to open if the flash loan is not returned:\n', "     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n", '     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n', '     * @param params Variadic packed params to pass to the receiver as extra information\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     **/\n', '    function flashLoan(\n', '        address receiverAddress,\n', '        address[] calldata assets,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata modes,\n', '        address onBehalfOf,\n', '        bytes calldata params,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the user account data across all the reserves\n', '     * @param user The address of the user\n', '     * @return totalCollateralETH the total collateral in ETH of the user\n', '     * @return totalDebtETH the total debt in ETH of the user\n', '     * @return availableBorrowsETH the borrowing power left of the user\n', '     * @return currentLiquidationThreshold the liquidation threshold of the user\n', '     * @return ltv the loan to value of the user\n', '     * @return healthFactor the current health factor of the user\n', '     **/\n', '    function getUserAccountData(address user)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            uint256 availableBorrowsETH,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 ltv,\n', '            uint256 healthFactor\n', '        );\n', '\n', '    function initReserve(\n', '        address reserve,\n', '        address aTokenAddress,\n', '        address stableDebtAddress,\n', '        address variableDebtAddress,\n', '        address interestRateStrategyAddress\n', '    ) external;\n', '\n', '    function setReserveInterestRateStrategyAddress(\n', '        address reserve,\n', '        address rateStrategyAddress\n', '    ) external;\n', '\n', '    function setConfiguration(address reserve, uint256 configuration) external;\n', '\n', '    /**\n', '     * @dev Returns the configuration of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The configuration of the reserve\n', '     **/\n', '    function getConfiguration(address asset)\n', '        external\n', '        view\n', '        returns (DataTypes.ReserveConfigurationMap memory);\n', '\n', '    /**\n', '     * @dev Returns the configuration of the user across all the reserves\n', '     * @param user The user address\n', '     * @return The configuration of the user\n', '     **/\n', '    function getUserConfiguration(address user)\n', '        external\n', '        view\n', '        returns (DataTypes.UserConfigurationMap memory);\n', '\n', '    /**\n', '     * @dev Returns the normalized income normalized income of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', "     * @return The reserve's normalized income\n", '     */\n', '    function getReserveNormalizedIncome(address asset)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the normalized variable debt per unit of asset\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The reserve normalized variable debt\n', '     */\n', '    function getReserveNormalizedVariableDebt(address asset)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the state and configuration of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The state of the reserve\n', '     **/\n', '    function getReserveData(address asset)\n', '        external\n', '        view\n', '        returns (DataTypes.ReserveData memory);\n', '\n', '    function finalizeTransfer(\n', '        address asset,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 balanceFromAfter,\n', '        uint256 balanceToBefore\n', '    ) external;\n', '\n', '    function getReservesList() external view returns (address[] memory);\n', '\n', '    function getAddressesProvider()\n', '        external\n', '        view\n', '        returns (ILendingPoolAddressesProvider);\n', '\n', '    function setPause(bool val) external;\n', '\n', '    function paused() external view returns (bool);\n', '}\n', '\n', '// Part: IProtocolDataProvider\n', '\n', 'interface IProtocolDataProvider {\n', '    struct TokenData {\n', '        string symbol;\n', '        address tokenAddress;\n', '    }\n', '\n', '    function ADDRESSES_PROVIDER()\n', '        external\n', '        view\n', '        returns (ILendingPoolAddressesProvider);\n', '\n', '    function getAllReservesTokens() external view returns (TokenData[] memory);\n', '\n', '    function getAllATokens() external view returns (TokenData[] memory);\n', '\n', '    function getReserveConfigurationData(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 decimals,\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            uint256 reserveFactor,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive,\n', '            bool isFrozen\n', '        );\n', '\n', '    function getReserveData(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 availableLiquidity,\n', '            uint256 totalStableDebt,\n', '            uint256 totalVariableDebt,\n', '            uint256 liquidityRate,\n', '            uint256 variableBorrowRate,\n', '            uint256 stableBorrowRate,\n', '            uint256 averageStableBorrowRate,\n', '            uint256 liquidityIndex,\n', '            uint256 variableBorrowIndex,\n', '            uint40 lastUpdateTimestamp\n', '        );\n', '\n', '    function getUserReserveData(address asset, address user)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,\n', '            uint256 currentStableDebt,\n', '            uint256 currentVariableDebt,\n', '            uint256 principalStableDebt,\n', '            uint256 scaledVariableDebt,\n', '            uint256 stableBorrowRate,\n', '            uint256 liquidityRate,\n', '            uint40 stableRateLastUpdated,\n', '            bool usageAsCollateralEnabled\n', '        );\n', '\n', '    function getReserveTokensAddresses(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            address aTokenAddress,\n', '            address stableDebtTokenAddress,\n', '            address variableDebtTokenAddress\n', '        );\n', '}\n', '\n', '// Part: IVariableDebtToken\n', '\n', '/**\n', ' * @title IVariableDebtToken\n', ' * @author Aave\n', ' * @notice Defines the basic interface for a variable debt token.\n', ' **/\n', 'interface IVariableDebtToken is IERC20, IScaledBalanceToken {\n', '    /**\n', '     * @dev Emitted after the mint action\n', '     * @param from The address performing the mint\n', '     * @param onBehalfOf The address of the user on which behalf minting has been performed\n', '     * @param value The amount to be minted\n', '     * @param index The last index of the reserve\n', '     **/\n', '    event Mint(\n', '        address indexed from,\n', '        address indexed onBehalfOf,\n', '        uint256 value,\n', '        uint256 index\n', '    );\n', '\n', '    /**\n', '     * @dev Mints debt token to the `onBehalfOf` address\n', '     * @param user The address receiving the borrowed underlying, being the delegatee in case\n', '     * of credit delegate, or same as `onBehalfOf` otherwise\n', '     * @param onBehalfOf The address receiving the debt tokens\n', '     * @param amount The amount of debt being minted\n', '     * @param index The variable debt index of the reserve\n', '     * @return `true` if the the previous balance of the user is 0\n', '     **/\n', '    function mint(\n', '        address user,\n', '        address onBehalfOf,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when variable debt is burnt\n', '     * @param user The user which debt has been burned\n', '     * @param amount The amount of debt being burned\n', '     * @param index The index of the user\n', '     **/\n', '    event Burn(address indexed user, uint256 amount, uint256 index);\n', '\n', '    /**\n', '     * @dev Burns user variable debt\n', '     * @param user The user which debt is burnt\n', '     * @param index The variable debt index of the reserve\n', '     **/\n', '    function burn(\n', '        address user,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the address of the incentives controller contract\n', '     **/\n', '    function getIncentivesController()\n', '        external\n', '        view\n', '        returns (IAaveIncentivesController);\n', '}\n', '\n', '// Part: IVault\n', '\n', 'interface IVault is IERC20 {\n', '    function token() external view returns (address);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function deposit() external;\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 amount) external returns (uint256);\n', '\n', '    function withdraw(\n', '        uint256 amount,\n', '        address account,\n', '        uint256 maxLoss\n', '    ) external returns (uint256);\n', '\n', '    function availableDepositLimit() external view returns (uint256);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/VaultAPI\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function name() external view returns (string calldata);\n', '\n', '    function symbol() external view returns (string calldata);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function permit(\n', '        address owner,\n', '        address spender,\n', '        uint256 amount,\n', '        uint256 expiry,\n', '        bytes calldata signature\n', '    ) external returns (bool);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function deposit() external returns (uint256);\n', '\n', '    function deposit(uint256 amount) external returns (uint256);\n', '\n', '    function deposit(uint256 amount, address recipient) external returns (uint256);\n', '\n', '    // NOTE: Vyper produces multiple signatures for a given function with "default" args\n', '    function withdraw() external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares) external returns (uint256);\n', '\n', '    function withdraw(uint256 maxShares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    function pricePerShare() external view returns (uint256);\n', '\n', '    function totalAssets() external view returns (uint256);\n', '\n', '    function depositLimit() external view returns (uint256);\n', '\n', '    function maxAvailableShares() external view returns (uint256);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Part: IInitializableAToken\n', '\n', '/**\n', ' * @title IInitializableAToken\n', ' * @notice Interface for the initialize function on AToken\n', ' * @author Aave\n', ' **/\n', 'interface IInitializableAToken {\n', '    /**\n', '     * @dev Emitted when an aToken is initialized\n', '     * @param underlyingAsset The address of the underlying asset\n', '     * @param pool The address of the associated lending pool\n', '     * @param treasury The address of the treasury\n', '     * @param incentivesController The address of the incentives controller for this aToken\n', '     * @param aTokenDecimals the decimals of the underlying\n', '     * @param aTokenName the name of the aToken\n', '     * @param aTokenSymbol the symbol of the aToken\n', '     * @param params A set of encoded parameters for additional initialization\n', '     **/\n', '    event Initialized(\n', '        address indexed underlyingAsset,\n', '        address indexed pool,\n', '        address treasury,\n', '        address incentivesController,\n', '        uint8 aTokenDecimals,\n', '        string aTokenName,\n', '        string aTokenSymbol,\n', '        bytes params\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the aToken\n', '     * @param pool The address of the lending pool where this aToken will be used\n', '     * @param treasury The address of the Aave treasury, receiving the fees on this aToken\n', '     * @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH)\n', '     * @param incentivesController The smart contract managing potential incentives distribution\n', "     * @param aTokenDecimals The decimals of the aToken, same as the underlying asset's\n", '     * @param aTokenName The name of the aToken\n', '     * @param aTokenSymbol The symbol of the aToken\n', '     */\n', '    function initialize(\n', '        ILendingPool pool,\n', '        address treasury,\n', '        address underlyingAsset,\n', '        IAaveIncentivesController incentivesController,\n', '        uint8 aTokenDecimals,\n', '        string calldata aTokenName,\n', '        string calldata aTokenSymbol,\n', '        bytes calldata params\n', '    ) external;\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/BaseStrategy\n', '\n', '/**\n', ' * @title Yearn Base Strategy\n', ' * @author yearn.finance\n', ' * @notice\n', ' *  BaseStrategy implements all of the required functionality to interoperate\n', ' *  closely with the Vault contract. This contract should be inherited and the\n', ' *  abstract methods implemented to adapt the Strategy to the particular needs\n', ' *  it has to create a return.\n', ' *\n', ' *  Of special interest is the relationship between `harvest()` and\n', " *  `vault.report()'. `harvest()` may be called simply because enough time has\n", ' *  elapsed since the last report, and not because any funds need to be moved\n', ' *  or positions adjusted. This is critical so that the Vault may maintain an\n', " *  accurate picture of the Strategy's performance. See  `vault.report()`,\n", ' *  `harvest()`, and `harvestTrigger()` for further details.\n', ' */\n', 'abstract contract BaseStrategy {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '    string public metadataURI;\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to track which version of `StrategyAPI` this Strategy\n', '     *  implements.\n', "     * @dev The Strategy's version must match the Vault's `API_VERSION`.\n", '     * @return A string which holds the current API version of this contract.\n', '     */\n', '    function apiVersion() public pure returns (string memory) {\n', '        return "0.3.5";\n', '    }\n', '\n', '    /**\n', "     * @notice This Strategy's name.\n", '     * @dev\n', '     *  You can use this field to manage the "version" of this Strategy, e.g.\n', '     *  `StrategySomethingOrOtherV1`. However, "API Version" is managed by\n', '     *  `apiVersion()` function above.\n', "     * @return This Strategy's name.\n", '     */\n', '    function name() external virtual view returns (string memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  The amount (priced in want) of the total assets managed by this strategy should not count\n', "     *  towards Yearn's TVL calculations.\n", '     * @dev\n', '     *  You can override this field to set it to a non-zero value if some of the assets of this\n', "     *  Strategy is somehow delegated inside another part of of Yearn's ecosystem e.g. another Vault.\n", '     *  Note that this value must be strictly less than or equal to the amount provided by\n', '     *  `estimatedTotalAssets()` below, as the TVL calc will be total assets minus delegated assets.\n', '     *  Also note that this value is used to determine the total assets under management by this\n', '     *  strategy, for the purposes of computing the management fee in `Vault`\n', '     * @return\n', "     *  The amount of assets this strategy manages that should not be included in Yearn's Total Value\n", "     *  Locked (TVL) calculation across it's ecosystem.\n", '     */\n', '    function delegatedAssets() external virtual view returns (uint256) {\n', '        return 0;\n', '    }\n', '\n', '    VaultAPI public vault;\n', '    address public strategist;\n', '    address public rewards;\n', '    address public keeper;\n', '\n', '    IERC20 public want;\n', '\n', '    // So indexers can keep track of this\n', '    event Harvested(uint256 profit, uint256 loss, uint256 debtPayment, uint256 debtOutstanding);\n', '\n', '    event UpdatedStrategist(address newStrategist);\n', '\n', '    event UpdatedKeeper(address newKeeper);\n', '\n', '    event UpdatedRewards(address rewards);\n', '\n', '    event UpdatedMinReportDelay(uint256 delay);\n', '\n', '    event UpdatedMaxReportDelay(uint256 delay);\n', '\n', '    event UpdatedProfitFactor(uint256 profitFactor);\n', '\n', '    event UpdatedDebtThreshold(uint256 debtThreshold);\n', '\n', '    event EmergencyExitEnabled();\n', '\n', '    event UpdatedMetadataURI(string metadataURI);\n', '\n', '    // The minimum number of seconds between harvest calls. See\n', '    // `setMinReportDelay()` for more details.\n', '    uint256 public minReportDelay;\n', '\n', '    // The maximum number of seconds between harvest calls. See\n', '    // `setMaxReportDelay()` for more details.\n', '    uint256 public maxReportDelay;\n', '\n', '    // The minimum multiple that `callCost` must be above the credit/profit to\n', '    // be "justifiable". See `setProfitFactor()` for more details.\n', '    uint256 public profitFactor;\n', '\n', '    // Use this to adjust the threshold at which running a debt causes a\n', '    // harvest trigger. See `setDebtThreshold()` for more details.\n', '    uint256 public debtThreshold;\n', '\n', '    // See note on `setEmergencyExit()`.\n', '    bool public emergencyExit;\n', '\n', '    // modifiers\n', '    modifier onlyAuthorized() {\n', '        require(msg.sender == strategist || msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyStrategist() {\n', '        require(msg.sender == strategist, "!strategist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyGovernance() {\n', '        require(msg.sender == governance(), "!authorized");\n', '        _;\n', '    }\n', '\n', '    modifier onlyKeepers() {\n', '        require(\n', '            msg.sender == keeper ||\n', '                msg.sender == strategist ||\n', '                msg.sender == governance() ||\n', '                msg.sender == vault.guardian() ||\n', '                msg.sender == vault.management(),\n', '            "!authorized"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(address _vault) public {\n', '        _initialize(_vault, msg.sender, msg.sender, msg.sender);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Initializes the Strategy, this is called only once, when the\n', '     *  contract is deployed.\n', '     * @dev `_vault` should implement `VaultAPI`.\n', '     * @param _vault The address of the Vault responsible for this Strategy.\n', '     */\n', '    function _initialize(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper\n', '    ) internal {\n', '        require(address(want) == address(0), "Strategy already initialized");\n', '\n', '        vault = VaultAPI(_vault);\n', '        want = IERC20(vault.token());\n', '        want.safeApprove(_vault, uint256(-1)); // Give Vault unlimited access (might save gas)\n', '        strategist = _strategist;\n', '        rewards = _rewards;\n', '        keeper = _keeper;\n', '\n', '        // initialize variables\n', '        minReportDelay = 0;\n', '        maxReportDelay = 86400;\n', '        profitFactor = 100;\n', '        debtThreshold = 0;\n', '\n', '        vault.approve(rewards, uint256(-1)); // Allow rewards to be pulled\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `strategist`.\n', '     *\n', '     *  This may only be called by governance or the existing strategist.\n', '     * @param _strategist The new address to assign as `strategist`.\n', '     */\n', '    function setStrategist(address _strategist) external onlyAuthorized {\n', '        require(_strategist != address(0));\n', '        strategist = _strategist;\n', '        emit UpdatedStrategist(_strategist);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `keeper`.\n', '     *\n', '     *  `keeper` is the only address that may call `tend()` or `harvest()`,\n', '     *  other than `governance()` or `strategist`. However, unlike\n', '     *  `governance()` or `strategist`, `keeper` may *only* call `tend()`\n', '     *  and `harvest()`, and no other authorized functions, following the\n', '     *  principle of least privilege.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _keeper The new address to assign as `keeper`.\n', '     */\n', '    function setKeeper(address _keeper) external onlyAuthorized {\n', '        require(_keeper != address(0));\n', '        keeper = _keeper;\n', '        emit UpdatedKeeper(_keeper);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `rewards`. EOA or smart contract which has the permission\n', '     *  to pull rewards from the vault.\n', '     *\n', '     *  This may only be called by the strategist.\n', '     * @param _rewards The address to use for pulling rewards.\n', '     */\n', '    function setRewards(address _rewards) external onlyStrategist {\n', '        require(_rewards != address(0));\n', '        vault.approve(rewards, 0);\n', '        rewards = _rewards;\n', '        vault.approve(rewards, uint256(-1));\n', '        emit UpdatedRewards(_rewards);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `minReportDelay`. `minReportDelay` is the minimum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the minimum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The minimum number of seconds to wait between harvests.\n', '     */\n', '    function setMinReportDelay(uint256 _delay) external onlyAuthorized {\n', '        minReportDelay = _delay;\n', '        emit UpdatedMinReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `maxReportDelay`. `maxReportDelay` is the maximum number\n', '     *  of blocks that should pass for `harvest()` to be called.\n', '     *\n', '     *  For external keepers (such as the Keep3r network), this is the maximum\n', '     *  time between jobs to wait. (see `harvestTrigger()`\n', '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _delay The maximum number of seconds to wait between harvests.\n', '     */\n', '    function setMaxReportDelay(uint256 _delay) external onlyAuthorized {\n', '        maxReportDelay = _delay;\n', '        emit UpdatedMaxReportDelay(_delay);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `profitFactor`. `profitFactor` is used to determine\n', "     *  if it's worthwhile to harvest, given gas costs. (See `harvestTrigger()`\n", '     *  for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _profitFactor A ratio to multiply anticipated\n', '     * `harvest()` gas cost against.\n', '     */\n', '    function setProfitFactor(uint256 _profitFactor) external onlyAuthorized {\n', '        profitFactor = _profitFactor;\n', '        emit UpdatedProfitFactor(_profitFactor);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Sets how far the Strategy can go into loss without a harvest and report\n', '     *  being required.\n', '     *\n', '     *  By default this is 0, meaning any losses would cause a harvest which\n', '     *  will subsequently report the loss to the Vault for tracking. (See\n', '     *  `harvestTrigger()` for more details.)\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _debtThreshold How big of a loss this Strategy may carry without\n', '     * being required to report to the Vault.\n', '     */\n', '    function setDebtThreshold(uint256 _debtThreshold) external onlyAuthorized {\n', '        debtThreshold = _debtThreshold;\n', '        emit UpdatedDebtThreshold(_debtThreshold);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Used to change `metadataURI`. `metadataURI` is used to store the URI\n', '     * of the file describing the strategy.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @param _metadataURI The URI that describe the strategy.\n', '     */\n', '    function setMetadataURI(string calldata _metadataURI) external onlyAuthorized {\n', '        metadataURI = _metadataURI;\n', '        emit UpdatedMetadataURI(_metadataURI);\n', '    }\n', '\n', '    /**\n', '     * Resolve governance address from Vault contract, used to make assertions\n', '     * on protected functions in the Strategy.\n', '     */\n', '    function governance() internal view returns (address) {\n', '        return vault.governance();\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide an accurate estimate for the total amount of assets\n', '     *  (principle + return) that this Strategy is currently managing,\n', '     *  denominated in terms of `want` tokens.\n', '     *\n', '     *  This total should be "realizable" e.g. the total value that could\n', '     *  *actually* be obtained from this Strategy if it were to divest its\n', '     *  entire position based on current on-chain conditions.\n', '     * @dev\n', '     *  Care must be taken in using this function, since it relies on external\n', '     *  systems, which could be manipulated by the attacker to give an inflated\n', '     *  (or reduced) value produced by this function, based on current on-chain\n', '     *  conditions (e.g. this function is possible to influence through\n', '     *  flashloan attacks, oracle manipulations, or other DeFi attack\n', '     *  mechanisms).\n', '     *\n', '     *  It is up to governance to use this function to correctly order this\n', '     *  Strategy relative to its peers in the withdrawal queue to minimize\n', '     *  losses for the Vault based on sudden withdrawals. This value should be\n', '     *  higher than the total debt of the Strategy and higher than its expected\n', '     *  value to be "safe".\n', '     * @return The estimated total assets in this Strategy.\n', '     */\n', '    function estimatedTotalAssets() public virtual view returns (uint256);\n', '\n', '    /*\n', '     * @notice\n', '     *  Provide an indication of whether this strategy is currently "active"\n', '     *  in that it is managing an active position, or will manage a position in\n', '     *  the future. This should correlate to `harvest()` activity, so that Harvest\n', '     *  events can be tracked externally by indexing agents.\n', '     * @return True if the strategy is actively managing a position.\n', '     */\n', '    function isActive() public view returns (bool) {\n', '        return vault.strategies(address(this)).debtRatio > 0 || estimatedTotalAssets() > 0;\n', '    }\n', '\n', '    /**\n', '     * Perform any Strategy unwinding or other calls necessary to capture the\n', '     * "free return" this Strategy has generated since the last time its core\n', '     * position(s) were adjusted. Examples include unwrapping extra rewards.\n', '     * This call is only used during "normal operation" of a Strategy, and\n', '     * should be optimized to minimize losses as much as possible.\n', '     *\n', '     * This method returns any realized profits and/or realized losses\n', '     * incurred, and should return the total amounts of profits/losses/debt\n', "     * payments (in `want` tokens) for the Vault's accounting (e.g.\n", '     * `want.balanceOf(this) >= _debtPayment + _profit - _loss`).\n', '     *\n', '     * `_debtOutstanding` will be 0 if the Strategy is not past the configured\n', '     * debt limit, otherwise its value will be how far past the debt limit\n', "     * the Strategy is. The Strategy's debt limit is configured in the Vault.\n", '     *\n', '     * NOTE: `_debtPayment` should be less than or equal to `_debtOutstanding`.\n', '     *       It is okay for it to be less than `_debtOutstanding`, as that\n', '     *       should only used as a guide for how much is left to pay back.\n', '     *       Payments should be made to minimize loss from slippage, debt,\n', '     *       withdrawal fees, etc.\n', '     *\n', '     * See `vault.debtOutstanding()`.\n', '     */\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        virtual\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        );\n', '\n', '    /**\n', '     * Perform any adjustments to the core position(s) of this Strategy given\n', '     * what change the Vault made in the "investable capital" available to the\n', '     * Strategy. Note that all "free capital" in the Strategy after the report\n', '     * was made is available for reinvestment. Also note that this number\n', '     * could be 0, and you should handle that scenario accordingly.\n', '     *\n', '     * See comments regarding `_debtOutstanding` on `prepareReturn()`.\n', '     */\n', '    function adjustPosition(uint256 _debtOutstanding) internal virtual;\n', '\n', '    /**\n', "     * Liquidate up to `_amountNeeded` of `want` of this strategy's positions,\n", '     * irregardless of slippage. Any excess will be re-invested with `adjustPosition()`.\n', '     * This function should return the amount of `want` tokens made available by the\n', '     * liquidation. If there is a difference between them, `_loss` indicates whether the\n', '     * difference is due to a realized loss, or if there is some other sitution at play\n', '     * (e.g. locked funds) where the amount made available is less than what is needed.\n', '     * This function is used during emergency exit instead of `prepareReturn()` to\n', "     * liquidate all of the Strategy's positions back to the Vault.\n", '     *\n', '     * NOTE: The invariant `_liquidatedAmount + _loss <= _amountNeeded` should always be maintained\n', '     */\n', '    function liquidatePosition(uint256 _amountNeeded) internal virtual returns (uint256 _liquidatedAmount, uint256 _loss);\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `tend()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `tend()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `tend()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be\n', '     *  "at a loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `harvestTrigger()` should never return `true` at the same\n', '     *  time.\n', "     * @param callCost The keeper's estimated cast cost to call `tend()`.\n", '     * @return `true` if `tend()` should be called, `false` otherwise.\n', '     */\n', '    function tendTrigger(uint256 callCost) public virtual view returns (bool) {\n', "        // We usually don't need tend, but if there are positions that need\n", '        // active maintainence, overriding this function is how you would\n', '        // signal for that.\n', '        return false;\n', '    }\n', '\n', '    /**\n', '     * @notice\n', "     *  Adjust the Strategy's position. The purpose of tending isn't to\n", '     *  realize gains, but to maximize yield by reinvesting any returns.\n', '     *\n', '     *  See comments on `adjustPosition()`.\n', '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     */\n', '    function tend() external onlyKeepers {\n', "        // Don't take profits with this call, but adjust for better gains\n", '        adjustPosition(vault.debtOutstanding());\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Provide a signal to the keeper that `harvest()` should be called. The\n', '     *  keeper will provide the estimated gas cost that they would pay to call\n', '     *  `harvest()`, and this function should use that estimate to make a\n', '     *  determination if calling it is "worth it" for the keeper. This is not\n', '     *  the only consideration into issuing this trigger, for example if the\n', '     *  position would be negatively affected if `harvest()` is not called\n', '     *  shortly, then this can return `true` even if the keeper might be "at a\n', '     *  loss" (keepers are always reimbursed by Yearn).\n', '     * @dev\n', '     *  `callCost` must be priced in terms of `want`.\n', '     *\n', '     *  This call and `tendTrigger` should never return `true` at the\n', '     *  same time.\n', '     *\n', '     *  See `min/maxReportDelay`, `profitFactor`, `debtThreshold` to adjust the\n', '     *  strategist-controlled parameters that will influence whether this call\n', '     *  returns `true` or not. These parameters will be used in conjunction\n', '     *  with the parameters reported to the Vault (see `params`) to determine\n', '     *  if calling `harvest()` is merited.\n', '     *\n', '     *  It is expected that an external system will check `harvestTrigger()`.\n', '     *  This could be a script run off a desktop or cloud bot (e.g.\n', '     *  https://github.com/iearn-finance/yearn-vaults/blob/master/scripts/keep.py),\n', '     *  or via an integration with the Keep3r network (e.g.\n', '     *  https://github.com/Macarse/GenericKeep3rV2/blob/master/contracts/keep3r/GenericKeep3rV2.sol).\n', "     * @param callCost The keeper's estimated cast cost to call `harvest()`.\n", '     * @return `true` if `harvest()` should be called, `false` otherwise.\n', '     */\n', '    function harvestTrigger(uint256 callCost) public virtual view returns (bool) {\n', '        StrategyParams memory params = vault.strategies(address(this));\n', '\n', '        // Should not trigger if Strategy is not activated\n', '        if (params.activation == 0) return false;\n', '\n', "        // Should not trigger if we haven't waited long enough since previous harvest\n", '        if (block.timestamp.sub(params.lastReport) < minReportDelay) return false;\n', '\n', "        // Should trigger if hasn't been called in a while\n", '        if (block.timestamp.sub(params.lastReport) >= maxReportDelay) return true;\n', '\n', '        // If some amount is owed, pay it back\n', '        // NOTE: Since debt is based on deposits, it makes sense to guard against large\n', '        //       changes to the value from triggering a harvest directly through user\n', '        //       behavior. This should ensure reasonable resistance to manipulation\n', '        //       from user-initiated withdrawals as the outstanding debt fluctuates.\n', '        uint256 outstanding = vault.debtOutstanding();\n', '        if (outstanding > debtThreshold) return true;\n', '\n', '        // Check for profits and losses\n', '        uint256 total = estimatedTotalAssets();\n', '        // Trigger if we have a loss to report\n', '        if (total.add(debtThreshold) < params.totalDebt) return true;\n', '\n', '        uint256 profit = 0;\n', "        if (total > params.totalDebt) profit = total.sub(params.totalDebt); // We've earned a profit!\n", '\n', '        // Otherwise, only trigger if it "makes sense" economically (gas cost\n', '        // is <N% of value moved)\n', '        uint256 credit = vault.creditAvailable();\n', '        return (profitFactor.mul(callCost) < credit.add(profit));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Harvests the Strategy, recognizing any profits or losses and adjusting\n', "     *  the Strategy's position.\n", '     *\n', '     *  In the rare case the Strategy is in emergency shutdown, this will exit\n', "     *  the Strategy's position.\n", '     *\n', '     *  This may only be called by governance, the strategist, or the keeper.\n', '     * @dev\n', '     *  When `harvest()` is called, the Strategy reports to the Vault (via\n', '     *  `vault.report()`), so in some cases `harvest()` must be called in order\n', '     *  to take in profits, to borrow newly available funds from the Vault, or\n', '     *  otherwise adjust its position. In other cases `harvest()` must be\n', "     *  called to report to the Vault on the Strategy's position, especially if\n", '     *  any losses have occurred.\n', '     */\n', '    function harvest() external onlyKeepers {\n', '        uint256 profit = 0;\n', '        uint256 loss = 0;\n', '        uint256 debtOutstanding = vault.debtOutstanding();\n', '        uint256 debtPayment = 0;\n', '        if (emergencyExit) {\n', '            // Free up as much capital as possible\n', '            uint256 totalAssets = estimatedTotalAssets();\n', '            // NOTE: use the larger of total assets or debt outstanding to book losses properly\n', '            (debtPayment, loss) = liquidatePosition(totalAssets > debtOutstanding ? totalAssets : debtOutstanding);\n', '            // NOTE: take up any remainder here as profit\n', '            if (debtPayment > debtOutstanding) {\n', '                profit = debtPayment.sub(debtOutstanding);\n', '                debtPayment = debtOutstanding;\n', '            }\n', '        } else {\n', '            // Free up returns for Vault to pull\n', '            (profit, loss, debtPayment) = prepareReturn(debtOutstanding);\n', '        }\n', '\n', '        // Allow Vault to take up to the "harvested" balance of this contract,\n', '        // which is the amount it has earned since the last time it reported to\n', '        // the Vault.\n', '        debtOutstanding = vault.report(profit, loss, debtPayment);\n', '\n', '        // Check if free returns are left, and re-invest them\n', '        adjustPosition(debtOutstanding);\n', '\n', '        emit Harvested(profit, loss, debtPayment, debtOutstanding);\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Withdraws `_amountNeeded` to `vault`.\n', '     *\n', '     *  This may only be called by the Vault.\n', '     * @param _amountNeeded How much `want` to withdraw.\n', '     * @return _loss Any realized losses\n', '     */\n', '    function withdraw(uint256 _amountNeeded) external returns (uint256 _loss) {\n', '        require(msg.sender == address(vault), "!vault");\n', '        // Liquidate as much as possible to `want`, up to `_amountNeeded`\n', '        uint256 amountFreed;\n', '        (amountFreed, _loss) = liquidatePosition(_amountNeeded);\n', '        // Send it directly back (NOTE: Using `msg.sender` saves some gas here)\n', '        want.safeTransfer(msg.sender, amountFreed);\n', '        // NOTE: Reinvest anything leftover on next `tend`/`harvest`\n', '    }\n', '\n', '    /**\n', '     * Do anything necessary to prepare this Strategy for migration, such as\n', '     * transferring any reserve or LP tokens, CDPs, or other tokens or stores of\n', '     * value.\n', '     */\n', '    function prepareMigration(address _newStrategy) internal virtual;\n', '\n', '    /**\n', '     * @notice\n', '     *  Transfers all `want` from this Strategy to `_newStrategy`.\n', '     *\n', '     *  This may only be called by governance or the Vault.\n', '     * @dev\n', "     *  The new Strategy's Vault must be the same as this Strategy's Vault.\n", '     * @param _newStrategy The Strategy to migrate to.\n', '     */\n', '    function migrate(address _newStrategy) external {\n', '        require(msg.sender == address(vault) || msg.sender == governance());\n', '        require(BaseStrategy(_newStrategy).vault() == vault);\n', '        prepareMigration(_newStrategy);\n', '        want.safeTransfer(_newStrategy, want.balanceOf(address(this)));\n', '    }\n', '\n', '    /**\n', '     * @notice\n', '     *  Activates emergency exit. Once activated, the Strategy will exit its\n', '     *  position upon the next harvest, depositing all funds into the Vault as\n', '     *  quickly as is reasonable given on-chain conditions.\n', '     *\n', '     *  This may only be called by governance or the strategist.\n', '     * @dev\n', '     *  See `vault.setEmergencyShutdown()` and `harvest()` for further details.\n', '     */\n', '    function setEmergencyExit() external onlyAuthorized {\n', '        emergencyExit = true;\n', '        vault.revokeStrategy();\n', '\n', '        emit EmergencyExitEnabled();\n', '    }\n', '\n', '    /**\n', '     * Override this to add all tokens/tokenized positions this contract\n', '     * manages on a *persistent* basis (e.g. not just for swapping back to\n', '     * want ephemerally).\n', '     *\n', '     * NOTE: Do *not* include `want`, already included in `sweep` below.\n', '     *\n', '     * Example:\n', '     *\n', '     *    function protectedTokens() internal override view returns (address[] memory) {\n', '     *      address[] memory protected = new address[](3);\n', '     *      protected[0] = tokenA;\n', '     *      protected[1] = tokenB;\n', '     *      protected[2] = tokenC;\n', '     *      return protected;\n', '     *    }\n', '     */\n', '    function protectedTokens() internal virtual view returns (address[] memory);\n', '\n', '    /**\n', '     * @notice\n', '     *  Removes tokens from this Strategy that are not the type of tokens\n', '     *  managed by this Strategy. This may be used in case of accidentally\n', '     *  sending the wrong kind of token to this Strategy.\n', '     *\n', '     *  Tokens will be sent to `governance()`.\n', '     *\n', '     *  This will fail if an attempt is made to sweep `want`, or any tokens\n', '     *  that are protected by this Strategy.\n', '     *\n', '     *  This may only be called by governance.\n', '     * @dev\n', '     *  Implement `protectedTokens()` to specify any additional tokens that\n', '     *  should be protected from sweeping in addition to `want`.\n', '     * @param _token The token to transfer out of this vault.\n', '     */\n', '    function sweep(address _token) external onlyGovernance {\n', '        require(_token != address(want), "!want");\n', '        require(_token != address(vault), "!shares");\n', '\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).safeTransfer(governance(), IERC20(_token).balanceOf(address(this)));\n', '    }\n', '}\n', '\n', '// Part: IAToken\n', '\n', 'interface IAToken is IERC20, IScaledBalanceToken, IInitializableAToken {\n', '    /**\n', '     * @dev Emitted after the mint action\n', '     * @param from The address performing the mint\n', '     * @param value The amount being\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event Mint(address indexed from, uint256 value, uint256 index);\n', '\n', '    /**\n', '     * @dev Mints `amount` aTokens to `user`\n', '     * @param user The address receiving the minted tokens\n', '     * @param amount The amount of tokens getting minted\n', '     * @param index The new liquidity index of the reserve\n', '     * @return `true` if the the previous balance of the user was 0\n', '     */\n', '    function mint(\n', '        address user,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted after aTokens are burned\n', '     * @param from The owner of the aTokens, getting them burned\n', '     * @param target The address that will receive the underlying\n', '     * @param value The amount being burned\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event Burn(\n', '        address indexed from,\n', '        address indexed target,\n', '        uint256 value,\n', '        uint256 index\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted during the transfer action\n', '     * @param from The user whose tokens are being transferred\n', '     * @param to The recipient\n', '     * @param value The amount being transferred\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event BalanceTransfer(\n', '        address indexed from,\n', '        address indexed to,\n', '        uint256 value,\n', '        uint256 index\n', '    );\n', '\n', '    /**\n', '     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n', '     * @param user The owner of the aTokens, getting them burned\n', '     * @param receiverOfUnderlying The address that will receive the underlying\n', '     * @param amount The amount being burned\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    function burn(\n', '        address user,\n', '        address receiverOfUnderlying,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Mints aTokens to the reserve treasury\n', '     * @param amount The amount of tokens getting minted\n', '     * @param index The new liquidity index of the reserve\n', '     */\n', '    function mintToTreasury(uint256 amount, uint256 index) external;\n', '\n', '    /**\n', '     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n', '     * @param from The address getting liquidated, current owner of the aTokens\n', '     * @param to The recipient\n', '     * @param value The amount of tokens getting transferred\n', '     **/\n', '    function transferOnLiquidation(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n', '     * assets in borrow(), withdraw() and flashLoan()\n', '     * @param user The recipient of the underlying\n', '     * @param amount The amount getting transferred\n', '     * @return The amount transferred\n', '     **/\n', '    function transferUnderlyingTo(address user, uint256 amount)\n', '        external\n', '        returns (uint256);\n', '\n', '    /**\n', '     * @dev Invoked to execute actions on the aToken side after a repayment.\n', '     * @param user The user executing the repayment\n', '     * @param amount The amount getting repaid\n', '     **/\n', '    function handleRepayment(address user, uint256 amount) external;\n', '\n', '    /**\n', '     * @dev Returns the address of the incentives controller contract\n', '     **/\n', '    function getIncentivesController()\n', '        external\n', '        view\n', '        returns (IAaveIncentivesController);\n', '\n', '    /**\n', '     * @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH)\n', '     **/\n', '    function UNDERLYING_ASSET_ADDRESS() external view returns (address);\n', '}\n', '\n', '// File: Strategy.sol\n', '\n', 'contract Strategy is BaseStrategy {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '    using WadRayMath for uint256;\n', '\n', '    bool internal isOriginal = true;\n', '    // max interest rate we can afford to pay for borrowing investment token\n', '    // amount in Ray (1e27 = 100%)\n', '    uint256 public acceptableCostsRay = 1e27;\n', '\n', '    // max amount to borrow. used to manually limit amount (for yVault to keep APY)\n', '    uint256 public maxTotalBorrowIT;\n', '    // true if this token is incentivised\n', '    bool public isWantIncentivised;\n', '    bool public isInvestmentTokenIncentivised;\n', '\n', '    // if set to true, the strategy will not try to repay debt by selling want\n', '    bool public leaveDebtBehind;\n', '\n', "    // Aave's referral code\n", '    uint16 internal referral;\n', '\n', '    // NOTE: LTV = Loan-To-Value = debt/collateral\n', '    // Target LTV: ratio up to which which we will borrow\n', '    uint16 public targetLTVMultiplier = 6_000; // 60% of liquidation LTV\n', '    // Warning LTV: ratio at which we will repay\n', '    uint16 public warningLTVMultiplier = 8_000; // 80% of liquidation LTV\n', '\n', '    // support\n', '    uint16 internal constant MAX_BPS = 10_000; // 100%\n', '    uint16 internal constant MAX_MULTIPLIER = 9_000; // 90%\n', '\n', '    IAToken internal aToken;\n', '    IVariableDebtToken internal variableDebtToken;\n', '    IVault public yVault;\n', '    IERC20 internal investmentToken;\n', '\n', '    ISwap internal constant router =\n', '        ISwap(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '\n', '    IStakedAave internal constant stkAave =\n', '        IStakedAave(0x4da27a545c0c5B758a6BA100e3a049001de870f5);\n', '\n', '    IProtocolDataProvider internal constant protocolDataProvider =\n', '        IProtocolDataProvider(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d);\n', '\n', '    address internal constant WETH =\n', '        address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2);\n', '    address internal constant AAVE =\n', '        address(0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9);\n', '\n', '    uint256 internal minThreshold;\n', '    uint256 public maxLoss;\n', '\n', '    string internal strategyName;\n', '\n', '    constructor(\n', '        address _vault,\n', '        address _yVault,\n', '        bool _isWantIncentivised,\n', '        bool _isInvestmentTokenIncentivised,\n', '        string memory _strategyName\n', '    ) public BaseStrategy(_vault) {\n', '        _initializeThis(\n', '            _yVault,\n', '            _isWantIncentivised,\n', '            _isInvestmentTokenIncentivised,\n', '            _strategyName\n', '        );\n', '    }\n', '\n', '    // ----------------- PUBLIC VIEW FUNCTIONS -----------------\n', '\n', '    function name() external view override returns (string memory) {\n', '        return strategyName;\n', '    }\n', '\n', '    function estimatedTotalAssets() public view override returns (uint256) {\n', '        // not taking into account aave rewards (they are staked and not accesible)\n', '        return\n', '            balanceOfWant() // balance of want\n', '                .add(balanceOfAToken()) // asset suplied as collateral\n', '                .add(\n', '                _fromETH(\n', '                    _toETH(_valueOfInvestment(), address(investmentToken)),\n', '                    address(want)\n', '                )\n', '            ) // current value of assets deposited in vault\n', '                .sub(\n', '                _fromETH(\n', '                    _toETH(balanceOfDebt(), address(investmentToken)),\n', '                    address(want)\n', '                )\n', '            ); // liabilities\n', '    }\n', '\n', '    // ----------------- SETTERS -----------------\n', '    // we put all together to save contract bytecode (!)\n', '    function setStrategyParams(\n', '        uint16 _targetLTVMultiplier,\n', '        uint16 _warningLTVMultiplier,\n', '        uint256 _acceptableCostsRay,\n', '        uint16 _aaveReferral,\n', '        uint256 _maxTotalBorrowIT,\n', '        bool _isWantIncentivised,\n', '        bool _isInvestmentTokenIncentivised,\n', '        bool _leaveDebtBehind,\n', '        uint256 _maxLoss\n', '    ) external onlyAuthorized {\n', '        require(\n', '            _warningLTVMultiplier <= MAX_MULTIPLIER &&\n', '                _targetLTVMultiplier <= _warningLTVMultiplier\n', '        );\n', '        targetLTVMultiplier = _targetLTVMultiplier;\n', '        warningLTVMultiplier = _warningLTVMultiplier;\n', '        acceptableCostsRay = _acceptableCostsRay;\n', '        maxTotalBorrowIT = _maxTotalBorrowIT;\n', '        referral = _aaveReferral;\n', '        _setIsInvestmentTokenIncentivised(_isInvestmentTokenIncentivised);\n', '        _setIsWantIncentivised(_isWantIncentivised);\n', '        leaveDebtBehind = _leaveDebtBehind;\n', '        require(maxLoss <= 10_000);\n', '        maxLoss = _maxLoss;\n', '    }\n', '\n', '    event Cloned(address indexed clone);\n', '\n', '    function cloneAaveLenderBorrower(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper,\n', '        address _yVault,\n', '        bool _isWantIncentivised,\n', '        bool _isInvestmentTokenIncentivised,\n', '        string memory _strategyName\n', '    ) external returns (address newStrategy) {\n', '        require(isOriginal);\n', '        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n', '        bytes20 addressBytes = bytes20(address(this));\n', '        assembly {\n', '            // EIP-1167 bytecode\n', '            let clone_code := mload(0x40)\n', '            mstore(\n', '                clone_code,\n', '                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\n', '            )\n', '            mstore(add(clone_code, 0x14), addressBytes)\n', '            mstore(\n', '                add(clone_code, 0x28),\n', '                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\n', '            )\n', '            newStrategy := create(0, clone_code, 0x37)\n', '        }\n', '\n', '        Strategy(newStrategy).initialize(\n', '            _vault,\n', '            _strategist,\n', '            _rewards,\n', '            _keeper,\n', '            _yVault,\n', '            _isWantIncentivised,\n', '            _isInvestmentTokenIncentivised,\n', '            _strategyName\n', '        );\n', '\n', '        emit Cloned(newStrategy);\n', '    }\n', '\n', '    function _initializeThis(\n', '        address _yVault,\n', '        bool _isWantIncentivised,\n', '        bool _isInvestmentTokenIncentivised,\n', '        string memory _strategyName\n', '    ) internal {\n', '        minReportDelay = 24 * 3600;\n', '        maxReportDelay = 10 * 24 * 3600;\n', '        profitFactor = 100;\n', '        debtThreshold = 0;\n', '\n', '        yVault = IVault(_yVault);\n', '        investmentToken = IERC20(IVault(_yVault).token());\n', '\n', '        (address _aToken, , ) =\n', '            protocolDataProvider.getReserveTokensAddresses(address(want));\n', '        aToken = IAToken(_aToken);\n', '\n', '        (, , address _variableDebtToken) =\n', '            protocolDataProvider.getReserveTokensAddresses(\n', '                address(investmentToken)\n', '            );\n', '\n', '        variableDebtToken = IVariableDebtToken(_variableDebtToken);\n', '        minThreshold = (10**(yVault.decimals())).div(100); // 0.01 minThreshold\n', '\n', '        _setIsWantIncentivised(_isWantIncentivised);\n', '        _setIsInvestmentTokenIncentivised(_isInvestmentTokenIncentivised);\n', '\n', '        maxTotalBorrowIT = type(uint256).max; // set to max to avoid limits. this may trigger revert in some parts if not correctly handled\n', '\n', '        maxLoss = 1;\n', '        strategyName = _strategyName;\n', '    }\n', '\n', '    function initialize(\n', '        address _vault,\n', '        address _strategist,\n', '        address _rewards,\n', '        address _keeper,\n', '        address _yVault,\n', '        bool _isWantIncentivised,\n', '        bool _isInvestmentTokenIncentivised,\n', '        string memory _strategyName\n', '    ) public {\n', '        _initialize(_vault, _strategist, _rewards, _keeper);\n', '        require(address(yVault) == address(0));\n', '        _initializeThis(\n', '            _yVault,\n', '            _isWantIncentivised,\n', '            _isInvestmentTokenIncentivised,\n', '            _strategyName\n', '        );\n', '    }\n', '\n', '    // ----------------- MAIN STRATEGY FUNCTIONS -----------------\n', '    function prepareReturn(uint256 _debtOutstanding)\n', '        internal\n', '        override\n', '        returns (\n', '            uint256 _profit,\n', '            uint256 _loss,\n', '            uint256 _debtPayment\n', '        )\n', '    {\n', '        uint256 balanceInit = balanceOfWant();\n', "        // claim rewards from Aave's Liquidity Mining Program\n", '        _claimRewards();\n', '\n', '        // claim rewards from yVault\n', '        _takeVaultProfit();\n', '\n', '        // claim interest from lending\n', '        _takeLendingProfit();\n', '\n', '        uint256 balanceOfWant = balanceOfWant();\n', '\n', '        if (balanceOfWant > balanceInit) {\n', '            _profit = balanceOfWant.sub(balanceInit);\n', '        }\n', '\n', '        // if the vault is claiming repayment of debt\n', '        if (_debtOutstanding > 0) {\n', '            uint256 _amountFreed = 0;\n', '            (_amountFreed, _loss) = liquidatePosition(_debtOutstanding);\n', '            _debtPayment = Math.min(_debtOutstanding, _amountFreed);\n', '            if (_loss > 0) {\n', '                _profit = 0;\n', '            }\n', '        }\n', '    }\n', '\n', '    function adjustPosition(uint256 _debtOutstanding) internal override {\n', '        uint256 wantBalance = balanceOfWant();\n', '\n', '        // if we have enough want to deposit more into Aave, we do\n', "        // NOTE: we do not skip the rest of the function if we don't as it may need to repay or take on more debt\n", '        if (wantBalance > _debtOutstanding) {\n', '            uint256 amountToDeposit = wantBalance.sub(_debtOutstanding);\n', '            _depositToAave(amountToDeposit);\n', '        }\n', '\n', '        // NOTE: debt + collateral calcs are done in ETH\n', '        (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            uint256 availableBorrowsETH,\n', '            uint256 currentLiquidationThreshold,\n', '            ,\n', '\n', '        ) = _getAaveUserAccountData();\n', '\n', "        // if there is no want deposited into aave, don't do nothing\n", '        // this means no debt is borrowed from aave too\n', '        if (totalCollateralETH == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 currentLTV = totalDebtETH.mul(MAX_BPS).div(totalCollateralETH);\n', '        uint256 targetLTV = _getTargetLTV(currentLiquidationThreshold); // 60% under liquidation Threshold\n', '        uint256 warningLTV = _getWarningLTV(currentLiquidationThreshold); // 80% under liquidation Threshold\n', '\n', '        // decide in which range we are and act accordingly:\n', '        // SUBOPTIMAL(borrow) (e.g. from 0 to 60% liqLTV)\n', '        // HEALTHY(do nothing) (e.g. from 60% to 80% liqLTV)\n', '        // UNHEALTHY(repay) (e.g. from 80% to 100% liqLTV)\n', '\n', '        // we use our target cost of capital to calculate how much debt we can take on / how much debt we need to repay\n', '        // in order to bring costs back to an acceptable range\n', "        // currentProtocolDebt => total amount of debt taken by all Aave's borrowers\n", '        // maxProtocolDebt => amount of total debt at which the cost of capital is equal to our acceptable costs\n', '        // if the current protocol debt is higher than the max protocol debt, we will repay debt\n', '        (uint256 currentProtocolDebt, uint256 maxProtocolDebt) =\n', '            _calculateMaxDebt();\n', '\n', '        if (targetLTV > currentLTV && currentProtocolDebt < maxProtocolDebt) {\n', '            // SUBOPTIMAL RATIO: our current Loan-to-Value is lower than what we want\n', '            // AND costs are lower than our max acceptable costs\n', '\n', '            // we need to take on more debt\n', '            uint256 targetDebtETH =\n', '                totalCollateralETH.mul(targetLTV).div(MAX_BPS);\n', '\n', '            uint256 amountToBorrowETH = targetDebtETH.sub(totalDebtETH); // safe bc we checked ratios\n', '            amountToBorrowETH = Math.min(\n', '                availableBorrowsETH,\n', '                amountToBorrowETH\n', '            );\n', '\n', '            // cap the amount of debt we are taking according to our acceptable costs\n', '            // if with the new loan we are increasing our cost of capital over what is healthy\n', '            if (currentProtocolDebt.add(amountToBorrowETH) > maxProtocolDebt) {\n', "                // Can't underflow because it's checked in the previous if condition\n", '                amountToBorrowETH = maxProtocolDebt.sub(currentProtocolDebt);\n', '            }\n', '\n', '            uint256 maxTotalBorrowETH =\n', '                _toETH(maxTotalBorrowIT, address(investmentToken));\n', '            if (totalDebtETH.add(amountToBorrowETH) > maxTotalBorrowETH) {\n', '                amountToBorrowETH = maxTotalBorrowETH > totalDebtETH\n', '                    ? maxTotalBorrowETH.sub(totalDebtETH)\n', '                    : 0;\n', '            }\n', '\n', '            // convert to InvestmentToken\n', '            uint256 amountToBorrowIT =\n', '                _fromETH(amountToBorrowETH, address(investmentToken));\n', '\n', '            if (amountToBorrowIT > 0) {\n', '                _lendingPool().borrow(\n', '                    address(investmentToken),\n', '                    amountToBorrowIT,\n', '                    2,\n', '                    referral,\n', '                    address(this)\n', '                );\n', '            }\n', '\n', '            _depositInYVault();\n', '        } else if (\n', '            currentLTV > warningLTV || currentProtocolDebt > maxProtocolDebt\n', '        ) {\n', '            // UNHEALTHY RATIO\n', '            // we may be in this case if the current cost of capital is higher than our max cost of capital\n', '            // we repay debt to set it to targetLTV\n', '            uint256 targetDebtETH =\n', '                targetLTV.mul(totalCollateralETH).div(MAX_BPS);\n', '            uint256 amountToRepayETH =\n', '                targetDebtETH < totalDebtETH\n', '                    ? totalDebtETH.sub(targetDebtETH)\n', '                    : 0;\n', '\n', '            if (maxProtocolDebt == 0) {\n', '                amountToRepayETH = totalDebtETH;\n', '            } else if (currentProtocolDebt > maxProtocolDebt) {\n', '                amountToRepayETH = Math.max(\n', '                    amountToRepayETH,\n', '                    currentProtocolDebt.sub(maxProtocolDebt)\n', '                );\n', '            }\n', '\n', '            uint256 amountToRepayIT =\n', '                _fromETH(amountToRepayETH, address(investmentToken));\n', '            uint256 withdrawnIT = _withdrawFromYVault(amountToRepayIT); // we withdraw from investmentToken vault\n', '            _repayInvestmentTokenDebt(withdrawnIT); // we repay the investmentToken debt with Aave\n', '        }\n', '    }\n', '\n', '    function liquidatePosition(uint256 _amountNeeded)\n', '        internal\n', '        override\n', '        returns (uint256 _liquidatedAmount, uint256 _loss)\n', '    {\n', '        uint256 balance = balanceOfWant();\n', '        uint256 previousBalance = balance;\n', '        // if we have enough want to take care of the liquidatePosition without actually liquidating positons\n', '        if (balance >= _amountNeeded) {\n', '            return (_amountNeeded, 0);\n', '        }\n', '\n', '        // NOTE: amountNeeded is in want\n', '        // NOTE: repayment amount is in investmentToken\n', '        // NOTE: collateral and debt calcs are done in ETH (always, see Aave docs)\n', '\n', '        // We first repay whatever we need to repay to keep healthy ratios\n', '        uint256 amountToRepayIT = _calculateAmountToRepay(_amountNeeded);\n', '        uint256 withdrawnIT = _withdrawFromYVault(amountToRepayIT); // we withdraw from investmentToken vault\n', '        _repayInvestmentTokenDebt(withdrawnIT); // we repay the investmentToken debt with Aave\n', '\n', '        // it will return the free amount of want\n', '        _withdrawWantFromAave(_amountNeeded);\n', '\n', '        balance = balanceOfWant();\n', '        // we check if we withdrew less than expected AND should buy investmentToken with want (realising losses)\n', '        if (\n', '            _amountNeeded > balance &&\n', '            balanceOfDebt() > 0 && // still some debt remaining\n', '            balanceOfInvestmentToken().add(_valueOfInvestment()) == 0 && // but no capital to repay\n', '            !leaveDebtBehind // if set to true, the strategy will not try to repay debt by selling want\n', '        ) {\n', '            // using this part of code will result in losses but it is necessary to unlock full collateral in case of wind down\n', '            // we calculate how much want we need to fulfill the want request\n', '            uint256 remainingAmountWant = _amountNeeded.sub(balance);\n', '            // then calculate how much InvestmentToken we need to unlock collateral\n', '            amountToRepayIT = _calculateAmountToRepay(remainingAmountWant);\n', '\n', '            // we buy investmentToken with Want\n', '            _buyInvestmentTokenWithWant(amountToRepayIT);\n', '\n', '            // we repay debt to actually unlock collateral\n', '            // after this, balanceOfDebt should be 0\n', '            _repayInvestmentTokenDebt(amountToRepayIT);\n', '\n', '            // then we try withdraw once more\n', '            _withdrawWantFromAave(remainingAmountWant);\n', '        }\n', '\n', '        uint256 totalAssets = balanceOfWant();\n', '        if (_amountNeeded > totalAssets) {\n', '            _liquidatedAmount = totalAssets;\n', '            _loss = _amountNeeded.sub(totalAssets);\n', '        } else {\n', '            _liquidatedAmount = _amountNeeded;\n', '        }\n', '    }\n', '\n', '    function delegatedAssets() external view override returns (uint256) {\n', '        // returns total debt borrowed in want (which is the delegatedAssets)\n', '        return\n', '            _fromETH(\n', '                _toETH(balanceOfDebt(), address(investmentToken)),\n', '                address(want)\n', '            );\n', '    }\n', '\n', '    function prepareMigration(address _newStrategy) internal override {\n', '        // not implemented because debt cannot be migrated\n', '        revert();\n', '    }\n', '\n', '    function harvestTrigger(uint256 callCost)\n', '        public\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        // we harvest if:\n', '        // 1. stakedAave is ready to be converted to Aave and sold\n', '\n', '        return\n', '            _checkCooldown() ||\n', '            super.harvestTrigger(_fromETH(callCost, address(want)));\n', '    }\n', '\n', '    function tendTrigger(uint256 callCost) public view override returns (bool) {\n', '        // we adjust position if:\n', '        // 1. LTV ratios are not in the HEALTHY range (either we take on more debt or repay debt)\n', '        // 2. costs are not acceptable and we need to repay debt\n', '\n', '        (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            ,\n', '            uint256 currentLiquidationThreshold,\n', '            ,\n', '\n', '        ) = _getAaveUserAccountData();\n', '\n', '        uint256 currentLTV = totalDebtETH.mul(MAX_BPS).div(totalCollateralETH);\n', '        uint256 targetLTV = _getTargetLTV(currentLiquidationThreshold);\n', '        uint256 warningLTV = _getWarningLTV(currentLiquidationThreshold);\n', '        (uint256 currentProtocolDebt, uint256 maxProtocolDebt) =\n', '            _calculateMaxDebt();\n', '\n', '        if (\n', '            (currentLTV < targetLTV &&\n', '                currentProtocolDebt < maxProtocolDebt &&\n', '                targetLTV.sub(currentLTV) > 100) || // WE NEED TO TAKE ON MORE DEBT\n', '            (currentLTV > warningLTV || currentProtocolDebt > maxProtocolDebt) // WE NEED TO REPAY DEBT BECAUSE OF UNHEALTHY RATIO OR BORROWING COSTS\n', '        ) {\n', '            return true;\n', '        }\n', '\n', '        // no call to super.tendTrigger as it would return false\n', '        return false;\n', '    }\n', '\n', '    // ----------------- INTERNAL FUNCTIONS SUPPORT -----------------\n', '\n', '    function _withdrawFromYVault(uint256 _amountIT) internal returns (uint256) {\n', '        if (_amountIT == 0) {\n', '            return 0;\n', '        }\n', '        // no need to check allowance bc the contract == token\n', '        uint256 balancePrior = balanceOfInvestmentToken();\n', '        uint256 sharesToWithdraw =\n', '            Math.min(\n', '                _investmentTokenToYShares(_amountIT),\n', '                yVault.balanceOf(address(this))\n', '            );\n', '        yVault.withdraw(sharesToWithdraw, address(this), maxLoss);\n', '        return balanceOfInvestmentToken().sub(balancePrior);\n', '    }\n', '\n', '    function _repayInvestmentTokenDebt(uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        // we cannot pay more than loose balance\n', '        uint256 balance = balanceOfInvestmentToken();\n', '        amount = Math.min(amount, balance);\n', '        // we cannot pay more than we owe\n', '        amount = Math.min(balanceOfDebt(), amount);\n', '\n', '        _checkAllowance(\n', '            address(_lendingPool()),\n', '            address(investmentToken),\n', '            amount\n', '        );\n', '\n', '        if (amount > 0) {\n', '            uint256 repaid =\n', '                _lendingPool().repay(\n', '                    address(investmentToken),\n', '                    amount,\n', '                    uint256(2),\n', '                    address(this)\n', '                );\n', '        }\n', '    }\n', '\n', '    function _depositInYVault() internal {\n', '        uint256 balanceIT = balanceOfInvestmentToken();\n', '        if (balanceIT > 0) {\n', '            _checkAllowance(\n', '                address(yVault),\n', '                address(investmentToken),\n', '                balanceIT\n', '            );\n', '            yVault.deposit();\n', '        }\n', '    }\n', '\n', '    function _claimRewards() internal {\n', '        if (isInvestmentTokenIncentivised || isWantIncentivised) {\n', '            // redeem AAVE from stkAave\n', '            uint256 stkAaveBalance =\n', '                IERC20(address(stkAave)).balanceOf(address(this));\n', '            if (stkAaveBalance > 0 && _checkCooldown()) {\n', '                stkAave.redeem(address(this), stkAaveBalance);\n', '            }\n', '\n', '            // claim AAVE rewards\n', '            stkAave.claimRewards(address(this), type(uint256).max);\n', '\n', '            // sell AAVE for want\n', '            uint256 aaveBalance = IERC20(AAVE).balanceOf(address(this));\n', '            _sellAAVEForWant(aaveBalance);\n', '\n', '            // claim rewards\n', '            // only add to assets those assets that are incentivised\n', '            address[] memory assets;\n', '            if (isInvestmentTokenIncentivised && isWantIncentivised) {\n', '                assets = new address[](2);\n', '                assets[0] = address(aToken);\n', '                assets[1] = address(variableDebtToken);\n', '            } else if (isInvestmentTokenIncentivised) {\n', '                assets = new address[](1);\n', '                assets[0] = address(variableDebtToken);\n', '            } else if (isWantIncentivised) {\n', '                assets = new address[](1);\n', '                assets[0] = address(aToken);\n', '            }\n', '\n', '            _incentivesController().claimRewards(\n', '                assets,\n', '                type(uint256).max,\n', '                address(this)\n', '            );\n', '\n', '            // request start of cooldown period\n', '            if (IERC20(address(stkAave)).balanceOf(address(this)) > 0) {\n', '                stkAave.cooldown();\n', '            }\n', '        }\n', '    }\n', '\n', '    function _takeLendingProfit() internal {\n', '        uint256 depositedWant = vault.strategies(address(this)).totalDebt;\n', '        uint256 currentWantInAave = balanceOfAToken();\n', '\n', '        if (currentWantInAave > depositedWant) {\n', '            uint256 toWithdraw = currentWantInAave.sub(depositedWant);\n', '            _withdrawWantFromAave(toWithdraw);\n', '        }\n', '    }\n', '\n', '    //withdraw an amount including any want balance\n', '    function _withdrawWantFromAave(uint256 amount) internal {\n', '        uint256 balanceUnderlying = balanceOfAToken();\n', '        if (amount > balanceUnderlying) {\n', '            amount = balanceUnderlying;\n', '        }\n', '\n', '        uint256 maxWithdrawal =\n', '            Math.min(_maxWithdrawal(), want.balanceOf(address(aToken)));\n', '\n', '        uint256 toWithdraw = Math.min(amount, maxWithdrawal);\n', '        if (toWithdraw > 0) {\n', '            _checkAllowance(\n', '                address(_lendingPool()),\n', '                address(aToken),\n', '                toWithdraw\n', '            );\n', '            _lendingPool().withdraw(address(want), toWithdraw, address(this));\n', '        }\n', '    }\n', '\n', '    function _maxWithdrawal() internal view returns (uint256) {\n', '        (uint256 totalCollateralETH, uint256 totalDebtETH, , , uint256 ltv, ) =\n', '            _getAaveUserAccountData();\n', '        uint256 minCollateralETH =\n', '            ltv > 0 ? totalDebtETH.mul(MAX_BPS).div(ltv) : totalCollateralETH;\n', '        if (minCollateralETH > totalCollateralETH) {\n', '            return 0;\n', '        }\n', '        return\n', '            _fromETH(totalCollateralETH.sub(minCollateralETH), address(want));\n', '    }\n', '\n', '    function _calculateAmountToRepay(uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (amount == 0) {\n', '            return 0;\n', '        }\n', '\n', '        // we check if the collateral that we are withdrawing leaves us in a risky range, we then take action\n', '        (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            ,\n', '            uint256 currentLiquidationThreshold,\n', '            ,\n', '\n', '        ) = _getAaveUserAccountData();\n', '\n', '        uint256 amountToWithdrawETH = _toETH(amount, address(want));\n', '        // calculate the collateral that we are leaving after withdrawing\n', '        uint256 newCollateral =\n', '            totalCollateralETH > amountToWithdrawETH\n', '                ? totalCollateralETH.sub(amountToWithdrawETH)\n', '                : 0;\n', '\n', '        uint256 ltvAfterWithdrawal =\n', '            newCollateral > 0\n', '                ? totalDebtETH.mul(MAX_BPS).div(newCollateral)\n', '                : type(uint256).max;\n', '\n', '        // check if the new LTV is in UNHEALTHY range\n', '        // remember that if balance > _amountNeeded, ltvAfterWithdrawal == 0 (0 risk)\n', '        // this is not true but the effect will be the same\n', '        uint256 warningLTV = _getWarningLTV(currentLiquidationThreshold);\n', '\n', '        if (ltvAfterWithdrawal <= warningLTV) {\n', '            // no need of repaying debt because the LTV is ok\n', '            return 0;\n', '        } else if (ltvAfterWithdrawal == type(uint256).max) {\n', '            // we are withdrawing 100% of collateral so we need to repay full debt\n', '            return _fromETH(totalDebtETH, address(investmentToken));\n', '        }\n', '\n', '        uint256 targetLTV = _getTargetLTV(currentLiquidationThreshold);\n', '        // WARNING: this only works for a single collateral asset, otherwise liquidationThreshold might change depending on the collateral being withdrawn\n', '        // e.g. we have USDC + WBTC as collateral, end liquidationThreshold will be different depending on which asset we withdraw\n', '        uint256 newTargetDebt = targetLTV.mul(newCollateral).div(MAX_BPS);\n', '\n', "        // if newTargetDebt is higher, we don't need to repay anything\n", '        if (newTargetDebt > totalDebtETH) {\n', '            return 0;\n', '        }\n', '\n', '        return\n', '            _fromETH(\n', '                totalDebtETH.sub(newTargetDebt) < minThreshold\n', '                    ? totalDebtETH\n', '                    : totalDebtETH.sub(newTargetDebt),\n', '                address(investmentToken)\n', '            );\n', '    }\n', '\n', '    function _depositToAave(uint256 amount) internal {\n', '        if (amount == 0) {\n', '            return;\n', '        }\n', '\n', '        ILendingPool lp = _lendingPool();\n', '        _checkAllowance(address(lp), address(want), amount);\n', '        lp.deposit(address(want), amount, address(this), referral);\n', '    }\n', '\n', '    function _checkCooldown() internal view returns (bool) {\n', '        if (!isWantIncentivised && !isInvestmentTokenIncentivised) {\n', '            return false;\n', '        }\n', '\n', '        uint256 cooldownStartTimestamp =\n', '            IStakedAave(stkAave).stakersCooldowns(address(this));\n', '        uint256 COOLDOWN_SECONDS = IStakedAave(stkAave).COOLDOWN_SECONDS();\n', '        uint256 UNSTAKE_WINDOW = IStakedAave(stkAave).UNSTAKE_WINDOW();\n', '        if (block.timestamp >= cooldownStartTimestamp.add(COOLDOWN_SECONDS)) {\n', '            return\n', '                block.timestamp.sub(\n', '                    cooldownStartTimestamp.add(COOLDOWN_SECONDS)\n', '                ) <=\n', '                UNSTAKE_WINDOW ||\n', '                cooldownStartTimestamp == 0;\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    function _checkAllowance(\n', '        address _contract,\n', '        address _token,\n', '        uint256 _amount\n', '    ) internal {\n', '        if (IERC20(_token).allowance(address(this), _contract) < _amount) {\n', '            IERC20(_token).safeApprove(_contract, 0);\n', '            IERC20(_token).safeApprove(_contract, type(uint256).max);\n', '        }\n', '    }\n', '\n', '    function _takeVaultProfit() internal {\n', '        uint256 _debt = balanceOfDebt();\n', '        uint256 _valueInVault = _valueOfInvestment();\n', '        if (_debt >= _valueInVault) {\n', '            return;\n', '        }\n', '\n', '        uint256 profit = _valueInVault.sub(_debt);\n', '        uint256 ySharesToWithdraw = _investmentTokenToYShares(profit);\n', '        if (ySharesToWithdraw > 0) {\n', '            yVault.withdraw(ySharesToWithdraw, address(this), maxLoss);\n', '            _sellInvestmentForWant(balanceOfInvestmentToken());\n', '        }\n', '    }\n', '\n', '    // ----------------- INTERNAL CALCS -----------------\n', '    function _calculateMaxDebt()\n', '        internal\n', '        view\n', '        returns (uint256 currentProtocolDebt, uint256 maxProtocolDebt)\n', '    {\n', '        // This function is used to calculate the maximum amount of debt that the protocol can take\n', '        // to keep the cost of capital lower than the set acceptableCosts\n', '        // This maxProtocolDebt will be used to decide if capital costs are acceptable or not\n', '        // and to repay required debt to keep the rates below acceptable costs\n', '\n', '        // Hack to avoid the stack too deep compiler error.\n', '        SupportStructs.CalcMaxDebtLocalVars memory vars;\n', '        vars.availableLiquidity = 0;\n', '        vars.totalStableDebt = 0;\n', '        vars.totalVariableDebt = 0;\n', '        vars.totalDebt = 0;\n', '        vars.utilizationRate = 0;\n', '        vars.totalLiquidity = 0;\n', '        vars.targetUtilizationRate = 0;\n', '        vars.maxProtocolDebt = 0;\n', '\n', '        DataTypes.ReserveData memory reserveData =\n', '            _lendingPool().getReserveData(address(investmentToken));\n', '        IReserveInterestRateStrategy irs =\n', '            IReserveInterestRateStrategy(\n', '                reserveData.interestRateStrategyAddress\n', '            );\n', '\n', '        (\n', '            vars.availableLiquidity, // = total supply - total stable debt - total variable debt\n', '            vars.totalStableDebt, // total debt paying stable interest rates\n', '            vars.totalVariableDebt, // total debt paying stable variable rates\n', '            ,\n', '            ,\n', '            ,\n', '            ,\n', '            ,\n', '            ,\n', '\n', '        ) = protocolDataProvider.getReserveData(address(investmentToken));\n', '\n', '        vars.totalDebt = vars.totalStableDebt.add(vars.totalVariableDebt);\n', '        vars.totalLiquidity = vars.availableLiquidity.add(vars.totalDebt);\n', '        vars.utilizationRate = vars.totalDebt == 0\n', '            ? 0\n', '            : vars.totalDebt.rayDiv(vars.totalLiquidity);\n', '\n', "        // Aave's Interest Rate Strategy Parameters (see docs)\n", '        SupportStructs.IrsVars memory irsVars;\n', '        irsVars.optimalRate = irs.OPTIMAL_UTILIZATION_RATE();\n', '        irsVars.baseRate = irs.baseVariableBorrowRate(); // minimum cost of capital with 0 % of utilisation rate\n', '        irsVars.slope1 = irs.variableRateSlope1(); // rate of increase of cost of debt up to Optimal Utilisation Rate\n', '        irsVars.slope2 = irs.variableRateSlope2(); // rate of increase of cost of debt above Optimal Utilisation Rate\n', '\n', '        // acceptableCosts should always be > baseVariableBorrowRate\n', "        // If it's not this will revert since the strategist set the wrong\n", '        // acceptableCosts value\n', '        if (\n', '            vars.utilizationRate < irsVars.optimalRate &&\n', '            acceptableCostsRay < irsVars.baseRate.add(irsVars.slope1)\n', '        ) {\n', "            // we solve Aave's Interest Rates equation for sub optimal utilisation rates\n", '            // IR = BASERATE + SLOPE1 * CURRENT_UTIL_RATE / OPTIMAL_UTIL_RATE\n', '            vars.targetUtilizationRate = (\n', '                acceptableCostsRay.sub(irsVars.baseRate)\n', '            )\n', '                .rayMul(irsVars.optimalRate)\n', '                .rayDiv(irsVars.slope1);\n', '        } else {\n', '            // Special case where protocol is above utilization rate but we want\n', '            // a lower interest rate than (base + slope1)\n', '            if (acceptableCostsRay < irsVars.baseRate.add(irsVars.slope1)) {\n', '                return (vars.totalDebt, 0);\n', '            }\n', '\n', "            // we solve Aave's Interest Rates equation for utilisation rates above optimal U\n", '            // IR = BASERATE + SLOPE1 + SLOPE2 * (CURRENT_UTIL_RATE - OPTIMAL_UTIL_RATE) / (1-OPTIMAL_UTIL_RATE)\n', '            vars.targetUtilizationRate = (\n', '                acceptableCostsRay.sub(irsVars.baseRate.add(irsVars.slope1))\n', '            )\n', '                .rayMul(uint256(1e27).sub(irsVars.optimalRate))\n', '                .rayDiv(irsVars.slope2)\n', '                .add(irsVars.optimalRate);\n', '        }\n', '\n', '        vars.maxProtocolDebt = vars\n', '            .totalLiquidity\n', '            .rayMul(vars.targetUtilizationRate)\n', '            .rayDiv(1e27);\n', '\n', '        return (vars.totalDebt, vars.maxProtocolDebt);\n', '    }\n', '\n', '    function balanceOfWant() internal view returns (uint256) {\n', '        return want.balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfInvestmentToken() internal view returns (uint256) {\n', '        return investmentToken.balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfAToken() internal view returns (uint256) {\n', '        return aToken.balanceOf(address(this));\n', '    }\n', '\n', '    function balanceOfDebt() internal view returns (uint256) {\n', '        return variableDebtToken.balanceOf(address(this));\n', '    }\n', '\n', '    function _valueOfInvestment() internal view returns (uint256) {\n', '        return\n', '            yVault.balanceOf(address(this)).mul(yVault.pricePerShare()).div(\n', '                10**yVault.decimals()\n', '            );\n', '    }\n', '\n', '    function _investmentTokenToYShares(uint256 amount)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return amount.mul(10**yVault.decimals()).div(yVault.pricePerShare());\n', '    }\n', '\n', '    function _getAaveUserAccountData()\n', '        internal\n', '        view\n', '        returns (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            uint256 availableBorrowsETH,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 ltv,\n', '            uint256 healthFactor\n', '        )\n', '    {\n', '        return _lendingPool().getUserAccountData(address(this));\n', '    }\n', '\n', '    function _getTargetLTV(uint256 liquidationThreshold)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            liquidationThreshold.mul(uint256(targetLTVMultiplier)).div(MAX_BPS);\n', '    }\n', '\n', '    function _getWarningLTV(uint256 liquidationThreshold)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return\n', '            liquidationThreshold.mul(uint256(warningLTVMultiplier)).div(\n', '                MAX_BPS\n', '            );\n', '    }\n', '\n', '    function _setIsWantIncentivised(bool _isWantIncentivised) internal {\n', '        isWantIncentivised = _isWantIncentivised;\n', '    }\n', '\n', '    function _setIsInvestmentTokenIncentivised(\n', '        bool _isInvestmentTokenIncentivised\n', '    ) internal {\n', '        isInvestmentTokenIncentivised = _isInvestmentTokenIncentivised;\n', '    }\n', '\n', '    // ----------------- TOKEN CONVERSIONS -----------------\n', '\n', '    function _sellAAVEForWant(uint256 _amount) internal {\n', '        if (_amount == 0) {\n', '            return;\n', '        }\n', '\n', '        address[] memory path;\n', '\n', '        if (address(want) == address(WETH)) {\n', '            path = new address[](2);\n', '            path[0] = address(AAVE);\n', '            path[1] = address(want);\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = address(AAVE);\n', '            path[1] = address(WETH);\n', '            path[2] = address(want);\n', '        }\n', '\n', '        _checkAllowance(address(router), address(AAVE), _amount);\n', '\n', '        router.swapExactTokensForTokens(_amount, 0, path, address(this), now);\n', '    }\n', '\n', '    function _sellInvestmentForWant(uint256 _amount) internal {\n', '        if (_amount == 0) {\n', '            return;\n', '        }\n', '\n', '        // NOTE: 1:1\n', '        if (address(want) == address(investmentToken)) {\n', '            return;\n', '        }\n', '\n', '        address[] memory path;\n', '        if (\n', '            address(want) == address(WETH) ||\n', '            address(investmentToken) == address(WETH)\n', '        ) {\n', '            path = new address[](2);\n', '            path[0] = address(investmentToken);\n', '            path[1] = address(want);\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = address(investmentToken);\n', '            path[1] = address(WETH);\n', '            path[2] = address(want);\n', '        }\n', '\n', '        _checkAllowance(address(router), path[0], _amount);\n', '\n', '        router.swapExactTokensForTokens(_amount, 0, path, address(this), now);\n', '    }\n', '\n', '    function _buyInvestmentTokenWithWant(uint256 _amount) internal {\n', '        if (_amount == 0) {\n', '            return;\n', '        }\n', '\n', '        if (address(investmentToken) == address(want)) {\n', '            return;\n', '        }\n', '\n', '        address[] memory path;\n', '        if (\n', '            address(want) == address(WETH) ||\n', '            address(investmentToken) == address(WETH)\n', '        ) {\n', '            path = new address[](2);\n', '            path[0] = address(want);\n', '            path[1] = address(investmentToken);\n', '        } else {\n', '            path = new address[](3);\n', '            path[0] = address(want);\n', '            path[1] = address(WETH);\n', '            path[2] = address(investmentToken);\n', '        }\n', '        _checkAllowance(address(router), path[0], _amount);\n', '\n', '        router.swapTokensForExactTokens(\n', '            _amount,\n', '            type(uint256).max,\n', '            path,\n', '            address(this),\n', '            now\n', '        );\n', '    }\n', '\n', '    function _toETH(uint256 _amount, address asset)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (\n', '            _amount == 0 ||\n', '            _amount == type(uint256).max ||\n', '            address(asset) == address(WETH) // 1:1 change\n', '        ) {\n', '            return _amount;\n', '        }\n', '\n', '        return\n', '            _amount.mul(_priceOracle().getAssetPrice(asset)).div(\n', '                uint256(10)**uint256(IOptionalERC20(asset).decimals())\n', '            );\n', '    }\n', '\n', '    function _fromETH(uint256 _amount, address asset)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        if (\n', '            _amount == 0 ||\n', '            _amount == type(uint256).max ||\n', '            address(asset) == address(WETH) // 1:1 change\n', '        ) {\n', '            return _amount;\n', '        }\n', '\n', '        return\n', '            _amount\n', '                .mul(uint256(10)**uint256(IOptionalERC20(asset).decimals()))\n', '                .div(_priceOracle().getAssetPrice(asset));\n', '    }\n', '\n', '    // ----------------- INTERNAL SUPPORT GETTERS -----------------\n', '\n', '    function _lendingPool() internal view returns (ILendingPool lendingPool) {\n', '        lendingPool = ILendingPool(\n', '            protocolDataProvider.ADDRESSES_PROVIDER().getLendingPool()\n', '        );\n', '    }\n', '\n', '    function _priceOracle() internal view returns (IPriceOracle) {\n', '        return\n', '            IPriceOracle(\n', '                protocolDataProvider.ADDRESSES_PROVIDER().getPriceOracle()\n', '            );\n', '    }\n', '\n', '    function _incentivesController()\n', '        internal\n', '        view\n', '        returns (IAaveIncentivesController)\n', '    {\n', '        if (isWantIncentivised) {\n', '            return aToken.getIncentivesController();\n', '        } else if (isInvestmentTokenIncentivised) {\n', '            return variableDebtToken.getIncentivesController();\n', '        } else {\n', '            return IAaveIncentivesController(0);\n', '        }\n', '    }\n', '\n', '    function protectedTokens()\n', '        internal\n', '        view\n', '        override\n', '        returns (address[] memory)\n', '    {}\n', '}']