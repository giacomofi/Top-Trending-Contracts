['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-24\n', '*/\n', '\n', '// File: contracts/components/Owned.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/// @dev `Owned` is a base level contract that assigns an `owner` that can be\n', '///  later changed\n', 'contract Owned {\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /// @dev `owner` is the only address that can call a function with this\n', '    /// modifier\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Not owner");\n', '        _;\n', '    }\n', '\n', '    address public owner;\n', '\n', '    /// @notice The Constructor assigns the message sender to be `owner`\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    address public newOwner;\n', '\n', '    function transferOwner(address _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "New owner is the zero address");\n', '        emit OwnershipTransferred(owner, _newOwner);\n', '        owner = _newOwner;\n', '    }\n', '\n', '    /// @notice `owner` can step down and assign some other address to this role\n', '    /// @param _newOwner The address of the new owner. 0x0 can be used to create\n', '    ///  an unowned neutral vault, however that cannot be undone\n', '    function changeOwner(address _newOwner) public onlyOwner {\n', '        newOwner = _newOwner;\n', '    }\n', '\n', '    function acceptOwnership() public {\n', '        if (msg.sender == newOwner) {\n', '            owner = newOwner;\n', '        }\n', '    }\n', '\n', '    function renounceOwnership() public onlyOwner {\n', '        owner = address(0);\n', '    }\n', '}\n', '\n', '// File: contracts/components/Admin.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', 'contract Admin is Owned {\n', '    mapping(address => bool) public mapAdmin;\n', '\n', '    event AddAdmin(address admin);\n', '    event RemoveAdmin(address admin);\n', '\n', '    modifier onlyAdmin() {\n', '        require(mapAdmin[msg.sender], "not admin");\n', '        _;\n', '    }\n', '\n', '    function addAdmin(\n', '        address admin\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        mapAdmin[admin] = true;\n', '\n', '        emit AddAdmin(admin);\n', '    }\n', '\n', '    function removeAdmin(\n', '        address admin\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        delete mapAdmin[admin];\n', '\n', '        emit RemoveAdmin(admin);\n', '    }\n', '}\n', '\n', '// File: contracts/lib/BasicStorageLib.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', 'library BasicStorageLib {\n', '\n', '    struct UintData {\n', '        mapping(bytes => mapping(bytes => uint))           _storage;\n', '    }\n', '\n', '    struct BoolData {\n', '        mapping(bytes => mapping(bytes => bool))           _storage;\n', '    }\n', '\n', '    struct AddressData {\n', '        mapping(bytes => mapping(bytes => address))        _storage;\n', '    }\n', '\n', '    struct BytesData {\n', '        mapping(bytes => mapping(bytes => bytes))          _storage;\n', '    }\n', '\n', '    struct StringData {\n', '        mapping(bytes => mapping(bytes => string))         _storage;\n', '    }\n', '\n', '    /* uintStorage */\n', '\n', '    function setStorage(UintData storage self, bytes memory key, bytes memory innerKey, uint value) internal {\n', '        self._storage[key][innerKey] = value;\n', '    }\n', '\n', '    function getStorage(UintData storage self, bytes memory key, bytes memory innerKey) internal view returns (uint) {\n', '        return self._storage[key][innerKey];\n', '    }\n', '\n', '    function delStorage(UintData storage self, bytes memory key, bytes memory innerKey) internal {\n', '        delete self._storage[key][innerKey];\n', '    }\n', '\n', '    /* boolStorage */\n', '\n', '    function setStorage(BoolData storage self, bytes memory key, bytes memory innerKey, bool value) internal {\n', '        self._storage[key][innerKey] = value;\n', '    }\n', '\n', '    function getStorage(BoolData storage self, bytes memory key, bytes memory innerKey) internal view returns (bool) {\n', '        return self._storage[key][innerKey];\n', '    }\n', '\n', '    function delStorage(BoolData storage self, bytes memory key, bytes memory innerKey) internal {\n', '        delete self._storage[key][innerKey];\n', '    }\n', '\n', '    /* addressStorage */\n', '\n', '    function setStorage(AddressData storage self, bytes memory key, bytes memory innerKey, address value) internal {\n', '        self._storage[key][innerKey] = value;\n', '    }\n', '\n', '    function getStorage(AddressData storage self, bytes memory key, bytes memory innerKey) internal view returns (address) {\n', '        return self._storage[key][innerKey];\n', '    }\n', '\n', '    function delStorage(AddressData storage self, bytes memory key, bytes memory innerKey) internal {\n', '        delete self._storage[key][innerKey];\n', '    }\n', '\n', '    /* bytesStorage */\n', '\n', '    function setStorage(BytesData storage self, bytes memory key, bytes memory innerKey, bytes memory value) internal {\n', '        self._storage[key][innerKey] = value;\n', '    }\n', '\n', '    function getStorage(BytesData storage self, bytes memory key, bytes memory innerKey) internal view returns (bytes memory) {\n', '        return self._storage[key][innerKey];\n', '    }\n', '\n', '    function delStorage(BytesData storage self, bytes memory key, bytes memory innerKey) internal {\n', '        delete self._storage[key][innerKey];\n', '    }\n', '\n', '    /* stringStorage */\n', '\n', '    function setStorage(StringData storage self, bytes memory key, bytes memory innerKey, string memory value) internal {\n', '        self._storage[key][innerKey] = value;\n', '    }\n', '\n', '    function getStorage(StringData storage self, bytes memory key, bytes memory innerKey) internal view returns (string memory) {\n', '        return self._storage[key][innerKey];\n', '    }\n', '\n', '    function delStorage(StringData storage self, bytes memory key, bytes memory innerKey) internal {\n', '        delete self._storage[key][innerKey];\n', '    }\n', '\n', '}\n', '\n', '// File: contracts/components/BasicStorage.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '\n', 'contract BasicStorage {\n', '    /************************************************************\n', '     **\n', '     ** VARIABLES\n', '     **\n', '     ************************************************************/\n', '\n', '    //// basic variables\n', '    using BasicStorageLib for BasicStorageLib.UintData;\n', '    using BasicStorageLib for BasicStorageLib.BoolData;\n', '    using BasicStorageLib for BasicStorageLib.AddressData;\n', '    using BasicStorageLib for BasicStorageLib.BytesData;\n', '    using BasicStorageLib for BasicStorageLib.StringData;\n', '\n', '    BasicStorageLib.UintData    internal uintData;\n', '    BasicStorageLib.BoolData    internal boolData;\n', '    BasicStorageLib.AddressData internal addressData;\n', '    BasicStorageLib.BytesData   internal bytesData;\n', '    BasicStorageLib.StringData  internal stringData;\n', '}\n', '\n', '// File: contracts/tokenManager/TokenManagerStorage.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', 'contract TokenManagerStorage is BasicStorage {\n', '    /************************************************************\n', '     **\n', '     ** STRUCTURE DEFINATIONS\n', '     **\n', '     ************************************************************/\n', '\n', '    struct AncestorInfo {\n', '      bytes   account;\n', '      string  name;\n', '      string  symbol;\n', '      uint8   decimals;\n', '      uint    chainID;\n', '    }\n', '\n', '    struct TokenPairInfo {\n', '      AncestorInfo aInfo;               /// TODO:\n', '      uint      fromChainID;            /// index in coinType.txt; e.g. eth=60, etc=61, wan=5718350\n', '      bytes     fromAccount;            /// from address\n', '      uint      toChainID;              ///\n', '      bytes     toAccount;              /// to token address\n', '    }\n', '    \n', '    struct TokenPairInfoFull {\n', '      uint      id;\n', '      AncestorInfo aInfo;\n', '      uint      fromChainID;\n', '      bytes     fromAccount;\n', '      uint      toChainID;\n', '      bytes     toAccount;\n', '    }\n', '\n', '\n', '    /************************************************************\n', '     **\n', '     ** VARIABLES\n', '     **\n', '     ************************************************************/\n', '\n', '    /// total amount of TokenPair instance\n', '    uint public totalTokenPairs = 0;\n', '\n', '    /// a map from a sequence ID to token pair\n', '    mapping(uint => TokenPairInfo) public mapTokenPairInfo;\n', '    // index -> tokenPairId\n', '    mapping(uint => uint) public mapTokenPairIndex;\n', '}\n', '\n', '// File: contracts/components/WRC20Protocol.sol\n', '\n', 'pragma solidity 0.4.26;\n', '\n', 'contract WRC20Protocol {\n', '    /* This is a slight change to the ERC20 base standard.\n', '    function totalSupply() constant returns (uint supply);\n', '    is replaced with:\n', '    uint public totalSupply;\n', '    This automatically creates a getter function for the totalSupply.\n', '    This is moved to the base contract since public getter functions are not\n', '    currently recognised as an implementation of the matching abstract\n', '    function by the compiler.\n', '    */\n', '\n', '    /**************************************\n', '     **\n', '     ** VARIABLES\n', '     **\n', '     **************************************/\n', '\n', '    string public name;\n', '    string public symbol;\n', '    uint8 public decimals;\n', '    mapping (address => uint) balances;\n', '    mapping (address => mapping (address => uint)) allowed;\n', '\n', '    /// total amount of tokens\n', '    uint public totalSupply;\n', '\n', '    /// @param _owner The address from which the balance will be retrieved\n', '    /// @return The balance\n', '    function balanceOf(address _owner) public view returns (uint balance);\n', '\n', '    /// @notice send `_value` token to `_to` from `msg.sender`\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transfer(address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n', '    /// @param _from The address of the sender\n', '    /// @param _to The address of the recipient\n', '    /// @param _value The amount of token to be transferred\n', '    /// @return Whether the transfer was successful or not\n', '    function transferFrom(address _from, address _to, uint _value) public returns (bool success);\n', '\n', '    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @param _value The amount of tokens to be approved for transfer\n', '    /// @return Whether the approval was successful or not\n', '    function approve(address _spender, uint _value) public returns (bool success);\n', '\n', '    /// @param _owner The address of the account owning tokens\n', '    /// @param _spender The address of the account able to transfer the tokens\n', '    /// @return Amount of remaining tokens allowed to spent\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining);\n', '\n', '    event Transfer(address indexed _from, address indexed _to, uint _value);\n', '    event Approval(address indexed _owner, address indexed _spender, uint _value);\n', '}\n', '\n', '// File: contracts/lib/SafeMath.sol\n', '\n', 'pragma solidity ^0.4.24;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', 'library SafeMath {\n', '\n', '    /**\n', '    * @dev Multiplies two numbers, reverts on overflow.\n', '    */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath mul overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n', '    */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath div 0"); // Solidity only automatically asserts when dividing by 0\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n', '    */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath sub b > a");\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Adds two numbers, reverts on overflow.\n', '    */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath add overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n', '    * reverts when dividing by zero.\n', '    */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b != 0, "SafeMath mod 0");\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/components/StandardToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', 'contract StandardToken is WRC20Protocol {\n', '    using SafeMath for uint;\n', '\n', '    /**\n', '    * @dev Fix for the ERC20 short address attack.\n', '    */\n', '    modifier onlyPayloadSize(uint size) {\n', '        require(msg.data.length >= size + 4, "Payload size is incorrect");\n', '        _;\n', '    }\n', '\n', '    function transfer(address _to, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        balances[msg.sender] = balances[msg.sender].sub(_value);\n', '        balances[_to] = balances[_to].add(_value);\n', '        emit Transfer(msg.sender, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address _from, address _to, uint _value) public onlyPayloadSize(3 * 32) returns (bool success) {\n', '        balances[_to] = balances[_to].add(_value);\n', '        balances[_from] = balances[_from].sub(_value);\n', '        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n', '        emit Transfer(_from, _to, _value);\n', '        return true;\n', '    }\n', '\n', '    function balanceOf(address _owner) public view returns (uint balance) {\n', '        return balances[_owner];\n', '    }\n', '\n', '    function approve(address _spender, uint _value) public onlyPayloadSize(2 * 32) returns (bool success) {\n', '        //  To change the approve amount you first have to reduce the addresses`\n', '        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n', '        //  already 0 to mitigate the race condition described here:\n', '        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '        require((_value == 0) || (allowed[msg.sender][_spender] == 0), "Not permitted");\n', '\n', '        allowed[msg.sender][_spender] = _value;\n', '        emit Approval(msg.sender, _spender, _value);\n', '        return true;\n', '    }\n', '\n', '    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n', '      return allowed[_owner][_spender];\n', '    }\n', '}\n', '\n', '// File: contracts/tokenManager/MappingToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', '\n', 'contract MappingToken is StandardToken, Owned {\n', '    using SafeMath for uint;\n', '    /****************************************************************************\n', '     **\n', '     ** MODIFIERS\n', '     **\n', '     ****************************************************************************/\n', '    modifier onlyMeaningfulValue(uint value) {\n', '        require(value > 0, "Value is null");\n', '        _;\n', '    }\n', '\n', '    /****************************************************************************\n', '     **\n', '     ** EVENTS\n', '     **\n', '     ****************************************************************************/\n', '\n', '    ///@notice Initialize the TokenManager address\n', '    ///@dev Initialize the TokenManager address\n', '    ///@param tokenName The token name to be used\n', '    ///@param tokenSymbol The token symbol to be used\n', '    ///@param tokenDecimal The token decimals to be used\n', '    constructor(string tokenName, string tokenSymbol, uint8 tokenDecimal)\n', '        public\n', '    {\n', '        name = tokenName;\n', '        symbol = tokenSymbol;\n', '        decimals = tokenDecimal;\n', '    }\n', '\n', '    /****************************************************************************\n', '     **\n', '     ** MANIPULATIONS\n', '     **\n', '     ****************************************************************************/\n', '\n', '    /// @notice Create token\n', '    /// @dev Create token\n', '    /// @param account Address will receive token\n', '    /// @param value Amount of token to be minted\n', '    function mint(address account, uint value)\n', '        external\n', '        onlyOwner\n', '        onlyMeaningfulValue(value)\n', '    {\n', '        balances[account] = balances[account].add(value);\n', '        totalSupply = totalSupply.add(value);\n', '\n', '        emit Transfer(address(0), account, value);\n', '    }\n', '\n', '    /// @notice Burn token\n', '    /// @dev Burn token\n', '    /// @param account Address of whose token will be burnt\n', '    /// @param value Amount of token to be burnt\n', '    function burn(address account, uint value)\n', '        external\n', '        onlyOwner\n', '        onlyMeaningfulValue(value)\n', '    {\n', '        balances[account] = balances[account].sub(value);\n', '        totalSupply = totalSupply.sub(value);\n', '\n', '        emit Transfer(account, address(0), value);\n', '    }\n', '\n', '    /// @notice update token name, symbol\n', '    /// @dev update token name, symbol\n', '    /// @param _name token new name\n', '    /// @param _symbol token new symbol\n', '    function update(string _name, string _symbol)\n', '        external\n', '        onlyOwner\n', '    {\n', '        name = _name;\n', '        symbol = _symbol;\n', '    }\n', '}\n', '\n', '// File: contracts/tokenManager/IMappingToken.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity 0.4.26;\n', '\n', '\n', 'interface IMappingToken {\n', '    function changeOwner(address _newOwner) external;\n', '    function acceptOwnership() external;\n', '    function transferOwner(address) external;\n', '    function name() external view returns (string);\n', '    function symbol() external view returns (string);\n', '    function decimals() external view returns (uint8);\n', '    function mint(address, uint) external;\n', '    function burn(address, uint) external;\n', '    function update(string, string) external;\n', '}\n', '\n', '// File: contracts/tokenManager/TokenManagerDelegate.sol\n', '\n', '/*\n', '\n', '  Copyright 2019 Wanchain Foundation.\n', '\n', '  Licensed under the Apache License, Version 2.0 (the "License");\n', '  you may not use this file except in compliance with the License.\n', '  You may obtain a copy of the License at\n', '\n', '  http://www.apache.org/licenses/LICENSE-2.0\n', '\n', '  Unless required by applicable law or agreed to in writing, software\n', '  distributed under the License is distributed on an "AS IS" BASIS,\n', '  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n', '  See the License for the specific language governing permissions and\n', '  limitations under the License.\n', '\n', '*/\n', '\n', '//                            _           _           _\n', '//  __      ____ _ _ __   ___| |__   __ _(_)_ __   __| | _____   __\n', "//  \\ \\ /\\ / / _` | '_ \\ / __| '_ \\ / _` | | '_ \\@/ _` |/ _ \\ \\ / /\n", '//   \\ V  V / (_| | | | | (__| | | | (_| | | | | | (_| |  __/\\ V /\n', '//    \\_/\\_/ \\__,_|_| |_|\\___|_| |_|\\__,_|_|_| |_|\\__,_|\\___| \\_/\n', '//\n', '//\n', '\n', 'pragma solidity 0.4.26;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '/**\n', ' * Math operations with safety checks\n', ' */\n', '\n', '\n', '\n', '\n', '\n', 'contract TokenManagerDelegate is TokenManagerStorage, Admin {\n', '    using SafeMath for uint;\n', '    /************************************************************\n', '     **\n', '     ** EVENTS\n', '     **\n', '     ************************************************************/\n', '\n', '     event AddToken(address tokenAddress, string name, string symbol, uint8 decimals);\n', '     event AddTokenPair(uint indexed id, uint fromChainID, bytes fromAccount, uint toChainID, bytes toAccount);\n', '     event UpdateTokenPair(uint indexed id, AncestorInfo aInfo, uint fromChainID, bytes fromAccount, uint toChainID, bytes toAccount);\n', '     event RemoveTokenPair(uint indexed id);\n', '     event UpdateToken(address tokenAddress, string name, string symbol);\n', '\n', '    /**\n', '     *\n', '     * MODIFIERS\n', '     *\n', '     */\n', '\n', '    modifier onlyNotExistID(uint id) {\n', '        require(mapTokenPairInfo[id].fromChainID == 0, "token exist");\n', '        _;\n', '    }\n', '\n', '    modifier onlyExistID(uint id) {\n', '        require(mapTokenPairInfo[id].fromChainID > 0, "token not exist");\n', '        _;\n', '    }\n', '\n', '    /**\n', '    *\n', '    * MANIPULATIONS\n', '    *\n', '    */\n', '    \n', '    function bytesToAddress(bytes b) internal pure returns (address addr) {\n', '        assembly {\n', '            addr := mload(add(b,20))\n', '        }\n', '    }\n', '\n', '    function mintToken(\n', '        address tokenAddress,\n', '        address to,\n', '        uint    value\n', '    )\n', '        external\n', '        onlyAdmin\n', '    {\n', '        IMappingToken(tokenAddress).mint(to, value);\n', '    }\n', '\n', '    function burnToken(\n', '        address tokenAddress,\n', '        address from,\n', '        uint    value\n', '    )\n', '        external\n', '        onlyAdmin\n', '    {\n', '        IMappingToken(tokenAddress).burn(from, value);\n', '    }\n', '\n', '    function addToken(\n', '        string name,\n', '        string symbol,\n', '        uint8 decimals\n', '    )\n', '        external\n', '        onlyOwner\n', '    {\n', '        address tokenAddress = new MappingToken(name, symbol, decimals);\n', '        \n', '        emit AddToken(tokenAddress, name, symbol, decimals);\n', '    }\n', '\n', '    function addTokenPair(\n', '        uint    id,\n', '\n', '        AncestorInfo aInfo,\n', '\n', '        uint    fromChainID,\n', '        bytes   fromAccount,\n', '        uint    toChainID,\n', '        bytes   toAccount\n', '    )\n', '        public\n', '        onlyOwner\n', '        onlyNotExistID(id)\n', '    {\n', '        // create a new record\n', '        mapTokenPairInfo[id].fromChainID = fromChainID;\n', '        mapTokenPairInfo[id].fromAccount = fromAccount;\n', '        mapTokenPairInfo[id].toChainID = toChainID;\n', '        mapTokenPairInfo[id].toAccount = toAccount;\n', '\n', '        mapTokenPairInfo[id].aInfo.account = aInfo.account;\n', '        mapTokenPairInfo[id].aInfo.name = aInfo.name;\n', '        mapTokenPairInfo[id].aInfo.symbol = aInfo.symbol;\n', '        mapTokenPairInfo[id].aInfo.decimals = aInfo.decimals;\n', '        mapTokenPairInfo[id].aInfo.chainID = aInfo.chainID;\n', '\n', '        mapTokenPairIndex[totalTokenPairs] = id;\n', '        totalTokenPairs = totalTokenPairs.add(1);\n', '\n', '        // fire event\n', '        emit AddTokenPair(id, fromChainID, fromAccount, toChainID, toAccount);\n', '    }\n', '\n', '    function updateTokenPair(\n', '        uint    id,\n', '\n', '        AncestorInfo aInfo,\n', '\n', '        uint    fromChainID,\n', '        bytes   fromAccount,\n', '        uint    toChainID,\n', '        bytes   toAccount\n', '    )\n', '        public\n', '        onlyOwner\n', '        onlyExistID(id)\n', '    {\n', '        mapTokenPairInfo[id].aInfo.account = aInfo.account;\n', '        mapTokenPairInfo[id].aInfo.name = aInfo.name;\n', '        mapTokenPairInfo[id].aInfo.symbol = aInfo.symbol;\n', '        mapTokenPairInfo[id].aInfo.decimals = aInfo.decimals;\n', '        mapTokenPairInfo[id].aInfo.chainID = aInfo.chainID;\n', '\n', '        mapTokenPairInfo[id].fromChainID = fromChainID;\n', '        mapTokenPairInfo[id].fromAccount = fromAccount;\n', '        mapTokenPairInfo[id].toChainID = toChainID;\n', '        mapTokenPairInfo[id].toAccount = toAccount;\n', '\n', '        emit UpdateTokenPair(id, aInfo, fromChainID, fromAccount, toChainID, toAccount);\n', '    }\n', '\n', '    function removeTokenPair(\n', '        uint id\n', '    )\n', '        external\n', '        onlyOwner\n', '        onlyExistID(id)\n', '    {\n', '        for(uint i=0; i<totalTokenPairs; i++) {\n', '            if (id == mapTokenPairIndex[i]) {\n', '                if (i != totalTokenPairs - 1) {\n', '                    mapTokenPairIndex[i] = mapTokenPairIndex[totalTokenPairs - 1];\n', '                }\n', ' \n', '                delete mapTokenPairIndex[totalTokenPairs - 1];\n', '                totalTokenPairs--;\n', '                delete mapTokenPairInfo[id];\n', '                emit RemoveTokenPair(id);\n', '                return;\n', '            }\n', '        }\n', '    }\n', '\n', '    function updateToken(address tokenAddress, string name, string symbol)\n', '        external\n', '        onlyOwner\n', '    {\n', '        IMappingToken(tokenAddress).update(name, symbol);\n', '\n', '        emit UpdateToken(tokenAddress, name, symbol);\n', '    }\n', '\n', '    function changeTokenOwner(address tokenAddress, address _newOwner) external onlyOwner {\n', '        IMappingToken(tokenAddress).changeOwner(_newOwner);\n', '    }\n', '\n', '    function acceptTokenOwnership(address tokenAddress) external {\n', '        IMappingToken(tokenAddress).acceptOwnership();\n', '    }\n', '\n', '    function transferTokenOwner(address tokenAddress, address _newOwner) external onlyOwner {\n', '        IMappingToken(tokenAddress).transferOwner(_newOwner);\n', '    }\n', '\n', '    function getTokenPairInfo(\n', '        uint id\n', '    )\n', '        external\n', '        view\n', '        returns (uint fromChainID, bytes fromAccount, uint toChainID, bytes toAccount)\n', '    {\n', '        fromChainID = mapTokenPairInfo[id].fromChainID;\n', '        fromAccount = mapTokenPairInfo[id].fromAccount;\n', '        toChainID = mapTokenPairInfo[id].toChainID;\n', '        toAccount = mapTokenPairInfo[id].toAccount;\n', '    }\n', '\n', '    function getTokenPairInfoSlim(\n', '        uint id\n', '    )\n', '        external\n', '        view\n', '        returns (uint fromChainID, bytes fromAccount, uint toChainID)\n', '    {\n', '        fromChainID = mapTokenPairInfo[id].fromChainID;\n', '        fromAccount = mapTokenPairInfo[id].fromAccount;\n', '        toChainID = mapTokenPairInfo[id].toChainID;\n', '    }\n', '\n', '    function getTokenInfo(uint id) external view returns (address addr, string name, string symbol, uint8 decimals) {\n', '        if (mapTokenPairInfo[id].fromChainID == 0) {\n', "            name = '';\n", "            symbol = '';\n", '            decimals = 0;\n', '            addr = address(0);\n', '        } else {\n', '            address instance = bytesToAddress(mapTokenPairInfo[id].toAccount);\n', '            name = IMappingToken(instance).name();\n', '            symbol = IMappingToken(instance).symbol();\n', '            decimals = IMappingToken(instance).decimals();\n', '            addr = instance;\n', '        }\n', '    }\n', '\n', '    function getAncestorInfo(uint id) external view returns (bytes account, string name, string symbol, uint8 decimals, uint chainId) {\n', '        account = mapTokenPairInfo[id].aInfo.account;\n', '        name = mapTokenPairInfo[id].aInfo.name;\n', '        symbol = mapTokenPairInfo[id].aInfo.symbol;\n', '        decimals = mapTokenPairInfo[id].aInfo.decimals;\n', '        chainId = mapTokenPairInfo[id].aInfo.chainID;\n', '    }\n', '\n', '    function getAncestorSymbol(uint id) external view returns (string symbol, uint8 decimals) {\n', '        symbol = mapTokenPairInfo[id].aInfo.symbol;\n', '        decimals = mapTokenPairInfo[id].aInfo.decimals;\n', '    }\n', '\n', '    function getAncestorChainID(uint id) external view returns (uint chainID) {\n', '        chainID = mapTokenPairInfo[id].aInfo.chainID;\n', '    }\n', '\n', '    // function getTokenPairsFullFields()\n', '    //     external\n', '    //     view\n', '    //     returns (TokenPairInfoFull[] tokenPairs)\n', '    // {\n', '    //     tokenPairs = new TokenPairInfoFull[](totalTokenPairs);\n', '    //     for (uint i = 0; i < totalTokenPairs; i++) {\n', '    //         uint theId = mapTokenPairIndex[i];\n', '    //         tokenPairs[i].aInfo = mapTokenPairInfo[theId].aInfo;\n', '    //         tokenPairs[i].fromChainID = mapTokenPairInfo[theId].fromChainID;\n', '    //         tokenPairs[i].fromAccount = mapTokenPairInfo[theId].fromAccount;\n', '    //         tokenPairs[i].toChainID = mapTokenPairInfo[theId].toChainID;\n', '    //         tokenPairs[i].toAccount = mapTokenPairInfo[theId].toAccount;\n', '    //         tokenPairs[i].id = theId;\n', '    //     }\n', '    //     return tokenPairs;\n', '    // }\n', '\n', '    // function getTokenPairsByChainID2(uint chainID1, uint chainID2)\n', '    //     external\n', '    //     view\n', '    //     returns (TokenPairInfoFull[] tokenPairs)\n', '    // {\n', '    //     uint cnt = 0;\n', '    //     uint i = 0;\n', '    //     uint theId = 0;\n', '    //     uint[] memory id_valid = new uint[](totalTokenPairs);\n', '    //     for (; i < totalTokenPairs; i++ ) {\n', '    //         theId = mapTokenPairIndex[i];\n', '    //         if ((mapTokenPairInfo[theId].fromChainID == chainID1) && (mapTokenPairInfo[theId].toChainID == chainID2) ||\n', '    //         (mapTokenPairInfo[theId].toChainID == chainID1) && (mapTokenPairInfo[theId].fromChainID == chainID2)) {\n', '    //             id_valid[cnt] = theId;\n', '    //             cnt ++;\n', '    //         }\n', '    //     }\n', '\n', '    //     tokenPairs = new TokenPairInfoFull[](cnt);\n', '    //     for (i = 0; i < cnt; i++) {\n', '    //         theId = id_valid[i];\n', '    //         tokenPairs[i].aInfo = mapTokenPairInfo[theId].aInfo;\n', '    //         tokenPairs[i].fromChainID = mapTokenPairInfo[theId].fromChainID;\n', '    //         tokenPairs[i].fromAccount = mapTokenPairInfo[theId].fromAccount;\n', '    //         tokenPairs[i].toChainID = mapTokenPairInfo[theId].toChainID;\n', '    //         tokenPairs[i].toAccount = mapTokenPairInfo[theId].toAccount;\n', '    //         tokenPairs[i].id = theId;\n', '    //     }\n', '    // }\n', '\n', '    function getTokenPairs()\n', '        external\n', '        view\n', '        returns (uint[] id, uint[] fromChainID, bytes[] fromAccount, uint[] toChainID, bytes[] toAccount,\n', '          string[] ancestorSymbol, uint8[] ancestorDecimals, bytes[] ancestorAccount, string[] ancestorName, uint[] ancestorChainID)\n', '    {\n', '        uint cnt = totalTokenPairs;\n', '        uint theId = 0;\n', '        uint i = 0;\n', '\n', '        id = new uint[](cnt);\n', '        fromChainID = new uint[](cnt);\n', '        fromAccount = new bytes[](cnt);\n', '        toChainID = new uint[](cnt);\n', '        toAccount = new bytes[](cnt);\n', '\n', '        ancestorSymbol = new string[](cnt);\n', '        ancestorDecimals = new uint8[](cnt);\n', '\n', '        ancestorAccount = new bytes[](cnt);\n', '        ancestorName = new string[](cnt);\n', '        ancestorChainID = new uint[](cnt);\n', '\n', '        i = 0;\n', '        theId = 0;\n', '        uint j = 0;\n', '        for (; j < totalTokenPairs; j++) {\n', '            theId = mapTokenPairIndex[j];\n', '            id[i] = theId;\n', '            fromChainID[i] = mapTokenPairInfo[theId].fromChainID;\n', '            fromAccount[i] = mapTokenPairInfo[theId].fromAccount;\n', '            toChainID[i] = mapTokenPairInfo[theId].toChainID;\n', '            toAccount[i] = mapTokenPairInfo[theId].toAccount;\n', '\n', '            ancestorSymbol[i] = mapTokenPairInfo[theId].aInfo.symbol;\n', '            ancestorDecimals[i] = mapTokenPairInfo[theId].aInfo.decimals;\n', '\n', '            ancestorAccount[i] = mapTokenPairInfo[theId].aInfo.account;\n', '            ancestorName[i] = mapTokenPairInfo[theId].aInfo.name;\n', '            ancestorChainID[i] = mapTokenPairInfo[theId].aInfo.chainID;\n', '            i ++;\n', '        }\n', '    }\n', '\n', '    function getTokenPairsByChainID(uint chainID1, uint chainID2)\n', '        external\n', '        view\n', '        returns (uint[] id, uint[] fromChainID, bytes[] fromAccount, uint[] toChainID, bytes[] toAccount,\n', '          string[] ancestorSymbol, uint8[] ancestorDecimals, bytes[] ancestorAccount, string[] ancestorName, uint[] ancestorChainID)\n', '    {\n', '        uint cnt = 0;\n', '        uint i = 0;\n', '        uint theId = 0;\n', '        uint[] memory id_valid = new uint[](totalTokenPairs);\n', '        for (; i < totalTokenPairs; i++ ) {\n', '            theId = mapTokenPairIndex[i];\n', '            if ((mapTokenPairInfo[theId].fromChainID == chainID1) && (mapTokenPairInfo[theId].toChainID == chainID2) ||\n', '            (mapTokenPairInfo[theId].toChainID == chainID1) && (mapTokenPairInfo[theId].fromChainID == chainID2)) {\n', '                id_valid[cnt] = theId;\n', '                cnt ++;\n', '            }\n', '        }\n', '\n', '        id = new uint[](cnt);\n', '        fromChainID = new uint[](cnt);\n', '        fromAccount = new bytes[](cnt);\n', '        toChainID = new uint[](cnt);\n', '        toAccount = new bytes[](cnt);\n', '\n', '        ancestorSymbol = new string[](cnt);\n', '        ancestorDecimals = new uint8[](cnt);\n', '\n', '        ancestorAccount = new bytes[](cnt);\n', '        ancestorName = new string[](cnt);\n', '        ancestorChainID = new uint[](cnt);\n', '\n', '        for (i = 0; i < cnt; i++) {\n', '            theId = id_valid[i];\n', '\n', '            id[i] = theId;\n', '            fromChainID[i] = mapTokenPairInfo[theId].fromChainID;\n', '            fromAccount[i] = mapTokenPairInfo[theId].fromAccount;\n', '            toChainID[i] = mapTokenPairInfo[theId].toChainID;\n', '            toAccount[i] = mapTokenPairInfo[theId].toAccount;\n', '\n', '            ancestorSymbol[i] = mapTokenPairInfo[theId].aInfo.symbol;\n', '            ancestorDecimals[i] = mapTokenPairInfo[theId].aInfo.decimals;\n', '            \n', '            ancestorAccount[i] = mapTokenPairInfo[theId].aInfo.account;\n', '            ancestorName[i] = mapTokenPairInfo[theId].aInfo.name;\n', '            ancestorChainID[i] = mapTokenPairInfo[theId].aInfo.chainID;\n', '        }\n', '    }\n', '}']