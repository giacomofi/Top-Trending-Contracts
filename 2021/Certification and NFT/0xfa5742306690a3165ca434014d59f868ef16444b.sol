['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-23\n', '*/\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '//Mutability and Visibility of some functions has been altered.\n', '\n', '/// @title ERC-721 Non-Fungible Token Standard\n', '/// @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md\n', '///  Note: the ERC-165 identifier for this interface is 0x6466353c\n', 'interface ERC721 /* is ERC165 */ {\n', '    /// @dev This emits when ownership of any NFT changes by any mechanism.\n', '    ///  This event emits when NFTs are created (`from` == 0) and destroyed\n', '    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\n', '    ///  may be created and assigned without emitting Transfer. At the time of\n', '    ///  any transfer, the approved address for that NFT (if any) is reset to none.\n', '    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);\n', '\n', '    /// @dev This emits when the approved address for an NFT is changed or\n', '    ///  reaffirmed. The zero address indicates there is no approved address.\n', '    ///  When a Transfer event emits, this also indicates that the approved\n', '    ///  address for that NFT (if any) is reset to none.\n', '    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);\n', '\n', '    /// @dev This emits when an operator is enabled or disabled for an owner.\n', '    ///  The operator can manage all NFTs of the owner.\n', '    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\n', '\n', '    /// @notice Count all NFTs assigned to an owner\n', '    /// @dev NFTs assigned to the zero address are considered invalid, and this\n', '    ///  function throws for queries about the zero address.\n', '    /// @param _owner An address for whom to query the balance\n', '    /// @return The number of NFTs owned by `_owner`, possibly zero\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    /// @notice Find the owner of an NFT\n', '    /// @param _tokenId The identifier for an NFT\n', '    /// @dev NFTs assigned to zero address are considered invalid, and queries\n', '    ///  about them do throw.\n', '    /// @return The address of the owner of the NFT\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '\n', '    /// @notice Transfers the ownership of an NFT from one address to another address\n', '    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '    ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '    ///  `_tokenId` is not a valid NFT. When transfer is complete, this function\n', '    ///  checks if `_to` is a smart contract (code size > 0). If so, it calls\n', '    ///  `onERC721Received` on `_to` and throws if the return value is not\n', '    ///  `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '    /// @param data Additional data with no specified format, sent in call to `_to`\n', '\n', '    // Changed mutability to implicit non-payable\n', '    // Changed visibility to public\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata data) external;\n', '\n', '    /// @notice Transfers the ownership of an NFT from one address to another address\n', '    /// @dev This works identically to the other function with an extra data parameter,\n', '    ///  except this function just sets data to ""\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '\n', '    // Changed mutability to implicit non-payable\n', '    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    /// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\n', '    ///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\n', '    ///  THEY MAY BE PERMANENTLY LOST\n', '    /// @dev Throws unless `msg.sender` is the current owner, an authorized\n', '    ///  operator, or the approved address for this NFT. Throws if `_from` is\n', '    ///  not the current owner. Throws if `_to` is the zero address. Throws if\n', '    ///  `_tokenId` is not a valid NFT.\n', '    /// @param _from The current owner of the NFT\n', '    /// @param _to The new owner\n', '    /// @param _tokenId The NFT to transfer\n', '\n', '    // Changed mutability to implicit non-payable\n', '    // Changed visibility to public\n', '    function transferFrom(address _from, address _to, uint256 _tokenId) external;\n', '\n', '    /// @notice Set or reaffirm the approved address for an NFT\n', '    /// @dev The zero address indicates there is no approved address.\n', '    /// @dev Throws unless `msg.sender` is the current NFT owner, or an authorized\n', '    ///  operator of the current owner.\n', '    /// @param _approved The new approved NFT controller\n', '    /// @param _tokenId The NFT to approve\n', '\n', '    // Changed mutability to implicit non-payable\n', '    function approve(address _approved, uint256 _tokenId) external;\n', '\n', '    /// @notice Enable or disable approval for a third party ("operator") to manage\n', '    ///  all your assets.\n', '    /// @dev Throws unless `msg.sender` is the current NFT owner.\n', '    /// @dev Emits the ApprovalForAll event\n', '    /// @param _operator Address to add to the set of authorized operators.\n', '    /// @param _approved True if the operators is approved, false to revoke approval\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '\n', '    /// @notice Get the approved address for a single NFT\n', '    /// @dev Throws if `_tokenId` is not a valid NFT\n', '    /// @param _tokenId The NFT to find the approved address for\n', '    /// @return The approved address for this NFT, or the zero address if there is none\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '\n', '    /// @notice Query if an address is an authorized operator for another address\n', '    /// @param _owner The address that owns the NFTs\n', '    /// @param _operator The address that acts on behalf of the owner\n', '    /// @return True if `_operator` is an approved operator for `_owner`, false otherwise\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/Math.sol\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot overflow.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '\n', 'interface INFTGovernance {\n', '    function getListingActiveDelay() external view returns (uint256);\n', '    function getBuyBonusResidual() external view returns (uint256);\n', '    function getMarketFee() external view returns (uint256);\n', '    function getAbsoluteMinPrice() external view returns (uint256);\n', '    function getMinPrice() external view returns (uint256);\n', '    function getMaxPrice() external view returns (uint256);\n', '    function getTokensForPrice(uint256 price) external view returns (uint256);\n', '    function getApproved(uint256 _tokenId) external view returns (address);\n', '    function ownerOf(uint256 _tokenId) external view returns (address);\n', '    function getNftAddress(uint256 _tokenId) external view returns (address);\n', '}\n', '\n', 'contract NFTGovernance is INFTGovernance {\n', '    using SafeMath for uint256;\n', '\n', '    modifier onlyOwner() {\n', '        require(msg.sender == owner, "Owner required");\n', '        _;\n', '    }\n', '    \n', '    modifier unlocked(uint256 index) {\n', '        require(!isTimelockActivated || block.number > unlockTimes[index], "Locked");\n', '        _;\n', '    }\n', '    \n', '    modifier timelockUnlocked() {\n', '        require(!isTimelockActivated || block.number > timelockLengthUnlockTime, "Timelock variable Locked");\n', '        _;\n', '    }\n', '    \n', '    bool public isTimelockActivated = false;\n', '\n', '    address public nftAddress;\n', '    address public owner;\n', '\n', '    uint256 constant DEFAULT_TIMELOCK_LENGTH = 44800; // length in blocks ~7 days;\n', '\n', '    uint256 constant MARKET_FEE_INDEX = 0;\n', '    uint256 constant MIN_PRICE_INDEX = 1;\n', '    uint256 constant MAX_PRICE_INDEX = 2;\n', '    uint256 constant TARGET_PRICE_INDEX = 3;\n', '    uint256 constant BUY_BONUS_RESIDUAL_INDEX = 4;\n', '    uint256 constant LISTING_DELAY_INDEX = 5;\n', '    uint256 constant ABSOLUTE_MIN_PRICE_INDEX = 6;\n', '    \n', '    uint256 public timelockLengthUnlockTime = 0;\n', '    uint256 public timelockLength = DEFAULT_TIMELOCK_LENGTH;\n', '    uint256 public nextTimelockLength = DEFAULT_TIMELOCK_LENGTH;\n', '    \n', '\n', '    mapping(uint256 => uint256) public pendingValues;\n', '    mapping(uint256 => uint256) public values;\n', '    mapping(uint256 => uint256) public unlockTimes;\n', '\n', '    constructor (\n', '        uint256 marketFeeFactor, \n', '        uint256 minPrice, \n', '        uint256 maxPrice, \n', '        uint256 targetPrice, \n', '        uint256 buyBonusResidual, \n', '        uint256 listingActiveDelay, \n', '        uint256 absoluteMinPrice, \n', '        address _nftAddress\n', '    ) public {\n', '        values[MARKET_FEE_INDEX] = marketFeeFactor;\n', '        values[MIN_PRICE_INDEX] = minPrice;\n', '        values[MAX_PRICE_INDEX] = maxPrice;\n', '        values[TARGET_PRICE_INDEX] = targetPrice;\n', '        values[BUY_BONUS_RESIDUAL_INDEX] = buyBonusResidual;\n', '        values[LISTING_DELAY_INDEX] = listingActiveDelay;\n', '        values[ABSOLUTE_MIN_PRICE_INDEX] = absoluteMinPrice;\n', '        \n', '        nftAddress = _nftAddress;\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function activateTimelock() external onlyOwner {\n', '        isTimelockActivated = true;\n', '    }\n', '\n', '    function setPendingValue(uint256 index, uint256 value) external onlyOwner {\n', '        pendingValues[index] = value;\n', '        unlockTimes[index] = timelockLength.add(block.number);\n', '    }\n', '\n', '    function certifyPendingValue(uint256 index) external onlyOwner unlocked(index) {\n', '        values[index] = pendingValues[index];\n', '        unlockTimes[index] = 0;\n', '    }\n', '\n', '    function proposeNextTimelockLength(uint256 value) public onlyOwner {\n', '        nextTimelockLength = value;\n', '        timelockLengthUnlockTime = block.number.add(timelockLength);\n', '    }\n', '\n', '    function certifyNextTimelockLength() public onlyOwner timelockUnlocked() {\n', '        timelockLength = nextTimelockLength;\n', '        timelockLengthUnlockTime = 0;\n', '    }\n', '    \n', '    function getMarketFee() public view returns (uint256) {\n', '        return values[MARKET_FEE_INDEX];\n', '    }\n', '\n', '    function getMinPrice() public view returns (uint256) {\n', '        return values[MIN_PRICE_INDEX];    \n', '    }\n', '\n', '    function getMaxPrice() public view returns (uint256) {\n', '        return values[MAX_PRICE_INDEX];    \n', '    }\n', '\n', '    function getTargetPrice() public view returns (uint256) {\n', '        return values[TARGET_PRICE_INDEX];    \n', '    }\n', '    \n', '    function getBuyBonusResidual() public view returns (uint256) {\n', '        return values[BUY_BONUS_RESIDUAL_INDEX];    \n', '    }\n', '    \n', '    function getListingActiveDelay() public view returns (uint256) {\n', '        return values[LISTING_DELAY_INDEX];    \n', '    }    \n', '\n', '    function getAbsoluteMinPrice() public view returns (uint256) {\n', '        return values[ABSOLUTE_MIN_PRICE_INDEX];    \n', '    }\n', '    \n', '    function getTokensForPrice(uint256 price) external view returns (uint256) {\n', '        uint256 max = getMaxPrice();\n', '        uint256 min = getMinPrice();\n', '        uint256 target = getTargetPrice();\n', '\n', '        uint256 startRange = target.div(min);\n', '        uint256 endRange = max.div(target);\n', '        \n', '        uint256 effectivePrice = price;\n', '        if (price < min) {\n', '            effectivePrice = min;\n', '        } else if (price > max) {\n', '            effectivePrice = max;\n', '        }\n', '        \n', '        uint256 tokens = 0;\n', '        if (effectivePrice < target) {\n', '            tokens = target.sub(effectivePrice).mul(startRange);\n', '        } else {\n', '            tokens = max.sub(effectivePrice).div(endRange);\n', '        }\n', '        \n', '        return tokens;\n', '    }\n', '    \n', '    function getApproved(uint256 _tokenId) external view returns (address) {\n', '        ERC721 token = ERC721(nftAddress);\n', '        return token.getApproved(_tokenId);\n', '    }\n', '    \n', '    function ownerOf(uint256 _tokenId) external view returns (address) {\n', '        ERC721 token = ERC721(nftAddress);\n', '        return token.ownerOf(_tokenId);\n', '    }\n', '    \n', '    function getNftAddress(uint256 _tokenId) external view returns (address) {\n', '        return nftAddress;\n', '    }\n', '}']