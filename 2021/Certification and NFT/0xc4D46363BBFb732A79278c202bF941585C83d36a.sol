['pragma solidity 0.7.3;\n', '\n', 'contract Storage {\n', '\n', '  address public governance;\n', '  address public controller;\n', '  address[] public underlyings;\n', '  address public mainUnderlying;\n', '  mapping (address => bool) public underlyingEnabled;\n', '  mapping (address => address[]) public mainUnderlyingRoutes;\n', '  address public usdc = 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n', '  address public usdt = 0xdAC17F958D2ee523a2206206994597C13D831ec7;\n', '  address public dai = 0x6B175474E89094C44Da98b954EedeAC495271d0F;\n', '  address public routerAddress = 0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F; // sushi router\n', '\n', '  constructor() public {\n', '    governance = msg.sender;\n', '    addUnderlying(usdc);\n', '    addUnderlying(usdt);\n', '    addUnderlying(dai);\n', '    mainUnderlying = dai;\n', '    mainUnderlyingRoutes[usdc] = [usdc, dai];\n', '    mainUnderlyingRoutes[usdt] = [usdt, dai];\n', '  }\n', '\n', '  modifier onlyGovernance() {\n', '    require(isGovernance(msg.sender), "Not governance");\n', '    _;\n', '  }\n', '\n', '  function setGovernance(address _governance) public onlyGovernance {\n', '    require(_governance != address(0), "new governance shouldn\'t be empty");\n', '    governance = _governance;\n', '  }\n', '\n', '  function setController(address _controller) public onlyGovernance {\n', '    require(_controller != address(0), "new controller shouldn\'t be empty");\n', '    controller = _controller;\n', '  }\n', '\n', '  function isGovernance(address account) public view returns (bool) {\n', '    return account == governance;\n', '  }\n', '\n', '  function isController(address account) public view returns (bool) {\n', '    return account == controller;\n', '  }\n', '\n', '  function addUnderlying(address _underlying) public onlyGovernance {\n', '    require(_underlying != address(0), "_underlying must be defined");\n', '    underlyings.push(_underlying);\n', '    underlyingEnabled[_underlying] = true;\n', '  }\n', '\n', '  function enableUnderlying(address _underlying) public onlyGovernance {\n', '    require(_underlying != address(0), "_underlying must be defined");\n', '    underlyingEnabled[_underlying] = true;\n', '  }\n', '\n', '  function disableUnderlying(address _underlying) public onlyGovernance {\n', '    require(_underlying != address(0), "_underlying must be defined");\n', '    underlyingEnabled[_underlying] = false;\n', '  }\n', '\n', '  function setMainUnderlyingRoute(address _underlying, address[] memory route) public onlyGovernance {\n', '    require(_underlying != address(0), "_underlying must be defined");\n', '    mainUnderlyingRoutes[_underlying] = route;\n', '  }\n', '\n', '  function setMainUnderlying(address _underlying) public onlyGovernance {\n', '    require(_underlying != address(0), "_underlying must be defined");\n', '    mainUnderlying = _underlying;\n', '  }\n', '\n', '  function setRouter(address _router) public onlyGovernance {\n', '    require(_router != address(0), "_router must be defined");\n', '    routerAddress = _router;\n', '  }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']