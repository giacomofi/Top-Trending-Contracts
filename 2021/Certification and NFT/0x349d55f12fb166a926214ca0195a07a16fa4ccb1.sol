['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-03\n', '*/\n', '\n', '// File: contracts/abstract/Context.sol\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: contracts/abstract/Pausable.sol\n', '\n', '// File: @openzeppelin/contracts/utils/Pausable.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', ' \n', 'abstract contract Pausable is Context {\n', '\n', '     bool private _paused;\n', '\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);   \n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    constructor ()  {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view virtual returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!paused(), "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(paused(), "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '}\n', '\n', '// File: contracts/abstract/Ownable.sol\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', ' abstract contract Ownable is Pausable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor(address ownerAddress)  {\n', '        _owner = ownerAddress;\n', '        emit OwnershipTransferred(address(0), _owner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() external onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) external virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', '            "Ownable: new owner is the zero address"\n', '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/library/SafeMath.sol\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IERC20.sol\n', '\n', '// File: \\@openzeppelin\\contracts\\token\\ERC20\\IERC20.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File: contracts/Admin.sol\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '// File: contracts/Admin.sol\n', '\n', '\n', 'abstract contract Admin is Ownable {\n', '    struct tokenInfo {\n', '        bool isExist;\n', '        uint8 decimal;\n', '        uint256 userMinStake;\n', '        uint256 userMaxStake;\n', '        uint256 totalMaxStake;\n', '        uint256 lockableDays;\n', '        bool optionableStatus;\n', '    }\n', '\n', '    using SafeMath for uint256;\n', '    address[] public tokens;\n', '    mapping(address => address[]) public tokensSequenceList;\n', '    mapping(address => tokenInfo) public tokenDetails;\n', '    mapping(address => mapping(address => uint256)) public tokenDailyDistribution;\n', '    mapping(address => mapping(address => bool)) public tokenBlockedStatus;\n', '    uint256[] public intervalDays = [1, 8, 15, 22, 29, 36];\n', '    uint256 public constant DAYS = 1 days;\n', '    uint256 public constant HOURS = 1 hours;\n', '    uint256 public stakeDuration;\n', '    uint256 public refPercentage;\n', '    uint256 public optionableBenefit;\n', '\n', '    event TokenDetails(\n', '        address indexed tokenAddress,\n', '        uint256 userMinStake,\n', '        uint256 userMaxStake,\n', '        uint256 totalMaxStake,\n', '        uint256 updatedTime\n', '    );\n', '    \n', '    event LockableTokenDetails(\n', '        address indexed tokenAddress,\n', '        uint256 lockableDys,\n', '        bool optionalbleStatus,\n', '        uint256 updatedTime\n', '    );\n', '    \n', '    event DailyDistributionDetails(\n', '        address indexed stakedTokenAddress,\n', '        address indexed rewardTokenAddress,\n', '        uint256 rewards,\n', '        uint256 time\n', '    );\n', '    \n', '    event SequenceDetails(\n', '        address indexed stakedTokenAddress,\n', '        address []  rewardTokenSequence,\n', '        uint256 time\n', '    );\n', '    \n', '    event StakeDurationDetails(\n', '        uint256 updatedDuration,\n', '        uint256 time\n', '    );\n', '    \n', '    event OptionableBenefitDetails(\n', '        uint256 updatedBenefit,\n', '        uint256 time\n', '    );\n', '    \n', '    event ReferrerPercentageDetails(\n', '        uint256 updatedRefPercentage,\n', '        uint256 time\n', '    );\n', '    \n', '    event IntervalDaysDetails(\n', '        uint256[] updatedIntervals,\n', '        uint256 time\n', '    );\n', '    \n', '    event BlockedDetails(\n', '        address indexed stakedTokenAddress,\n', '        address indexed rewardTokenAddress,\n', '        bool blockedStatus,\n', '        uint256 time\n', '    );\n', '    \n', '    event WithdrawDetails(\n', '        address indexed tokenAddress,\n', '        uint256 withdrawalAmount,\n', '        uint256 time\n', '    );\n', '\n', '\n', '    constructor(address _owner) Ownable(_owner) {\n', '        stakeDuration = 90 days;\n', '        optionableBenefit = 2;\n', '    }\n', '\n', '    function addToken(\n', '        address tokenAddress,\n', '        uint256 userMinStake,\n', '        uint256 userMaxStake,\n', '        uint256 totalStake,\n', '        uint8 decimal\n', '    ) public onlyOwner returns (bool) {\n', '        if (!(tokenDetails[tokenAddress].isExist))\n', '            tokens.push(tokenAddress);\n', '\n', '        tokenDetails[tokenAddress].isExist = true;\n', '        tokenDetails[tokenAddress].decimal = decimal;\n', '        tokenDetails[tokenAddress].userMinStake = userMinStake;\n', '        tokenDetails[tokenAddress].userMaxStake = userMaxStake;\n', '        tokenDetails[tokenAddress].totalMaxStake = totalStake;\n', '\n', '        emit TokenDetails(\n', '            tokenAddress,\n', '            userMinStake,\n', '            userMaxStake,\n', '            totalStake,\n', '            block.timestamp\n', '        );\n', '        return true;\n', '    }\n', '\n', '    function setDailyDistribution(\n', '        address[] memory stakedToken,\n', '        address[] memory rewardToken,\n', '        uint256[] memory dailyDistribution\n', '    ) public onlyOwner {\n', '        require(\n', '            stakedToken.length == rewardToken.length &&\n', '                rewardToken.length == dailyDistribution.length,\n', '            "Invalid Input"\n', '        );\n', '\n', '        for (uint8 i = 0; i < stakedToken.length; i++) {\n', '            require(\n', '                tokenDetails[stakedToken[i]].isExist &&\n', '                    tokenDetails[rewardToken[i]].isExist,\n', '                "Token not exist"\n', '            );\n', '            tokenDailyDistribution[stakedToken[i]][\n', '                rewardToken[i]\n', '            ] = dailyDistribution[i];\n', '            \n', '            emit DailyDistributionDetails(\n', '                stakedToken[i],\n', '                rewardToken[i],\n', '                dailyDistribution[i],\n', '                block.timestamp\n', '            );\n', '        }\n', '        \n', '        \n', '    }\n', '\n', '    function updateSequence(\n', '        address stakedToken,\n', '        address[] memory rewardTokenSequence\n', '    ) public onlyOwner {\n', '        tokensSequenceList[stakedToken] = new address[](0);\n', '        require(\n', '            tokenDetails[stakedToken].isExist,\n', '            "Staked Token Not Exist"\n', '        );\n', '        for (uint8 i = 0; i < rewardTokenSequence.length; i++) {\n', '            require(\n', '                rewardTokenSequence.length <= tokens.length,\n', '                "Invalid Input"\n', '            );\n', '            require(\n', '                tokenDetails[rewardTokenSequence[i]].isExist,\n', '                "Reward Token Not Exist"\n', '            );\n', '            tokensSequenceList[stakedToken].push(rewardTokenSequence[i]);\n', '        }\n', '        \n', '        emit SequenceDetails(\n', '            stakedToken,\n', '            tokensSequenceList[stakedToken],\n', '            block.timestamp\n', '        );\n', '        \n', '        \n', '    }\n', '\n', '    function updateToken(\n', '        address tokenAddress,\n', '        uint256 userMinStake,\n', '        uint256 userMaxStake,\n', '        uint256 totalStake\n', '    ) public onlyOwner {\n', '        require(tokenDetails[tokenAddress].isExist, "Token Not Exist");\n', '        tokenDetails[tokenAddress].userMinStake = userMinStake;\n', '        tokenDetails[tokenAddress].userMaxStake = userMaxStake;\n', '        tokenDetails[tokenAddress].totalMaxStake = totalStake;\n', '\n', '        emit TokenDetails(\n', '            tokenAddress,\n', '            userMinStake,\n', '            userMaxStake,\n', '            totalStake,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function lockableToken(\n', '        address tokenAddress,\n', '        uint8 lockableStatus,\n', '        uint256 lockedDays,\n', '        bool optionableStatus\n', '    ) public onlyOwner {\n', '        require(\n', '            lockableStatus == 1 || lockableStatus == 2 || lockableStatus == 3,\n', '            "Invalid Lockable Status"\n', '        );\n', '        require(tokenDetails[tokenAddress].isExist == true, "Token Not Exist");\n', '\n', '        if (lockableStatus == 1) {\n', '            tokenDetails[tokenAddress].lockableDays = block.timestamp.add(\n', '                lockedDays\n', '            );\n', '        } else if (lockableStatus == 2)\n', '            tokenDetails[tokenAddress].lockableDays = 0;\n', '        else if (lockableStatus == 3)\n', '            tokenDetails[tokenAddress].optionableStatus = optionableStatus;\n', '            \n', '            \n', '        emit LockableTokenDetails (\n', '            tokenAddress,\n', '            tokenDetails[tokenAddress].lockableDays,\n', '            tokenDetails[tokenAddress].optionableStatus,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function updateStakeDuration(uint256 durationTime) public onlyOwner {\n', '        stakeDuration = durationTime;\n', '        \n', '        emit StakeDurationDetails(\n', '            stakeDuration,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function updateOptionableBenefit(uint256 benefit) public onlyOwner {\n', '        optionableBenefit = benefit;\n', '        \n', '        emit OptionableBenefitDetails(\n', '            optionableBenefit,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function updateRefPercentage(uint256 refPer) public onlyOwner {\n', '        refPercentage = refPer;\n', '        \n', '        emit ReferrerPercentageDetails(\n', '            refPercentage,\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function updateIntervalDays(uint256[] memory _interval) public onlyOwner {\n', '        intervalDays = new uint256[](0);\n', '\n', '        for (uint8 i = 0; i < _interval.length; i++) {\n', '            uint256 noD = stakeDuration.div(DAYS);\n', '            require(noD > _interval[i], "Invalid Interval Day");\n', '            intervalDays.push(_interval[i]);\n', '        }\n', '        \n', '        emit IntervalDaysDetails(\n', '            intervalDays,\n', '            block.timestamp\n', '        );\n', '        \n', '        \n', '    }\n', '\n', '    function changeTokenBlockedStatus(\n', '        address stakedToken,\n', '        address rewardToken,\n', '        bool status\n', '    ) public onlyOwner {\n', '        require(\n', '            tokenDetails[stakedToken].isExist &&\n', '                tokenDetails[rewardToken].isExist,\n', '            "Token not exist"\n', '        );\n', '        tokenBlockedStatus[stakedToken][rewardToken] = status;\n', '        \n', '        \n', '        emit BlockedDetails(\n', '            stakedToken,\n', '            rewardToken,\n', '            tokenBlockedStatus[stakedToken][rewardToken],\n', '            block.timestamp\n', '        );\n', '    }\n', '\n', '    function safeWithdraw(address tokenAddress, uint256 amount)\n', '        public\n', '        onlyOwner\n', '    {\n', '        require(\n', '            IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '            "Insufficient Balance"\n', '        );\n', '        require(\n', '            IERC20(tokenAddress).transfer(owner(), amount),\n', '            "Transfer failed"\n', '        );\n', '        \n', '        \n', '        emit WithdrawDetails(\n', '            tokenAddress,\n', '            amount,\n', '            block.timestamp\n', '        );\n', '    }\n', '    \n', '    function viewTokensCount() external view returns(uint256) {\n', '        return tokens.length;\n', '    }\n', '}\n', '\n', '// File: contracts/Unifarm.sol\n', '\n', '// File: contracts/Unifarm.sol\n', '\n', '\n', 'pragma solidity ^0.7.0;\n', '\n', '\n', '/**\n', ' * @title Unifarm Contract\n', ' * @author OroPocket\n', ' */\n', '\n', 'contract Unifarmv3 is Admin {\n', "    // Wrappers over Solidity's arithmetic operations\n", '    using SafeMath for uint256;\n', '\n', '    // Stores Stake Details\n', '    struct stakeInfo {\n', '        address user;\n', '        uint8[] stakeOption;\n', '        bool[] isActive;\n', '        address[] referrer;\n', '        address[] tokenAddress;\n', '        uint256[] stakeId;\n', '        uint256[] stakedAmount;\n', '        uint256[] startTime;\n', '    }\n', '\n', '    // Mapping\n', '    mapping(address => stakeInfo) public stakingDetails;\n', '    mapping(address => mapping(address => uint256)) public userTotalStaking;\n', '    mapping(address => uint256) public totalStaking;\n', '    uint256 public poolStartTime;\n', '\n', '    // Events\n', '    event Stake(\n', '        address indexed userAddress,\n', '        address indexed tokenAddress,\n', '        uint256 stakedAmount,\n', '        uint256 time\n', '    );\n', '    event Claim(\n', '        address indexed userAddress,\n', '        address indexed stakedTokenAddress,\n', '        address indexed tokenAddress,\n', '        uint256 claimRewards,\n', '        uint256 time\n', '    );\n', '    event UnStake(\n', '        address indexed userAddress,\n', '        address indexed unStakedtokenAddress,\n', '        uint256 unStakedAmount,\n', '        uint256 time\n', '    );\n', '\n', '    constructor(address _owner) Admin(_owner) {\n', '        poolStartTime = block.timestamp;\n', '    }\n', '\n', '    /**\n', '     * @notice Stake tokens to earn rewards\n', '     * @param tokenAddress Staking token address\n', '     * @param amount Amount of tokens to be staked\n', '     */\n', '    function stake(\n', '        address referrerAddress,\n', '        address tokenAddress,\n', '        uint8 stakeOption,\n', '        uint256 amount\n', '    ) external whenNotPaused {\n', '        // checks\n', '        require(\n', '            tokenDetails[tokenAddress].isExist,\n', '            "STAKE : Token is not Exist"\n', '        );\n', '        require(\n', '            userTotalStaking[msg.sender][tokenAddress].add(amount) >=\n', '                tokenDetails[tokenAddress].userMinStake,\n', '            "STAKE : Min Amount should be within permit"\n', '        );\n', '        require(\n', '            userTotalStaking[msg.sender][tokenAddress].add(amount) <=\n', '                tokenDetails[tokenAddress].userMaxStake,\n', '            "STAKE : Max Amount should be within permit"\n', '        );\n', '        require(\n', '            totalStaking[tokenAddress].add(amount) <=\n', '                tokenDetails[tokenAddress].totalMaxStake,\n', '            "STAKE : Maxlimit exceeds"\n', '        );\n', '\n', '        // Storing stake details\n', '        stakingDetails[msg.sender].stakeId.push(\n', '            stakingDetails[msg.sender].stakeId.length\n', '        );\n', '        stakingDetails[msg.sender].isActive.push(true);\n', '        stakingDetails[msg.sender].user = msg.sender;\n', '        stakingDetails[msg.sender].referrer.push(referrerAddress);\n', '        stakingDetails[msg.sender].tokenAddress.push(tokenAddress);\n', '        stakingDetails[msg.sender].stakeOption.push(stakeOption);\n', '        stakingDetails[msg.sender].startTime.push(block.timestamp);\n', '    \n', '        // Update total staking amount\n', '        stakingDetails[msg.sender].stakedAmount.push(amount);\n', '        totalStaking[tokenAddress] = totalStaking[tokenAddress].add(\n', '            amount\n', '        );\n', '        userTotalStaking[msg.sender][tokenAddress] = userTotalStaking[\n', '            msg.sender\n', '        ][tokenAddress]\n', '            .add(amount);\n', '\n', '        // Transfer tokens from userf to contract\n', '        require(IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount),\n', '                "Transfer Failed");\n', '\n', '        // Emit state changes\n', '        emit Stake(msg.sender, tokenAddress, amount, block.timestamp);\n', '    }\n', '\n', '    /**\n', '     * @notice Claim accumulated rewards\n', '     * @param stakeId Stake ID of the user\n', '     * @param stakedAmount Staked amount of the user\n', '     */\n', '    function claimRewards1(uint256 stakeId, uint256 stakedAmount, uint256 totalStake) internal {\n', '        // Local variables\n', '        uint256 interval;\n', '\n', '        interval = stakingDetails[msg.sender].startTime[stakeId].add(\n', '            stakeDuration\n', '        );\n', '        // Interval calculation\n', '        if (interval > block.timestamp) {\n', '            uint256 endOfProfit = block.timestamp;\n', '            interval = endOfProfit.sub(\n', '                stakingDetails[msg.sender].startTime[stakeId]\n', '            );\n', '        } else {\n', '            uint256 endOfProfit =\n', '                stakingDetails[msg.sender].startTime[stakeId].add(\n', '                    stakeDuration\n', '                );\n', '            interval = endOfProfit.sub(\n', '                stakingDetails[msg.sender].startTime[stakeId]\n', '            );\n', '        }\n', '\n', '        // Reward calculation\n', '        if (interval >= HOURS)\n', '            _rewardCalculation(stakeId, stakedAmount, interval, totalStake);\n', '    }\n', '    \n', '    \n', '    /**\n', '     * @notice Claim accumulated rewards\n', '     * @param stakeId Stake ID of the user\n', '     * @param stakedAmount Staked amount of the user\n', '     */\n', '    function claimRewards2(uint256 stakeId, uint256 stakedAmount, uint256 totalStake) internal {\n', '        // Local variables\n', '        uint256 interval;\n', '        uint256 contractInterval;\n', '        uint256 endOfProfit; \n', '\n', '        interval = poolStartTime.add(stakeDuration);\n', '        \n', '        // Interval calculation\n', '        if (interval > block.timestamp) \n', '            endOfProfit = block.timestamp;\n', '           \n', '        else \n', '            endOfProfit = poolStartTime.add(stakeDuration);\n', '        \n', '        interval = endOfProfit.sub(stakingDetails[msg.sender].startTime[stakeId]); \n', '        contractInterval = endOfProfit.sub(poolStartTime);\n', '\n', '        // Reward calculation\n', '        if (interval >= HOURS) \n', '            _rewardCalculation2(stakeId, stakedAmount, interval, contractInterval, totalStake);\n', '    }\n', '\n', '\n', '    function _rewardCalculation(\n', '        uint256 stakeId,\n', '        uint256 stakedAmount,\n', '        uint256 interval, \n', '        uint256 totalStake\n', '    ) internal {\n', '        uint256 rewardsEarned;\n', '        uint256 noOfDays;\n', '        uint256 noOfHours;\n', '        \n', '        noOfHours = interval.div(HOURS);\n', '        noOfDays = interval.div(DAYS);\n', '        rewardsEarned = noOfHours.mul(\n', '            getOneDayReward(\n', '                stakedAmount,\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                totalStake\n', '            )\n', '        );\n', '\n', '        // Referrer Earning\n', '        if (stakingDetails[msg.sender].referrer[stakeId] != address(0)) {\n', '            uint256 refEarned =\n', '                (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '            rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '            require(IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).transfer(\n', '                stakingDetails[msg.sender].referrer[stakeId],\n', '                refEarned) == true, "Transfer Failed");\n', '        }\n', '\n', '        //  Rewards Send\n', '        sendToken(\n', '            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '            rewardsEarned\n', '        );\n', '\n', '        uint8 i = 1;\n', '        while (i < intervalDays.length) {\n', '            \n', '            if (noOfDays >= intervalDays[i]) {\n', '                uint256 balHours = noOfHours.sub((intervalDays[i].sub(1)).mul(24));\n', '                \n', '\n', '                address rewardToken =\n', '                    tokensSequenceList[\n', '                        stakingDetails[msg.sender].tokenAddress[stakeId]][i];\n', '\n', '                if ( rewardToken != stakingDetails[msg.sender].tokenAddress[stakeId] \n', '                        && tokenBlockedStatus[stakingDetails[msg.sender].tokenAddress[stakeId]][rewardToken] ==  false) {\n', '                    rewardsEarned = balHours.mul(\n', '                        getOneDayReward(\n', '                            stakedAmount,\n', '                            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                            rewardToken,\n', '                            totalStake\n', '                        )\n', '                    );\n', '\n', '                    // Referrer Earning\n', '\n', '                    if (\n', '                        stakingDetails[msg.sender].referrer[stakeId] !=\n', '                        address(0)\n', '                    ) {\n', '                        uint256 refEarned =\n', '                            (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '                        rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '                        require(IERC20(rewardToken)\n', '                            .transfer(\n', '                            stakingDetails[msg.sender].referrer[stakeId],\n', '                            refEarned) == true, "Transfer Failed");\n', '                    }\n', '\n', '                    //  Rewards Send\n', '                    sendToken(\n', '                        stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                        rewardToken,\n', '                        rewardsEarned\n', '                    );\n', '                }\n', '                i = i + 1;\n', '            } else {\n', '                break;\n', '            }\n', '        }\n', '    }\n', '    \n', '    \n', '    function _rewardCalculation2(\n', '        uint256 stakeId,\n', '        uint256 stakedAmount,\n', '        uint256 interval,\n', '        uint256 contractInterval,\n', '        uint256 totalStake\n', '    ) internal {\n', '        uint256 rewardsEarned;\n', '        uint256[2] memory count;\n', '        uint256[2] memory conCount;\n', '\n', '        count[0] = interval.div(DAYS); \n', '        conCount[0] = contractInterval.div(DAYS); \n', '        \n', '        count[1] = interval.div(HOURS);\n', '        conCount[1] = contractInterval.div(HOURS);\n', '        \n', '        rewardsEarned = count[1].mul(\n', '            getOneDayReward(\n', '                stakedAmount,\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                totalStake\n', '            )\n', '        );\n', '\n', '        // Referrer Earning\n', '        if (stakingDetails[msg.sender].referrer[stakeId] != address(0)) {\n', '            uint256 refEarned =\n', '                (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '            rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '            require(IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).transfer(\n', '                stakingDetails[msg.sender].referrer[stakeId],\n', '                refEarned) == true, "Transfer Failed");\n', '        }\n', '\n', '        //  Rewards Send\n', '        sendToken(\n', '            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '            rewardsEarned\n', '        );\n', '\n', '        uint8 i = 1;\n', '        while (i < intervalDays.length) {\n', '            uint256 userStakingDuration = stakingDetails[msg.sender].startTime[stakeId].sub(poolStartTime); \n', '            \n', '            if (conCount[0] >= intervalDays[i] && intervalDays[i] >= userStakingDuration.div(DAYS)) {\n', '                uint256 balHours = conCount[1].sub((intervalDays[i].sub(1)).mul(24));\n', '                address rewardToken = tokensSequenceList[stakingDetails[msg.sender].tokenAddress[stakeId]][i];\n', '\n', '                if ( rewardToken != stakingDetails[msg.sender].tokenAddress[stakeId] \n', '                        && tokenBlockedStatus[stakingDetails[msg.sender].tokenAddress[stakeId]][rewardToken] ==  false) {\n', '                    \n', '                    rewardsEarned = balHours.mul(getOneDayReward(stakedAmount, stakingDetails[msg.sender].tokenAddress[stakeId], rewardToken, totalStake));\n', '\n', '                    // Referrer Earning\n', '\n', '                    if (\n', '                        stakingDetails[msg.sender].referrer[stakeId] != address(0)) {\n', '                        uint256 refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '                        rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '                        require(IERC20(rewardToken).transfer(stakingDetails[msg.sender].referrer[stakeId],refEarned), "Transfer Failed");\n', '                    }\n', '\n', '                    //  Rewards Send\n', '                    sendToken(\n', '                        stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                        rewardToken,\n', '                        rewardsEarned\n', '                    );\n', '                }               \n', '            \n', '            }\n', '            else {\n', '\n', '                address rewardToken = tokensSequenceList[stakingDetails[msg.sender].tokenAddress[stakeId]][i];\n', '\n', '                if ( rewardToken != stakingDetails[msg.sender].tokenAddress[stakeId] \n', '                        && tokenBlockedStatus[stakingDetails[msg.sender].tokenAddress[stakeId]][rewardToken] ==  false) {\n', '                    \n', '                    rewardsEarned = count[1].mul(getOneDayReward(stakedAmount, stakingDetails[msg.sender].tokenAddress[stakeId], rewardToken, totalStake));\n', '                    // Referrer Earning\n', '\n', '                    if (\n', '                        stakingDetails[msg.sender].referrer[stakeId] != address(0)) {\n', '                        uint256 refEarned = (rewardsEarned.mul(refPercentage)).div(100 ether);\n', '                        rewardsEarned = rewardsEarned.sub(refEarned);\n', '\n', '                        require(IERC20(rewardToken).transfer(stakingDetails[msg.sender].referrer[stakeId],refEarned), "Transfer Failed");\n', '                    }\n', '\n', '                    //  Rewards Send\n', '                    sendToken(\n', '                        stakingDetails[msg.sender].tokenAddress[stakeId],\n', '                        rewardToken,\n', '                        rewardsEarned\n', '                    );\n', '                }               \n', '               \n', '            }\n', '            i = i + 1;\n', '        }\n', '    }\n', '\n', '\n', '    /**\n', '     * @notice Get rewards for one day\n', '     * @param stakedAmount Stake amount of the user\n', '     * @param stakedToken Staked token address of the user\n', '     * @param rewardToken Reward token address\n', '     * @return reward One dayh reward for the user\n', '     */\n', '    function getOneDayReward(\n', '        uint256 stakedAmount,\n', '        address stakedToken,\n', '        address rewardToken,\n', '        uint256 totalStake\n', '    ) public view returns (uint256 reward) {\n', '        \n', '        uint256 lockBenefit;\n', '        \n', '        if (tokenDetails[stakedToken].optionableStatus) {\n', '            stakedAmount = stakedAmount.mul(optionableBenefit);\n', '            lockBenefit = stakedAmount.mul(optionableBenefit.sub(1));\n', '            reward = (stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])).div(totalStake.add(lockBenefit));\n', '        }\n', '        else \n', '            reward = (stakedAmount.mul(tokenDailyDistribution[stakedToken][rewardToken])).div(totalStake);\n', '        \n', '    }\n', ' \n', '    /**\n', '     * @notice Get rewards for one day\n', '     * @param stakedToken Stake amount of the user\n', '     * @param tokenAddress Reward token address\n', '     * @param amount Amount to be transferred as reward\n', '     */\n', '    function sendToken(\n', '        address stakedToken,\n', '        address tokenAddress,\n', '        uint256 amount\n', '    ) internal {\n', '        // Checks\n', '        if (tokenAddress != address(0)) {\n', '            require(\n', '                IERC20(tokenAddress).balanceOf(address(this)) >= amount,\n', '                "SEND : Insufficient Balance"\n', '            );\n', '            // Transfer of rewards\n', '            require(IERC20(tokenAddress).transfer(msg.sender, amount), \n', '                    "Transfer failed");\n', '\n', '            // Emit state changes\n', '            emit Claim(\n', '                msg.sender,\n', '                stakedToken,\n', '                tokenAddress,\n', '                amount,\n', '                block.timestamp\n', '            );\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @notice Unstake and claim rewards\n', '     * @param stakeId Stake ID of the user\n', '     */\n', '    function unStake(uint256 stakeId) external whenNotPaused returns (bool) {\n', '        \n', '        address stakedToken = stakingDetails[msg.sender].tokenAddress[stakeId];\n', '        \n', '        // lockableDays check\n', '        require(\n', '            tokenDetails[stakedToken].lockableDays <= block.timestamp,\n', '            "Token Locked"\n', '        );\n', '        \n', '        // optional lock check\n', '        if(tokenDetails[stakedToken].optionableStatus)\n', '            require(stakingDetails[msg.sender].startTime[stakeId].add(stakeDuration) <= block.timestamp, \n', '            "Locked in optional lock");\n', '            \n', '        // Checks\n', '        require(\n', '            stakingDetails[msg.sender].stakedAmount[stakeId] > 0,\n', '            "CLAIM : Insufficient Staked Amount"\n', '        );\n', '\n', '        // State updation\n', '        uint256 stakedAmount = stakingDetails[msg.sender].stakedAmount[stakeId];\n', '        uint256 totalStaking1 =  totalStaking[stakedToken];\n', '        totalStaking[stakedToken] = totalStaking[stakedToken].sub(stakedAmount);\n', '        userTotalStaking[msg.sender][stakedToken] =  userTotalStaking[msg.sender][stakedToken].sub(stakedAmount);\n', '        stakingDetails[msg.sender].stakedAmount[stakeId] = 0;        \n', '        stakingDetails[msg.sender].isActive[stakeId] = false;\n', '\n', '        // Balance check\n', '        require(\n', '            IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).balanceOf(\n', '                address(this)\n', '            ) >= stakedAmount,\n', '            "UNSTAKE : Insufficient Balance"\n', '        );\n', '\n', '        // Transfer staked token back to user\n', '        IERC20(stakingDetails[msg.sender].tokenAddress[stakeId]).transfer(\n', '            msg.sender,\n', '            stakedAmount\n', '        );\n', '\n', '        // Claim pending rewards\n', '        \n', '        if(stakingDetails[msg.sender].stakeOption[stakeId] == 1) \n', '            claimRewards1(stakeId, stakedAmount, totalStaking1);\n', '\n', '        else if(stakingDetails[msg.sender].stakeOption[stakeId] == 2) \n', '            claimRewards2(stakeId, stakedAmount, totalStaking1);\n', '        \n', '\n', '        // Emit state changes\n', '        emit UnStake(\n', '            msg.sender,\n', '            stakingDetails[msg.sender].tokenAddress[stakeId],\n', '            stakedAmount,\n', '            block.timestamp\n', '        );\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @notice View staking details\n', '     * @param _user User address\n', '     */\n', '    function viewStakingDetails(address _user)\n', '        public\n', '        view\n', '        returns (\n', '            address[] memory,\n', '            address[] memory,\n', '            bool[] memory,\n', '            uint8[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory,\n', '            uint256[] memory\n', '        )\n', '    {\n', '        return (\n', '            stakingDetails[_user].referrer,\n', '            stakingDetails[_user].tokenAddress,\n', '            stakingDetails[_user].isActive,\n', '            stakingDetails[_user].stakeOption,\n', '            stakingDetails[_user].stakeId,\n', '            stakingDetails[_user].stakedAmount,\n', '            stakingDetails[_user].startTime\n', '        );\n', '    }\n', '\n', '}']