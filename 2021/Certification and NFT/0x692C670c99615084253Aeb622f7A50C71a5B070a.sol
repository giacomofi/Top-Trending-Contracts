['pragma solidity ^0.6.0;\n', '\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', '\n', '\n', 'contract VestingAndRewardDistribution {\n', '  string public constant name = "CRT.finance vesting & pool reward distribution contract"; // team tokens (2.5%) vested over 6 months.\n', '\n', '  using SafeMath for uint256;\n', '\n', '  address public immutable crt;\n', '\n', '  uint256 public immutable vestingAmount;\n', '  uint256 public immutable vestingBegin;\n', '  uint256 public immutable vestingEnd;\n', '  address public liquidity;\n', '  address public randomizedpool;\n', '  address public governancepool;\n', '  uint256 public timestamped;\n', '  uint256 public timestamped2;\n', '  uint256 public timestamped3;\n', '  address public pooleth;\n', '  uint256 public deployment = 1612987709;\n', '  uint256 public endchange = 1612404000;\n', '\n', '\n', '  address public recipient;\n', '  uint256 public lastUpdate;\n', '  \n', '  constructor(\n', '    address crt_,\n', '    address recipient_,\n', '    uint256 vestingAmount_,\n', '    uint256 vestingBegin_,\n', '    uint256 vestingEnd_\n', '  ) public {\n', '    require(\n', '      vestingBegin_ >= block.timestamp,\n', '      "VestingAndRewardDistribution::constructor: vesting begin too early"\n', '    );\n', '    require(\n', '      vestingEnd_ > vestingBegin_,\n', '      "VestingAndRewardDistribution::constructor: vesting end too early"\n', '    );\n', '\n', '    crt = crt_;\n', '    recipient = recipient_;\n', '\n', '    vestingAmount = vestingAmount_;\n', '    vestingBegin = vestingBegin_;\n', '    vestingEnd = vestingEnd_;\n', '\n', '    lastUpdate = vestingBegin_;\n', '  }\n', '\n', '  function delegate(address delegatee) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::delegate: unauthorized"\n', '    );\n', '    ICrt(crt).delegate(delegatee);\n', '  }\n', '\n', '  function setRecipient(address recipient_) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::setRecipient: unauthorized"\n', '    );\n', '    recipient = recipient_;\n', '  }\n', '  \n', '  function setGovernancePool(address governancepool_) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::setGovernancePool: unauthorized"\n', '    );\n', '    require(deployment < block.timestamp);\n', '    governancepool = governancepool_;\n', '  }\n', '  \n', '  function setLP(address liquidity_) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::setRecipient: unauthorized"\n', '    );\n', '    require(endchange < block.timestamp);\n', '    liquidity = liquidity_;\n', '  }\n', '  \n', '  function setRandomizedPool(address randomizedpool_) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::setRandomizedPool: unauthorized"\n', '    );\n', '    require(deployment < block.timestamp);\n', '    randomizedpool = randomizedpool_;\n', '  }\n', '\n', '  function setETHPool(address pooleth_) external {\n', '    require(\n', '      msg.sender == recipient,\n', '      "VestingAndRewardDistribution::setRandomizedPool: unauthorized"\n', '    );\n', '    require(endchange < block.timestamp);\n', '    pooleth = pooleth_;\n', '  }\n', '\n', '  function claim() external {\n', '    uint256 amount;\n', '    if (block.timestamp >= vestingEnd) {\n', '      amount = ICrt(crt).balanceOf(address(this));\n', '    } else {\n', '      amount = vestingAmount.mul(block.timestamp - lastUpdate).div(\n', '        vestingEnd - vestingBegin\n', '      );\n', '      lastUpdate = block.timestamp;\n', '    }\n', '    ICrt(crt).transfer(recipient, amount);\n', '  }\n', '  \n', '  \n', '  function rewardLPandPools() external {\n', '    require(block.timestamp > timestamped);\n', '    timestamped = block.timestamp + 86400;\n', '    ICrt(crt).transfer(pooleth, 150 ether);\n', '    ICrt(crt).transfer(liquidity, 25 ether);\n', '    ICrt(crt).transfer(msg.sender, 2 ether);\n', '  }\n', '  \n', '    function rewardPoolGovernance() external {\n', '    require(block.timestamp > deployment); // can be used in 7 days when pool goes live\n', '    require(block.timestamp > timestamped2);\n', '    timestamped2 = block.timestamp + 86400;\n', '    ICrt(crt).transfer(governancepool, 50 ether);\n', '    ICrt(crt).transfer(msg.sender, 2 ether);\n', '  }\n', '  \n', '    function rewardPoolRandomized() external {\n', '    require(block.timestamp > deployment); // can be used in 7 days when pool goes live\n', '    require(block.timestamp > timestamped3);\n', '    timestamped3 = block.timestamp + 86400;\n', '    ICrt(crt).transfer(randomizedpool, 50 ether);\n', '    ICrt(crt).transfer(msg.sender, 2 ether);\n', '  }\n', '  \n', '  \n', '}\n', '\n', 'interface ICrt {\n', '  function balanceOf(address account) external view returns (uint256);\n', '  function transfer(address dst, uint256 rawAmount) external returns (bool);\n', '  function delegate(address delegatee) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}']