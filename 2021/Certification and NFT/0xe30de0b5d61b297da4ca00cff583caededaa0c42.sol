['// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.7.5;\n', '\n', 'import "./IERC20.sol";\n', 'import "./Owned.sol";\n', 'import "./IValidatorRegistration.sol";\n', '\n', '/**\n', ' * @title ValidatorRegistration\n', ' * @dev Implements managing AvN stake and fees\n', ' */\n', 'contract ValidatorRegistration2 is Owned {  \n', '  // specifies the number of nodes availible to stake\n', '  uint8 public constant NUM_NODES = 10;\n', '  // specifies the number of months fees will be generated for\n', '  uint8 public constant NUM_MONTHS = 12;\n', '\n', '  // Data structure to represent each Aventus Node\n', '  struct Node {\n', '    // Amount deposited in stake for a node\n', '    uint stake;\n', '    // Fees associated with a node for each month\n', '    Fee[NUM_MONTHS] fees;\n', '    // Amount of stake associated with any particular staker\n', '    mapping (address => uint) stakerBalance;\n', '  }\n', '\n', "  // Data structure to represent each month's worth of fees for a node\n", '  struct Fee {\n', '    // Total fees remaining to be distributed\n', '    uint balance;\n', '    // Which stakers have already withdrawn their fees for the month\n', '    mapping (address => bool) isWithdrawn;\n', '  }\n', '\n', '  // address for the AVT token contract\n', '  IERC20 public avt;\n', '  // address for the Validator Registration token contract\n', '  IValidatorRegistration public vr;\n', '  // sets whether stake deposits or withdrawals are active\n', '  bool public isWithdrawStake;\n', '  // sets whether stake deposits or withdrawals are active\n', '  bool public isWithdrawFees;\n', '  // specifies the maximum amount of stake per node\n', '  uint[NUM_NODES] public MAX_NODE_STAKE;\n', '  // stores each of the 10 nodes\n', '  Node[NUM_NODES] public nodes;\n', '\n', '  /**\n', '   * @dev Initilaise contract to point to AVT token.\n', '   * @param _vr address of Validator Registration token contract\n', '   */\n', '  constructor(IValidatorRegistration _vr, IERC20 _avt) {\n', '    vr = _vr;\n', '    avt = _avt;\n', '    isWithdrawStake = false;\n', '    isWithdrawFees = false;\n', '  }\n', '\n', '  /**\n', '   * @dev Getter for the stake associated with a node\n', '   * @param node the index of the node associated with the AVT\n', '   */\n', '  function getNodeStake(uint8 node)\n', '    external\n', '    view\n', '    returns (uint)\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    return nodes[node].stake;\n', '  }\n', '\n', '  /**\n', '   * @dev Getter for the staker balance associated with a node\n', '   * @param node the index of the node associated with the AVT\n', '   * @param staker the address of the staker for which the balance is retrieved\n', '   */\n', '  function getStakerBalance(uint8 node, address staker)\n', '    external\n', '    view\n', '    returns (uint)\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(staker != address(0x0), "Staker is null address");\n', '    return nodes[node].stakerBalance[staker];\n', '  }\n', '\n', '  /**\n', '   * @dev deposit AVT tokens for staking.\n', '   * @param amount number of AVT tokens to be deposited as stake for a node\n', '   * @param node the index of the node to associate the AVT stake with\n', '   */\n', '  function depositStakeAndAgreeToTermsAndConditions(uint amount, uint8 node)\n', '    external\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(nodes[node].stake + amount <= MAX_NODE_STAKE[node], "Balance being deposited is too much for specified bucket");\n', '\n', '    nodes[node].stake += amount;\n', '    nodes[node].stakerBalance[msg.sender] += amount;\n', '\n', '    require(avt.transferFrom(msg.sender, address(this), amount), "Approved insufficient funds for deposit");\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw AVT tokens from staking. Only active after the 12 month period, manually set by owner.\n', '   * @param amount number of AVT tokens to be withdrawn from stake for a node\n', '   * @param node the index of the node associated with the AVT stake\n', '   */\n', '  function withdrawStake(uint amount, uint8 node)\n', '    external\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(isWithdrawStake, "Contract is not currently accepting withdrawals of stake");\n', '    require(nodes[node].stakerBalance[msg.sender] >= amount, "Balance being withdrawn is too much for msg.sender");\n', '\n', '    nodes[node].stake -= amount;\n', '    nodes[node].stakerBalance[msg.sender] -= amount;\n', '\n', '    require(avt.transfer(msg.sender, amount), "Insufficient contract AVT balance to withdraw stake");\n', '  }\n', '\n', '  /**\n', '   * @dev deposit AVT fees associated with each node for each month in the Validator registration contract. \n', '   * @param node the index of the node having the fees deposited\n', '   * @param month the month for which the fees are being deposited\n', '   */\n', '  function depositFees(uint8 node, uint8 month)\n', '    external\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(month <= 12, "Invalid month specified");\n', '\n', '    uint amount = avt.balanceOf(address(this));\n', '\n', '    vr.withdrawFees(node, month);\n', '\n', '    nodes[node].fees[month].balance += avt.balanceOf(address(this)) - amount;\n', '  }\n', '\n', '  /**\n', '   * @dev withdraw AVT fees associated with each node for each month for a particular staker.\n', '   * @param node the index of the node from which fees are being withdrawn\n', '   * @param month the month for which the fees are being withdrawn\n', '   */\n', '  function withdrawFees(uint8 node, uint8 month)\n', '    external\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(month <= 12, "Invalid month specified");\n', '    require(isWithdrawFees, "Contract is not currently accepting withdrawals of fees");\n', '\n', '    require(!nodes[node].fees[month].isWithdrawn[msg.sender], "Transaction sender is not owed any fees for specified node and month");\n', '\n', '    // Safe for integer overflow. fee.balance is always < 100,000e18, staker balance is always < 250,000e18, node.stake is always 250,000e18.\n', '    uint amount = nodes[node].fees[month].balance * nodes[node].stakerBalance[msg.sender] / nodes[node].stake;\n', '\n', '    // Safe from underflow\n', '    require(amount > 0, "No amount to be withdrawn");\n', '\n', '    nodes[node].fees[month].balance -= amount;\n', '    nodes[node].fees[month].isWithdrawn[msg.sender] = true;\n', '\n', '    require(avt.transfer(msg.sender, amount), "Contract has insufficient funds for withdrawal");\n', '  }\n', '\n', '  /**\n', '   * @dev add AVT tokens to staking.\n', '   * @param amount number of AVT tokens to be deposited as stake for a node\n', '   * @param node the index of the node associated with the AVT stake\n', '   */\n', '\n', '  function stakeInValidatorRegistration(uint8 node, uint amount) \n', '    external\n', '    onlyOwner\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(avt.approve(address(vr), amount), "Specified amount of AVT cannot be approved");\n', '\n', '    vr.depositStakeAndAgreeToTermsAndConditions(amount, node);\n', '  }\n', '\n', '  /**\n', '   * @dev Switch between (not) accepting withdrawals of stake.\n', '   * Only owner can do this and will do so at the end of NUM_MONTHS to return stake.\n', '   */\n', '  function flipIsWithdrawStake()\n', '    external\n', '    onlyOwner\n', '  {\n', '    isWithdrawStake = !isWithdrawStake;\n', '  }\n', '\n', '  /**\n', '   * @dev Switch between (not) accepting withdrawals of fees.\n', '   * Only owner can do this and will do so at the end of staking phase.\n', '   */\n', '  function flipIsWithdrawFees()\n', '    external\n', '    onlyOwner\n', '  {\n', '    isWithdrawFees = !isWithdrawFees;\n', '  }\n', '\n', '  /**\n', '   * @dev Setter for the maximum stake associated with a node\n', '   * @param node the index of the node associated with the AVT\n', '   * @param amount[10] the maximum stake associated with nodes at indeces\n', '   */\n', '  function setMaxNodeStake(uint8 node, uint amount)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(node <= 9, "Invalid node index specified");\n', '    require(amount <= 250000 ether, "Invalid amount specified");\n', '    MAX_NODE_STAKE[node] = amount;\n', '  }\n', '\n', '  /**\n', '   * @dev Remove the balance of AVT associated with a staker.\n', '   * @param staker the address of the staker\n', '   * @param node the index of the node\n', '   */\n', '  function removeStaker(address staker, uint8 node)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(staker != address(0x0), "Staker is null address");\n', '    require(node <= 9, "Invalid node index specified");\n', '\n', '    // Update total stake associated with a node\n', '    nodes[node].stake -= nodes[node].stakerBalance[staker];\n', '\n', '    // Update staker avt\n', '    nodes[node].stakerBalance[staker] = 0;\n', '  }\n', '\n', '   /**\n', '   * @dev Sends AVT associated with this contract to the dst address. Only owner can do this to get stake for nodes.\n', '   * @param dst is the destination address where the stake should be sent\n', '   */\n', '  function drain(address dst)\n', '    external\n', '    onlyOwner\n', '  {\n', '    require(dst != address(0x0), "dst is null address");\n', '    require(avt.transfer(dst, avt.balanceOf(address(this))), "AVT transfer failed");\n', '  }\n', '}']