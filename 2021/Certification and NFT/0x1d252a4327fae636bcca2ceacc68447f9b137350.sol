['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-24\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.2 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/GSN/[email\xa0protected]\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '// File contracts/ZoraProxy.sol\n', '\n', 'contract ZoraProxy is Ownable {\n', '    address immutable public zoraMedia;\n', '    address immutable public zoraMarket;\n', '    address immutable public safeAddress;\n', '\n', '    mapping(uint256 => address) public tokenCreators;\n', '\n', '    constructor(\n', '        address _zoraMedia,\n', '        address _zoraMarket,\n', '        address _safeAddress\n', '    ) public {\n', '        zoraMedia = _zoraMedia;\n', '        zoraMarket = _zoraMarket;\n', '        safeAddress = _safeAddress;\n', '    }\n', '\n', '    fallback() external {\n', '        _delegate(zoraMedia);\n', '    }\n', '\n', '    function setTokenCreator(uint256 tokenId) onlyOwner external returns (bool) {\n', '        tokenCreators[tokenId] = safeAddress;\n', '        return true;\n', '    }\n', '\n', '    function transferFrom(address from, address to, uint256 tokenId) external returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n', '        return true;\n', '    }\n', '\n', '    function marketContract() external view returns (address) {\n', '        return zoraMarket;\n', '    }\n', '\n', '    function _delegate(address implementation) private {\n', '        assembly {\n', '            calldatacopy(0, 0, calldatasize())\n', '            let result := delegatecall(\n', '                gas(),\n', '                implementation,\n', '                0,\n', '                calldatasize(),\n', '                0,\n', '                0\n', '            )\n', '\n', '            returndatacopy(0, 0, returndatasize())\n', '\n', '            switch result\n', '                case 0 {\n', '                    revert(0, returndatasize())\n', '                }\n', '                default {\n', '                    return(0, returndatasize())\n', '                }\n', '        }\n', '    }\n', '}']