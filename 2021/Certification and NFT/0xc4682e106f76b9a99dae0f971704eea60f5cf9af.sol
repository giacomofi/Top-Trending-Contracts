['//SPDX-License-Identifier: MIT\n', 'pragma experimental ABIEncoderV2;\n', 'pragma solidity 0.6.12;\n', '\n', '/*\n', '    ▓█████▄ ▓█████   █████▒██▓    ▓█████  ▄████▄  ▄▄▄█████▓ ▒█████   ██▀███\n', '    ▒██▀ ██▌▓█   ▀ ▓██   ▒▓██▒    ▓█   ▀ ▒██▀ ▀█  ▓  ██▒ ▓▒▒██▒  ██▒▓██ ▒ ██▒\n', '    ░██   █▌▒███   ▒████ ░▒██░    ▒███   ▒▓█    ▄ ▒ ▓██░ ▒░▒██░  ██▒▓██ ░▄█ ▒\n', '    ░▓█▄   ▌▒▓█  ▄ ░▓█▒  ░▒██░    ▒▓█  ▄ ▒▓▓▄ ▄██▒░ ▓██▓ ░ ▒██   ██░▒██▀▀█▄\n', '    ░▒████▓ ░▒████▒░▒█░   ░██████▒░▒████▒▒ ▓███▀ ░  ▒██▒ ░ ░ ████▓▒░░██▓ ▒██▒\n', '     ▒▒▓  ▒ ░░ ▒░ ░ ▒ ░   ░ ▒░▓  ░░░ ▒░ ░░ ░▒ ▒  ░  ▒ ░░   ░ ▒░▒░▒░ ░ ▒▓ ░▒▓░\n', '     ░ ▒  ▒  ░ ░  ░ ░     ░ ░ ▒  ░ ░ ░  ░  ░  ▒       ░      ░ ▒ ▒░   ░▒ ░ ▒░\n', '     ░ ░  ░    ░    ░ ░     ░ ░      ░   ░          ░      ░ ░ ░ ▒    ░░   ░\n', '       ░       ░  ░           ░  ░   ░  ░░ ░                   ░ ░     ░\n', '     ░                                   ░\n', '*/\n', '\n', 'import "@openzeppelin/contracts/access/Ownable.sol";\n', 'import "@openzeppelin/contracts/math/SafeMath.sol";\n', 'import "./interfaces/IDeflector.sol";\n', 'import "./interfaces/IERC20MintSnapshot.sol";\n', '\n', '/**\n', ' * @title Deflector\n', ' * @author DEFLECT PROTOCOL\n', ' * @dev This contract handles spendable and global token effects on contracts like farming pools.\n', ' *\n', ' * Default numeric values used for percentage calculations should be divided by 1000.\n', " * If the default value for amount in Spendable is 20, it's meant to represeent 2% (i * amount / 1000)\n", ' *\n', ' * Range structs range values should be set as ether-values of the wanted values. (r1 = 5, r2 = 10)\n', ' */\n', '\n', 'contract Deflector is Ownable, IDeflector {\n', '    using SafeMath for uint256;\n', '\n', '    uint256 private constant PERCENTAGE_DENOMINATOR = 1000;\n', '    IERC20MintSnapshot public immutable prism;\n', '\n', '    struct GlobalBoostLevel {\n', '        uint256 lowerBound;\n', '        uint256 percentage;\n', '    }\n', '\n', '    struct LocalBoostLevel {\n', '        uint256 cumulativeCost;\n', '        uint256 percentage;\n', '    }\n', '\n', '    struct User {\n', '        address[] tokensLeveled;\n', '        mapping(address => uint256) levelPerToken;\n', '    }\n', '\n', '    struct Pool {\n', '        address[] boostTokens;\n', '        bool exists;\n', '        mapping(address => User) users;\n', '        mapping(address => LocalBoostLevel[]) localBoosts;\n', '    }\n', '\n', '    mapping(address => Pool) public pools;\n', '\n', '    GlobalBoostLevel[] public globalBoosts;\n', '\n', '    modifier onlyPool() {\n', '        require(\n', '            pools[msg.sender].exists,\n', '            "Deflector::onlyPool: Insufficient Privileges"\n', '        );\n', '        _;\n', '    }\n', '\n', '    constructor(IERC20MintSnapshot _prism) public Ownable() {\n', '        prism = _prism;\n', '        // Tier 1: 15 PRISM -> 5%\n', '        globalBoosts.push(GlobalBoostLevel(15 ether, 50));\n', '        // Tier 2: 30 PRISM -> 10%\n', '        globalBoosts.push(GlobalBoostLevel(30 ether, 100));\n', '        // Tier 3: 75 PRISM -> 25%\n', '        globalBoosts.push(GlobalBoostLevel(75 ether, 250));\n', '        // Tier 4: 150 PRISM -> 50%\n', '        globalBoosts.push(GlobalBoostLevel(150 ether, 500));\n', '    }\n', '\n', '    function addPool(address pool) external onlyOwner() {\n', '        pools[pool].exists = true;\n', '    }\n', '\n', '    function getPoolInfor(address pool, address _token)\n', '        external\n', '        view\n', '        returns (address[] memory, LocalBoostLevel[] memory)\n', '    {\n', '        uint256 lengthBoostToken = pools[pool].boostTokens.length;\n', '        uint256 lengthlocalBoostLevel = pools[pool].localBoosts[_token].length;\n', '        address[] memory boostTokens = new address[](lengthBoostToken);\n', '        LocalBoostLevel[] memory localBoostLevel =\n', '            new LocalBoostLevel[](lengthlocalBoostLevel);\n', '        // boostTokens[0] = address(0);\n', '        for (uint256 i = 0; i < lengthBoostToken; i++) {\n', '            boostTokens[i] = pools[pool].boostTokens[i];\n', '        }\n', '\n', '        for (uint256 i = 0; i < lengthlocalBoostLevel; i++) {\n', '            localBoostLevel[i] = pools[pool].localBoosts[_token][i];\n', '        }\n', '        //  = pools[pool].boostTokens;\n', '        //  = pools[pool].localBoosts;\n', '        return (boostTokens, localBoostLevel);\n', '    }\n', '\n', '    function addLocalBoost(\n', '        address _pool,\n', '        address _token,\n', '        uint256[] calldata costs,\n', '        uint256[] calldata percentages\n', '    ) external onlyOwner() {\n', '        require(\n', '            costs.length == percentages.length,\n', '            "Deflector::addLocalBoost: Incorrect cost & percentage length"\n', '        );\n', '        Pool storage pool = pools[_pool];\n', '\n', '        if (pool.localBoosts[_token].length == 0) pool.boostTokens.push(_token);\n', '\n', '        for (uint256 i = 0; i < costs.length; i++) {\n', '            pool.localBoosts[_token].push(\n', '                LocalBoostLevel(costs[i], percentages[i])\n', '            );\n', '        }\n', '    }\n', '\n', '    function updateLocalBoost(\n', '        address _pool,\n', '        address _token,\n', '        uint256[] calldata costs,\n', '        uint256[] calldata percentages\n', '    ) external onlyOwner() {\n', '        require(\n', '            costs.length == percentages.length,\n', '            "Deflector::addLocalBoost: Incorrect cost & percentage length"\n', '        );\n', '        Pool storage pool = pools[_pool];\n', '        for (uint256 i = 0; i < costs.length; i++) {\n', '            pool.localBoosts[_token][i] = LocalBoostLevel(\n', '                costs[i],\n', '                percentages[i]\n', '            );\n', '        }\n', '    }\n', '\n', '    function updateLevel(\n', '        address _user,\n', '        address _token,\n', '        uint256 _nextLevel,\n', '        uint256 _balance\n', '    ) external override onlyPool() returns (uint256) {\n', '        Pool storage pool = pools[msg.sender];\n', '        User storage user = pool.users[_user];\n', '\n', '        if (user.levelPerToken[_token] == 0) {\n', '            user.tokensLeveled.push(_token);\n', '        }\n', '\n', '        user.levelPerToken[_token] = _nextLevel;\n', '\n', '        return calculateBoostedBalance(_user, _balance);\n', '    }\n', '\n', '    function calculateBoostedBalance(address _user, uint256 _balance)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        uint256 mintedPrism = prism.getPriorMints(_user, block.number - 1);\n', '\n', '        // Calculate Global Boost\n', '        uint256 loopLimit = globalBoosts.length;\n', '        uint256 i;\n', '        for (i = 0; i < loopLimit; i++) {\n', '            if (mintedPrism < globalBoosts[i].lowerBound) break;\n', '        }\n', '\n', '        uint256 totalBoost;\n', '        if (i > 0) totalBoost = globalBoosts[i - 1].percentage;\n', '\n', '        // Calculate Local Boost\n', '        Pool storage pool = pools[msg.sender];\n', '\n', '        // Safe arithmetics here\n', '        loopLimit = pool.boostTokens.length;\n', '        for (i = 0; i < loopLimit; i++) {\n', '            address token = pool.boostTokens[i];\n', '            uint256 userLevel = pool.users[_user].levelPerToken[token];\n', '            if (userLevel == 0) continue;\n', '            totalBoost += pool.localBoosts[token][userLevel - 1].percentage;\n', '        }\n', '        return _balance.mul(totalBoost) / PERCENTAGE_DENOMINATOR;\n', '    }\n', '\n', '    function calculateCost(\n', '        address _user,\n', '        address _token,\n', '        uint256 _nextLevel\n', '    ) external view override returns (uint256) {\n', '        Pool storage pool = pools[msg.sender];\n', '        User storage user = pool.users[_user];\n', '        require(\n', '            _nextLevel != 0 && _nextLevel <= pool.localBoosts[_token].length,\n', '            "Deflector::calculateCost: Incorrect Level Specified"\n', '        );\n', '        uint256 currentLevel = user.levelPerToken[_token];\n', '        uint256 currentCost =\n', '            currentLevel == 0\n', '                ? 0\n', '                : pool.localBoosts[_token][currentLevel - 1].cumulativeCost;\n', '        return\n', '            pool.localBoosts[_token][_nextLevel - 1].cumulativeCost.sub(\n', '                currentCost\n', '            );\n', '    }\n', '}\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IDeflector {\n', '    function calculateBoostedBalance(address _user, uint256 _balance)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function calculateCost(\n', '        address _user,\n', '        address _token,\n', '        uint256 _nextLevel\n', '    ) external view returns (uint256);\n', '\n', '    function updateLevel(\n', '        address _user,\n', '        address _token,\n', '        uint256 _nextLevel,\n', '        uint256 _balance\n', '    ) external returns (uint256);\n', '}\n', '\n', '// SPDX-License-Identifier: Unlicense\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'interface IERC20MintSnapshot {\n', '    function getPriorMints(address account, uint blockNumber) external view returns (uint224);\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "../utils/Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(owner() == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b <= a, "SafeMath: subtraction overflow");\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: division by zero");\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        require(b > 0, "SafeMath: modulo by zero");\n', '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999999\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']