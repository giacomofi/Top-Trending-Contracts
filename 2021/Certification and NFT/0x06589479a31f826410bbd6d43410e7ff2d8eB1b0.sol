['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-09\n', '*/\n', '\n', '// Sources flattened with hardhat v2.0.8 https://hardhat.org\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/access/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(\n', '        address indexed previousOwner,\n', '        address indexed newOwner\n', '    );\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor() internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view virtual returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', "        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\n", '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(\n', '            newOwner != address(0),\n', "            'Ownable: new owner is the zero address'\n", '        );\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryAdd(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        uint256 c = a + b;\n', '        if (c < a) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function trySub(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b > a) return (false, 0);\n', '        return (true, a - b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMul(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) return (true, 0);\n', '        uint256 c = a * b;\n', '        if (c / a != b) return (false, 0);\n', '        return (true, c);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryDiv(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a / b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function tryMod(uint256 a, uint256 b)\n', '        internal\n', '        pure\n', '        returns (bool, uint256)\n', '    {\n', '        if (b == 0) return (false, 0);\n', '        return (true, a % b);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', "        require(c >= a, 'SafeMath: addition overflow');\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        require(b <= a, 'SafeMath: subtraction overflow');\n", '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        if (a == 0) return 0;\n', '        uint256 c = a * b;\n', "        require(c / a == b, 'SafeMath: multiplication overflow');\n", '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        require(b > 0, 'SafeMath: division by zero');\n", '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        require(b > 0, 'SafeMath: modulo by zero');\n", '        return a % b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {trySub}.\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        return a - b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryDiv}.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a / b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * reverting with custom message when dividing by zero.\n', '     *\n', '     * CAUTION: This function is deprecated because it requires allocating memory for the error\n', '     * message unnecessarily. For custom revert reasons use {tryMod}.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(\n', '        uint256 a,\n', '        uint256 b,\n', '        string memory errorMessage\n', '    ) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            size := extcodesize(account)\n', '        }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', "            'Address: insufficient balance'\n", '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', "        (bool success, ) = recipient.call{value: amount}('');\n", '        require(\n', '            success,\n', "            'Address: unable to send value, recipient may have reverted'\n", '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', "        return functionCall(target, data, 'Address: low-level call failed');\n", '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', "                'Address: low-level call with value failed'\n", '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', "            'Address: insufficient balance for call'\n", '        );\n', "        require(isContract(target), 'Address: call to non-contract');\n", '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) =\n', '            target.call{value: value}(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data)\n', '        internal\n', '        view\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionStaticCall(\n', '                target,\n', '                data,\n', "                'Address: low-level static call failed'\n", '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal view returns (bytes memory) {\n', "        require(isContract(target), 'Address: static call to non-contract');\n", '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', '        return\n', '            functionDelegateCall(\n', '                target,\n', '                data,\n', "                'Address: low-level delegate call failed'\n", '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a delegate call.\n', '     *\n', '     * _Available since v3.4._\n', '     */\n', '    function functionDelegateCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', "        require(isContract(target), 'Address: delegate call to non-contract');\n", '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.delegatecall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(\n', '        bool success,\n', '        bytes memory returndata,\n', '        string memory errorMessage\n', '    ) private pure returns (bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/token/ERC20/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', "            'SafeERC20: approve from non-zero to non-zero allowance'\n", '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance =\n', '            token.allowance(address(this), spender).sub(\n', '                value,\n', "                'SafeERC20: decreased allowance below zero'\n", '            );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata =\n', '            address(token).functionCall(\n', '                data,\n', "                'SafeERC20: low-level call failed'\n", '            );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', "                'SafeERC20: ERC20 operation did not succeed'\n", '            );\n', '        }\n', '    }\n', '}\n', '\n', '// File hardhat/[email\xa0protected]\n', '\n', 'pragma solidity >=0.4.22 <0.9.0;\n', '\n', 'library console {\n', '    address constant CONSOLE_ADDRESS =\n', '        address(0x000000000000000000636F6e736F6c652e6c6f67);\n', '\n', '    function _sendLogPayload(bytes memory payload) private view {\n', '        uint256 payloadLength = payload.length;\n', '        address consoleAddress = CONSOLE_ADDRESS;\n', '        assembly {\n', '            let payloadStart := add(payload, 32)\n', '            let r := staticcall(\n', '                gas(),\n', '                consoleAddress,\n', '                payloadStart,\n', '                payloadLength,\n', '                0,\n', '                0\n', '            )\n', '        }\n', '    }\n', '\n', '    function log() internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log()'));\n", '    }\n', '\n', '    function logInt(int256 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(int)', p0));\n", '    }\n', '\n', '    function logUint(uint256 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\n", '    }\n', '\n', '    function logString(string memory p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\n", '    }\n', '\n', '    function logBool(bool p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\n", '    }\n', '\n', '    function logAddress(address p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\n", '    }\n', '\n', '    function logBytes(bytes memory p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes)', p0));\n", '    }\n', '\n', '    function logBytes1(bytes1 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes1)', p0));\n", '    }\n', '\n', '    function logBytes2(bytes2 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes2)', p0));\n", '    }\n', '\n', '    function logBytes3(bytes3 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes3)', p0));\n", '    }\n', '\n', '    function logBytes4(bytes4 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes4)', p0));\n", '    }\n', '\n', '    function logBytes5(bytes5 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes5)', p0));\n", '    }\n', '\n', '    function logBytes6(bytes6 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes6)', p0));\n", '    }\n', '\n', '    function logBytes7(bytes7 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes7)', p0));\n", '    }\n', '\n', '    function logBytes8(bytes8 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes8)', p0));\n", '    }\n', '\n', '    function logBytes9(bytes9 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes9)', p0));\n", '    }\n', '\n', '    function logBytes10(bytes10 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes10)', p0));\n", '    }\n', '\n', '    function logBytes11(bytes11 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes11)', p0));\n", '    }\n', '\n', '    function logBytes12(bytes12 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes12)', p0));\n", '    }\n', '\n', '    function logBytes13(bytes13 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes13)', p0));\n", '    }\n', '\n', '    function logBytes14(bytes14 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes14)', p0));\n", '    }\n', '\n', '    function logBytes15(bytes15 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes15)', p0));\n", '    }\n', '\n', '    function logBytes16(bytes16 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes16)', p0));\n", '    }\n', '\n', '    function logBytes17(bytes17 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes17)', p0));\n", '    }\n', '\n', '    function logBytes18(bytes18 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes18)', p0));\n", '    }\n', '\n', '    function logBytes19(bytes19 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes19)', p0));\n", '    }\n', '\n', '    function logBytes20(bytes20 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes20)', p0));\n", '    }\n', '\n', '    function logBytes21(bytes21 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes21)', p0));\n", '    }\n', '\n', '    function logBytes22(bytes22 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes22)', p0));\n", '    }\n', '\n', '    function logBytes23(bytes23 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes23)', p0));\n", '    }\n', '\n', '    function logBytes24(bytes24 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes24)', p0));\n", '    }\n', '\n', '    function logBytes25(bytes25 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes25)', p0));\n", '    }\n', '\n', '    function logBytes26(bytes26 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes26)', p0));\n", '    }\n', '\n', '    function logBytes27(bytes27 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes27)', p0));\n", '    }\n', '\n', '    function logBytes28(bytes28 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes28)', p0));\n", '    }\n', '\n', '    function logBytes29(bytes29 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes29)', p0));\n", '    }\n', '\n', '    function logBytes30(bytes30 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes30)', p0));\n", '    }\n', '\n', '    function logBytes31(bytes31 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes31)', p0));\n", '    }\n', '\n', '    function logBytes32(bytes32 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bytes32)', p0));\n", '    }\n', '\n', '    function log(uint256 p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint)', p0));\n", '    }\n', '\n', '    function log(string memory p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string)', p0));\n", '    }\n', '\n', '    function log(bool p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool)', p0));\n", '    }\n', '\n', '    function log(address p0) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(address)', p0));\n", '    }\n', '\n', '    function log(uint256 p0, uint256 p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint,uint)', p0, p1));\n", '    }\n', '\n', '    function log(uint256 p0, string memory p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint,string)', p0, p1));\n", '    }\n', '\n', '    function log(uint256 p0, bool p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint,bool)', p0, p1));\n", '    }\n', '\n', '    function log(uint256 p0, address p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(uint,address)', p0, p1));\n", '    }\n', '\n', '    function log(string memory p0, uint256 p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string,uint)', p0, p1));\n", '    }\n', '\n', '    function log(string memory p0, string memory p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string,string)', p0, p1));\n", '    }\n', '\n', '    function log(string memory p0, bool p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string,bool)', p0, p1));\n", '    }\n', '\n', '    function log(string memory p0, address p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(string,address)', p0, p1));\n", '    }\n', '\n', '    function log(bool p0, uint256 p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool,uint)', p0, p1));\n", '    }\n', '\n', '    function log(bool p0, string memory p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool,string)', p0, p1));\n", '    }\n', '\n', '    function log(bool p0, bool p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool,bool)', p0, p1));\n", '    }\n', '\n', '    function log(bool p0, address p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(bool,address)', p0, p1));\n", '    }\n', '\n', '    function log(address p0, uint256 p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(address,uint)', p0, p1));\n", '    }\n', '\n', '    function log(address p0, string memory p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(address,string)', p0, p1));\n", '    }\n', '\n', '    function log(address p0, bool p1) internal view {\n', "        _sendLogPayload(abi.encodeWithSignature('log(address,bool)', p0, p1));\n", '    }\n', '\n', '    function log(address p0, address p1) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,address)', p0, p1)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,string,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,string,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,string,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,string,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,address,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,address,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,address,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,address,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,uint,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,uint,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,uint,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,uint,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,string,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,string,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,string,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,string,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,bool,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,bool,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,bool,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,bool,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,address,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,address,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,address,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(string,address,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,string,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,string,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,string,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,string,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,address,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,address,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,address,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,address,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,uint,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,uint,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,uint,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,uint,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,string,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,string,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,string,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,string,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,bool,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,bool,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,bool,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,bool,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,address,uint)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,address,string)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,address,bool)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(address,address,address)', p0, p1, p2)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,uint,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,uint,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,bool,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,uint,bool,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,uint,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,string,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,uint,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,uint,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,bool,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(uint,bool,bool,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,bool,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        uint256 p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(uint,address,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,uint,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,string,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,bool,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        string memory p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(string,address,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,uint,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,uint,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,bool,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,uint,bool,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,uint,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,string,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,uint,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,uint,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,bool,uint)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', "            abi.encodeWithSignature('log(bool,bool,bool,bool)', p0, p1, p2, p3)\n", '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,bool,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        bool p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(bool,address,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        uint256 p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,uint,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        string memory p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,string,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        bool p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,bool,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,uint,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,uint,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,uint,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        uint256 p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,uint,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,string,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,string,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,string,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        string memory p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,string,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,bool,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,bool,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,bool,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        bool p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,bool,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        uint256 p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,address,uint)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        string memory p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,address,string)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        bool p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,address,bool)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '\n', '    function log(\n', '        address p0,\n', '        address p1,\n', '        address p2,\n', '        address p3\n', '    ) internal view {\n', '        _sendLogPayload(\n', '            abi.encodeWithSignature(\n', "                'log(address,address,address,address)',\n", '                p0,\n', '                p1,\n', '                p2,\n', '                p3\n', '            )\n', '        );\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/utils/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping(bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) {\n', '            // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value)\n', '        private\n', '        view\n', '        returns (bool)\n', '    {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function _at(Set storage set, uint256 index)\n', '        private\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        require(\n', '            set._values.length > index,\n', "            'EnumerableSet: index out of bounds'\n", '        );\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(Bytes32Set storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (bytes32)\n', '    {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _add(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(uint256(uint160(value))));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(AddressSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (address)\n', '    {\n', '        return address(uint160(uint256(_at(set._inner, index))));\n', '    }\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value)\n', '        internal\n', '        returns (bool)\n', '    {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value)\n', '        internal\n', '        view\n', '        returns (bool)\n', '    {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the value stored at position `index` in the set. O(1).\n', '     *\n', '     * Note that there are no guarantees on the ordering of values inside the\n', '     * array, and it may change when more values are added or removed.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `index` must be strictly less than {length}.\n', '     */\n', '    function at(UintSet storage set, uint256 index)\n', '        internal\n', '        view\n', '        returns (uint256)\n', '    {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// File contracts/access/Operator.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'abstract contract Operator is Context, Ownable {\n', '    address private _operator;\n', '\n', '    event OperatorTransferred(\n', '        address indexed previousOperator,\n', '        address indexed newOperator\n', '    );\n', '\n', '    constructor() {\n', '        _operator = _msgSender();\n', '        emit OperatorTransferred(address(0), _operator);\n', '    }\n', '\n', '    function operator() public view returns (address) {\n', '        return _operator;\n', '    }\n', '\n', '    modifier onlyOperator() {\n', '        require(\n', '            _operator == _msgSender(),\n', "            'operator: caller is not the operator'\n", '        );\n', '        _;\n', '    }\n', '\n', '    function isOperator() public view returns (bool) {\n', '        return _msgSender() == _operator;\n', '    }\n', '\n', '    function transferOperator(address newOperator_) public onlyOwner {\n', '        _transferOperator(newOperator_);\n', '    }\n', '\n', '    function _transferOperator(address newOperator_) internal {\n', '        require(\n', '            newOperator_ != address(0),\n', "            'operator: zero address given for new operator'\n", '        );\n', '        emit OperatorTransferred(address(0), newOperator_);\n', '        _operator = newOperator_;\n', '    }\n', '}\n', '\n', '// File contracts/boardroom/v2/TokenStore.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface ITokenStore {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event Deposit(\n', '        address indexed operator,\n', '        address indexed owner,\n', '        uint256 amount\n', '    );\n', '    event Withdraw(\n', '        address indexed operator,\n', '        address indexed owner,\n', '        uint256 amount\n', '    );\n', '\n', '    /* ================= CALLS ================= */\n', '\n', '    function token() external view returns (address);\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function deposit(address _owner, uint256 _amount) external;\n', '\n', '    function withdraw(address _owner, uint256 _amount) external;\n', '\n', '    function emergencyWithdraw() external;\n', '}\n', '\n', 'interface ITokenStoreGov {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event EmergencyReported(address indexed reporter);\n', '    event EmergencyResolved(address indexed resolver);\n', '\n', '    event TokenChanged(\n', '        address indexed owner,\n', '        address newToken,\n', '        address oldToken\n', '    );\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function reportEmergency() external;\n', '\n', '    function resolveEmergency() external;\n', '\n', '    function setToken(address newToken) external;\n', '}\n', '\n', 'contract TokenStore is ITokenStore, ITokenStoreGov, Operator {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ================= STATES ================= */\n', '\n', '    address public override token;\n', '\n', '    uint256 private _totalSupply;\n', '    mapping(address => uint256) private _balances;\n', '\n', '    bool public emergency = false;\n', '\n', '    constructor(address _token) Operator() {\n', '        token = _token;\n', '    }\n', '\n', '    /* ================= GOV - OWNER ONLY ================= */\n', '\n', '    /**\n', '     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\n', '     * @notice Enable emergency withdraw\n', '     */\n', '    function reportEmergency() public override onlyOwner {\n', '        emergency = true;\n', '        emit EmergencyReported(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\n', '     * @notice Disable emergency withdraw\n', '     */\n', '    function resolveEmergency() public override onlyOwner {\n', '        emergency = false;\n', '        emit EmergencyResolved(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev CAUTION: MUST USE 1:1 TOKEN MIGRATION\n', '     */\n', '    function setToken(address newToken) public override onlyOwner {\n', '        address oldToken = token;\n', '        token = newToken;\n', '        IERC20(newToken).safeTransferFrom(\n', '            msg.sender,\n', '            address(this),\n', '            totalSupply()\n', '        );\n', '        emit TokenChanged(_msgSender(), newToken, oldToken);\n', '    }\n', '\n', '    /* ================= CALLS - ANYONE ================= */\n', '\n', '    /**\n', '     * @return total staked token amount\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @param _owner staker address\n', '     * @return staked amount of user\n', '     */\n', '    function balanceOf(address _owner) public view override returns (uint256) {\n', '        return _balances[_owner];\n', '    }\n', '\n', '    /* ================= TXNS - OPERATOR ONLY ================= */\n', '\n', '    /**\n', '     * @param _owner stake address\n', '     * @param _amount stake amount\n', '     */\n', '    function deposit(address _owner, uint256 _amount)\n', '        public\n', '        override\n', '        onlyOperator\n', '    {\n', '        _totalSupply = _totalSupply.add(_amount);\n', '        _balances[_owner] = _balances[_owner].add(_amount);\n', '        IERC20(token).safeTransferFrom(_msgSender(), address(this), _amount);\n', '\n', '        emit Deposit(_msgSender(), _owner, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _owner stake address\n', '     * @param _amount stake amount\n', '     */\n', '    function withdraw(address _owner, uint256 _amount)\n', '        public\n', '        override\n', '        onlyOperator\n', '    {\n', '        _totalSupply = _totalSupply.sub(_amount);\n', '        _balances[_owner] = _balances[_owner].sub(_amount);\n', '        IERC20(token).safeTransfer(_msgSender(), _amount);\n', '\n', '        emit Withdraw(_msgSender(), _owner, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Anyone can withdraw its balance even if is not the operator\n', '     */\n', '    function emergencyWithdraw() public override {\n', "        require(emergency, 'TokenStore: not in emergency');\n", '\n', '        uint256 balance = _balances[_msgSender()];\n', '        _balances[_msgSender()] = 0;\n', '        IERC20(token).safeTransfer(_msgSender(), balance);\n', '\n', '        emit Withdraw(_msgSender(), _msgSender(), balance);\n', '    }\n', '}\n', '\n', '// File contracts/boardroom/v2/TokenStoreWrapper.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'abstract contract TokenStoreWrapper is Context {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public share;\n', '    ITokenStore public store;\n', '\n', '    function deposit(uint256 _amount) public virtual {\n', '        share.safeTransferFrom(_msgSender(), address(this), _amount);\n', '        share.safeIncreaseAllowance(address(store), _amount);\n', '        store.deposit(_msgSender(), _amount);\n', '    }\n', '\n', '    function withdraw(uint256 _amount) public virtual {\n', '        store.withdraw(_msgSender(), _amount);\n', '        share.safeTransfer(_msgSender(), _amount);\n', '    }\n', '}\n', '\n', '// File contracts/boardroom/v2/Boardroom.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface IRewardPool {\n', '    function collect() external returns (address, uint256);\n', '}\n', '\n', 'interface IBoardroomV2 {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event DepositShare(address indexed owner, uint256 amount);\n', '    event WithdrawShare(address indexed owner, uint256 amount);\n', '    event RewardClaimed(\n', '        address indexed owner,\n', '        address indexed token,\n', '        uint256 amount\n', '    );\n', '    event RewardCollected(\n', '        address indexed operator,\n', '        address indexed target,\n', '        address indexed token,\n', '        uint256 amount\n', '    );\n', '    event RewardCollectionFailedWithReason(\n', '        address indexed operator,\n', '        address indexed target,\n', '        string reason\n', '    );\n', '    event RewardCollectionFailedWithData(\n', '        address indexed operator,\n', '        address indexed target,\n', '        bytes data\n', '    );\n', '\n', '    /* ================= CALLS ================= */\n', '\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256);\n', '\n', '    function rewardTokensAt(uint256 index) external view returns (address);\n', '\n', '    function rewardTokensLength() external view returns (uint256);\n', '\n', '    function rewardPoolsAt(uint256 index) external view returns (address);\n', '\n', '    function rewardPoolsLength() external view returns (uint256);\n', '\n', '    function lastSnapshotIndex(address _token) external view returns (uint256);\n', '\n', '    function rewardEarned(address _token, address _director)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function deposit(uint256 _amount) external;\n', '\n', '    function withdraw(uint256 _amount) external;\n', '\n', '    function claimReward() external;\n', '\n', '    function exit() external;\n', '\n', '    function collectReward() external;\n', '}\n', '\n', 'interface IBoardroomV2Gov {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event RewardTokenAdded(address indexed operator, address token);\n', '    event RewardTokenRemoved(address indexed operator, address token);\n', '    event RewardPoolAdded(address indexed operator, address pool);\n', '    event RewardPoolRemoved(address indexed operator, address pool);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function migrate() external;\n', '\n', '    function addRewardToken(address _token) external;\n', '\n', '    function removeRewardToken(address _token) external;\n', '\n', '    function addRewardPool(address _pool) external;\n', '\n', '    function removeRewardPool(address _pool) external;\n', '}\n', '\n', 'contract BoardroomV2 is\n', '    IBoardroomV2,\n', '    IBoardroomV2Gov,\n', '    TokenStoreWrapper,\n', '    Ownable\n', '{\n', '    using SafeERC20 for IERC20;\n', '    using SafeMath for uint256;\n', '    using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '    /* ================= DATA STRUCTURES ================= */\n', '\n', '    struct Boardseat {\n', '        uint256 lastSnapshotIndex;\n', '        uint256 rewardEarned;\n', '    }\n', '\n', '    struct BoardSnapshot {\n', '        uint256 at;\n', '        uint256 rewardReceived;\n', '        uint256 rewardPerShare;\n', '    }\n', '\n', '    /* ================= STATE VARIABLES ================= */\n', '\n', '    bool public migrated;\n', '\n', '    EnumerableSet.AddressSet private rewardTokens;\n', '    EnumerableSet.AddressSet private rewardPools;\n', '\n', '    BoardSnapshot genesis =\n', '        BoardSnapshot({at: block.number, rewardReceived: 0, rewardPerShare: 0});\n', '    mapping(address => BoardSnapshot[]) public history;\n', '    mapping(address => mapping(address => Boardseat)) public seats;\n', '\n', '    /* ================= CONSTRUCTOR ================= */\n', '\n', '    constructor(\n', '        address _cash,\n', '        address _share,\n', '        address _store\n', '    ) {\n', '        share = IERC20(_share);\n', '        store = ITokenStore(_store);\n', '\n', '        addRewardToken(_cash);\n', '        addRewardToken(_share);\n', '    }\n', '\n', '    /* ================= GOV - OWNER ONLY ================= */\n', '\n', '    /**\n', '     * @dev blocks deposit function\n', '     */\n', '    function migrate() external override onlyOwner {\n', '        migrated = true;\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     */\n', '    function addRewardToken(address _token) public override onlyOwner {\n', '        rewardTokens.add(_token);\n', '        history[_token].push(genesis);\n', '        emit RewardTokenAdded(_msgSender(), _token);\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     */\n', '    function removeRewardToken(address _token) public override onlyOwner {\n', '        rewardTokens.remove(_token);\n', '        emit RewardTokenRemoved(_msgSender(), _token);\n', '    }\n', '\n', '    /**\n', '     * @param _pool reward pool address\n', '     */\n', '    function addRewardPool(address _pool) public override onlyOwner {\n', '        rewardPools.add(_pool);\n', '        emit RewardPoolAdded(_msgSender(), _pool);\n', '    }\n', '\n', '    /**\n', '     * @param _pool reward pool address\n', '     */\n', '    function removeRewardPool(address _pool) public override onlyOwner {\n', '        rewardPools.remove(_pool);\n', '        emit RewardPoolRemoved(_msgSender(), _pool);\n', '    }\n', '\n', '    /* ================= MODIFIERS ================= */\n', '\n', '    modifier checkMigration {\n', "        require(!migrated, 'Boardroom: migrated');\n", '\n', '        _;\n', '    }\n', '\n', '    modifier directorExists {\n', "        require(store.balanceOf(_msgSender()) > 0, 'Boardroom: absent');\n", '\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param _director staker address\n', '     */\n', '    modifier updateReward(address _director) {\n', '        collectReward();\n', '\n', '        for (uint256 i = 0; i < rewardTokens.length(); i++) {\n', '            address token = rewardTokens.at(i);\n', '\n', '            if (_director != address(0x0)) {\n', '                Boardseat memory seat = seats[token][_director];\n', '                seat.rewardEarned = rewardEarned(token, _director);\n', '                seat.lastSnapshotIndex = lastSnapshotIndex(token);\n', '                seats[token][_director] = seat;\n', '            }\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    /* ================= CALLS - ANYONE ================= */\n', '\n', '    /**\n', '     * @return total staked amount\n', '     */\n', '    function totalSupply() external view override returns (uint256) {\n', '        return store.totalSupply();\n', '    }\n', '\n', '    /**\n', '     * @param _owner staker address\n', '     * @return staker balance\n', '     */\n', '    function balanceOf(address _owner)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return store.balanceOf(_owner);\n', '    }\n', '\n', '    /**\n', '     * @param _index of reward token\n', '     * @return reward token address\n', '     */\n', '    function rewardTokensAt(uint256 _index)\n', '        external\n', '        view\n', '        override\n', '        returns (address)\n', '    {\n', '        return rewardTokens.at(_index);\n', '    }\n', '\n', '    /**\n', '     * @return total count of reward tokens\n', '     */\n', '    function rewardTokensLength() external view override returns (uint256) {\n', '        return rewardTokens.length();\n', '    }\n', '\n', '    /**\n', '     * @param _index of reward pool\n', '     * @return reward pool address\n', '     */\n', '    function rewardPoolsAt(uint256 _index)\n', '        external\n', '        view\n', '        override\n', '        returns (address)\n', '    {\n', '        return rewardPools.at(_index);\n', '    }\n', '\n', '    /**\n', '     * @return total count of reward pools\n', '     */\n', '    function rewardPoolsLength() external view override returns (uint256) {\n', '        return rewardPools.length();\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     * @return last snapshot index of token history\n', '     */\n', '    function lastSnapshotIndex(address _token)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return history[_token].length.sub(1);\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     * @return last snapshot of token history\n', '     */\n', '    function getLastSnapshot(address _token)\n', '        internal\n', '        view\n', '        returns (BoardSnapshot memory)\n', '    {\n', '        return history[_token][lastSnapshotIndex(_token)];\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     * @param _director staker address\n', '     * @return last snapshot of director\n', '     */\n', '    function getLastSnapshotOf(address _token, address _director)\n', '        internal\n', '        view\n', '        returns (BoardSnapshot memory)\n', '    {\n', '        return history[_token][seats[_token][_director].lastSnapshotIndex];\n', '    }\n', '\n', '    /**\n', '     * @param _token reward token address\n', '     * @param _director staker address\n', '     * @return reward earned\n', '     */\n', '    function rewardEarned(address _token, address _director)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        uint256 latestRPS = getLastSnapshot(_token).rewardPerShare;\n', '        uint256 storedRPS = getLastSnapshotOf(_token, _director).rewardPerShare;\n', '\n', '        return\n', '            store\n', '                .balanceOf(_director)\n', '                .mul(latestRPS.sub(storedRPS))\n', '                .div(1e18)\n', '                .add(seats[_token][_director].rewardEarned);\n', '    }\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    /**\n', '     * @dev deposit tokens to boardroom\n', '     * @param _amount deposit amount of tokens\n', '     */\n', '    function deposit(uint256 _amount)\n', '        public\n', '        override(IBoardroomV2, TokenStoreWrapper)\n', '        checkMigration\n', '        updateReward(_msgSender())\n', '    {\n', '        super.deposit(_amount);\n', '        emit DepositShare(_msgSender(), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw tokens from boardroom\n', '     * @param _amount amount of staked tokens\n', '     */\n', '    function withdraw(uint256 _amount)\n', '        public\n', '        override(IBoardroomV2, TokenStoreWrapper)\n', '        directorExists\n', '        updateReward(_msgSender())\n', '    {\n', '        super.withdraw(_amount);\n', '        emit WithdrawShare(_msgSender(), _amount);\n', '    }\n', '\n', '    /**\n', '     * @dev receive collected rewards\n', '     */\n', '    function claimReward() public override updateReward(_msgSender()) {\n', '        for (uint256 i = 0; i < rewardTokens.length(); i++) {\n', '            address token = rewardTokens.at(i);\n', '            uint256 reward = seats[token][_msgSender()].rewardEarned;\n', '            if (reward > 0) {\n', '                seats[token][_msgSender()].rewardEarned = 0;\n', '                IERC20(token).safeTransfer(_msgSender(), reward);\n', '                emit RewardClaimed(_msgSender(), token, reward);\n', '            }\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw + claim reward\n', '     */\n', '    function exit() external override {\n', '        withdraw(store.balanceOf(_msgSender()));\n', '        claimReward();\n', '    }\n', '\n', '    /**\n', '     * @dev collect rewards from pools\n', '     */\n', '    function collectReward() public override {\n', '        if (store.totalSupply() > 0) {\n', '            for (uint256 i = 0; i < rewardPools.length(); i++) {\n', '                try IRewardPool(rewardPools.at(i)).collect() returns (\n', '                    address token,\n', '                    uint256 amount\n', '                ) {\n', '                    if (amount == 0) {\n', '                        continue;\n', '                    }\n', '\n', '                    uint256 prevRPS = getLastSnapshot(token).rewardPerShare;\n', '                    uint256 nextRPS =\n', '                        prevRPS.add(amount.mul(1e18).div(store.totalSupply()));\n', '\n', '                    BoardSnapshot memory newSnapshot =\n', '                        BoardSnapshot({\n', '                            at: block.number,\n', '                            rewardReceived: amount,\n', '                            rewardPerShare: nextRPS\n', '                        });\n', '                    history[token].push(newSnapshot);\n', '\n', '                    emit RewardCollected(\n', '                        _msgSender(),\n', '                        rewardPools.at(i),\n', '                        token,\n', '                        amount\n', '                    );\n', '                } catch Error(string memory reason) {\n', '                    emit RewardCollectionFailedWithReason(\n', '                        _msgSender(),\n', '                        rewardPools.at(i),\n', '                        reason\n', '                    );\n', '                }\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File @openzeppelin/contracts/math/[email\xa0protected]\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Standard math utilities missing in the Solidity language.\n', ' */\n', 'library Math {\n', '    /**\n', '     * @dev Returns the largest of two numbers.\n', '     */\n', '    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a >= b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the smallest of two numbers.\n', '     */\n', '    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return a < b ? a : b;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the average of two numbers. The result is rounded towards\n', '     * zero.\n', '     */\n', '    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        // (a + b) / 2 can overflow, so we distribute\n', '        return (a / 2) + (b / 2) + (((a % 2) + (b % 2)) / 2);\n', '    }\n', '}\n', '\n', '// File contracts/distribution/v2/IPool.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface IPool {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event DepositToken(\n', '        address indexed owner,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '    event WithdrawToken(\n', '        address indexed owner,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '    event RewardClaimed(\n', '        address indexed owner,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    /* ================= CALLS ================= */\n', '\n', '    function tokenOf(uint256 _pid) external view returns (address);\n', '\n', '    function poolIdsOf(address _token) external view returns (uint256[] memory);\n', '\n', '    function totalSupply(uint256 _pid) external view returns (uint256);\n', '\n', '    function balanceOf(uint256 _pid, address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    function rewardRatePerPool(uint256 _pid) external view returns (uint256);\n', '\n', '    function rewardPerToken(uint256 _pid) external view returns (uint256);\n', '\n', '    function rewardEarned(uint256 _pid, address _target)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function massUpdate(uint256[] memory _pids) external;\n', '\n', '    function update(uint256 _pid) external;\n', '\n', '    function deposit(uint256 _pid, uint256 _amount) external;\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) external;\n', '\n', '    function claimReward(uint256 _pid) external;\n', '\n', '    function exit(uint256 _pid) external;\n', '}\n', '\n', 'interface IPoolGov {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event RewardNotified(\n', '        address indexed operator,\n', '        uint256 amount,\n', '        uint256 period\n', '    );\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function notifyReward(uint256 _amount, uint256 _period) external;\n', '}\n', '\n', '// File contracts/distribution/v2/PoolStore.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface IPoolStore {\n', '    /* ================= EVENTS ================= */\n', '    event Deposit(\n', '        address indexed operator,\n', '        address indexed owner,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '    event Withdraw(\n', '        address indexed operator,\n', '        address indexed owner,\n', '        uint256 indexed pid,\n', '        uint256 amount\n', '    );\n', '\n', '    /* ================= CALLS ================= */\n', '\n', '    // common\n', '    function totalWeight() external view returns (uint256);\n', '\n', '    function poolLength() external view returns (uint256);\n', '\n', '    // index\n', '    function poolIdsOf(address _token) external view returns (uint256[] memory);\n', '\n', '    // pool info\n', '    function nameOf(uint256 _pid) external view returns (string memory);\n', '\n', '    function tokenOf(uint256 _pid) external view returns (address);\n', '\n', '    function weightOf(uint256 _pid) external view returns (uint256);\n', '\n', '    function totalSupply(uint256 _pid) external view returns (uint256);\n', '\n', '    function balanceOf(uint256 _pid, address _owner)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function deposit(\n', '        uint256 _pid,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    function withdraw(\n', '        uint256 _pid,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) external;\n', '\n', '    function emergencyWithdraw(uint256 _pid) external;\n', '}\n', '\n', 'interface IPoolStoreGov {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event EmergencyReported(address indexed reporter);\n', '    event EmergencyResolved(address indexed resolver);\n', '\n', '    event PoolAdded(\n', '        address indexed operator,\n', '        uint256 indexed pid,\n', '        string name,\n', '        address token,\n', '        uint256 weight\n', '    );\n', '    event PoolWeightChanged(\n', '        address indexed operator,\n', '        uint256 indexed pid,\n', '        uint256 from,\n', '        uint256 to\n', '    );\n', '    event PoolNameChanged(\n', '        address indexed operator,\n', '        uint256 indexed pid,\n', '        string from,\n', '        string to\n', '    );\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    // emergency\n', '    function reportEmergency() external;\n', '\n', '    function resolveEmergency() external;\n', '\n', '    // pool setting\n', '    function addPool(\n', '        string memory _name,\n', '        IERC20 _token,\n', '        uint256 _weight\n', '    ) external;\n', '\n', '    function setPool(uint256 _pid, uint256 _weight) external;\n', '\n', '    function setPool(uint256 _pid, string memory _name) external;\n', '}\n', '\n', 'contract PoolStore is IPoolStore, IPoolStoreGov, Operator {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ================= DATA STRUCTURE ================= */\n', '\n', '    struct Pool {\n', '        string name;\n', '        IERC20 token;\n', '        uint256 weight;\n', '        uint256 totalSupply;\n', '    }\n', '\n', '    /* ================= STATES ================= */\n', '\n', '    uint256 public override totalWeight = 0;\n', '\n', '    Pool[] public pools;\n', '    mapping(uint256 => mapping(address => uint256)) balances;\n', '    mapping(address => uint256[]) public indexByToken;\n', '\n', '    bool public emergency = false;\n', '\n', '    constructor() Operator() {}\n', '\n', '    /* ================= GOV - OWNER ONLY ================= */\n', '\n', '    /**\n', '     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\n', '     * @notice Enable emergency withdraw\n', '     */\n', '    function reportEmergency() public override onlyOwner {\n', '        emergency = true;\n', '        emit EmergencyReported(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev CAUTION: DO NOT USE IN NORMAL SITUATION\n', '     * @notice Disable emergency withdraw\n', '     */\n', '    function resolveEmergency() public override onlyOwner {\n', '        emergency = false;\n', '        emit EmergencyResolved(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @param _token pool token\n', '     * @param _weight pool weight\n', '     */\n', '    function addPool(\n', '        string memory _name,\n', '        IERC20 _token,\n', '        uint256 _weight\n', '    ) public override onlyOwner {\n', '        totalWeight = totalWeight.add(_weight);\n', '\n', '        uint256 index = pools.length;\n', '        indexByToken[address(_token)].push(index);\n', '\n', '        pools.push(\n', '            Pool({name: _name, token: _token, weight: _weight, totalSupply: 0})\n', '        );\n', '        emit PoolAdded(_msgSender(), index, _name, address(_token), _weight);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _weight target pool weight\n', '     */\n', '    function setPool(uint256 _pid, uint256 _weight)\n', '        public\n', '        override\n', '        checkPoolId(_pid)\n', '        onlyOwner\n', '    {\n', '        Pool memory pool = pools[_pid];\n', '\n', '        uint256 oldWeight = pool.weight;\n', '        totalWeight = totalWeight.add(_weight).sub(pool.weight);\n', '        pool.weight = _weight;\n', '\n', '        pools[_pid] = pool;\n', '\n', '        emit PoolWeightChanged(_msgSender(), _pid, oldWeight, _weight);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _name name of pool\n', '     */\n', '    function setPool(uint256 _pid, string memory _name)\n', '        public\n', '        override\n', '        checkPoolId(_pid)\n', '        onlyOwner\n', '    {\n', '        string memory oldName = pools[_pid].name;\n', '        pools[_pid].name = _name;\n', '\n', '        emit PoolNameChanged(_msgSender(), _pid, oldName, _name);\n', '    }\n', '\n', '    /* ================= MODIFIER ================= */\n', '\n', '    modifier checkPoolId(uint256 _pid) {\n', "        require(_pid <= pools.length, 'PoolStore: invalid pid');\n", '\n', '        _;\n', '    }\n', '\n', '    /* ================= CALLS - ANYONE ================= */\n', '    /**\n', '     * @return total pool length\n', '     */\n', '    function poolLength() public view override returns (uint256) {\n', '        return pools.length;\n', '    }\n', '\n', '    /**\n', '     * @param _token pool token address\n', '     * @return pool id\n', '     */\n', '    function poolIdsOf(address _token)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256[] memory)\n', '    {\n', '        return indexByToken[_token];\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return name of pool\n', '     */\n', '    function nameOf(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        checkPoolId(_pid)\n', '        returns (string memory)\n', '    {\n', '        return pools[_pid].name;\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return pool token\n', '     */\n', '    function tokenOf(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        checkPoolId(_pid)\n', '        returns (address)\n', '    {\n', '        return address(pools[_pid].token);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return pool weight\n', '     */\n', '    function weightOf(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        checkPoolId(_pid)\n', '        returns (uint256)\n', '    {\n', '        return pools[_pid].weight;\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return total staked token amount\n', '     */\n', '    function totalSupply(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        checkPoolId(_pid)\n', '        returns (uint256)\n', '    {\n', '        return pools[_pid].totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _sender staker address\n', '     * @return staked amount of user\n', '     */\n', '    function balanceOf(uint256 _pid, address _sender)\n', '        public\n', '        view\n', '        override\n', '        checkPoolId(_pid)\n', '        returns (uint256)\n', '    {\n', '        return balances[_pid][_sender];\n', '    }\n', '\n', '    /* ================= TXNS - OPERATOR ONLY ================= */\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _owner stake address\n', '     * @param _amount stake amount\n', '     */\n', '    function deposit(\n', '        uint256 _pid,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) public override checkPoolId(_pid) onlyOperator {\n', '        pools[_pid].totalSupply = pools[_pid].totalSupply.add(_amount);\n', '        balances[_pid][_owner] = balances[_pid][_owner].add(_amount);\n', '        IERC20(tokenOf(_pid)).safeTransferFrom(\n', '            _msgSender(),\n', '            address(this),\n', '            _amount\n', '        );\n', '\n', '        emit Deposit(_msgSender(), _owner, _pid, _amount);\n', '    }\n', '\n', '    function _withdraw(\n', '        uint256 _pid,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) internal {\n', '        pools[_pid].totalSupply = pools[_pid].totalSupply.sub(_amount);\n', '        balances[_pid][_owner] = balances[_pid][_owner].sub(_amount);\n', '        IERC20(tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\n', '\n', '        emit Withdraw(_msgSender(), _owner, _pid, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _owner stake address\n', '     * @param _amount stake amount\n', '     */\n', '    function withdraw(\n', '        uint256 _pid,\n', '        address _owner,\n', '        uint256 _amount\n', '    ) public override checkPoolId(_pid) onlyOperator {\n', '        _withdraw(_pid, _owner, _amount);\n', '    }\n', '\n', '    /**\n', '     * @notice Anyone can withdraw its balance even if is not the operator\n', '     * @param _pid pool id\n', '     */\n', '    function emergencyWithdraw(uint256 _pid) public override checkPoolId(_pid) {\n', "        require(emergency, 'PoolStore: not in emergency');\n", '        _withdraw(_pid, msg.sender, balanceOf(_pid, _msgSender()));\n', '    }\n', '}\n', '\n', '// File contracts/distribution/v2/PoolStoreWrapper.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'abstract contract PoolStoreWrapper is Context {\n', '    using SafeERC20 for IERC20;\n', '\n', '    IPoolStore public store;\n', '\n', '    function deposit(uint256 _pid, uint256 _amount) public virtual {\n', '        IERC20 token = IERC20(store.tokenOf(_pid));\n', '        token.safeTransferFrom(_msgSender(), address(this), _amount);\n', '        token.safeIncreaseAllowance(address(store), _amount);\n', '        store.deposit(_pid, _msgSender(), _amount);\n', '    }\n', '\n', '    function withdraw(uint256 _pid, uint256 _amount) public virtual {\n', '        store.withdraw(_pid, _msgSender(), _amount);\n', '        IERC20(store.tokenOf(_pid)).safeTransfer(_msgSender(), _amount);\n', '    }\n', '}\n', '\n', '// File contracts/distribution/v2/BASPool.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'contract BASPool is IPool, IPoolGov, PoolStoreWrapper, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    /* ================= DATA STRUCTURE ================= */\n', '\n', '    struct User {\n', '        uint256 amount;\n', '        uint256 reward;\n', '        uint256 rewardPerTokenPaid;\n', '    }\n', '    struct Pool {\n', '        uint256 lastUpdateTime;\n', '        uint256 rewardPerTokenStored;\n', '    }\n', '\n', '    /* ================= STATE VARIABLES ================= */\n', '\n', '    // share\n', '    address public share;\n', '    // poolId => Pool\n', '    mapping(uint256 => Pool) public pools;\n', '    // poolId => sender => User\n', '    mapping(uint256 => mapping(address => User)) public users;\n', '\n', '    uint256 public rewardRate = 0;\n', '    uint256 public periodFinish = 0;\n', '    uint256 public startTime = 0;\n', '\n', '    /* ================= CONSTRUCTOR ================= */\n', '\n', '    constructor(\n', '        address _share,\n', '        address _poolStore,\n', '        uint256 _startTime\n', '    ) Ownable() {\n', '        share = _share;\n', '        store = IPoolStore(_poolStore);\n', '        startTime = _startTime;\n', '    }\n', '\n', '    /* ================= GOV - OWNER ONLY ================= */\n', '\n', '    /**\n', '     * @param _amount token amount to distribute\n', '     * @param _period distribution period\n', '     */\n', '    function notifyReward(uint256 _amount, uint256 _period)\n', '        public\n', '        override\n', '        onlyOwner\n', '    {\n', '        IERC20(share).safeTransferFrom(_msgSender(), address(this), _amount);\n', '\n', '        if (block.timestamp > startTime) {\n', '            if (block.timestamp >= periodFinish) {\n', '                rewardRate = _amount.div(_period);\n', '                periodFinish = block.timestamp.add(_period);\n', '            } else {\n', '                uint256 remaining = periodFinish.sub(block.timestamp);\n', '                uint256 leftover = remaining.mul(rewardRate);\n', '                rewardRate = _amount.add(leftover).div(\n', '                    periodFinish.add(_period).sub(block.timestamp)\n', '                );\n', '                periodFinish = periodFinish.add(_period);\n', '            }\n', '        } else {\n', '            rewardRate = rewardRate.add(_amount.div(_period));\n', '            periodFinish = startTime.add(_period);\n', '        }\n', '\n', '        emit RewardNotified(_msgSender(), _amount, _period);\n', '    }\n', '\n', '    /* ================= MODIFIER ================= */\n', '\n', '    modifier checkStart() {\n', "        require(block.timestamp >= startTime, 'BASPool: not started');\n", '\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _target update target. if is empty, skip individual update.\n', '     */\n', '    modifier updateReward(uint256 _pid, address _target) {\n', '        Pool memory pool = pools[_pid];\n', '\n', '        if (pool.lastUpdateTime == 0) {\n', '            pool.lastUpdateTime = startTime;\n', '        }\n', '\n', '        pool.rewardPerTokenStored = rewardPerToken(_pid);\n', '        pool.lastUpdateTime = applicableRewardTime();\n', '        pools[_pid] = pool;\n', '\n', '        if (_target != address(0x0)) {\n', '            User memory user = users[_pid][_target];\n', '            user.reward = rewardEarned(_pid, _target);\n', '            user.rewardPerTokenPaid = pool.rewardPerTokenStored;\n', '            users[_pid][_target] = user;\n', '        }\n', '\n', '        _;\n', '    }\n', '\n', '    /* ================= CALLS - ANYONE ================= */\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return pool token address\n', '     */\n', '    function tokenOf(uint256 _pid) external view override returns (address) {\n', '        return store.tokenOf(_pid);\n', '    }\n', '\n', '    /**\n', '     * @param _token pool token address\n', '     * @return pool id\n', '     */\n', '    function poolIdsOf(address _token)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256[] memory)\n', '    {\n', '        return store.poolIdsOf(_token);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', "     * @return pool's total staked amount\n", '     */\n', '    function totalSupply(uint256 _pid)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return store.totalSupply(_pid);\n', '    }\n', '\n', '    /**\n', '     * @param _owner staker address\n', '     * @return staker balance\n', '     */\n', '    function balanceOf(uint256 _pid, address _owner)\n', '        external\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return store.balanceOf(_pid, _owner);\n', '    }\n', '\n', '    /**\n', '     * @return applicable reward time\n', '     */\n', '    function applicableRewardTime() public view returns (uint256) {\n', '        return Math.min(block.timestamp, periodFinish);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return calculated reward rate per pool\n', '     */\n', '    function rewardRatePerPool(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        return rewardRate.mul(store.weightOf(_pid)).div(store.totalWeight());\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @return RPT per pool\n', '     */\n', '    function rewardPerToken(uint256 _pid)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        Pool memory pool = pools[_pid];\n', '        if (store.totalSupply(_pid) == 0) {\n', '            return pool.rewardPerTokenStored;\n', '        }\n', '        return\n', '            pool.rewardPerTokenStored.add(\n', '                applicableRewardTime()\n', '                    .sub(pool.lastUpdateTime)\n', '                    .mul(rewardRatePerPool(_pid))\n', '                    .mul(1e18)\n', '                    .div(store.totalSupply(_pid))\n', '            );\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _target target address\n', '     * @return reward amount per pool\n', '     */\n', '    function rewardEarned(uint256 _pid, address _target)\n', '        public\n', '        view\n', '        override\n', '        returns (uint256)\n', '    {\n', '        User memory user = users[_pid][_target];\n', '        return\n', '            store\n', '                .balanceOf(_pid, _target)\n', '                .mul(rewardPerToken(_pid).sub(user.rewardPerTokenPaid))\n', '                .div(1e18)\n', '                .add(user.reward);\n', '    }\n', '\n', '    /* ================= TXNS - ANYONE ================= */\n', '\n', '    /**\n', '     * @param _pids array of pool ids\n', '     */\n', '    function massUpdate(uint256[] memory _pids) public override {\n', '        for (uint256 i = 0; i < _pids.length; i++) {\n', '            update(_pids[i]);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     */\n', '    function update(uint256 _pid)\n', '        public\n', '        override\n', '        checkStart\n', '        updateReward(_pid, address(0x0))\n', '    {}\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _amount deposit amount\n', '     */\n', '    function deposit(uint256 _pid, uint256 _amount)\n', '        public\n', '        override(IPool, PoolStoreWrapper)\n', '        checkStart\n', '        updateReward(_pid, _msgSender())\n', '    {\n', '        super.deposit(_pid, _amount);\n', '        emit DepositToken(_msgSender(), _pid, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     * @param _amount withdraw amount\n', '     */\n', '    function withdraw(uint256 _pid, uint256 _amount)\n', '        public\n', '        override(IPool, PoolStoreWrapper)\n', '        checkStart\n', '        updateReward(_pid, _msgSender())\n', '    {\n', '        super.withdraw(_pid, _amount);\n', '        emit WithdrawToken(_msgSender(), _pid, _amount);\n', '    }\n', '\n', '    /**\n', '     * @param _pid pool id\n', '     */\n', '    function claimReward(uint256 _pid)\n', '        public\n', '        override\n', '        updateReward(_pid, _msgSender())\n', '    {\n', '        uint256 reward = users[_pid][_msgSender()].reward;\n', '        if (reward > 0) {\n', '            users[_pid][_msgSender()].reward = 0;\n', '            IERC20(share).safeTransfer(_msgSender(), reward);\n', '            emit RewardClaimed(_msgSender(), _pid, reward);\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev withdraw + claim\n', '     * @param _pid pool id\n', '     */\n', '    function exit(uint256 _pid) external override {\n', '        withdraw(_pid, store.balanceOf(_pid, _msgSender()));\n', '        claimReward(_pid);\n', '    }\n', '}\n', '\n', '// File contracts/migration/Feeder.sol\n', '\n', 'pragma solidity >=0.7.0 <0.8.0;\n', '\n', 'interface IFeeder {\n', '    /* ================= EVENTS ================= */\n', '\n', '    event Feeded(address indexed operator, uint256 weightA, uint256 weightB);\n', '\n', '    /* ================= TXNS ================= */\n', '\n', '    function feed() external;\n', '}\n', '\n', 'contract Feeder is IFeeder, Ownable {\n', '    using SafeMath for uint256;\n', '    using SafeERC20 for IERC20;\n', '\n', '    IERC20 public v1BAS;\n', '    IERC20 public v2BAS;\n', '    IERC20 public v2BASLP;\n', '\n', '    address public v1BACPool;\n', '    address public v1BASPool;\n', '    address public v2BASPool;\n', '    address public v2BASPoolStore;\n', '\n', '    address public v2Boardroom;\n', '\n', '    uint256 public v2BASPoolId;\n', '    uint256 public v2BASLPPoolId;\n', '\n', '    uint256 public startTime;\n', '    uint256 public expiry;\n', '\n', '    constructor(\n', '        address _v1BAS,\n', '        address _v2BAS,\n', '        address _v2BASLP,\n', '        address _v1BACPool,\n', '        address _v1BASPool,\n', '        address _v2BASPool,\n', '        address _v2BASPoolStore,\n', '        address _v2Boardroom,\n', '        uint256 _startTime,\n', '        uint256 _period\n', '    ) Ownable() {\n', '        // tokens\n', '        v1BAS = IERC20(_v1BAS);\n', '        v2BAS = IERC20(_v2BAS);\n', '        v2BASLP = IERC20(_v2BASLP);\n', '\n', '        // pools\n', '        v1BACPool = _v1BACPool;\n', '        v1BASPool = _v1BASPool;\n', '        v2BASPool = _v2BASPool;\n', '        v2BASPoolStore = _v2BASPoolStore;\n', '\n', '        // boardroom\n', '        v2Boardroom = _v2Boardroom;\n', '\n', '        // pool id\n', '        v2BASPoolId = IPoolStore(_v2BASPoolStore).poolIdsOf(_v2BAS)[0];\n', '        v2BASLPPoolId = IPoolStore(_v2BASPoolStore).poolIdsOf(_v2BASLP)[0];\n', '\n', '        // params\n', '        startTime = _startTime;\n', '        expiry = _startTime.add(_period);\n', '    }\n', '\n', '    function update(uint256 weight1, uint256 weight2) internal {\n', '        IPoolStoreGov(v2BASPoolStore).setPool(v2BASPoolId, weight1);\n', '        IPoolStoreGov(v2BASPoolStore).setPool(v2BASLPPoolId, weight2);\n', '\n', '        IPool(v2BASPool).update(v2BASPoolId);\n', '        IPool(v2BASPool).update(v2BASLPPoolId);\n', '\n', '        IBoardroomV2(v2Boardroom).collectReward();\n', '    }\n', '\n', '    function feed() external override {\n', "        require(block.timestamp >= startTime, 'Feeder: not started');\n", "        require(block.timestamp < expiry, 'Feeder: finished');\n", '\n', '        uint256 v1Supply =\n', '            v1BAS.totalSupply().sub(v1BAS.balanceOf(v1BACPool)).sub(\n', '                v1BAS.balanceOf(v1BASPool)\n', '            );\n', '        uint256 v2Supply = v2BAS.totalSupply();\n', '\n', '        uint256 ratioA = v2Supply.mul(1e18).div(v1Supply); // LP\n', '        uint256 ratioB = uint256(1e18).sub(ratioA); // Vanlia\n', '\n', '        update(ratioB, ratioA);\n', '\n', '        emit Feeded(msg.sender, ratioB, ratioA);\n', '    }\n', '\n', '    function finalize() external onlyOwner {\n', "        require(block.timestamp >= expiry, 'Feeder: not finished');\n", '\n', '        update(1e18, 0);\n', '        Ownable(v2BASPoolStore).transferOwnership(_msgSender());\n', '    }\n', '}']