['/**\n', ' *Submitted for verification at Etherscan.io on 2021-06-07\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity =0.7.6;  \n', 'pragma experimental ABIEncoderV2;\n', '\n', '\n', 'abstract contract IDSProxy {\n', '    // function execute(bytes memory _code, bytes memory _data)\n', '    //     public\n', '    //     payable\n', '    //     virtual\n', '    //     returns (address, bytes32);\n', '\n', '    function execute(address _target, bytes memory _data) public payable virtual returns (bytes32);\n', '\n', '    function setCache(address _cacheAddr) public payable virtual returns (bool);\n', '\n', '    function owner() public view virtual returns (address);\n', '}  \n', '\n', '\n', '\n', 'abstract contract DSGuard {\n', '    function canCall(\n', '        address src_,\n', '        address dst_,\n', '        bytes4 sig\n', '    ) public view virtual returns (bool);\n', '\n', '    function permit(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function forbid(\n', '        bytes32 src,\n', '        bytes32 dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function permit(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '\n', '    function forbid(\n', '        address src,\n', '        address dst,\n', '        bytes32 sig\n', '    ) public virtual;\n', '}\n', '\n', 'abstract contract DSGuardFactory {\n', '    function newGuard() public virtual returns (DSGuard guard);\n', '}  \n', '\n', '\n', '\n', 'abstract contract DSAuthority {\n', '    function canCall(\n', '        address src,\n', '        address dst,\n', '        bytes4 sig\n', '    ) public view virtual returns (bool);\n', '}  \n', '\n', '\n', '\n', '\n', '\n', 'contract DSAuthEvents {\n', '    event LogSetAuthority(address indexed authority);\n', '    event LogSetOwner(address indexed owner);\n', '}\n', '\n', 'contract DSAuth is DSAuthEvents {\n', '    DSAuthority public authority;\n', '    address public owner;\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '        emit LogSetOwner(msg.sender);\n', '    }\n', '\n', '    function setOwner(address owner_) public auth {\n', '        owner = owner_;\n', '        emit LogSetOwner(owner);\n', '    }\n', '\n', '    function setAuthority(DSAuthority authority_) public auth {\n', '        authority = authority_;\n', '        emit LogSetAuthority(address(authority));\n', '    }\n', '\n', '    modifier auth {\n', '        require(isAuthorized(msg.sender, msg.sig), "Not authorized");\n', '        _;\n', '    }\n', '\n', '    function isAuthorized(address src, bytes4 sig) internal view returns (bool) {\n', '        if (src == address(this)) {\n', '            return true;\n', '        } else if (src == owner) {\n', '            return true;\n', '        } else if (authority == DSAuthority(0)) {\n', '            return false;\n', '        } else {\n', '            return authority.canCall(src, address(this), sig);\n', '        }\n', '    }\n', '}  \n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DSProxyView {\n', '    function checkDSGuardOwner(address _proxy) public view returns (bool) {\n', '        address currAuthority = address(DSAuth(_proxy).authority());\n', '\n', '        return DSAuth(currAuthority).owner() == _proxy;\n', '    }\n', '}']