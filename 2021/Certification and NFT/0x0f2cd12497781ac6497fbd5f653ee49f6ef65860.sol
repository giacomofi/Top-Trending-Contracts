['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at Etherscan.io on 2020-10-18\n', '*/\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', 'interface RMU {\n', '    function safeTransferFrom(address _from, address _to, uint256 _id, uint256 _amount, bytes calldata _data) external;\n', '    function safeBatchTransferFrom(address _from, address _to, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external;\n', '    function setApprovalForAll(address _operator, bool _approved) external;\n', '    function isApprovedForAll(address _owner, address _operator) external view returns (bool isOperator);\n', '    function balanceOf(address _owner, uint256 _id) external view returns (uint256);\n', '    function mintBatch(address user, uint256[] calldata ids, uint256[] calldata amounts) external;\n', '    function burn(\n', '        address _account,\n', '        uint256 _id,\n', '        uint256 _amount\n', '    ) external;\n', '}\n', '\n', 'interface Toshicash {\n', '    function totalSupply() external view returns (uint256);\n', '    function totalClaimed() external view returns (uint256);\n', '    function addClaimed(uint256 _amount) external;\n', '    function setClaimed(uint256 _amount) external;\n', '    function transfer(address receiver, uint numTokens) external returns (bool);\n', '    function transferFrom(address owner, address buyer, uint numTokens) external returns (bool);\n', '    function balanceOf(address owner) external view returns (uint256);\n', '    function mint(address _to, uint256 _amount) external;\n', '    function burn(address _account, uint256 value) external;\n', '}\n', '\n', '\n', '/**\n', " *  This contract was forked from Rope's VendingMachine contract:\n", ' *  https://etherscan.io/address/0x4c842514fb55323acc51aa575ec4b7d1be1e0694#code\n', ' *\n', ' *  All code attribution goes to Rope and the Rope development team:\n', ' *  https://rope.lol\n', ' */\n', '\n', 'contract CardKeeper is Ownable {\n', '    using SafeMath for uint256;\n', '\n', '    struct CardSet {\n', '        uint256[] cardIds;\n', '        uint256 toshicashPerDayPerCard;\n', '    }\n', '\n', '    RMU public ropeMaker;\n', '    Toshicash public toshicash;\n', '\n', '    uint256[] public cardSetList;\n', '    uint256 public highestCardId;\n', '    mapping (uint256 => CardSet) public cardSets;\n', '    mapping (uint256 => uint256) public cardToSetMap;\n', '\n', '    mapping (address => mapping(uint256 => uint256)) public userCards;\n', '    mapping (address => uint256) public userLastUpdate;\n', '    \n', '    mapping(uint256 => mapping(address => UserInfoERC1155)) public userInfoERC1155;\n', '    mapping(uint256 => uint256) public eRC1155MultiplierIds;\n', '    mapping(address => ERC1155MultiplierUserInfo) public userMultiplier;\n', '\n', '    event Stake(address indexed user, uint256[] cardIds,  uint256[] amounts);\n', '    event Unstake(address indexed user, uint256[] cardIds,  uint256[] amounts);\n', '    event Harvest(address indexed user, uint256 amount);\n', '    \n', '\n', '        struct UserInfoERC1155 {\n', '        uint256 amountInPool;\n', '        \n', '        /*\n', '         *  At any point in time, the amount of ToshiCoin earned by a user waiting to be claimed is:\n', '         *\n', '         *    Pending claim = (user.amountInPool * pool.coinsEarnedPerToken) - user.coinsReceivedToDate\n', '         *\n', '         *  Whenever a user deposits or withdraws tokens to a pool, the following occurs:\n', "         *   1. The pool's `coinsEarnedPerToken` is rebalanced to account for the new shares in the pool.\n", '         *   2. The `lastRewardBlock` is updated to the latest block.\n', '         *   3. The user receives the pending claim sent to their address.\n', "         *   4. The user's `amountInPool` and `coinsReceivedToDate` get updated for this pool.\n", '         */\n', '    }\n', '        struct ERC1155Multiplier {\n', '        uint256 id;\n', '        uint256 percentBoost;\n', '       \n', '    }\n', '    struct ERC1155MultiplierUserInfo {\n', '        uint256 multiplier;\n', '        uint256 total;\n', '       \n', '    }\n', '\n', '    ERC1155Multiplier[] public eRC1155Multiplier;\n', '\n', '\n', '    constructor(RMU _ropeMakerAddr, Toshicash _toshicashAddr) public {\n', '        ropeMaker = _ropeMakerAddr;\n', '        toshicash = _toshicashAddr;\n', '\n', '    }\n', '\n', '    // Utility function to check if a value is inside an array\n', '    function _isInArray(uint256 _value, uint256[] memory _array) internal pure returns(bool) {\n', '        uint256 length = _array.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            if (_array[i] == _value) {\n', '                return true;\n', '            }\n', '        }\n', '\n', '        return false;\n', '    }\n', '\n', '    // Index of the value in the return array is the cardId, value is whether card is staked or not\n', '    function getCardsStakedOfAddress(address _user) public view returns(uint256[] memory) {\n', '        uint256[] memory cardsStaked = new uint256[](highestCardId + 1);\n', '\n', '        for (uint256 i = 0; i < highestCardId + 1; ++i) {\n', '            cardsStaked[i] = userCards[_user][i];\n', '        }\n', '\n', '        return cardsStaked;\n', '    }\n', '\n', '    // Returns the list of cardIds which are part of a set\n', '    function getCardIdListOfSet(uint256 _setId) external view returns(uint256[] memory) {\n', '        return cardSets[_setId].cardIds;\n', '    }\n', '\n', '\n', '    function addCardSet(uint256 _setId, uint256[] memory _cardIds, uint256 _toshicashPerDayPerCard) public onlyOwner {\n', '       \n', '\n', '        uint256 length = _cardIds.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            uint256 cardId = _cardIds[i];\n', '\n', '            if (cardId > highestCardId) {\n', '                highestCardId = cardId;\n', '            }\n', '\n', '            // Check all cards to assign arent already part of another set\n', '            require(cardToSetMap[cardId] == 0, "Card already assigned to a set");\n', '\n', '            // Assign to set\n', '            cardToSetMap[cardId] = _setId;\n', '        }\n', '\n', '        if (_isInArray(_setId, cardSetList) == false) {\n', '            cardSetList.push(_setId);\n', '        }\n', '\n', '        cardSets[_setId] = CardSet({\n', '            cardIds: _cardIds,\n', '            toshicashPerDayPerCard: _toshicashPerDayPerCard\n', '        });\n', '    }\n', '\n', '\n', '\n', '    // Returns the total toshicash pending for a given address\n', '    // Can include the bonus from toshicashBooster or not\n', '    function totalPendingToshicashOfAddress(address _user, bool _includeToshicashBooster) public view returns (uint256) {\n', '        uint256 totalToshicashPerDay = 0;\n', '\n', '        uint256 length = cardSetList.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            uint256 setId = cardSetList[i];\n', '            CardSet storage set = cardSets[setId];\n', '\n', '            uint256 cardLength = set.cardIds.length;\n', '\n', '            uint256 setToshicashPerDay = 0;\n', '            for (uint256 j = 0; j < cardLength; ++j) {\n', '\n', '\n', '                setToshicashPerDay = setToshicashPerDay.add(set.toshicashPerDayPerCard.mul(userCards[_user][set.cardIds[j]]));\n', '            }\n', '\n', '\n', '            totalToshicashPerDay = totalToshicashPerDay.add(setToshicashPerDay);\n', '        }\n', '\n', '        // Apply toshicashBooster bonus\n', '        if (_includeToshicashBooster) {\n', '            uint256 toAdd = 0;\n', '            totalToshicashPerDay = totalToshicashPerDay.add(toAdd);\n', '        }\n', '\n', '        uint256 lastUpdate = userLastUpdate[_user];\n', '        uint256 blockTime = block.timestamp;\n', '        return blockTime.sub(lastUpdate).mul(totalToshicashPerDay.div(86400));\n', '    }\n', '\n', '\n', '    //////////////////////////////\n', '    //////////////////////////////\n', '    //////////////////////////////\n', '\n', '    // Set manually the highestCardId, in case there has been a mistake while adding a set\n', '    // (This value is used to know the range in which iterate to get the list of staked cards for an address)\n', '    function setHighestCardId(uint256 _highestId) public onlyOwner {\n', '        require(_highestId > 0);\n', '        highestCardId = _highestId;\n', '    }\n', '\n', '\n', '\n', '\n', '    // Set the toshicashPerDayPerCard value for a list of sets\n', '    function setToshicashRateOfSets(uint256[] memory _setIds, uint256[] memory _toshicashPerDayPerCard) public onlyOwner {\n', '        require(_setIds.length == _toshicashPerDayPerCard.length, "_setId and _toshicashPerDayPerCard have different length");\n', '\n', '        for (uint256 i = 0; i < _setIds.length; ++i) {\n', '            require(cardSets[_setIds[i]].cardIds.length > 0, "Set is empty");\n', '            cardSets[_setIds[i]].toshicashPerDayPerCard = _toshicashPerDayPerCard[i];\n', '        }\n', '    }\n', '\n', '\n', '    function harvest() public {\n', '        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\n', '        uint256 pendingToshicash = totalPendingToshicashOfAddress(msg.sender, true);\n', '        userLastUpdate[msg.sender] = block.timestamp;\n', '        pendingToshicash = pendingToshicash.add( pendingToshicash.mul(multiplier.multiplier).div( 100));\n', '        if (pendingToshicash > 0) {\n', '            toshicash.mint(msg.sender, pendingToshicash);\n', '        }\n', '\n', '        emit Harvest(msg.sender, pendingToshicash);\n', '    }\n', '\n', '    function stake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {\n', '        require(_cardIds.length > 0, "_cardIds array empty");\n', '\n', '        harvest();\n', '\n', '        for (uint256 i = 0; i < _cardIds.length; ++i) {\n', '\n', '            require(cardToSetMap[_cardIds[i]] != 0, "Card is not part of any set");\n', '        }\n', '\n', '        \n', '        ropeMaker.mintBatch(address(this), _cardIds, _cardAmounts);\n', '\n', '        for (uint256 i = 0; i < _cardIds.length; ++i) {\n', '            userCards[msg.sender][_cardIds[i]] = userCards[msg.sender][_cardIds[i]].add(_cardAmounts[i]);\n', '            ropeMaker.burn(msg.sender, _cardIds[i], _cardAmounts[i]);\n', '        }\n', '\n', '        emit Stake(msg.sender, _cardIds, _cardAmounts);\n', '    }\n', '\n', '\n', '    function unstake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {\n', '        require(_cardIds.length > 0, "_cardIds array empty");\n', '\n', '        harvest();\n', '\n', '        for (uint256 i = 0; i < _cardIds.length; ++i) {\n', '            require(userCards[msg.sender][_cardIds[i]] >= _cardAmounts[i], "Card not staked");\n', '            userCards[msg.sender][_cardIds[i]] = userCards[msg.sender][_cardIds[i]].sub(_cardAmounts[i]);\n', '            ropeMaker.burn(address(this), _cardIds[i], _cardAmounts[i]);\n', '        }\n', '\n', '        \n', '        ropeMaker.mintBatch(msg.sender, _cardIds, _cardAmounts);\n', '        \n', '\n', '        emit Unstake(msg.sender, _cardIds, _cardAmounts);\n', '    }\n', '\n', '    // Withdraw without rewards\n', '    function emergencyUnstake(uint256[] memory _cardIds, uint256[] memory _cardAmounts) public {\n', '        userLastUpdate[msg.sender] = block.timestamp;\n', '\n', '        uint256 length = _cardIds.length;\n', '        for (uint256 i = 0; i < length; ++i) {\n', '            uint256 cardId = _cardIds[i];\n', '\n', '            require(userCards[msg.sender][cardId] >= _cardAmounts[i], "Card not staked");\n', '            userCards[msg.sender][cardId] = userCards[msg.sender][cardId].sub(_cardAmounts[i]);\n', '        }\n', '\n', '        ropeMaker.safeBatchTransferFrom(address(this), msg.sender, _cardIds, _cardAmounts, "");\n', '    }\n', '\n', '    function userMultiplierValue(address user) public view returns (uint256) {\n', '\n', '        return userMultiplier[msg.sender].multiplier;\n', '    }\n', '    \n', '    function userERC155StakedTotal(address user) public view returns (uint256) {\n', '\n', '        return userMultiplier[msg.sender].total;\n', '    }\n', '    function addERC1155Multiplier(uint256 _id, uint256 _percentBoost) public onlyOwner {\n', '        require(\n', '            eRC1155MultiplierIds[_id] == 0,\n', '            "ToshiCashFarm: Cannot add duplicate Toshimon ERC1155"\n', '        );\n', '\n', '        eRC1155Multiplier.push(\n', '            ERC1155Multiplier({\n', '                id:_id,\n', '                percentBoost: _percentBoost\n', '            })\n', '        );\n', '\n', '        eRC1155MultiplierIds[_id] = 1;\n', '    }\n', '      /**\n', '     * @dev Deposit tokens into a pool and claim pending reward.\n', '     */\n', '    function depositERC1155(uint256 poolId, uint256 quantity) public {\n', '\n', '        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];\n', '        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];\n', '        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\n', '         uint256[] memory cardid = new uint256[](1);\n', '         uint256[] memory cardamount = new uint256[](1);\n', '        cardid[0] = erc1155.id;\n', '        cardamount[0] = quantity;\n', '\n', '         \n', '        harvest();\n', '        \n', '        ropeMaker.burn(msg.sender, erc1155.id, quantity);\n', '\n', '\n', '        \n', '        ropeMaker.mintBatch(address(this), cardid, cardamount);\n', '        \n', '        \n', '        user.amountInPool = user.amountInPool.add(quantity);\n', '        multiplier.multiplier = multiplier.multiplier.add(erc1155.percentBoost.mul(quantity));\n', '        multiplier.total = multiplier.total.add(erc1155.percentBoost.mul(quantity));\n', '        if(multiplier.multiplier > 100){\n', '            multiplier.multiplier = 100;\n', '        }\n', '\n', '    }\n', '      /**\n', '     * @dev Deposit tokens into a pool and claim pending reward.\n', '     */\n', '    function withdrawERC1155(uint256 poolId, uint256 quantity) public {\n', '\n', '        ERC1155Multiplier storage erc1155 = eRC1155Multiplier[poolId];\n', '        UserInfoERC1155 storage user = userInfoERC1155[poolId][msg.sender];\n', '        ERC1155MultiplierUserInfo storage multiplier = userMultiplier[msg.sender];\n', '        \n', '        \n', '        require(\n', '            user.amountInPool >= quantity,\n', '            "ToshiCoinFarm: User does not have enough NFTS to withdraw from this pool"\n', '        );\n', '        harvest();\n', '        \n', '        user.amountInPool = user.amountInPool.sub(quantity);\n', '        \n', '        \n', '        multiplier.total = multiplier.total.sub(erc1155.percentBoost.mul(quantity));\n', '        multiplier.multiplier = multiplier.total.mul(quantity);\n', '        if(multiplier.multiplier > 100){\n', '            multiplier.multiplier = 100;\n', '        }\n', '        \n', '        ropeMaker.burn(address(this), erc1155.id, quantity);\n', '         uint256[] memory cardid = new uint256[](1);\n', '         uint256[] memory cardamount = new uint256[](1);\n', '        cardid[0] = erc1155.id;\n', '        cardamount[0] = quantity;\n', '\n', '        \n', '        ropeMaker.mintBatch(msg.sender, cardid, cardamount);\n', '        \n', '\n', '\n', '    }\n', '\n', '\n', '\n', '    /////////\n', '    /////////\n', '    /////////\n', '\n', '    /**\n', '     * @notice Handle the receipt of a single ERC1155 token type\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeTransferFrom` after the balance has been updated\n', '     * This function MAY throw to revert and reject the transfer\n', '     * Return of other amount than the magic value MUST result in the transaction being reverted\n', '     * Note: The token contract address is always the message sender\n', '     * @param _operator  The address which called the `safeTransferFrom` function\n', '     * @param _from      The address which previously owned the token\n', '     * @param _id        The id of the token being transferred\n', '     * @param _amount    The amount of tokens being transferred\n', '     * @param _data      Additional data with no specified format\n', '     * @return           `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)"))`\n', '     */\n', '    function onERC1155Received(address _operator, address _from, uint256 _id, uint256 _amount, bytes calldata _data) external returns(bytes4) {\n', '        return 0xf23a6e61;\n', '    }\n', '\n', '    /**\n', '     * @notice Handle the receipt of multiple ERC1155 token types\n', '     * @dev An ERC1155-compliant smart contract MUST call this function on the token recipient contract, at the end of a `safeBatchTransferFrom` after the balances have been updated\n', '     * This function MAY throw to revert and reject the transfer\n', '     * Return of other amount than the magic value WILL result in the transaction being reverted\n', '     * Note: The token contract address is always the message sender\n', '     * @param _operator  The address which called the `safeBatchTransferFrom` function\n', '     * @param _from      The address which previously owned the token\n', '     * @param _ids       An array containing ids of each token being transferred\n', '     * @param _amounts   An array containing amounts of each token being transferred\n', '     * @param _data      Additional data with no specified format\n', '     * @return           `bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`\n', '     */\n', '    function onERC1155BatchReceived(address _operator, address _from, uint256[] calldata _ids, uint256[] calldata _amounts, bytes calldata _data) external returns(bytes4) {\n', '        return 0xbc197c81;\n', '    }\n', '\n', '    /**\n', '     * @notice Indicates whether a contract implements the `ERC1155TokenReceiver` functions and so can accept ERC1155 token types.\n', '     * @param  interfaceID The ERC-165 interface ID that is queried for support.s\n', '     * @dev This function MUST return true if it implements the ERC1155TokenReceiver interface and ERC-165 interface.\n', '     *      This function MUST NOT consume more than 5,000 gas.\n', '     * @return Wheter ERC-165 or ERC1155TokenReceiver interfaces are supported.\n', '     */\n', '    function supportsInterface(bytes4 interfaceID) external view returns (bool) {\n', "        return  interfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\n", '        interfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256("onERC1155Received(address,address,uint256,uint256,bytes)")) ^ bytes4(keccak256("onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"))`).\n', '    }\n', '}']