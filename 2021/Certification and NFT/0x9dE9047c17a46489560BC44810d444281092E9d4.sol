['// SPDX-License-Identifier: GPL-3.0\n', 'pragma solidity >=0.8.0 <0.9.0;\n', '\n', 'import "./CoinvestingDeFiToken.sol";\n', 'import "./Ownable.sol";\n', '\n', 'contract CoinvestingDeFiTokenSale is Ownable {\n', '    // Public variables\n', '    CoinvestingDeFiToken public tokenContract;\n', '    uint public bonusLevelOne = 50;\n', '    uint public bonusLevelTwo = 35;\n', '    uint public bonusLevelThree = 20;\n', '    uint public bonusLevelFour = 5;\n', '    uint public calculatedBonus;    \n', '    uint public levelOneDate;\n', '    uint public levelTwoDate;\n', '    uint public levelThreeDate;\n', '    uint public levelFourDate;\n', '    uint public tokenBonus;\n', '    uint public tokenPrice;\n', '    uint public tokenSale;\n', '    uint public tokensSold;\n', '    \n', '    // Internal variables\n', '    bool internal contractSeted = false;\n', '\n', '    // Events\n', '    event Received(address, uint);\n', '    event Sell(address _buyer, uint _amount);\n', '    event SetPercents(uint _bonusLevelOne, uint _bonusLevelTwo, uint _bonusLevelThree, uint _bonusLevelFour);\n', '    \n', '    // Modifiers\n', '    modifier canContractSet() {\n', '        require(!contractSeted, "Set contract token is not allowed!");\n', '        _;\n', '    }\n', '\n', '    // Constructor\n', '    constructor(uint _levelOneDate, uint _levelTwoDate, uint _levelThreeDate, uint _levelFourDate) payable {\n', '        levelOneDate = _levelOneDate * 1 seconds;\n', '        levelTwoDate = _levelTwoDate * 1 days;\n', '        levelThreeDate = _levelThreeDate * 1 days;\n', '        levelFourDate = _levelFourDate * 1 days;\n', '    }\n', '\n', '    // Receive function\n', '    receive() external payable {\n', '        emit Received(msg.sender, msg.value);\n', '    }\n', '\n', '    // External functions\n', '    function endSale() external onlyOwner {\n', '        require(\n', '            tokenContract.transfer(\n', '                msg.sender,\n', '                tokenContract.balanceOf(address(this))\n', '            ),\n', '            "Unable to transfer tokens to admin!"\n', '        );\n', '        // destroy contract\n', '        payable(msg.sender).transfer(address(this).balance);\n', '        contractSeted = false;\n', '    }\n', '\n', '    function setTokenContract(CoinvestingDeFiToken _tokenContract) external onlyOwner canContractSet {\n', '        tokenContract = _tokenContract;\n', '        contractSeted = true;\n', '        tokenBonus = tokenContract.balanceOf(address(this)) / 3;\n', '        tokenSale = tokenContract.balanceOf(address(this)) - tokenBonus;        \n', '    }\n', '\n', '    function setPercents(\n', '        uint _bonusLevelOne,\n', '        uint _bonusLevelTwo,\n', '        uint _bonusLevelThree,\n', '        uint _bonusLevelFour\n', '    ) \n', '    external \n', '    onlyOwner {\n', '        require(_bonusLevelOne <= 50, "L1 - Maximum 50 %.");\n', '        require(_bonusLevelTwo <= bonusLevelOne, "L2 - The maximum value must be the current L1.");\n', '        require(_bonusLevelThree <= bonusLevelTwo, "L3 - The maximum value must be the current L2.");\n', '        require(_bonusLevelFour <= bonusLevelThree, "L4 - The maximum value must be the current L3.");\n', '        bonusLevelOne = _bonusLevelOne;\n', '        bonusLevelTwo = _bonusLevelTwo;\n', '        bonusLevelThree = _bonusLevelThree;\n', '        bonusLevelFour = _bonusLevelFour;\n', '        emit SetPercents(bonusLevelOne, bonusLevelTwo, bonusLevelThree, bonusLevelFour);\n', '    }\n', '\n', '    function withdraw() external onlyOwner {\n', '        require(address(this).balance > 0, "Insuficient funds!");\n', '        uint amount = address(this).balance;\n', '        // sending to prevent re-entrancy attacks\n', '        address(this).balance - amount;\n', '        payable(msg.sender).transfer(amount);\n', '    }\n', '\n', '    // External functions that are view\n', '    function getBalance() external view returns(uint) {\n', '        return address(this).balance;\n', '    }\n', '\n', '    function getTokenBonusBalance() external view returns(uint) {\n', '        return tokenBonus;\n', '    }\n', '\n', '    function getTokenSaleBalance() external view returns(uint) {\n', '        return tokenSale;\n', '    }\n', '\n', '    function getPercents() \n', '    external \n', '    view \n', '    returns(\n', '        uint levelOne,\n', '        uint levelTwo,\n', '        uint levelThree,\n', '        uint levelFour)\n', '    {\n', '        levelOne = bonusLevelOne;\n', '        levelTwo = bonusLevelTwo;\n', '        levelThree = bonusLevelThree;\n', '        levelFour = bonusLevelFour;\n', '    }\n', '\n', '    // Public functions\n', '    function buyTokens(uint _numberOfTokens, uint _tokenPrice) public payable {\n', '        if (block.timestamp <= levelOneDate + levelTwoDate) {\n', '            calculatedBonus = _numberOfTokens * bonusLevelOne / 100;\n', '        }\n', '        else if (block.timestamp <= levelOneDate + levelTwoDate + levelThreeDate) {\n', '            calculatedBonus = _numberOfTokens * bonusLevelTwo / 100;\n', '        }\n', '        else if (block.timestamp <= levelOneDate + levelTwoDate + levelThreeDate + levelFourDate) {\n', '            calculatedBonus = _numberOfTokens * bonusLevelThree / 100;\n', '        }\n', '        else {\n', '            calculatedBonus = _numberOfTokens * bonusLevelFour / 100;\n', '        }\n', '\n', '        require(\n', '            msg.value == _numberOfTokens * _tokenPrice,\n', '            "Number of tokens does not match with the value!"\n', '        );\n', '            \n', '        uint scaledAmount = (calculatedBonus + _numberOfTokens) * 10 ** tokenContract.decimals();\n', '        require(\n', '            tokenSale >= _numberOfTokens * 10 ** tokenContract.decimals(),\n', '            "The contract does not have enough TOKENS!"\n', '        );\n', '\n', '        require(\n', '            tokenBonus >= calculatedBonus * 10 ** tokenContract.decimals(),\n', '            "The contract does not have enough BONUS tokens!"\n', '        );\n', '\n', '        tokensSold += _numberOfTokens;\n', '        tokenSale -= _numberOfTokens * 10 ** tokenContract.decimals();\n', '        tokenBonus -= calculatedBonus * 10 ** tokenContract.decimals();\n', '        emit Sell(msg.sender, _numberOfTokens);\n', '        require(\n', '            tokenContract.transfer(payable(msg.sender), scaledAmount),\n', '            "Some problem with token transfer!"\n', '        );        \n', '    }\n', '}']