['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-26\n', '*/\n', '\n', 'pragma solidity ^0.6.0;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '  interface ERC20 {\n', '    function totalSupply() external view returns (uint256 supply);\n', '\n', '    function balanceOf(address _owner) external view returns (uint256 balance);\n', '\n', '    function transfer(address _to, uint256 _value) external returns (bool success);\n', '\n', '    function transferFrom(address _from, address _to, uint256 _value)\n', '        external\n', '        returns (bool success);\n', '\n', '    function approve(address _spender, uint256 _value) external returns (bool success);\n', '\n', '    function allowance(address _owner, address _spender) external view returns (uint256 remaining);\n', '\n', '    function decimals() external view returns (uint256 digits);\n', '\n', '    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n', '}  abstract contract GasTokenInterface is ERC20 {\n', '    function free(uint256 value) public virtual returns (bool success);\n', '\n', '    function freeUpTo(uint256 value) public virtual returns (uint256 freed);\n', '\n', '    function freeFrom(address from, uint256 value) public virtual returns (bool success);\n', '\n', '    function freeFromUpTo(address from, uint256 value) public virtual returns (uint256 freed);\n', '}  contract DSMath {\n', '    function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x + y) >= x);\n', '    }\n', '\n', '    function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require((z = x - y) <= x);\n', '    }\n', '\n', '    function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        require(y == 0 || (z = x * y) / y == x);\n', '    }\n', '\n', '    function div(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x / y;\n', '    }\n', '\n', '    function min(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function max(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    function imin(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x <= y ? x : y;\n', '    }\n', '\n', '    function imax(int256 x, int256 y) internal pure returns (int256 z) {\n', '        return x >= y ? x : y;\n', '    }\n', '\n', '    uint256 constant WAD = 10**18;\n', '    uint256 constant RAY = 10**27;\n', '\n', '    function wmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), WAD / 2) / WAD;\n', '    }\n', '\n', '    function rmul(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, y), RAY / 2) / RAY;\n', '    }\n', '\n', '    function wdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, WAD), y / 2) / y;\n', '    }\n', '\n', '    function rdiv(uint256 x, uint256 y) internal pure returns (uint256 z) {\n', '        z = add(mul(x, RAY), y / 2) / y;\n', '    }\n', '\n', '    // This famous algorithm is called "exponentiation by squaring"\n', '    // and calculates x^n with x as fixed-point and n as regular unsigned.\n', '    //\n', "    // It's O(log n), instead of O(n) for naive repeated multiplication.\n", '    //\n', '    // These facts are why it works:\n', '    //\n', '    //  If n is even, then x^n = (x^2)^(n/2).\n', '    //  If n is odd,  then x^n = x * x^(n-1),\n', '    //   and applying the equation for even x gives\n', '    //    x^n = x * (x^2)^((n-1) / 2).\n', '    //\n', '    //  Also, EVM division is flooring and\n', '    //    floor[(n-1) / 2] = floor[n / 2].\n', '    //\n', '    function rpow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n', '        z = n % 2 != 0 ? x : RAY;\n', '\n', '        for (n /= 2; n != 0; n /= 2) {\n', '            x = rmul(x, x);\n', '\n', '            if (n % 2 != 0) {\n', '                z = rmul(z, x);\n', '            }\n', '        }\n', '    }\n', '}  abstract contract TokenInterface {\n', '\taddress public constant WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '    \n', '    function allowance(address, address) public virtual returns (uint256);\n', '\n', '    function balanceOf(address) public virtual returns (uint256);\n', '\n', '    function approve(address, uint256) public virtual;\n', '\n', '    function transfer(address, uint256) public virtual returns (bool);\n', '\n', '    function transferFrom(address, address, uint256) public virtual returns (bool);\n', '\n', '    function deposit() public virtual payable;\n', '\n', '    function withdraw(uint256) public virtual;\n', '}  interface ExchangeInterfaceV3 {\n', '    function sell(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external payable returns (uint);\n', '\n', '    function buy(address _srcAddr, address _destAddr, uint _destAmount, bytes memory _additionalData) external payable returns(uint);\n', '\n', '    function getSellRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '\n', '    function getBuyRate(address _srcAddr, address _destAddr, uint _srcAmount, bytes memory _additionalData) external view returns (uint);\n', '}  library Address {\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}  library SafeMath {\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}  library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(ERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     */\n', '    function safeApprove(ERC20 token, address spender, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(ERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function _callOptionalReturn(ERC20 token, bytes memory data) private {\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}  contract AdminAuth {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public owner;\n', '    address public admin;\n', '\n', '    modifier onlyOwner() {\n', '        require(owner == msg.sender);\n', '        _;\n', '    }\n', '\n', '    modifier onlyAdmin() {\n', '        require(admin == msg.sender);\n', '        _;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        admin = 0x25eFA336886C74eA8E282ac466BdCd0199f85BB9;\n', '    }\n', '\n', '    /// @notice Admin is set by owner first time, after that admin is super role and has permission to change owner\n', '    /// @param _admin Address of multisig that becomes admin\n', '    function setAdminByOwner(address _admin) public {\n', '        require(msg.sender == owner);\n', '        require(admin == address(0));\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to set new admin\n', '    /// @param _admin Address of multisig that becomes new admin\n', '    function setAdminByAdmin(address _admin) public {\n', '        require(msg.sender == admin);\n', '\n', '        admin = _admin;\n', '    }\n', '\n', '    /// @notice Admin is able to change owner\n', '    /// @param _owner Address of new owner\n', '    function setOwnerByAdmin(address _owner) public {\n', '        require(msg.sender == admin);\n', '\n', '        owner = _owner;\n', '    }\n', '\n', '    /// @notice Destroy the contract\n', '    function kill() public onlyOwner {\n', '        selfdestruct(payable(owner));\n', '    }\n', '\n', '    /// @notice  withdraw stuck funds\n', '    function withdrawStuckFunds(address _token, uint _amount) public onlyOwner {\n', '        if (_token == 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE) {\n', '            payable(owner).transfer(_amount);\n', '        } else {\n', '            ERC20(_token).safeTransfer(owner, _amount);\n', '        }\n', '    }\n', '}  contract ZrxAllowlist is AdminAuth {\n', '\n', '    mapping (address => bool) public zrxAllowlist;\n', '    mapping(address => bool) private nonPayableAddrs;\n', '\n', '    constructor() public {\n', '        zrxAllowlist[0x6958F5e95332D93D21af0D7B9Ca85B8212fEE0A5] = true;\n', '        zrxAllowlist[0x61935CbDd02287B511119DDb11Aeb42F1593b7Ef] = true;\n', '        zrxAllowlist[0xDef1C0ded9bec7F1a1670819833240f027b25EfF] = true;\n', '        zrxAllowlist[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '\n', '        nonPayableAddrs[0x080bf510FCbF18b91105470639e9561022937712] = true;\n', '    }\n', '\n', '    function setAllowlistAddr(address _zrxAddr, bool _state) public onlyOwner {\n', '        zrxAllowlist[_zrxAddr] = _state;\n', '    }\n', '\n', '    function isZrxAddr(address _zrxAddr) public view returns (bool) {\n', '        return zrxAllowlist[_zrxAddr];\n', '    }\n', '\n', '    function addNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = true;\n', '\t}\n', '\n', '\tfunction removeNonPayableAddr(address _nonPayableAddr) public onlyOwner {\n', '\t\tnonPayableAddrs[_nonPayableAddr] = false;\n', '\t}\n', '\n', '\tfunction isNonPayableAddr(address _addr) public view returns(bool) {\n', '\t\treturn nonPayableAddrs[_addr];\n', '\t}\n', '}    \n', '\n', 'contract DFSExchangeData {\n', '\n', '    // first is empty to keep the legacy order in place\n', '    enum ExchangeType { _, OASIS, KYBER, UNISWAP, ZEROX }\n', '\n', '    enum ActionType { SELL, BUY }\n', '\n', '    struct OffchainData {\n', '        address wrapper;\n', '        address exchangeAddr;\n', '        address allowanceTarget;\n', '        uint256 price;\n', '        uint256 protocolFee;\n', '        bytes callData;\n', '    }\n', '\n', '    struct ExchangeData {\n', '        address srcAddr;\n', '        address destAddr;\n', '        uint256 srcAmount;\n', '        uint256 destAmount;\n', '        uint256 minPrice;\n', '        uint256 dfsFeeDivider; // service fee divider\n', '        address user; // user to check special fee\n', '        address wrapper;\n', '        bytes wrapperData;\n', '        OffchainData offchainData;\n', '    }\n', '\n', '    function packExchangeData(ExchangeData memory _exData) public pure returns(bytes memory) {\n', '        return abi.encode(_exData);\n', '    }\n', '\n', '    function unpackExchangeData(bytes memory _data) public pure returns(ExchangeData memory _exData) {\n', '        _exData = abi.decode(_data, (ExchangeData));\n', '    }\n', '}  contract Discount {\n', '    address public owner;\n', '    mapping(address => CustomServiceFee) public serviceFees;\n', '\n', '    uint256 constant MAX_SERVICE_FEE = 400;\n', '\n', '    struct CustomServiceFee {\n', '        bool active;\n', '        uint256 amount;\n', '    }\n', '\n', '    constructor() public {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    function isCustomFeeSet(address _user) public view returns (bool) {\n', '        return serviceFees[_user].active;\n', '    }\n', '\n', '    function getCustomServiceFee(address _user) public view returns (uint256) {\n', '        return serviceFees[_user].amount;\n', '    }\n', '\n', '    function setServiceFee(address _user, uint256 _fee) public {\n', '        require(msg.sender == owner, "Only owner");\n', '        require(_fee >= MAX_SERVICE_FEE || _fee == 0);\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: true, amount: _fee});\n', '    }\n', '\n', '    function disableServiceFee(address _user) public {\n', '        require(msg.sender == owner, "Only owner");\n', '\n', '        serviceFees[_user] = CustomServiceFee({active: false, amount: 0});\n', '    }\n', '}  // SPDX-License-Identifier: MIT\n', '\n', '\n', '\n', 'abstract contract IFeeRecipient {\n', '    function getFeeAddr() public view virtual returns (address);\n', '    function changeWalletAddr(address _newWallet) public virtual;\n', '}  contract DFSExchangeHelper {\n', '\n', '    string public constant ERR_OFFCHAIN_DATA_INVALID = "Offchain data invalid";\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    address public constant KYBER_ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n', '    address public constant EXCHANGE_WETH_ADDRESS = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n', '\n', '    IFeeRecipient public constant _feeRecipient = IFeeRecipient(0x39C4a92Dc506300c3Ea4c67ca4CA611102ee6F2A);\n', '\n', '    address public constant DISCOUNT_ADDRESS = 0x1b14E8D511c9A4395425314f849bD737BAF8208F;\n', '    address public constant SAVER_EXCHANGE_REGISTRY = 0x25dd3F51e0C3c3Ff164DDC02A8E4D65Bb9cBB12D;\n', '\n', '    address public constant ZRX_ALLOWLIST_ADDR = 0x4BA1f38427b33B8ab7Bb0490200dAE1F1C36823F;\n', '\n', '\n', '    function getDecimals(address _token) internal view returns (uint256) {\n', '        if (_token == KYBER_ETH_ADDRESS) return 18;\n', '\n', '        return ERC20(_token).decimals();\n', '    }\n', '\n', '    function getBalance(address _tokenAddr) internal view returns (uint balance) {\n', '        if (_tokenAddr == KYBER_ETH_ADDRESS) {\n', '            balance = address(this).balance;\n', '        } else {\n', '            balance = ERC20(_tokenAddr).balanceOf(address(this));\n', '        }\n', '    }\n', '\n', '    function sendLeftover(address _srcAddr, address _destAddr, address payable _to) internal {\n', '        // send back any leftover ether or tokens\n', '        if (address(this).balance > 0) {\n', '            _to.transfer(address(this).balance);\n', '        }\n', '\n', '        if (getBalance(_srcAddr) > 0) {\n', '            ERC20(_srcAddr).safeTransfer(_to, getBalance(_srcAddr));\n', '        }\n', '\n', '        if (getBalance(_destAddr) > 0) {\n', '            ERC20(_destAddr).safeTransfer(_to, getBalance(_destAddr));\n', '        }\n', '    }\n', '\n', '    /// @notice Takes a feePercentage and sends it to wallet\n', '    /// @param _amount Dai amount of the whole trade\n', '    /// @param _user Address of the user\n', '    /// @param _token Address of the token\n', '    /// @param _dfsFeeDivider Dfs fee divider\n', '    /// @return feeAmount Amount in Dai owner earned on the fee\n', '    function getFee(uint256 _amount, address _user, address _token, uint256 _dfsFeeDivider) internal returns (uint256 feeAmount) {\n', '        if (_dfsFeeDivider != 0 && Discount(DISCOUNT_ADDRESS).isCustomFeeSet(_user)) {\n', '            _dfsFeeDivider = Discount(DISCOUNT_ADDRESS).getCustomServiceFee(_user);\n', '        }\n', '\n', '        if (_dfsFeeDivider == 0) {\n', '            feeAmount = 0;\n', '        } else {\n', '            feeAmount = _amount / _dfsFeeDivider;\n', '\n', "            // fee can't go over 10% of the whole amount\n", '            if (feeAmount > (_amount / 10)) {\n', '                feeAmount = _amount / 10;\n', '            }\n', '\n', '            address walletAddr = _feeRecipient.getFeeAddr();\n', '\n', '            if (_token == KYBER_ETH_ADDRESS) {\n', '                payable(walletAddr).transfer(feeAmount);\n', '            } else {\n', '                ERC20(_token).safeTransfer(walletAddr, feeAmount);\n', '            }\n', '        }\n', '    }\n', '\n', '    function sliceUint(bytes memory bs, uint256 start) internal pure returns (uint256) {\n', '        require(bs.length >= start + 32, "slicing out of range");\n', '\n', '        uint256 x;\n', '        assembly {\n', '            x := mload(add(bs, add(0x20, start)))\n', '        }\n', '\n', '        return x;\n', '    }\n', '\n', '        function writeUint256(bytes memory _b, uint256 _index, uint _input) internal pure {\n', '        if (_b.length < _index + 32) {\n', '            revert(ERR_OFFCHAIN_DATA_INVALID);\n', '        }\n', '\n', '        bytes32 input = bytes32(_input);\n', '\n', '        _index += 32;\n', '\n', '        // Read the bytes32 from array memory\n', '        assembly {\n', '            mstore(add(_b, _index), input)\n', '        }\n', '    }\n', '\n', '    /// @notice Converts Kybers Eth address -> Weth\n', '    /// @param _src Input address\n', '    function ethToWethAddr(address _src) internal pure returns (address) {\n', '        return _src == KYBER_ETH_ADDRESS ? EXCHANGE_WETH_ADDRESS : _src;\n', '    }\n', '}  contract SaverExchangeRegistry is AdminAuth {\n', '\n', '\tmapping(address => bool) private wrappers;\n', '\n', '\tconstructor() public {\n', '\t\twrappers[0x880A845A85F843a5c67DB2061623c6Fc3bB4c511] = true;\n', '\t\twrappers[0x4c9B55f2083629A1F7aDa257ae984E03096eCD25] = true;\n', '\t\twrappers[0x42A9237b872368E1bec4Ca8D26A928D7d39d338C] = true;\n', '\t}\n', '\n', '\tfunction addWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = true;\n', '\t}\n', '\n', '\tfunction removeWrapper(address _wrapper) public onlyOwner {\n', '\t\twrappers[_wrapper] = false;\n', '\t}\n', '\n', '\tfunction isWrapper(address _wrapper) public view returns(bool) {\n', '\t\treturn wrappers[_wrapper];\n', '\t}\n', '}    \n', '\n', '\n', '\n', 'abstract contract OffchainWrapperInterface is DFSExchangeData {\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) virtual public payable returns (bool success, uint256);\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchangeCore is DFSExchangeHelper, DSMath, DFSExchangeData {\n', '\n', '    string public constant ERR_SLIPPAGE_HIT = "Slippage hit";\n', '    string public constant ERR_DEST_AMOUNT_MISSING = "Dest amount missing";\n', '    string public constant ERR_WRAPPER_INVALID = "Wrapper invalid";\n', '    string public constant ERR_NOT_ZEROX_EXCHANGE = "Zerox exchange invalid";\n', '\n', '    /// @notice Internal method that preforms a sell on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and destAmount\n', '    function _sell(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n', '        }\n', '\n', '        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n', '\n', '        // Try 0x first and then fallback on specific wrapper\n', '        if (exData.offchainData.price > 0) {\n', '            (success, swapedTokens) = takeOrder(exData, ActionType.SELL);\n', '\n', '            if (success) {\n', '                wrapper = exData.offchainData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.SELL);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n', '                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n', '            require(getBalance(KYBER_ETH_ADDRESS) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        } else {\n', '            require(getBalance(exData.destAddr) >= wmul(exData.minPrice, exData.srcAmount), ERR_SLIPPAGE_HIT);\n', '        }\n', '\n', '        return (wrapper, swapedTokens);\n', '    }\n', '\n', '    /// @notice Internal method that preforms a buy on 0x/on-chain\n', '    /// @dev Usefull for other DFS contract to integrate for exchanging\n', '    /// @param exData Exchange data struct\n', '    /// @return (address, uint) Address of the wrapper used and srcAmount\n', '    function _buy(ExchangeData memory exData) internal returns (address, uint) {\n', '\n', '        address wrapper;\n', '        uint swapedTokens;\n', '        bool success;\n', '\n', '        require(exData.destAmount != 0, ERR_DEST_AMOUNT_MISSING);\n', '\n', '        exData.srcAmount -= getFee(exData.srcAmount, exData.user, exData.srcAddr, exData.dfsFeeDivider);\n', '\n', '        // if selling eth, convert to weth\n', '        if (exData.srcAddr == KYBER_ETH_ADDRESS) {\n', '            exData.srcAddr = ethToWethAddr(exData.srcAddr);\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).deposit{value: exData.srcAmount}();\n', '        }\n', '\n', '        if (exData.offchainData.price > 0) {\n', '            (success, swapedTokens) = takeOrder(exData, ActionType.BUY);\n', '\n', '            if (success) {\n', '                wrapper = exData.offchainData.exchangeAddr;\n', '            }\n', '        }\n', '\n', '        // fallback to desired wrapper if 0x failed\n', '        if (!success) {\n', '            swapedTokens = saverSwap(exData, ActionType.BUY);\n', '            wrapper = exData.wrapper;\n', '        }\n', '\n', '        // if anything is left in weth, pull it to user as eth\n', '        if (getBalance(EXCHANGE_WETH_ADDRESS) > 0) {\n', '            TokenInterface(EXCHANGE_WETH_ADDRESS).withdraw(\n', '                TokenInterface(EXCHANGE_WETH_ADDRESS).balanceOf(address(this))\n', '            );\n', '        }\n', '\n', '        if (exData.destAddr == EXCHANGE_WETH_ADDRESS) {\n', '            require(getBalance(KYBER_ETH_ADDRESS) >= exData.destAmount, ERR_SLIPPAGE_HIT);\n', '        } else {\n', '            require(getBalance(exData.destAddr) >= exData.destAmount, ERR_SLIPPAGE_HIT);\n', '        }\n', '\n', '        return (wrapper, getBalance(exData.destAddr));\n', '    }\n', '\n', '    /// @notice Takes order from 0x and returns bool indicating if it is successful\n', '    /// @param _exData Exchange data\n', '    function takeOrder(\n', '        ExchangeData memory _exData,\n', '        ActionType _type\n', '    ) private returns (bool success, uint256) {\n', '        if (!ZrxAllowlist(ZRX_ALLOWLIST_ADDR).isZrxAddr(_exData.offchainData.exchangeAddr)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        if (!SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.offchainData.wrapper)) {\n', '            return (false, 0);\n', '        }\n', '\n', '        // send src amount\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.offchainData.wrapper, _exData.srcAmount);\n', '\n', '        return OffchainWrapperInterface(_exData.offchainData.wrapper).takeOrder{value: _exData.offchainData.protocolFee}(_exData, _type);\n', '    }\n', '\n', '    /// @notice Calls wraper contract for exchage to preform an on-chain swap\n', '    /// @param _exData Exchange data struct\n', '    /// @param _type Type of action SELL|BUY\n', '    /// @return swapedTokens For Sell that the destAmount, for Buy thats the srcAmount\n', '    function saverSwap(ExchangeData memory _exData, ActionType _type) internal returns (uint swapedTokens) {\n', '        require(SaverExchangeRegistry(SAVER_EXCHANGE_REGISTRY).isWrapper(_exData.wrapper), ERR_WRAPPER_INVALID);\n', '\n', '        ERC20(_exData.srcAddr).safeTransfer(_exData.wrapper, _exData.srcAmount);\n', '\n', '        if (_type == ActionType.SELL) {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    sell(_exData.srcAddr, _exData.destAddr, _exData.srcAmount, _exData.wrapperData);\n', '        } else {\n', '            swapedTokens = ExchangeInterfaceV3(_exData.wrapper).\n', '                    buy(_exData.srcAddr, _exData.destAddr, _exData.destAmount, _exData.wrapperData);\n', '        }\n', '    }\n', '\n', '    // solhint-disable-next-line no-empty-blocks\n', '    receive() external virtual payable {}\n', '}  contract DefisaverLogger {\n', '    event LogEvent(\n', '        address indexed contractAddress,\n', '        address indexed caller,\n', '        string indexed logName,\n', '        bytes data\n', '    );\n', '\n', '    // solhint-disable-next-line func-name-mixedcase\n', '    function Log(address _contract, address _caller, string memory _logName, bytes memory _data)\n', '        public\n', '    {\n', '        emit LogEvent(_contract, _caller, _logName, _data);\n', '    }\n', '}  contract GasBurner {\n', '    // solhint-disable-next-line const-name-snakecase\n', '    GasTokenInterface public constant gasToken = GasTokenInterface(0x0000000000b3F879cb30FE243b4Dfee438691c04);\n', '\n', '    modifier burnGas(uint _amount) {\n', '        if (gasToken.balanceOf(address(this)) >= _amount) {\n', '            gasToken.free(_amount);\n', '        }\n', '\n', '        _;\n', '    }\n', '}    \n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract DFSExchange is DFSExchangeCore, AdminAuth, GasBurner {\n', '\n', '    using SafeERC20 for ERC20;\n', '\n', '    uint256 public constant SERVICE_FEE = 800; // 0.125% Fee\n', '\n', '    // solhint-disable-next-line const-name-snakecase\n', '    DefisaverLogger public constant logger = DefisaverLogger(0x5c55B921f590a89C1Ebe84dF170E655a82b62126);\n', '\n', '    uint public burnAmount = 10;\n', '\n', '    /// @notice Takes a src amount of tokens and converts it into the dest token\n', '    /// @dev Takes fee from the _srcAmount before the exchange\n', '    /// @param exData [srcAddr, destAddr, srcAmount, destAmount, minPrice, exchangeType, exchangeAddr, callData, price0x]\n', '    /// @param _user User address who called the exchange\n', '    function sell(ExchangeData memory exData, address payable _user) public payable burnGas(burnAmount) {\n', '\n', '        exData.dfsFeeDivider = SERVICE_FEE;\n', '        exData.user = _user;\n', '\n', '        // Perform the exchange\n', '        (address wrapper, uint destAmount) = _sell(exData);\n', '\n', '        // send back any leftover ether or tokens\n', '        sendLeftover(exData.srcAddr, exData.destAddr, _user);\n', '\n', '        // log the event\n', '        logger.Log(address(this), msg.sender, "ExchangeSell", abi.encode(wrapper, exData.srcAddr, exData.destAddr, exData.srcAmount, destAmount));\n', '    }\n', '\n', '    /// @notice Takes a dest amount of tokens and converts it from the src token\n', '    /// @dev Send always more than needed for the swap, extra will be returned\n', '    /// @param exData [srcAddr, destAddr, srcAmount, destAmount, minPrice, exchangeType, exchangeAddr, callData, price0x]\n', '    /// @param _user User address who called the exchange\n', '    function buy(ExchangeData memory exData, address payable _user) public payable burnGas(burnAmount){\n', '\n', '        exData.dfsFeeDivider = SERVICE_FEE;\n', '        exData.user = _user;\n', '\n', '        // Perform the exchange\n', '        (address wrapper, uint srcAmount) = _buy(exData);\n', '\n', '        // send back any leftover ether or tokens\n', '        sendLeftover(exData.srcAddr, exData.destAddr, _user);\n', '\n', '        // log the event\n', '        logger.Log(address(this), msg.sender, "ExchangeBuy", abi.encode(wrapper, exData.srcAddr, exData.destAddr, srcAmount, exData.destAmount));\n', '\n', '    }\n', '\n', '    /// @notice Changes the amount of gas token we burn for each call\n', '    /// @dev Only callable by the owner\n', '    /// @param _newBurnAmount New amount of gas tokens to be burned\n', '    function changeBurnAmount(uint _newBurnAmount) public {\n', '        require(owner == msg.sender);\n', '\n', '        burnAmount = _newBurnAmount;\n', '    }\n', '\n', '}']