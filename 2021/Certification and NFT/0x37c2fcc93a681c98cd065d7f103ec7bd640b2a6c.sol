['/**\n', ' *Submitted for verification at Etherscan.io on 2021-05-11\n', '*/\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/interface/IRegistry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', 'interface IRegistry {\n', '    function handlers(address) external view returns (bytes32);\n', '    function callers(address) external view returns (bytes32);\n', '    function bannedAgents(address) external view returns (uint256);\n', '    function fHalt() external view returns (bool);\n', '    function isValidHandler(address handler) external view returns (bool);\n', '    function isValidCaller(address handler) external view returns (bool);\n', '}\n', '\n', '// File: contracts/Registry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/// @notice The registry database for Furucombo\n', 'contract Registry is IRegistry, Ownable {\n', '    mapping(address => bytes32) public override handlers;\n', '    mapping(address => bytes32) public override callers;\n', '    mapping(address => uint256) public override bannedAgents;\n', '    bool public override fHalt;\n', '\n', '    bytes32 public constant DEPRECATED = bytes10(0x64657072656361746564);\n', '\n', '    event Registered(address indexed registration, bytes32 info);\n', '    event Unregistered(address indexed registration);\n', '    event CallerRegistered(address indexed registration, bytes32 info);\n', '    event CallerUnregistered(address indexed registration);\n', '    event Banned(address indexed agent);\n', '    event Unbanned(address indexed agent);\n', '    event Halted();\n', '    event Unhalted();\n', '\n', '    modifier isNotHalted() {\n', '        require(fHalt == false, "Halted");\n', '        _;\n', '    }\n', '\n', '    modifier isHalted() {\n', '        require(fHalt, "Not halted");\n', '        _;\n', '    }\n', '\n', '    modifier isNotBanned(address agent) {\n', '        require(bannedAgents[agent] == 0, "Banned");\n', '        _;\n', '    }\n', '\n', '    modifier isBanned(address agent) {\n', '        require(bannedAgents[agent] != 0, "Not banned");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @notice Register a handler with a bytes32 information.\n', '     * @param registration Handler address.\n', '     * @param info Info string.\n', '     */\n', '    function register(address registration, bytes32 info) external onlyOwner {\n', '        require(registration != address(0), "zero address");\n', '        require(info != DEPRECATED, "unregistered info");\n', '        require(handlers[registration] != DEPRECATED, "unregistered");\n', '        handlers[registration] = info;\n', '        emit Registered(registration, info);\n', '    }\n', '\n', '    /**\n', '     * @notice Unregister a handler. The handler will be deprecated.\n', '     * @param registration The handler to be unregistered.\n', '     */\n', '    function unregister(address registration) external onlyOwner {\n', '        require(registration != address(0), "zero address");\n', '        require(handlers[registration] != bytes32(0), "no registration");\n', '        require(handlers[registration] != DEPRECATED, "unregistered");\n', '        handlers[registration] = DEPRECATED;\n', '        emit Unregistered(registration);\n', '    }\n', '\n', '    /**\n', '     * @notice Register a caller with a bytes32 information.\n', '     * @param registration Caller address.\n', '     * @param info Info string.\n', '     * @dev Dapps that triggers callback function should be registered.\n', '     * In this case, registration is the Dapp address and the leading 20 bytes\n', '     * of info is the handler address.\n', '     */\n', '    function registerCaller(address registration, bytes32 info)\n', '        external\n', '        onlyOwner\n', '    {\n', '        require(registration != address(0), "zero address");\n', '        require(info != DEPRECATED, "unregistered info");\n', '        require(callers[registration] != DEPRECATED, "unregistered");\n', '        callers[registration] = info;\n', '        emit CallerRegistered(registration, info);\n', '    }\n', '\n', '    /**\n', '     * @notice Unregister a caller. The caller will be deprecated.\n', '     * @param registration The caller to be unregistered.\n', '     */\n', '    function unregisterCaller(address registration) external onlyOwner {\n', '        require(registration != address(0), "zero address");\n', '        require(callers[registration] != bytes32(0), "no registration");\n', '        require(callers[registration] != DEPRECATED, "unregistered");\n', '        callers[registration] = DEPRECATED;\n', '        emit CallerUnregistered(registration);\n', '    }\n', '\n', '    /**\n', '     * @notice Ban agent from query\n', '     *\n', '     */\n', '    function ban(address agent) external isNotBanned(agent) onlyOwner {\n', '        bannedAgents[agent] = 1;\n', '        emit Banned(agent);\n', '    }\n', '\n', '    /**\n', '     * @notice Unban agent from query\n', '     */\n', '    function unban(address agent) external isBanned(agent) onlyOwner {\n', '        bannedAgents[agent] = 0;\n', '        emit Unbanned(agent);\n', '    }\n', '\n', '    /**\n', '     * @notice Check if the handler is valid.\n', '     * @param handler The handler to be verified.\n', '     */\n', '    function isValidHandler(address handler)\n', '        external\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        return handlers[handler] != 0 && handlers[handler] != DEPRECATED;\n', '    }\n', '\n', '    /**\n', '     * @notice Check if the caller is valid.\n', '     * @param caller The caller to be verified.\n', '     */\n', '    function isValidCaller(address caller)\n', '        external\n', '        view\n', '        override\n', '        returns (bool)\n', '    {\n', '        return callers[caller] != 0 && callers[caller] != DEPRECATED;\n', '    }\n', '\n', '    function halt() external isNotHalted onlyOwner {\n', '        fHalt = true;\n', '        emit Halted();\n', '    }\n', '\n', '    function unhalt() external isHalted onlyOwner {\n', '        fHalt = false;\n', '        emit Unhalted();\n', '    }\n', '}']