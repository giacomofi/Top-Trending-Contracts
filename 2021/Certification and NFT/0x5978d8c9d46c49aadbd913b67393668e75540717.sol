['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-25\n', '*/\n', '\n', 'pragma solidity 0.5.8;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount)\n', '        external\n', '        returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender)\n', '        external\n', '        view\n', '        returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(\n', '        address indexed owner,\n', '        address indexed spender,\n', '        uint256 value\n', '    );\n', '}\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '  /**\n', '   * @dev Returns the addition of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `+` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Addition cannot overflow.\n', '   */\n', '  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '    uint256 c = a + b;\n', "    require(c >= a, 'SafeMath: addition overflow');\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return sub(a, b, 'SafeMath: subtraction overflow');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '   * overflow (when the result is negative).\n', '   *\n', "   * Counterpart to Solidity's `-` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Subtraction cannot overflow.\n', '   */\n', '  function sub(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b <= a, errorMessage);\n', '    uint256 c = a - b;\n', '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the multiplication of two unsigned integers, reverting on\n', '   * overflow.\n', '   *\n', "   * Counterpart to Solidity's `*` operator.\n", '   *\n', '   * Requirements:\n', '   *\n', '   * - Multiplication cannot overflow.\n', '   */\n', '  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "    // benefit is lost if 'b' is also tested.\n", '    // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '    if (a == 0) {\n', '      return 0;\n', '    }\n', '\n', '    uint256 c = a * b;\n', "    require(c / a == b, 'SafeMath: multiplication overflow');\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return div(a, b, 'SafeMath: division by zero');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '   * division by zero. The result is rounded towards zero.\n', '   *\n', "   * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '   * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '   * uses an invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function div(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b > 0, errorMessage);\n', '    uint256 c = a / b;\n', "    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '    return c;\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', "    return mod(a, b, 'SafeMath: modulo by zero');\n", '  }\n', '\n', '  /**\n', '   * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '   * Reverts with custom message when dividing by zero.\n', '   *\n', "   * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '   * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '   * invalid opcode to revert (consuming all remaining gas).\n', '   *\n', '   * Requirements:\n', '   *\n', '   * - The divisor cannot be zero.\n', '   */\n', '  function mod(\n', '    uint256 a,\n', '    uint256 b,\n', '    string memory errorMessage\n', '  ) internal pure returns (uint256) {\n', '    require(b != 0, errorMessage);\n', '    return a % b;\n', '  }\n', '}\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '  address private _owner;\n', '  mapping (address => bool) public farmAddresses;\n', '\n', '  event OwnershipTransferred(\n', '    address indexed previousOwner,\n', '    address indexed newOwner\n', '  );\n', '\n', '  /**\n', '   * @dev Initializes the contract setting the deployer as the initial owner.\n', '   */\n', '  constructor() internal {\n', '    address msgSender = _msgSender();\n', '    _owner = msgSender;\n', '    emit OwnershipTransferred(address(0), msgSender);\n', '  }\n', '\n', '  /**\n', '   * @dev Returns the address of the current owner.\n', '   */\n', '  function owner() public view returns (address) {\n', '    return _owner;\n', '  }\n', '\n', '  /**\n', '   * @dev Throws if called by any account other than the owner.\n', '   */\n', '  modifier onlyOwner() {\n', "    require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n", '    _;\n', '  }\n', '\n', '  modifier onlyFarmContract() {\n', "    require(isOwner() || isFarmContract(), 'Ownable: caller is not the farm or owner');\n", '    _;\n', '  }\n', '\n', '  function isOwner() private view returns (bool) {\n', '    return _owner == _msgSender();\n', '  }\n', '\n', '  function isFarmContract() public view returns (bool) {\n', '    return farmAddresses[_msgSender()];\n', '  }\n', '\n', '  /**\n', '   * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '   * Can only be called by the current owner.\n', '   */\n', '  function transferOwnership(address newOwner) public onlyOwner {\n', '    require(\n', '      newOwner != address(0),\n', "      'Ownable: new owner is the zero address'\n", '    );\n', '    emit OwnershipTransferred(_owner, newOwner);\n', '    _owner = newOwner;\n', '  }\n', '\n', '  function setFarmAddress(address _farmAddress, bool _status) public onlyOwner {\n', '    require(\n', '      _farmAddress != address(0),\n', "      'Ownable: farm address is the zero address'\n", '    );\n', '    farmAddresses[_farmAddress] = _status;\n', '  }\n', '}\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '\n', '\n', '            bytes32 accountHash\n', '         = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            codehash := extcodehash(account)\n', '        }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(\n', '            address(this).balance >= amount,\n', "            'Address: insufficient balance'\n", '        );\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', "        (bool success, ) = recipient.call.value(amount)('');\n", '        require(\n', '            success,\n', "            'Address: unable to send value, recipient may have reverted'\n", '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data)\n', '        internal\n', '        returns (bytes memory)\n', '    {\n', "        return functionCall(target, data, 'Address: low-level call failed');\n", '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(\n', '        address target,\n', '        bytes memory data,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value\n', '    ) internal returns (bytes memory) {\n', '        return\n', '            functionCallWithValue(\n', '                target,\n', '                data,\n', '                value,\n', "                'Address: low-level call with value failed'\n", '            );\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 value,\n', '        string memory errorMessage\n', '    ) internal returns (bytes memory) {\n', '        require(\n', '            address(this).balance >= value,\n', "            'Address: insufficient balance for call'\n", '        );\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(\n', '        address target,\n', '        bytes memory data,\n', '        uint256 weiValue,\n', '        string memory errorMessage\n', '    ) private returns (bytes memory) {\n', "        require(isContract(target), 'Address: call to non-contract');\n", '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call.value(weiValue)(\n', '            data\n', '        );\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(\n', '        IERC20 token,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transfer.selector, to, value)\n', '        );\n', '    }\n', '\n', '    function safeTransferFrom(\n', '        IERC20 token,\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) internal {\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require(\n', '            (value == 0) || (token.allowance(address(this), spender) == 0),\n', "            'SafeERC20: approve from non-zero to non-zero allowance'\n", '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(token.approve.selector, spender, value)\n', '        );\n', '    }\n', '\n', '    function safeIncreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(\n', '            value\n', '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    function safeDecreaseAllowance(\n', '        IERC20 token,\n', '        address spender,\n', '        uint256 value\n', '    ) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(\n', '            value,\n', "            'SafeERC20: decreased allowance below zero'\n", '        );\n', '        _callOptionalReturn(\n', '            token,\n', '            abi.encodeWithSelector(\n', '                token.approve.selector,\n', '                spender,\n', '                newAllowance\n', '            )\n', '        );\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(\n', '            data,\n', "            'SafeERC20: low-level call failed'\n", '        );\n', '        if (returndata.length > 0) {\n', '            // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(\n', '                abi.decode(returndata, (bool)),\n', "                'SafeERC20: ERC20 operation did not succeed'\n", '            );\n', '        }\n', '    }\n', '}\n', '\n', 'contract EtherGalaxy is Ownable {\n', '  using SafeMath for uint256;\n', '  using SafeERC20 for IERC20;\n', '\n', '  struct UserInfo {\n', '    uint256 amount;\n', '    uint256 rewardDebt;\n', '  }\n', '\n', '  struct PoolInfo {\n', '    IERC20 lpToken;\n', '    uint256 allocPoint;\n', '    uint256 lastRewardBlock;\n', '    uint256 accEtherPerShare;\n', '  }\n', '\n', '  uint256 public bonusEndBlock;\n', '  uint256 public rewardsEndBlock;\n', '  uint256 public constant ethPerBlock = 57870370370370 wei; // 10ETH / 172800 blocks\n', '  uint256 public constant BONUS_MULTIPLIER = 3;\n', '\n', '  PoolInfo[] public poolInfo;\n', '  mapping(address => bool) public lpTokenExistsInPool;\n', '  mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n', '  uint256 public totalAllocPoint;\n', '  uint256 public startBlock;\n', '\n', '  uint256 public constant blockIn2Weeks = 80640;\n', '  uint256 public constant blockIn2Years = 4204800;\n', '\n', '  event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n', '  event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n', '  event EmergencyWithdraw(\n', '    address indexed user,\n', '    uint256 indexed pid,\n', '    uint256 amount\n', '  );\n', '\n', '  constructor(\n', '  ) public {\n', '    startBlock = block.number;\n', '    bonusEndBlock = startBlock + blockIn2Weeks;\n', '    rewardsEndBlock = startBlock + blockIn2Years;\n', '  }\n', '\n', '  function () external payable {}\n', '\n', '  function poolLength() external view returns (uint256) {\n', '    return poolInfo.length;\n', '  }\n', '\n', '  function add(\n', '    uint256 _allocPoint,\n', '    IERC20 _lpToken,\n', '    bool _withUpdate\n', '  ) public onlyOwner {\n', '    require(\n', '      !lpTokenExistsInPool[address(_lpToken)],\n', "      'Galaxy: LP Token Address already exists in pool'\n", '    );\n', '    if (_withUpdate) {\n', '      massUpdatePools();\n', '    }\n', '    uint256 blockNumber = min(block.number, rewardsEndBlock);\n', '    uint256 lastRewardBlock = blockNumber > startBlock\n', '    ? blockNumber\n', '    : startBlock;\n', '    totalAllocPoint = totalAllocPoint.add(_allocPoint);\n', '    poolInfo.push(\n', '      PoolInfo({\n', '      lpToken: _lpToken,\n', '      allocPoint: _allocPoint,\n', '      lastRewardBlock: lastRewardBlock,\n', '      accEtherPerShare: 0\n', '      })\n', '    );\n', '    lpTokenExistsInPool[address(_lpToken)] = true;\n', '  }\n', '\n', '  function set(uint256 _pid, uint256 _allocPoint, bool _withUpdate) public onlyOwner {\n', '    if (_withUpdate) {\n', '      massUpdatePools();\n', '    }\n', '    totalAllocPoint = totalAllocPoint.sub(poolInfo[_pid].allocPoint).add(_allocPoint);\n', '    poolInfo[_pid].allocPoint = _allocPoint;\n', '  }\n', '\n', '  function getMultiplier(uint256 _from, uint256 _to)\n', '  public\n', '  view\n', '  returns (uint256)\n', '  {\n', '    if (_to <= bonusEndBlock) {\n', '      return _to.sub(_from).mul(BONUS_MULTIPLIER);\n', '    } else if (_from >= bonusEndBlock) {\n', '      return _to.sub(_from);\n', '    } else {\n', '      return\n', '      bonusEndBlock.sub(_from).mul(BONUS_MULTIPLIER).add(\n', '        _to.sub(bonusEndBlock)\n', '      );\n', '    }\n', '  }\n', '\n', '  function pendingEther(uint256 _pid, address _user)\n', '  external\n', '  view\n', '  returns (uint256)\n', '  {\n', '    PoolInfo storage pool = poolInfo[_pid];\n', '    UserInfo storage user = userInfo[_pid][_user];\n', '    uint256 accEtherPerShare = pool.accEtherPerShare;\n', '    uint256 blockNumber = min(block.number, rewardsEndBlock);\n', '    uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '    if (blockNumber > pool.lastRewardBlock && lpSupply != 0) {\n', '      uint256 multiplier = getMultiplier(\n', '        pool.lastRewardBlock,\n', '        blockNumber\n', '      );\n', '      uint256 etherReward = multiplier\n', '      .mul(ethPerBlock)\n', '      .mul(pool.allocPoint)\n', '      .div(totalAllocPoint);\n', '      accEtherPerShare = accEtherPerShare.add(\n', '        etherReward.mul(1e12).div(lpSupply)\n', '      );\n', '    }\n', '    return user.amount.mul(accEtherPerShare).div(1e12).sub(user.rewardDebt);\n', '  }\n', '\n', '  function massUpdatePools() public {\n', '    uint256 length = poolInfo.length;\n', '    for (uint256 pid = 0; pid < length; ++pid) {\n', '      updatePool(pid);\n', '    }\n', '  }\n', '\n', '  function updatePool(uint256 _pid) public {\n', '    PoolInfo storage pool = poolInfo[_pid];\n', '    uint256 blockNumber = min(block.number, rewardsEndBlock);\n', '    if (blockNumber <= pool.lastRewardBlock) {\n', '      return;\n', '    }\n', '    uint256 lpSupply = pool.lpToken.balanceOf(address(this));\n', '    if (lpSupply == 0) {\n', '      pool.lastRewardBlock = blockNumber;\n', '      return;\n', '    }\n', '    uint256 multiplier = getMultiplier(pool.lastRewardBlock, blockNumber);\n', '    uint256 etherReward = multiplier\n', '    .mul(ethPerBlock)\n', '    .mul(pool.allocPoint)\n', '    .div(totalAllocPoint);\n', '    pool.accEtherPerShare = pool.accEtherPerShare.add(\n', '      etherReward.mul(1e12).div(lpSupply)\n', '    );\n', '    pool.lastRewardBlock = blockNumber;\n', '  }\n', '\n', '  function deposit(uint256 _pid, uint256 _amount) public {\n', "    require(_amount > 0, 'Galaxy: invalid amount');\n", '    PoolInfo storage pool = poolInfo[_pid];\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '    updatePool(_pid);\n', '    if (user.amount > 0) {\n', '      uint256 pending = user.amount.mul(pool.accEtherPerShare).div(1e12).sub(user.rewardDebt);\n', '      if (pending > 0) {\n', '        safeEtherTransfer(msg.sender, pending);\n', '      }\n', '    }\n', '    pool.lpToken.safeTransferFrom(\n', '      address(msg.sender),\n', '      address(this),\n', '      _amount\n', '    );\n', '    user.amount = user.amount.add(_amount);\n', '    user.rewardDebt = user.amount.mul(pool.accEtherPerShare).div(1e12);\n', '    emit Deposit(msg.sender, _pid, _amount);\n', '  }\n', '\n', '  function withdraw(uint256 _pid, uint256 _amount) public {\n', '    PoolInfo storage pool = poolInfo[_pid];\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', "    require(user.amount >= _amount, 'Galaxy: Insufficient Amount to withdraw');\n", '    updatePool(_pid);\n', '    uint256 pending = user.amount.mul(pool.accEtherPerShare).div(1e12).sub(user.rewardDebt);\n', '    if(pending > 0) {\n', '      safeEtherTransfer(msg.sender, pending);\n', '    }\n', '    if(_amount > 0) {\n', '      user.amount = user.amount.sub(_amount);\n', '      pool.lpToken.safeTransfer(address(msg.sender), _amount);\n', '    }\n', '    user.rewardDebt = user.amount.mul(pool.accEtherPerShare).div(1e12);\n', '    emit Withdraw(msg.sender, _pid, _amount);\n', '  }\n', '\n', '  function emergencyWithdraw(uint256 _pid) public {\n', '    PoolInfo storage pool = poolInfo[_pid];\n', '    UserInfo storage user = userInfo[_pid][msg.sender];\n', '    uint256 amount = user.amount;\n', "    require(amount > 0, 'Galaxy: insufficient balance');\n", '    user.amount = 0;\n', '    user.rewardDebt = 0;\n', '    pool.lpToken.safeTransfer(address(msg.sender), amount);\n', '    emit EmergencyWithdraw(msg.sender, _pid, amount);\n', '  }\n', '\n', '  function safeEtherTransfer(address payable _to, uint256 _amount) internal {\n', '    if (address(this).balance >= _amount) {\n', '      _to.transfer(_amount);\n', '    } else {\n', '      _to.transfer(address(this).balance);\n', '    }\n', '  }\n', '\n', '  function areRewardsActive() public view returns (bool) {\n', '    return rewardsEndBlock > block.number;\n', '  }\n', '\n', '  function min(uint256 a, uint256 b) public pure returns (uint256) {\n', '    if (a > b) {\n', '      return b;\n', '    }\n', '    return a;\n', '  }\n', '}']