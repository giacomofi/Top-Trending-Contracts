['/**\n', ' *Submitted for verification at Etherscan.io on 2021-04-22\n', '*/\n', '\n', '/**\n', ' *Submitted for verification at BscScan.com on 2021-04-14\n', '*/\n', '\n', '// SPDX-License-Identifier: UNLICENSED\n', 'pragma solidity 0.7.5;\n', '\n', '\n', '\n', 'abstract contract ReentrancyGuard {\n', '\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    modifier nonReentrant() {\n', '\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// SafeMath library\n', '// ----------------------------------------------------------------------------\n', '\n', '\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '    \n', '    function ceil(uint a, uint m) internal pure returns (uint r) {\n', '        return (a + m - 1) / m * m;\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// Owned contract\n', '// ----------------------------------------------------------------------------\n', 'contract Owned {\n', '    address payable public owner;\n', '\n', '    event OwnershipTransferred(address indexed _from, address indexed _to);\n', '\n', '    constructor() {\n', '        owner = msg.sender;\n', '    }\n', '\n', '    modifier onlyOwner {\n', '        require(msg.sender == owner);\n', '        _;\n', '    }\n', '\n', '    function transferOwnership(address payable _newOwner) public onlyOwner {\n', '        require(_newOwner != address(0), "ERC20: sending to the zero address");\n', '        owner = _newOwner;\n', '        emit OwnershipTransferred(msg.sender, _newOwner);\n', '    }\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC Token Standard #20 Interface\n', '// ----------------------------------------------------------------------------\n', 'interface IERC20 {\n', '    function totalSupply() external view returns (uint256);\n', '    function balanceOf(address tokenOwner) external view returns (uint256 balance);\n', '    function allowance(address tokenOwner, address spender) external view returns (uint256 remaining);\n', '    function transfer(address to, uint256 tokens) external returns (bool success);\n', '    function approve(address spender, uint256 tokens) external returns (bool success);\n', '    function transferFrom(address from, address to, uint256 tokens) external returns (bool success);\n', '    function burnTokens(uint256 _amount) external;\n', '    \n', '    function calculateFeesBeforeSend(\n', '        address sender,\n', '        address recipient,\n', '        uint256 amount\n', '    ) external view returns (uint256, uint256);\n', '    \n', '    \n', '    event Transfer(address indexed from, address indexed to, uint256 tokens);\n', '    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n', '}\n', '\n', 'interface regreward {\n', '    function distributeAll() external;\n', '}\n', '\n', '// ----------------------------------------------------------------------------\n', '// ERC20 Token, with the addition of symbol, name and decimals and assisted\n', '// token transfers\n', '// ----------------------------------------------------------------------------\n', '\n', 'library Roles {\n', '    struct Role {\n', '        mapping (address => bool) bearer;\n', '    }\n', '\n', '    function add(Role storage role, address account) internal {\n', '        require(!has(role, account), "Roles: account already has role");\n', '        role.bearer[account] = true;\n', '    }\n', '\n', '    function remove(Role storage role, address account) internal {\n', '        require(has(role, account), "Roles: account does not have role");\n', '        role.bearer[account] = false;\n', '    }\n', '\n', '    function has(Role storage role, address account) internal view returns (bool) {\n', '        require(account != address(0), "Roles: account is the zero address");\n', '        return role.bearer[account];\n', '    }\n', '}\n', '\n', 'contract WhitelistAdminRole is Owned  {\n', '    using Roles for Roles.Role;\n', '\n', '    event WhitelistAdminAdded(address indexed account);\n', '    event WhitelistAdminRemoved(address indexed account);\n', '\n', '    Roles.Role private _whitelistAdmins;\n', '\n', '   constructor () {\n', '        _addWhitelistAdmin(msg.sender);\n', '    }\n', '    \n', '    modifier onlyWhitelistAdmin() {\n', '        require(isWhitelistAdmin(msg.sender), "WhitelistAdminRole: caller does not have the WhitelistAdmin role");\n', '        _;\n', '    }\n', '\n', '    function isWhitelistAdmin(address account) public view returns (bool) {\n', '        return _whitelistAdmins.has(account);\n', '    }\n', '    function addWhitelistAdmin(address account) public onlyWhitelistAdmin {\n', '        _addWhitelistAdmin(account);\n', '    }\n', '\n', '    function renounceWhitelistAdmin() public {\n', '        _removeWhitelistAdmin(msg.sender);\n', '    }\n', '\n', '    function _addWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.add(account);\n', '        emit WhitelistAdminAdded(account);\n', '    } \n', '\n', '    function _removeWhitelistAdmin(address account) internal {\n', '        _whitelistAdmins.remove(account);\n', '        emit WhitelistAdminRemoved(account);\n', '    }\n', '}\n', 'contract FEGstakeTRYe is Owned, ReentrancyGuard, WhitelistAdminRole {\n', '    using SafeMath for uint256;\n', '    \n', '    address public TRY   = 0xc12eCeE46ed65D970EE5C899FCC7AE133AfF9b03;\n', '    address public fETH   = 0xf786c34106762Ab4Eeb45a51B42a62470E9D5332;\n', '    address public regrewardContract;\n', '    \n', '    uint256 public totalStakes = 0;\n', '    bool public perform = true; //if true then distribution of rewards from the pool to stakers via the withdraw function is enabled\n', '    uint256 public txFee = 20; // TRY has 2% TX fee, deduct this fee from total stake to not break math\n', '    uint256 public txFee1 = 11; // fETH has 1% TX fee, 0.1% was also added this fee from total stake to not break math\n', '    \n', '    uint256 public totalDividends = 0;\n', '    uint256 private scaledRemainder = 0;\n', '    uint256 private scaling = uint256(10) ** 12;\n', '    uint public round = 1;\n', ' \n', '    mapping(address => uint) public farmTime; // period that your sake it locked to keep it for farming\n', '    uint public lock = 0; // no locktime\n', '    \n', '    struct USER{\n', '        uint256 stakedTokens;\n', '        uint256 lastDividends;\n', '        uint256 fromTotalDividend;\n', '        uint round;\n', '        uint256 remainder;\n', '    }\n', '    \n', '    address[] internal stakeholders;\n', '    mapping(address => USER) stakers;\n', '    mapping (uint => uint256) public payouts;                   // keeps record of each payout\n', '    \n', '    event STAKED(address staker, uint256 tokens);\n', '    event EARNED(address staker, uint256 tokens);\n', '    event UNSTAKED(address staker, uint256 tokens);\n', '    event PAYOUT(uint256 round, uint256 tokens, address sender);\n', '    event CLAIMEDREWARD(address staker, uint256 reward);\n', '    \n', '    \n', '    function isStakeholder(address _address)\n', '       public\n', '       view\n', '       returns(bool)\n', '   {\n', '       for (uint256 s = 0; s < stakeholders.length; s += 1){\n', '           if (_address == stakeholders[s]) return (true);\n', '       }\n', '       return (false);\n', '   }\n', '   \n', '   function addStakeholder(address _stakeholder)\n', '       public\n', '   {\n', '       (bool _isStakeholder) = isStakeholder(_stakeholder);\n', '       if(!_isStakeholder) {\n', '           stakeholders.push(_stakeholder);\n', '           farmTime[msg.sender] =  block.timestamp;\n', '       }\n', '   }\n', '   \n', '   // ------------------------------------------------------------------------\n', '    // Token holders can stake their tokens using this function\n', '    // @param tokens number of tokens to stake\n', '    // ------------------------------------------------------------------------\n', '    function STAKE(uint256 tokens) external nonReentrant { \n', '        require(IERC20(TRY).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from user for locking");\n', '        \n', '            uint256 transferTxFee = (onePercent(tokens).mul(txFee)).div(10);\n', '            uint256 tokensToStake = (tokens.sub(transferTxFee));\n', '        \n', '            \n', '            // add pending rewards to remainder to be claimed by user later, if there is any existing stake\n', '            uint256 owing = pendingReward(msg.sender);\n', '            stakers[msg.sender].remainder += owing;\n', '            \n', '            stakers[msg.sender].stakedTokens = tokensToStake.add(stakers[msg.sender].stakedTokens);\n', '            stakers[msg.sender].lastDividends = owing;\n', '            stakers[msg.sender].fromTotalDividend= totalDividends;\n', '            stakers[msg.sender].round =  round;\n', '            \n', '            \n', '            totalStakes = totalStakes.add(tokensToStake);\n', '            \n', '            addStakeholder(msg.sender);\n', '            \n', '            emit STAKED(msg.sender, tokens);\n', '        \n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Owners can send the funds to be distributed to stakers using this function\n', '    // @param tokens number of tokens to distribute\n', '    // ------------------------------------------------------------------------\n', '    function ADDFUNDS(uint256 tokens) external onlyWhitelistAdmin{ //can only be called by regrewardContract\n', '        uint256 transferTxFee = (onePercent(tokens).mul(txFee1)).div(10);\n', '        uint256 tokens_ = (tokens.sub(transferTxFee));\n', '        \n', '        _addPayout(tokens_);\n', '    }\n', '    \n', '    function ADDFUNDS1(uint256 tokens) external{\n', '        require(IERC20(fETH).transferFrom(msg.sender, address(this), tokens), "Tokens cannot be transferred from funder account");\n', '        uint256 transferTxFee = (onePercent(tokens).mul(txFee1)).div(10);\n', '        uint256 tokens_ = (tokens.sub(transferTxFee));\n', '        \n', '        _addPayout(tokens_);\n', '    }\n', '    \n', '    \n', '    \n', '    \n', '    function DisributeTxFunds() external { // Distribute tx fees collected for conversion into rewards\n', '        \n', '        uint256 transferToAmount = (IERC20(TRY).balanceOf(address(this))).sub(totalStakes);\n', '        require(IERC20(TRY).transfer(address(owner), transferToAmount), "Error in un-staking tokens");\n', '    }\n', '    \n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Private function to register payouts\n', '    // ------------------------------------------------------------------------\n', '    function _addPayout(uint256 tokens_) private{\n', '        // divide the funds among the currently staked tokens\n', '        // scale the deposit and add the previous remainder\n', '        uint256 available = (tokens_.mul(scaling)).add(scaledRemainder); \n', '        uint256 dividendPerToken = available.div(totalStakes);\n', '        scaledRemainder = available.mod(totalStakes);\n', '        \n', '        totalDividends = totalDividends.add(dividendPerToken);\n', '        payouts[round] = payouts[round - 1].add(dividendPerToken);\n', '        \n', '        emit PAYOUT(round, tokens_, msg.sender);\n', '        round++;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Stakers can claim their pending rewards using this function\n', '    // ------------------------------------------------------------------------\n', '    function CLAIMREWARD() public nonReentrant{\n', '        \n', '        if(totalDividends > stakers[msg.sender].fromTotalDividend){\n', '            uint256 owing = pendingReward(msg.sender);\n', '        \n', '            owing = owing.add(stakers[msg.sender].remainder);\n', '            stakers[msg.sender].remainder = 0;\n', '        \n', '            require(IERC20(fETH).transfer(msg.sender,owing), "ERROR: error in sending reward from contract");\n', '        \n', '            emit CLAIMEDREWARD(msg.sender, owing);\n', '        \n', '            stakers[msg.sender].lastDividends = owing; // unscaled\n', '            stakers[msg.sender].round = round; // update the round\n', '            stakers[msg.sender].fromTotalDividend = totalDividends; // scaled\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the pending rewards of the staker\n', '    // @param _staker the address of the staker\n', '    // ------------------------------------------------------------------------    \n', '    function pendingReward(address staker) private returns (uint256) {\n', '        require(staker != address(0), "ERC20: sending to the zero address");\n', '        \n', '        uint stakersRound = stakers[staker].round;\n', '        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\n', '        stakers[staker].remainder += ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\n', '        return amount;\n', '    }\n', '    \n', '    function getPendingReward(address staker) public view returns(uint256 _pendingReward) {\n', '        require(staker != address(0), "ERC20: sending to the zero address");\n', '         uint stakersRound = stakers[staker].round;\n', '         \n', '        uint256 amount =  ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)).div(scaling);\n', '        amount += ((totalDividends.sub(payouts[stakersRound - 1])).mul(stakers[staker].stakedTokens)) % scaling ;\n', '        return (amount.add(stakers[staker].remainder));\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Stakers can un stake the staked tokens using this function\n', '    // @param tokens the number of tokens to withdraw\n', '    // ------------------------------------------------------------------------\n', '    function WITHDRAW(uint256 tokens) external nonReentrant{\n', '        require(stakers[msg.sender].stakedTokens >= tokens && tokens > 0, "Invalid token amount to withdraw");\n', '        \n', '        totalStakes = totalStakes.sub(tokens);\n', '        \n', '        // add pending rewards to remainder to be claimed by user later, if there is any existing stake\n', '        uint256 owing = pendingReward(msg.sender);\n', '        stakers[msg.sender].remainder += owing;\n', '                \n', '        stakers[msg.sender].stakedTokens = stakers[msg.sender].stakedTokens.sub(tokens);\n', '        stakers[msg.sender].lastDividends = owing;\n', '        stakers[msg.sender].fromTotalDividend= totalDividends;\n', '        stakers[msg.sender].round =  round;\n', '        \n', '        \n', '        require(IERC20(TRY).transfer(msg.sender, tokens), "Error in un-staking tokens");\n', '        emit UNSTAKED(msg.sender, tokens);\n', '        \n', '        if(perform==true) {\n', '        regreward(regrewardContract).distributeAll();\n', '        }\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Private function to calculate 1% percentage\n', '    // ------------------------------------------------------------------------\n', '    function onePercent(uint256 _tokens) private pure returns (uint256){\n', '        uint256 roundValue = _tokens.ceil(100);\n', '        uint onePercentofTokens = roundValue.mul(100).div(100 * 10**uint(2));\n', '        return onePercentofTokens;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the number of tokens staked by a staker\n', '    // @param _staker the address of the staker\n', '    // ------------------------------------------------------------------------\n', '    function yourStakedTRY(address staker) public view returns(uint256 stakedTRY){\n', '        require(staker != address(0), "ERC20: sending to the zero address");\n', '        \n', '        return stakers[staker].stakedTokens;\n', '    }\n', '    \n', '    // ------------------------------------------------------------------------\n', '    // Get the TRY balance of the token holder\n', '    // @param user the address of the token holder\n', '    // ------------------------------------------------------------------------\n', '    function yourTRYBalance(address user) external view returns(uint256 TRYBalance){\n', '        require(user != address(0), "ERC20: sending to the zero address");\n', '        return IERC20(TRY).balanceOf(user);\n', '    }\n', '    \n', '    function emergencySaveLostTokens(address _token) public onlyOwner {\n', '        require(IERC20(_token).transfer(owner, IERC20(_token).balanceOf(address(this))), "Error in retrieving tokens");\n', '        owner.transfer(address(this).balance);\n', '    }\n', '    \n', '    function changeregrewardContract(address _regrewardContract) external onlyOwner{\n', '        require(address(_regrewardContract) != address(0), "setting 0 to contract");\n', '        regrewardContract = _regrewardContract;\n', '    }\n', '   \n', '   function changePerform(bool _bool) external onlyOwner{\n', '        perform = _bool;\n', '    }\n', '}']