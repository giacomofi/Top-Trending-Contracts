['pragma solidity =0.6.6;\n', '\n', 'import "./libraries/SafeMath.sol";\n', 'import "./interfaces/IImx.sol";\n', 'import "./interfaces/IClaimable.sol";\n', 'import "./interfaces/IVester.sol";\n', '\n', 'contract Vester is IVester, IClaimable {\n', '\tusing SafeMath for uint;\n', '\n', '\tuint public constant override segments = 100;\n', '\n', '\taddress public immutable imx;\n', '\taddress public recipient;\n', '\n', '\tuint public immutable override vestingAmount;\n', '\tuint public immutable override vestingBegin;\n', '\tuint public immutable override vestingEnd;\n', '\n', '\tuint public previousPoint;\n', '\tuint public immutable finalPoint;\n', '\n', '\tconstructor(\n', '\t\taddress imx_,\n', '\t\taddress recipient_,\n', '\t\tuint vestingAmount_,\n', '\t\tuint vestingBegin_,\n', '\t\tuint vestingEnd_\n', '\t) public {\n', '\t\trequire(vestingEnd_ > vestingBegin_, "Vester: END_TOO_EARLY");\n', '\n', '\t\timx = imx_;\n', '\t\trecipient = recipient_;\n', '\n', '\t\tvestingAmount = vestingAmount_;\n', '\t\tvestingBegin = vestingBegin_;\n', '\t\tvestingEnd = vestingEnd_;\n', '\n', '\t\tfinalPoint = vestingCurve(1e18);\n', '\t}\n', '\t\n', '\tfunction vestingCurve(uint x) public virtual pure returns (uint y) {\n', '\t\tuint speed = 1e18;\n', '\t\tfor (uint i = 0; i < 100e16; i += 1e16) {\n', '\t\t\tif (x < i + 1e16) return y + speed * (x - i) / 1e16;\n', '\t\t\ty += speed;\n', '\t\t\tspeed = speed * 976 / 1000;\n', '\t\t}\n', '\t}\n', '\t\n', '\tfunction getUnlockedAmount() internal virtual returns (uint amount) {\n', '\t\tuint blockTimestamp = getBlockTimestamp();\n', '\t\tuint currentPoint = vestingCurve( (blockTimestamp - vestingBegin).mul(1e18).div(vestingEnd - vestingBegin) );\n', '\t\tamount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(finalPoint);\n', '\t\tpreviousPoint = currentPoint;\n', '\t}\n', '\t\n', '\tfunction claim() public virtual override returns (uint amount) {\n', '\t\trequire(msg.sender == recipient, "Vester: UNAUTHORIZED");\n', '\t\tuint blockTimestamp = getBlockTimestamp();\n', '\t\tif (blockTimestamp < vestingBegin) return 0;\n', '\t\tif (blockTimestamp > vestingEnd) {\n', '\t\t\tamount = IImx(imx).balanceOf(address(this));\n', '\t\t} else {\n', '\t\t\tamount = getUnlockedAmount();\n', '\t\t}\n', '\t\tif (amount > 0) IImx(imx).transfer(recipient, amount);\n', '\t}\n', '\t\n', '\tfunction setRecipient(address recipient_) public virtual {\n', '\t\trequire(msg.sender == recipient, "Vester: UNAUTHORIZED");\n', '\t\trecipient = recipient_;\n', '\t}\n', '\t\n', '\tfunction getBlockTimestamp() public virtual view returns (uint) {\n', '\t\treturn block.timestamp;\n', '\t}\n', '}\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'import "./Vester.sol";\n', '\n', 'contract VesterSale is Vester {\n', '\n', '\tconstructor(\n', '\t\taddress imx_,\n', '\t\taddress recipient_,\n', '\t\tuint vestingAmount_,\n', '\t\tuint vestingBegin_,\n', '\t\tuint vestingEnd_\n', '\t) public Vester(imx_, recipient_, vestingAmount_, vestingBegin_, vestingEnd_) {}\n', '\t\n', '\tfunction getUnlockedAmount() internal virtual override returns (uint amount) {\n', '\t\tuint blockTimestamp = getBlockTimestamp();\n', '\t\tuint currentPoint = vestingCurve( (blockTimestamp - vestingBegin).mul(1e18).div(vestingEnd - vestingBegin) );\n', '\t\tamount = vestingAmount.mul(currentPoint.sub(previousPoint)).div(finalPoint).mul(8).div(10);\n', '\t\tif (previousPoint == 0 && currentPoint > 0) {\n', '\t\t\t// distribute 20% on TGE\n', '\t\t\tamount = amount.add(vestingAmount.div(5));\n', '\t\t}\n', '\t\tpreviousPoint = currentPoint;\n', '\t}\n', '\n', '}\n', '\n', 'pragma solidity =0.6.6;\n', '\n', 'interface IClaimable {\n', '\tfunction claim() external returns (uint amount);\n', '\tevent Claim(address indexed account, uint amount);\n', '}\n', '\n', 'pragma solidity =0.6.6;\n', '//IERC20?\n', 'interface IImx {\n', '    function balanceOf(address account) external view returns (uint);\n', '    function transfer(address dst, uint rawAmount) external returns (bool);\n', '}\n', '\n', 'pragma solidity >=0.5.0;\n', '\n', 'interface IVester {\n', '\tfunction segments() external pure returns (uint);\n', '\tfunction vestingAmount() external pure returns (uint);\n', '\tfunction vestingBegin() external pure returns (uint);\n', '\tfunction vestingEnd() external pure returns (uint);\n', '}\n', '\n', 'pragma solidity =0.6.6;\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol\n', '// Subject to the MIT license.\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting with custom message on overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction underflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on underflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     * - Subtraction cannot underflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, errorMessage);\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers.\n', '     * Reverts with custom message on division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        // Solidity only automatically asserts when dividing by 0\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 999999\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']