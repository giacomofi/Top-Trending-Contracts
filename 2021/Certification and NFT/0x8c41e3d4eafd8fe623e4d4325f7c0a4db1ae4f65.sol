['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-20\n', '*/\n', '\n', '// File: contracts\\presto\\PrestoData.sol\n', '\n', '//SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct PrestoOperation {\n', '\n', '    address inputTokenAddress;\n', '    uint256 inputTokenAmount;\n', '\n', '    address ammPlugin;\n', '    address[] liquidityPoolAddresses;\n', '    address[] swapPath;\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '\n', '    address[] receivers;\n', '    uint256[] receiversPercentages;\n', '}\n', '\n', '// File: contracts\\presto\\IPresto.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', 'pragma abicoder v2;\n', '\n', '\n', 'interface IPresto {\n', '\n', '    function ONE_HUNDRED() external view returns (uint256);\n', '    function doubleProxy() external view returns (address);\n', '    function feePercentage() external view returns (uint256);\n', '\n', '    function feePercentageInfo() external view returns (uint256, address);\n', '\n', '    function setDoubleProxy(address _doubleProxy) external;\n', '\n', '    function setFeePercentage(uint256 _feePercentage) external;\n', '\n', '    function execute(PrestoOperation[] memory operations) external payable;\n', '}\n', '\n', '// File: contracts\\presto\\util\\IERC20.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC20 {\n', '    function totalSupply() external view returns(uint256);\n', '    function balanceOf(address account) external view returns (uint256);\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    function decimals() external view returns (uint8);\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\AMMData.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct LiquidityPoolData {\n', '    address liquidityPoolAddress;\n', '    uint256 amount;\n', '    address tokenAddress;\n', '    bool amountIsLiquidityPool;\n', '    bool involvingETH;\n', '    address receiver;\n', '}\n', '\n', 'struct SwapData {\n', '    bool enterInETH;\n', '    bool exitInETH;\n', '    address[] liquidityPoolAddresses;\n', '    address[] path;\n', '    address inputToken;\n', '    uint256 amount;\n', '    address receiver;\n', '}\n', '\n', '// File: contracts\\amm-aggregator\\common\\IAMM.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IAMM {\n', '\n', '    event NewLiquidityPoolAddress(address indexed);\n', '\n', '    function info() external view returns(string memory name, uint256 version);\n', '\n', '    function data() external view returns(address ethereumAddress, uint256 maxTokensPerLiquidityPool, bool hasUniqueLiquidityPools);\n', '\n', '    function balanceOf(address liquidityPoolAddress, address owner) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPool(address liquidityPoolAddress) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function byTokens(address[] calldata liquidityPoolTokens) external view returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function byPercentage(address liquidityPoolAddress, uint256 numerator, uint256 denominator) external view returns (uint256, uint256[] memory, address[] memory);\n', '\n', '    function byLiquidityPoolAmount(address liquidityPoolAddress, uint256 liquidityPoolAmount) external view returns(uint256[] memory, address[] memory);\n', '\n', '    function byTokenAmount(address liquidityPoolAddress, address tokenAddress, uint256 tokenAmount) external view returns(uint256, uint256[] memory, address[] memory);\n', '\n', '    function createLiquidityPoolAndAddLiquidity(address[] calldata tokenAddresses, uint256[] calldata amounts, bool involvingETH, address receiver) external payable returns(uint256, uint256[] memory, address, address[] memory);\n', '\n', '    function addLiquidity(LiquidityPoolData calldata data) external payable returns(uint256, uint256[] memory, address[] memory);\n', '    function addLiquidityBatch(LiquidityPoolData[] calldata data) external payable returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function removeLiquidity(LiquidityPoolData calldata data) external returns(uint256, uint256[] memory, address[] memory);\n', '    function removeLiquidityBatch(LiquidityPoolData[] calldata data) external returns(uint256[] memory, uint256[][] memory, address[][] memory);\n', '\n', '    function getSwapOutput(address tokenAddress, uint256 tokenAmount, address[] calldata, address[] calldata path) view external returns(uint256[] memory);\n', '\n', '    function swapLiquidity(SwapData calldata data) external payable returns(uint256);\n', '    function swapLiquidityBatch(SwapData[] calldata data) external payable returns(uint256[] memory);\n', '}\n', '\n', '// File: contracts\\farming\\FarmData.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'struct FarmingPositionRequest {\n', '    uint256 setupIndex; // index of the chosen setup.\n', '    uint256 amount; // amount of main token or liquidity pool token.\n', '    bool amountIsLiquidityPool; //true if user wants to directly share the liquidity pool token amount, false to add liquidity to AMM\n', '    address positionOwner; // position extension or address(0) [msg.sender].\n', '}\n', '\n', 'struct FarmingSetupConfiguration {\n', "    bool add; // true if we're adding a new setup, false we're updating it.\n", '    bool disable;\n', "    uint256 index; // index of the setup we're updating.\n", '    FarmingSetupInfo info; // data of the new or updated setup\n', '}\n', '\n', 'struct FarmingSetupInfo {\n', '    bool free; // if the setup is a free farming setup or a locked one.\n', '    uint256 blockDuration; // duration of setup\n', '    uint256 originalRewardPerBlock;\n', '    uint256 minStakeable; // minimum amount of staking tokens.\n', '    uint256 maxStakeable; // maximum amount stakeable in the setup (used only if free is false).\n', "    uint256 renewTimes; // if the setup is renewable or if it's one time.\n", '    address ammPlugin; // amm plugin address used for this setup (eg. uniswap amm plugin address).\n', '    address liquidityPoolTokenAddress; // address of the liquidity pool token\n', '    address mainTokenAddress; // eg. buidl address.\n', '    address ethereumAddress;\n', '    bool involvingETH; // if the setup involves ETH or not.\n', '    uint256 penaltyFee; // fee paid when the user exits a still active locked farming setup (used only if free is false).\n', '    uint256 setupsCount; // number of setups created by this info.\n', '    uint256 lastSetupIndex; // index of last setup;\n', '}\n', '\n', 'struct FarmingSetup {\n', '    uint256 infoIndex; // setup info\n', '    bool active; // if the setup is active or not.\n', '    uint256 startBlock; // farming setup start block.\n', '    uint256 endBlock; // farming setup end block.\n', '    uint256 lastUpdateBlock; // number of the block where an update was triggered.\n', '    uint256 objectId; // items object id for the liquidity pool token (used only if free is false).\n', '    uint256 rewardPerBlock; // farming setup reward per single block.\n', "    uint256 totalSupply; // If free it's the LP amount, if locked is currentlyStaked.\n", '}\n', '\n', 'struct FarmingPosition {\n', '    address uniqueOwner; // address representing the owner of the position.\n', '    uint256 setupIndex; // the setup index related to this position.\n', '    uint256 creationBlock; // block when this position was created.\n', '    uint256 liquidityPoolTokenAmount; // amount of liquidity pool token in the position.\n', '    uint256 mainTokenAmount; // amount of main token in the position (used only if free is false).\n', '    uint256 reward; // position reward (used only if free is false).\n', '    uint256 lockedRewardPerBlock; // position locked reward per block (used only if free is false).\n', '}\n', '\n', '// File: contracts\\farming\\IFarmMain.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', 'interface IFarmMain {\n', '\n', '    function ONE_HUNDRED() external view returns(uint256);\n', '    function _rewardTokenAddress() external view returns(address);\n', '    function position(uint256 positionId) external view returns (FarmingPosition memory);\n', '    function setups() external view returns (FarmingSetup[] memory);\n', '    function setup(uint256 setupIndex) external view returns (FarmingSetup memory, FarmingSetupInfo memory);\n', '    function setFarmingSetups(FarmingSetupConfiguration[] memory farmingSetups) external;\n', '    function openPosition(FarmingPositionRequest calldata request) external payable returns(uint256 positionId);\n', '    function addLiquidity(uint256 positionId, FarmingPositionRequest calldata request) external payable;\n', '}\n', '\n', '// File: contracts\\presto\\util\\IERC1155.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', 'interface IERC1155 {\n', '\n', '    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n', '\n', '    event TransferBatch(address indexed operator, address indexed from, address indexed to, uint256[] ids, uint256[] values);\n', '\n', '    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n', '\n', '    event URI(string value, uint256 indexed id);\n', '\n', '    function balanceOf(address account, uint256 id) external view returns (uint256);\n', '\n', '    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids) external view returns (uint256[] memory);\n', '\n', '    function setApprovalForAll(address operator, bool approved) external;\n', '\n', '    function isApprovedForAll(address account, address operator) external view returns (bool);\n', '\n', '    function safeTransferFrom(address from, address to, uint256 id, uint256 amount, bytes calldata data) external;\n', '\n', '    function safeBatchTransferFrom(address from, address to, uint256[] calldata ids, uint256[] calldata amounts, bytes calldata data) external;\n', '}\n', '\n', '// File: contracts\\presto\\util\\IEthItemInteroperableInterface.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'interface IEthItemInteroperableInterface is IERC20 {\n', '\n', '    function mainInterface() external view returns (address);\n', '\n', '    function objectId() external view returns (uint256);\n', '\n', '    function mint(address owner, uint256 amount) external;\n', '\n', '    function burn(address owner, uint256 amount) external;\n', '\n', '    function permitNonce(address sender) external view returns(uint256);\n', '\n', '    function permit(address owner, address spender, uint value, uint8 v, bytes32 r, bytes32 s) external;\n', '\n', '    function interoperableInterfaceVersion() external pure returns(uint256 ethItemInteroperableInterfaceVersion);\n', '}\n', '\n', '// File: contracts\\presto\\util\\IEthItem.sol\n', '\n', '// SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', '\n', 'interface IEthItem is IERC1155 {\n', '\n', '    function name() external view returns (string memory);\n', '\n', '    function symbol() external view returns (string memory);\n', '\n', '    function totalSupply(uint256 objectId) external view returns (uint256);\n', '\n', '    function name(uint256 objectId) external view returns (string memory);\n', '\n', '    function symbol(uint256 objectId) external view returns (string memory);\n', '\n', '    function decimals(uint256 objectId) external view returns (uint256);\n', '\n', '    function uri(uint256 objectId) external view returns (string memory);\n', '\n', '    function mainInterfaceVersion() external pure returns(uint256 ethItemInteroperableVersion);\n', '\n', '    function toInteroperableInterfaceAmount(uint256 objectId, uint256 ethItemAmount) external view returns (uint256 interoperableInterfaceAmount);\n', '\n', '    function toMainInterfaceAmount(uint256 objectId, uint256 erc20WrapperAmount) external view returns (uint256 mainInterfaceAmount);\n', '\n', '    function interoperableInterfaceModel() external view returns (address, uint256);\n', '\n', '    function asInteroperable(uint256 objectId) external view returns (IEthItemInteroperableInterface);\n', '\n', '    function emitTransferSingleEvent(address sender, address from, address to, uint256 objectId, uint256 amount) external;\n', '\n', '    function mint(uint256 amount, string calldata partialUri)\n', '        external\n', '        returns (uint256, address);\n', '\n', '    function burn(\n', '        uint256 objectId,\n', '        uint256 amount\n', '    ) external;\n', '\n', '    function burnBatch(\n', '        uint256[] calldata objectIds,\n', '        uint256[] calldata amounts\n', '    ) external;\n', '}\n', '\n', '// File: contracts\\presto\\util\\INativeV1.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', '\n', 'pragma solidity ^0.7.6;\n', '\n', '\n', 'interface INativeV1 is IEthItem {\n', '\n', '    function init(string calldata name, string calldata symbol, bool hasDecimals, string calldata collectionUri, address extensionAddress, bytes calldata extensionInitPayload) external returns(bytes memory extensionInitCallResponse);\n', '\n', '    function extension() external view returns (address extensionAddress);\n', '\n', '    function canMint(address operator) external view returns (bool result);\n', '\n', '    function isEditable(uint256 objectId) external view returns (bool result);\n', '\n', '    function releaseExtension() external;\n', '\n', '    function uri() external view returns (string memory);\n', '\n', '    function decimals() external view returns (uint256);\n', '\n', '    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri, bool editable) external returns (uint256 objectId, address tokenAddress);\n', '\n', '    function mint(uint256 amount, string calldata tokenName, string calldata tokenSymbol, string calldata objectUri) external returns (uint256 objectId, address tokenAddress);\n', '\n', '    function mint(uint256 objectId, uint256 amount) external;\n', '\n', '    function makeReadOnly(uint256 objectId) external;\n', '\n', '    function setUri(string calldata newUri) external;\n', '\n', '    function setUri(uint256 objectId, string calldata newUri) external;\n', '}\n', '\n', '// File: contracts\\presto\\verticalizations\\FarmingPresto.sol\n', '\n', '//SPDX_License_Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '//pragma abicoder v2;\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract FarmingPresto {\n', '\n', '    mapping(address => uint256) private _tokenIndex;\n', '    address[] private _tokensToTransfer;\n', '    uint256[] private _tokenAmounts;\n', '    PrestoOperation[] private _operations;\n', '\n', '    receive() external payable {\n', '    }\n', '\n', '    function openPosition(\n', '        address prestoAddress,\n', '        PrestoOperation[] memory operations,\n', '        address farmMainAddress,\n', '        FarmingPositionRequest memory request\n', '    ) public payable returns(uint256 positionId) {\n', '        request.positionOwner = request.positionOwner != address(0) ? request.positionOwner : msg.sender;\n', '        uint256 eth = _transferToMeAndCheckAllowance(operations, prestoAddress);\n', '        IPresto(prestoAddress).execute{value : eth}(_operations);\n', '        IFarmMain farmMain = IFarmMain(farmMainAddress);\n', '        (address[] memory tokenAddresses, uint256 ethereumValue) = _calculateAmountsAndApprove(farmMain, request.setupIndex, request.amount);\n', '        positionId = farmMain.openPosition{value : ethereumValue}(request);\n', '        _flushAndClear(tokenAddresses, msg.sender);\n', '    }\n', '\n', '    function _calculateAmountsAndApprove(IFarmMain farmMain, uint256 setupIndex, uint256 requestAmount) private returns(address[] memory tokenAddresses, uint256 ethereumValue) {\n', '        (, FarmingSetupInfo memory setupInfo) = farmMain.setup(setupIndex);\n', '        uint256[] memory tokensAmounts;\n', '        (, tokensAmounts, tokenAddresses) = IAMM(setupInfo.ammPlugin).byTokenAmount(setupInfo.liquidityPoolTokenAddress, setupInfo.mainTokenAddress, requestAmount);\n', '        for(uint256 i = 0; i < tokenAddresses.length; i++) {\n', '            if(setupInfo.involvingETH && tokenAddresses[i] == setupInfo.ethereumAddress) {\n', '                ethereumValue = tokensAmounts[i];\n', '            }\n', '            if(tokenAddresses[i] != address(0)) {\n', '                _safeApprove(tokenAddresses[i], address(farmMain), tokensAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _flushAndClear(address[] memory tokenAddresses, address receiver) private {\n', '        for(uint256 i = 0; i < tokenAddresses.length; i++) {\n', '            if(_tokensToTransfer.length == 0 || _tokensToTransfer[_tokenIndex[tokenAddresses[i]]] != tokenAddresses[i]) {\n', '                _safeTransfer(tokenAddresses[i], receiver, _balanceOf(tokenAddresses[i]));\n', '            }\n', '        }\n', '        if(_tokensToTransfer.length == 0 || _tokensToTransfer[_tokenIndex[address(0)]] != address(0)) {\n', '            _safeTransfer(address(0), receiver, address(this).balance);\n', '        }\n', '        _flushAndClear(receiver);\n', '    }\n', '\n', '    function _transferToMeAndCheckAllowance(PrestoOperation[] memory operations, address operator) private returns (uint256 eth) {\n', '        eth = _collectTokensAndCheckAllowance(operations, operator);\n', '        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\n', '            if(_tokensToTransfer[i] == address(0)) {\n', '                require(msg.value >= _tokenAmounts[i], "Incorrect ETH value");\n', '            } else {\n', '                _safeTransferFrom(_tokensToTransfer[i], msg.sender, address(this), _tokenAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _collectTokensAndCheckAllowance(PrestoOperation[] memory operations, address operator) private returns (uint256 eth) {\n', '        for(uint256 i = 0; i < operations.length; i++) {\n', '            PrestoOperation memory operation = operations[i];\n', '            require(operation.ammPlugin == address(0) || operation.liquidityPoolAddresses.length > 0, "AddLiquidity not allowed"); \n', '            _collectTokenData(operation.ammPlugin != address(0) && operation.enterInETH ? address(0) : operation.inputTokenAddress, operation.inputTokenAmount);\n', '            if(operation.ammPlugin != address(0)) {\n', '                _operations.push(operation);\n', '                if(operation.inputTokenAddress == address(0) || operation.enterInETH) {\n', '                    eth += operation.inputTokenAmount;\n', '                }\n', '            }\n', '        }\n', '        for(uint256 i = 0 ; i < _tokensToTransfer.length; i++) {\n', '            if(_tokensToTransfer[i] != address(0)) {\n', '                _safeApprove(_tokensToTransfer[i], operator, _tokenAmounts[i]);\n', '            }\n', '        }\n', '    }\n', '\n', '    function _collectTokenData(address inputTokenAddress, uint256 inputTokenAmount) private {\n', '        if(inputTokenAmount == 0) {\n', '            return;\n', '        }\n', '\n', '        uint256 position = _tokenIndex[inputTokenAddress];\n', '\n', '        if(_tokensToTransfer.length == 0 || _tokensToTransfer[position] != inputTokenAddress) {\n', '            _tokenIndex[inputTokenAddress] = (position = _tokensToTransfer.length);\n', '            _tokensToTransfer.push(inputTokenAddress);\n', '            _tokenAmounts.push(0);\n', '        }\n', '        _tokenAmounts[position] = _tokenAmounts[position] + inputTokenAmount;\n', '    }\n', '\n', '    function _flushAndClear(address receiver) private {\n', '        for(uint256 i = 0; i < _tokensToTransfer.length; i++) {\n', '            _safeTransfer(_tokensToTransfer[i], receiver, _balanceOf(_tokensToTransfer[i]));\n', '            delete _tokenIndex[_tokensToTransfer[i]];\n', '        }\n', '        delete _tokensToTransfer;\n', '        delete _tokenAmounts;\n', '        delete _operations;\n', '    }\n', '\n', '    function _balanceOf(address tokenAddress) private view returns(uint256) {\n', '        if(tokenAddress == address(0)) {\n', '            return address(this).balance;\n', '        }\n', '        return IERC20(tokenAddress).balanceOf(address(this));\n', '    }\n', '\n', '    function _safeApprove(address erc20TokenAddress, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).approve.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'APPROVE_FAILED');\n", '    }\n', '\n', '    function _safeTransfer(address erc20TokenAddress, address to, uint256 value) private {\n', '        if(value == 0) {\n', '            return;\n', '        }\n', '        if(erc20TokenAddress == address(0)) {\n', '            (bool result,) = to.call{value:value}("");\n', '            require(result, "ETH transfer failed");\n', '            return;\n', '        }\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transfer.selector, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFER_FAILED');\n", '    }\n', '\n', '    function _safeTransferFrom(address erc20TokenAddress, address from, address to, uint256 value) internal {\n', '        bytes memory returnData = _call(erc20TokenAddress, abi.encodeWithSelector(IERC20(erc20TokenAddress).transferFrom.selector, from, to, value));\n', "        require(returnData.length == 0 || abi.decode(returnData, (bool)), 'TRANSFERFROM_FAILED');\n", '    }\n', '\n', '    function _call(address location, bytes memory payload) private returns(bytes memory returnData) {\n', '        assembly {\n', '            let result := call(gas(), location, 0, add(payload, 0x20), mload(payload), 0, 0)\n', '            let size := returndatasize()\n', '            returnData := mload(0x40)\n', '            mstore(returnData, size)\n', '            let returnDataPayloadStart := add(returnData, 0x20)\n', '            returndatacopy(returnDataPayloadStart, 0, size)\n', '            mstore(0x40, add(returnDataPayloadStart, size))\n', '            switch result case 0 {revert(returnDataPayloadStart, size)}\n', '        }\n', '    }\n', '}']