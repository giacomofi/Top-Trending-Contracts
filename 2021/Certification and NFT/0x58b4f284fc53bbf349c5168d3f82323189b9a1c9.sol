['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-11\n', '*/\n', '\n', '// SPDX-FileCopyrightText: Â© 2020 Velox <[email\xa0protected]>\n', '// SPDX-License-Identifier: BSD-3-Clause\n', '\n', 'pragma solidity >=0.8.0;\n', '\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return payable(msg.sender);\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', 'abstract contract BackingStore {\n', '    address public MAIN_CONTRACT;\n', '    address public UNISWAP_FACTORY_ADDRESS = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n', '    address public UNISWAP_ROUTER_ADDRESS = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n', '    address public ADMIN_ADDRESS;\n', '}\n', '\n', '/**\n', '  * @title VeloxProxy (Proxy Contract)\n', '  *\n', '  * @dev Call:\n', '  *\n', '  * VeloxProxy.at(VeloxProxy.address).setContract(VeloxSwap.address)\n', '  * VeloxSwap.at(VeloxProxy.address).sellTokenForETH(seller, token, tokenAmount, deadline\n', '  * VeloxSwap.at(VeloxProxy.address).setUniswapRouter(0xbeefc0debeefbeef)\n', '  *\n', '  */\n', 'contract VeloxProxy is BackingStore, Ownable {\n', '\n', '    function setAdminAddress(address _c) public onlyOwner returns (bool succeeded) {\n', '        require(_c != owner(), "VELOXPROXY_ADMIN_OWNER");\n', '        ADMIN_ADDRESS = _c;\n', '        return true;\n', '    }\n', '\n', '    // Set main Velox contract address\n', '    function setMainContract(address _c) public onlyOwner returns (bool succeeded) {\n', '        require(_c != address(this), "VELOXPROXY_CIRCULAR_REFERENCE");\n', '        require(isContract(_c), "VELOXPROXY_NOT_CONTRACT");\n', '        MAIN_CONTRACT = _c;\n', '        return true;\n', '    }\n', '\n', '    // ASM fallback function\n', '    function _fallback () internal {\n', '        address target = MAIN_CONTRACT;\n', '\n', '        assembly {\n', '            // Copy the data sent to the memory address starting free mem position\n', '            let ptr := mload(0x40)\n', '            calldatacopy(ptr, 0, calldatasize())\n', '\n', '            // Proxy the call to the contract address with the provided gas and data\n', '            let result := delegatecall(gas(), target, ptr, calldatasize(), 0, 0)\n', '\n', '            // Copy the data returned by the proxied call to memory\n', '            let size := returndatasize()\n', '            returndatacopy(ptr, 0, size)\n', '\n', '            // Check what the result is, return and revert accordingly\n', '            switch result\n', '            case 0 { revert(ptr, size) }\n', '            case 1 { return(ptr, size) }\n', '        }\n', '    }\n', '\n', '    // ASM fallback function\n', '    fallback () external {\n', '        _fallback();\n', '    }\n', '\n', '    receive () payable external {\n', '        _fallback();\n', '    }\n', '    \n', '    function isContract (address addr) private view returns (bool) {\n', '        uint size;\n', '        assembly { size := extcodesize(addr) }\n', '        return size > 0;\n', '    }\n', '}']