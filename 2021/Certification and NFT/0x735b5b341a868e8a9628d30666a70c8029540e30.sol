['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-21\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: contracts/INFTHG.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface INFTHG {\n', '    function mint(address to,uint8 picId,uint256 lockAmount) external;\n', '    function tokenData(uint256 tokenId) external view returns (uint8,uint256);\n', '    function burn(uint256 tokenId) external;\n', '    function ownerOf(uint256 tokenId) external view returns (address);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: contracts/IUNIRouter.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', 'interface IUNIRouter {\n', '    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n', '    function swapExactTokensForTokens(\n', '        uint amountIn,\n', '        uint amountOutMin,\n', '        address[] calldata path,\n', '        address to,\n', '        uint deadline\n', '    ) external returns (uint[] memory amounts);\n', '\n', '    //0x3472a5a71965499acd81997a54bba8d852c6e53d -> 0x2260fac5e5542a773aa44fbcfedf7c193bc2c599 -> 0x798d1be841a82a273720ce31c822c61a67a601c3\n', '    //decimals 9\n', '}\n', '\n', '// File: contracts/Presale.sol\n', '\n', 'pragma solidity ^0.6.2;\n', '\n', '\n', '\n', '\n', '\n', 'contract Presale {\n', '    using SafeMath for uint256;\n', '    IERC20 public badger = IERC20(0x3472A5A71965499acd81997a54BBA8D852C6E53d);\n', '    address public wbtc = 0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599;\n', '    IERC20 public digg = IERC20(0x798D1bE841a82a273720CE31c822C61a67a601C3);\n', '    INFTHG public hgNFT = INFTHG(0xd608D64D2D9DA1320742d6df06D7323848e35248);\n', '    IUNIRouter public router = IUNIRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n', '    address public teamAddr = address(0x316C0837F85383bDc10dD0DA3DcC178DC13fcb11);\n', '    address public owner;\n', '    mapping(uint8 => uint256) public salePrice;\n', '    mapping(uint8 => uint256) public saleAmount;\n', '    mapping(uint8 => bool) public saleType; //false:digg true:badger\n', '    constructor() public {\n', '        owner = msg.sender;\n', '        \n', '        //digg\n', '        salePrice[1]=800000;\n', '        saleAmount[1]=5000;\n', '        \n', '        salePrice[2]=2000000;\n', '        saleAmount[2]=3000;\n', '        \n', '        salePrice[3]=5000000;\n', '        saleAmount[3]=1000;\n', '        \n', '        salePrice[4]=10000000;\n', '        saleAmount[4]=500;\n', '        \n', '        salePrice[5]=100000000;\n', '        saleAmount[5]=20;\n', '        \n', '        \n', '        //badger\n', '        salePrice[6]=10000000000000000;\n', '        saleAmount[6]=10000;\n', '        saleType[6]=true;\n', '        \n', '         salePrice[7]=100000000000000000000;\n', '        saleAmount[7]=2;\n', '        saleType[7]=true;\n', '        \n', '         salePrice[8]=1000000000000000000;\n', '        saleAmount[8]=20;\n', '        saleType[8]=true;\n', '        \n', '         salePrice[9]=50000000000000000000;\n', '        saleAmount[9]=5;\n', '        saleType[9]=true;\n', '        \n', '         salePrice[10]=2000000000000000000;\n', '        saleAmount[10]=10;\n', '        saleType[10]=true;\n', '        \n', '        \n', '    }\n', '    modifier onlyOwner{\n', "        require(msg.sender == owner,'not owner');\n", '        _;\n', '    }\n', '\n', '    function AddSale(uint8 level, uint256 price, uint256 amount, bool isBadger) public onlyOwner {\n', "        require(salePrice[level] == 0 && price > 0 && amount > 0,'para error');\n", '        salePrice[level] = price;\n', '        saleAmount[level] = amount;\n', '        saleType[level] = isBadger;\n', '    }\n', '\n', '    function BuyCardUseDigg(uint8 level, uint256 count) public {\n', "        require(count > 0 && saleAmount[level] >= count && !saleType[level],'para error');\n", '        uint256 totalAmount = salePrice[level].mul(count);\n', '        uint256 forLq = totalAmount.mul(5).div(100);\n', '        digg.transferFrom(msg.sender, teamAddr, forLq);\n', '        digg.transferFrom(msg.sender, address(this), totalAmount.sub(forLq));\n', '        //mint nft\n', '        hgNFT.mint(msg.sender, level, totalAmount.sub(forLq));\n', '        saleAmount[level] = saleAmount[level].sub(count);\n', '    }\n', '\n', '    function BuyCardUseBadger(uint8 level, uint256 count) public {\n', "        require(count > 0 && saleAmount[level] >= count && saleType[level],'para error');\n", '        uint256 totalAmount = salePrice[level].mul(count);\n', '        uint256 forLqAndUser = totalAmount.mul(40).div(100);\n', '        badger.transferFrom(msg.sender, teamAddr, forLqAndUser);\n', '        uint256 amountIn = totalAmount.sub(forLqAndUser);\n', '        badger.transferFrom(msg.sender, address(this), amountIn);\n', '        saleAmount[level] = saleAmount[level].sub(count);\n', '        //swap badger to digg from uniswap\n', '        address[] memory path = new address[](3);\n', '        //badger\n', '        path[0] = address(badger);\n', '        //wbtc\n', '        path[1] = address(wbtc);\n', '        //digg\n', '        path[2] = address(digg);\n', '        uint[] memory amountsOut = router.getAmountsOut(amountIn, path);\n', '        uint amountOutMin = amountsOut[2];\n', '        //approve\n', '        badger.approve(address(router), uint(- 1));\n', '        uint[] memory amounts = router.swapExactTokensForTokens(amountIn, amountOutMin, path, address(this), now.add(60));\n', '        uint output = amounts[2];\n', '        //mint nft\n', '        hgNFT.mint(msg.sender, level, output);\n', '    }\n', '\n', '    function Burn(uint256 tokenId) public {\n', '        address ownerAddr = hgNFT.ownerOf(tokenId);\n', "        require(ownerAddr == msg.sender,'not owner');\n", '        (uint8 level,uint256 amount) = hgNFT.tokenData(tokenId);\n', '        hgNFT.burn(tokenId);\n', '        digg.transfer(msg.sender, amount);\n', '    }\n', '}']