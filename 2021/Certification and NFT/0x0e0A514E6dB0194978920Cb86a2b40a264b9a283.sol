['// SPDX-License-Identifier: MIT\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/GSN/Context.sol\n', '// Subject to the MIT license.\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/EnumerableSet.sol\n', '// Subject to the MIT license.\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Library for managing\n', ' * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n', ' * types.\n', ' *\n', ' * Sets have the following properties:\n', ' *\n', ' * - Elements are added, removed, and checked for existence in constant time\n', ' * (O(1)).\n', ' * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n', ' *\n', ' * ```\n', ' * contract Example {\n', ' *     // Add the library methods\n', ' *     using EnumerableSet for EnumerableSet.AddressSet;\n', ' *\n', ' *     // Declare a set state variable\n', ' *     EnumerableSet.AddressSet private mySet;\n', ' * }\n', ' * ```\n', ' *\n', ' * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n', ' * and `uint256` (`UintSet`) are supported.\n', ' */\n', 'library EnumerableSet {\n', '    // To implement this library for multiple types with as little code\n', '    // repetition as possible, we write it in terms of a generic Set type with\n', '    // bytes32 values.\n', '    // The Set implementation uses private functions, and user-facing\n', '    // implementations (such as AddressSet) are just wrappers around the\n', '    // underlying Set.\n', '    // This means that we can only create new EnumerableSets for types that fit\n', '    // in bytes32.\n', '\n', '    struct Set {\n', '        // Storage of set values\n', '        bytes32[] _values;\n', '\n', '        // Position of the value in the `values` array, plus 1 because index 0\n', '        // means a value is not in the set.\n', '        mapping (bytes32 => uint256) _indexes;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function _add(Set storage set, bytes32 value) private returns (bool) {\n', '        if (!_contains(set, value)) {\n', '            set._values.push(value);\n', '            // The value is stored at length-1, but we add 1 to all indexes\n', '            // and use 0 as a sentinel value\n', '            set._indexes[value] = set._values.length;\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function _remove(Set storage set, bytes32 value) private returns (bool) {\n', "        // We read and store the value's index to prevent multiple reads from the same storage slot\n", '        uint256 valueIndex = set._indexes[value];\n', '\n', '        if (valueIndex != 0) { // Equivalent to contains(set, value)\n', '            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n', "            // the array, and then remove the last element (sometimes called as 'swap and pop').\n", '            // This modifies the order of the array, as noted in {at}.\n', '\n', '            uint256 toDeleteIndex = valueIndex - 1;\n', '            uint256 lastIndex = set._values.length - 1;\n', '\n', '            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\n', "            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\n", '\n', '            bytes32 lastvalue = set._values[lastIndex];\n', '\n', '            // Move the last value to the index where the value to delete is\n', '            set._values[toDeleteIndex] = lastvalue;\n', '            // Update the index for the moved value\n', '            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\n', '\n', '            // Delete the slot where the moved value was stored\n', '            set._values.pop();\n', '\n', '            // Delete the index for the deleted slot\n', '            delete set._indexes[value];\n', '\n', '            return true;\n', '        } else {\n', '            return false;\n', '        }\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n', '        return set._indexes[value] != 0;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function _length(Set storage set) private view returns (uint256) {\n', '        return set._values.length;\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n', '        require(set._values.length > index, "EnumerableSet: index out of bounds");\n', '        return set._values[index];\n', '    }\n', '\n', '    // Bytes32Set\n', '\n', '    struct Bytes32Set {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _add(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n', '        return _remove(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n', '        return _contains(set._inner, value);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(Bytes32Set storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n', '        return _at(set._inner, index);\n', '    }\n', '\n', '    // AddressSet\n', '\n', '    struct AddressSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(AddressSet storage set, address value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(AddressSet storage set, address value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(AddressSet storage set, address value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(uint256(value)));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values in the set. O(1).\n', '     */\n', '    function length(AddressSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n', '        return address(uint256(_at(set._inner, index)));\n', '    }\n', '\n', '\n', '    // UintSet\n', '\n', '    struct UintSet {\n', '        Set _inner;\n', '    }\n', '\n', '    /**\n', '     * @dev Add a value to a set. O(1).\n', '     *\n', '     * Returns true if the value was added to the set, that is if it was not\n', '     * already present.\n', '     */\n', '    function add(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _add(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Removes a value from a set. O(1).\n', '     *\n', '     * Returns true if the value was removed from the set, that is if it was\n', '     * present.\n', '     */\n', '    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n', '        return _remove(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the value is in the set. O(1).\n', '     */\n', '    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n', '        return _contains(set._inner, bytes32(value));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of values on the set. O(1).\n', '     */\n', '    function length(UintSet storage set) internal view returns (uint256) {\n', '        return _length(set._inner);\n', '    }\n', '\n', '   /**\n', '    * @dev Returns the value stored at position `index` in the set. O(1).\n', '    *\n', '    * Note that there are no guarantees on the ordering of values inside the\n', '    * array, and it may change when more values are added or removed.\n', '    *\n', '    * Requirements:\n', '    *\n', '    * - `index` must be strictly less than {length}.\n', '    */\n', '    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n', '        return uint256(_at(set._inner, index));\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/access/Ownable.sol\n', '// Subject to the MIT license.\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', 'import "./Context.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', 'import "./TransferHelper.sol";\n', 'import "./EnumerableSet.sol";\n', 'import "./SafeMath.sol";\n', 'import "./Ownable.sol";\n', 'import "./ReentrancyGuard.sol";\n', '\n', 'interface IPlasmaswapPair {\n', '    function factory() external view returns (address);\n', '    function token0() external view returns (address);\n', '    function token1() external view returns (address);\n', '}\n', '\n', 'interface IPlasmaswapFactory {\n', '    function getPair(address tokenA, address tokenB) external view returns (address);\n', '}\n', '\n', 'interface IMigrator {\n', '    function migrate(address lpToken, uint256 amount, uint256 unlockDate, address owner) external returns (bool);\n', '}\n', '\n', 'contract PlasmaswapLocker is Ownable, ReentrancyGuard {\n', '  using SafeMath for uint256;\n', '  using EnumerableSet for EnumerableSet.AddressSet;\n', '\n', '  IPlasmaswapFactory public plasmaswapFactory;\n', '\n', '  struct UserInfo {\n', '    EnumerableSet.AddressSet lockedTokens; // records all tokens the user has locked\n', '    mapping(address => uint256[]) locksForToken; // map erc20 address to lock id for that token\n', '  }\n', '\n', '  struct TokenLock {\n', '    uint256 lockDate; // the date the token was locked\n', '    uint256 amount; // the amount of tokens still locked (initialAmount minus withdrawls)\n', '    uint256 initialAmount; // the initial lock amount\n', '    uint256 unlockDate; // the date the token can be withdrawn\n', '    uint256 lockID; // lockID nonce per uni pair\n', '    address owner;\n', '  }\n', '\n', '  mapping(address => UserInfo) private users;\n', '\n', '  EnumerableSet.AddressSet private lockedTokens;\n', '  mapping(address => TokenLock[]) public tokenLocks; //map pl-p  pair to all its locks\n', '  \n', '  struct FeeStruct {\n', '    uint256 ethFee; // Small eth fee to prevent spam on the platform\n', '    uint256 liquidityFee; // fee on pl-p  liquidity tokens\n', '  }\n', '    \n', '  FeeStruct public gFees;\n', '  EnumerableSet.AddressSet private feeWhitelist;\n', '  \n', '  address payable devaddr;\n', '  \n', '  IMigrator migrator;\n', '\n', '  event onDeposit(address lpToken, address user, uint256 amount, uint256 lockDate, uint256 unlockDate);\n', '  event onWithdraw(address lpToken, uint256 amount);\n', '\n', '  constructor(IPlasmaswapFactory _plasmaswapFactory) public {\n', '    devaddr = msg.sender;\n', '    gFees.ethFee = 1e18;\n', '    gFees.liquidityFee = 10; // 1%\n', '    plasmaswapFactory = _plasmaswapFactory;\n', '  }\n', '  \n', '  function setDev(address payable _devaddr) public onlyOwner {\n', '    devaddr = _devaddr;\n', '  }\n', '  \n', '  /**\n', '   * @notice Set the migrator contract which allows locked lp tokens to be migrated to plasmaswap v3\n', '   */\n', '  function setMigrator(IMigrator _migrator) public onlyOwner {\n', '    migrator = _migrator;\n', '  }\n', '  \n', '  function setFees( uint256 _ethFee, uint256 _liquidityFee) public onlyOwner {\n', '    gFees.ethFee = _ethFee;\n', '    gFees.liquidityFee = _liquidityFee;\n', '  }\n', '  \n', '  /**\n', '   * @notice Whitelisted accounts dont pay flatrate fees on locking\n', '   */\n', '  function whitelistFeeAccount(address _user, bool _add) public onlyOwner {\n', '    if (_add) {\n', '      feeWhitelist.add(_user);\n', '    } else {\n', '      feeWhitelist.remove(_user);\n', '    }\n', '  }\n', '\n', '  /**\n', '   * @notice Creates a new lock\n', '   * @param _lpToken The pl-p  token address\n', '   * @param _amount Amount of LP tokens to lock\n', '   * @param _unlock_date The unix timestamp (in seconds) until unlock\n', '   * @param _withdrawer The user who can withdraw liquidity once the lock expires.\n', '   */\n', '  function lockLPToken (address _lpToken, uint256 _amount, uint256 _unlock_date, address payable _withdrawer) external payable nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", "    require(_amount > 0, 'INSUFFICIENT');\n", '\n', '    // Ensure this pair is a pl-p  pair by querying the factory\n', '    IPlasmaswapPair lpair = IPlasmaswapPair(address(_lpToken));\n', '    address factoryPairAddress = plasmaswapFactory.getPair(lpair.token0(), lpair.token1());\n', "    require(factoryPairAddress == address(_lpToken), 'NOT P-LP');\n", '\n', '    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n', '    \n', '    // Flatrate fees\n', '    if (!feeWhitelist.contains(msg.sender)) {\n', '        uint256 ethFee = gFees.ethFee;\n', "        require(msg.value == ethFee, 'FEE NOT MET');\n", '        uint256 devFee = ethFee;\n', '        devaddr.transfer(devFee);\n', '    } else if (msg.value > 0){\n', '      // Refund eth if a whitelisted member sent it by mistake\n', '      msg.sender.transfer(msg.value);\n', '    }\n', '    \n', '    // Percent fee\n', '    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '    uint256 amountLocked = _amount.sub(liquidityFee);\n', '\n', '    TokenLock memory token_lock;\n', '    token_lock.lockDate = block.timestamp;\n', '    token_lock.amount = amountLocked;\n', '    token_lock.initialAmount = amountLocked;\n', '    token_lock.unlockDate = _unlock_date;\n', '    token_lock.lockID = tokenLocks[_lpToken].length;\n', '    token_lock.owner = _withdrawer;\n', '\n', '    // Record the lock for the pl-p pair\n', '    tokenLocks[_lpToken].push(token_lock);\n', '    lockedTokens.add(_lpToken);\n', '\n', '    // Record the lock for the user\n', '    UserInfo storage user = users[_withdrawer];\n', '    user.lockedTokens.add(_lpToken);\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(token_lock.lockID);\n', '    \n', '    emit onDeposit(_lpToken, msg.sender, token_lock.amount, token_lock.lockDate, token_lock.unlockDate);\n', '  }\n', '  \n', '  /**\n', '   * @notice Extend a lock with a new unlock date, _index and _lockID ensure the correct lock is changed\n', '   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n', '   */\n', '  function relock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _unlock_date) external nonReentrant {\n', "    require(_unlock_date < 10000000000, 'TIMESTAMP INVALID'); // prevents errors when timestamp entered in milliseconds\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < _unlock_date, 'UNLOCK BEFORE');\n", '    \n', '    uint256 liquidityFee = userLock.amount.mul(gFees.liquidityFee).div(1000);\n', '    uint256 amountLocked = userLock.amount.sub(liquidityFee);\n', '    \n', '    userLock.amount = amountLocked;\n', '    userLock.unlockDate = _unlock_date;\n', '\n', '    // Send pl-p  fee to dev address\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '  }\n', '  \n', '  /**\n', '   * @notice Withdraw a specified amount from a lock. _index and _lockID ensure the correct lock is changed\n', '   * this prevents errors when a user performs multiple tx per block possibly with varying gas prices\n', '   */\n', '  function withdraw (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', "    require(_amount > 0, 'ZERO WITHDRAWL');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", "    require(userLock.unlockDate < block.timestamp, 'NOT YET');\n", '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    // Clean user storage\n', '    if (userLock.amount == 0) {\n', '      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '      userLocks[_index] = userLocks[userLocks.length-1];\n', '      userLocks.pop();\n', '      if (userLocks.length == 0) {\n', '        users[msg.sender].lockedTokens.remove(_lpToken);\n', '      }\n', '    }\n', '    \n', '    TransferHelper.safeTransfer(_lpToken, msg.sender, _amount);\n', '    emit onWithdraw(_lpToken, _amount);\n', '  }\n', '  \n', '  /**\n', '   * @notice Increase the amount of tokens per a specific lock, this is preferable to creating a new lock, less fees, and faster loading on our live block explorer\n', '   */\n', '  function incrementLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', "    require(_amount > 0, 'ZERO AMOUNT');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', '    TransferHelper.safeTransferFrom(_lpToken, address(msg.sender), address(this), _amount);\n', '    \n', '    // Send pl-p  fee to dev address\n', '    uint256 liquidityFee = _amount.mul(gFees.liquidityFee).div(1000);\n', '    TransferHelper.safeTransfer(_lpToken, devaddr, liquidityFee);\n', '    uint256 amountLocked = _amount.sub(liquidityFee);\n', '    \n', '    userLock.amount = userLock.amount.add(amountLocked);\n', '    \n', '    emit onDeposit(_lpToken, msg.sender, amountLocked, userLock.lockDate, userLock.unlockDate);\n', '  }\n', '  \n', '  /**\n', '   * @notice Split a lock into two seperate locks, useful when a lock is about to expire and youd like to relock a portion\n', '   * and withdraw a smaller portion\n', '   */\n', '  function splitLock (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external payable nonReentrant {\n', "    require(_amount > 0, 'ZERO AMOUNT');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', "    require(msg.value == gFees.ethFee, 'FEE NOT MET');\n", '    devaddr.transfer(gFees.ethFee);\n', '    \n', '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    TokenLock memory token_lock;\n', '    token_lock.lockDate = userLock.lockDate;\n', '    token_lock.amount = _amount;\n', '    token_lock.initialAmount = _amount;\n', '    token_lock.unlockDate = userLock.unlockDate;\n', '    token_lock.lockID = tokenLocks[_lpToken].length;\n', '    token_lock.owner = msg.sender;\n', '\n', '    // Record the lock for the pl-p pair\n', '    tokenLocks[_lpToken].push(token_lock);\n', '\n', '    // Record the lock for the user\n', '    UserInfo storage user = users[msg.sender];\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(token_lock.lockID);\n', '  }\n', '  \n', '  /**\n', '   * @notice Transfer a lock to a new owner, e.g. spaceport project -> project owner\n', '   */\n', '  function transferLockOwnership (address _lpToken, uint256 _index, uint256 _lockID, address payable _newOwner) external {\n', "    require(msg.sender != _newOwner, 'OWNER');\n", '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage transferredLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && transferredLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    \n', '    // Record the lock for the new Owner\n', '    UserInfo storage user = users[_newOwner];\n', '    user.lockedTokens.add(_lpToken);\n', '    uint256[] storage user_locks = user.locksForToken[_lpToken];\n', '    user_locks.push(transferredLock.lockID);\n', '    \n', '    // Remove the lock from the old owner\n', '    uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '    userLocks[_index] = userLocks[userLocks.length-1];\n', '    userLocks.pop();\n', '    if (userLocks.length == 0) {\n', '      users[msg.sender].lockedTokens.remove(_lpToken);\n', '    }\n', '    transferredLock.owner = _newOwner;\n', '  }\n', '  \n', '  /**\n', '   * @notice Migrates liquidity to plasmaswap \n', '   */\n', '  function migrate (address _lpToken, uint256 _index, uint256 _lockID, uint256 _amount) external nonReentrant {\n', '    require(address(migrator) != address(0), "NOT SET");\n', "    require(_amount > 0, 'ZERO MIGRATION');\n", '    \n', '    uint256 lockID = users[msg.sender].locksForToken[_lpToken][_index];\n', '    TokenLock storage userLock = tokenLocks[_lpToken][lockID];\n', "    require(lockID == _lockID && userLock.owner == msg.sender, 'LOCK MISMATCH'); // ensures correct lock is affected\n", '    userLock.amount = userLock.amount.sub(_amount);\n', '    \n', '    // Clean user storage\n', '    if (userLock.amount == 0) {\n', '      uint256[] storage userLocks = users[msg.sender].locksForToken[_lpToken];\n', '      userLocks[_index] = userLocks[userLocks.length-1];\n', '      userLocks.pop();\n', '      if (userLocks.length == 0) {\n', '        users[msg.sender].lockedTokens.remove(_lpToken);\n', '      }\n', '    }\n', '    \n', '    TransferHelper.safeApprove(_lpToken, address(migrator), _amount);\n', '    migrator.migrate(_lpToken, _amount, userLock.unlockDate, msg.sender);\n', '  }\n', '  \n', '  function getNumLocksForToken (address _lpToken) external view returns (uint256) {\n', '    return tokenLocks[_lpToken].length;\n', '  }\n', '  \n', '  function getNumLockedTokens () external view returns (uint256) {\n', '    return lockedTokens.length();\n', '  }\n', '  \n', '  function getLockedTokenAtIndex (uint256 _index) external view returns (address) {\n', '    return lockedTokens.at(_index);\n', '  }\n', '  \n', '  // User functions\n', '  function getUserNumLockedTokens (address _user) external view returns (uint256) {\n', '    UserInfo storage user = users[_user];\n', '    return user.lockedTokens.length();\n', '  }\n', '  \n', '  function getUserLockedTokenAtIndex (address _user, uint256 _index) external view returns (address) {\n', '    UserInfo storage user = users[_user];\n', '    return user.lockedTokens.at(_index);\n', '  }\n', '  \n', '  function getUserNumLocksForToken (address _user, address _lpToken) external view returns (uint256) {\n', '    UserInfo storage user = users[_user];\n', '    return user.locksForToken[_lpToken].length;\n', '  }\n', '  \n', '  function getUserLockForTokenAtIndex (address _user, address _lpToken, uint256 _index) external view \n', '  returns (uint256, uint256, uint256, uint256, uint256, address) {\n', '    uint256 lockID = users[_user].locksForToken[_lpToken][_index];\n', '    TokenLock storage tokenLock = tokenLocks[_lpToken][lockID];\n', '    return (tokenLock.lockDate, tokenLock.amount, tokenLock.initialAmount, tokenLock.unlockDate, tokenLock.lockID, tokenLock.owner);\n', '  }\n', '  \n', '  // Whitelist\n', '  function getWhitelistedUsersLength () external view returns (uint256) {\n', '    return feeWhitelist.length();\n', '  }\n', '  \n', '  function getWhitelistedUserAtIndex (uint256 _index) external view returns (address) {\n', '    return feeWhitelist.at(_index);\n', '  }\n', '  \n', '  function getUserWhitelistStatus (address _user) external view returns (bool) {\n', '    return feeWhitelist.contains(_user);\n', '  }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\n', '// Subject to the MIT license.\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/SafeMath.sol\n', '// Subject to the MIT license.\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', 'pragma solidity 0.6.12;\n', '\n', '/**\n', '    helper methods for interacting with ERC20 tokens that do not consistently return true/false\n', '    with the addition of a transfer function to send eth or an erc20 token\n', '*/\n', 'library TransferHelper {\n', '    function safeApprove(address token, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_FAILED');\n", '    }\n', '\n', '    function safeTransfer(address token, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '    }\n', '\n', '    function safeTransferFrom(address token, address from, address to, uint value) internal {\n', '        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n', "        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FROM_FAILED');\n", '    }\n', '    \n', '    // sends ETH or an erc20 token\n', '    function safeTransferBaseToken(address token, address payable to, uint value, bool isERC20) internal {\n', '        if (!isERC20) {\n', '            to.transfer(value);\n', '        } else {\n', '            (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n', "            require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_FAILED');\n", '        }\n', '    }\n', '}\n', '\n', '{\n', '  "remappings": [],\n', '  "optimizer": {\n', '    "enabled": true,\n', '    "runs": 200\n', '  },\n', '  "evmVersion": "istanbul",\n', '  "libraries": {},\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  }\n', '}']