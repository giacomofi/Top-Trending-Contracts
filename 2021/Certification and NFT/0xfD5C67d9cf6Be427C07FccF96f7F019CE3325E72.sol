['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-21\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0-only\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract Context {\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/access/Ownable.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'abstract contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Create2.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\n', ' * `CREATE2` can be used to compute in advance the address where a smart\n', ' * contract will be deployed, which allows for interesting new mechanisms known\n', " * as 'counterfactual interactions'.\n", ' *\n', ' * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\n', ' * information.\n', ' */\n', 'library Create2 {\n', '    /**\n', '     * @dev Deploys a contract using `CREATE2`. The address where the contract\n', '     * will be deployed can be known in advance via {computeAddress}.\n', '     *\n', '     * The bytecode for a contract can be obtained from Solidity with\n', '     * `type(contractName).creationCode`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `bytecode` must not be empty.\n', '     * - `salt` must have not been used for `bytecode` already.\n', '     * - the factory must have a balance of at least `amount`.\n', '     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n', '     */\n', '    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address) {\n', '        address addr;\n', '        require(address(this).balance >= amount, "Create2: insufficient balance");\n', '        require(bytecode.length != 0, "Create2: bytecode length is zero");\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n', '        }\n', '        require(addr != address(0), "Create2: Failed on deploy");\n', '        return addr;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\n', '     * `bytecodeHash` or `salt` will result in a new destination address.\n', '     */\n', '    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\n', '        return computeAddress(salt, bytecodeHash, address(this));\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\n', "     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\n", '     */\n', '    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address) {\n', '        bytes32 _data = keccak256(\n', '            abi.encodePacked(bytes1(0xff), deployer, salt, bytecodeHash)\n', '        );\n', '        return address(uint256(_data));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: @openzeppelin/contracts/math/SafeMath.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @dev Implementation of the {IERC20} interface.\n', ' *\n', ' * This implementation is agnostic to the way tokens are created. This means\n', ' * that a supply mechanism has to be added in a derived contract using {_mint}.\n', ' * For a generic mechanism see {ERC20PresetMinterPauser}.\n', ' *\n', ' * TIP: For a detailed writeup see our guide\n', ' * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n', ' * to implement supply mechanisms].\n', ' *\n', ' * We have followed general OpenZeppelin guidelines: functions revert instead\n', ' * of returning `false` on failure. This behavior is nonetheless conventional\n', ' * and does not conflict with the expectations of ERC20 applications.\n', ' *\n', ' * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n', ' * This allows applications to reconstruct the allowance for all accounts just\n', ' * by listening to said events. Other implementations of the EIP may not emit\n', " * these events, as it isn't required by the specification.\n", ' *\n', ' * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n', ' * functions have been added to mitigate the well-known issues around setting\n', ' * allowances. See {IERC20-approve}.\n', ' */\n', 'contract ERC20 is Context, IERC20 {\n', '    using SafeMath for uint256;\n', '\n', '    mapping (address => uint256) private _balances;\n', '\n', '    mapping (address => mapping (address => uint256)) private _allowances;\n', '\n', '    uint256 private _totalSupply;\n', '\n', '    string private _name;\n', '    string private _symbol;\n', '    uint8 private _decimals;\n', '\n', '    /**\n', '     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\n', '     * a default value of 18.\n', '     *\n', '     * To select a different value for {decimals}, use {_setupDecimals}.\n', '     *\n', '     * All three of these values are immutable: they can only be set once during\n', '     * construction.\n', '     */\n', '    constructor (string memory name_, string memory symbol_) public {\n', '        _name = name_;\n', '        _symbol = symbol_;\n', '        _decimals = 18;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the name of the token.\n', '     */\n', '    function name() public view returns (string memory) {\n', '        return _name;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the symbol of the token, usually a shorter version of the\n', '     * name.\n', '     */\n', '    function symbol() public view returns (string memory) {\n', '        return _symbol;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the number of decimals used to get its user representation.\n', '     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n', '     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n', '     *\n', '     * Tokens usually opt for a value of 18, imitating the relationship between\n', '     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\n', '     * called.\n', '     *\n', '     * NOTE: This information is only used for _display_ purposes: it in\n', '     * no way affects any of the arithmetic of the contract, including\n', '     * {IERC20-balanceOf} and {IERC20-transfer}.\n', '     */\n', '    function decimals() public view returns (uint8) {\n', '        return _decimals;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-totalSupply}.\n', '     */\n', '    function totalSupply() public view override returns (uint256) {\n', '        return _totalSupply;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-balanceOf}.\n', '     */\n', '    function balanceOf(address account) public view override returns (uint256) {\n', '        return _balances[account];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transfer}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `recipient` cannot be the zero address.\n', '     * - the caller must have a balance of at least `amount`.\n', '     */\n', '    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(_msgSender(), recipient, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-allowance}.\n', '     */\n', '    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n', '        return _allowances[owner][spender];\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-approve}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n', '        _approve(_msgSender(), spender, amount);\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev See {IERC20-transferFrom}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance. This is not\n', '     * required by the EIP. See the note at the beginning of {ERC20}.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` and `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', "     * - the caller must have allowance for ``sender``'s tokens of at least\n", '     * `amount`.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n', '        _transfer(sender, recipient, amount);\n', '        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, "ERC20: transfer amount exceeds allowance"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically increases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n', '     *\n', '     * This is an alternative to {approve} that can be used as a mitigation for\n', '     * problems described in {IERC20-approve}.\n', '     *\n', '     * Emits an {Approval} event indicating the updated allowance.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `spender` cannot be the zero address.\n', '     * - `spender` must have allowance for the caller of at least\n', '     * `subtractedValue`.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n', '        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, "ERC20: decreased allowance below zero"));\n', '        return true;\n', '    }\n', '\n', '    /**\n', '     * @dev Moves tokens `amount` from `sender` to `recipient`.\n', '     *\n', '     * This is internal function is equivalent to {transfer}, and can be used to\n', '     * e.g. implement automatic token fees, slashing mechanisms, etc.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `sender` cannot be the zero address.\n', '     * - `recipient` cannot be the zero address.\n', '     * - `sender` must have a balance of at least `amount`.\n', '     */\n', '    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n', '        require(sender != address(0), "ERC20: transfer from the zero address");\n', '        require(recipient != address(0), "ERC20: transfer to the zero address");\n', '\n', '        _beforeTokenTransfer(sender, recipient, amount);\n', '\n', '        _balances[sender] = _balances[sender].sub(amount, "ERC20: transfer amount exceeds balance");\n', '        _balances[recipient] = _balances[recipient].add(amount);\n', '        emit Transfer(sender, recipient, amount);\n', '    }\n', '\n', '    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n', '     * the total supply.\n', '     *\n', '     * Emits a {Transfer} event with `from` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `to` cannot be the zero address.\n', '     */\n', '    function _mint(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: mint to the zero address");\n', '\n', '        _beforeTokenTransfer(address(0), account, amount);\n', '\n', '        _totalSupply = _totalSupply.add(amount);\n', '        _balances[account] = _balances[account].add(amount);\n', '        emit Transfer(address(0), account, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Destroys `amount` tokens from `account`, reducing the\n', '     * total supply.\n', '     *\n', '     * Emits a {Transfer} event with `to` set to the zero address.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `account` cannot be the zero address.\n', '     * - `account` must have at least `amount` tokens.\n', '     */\n', '    function _burn(address account, uint256 amount) internal virtual {\n', '        require(account != address(0), "ERC20: burn from the zero address");\n', '\n', '        _beforeTokenTransfer(account, address(0), amount);\n', '\n', '        _balances[account] = _balances[account].sub(amount, "ERC20: burn amount exceeds balance");\n', '        _totalSupply = _totalSupply.sub(amount);\n', '        emit Transfer(account, address(0), amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n', '     *\n', '     * This internal function is equivalent to `approve`, and can be used to\n', '     * e.g. set automatic allowances for certain subsystems, etc.\n', '     *\n', '     * Emits an {Approval} event.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `owner` cannot be the zero address.\n', '     * - `spender` cannot be the zero address.\n', '     */\n', '    function _approve(address owner, address spender, uint256 amount) internal virtual {\n', '        require(owner != address(0), "ERC20: approve from the zero address");\n', '        require(spender != address(0), "ERC20: approve to the zero address");\n', '\n', '        _allowances[owner][spender] = amount;\n', '        emit Approval(owner, spender, amount);\n', '    }\n', '\n', '    /**\n', '     * @dev Sets {decimals} to a value other than the default one of 18.\n', '     *\n', '     * WARNING: This function should only be called from the constructor. Most\n', '     * applications that interact with token contracts will not expect\n', '     * {decimals} to ever change, and may work incorrectly if it does.\n', '     */\n', '    function _setupDecimals(uint8 decimals_) internal {\n', '        _decimals = decimals_;\n', '    }\n', '\n', '    /**\n', '     * @dev Hook that is called before any transfer of tokens. This includes\n', '     * minting and burning.\n', '     *\n', '     * Calling conditions:\n', '     *\n', "     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n", '     * will be to transferred to `to`.\n', '     * - when `from` is zero, `amount` tokens will be minted for `to`.\n', "     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n", '     * - `from` and `to` are never both zero.\n', '     *\n', '     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n', '     */\n', '    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n', '}\n', '\n', '// File: contracts/PegToken.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract PegToken is Ownable, ERC20\n', '{\n', '\tconstructor (string memory _name, string memory _symbol, uint8 _decimals, uint256 _supply)\n', '\t\tERC20(_name, _symbol) public\n', '\t{\n', '\t\taddress _sender = msg.sender;\n', '\t\t_setupDecimals(_decimals);\n', '\t\t_mint(_sender, _supply);\n', '\t}\n', '}\n', '\n', 'contract GRO is PegToken("Growth-Peg Token", "GRO", 18, 1000000e18)\n', '{\n', '}\n', '\n', '// File: @openzeppelin/contracts/cryptography/ECDSA.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n', ' *\n', ' * These functions can be used to verify that a message was signed by the holder\n', ' * of the private keys of a given address.\n', ' */\n', 'library ECDSA {\n', '    /**\n', '     * @dev Returns the address that signed a hashed message (`hash`) with\n', '     * `signature`. This address can then be used for verification purposes.\n', '     *\n', '     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n', '     * this function rejects them by requiring the `s` value to be in the lower\n', '     * half order, and the `v` value to be either 27 or 28.\n', '     *\n', '     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n', '     * verification to be secure: it is possible to craft signatures that\n', '     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n', '     * this is by receiving a hash of the original message (which may otherwise\n', '     * be too long), and then calling {toEthSignedMessageHash} on it.\n', '     */\n', '    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n', '        // Check the signature length\n', '        if (signature.length != 65) {\n', '            revert("ECDSA: invalid signature length");\n', '        }\n', '\n', '        // Divide the signature in r, s and v variables\n', '        bytes32 r;\n', '        bytes32 s;\n', '        uint8 v;\n', '\n', '        // ecrecover takes the signature parameters, and the only way to get them\n', '        // currently is to use assembly.\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly {\n', '            r := mload(add(signature, 0x20))\n', '            s := mload(add(signature, 0x40))\n', '            v := byte(0, mload(add(signature, 0x60)))\n', '        }\n', '\n', '        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n', '        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n', '        // the valid range for s in (281): 0 < s < secp256k1n ÷ 2 + 1, and for v in (282): v ∈ {27, 28}. Most\n', '        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n', '        //\n', '        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n', '        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n', '        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n', '        // these malleable signatures as well.\n', '        require(uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0, "ECDSA: invalid signature \'s\' value");\n', '        require(v == 27 || v == 28, "ECDSA: invalid signature \'v\' value");\n', '\n', '        // If the signature is valid (and not malleable), return the signer address\n', '        address signer = ecrecover(hash, v, r, s);\n', '        require(signer != address(0), "ECDSA: invalid signature");\n', '\n', '        return signer;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n', '     * replicates the behavior of the\n', '     * https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign[`eth_sign`]\n', '     * JSON-RPC method.\n', '     *\n', '     * See {recover}.\n', '     */\n', '    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n', '        // 32 is the length in bytes of hash,\n', '        // enforced by the type signature above\n', '        return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/ReentrancyGuard.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '/**\n', ' * @dev Contract module that helps prevent reentrant calls to a function.\n', ' *\n', ' * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n', ' * available, which can be applied to functions to make sure there are no nested\n', ' * (reentrant) calls to them.\n', ' *\n', ' * Note that because there is a single `nonReentrant` guard, functions marked as\n', ' * `nonReentrant` may not call one another. This can be worked around by making\n', ' * those functions `private`, and then adding `external` `nonReentrant` entry\n', ' * points to them.\n', ' *\n', ' * TIP: If you would like to learn more about reentrancy and alternative ways\n', ' * to protect against it, check out our blog post\n', ' * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n', ' */\n', 'abstract contract ReentrancyGuard {\n', '    // Booleans are more expensive than uint256 or any type that takes up a full\n', '    // word because each write operation emits an extra SLOAD to first read the\n', "    // slot's contents, replace the bits taken up by the boolean, and then write\n", "    // back. This is the compiler's defense against contract upgrades and\n", '    // pointer aliasing, and it cannot be disabled.\n', '\n', '    // The values being non-zero value makes deployment a bit more expensive,\n', '    // but in exchange the refund on every call to nonReentrant will be lower in\n', '    // amount. Since refunds are capped to a percentage of the total\n', "    // transaction's gas, it is best to keep them low in cases like this one, to\n", '    // increase the likelihood of the full refund coming into effect.\n', '    uint256 private constant _NOT_ENTERED = 1;\n', '    uint256 private constant _ENTERED = 2;\n', '\n', '    uint256 private _status;\n', '\n', '    constructor () internal {\n', '        _status = _NOT_ENTERED;\n', '    }\n', '\n', '    /**\n', '     * @dev Prevents a contract from calling itself, directly or indirectly.\n', '     * Calling a `nonReentrant` function from another `nonReentrant`\n', '     * function is not supported. It is possible to prevent this from happening\n', '     * by making the `nonReentrant` function external, and make it call a\n', '     * `private` function that does the actual work.\n', '     */\n', '    modifier nonReentrant() {\n', '        // On the first call to nonReentrant, _notEntered will be true\n', '        require(_status != _ENTERED, "ReentrancyGuard: reentrant call");\n', '\n', '        // Any calls to nonReentrant after this point will fail\n', '        _status = _ENTERED;\n', '\n', '        _;\n', '\n', '        // By storing the original value once again, a refund is triggered (see\n', '        // https://eips.ethereum.org/EIPS/eip-2200)\n', '        _status = _NOT_ENTERED;\n', '    }\n', '}\n', '\n', '// File: contracts/SignatureValidator.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', 'contract SignatureValidator\n', '{\n', '\tfunction calcSignatureHash(uint256 _transferId, bytes32 _txId) public pure returns (bytes32 _hash)\n', '\t{\n', '\t\treturn keccak256(abi.encodePacked(_transferId, _txId));\n', '\t}\n', '\n', '\tfunction validateSignature(address _agent, uint256 _transferId, bytes32 _txId, bytes memory _signature) public pure returns (bool _valid)\n', '\t{\n', '\t\tbytes32 _hash = calcSignatureHash(_transferId, _txId);\n', '\t\treturn ECDSA.recover(ECDSA.toEthSignedMessageHash(_hash), _signature) == _agent;\n', '\t}\n', '\n', '\tfunction requireValidSignature(address _agent, uint256 _transferId, bytes32 _txId, bytes memory _signature) internal\n', '\t{\n', '\t\trequire(validateSignature(_agent, _transferId, _txId, _signature), "invalid signature");\n', '\t\temit ValidSignature(_agent, _transferId, _txId, _signature);\n', '\t}\n', '\n', '\tevent ValidSignature(address indexed _agent, uint256 indexed _transferId, bytes32 indexed _txId, bytes _signature);\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', '\n', 'pragma solidity >=0.6.2 <0.8.0;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // This method relies on extcodesize, which returns 0 for contracts in\n', '        // construction, since the code is only stored at the end of the\n', '        // constructor execution.\n', '\n', '        uint256 size;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { size := extcodesize(account) }\n', '        return size > 0;\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n', '        return functionStaticCall(target, data, "Address: low-level static call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n', '     * but performing a static call.\n', '     *\n', '     * _Available since v3.3._\n', '     */\n', '    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n', '        require(isContract(target), "Address: static call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.staticcall(data);\n', '        return _verifyCallResult(success, returndata, errorMessage);\n', '    }\n', '\n', '    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/SafeERC20.sol\n', '\n', '\n', 'pragma solidity >=0.6.0 <0.8.0;\n', '\n', '\n', '\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// File: contracts/modules/Transfers.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '/**\n', ' * @dev This library abstracts ERC-20 operations in the context of the current\n', ' * contract.\n', ' */\n', 'library Transfers\n', '{\n', '\tusing SafeERC20 for IERC20;\n', '\n', '\t/**\n', '\t * @dev Retrieves a given ERC-20 token balance for the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @return _balance The current contract balance of the given ERC-20 token.\n', '\t */\n', '\tfunction _getBalance(address _token) internal view returns (uint256 _balance)\n', '\t{\n', '\t\treturn IERC20(_token).balanceOf(address(this));\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Allows a spender to access a given ERC-20 balance for the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _to The spender address.\n', '\t * @param _amount The exact spending allowance amount.\n', '\t */\n', '\tfunction _approveFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tuint256 _allowance = IERC20(_token).allowance(address(this), _to);\n', '\t\tif (_allowance > _amount) {\n', '\t\t\tIERC20(_token).safeDecreaseAllowance(_to, _allowance - _amount);\n', '\t\t}\n', '\t\telse\n', '\t\tif (_allowance < _amount) {\n', '\t\t\tIERC20(_token).safeIncreaseAllowance(_to, _amount - _allowance);\n', '\t\t}\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer a given ERC-20 token amount into the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _from The source address.\n', '\t * @param _amount The amount to be transferred.\n', '\t */\n', '\tfunction _pullFunds(address _token, address _from, uint256 _amount) internal\n', '\t{\n', '\t\tif (_amount == 0) return;\n', '\t\tIERC20(_token).safeTransferFrom(_from, address(this), _amount);\n', '\t}\n', '\n', '\t/**\n', '\t * @dev Transfer a given ERC-20 token amount from the current contract.\n', '\t * @param _token An ERC-20 compatible token address.\n', '\t * @param _to The target address.\n', '\t * @param _amount The amount to be transferred.\n', '\t */\n', '\tfunction _pushFunds(address _token, address _to, uint256 _amount) internal\n', '\t{\n', '\t\tif (_amount == 0) return;\n', '\t\tIERC20(_token).safeTransfer(_to, _amount);\n', '\t}\n', '}\n', '\n', '// File: contracts/TrustedBridge.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract TrustedBridge is Ownable, ReentrancyGuard\n', '{\n', '\tuint256 constant BLOCK_TIME_TOLERANCE = 15 minutes;\n', '\n', '\tuint256 constant WITHDRAW_GRACE_PERIOD = 30 minutes;\n', '\n', '\tuint256 public chainId;\n', '\taddress public operator;\n', '\taddress public token;\n', '\n', '\tmapping (uint256 => Transfer) public transfers;\n', '\n', '\tstruct Transfer {\n', '\t\tuint256 timestamp;\n', '\t}\n', '\n', '\tmodifier onlyEOA()\n', '\t{\n', '\t\trequire(tx.origin == msg.sender, "not an externally owned account");\n', '\t\t_;\n', '\t}\n', '\n', '\tfunction construct(uint256 _chainId, address _operator, address _token) external\n', '\t{\n', '\t\tassert(chainId == 0);\n', '\t\tchainId = _chainId;\n', '\t\toperator = _operator;\n', '\t\ttoken = _token;\n', '\t}\n', '\n', '\tfunction calcTransferId(address _sourceBridge, address _targetBridge, uint256 _sourceChainId, uint256 _targetChainId, address _client, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp) public pure returns (uint256 _transferId)\n', '\t{\n', '\t\treturn uint256(keccak256(abi.encode(_sourceBridge, _targetBridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp)));\n', '\t}\n', '\n', '\tfunction deposit(address _targetBridge, uint256 _targetChainId, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId) external onlyEOA nonReentrant\n', '\t{\n', '\t\taddress _sourceBridge = address(this);\n', '\t\tuint256 _sourceChainId = chainId;\n', '\t\taddress _client = msg.sender;\n', '\t\trequire(_server != address(0), "invalid server");\n', '\t\trequire(_targetBridge != address(0), "invalid bridge");\n', '\t\trequire(_sourceChainId != _targetChainId, "invalid chain");\n', '\t\trequire(transfers[_transferId].timestamp == 0, "access denied");\n', '\t\trequire(_sourceAmount >= _targetAmount, "invalid amount");\n', '\t\trequire(now - BLOCK_TIME_TOLERANCE <= _timestamp && _timestamp <= now + BLOCK_TIME_TOLERANCE, "not available");\n', '\t\trequire(_transferId == calcTransferId(_sourceBridge, _targetBridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp), "invalid transfer id");\n', '\t\tTransfers._pullFunds(token, _client, _sourceAmount);\n', '\t\tTransfers._pushFunds(token, operator, _sourceAmount);\n', '\t\ttransfers[_transferId].timestamp = now;\n', '\t\temit Deposit(_targetBridge, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\n', '\t}\n', '\n', '\tfunction withdraw(address _sourceBridge, uint256 _sourceChainId, address _client, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId) external nonReentrant\n', '\t{\n', '\t\taddress _targetBridge = address(this);\n', '\t\tuint256 _targetChainId = chainId;\n', '\t\taddress _server = msg.sender;\n', '\t\trequire(_client != address(0), "invalid client");\n', '\t\trequire(_sourceBridge != address(0), "invalid bridge");\n', '\t\trequire(_sourceChainId != _targetChainId, "invalid chain");\n', '\t\trequire(transfers[_transferId].timestamp == 0, "access denied");\n', '\t\trequire(_sourceAmount >= _targetAmount, "invalid amount");\n', '\t\trequire(now >= _timestamp + WITHDRAW_GRACE_PERIOD, "not available");\n', '\t\trequire(_transferId == calcTransferId(_sourceBridge, _targetBridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp), "invalid transfer id");\n', '\t\tTransfers._pullFunds(token, _server, _targetAmount);\n', '\t\tTransfers._pushFunds(token, _client, _targetAmount);\n', '\t\ttransfers[_transferId].timestamp = now;\n', '\t\temit Withdraw(_sourceBridge, _sourceChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\n', '\t}\n', '\n', '\tfunction setOperator(address _newOperator) external onlyOwner\n', '\t{\n', '\t\trequire(_newOperator != address(0), "invalid bridge");\n', '\t\taddress _oldOperator = operator;\n', '\t\toperator = _newOperator;\n', '\t\temit OperatorChange(_oldOperator, _newOperator);\n', '\t}\n', '\n', '\tevent Deposit(address _targetBridge, uint256 _targetChainId, address indexed _client, address indexed _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 indexed _transferId);\n', '\tevent Withdraw(address _sourceBridge, uint256 _sourceChainId, address indexed _client, address indexed _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 indexed _transferId);\n', '\tevent OperatorChange(address _oldOperator, address _newOperator);\n', '}\n', '\n', '// File: contracts/Operator.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Operator is Ownable, ReentrancyGuard, SignatureValidator\n', '{\n', '\tuint256 public chainId;\n', '\taddress public bridge;\n', '\taddress public vault;\n', '\taddress public token;\n', '\n', '\tmapping (uint256 => bytes32) public transactions;\n', '\n', '\taddress[] public agents;\n', '\n', '\tfunction construct(uint256 _chainId, address _bridge, address _vault, address _token) external\n', '\t{\n', '\t\tassert(chainId == 0);\n', '\t\tchainId = _chainId;\n', '\t\tbridge = _bridge;\n', '\t\tvault = _vault;\n', '\t\ttoken = _token;\n', '\t}\n', '\n', '\tfunction processWithdraw(address _sourceBridge, uint256 _sourceChainId, address _client, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId, bytes32 _txId, bytes memory _signatures) external nonReentrant\n', '\t{\n', '\t\trequire(agents.length >= 2, "invalid agents");\n', '\t\trequire(_sourceAmount >= _targetAmount, "invalid amount");\n', '\t\trequire(_signatures.length == 65 * agents.length, "invalid length");\n', '\t\tfor (uint256 _i = 0; _i < agents.length; _i++) {\n', '\t\t\taddress _agent = agents[_i];\n', '\t\t\tbytes memory _signature = new bytes(65);\n', '\t\t\tfor (uint256 _j = 0; _j < 65; _j++) {\n', '\t\t\t\t_signature[_j] = _signatures[65 * _i + _j];\n', '\t\t\t}\n', '\t\t\trequireValidSignature(_agent, _transferId, _txId, _signature);\n', '\t\t}\n', '\t\tTransfers._approveFunds(token, bridge, _targetAmount);\n', '\t\tTrustedBridge(bridge).withdraw(_sourceBridge, _sourceChainId, _client, _sourceAmount, _targetAmount, _timestamp, _transferId);\n', '\t\tassert(transactions[_transferId] == bytes32(0));\n', '\t\ttransactions[_transferId] = _txId;\n', '\t}\n', '\n', '\tfunction transferToVault(uint256 _amount) external onlyOwner nonReentrant\n', '\t{\n', '\t\tTransfers._pushFunds(token, vault, _amount);\n', '\t}\n', '\n', '\tfunction setBridge(address _newBridge) external onlyOwner\n', '\t{\n', '\t\trequire(_newBridge != address(0), "invalid bridge");\n', '\t\taddress _oldBridge = bridge;\n', '\t\tbridge = _newBridge;\n', '\t\temit BridgeChange(_oldBridge, _newBridge);\n', '\t}\n', '\n', '\tfunction addAgent(address _agent) external onlyOwner\n', '\t{\n', '\t\trequire(_agent != address(0), "invalid agent");\n', '\t\tagents.push(_agent);\n', '\t\temit AddAgent(_agent);\n', '\t}\n', '\n', '\tfunction removeAgent(uint256 _index) external onlyOwner\n', '\t{\n', '\t\trequire(_index < agents.length, "invalid index");\n', '\t\taddress _agent = agents[_index];\n', '\t\tagents[_index] = agents[agents.length - 1];\n', '\t\tagents.pop();\n', '\t\temit RemoveAgent(_agent);\n', '\t}\n', '\n', '\tevent ValidSignature(address indexed _agent, uint256 indexed _transferId, bytes32 indexed _txId, bytes _signature);\n', '\tevent BridgeChange(address _oldBridge, address _newBridge);\n', '\tevent AddAgent(address _agent);\n', '\tevent RemoveAgent(address _agent);\n', '}\n', '\n', '// File: contracts/Panel.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract Panel is Ownable, ReentrancyGuard\n', '{\n', '\tusing SafeMath for uint256;\n', '\n', '\tuint256 constant DEFAULT_NETWORK_CONFIRMATIONS = 16;\n', '\tuint256 constant MINIMUM_NETWORK_CONFIRMATIONS = 8;\n', '\n', '\tuint256 public chainId;\n', '\taddress public bridge;\n', '\n', '\tuint256 public networkConfirmations = DEFAULT_NETWORK_CONFIRMATIONS;\n', '\tmapping (uint256 => Fee) public fees;\n', '\tmapping (uint256 => Remote) public remotes;\n', '\n', '\tstruct Fee {\n', '\t\tuint256 variableFeeRate;\n', '\t\tuint256 fixedFeeAmount;\n', '\t}\n', '\n', '\tstruct Remote {\n', '\t\taddress bridge;\n', '\t\taddress operator;\n', '\t}\n', '\n', '\tfunction construct(uint256 _chainId, address _bridge) external\n', '\t{\n', '\t\tassert(chainId == 0);\n', '\t\tchainId = _chainId;\n', '\t\tbridge = _bridge;\n', '\t}\n', '\n', '\tfunction calcNetAmount(uint256 _amount, uint256 _chainId) public view returns (uint256 _netAmount)\n', '\t{\n', '\t\tuint256 _feeAmount = _amount.mul(fees[_chainId].variableFeeRate).div(1e18).add(fees[_chainId].fixedFeeAmount);\n', '\t\trequire(_amount >= _feeAmount, "insufficient amount");\n', '\t\treturn _amount.sub(_feeAmount);\n', '\t}\n', '\n', '\tfunction calcDepositParams(address _account, uint256 _amount, uint256 _chainId) external view returns (address _targetBridge, uint256 _targetChainId, address _server, uint256 _sourceAmount, uint256 _targetAmount, uint256 _timestamp, uint256 _transferId)\n', '\t{\n', '\t\trequire(chainId != _chainId, "invalid chain");\n', '\t\taddress _sourceBridge = bridge;\n', '\t\t_targetBridge = remotes[_chainId].bridge;\n', '\t\tuint256 _sourceChainId = chainId;\n', '\t\t_targetChainId = _chainId;\n', '\t\taddress _client = _account;\n', '\t\t_server = remotes[_chainId].operator;\n', '\t\t_sourceAmount = _amount;\n', '\t\t_targetAmount = calcNetAmount(_amount, _chainId);\n', '\t\t_timestamp = now;\n', '\t\t_transferId = TrustedBridge(bridge).calcTransferId(_sourceBridge, _targetBridge, _sourceChainId, _targetChainId, _client, _server, _sourceAmount, _targetAmount, _timestamp);\n', '\t\treturn (_targetBridge, _targetChainId, _server, _sourceAmount, _targetAmount, _timestamp, _transferId);\n', '\t}\n', '\n', '\tfunction setNetworkConfirmations(uint256 _newNetworkConfirmations) external onlyOwner\n', '\t{\n', '\t\trequire(_newNetworkConfirmations < MINIMUM_NETWORK_CONFIRMATIONS, "invalid network confirmations");\n', '\t\tuint256 _oldNetworkConfirmations = networkConfirmations;\n', '\t\tnetworkConfirmations = _newNetworkConfirmations;\n', '\t\temit NetworkConfirmationsChange(_oldNetworkConfirmations, _newNetworkConfirmations);\n', '\t}\n', '\n', '\tfunction setFee(uint256 _chainId, uint256 _newVariableFeeRate, uint256 _newFixedFeeAmount) external onlyOwner\n', '\t{\n', '\t\trequire(chainId != _chainId, "invalid chain");\n', '\t\trequire(_newVariableFeeRate <= 1e18, "invalid fee rate");\n', '\t\tuint256 _oldVariableFeeRate = fees[_chainId].variableFeeRate;\n', '\t\tuint256 _oldFixedFeeAmount = fees[_chainId].fixedFeeAmount;\n', '\t\tfees[_chainId].variableFeeRate = _newVariableFeeRate;\n', '\t\tfees[_chainId].fixedFeeAmount = _newFixedFeeAmount;\n', '\t\temit FeeChange(_chainId, _oldVariableFeeRate, _oldFixedFeeAmount, _newVariableFeeRate, _newFixedFeeAmount);\n', '\t}\n', '\n', '\tfunction setBridge(address _newBridge) external onlyOwner\n', '\t{\n', '\t\trequire(_newBridge != address(0), "invalid bridge");\n', '\t\taddress _oldBridge = bridge;\n', '\t\tbridge = _newBridge;\n', '\t\temit BridgeChange(_oldBridge, _newBridge);\n', '\t}\n', '\n', '\tfunction setRemoteBridge(uint256 _chainId, address _newRemoteBridge) external onlyOwner\n', '\t{\n', '\t\trequire(chainId != _chainId, "invalid chain");\n', '\t\trequire(_newRemoteBridge != address(0), "invalid bridge");\n', '\t\taddress _oldRemoteBridge = remotes[_chainId].bridge;\n', '\t\tremotes[_chainId].bridge = _newRemoteBridge;\n', '\t\temit RemoteBridgeChange(_chainId, _oldRemoteBridge, _newRemoteBridge);\n', '\t}\n', '\n', '\tfunction setRemoteOperator(uint256 _chainId, address _newRemoteOperator) external onlyOwner\n', '\t{\n', '\t\trequire(_newRemoteOperator != address(0), "invalid operator");\n', '\t\taddress _oldRemoteOperator = remotes[_chainId].operator;\n', '\t\tremotes[_chainId].operator = _newRemoteOperator;\n', '\t\temit RemoteOperatorChange(_chainId, _oldRemoteOperator, _newRemoteOperator);\n', '\t}\n', '\n', '\tevent NetworkConfirmationsChange(uint256 _oldNetworkConfirmations, uint256 _newNetworkConfirmations);\n', '\tevent FeeChange(uint256 indexed _chainId, uint256 _oldVariableFeeRate, uint256 _oldFixedFeeAmount, uint256 _newVariableFeeRate, uint256 _newFixedFeeAmount);\n', '\tevent BridgeChange(address _oldBridge, address _newBridge);\n', '\tevent RemoteBridgeChange(uint256 indexed _chainId, address _oldRemoteBridge, address _newRemoteBridge);\n', '\tevent RemoteOperatorChange(uint256 indexed _chainId, address _oldRemoteOperator, address _newRemoteOperator);\n', '}\n', '\n', '// File: contracts/SignatureRegistry.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', 'contract SignatureRegistry is SignatureValidator\n', '{\n', '\tmapping (uint256 => mapping (address => Signature)) public signatures;\n', '\n', '\tstruct Signature {\n', '\t\tbytes32 txId;\n', '\t\tbytes signature;\n', '\t}\n', '\n', '\tfunction registerSignature(uint256 _transferId, bytes32 _txId, bytes memory _signature) external\n', '\t{\n', '\t\taddress _agent = msg.sender;\n', '\t\trequireValidSignature(_agent, _transferId, _txId, _signature);\n', '\t\tsignatures[_transferId][_agent].txId = _txId;\n', '\t\tsignatures[_transferId][_agent].signature = _signature;\n', '\t}\n', '}\n', '\n', '// File: contracts/TimeLockedVault.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', 'contract TimeLockedVault is Ownable, ReentrancyGuard\n', '{\n', '\tuint256 constant WITHDRAWAL_WAIT_INTERVAL = 1 days;\n', '\tuint256 constant WITHDRAWAL_OPEN_INTERVAL = 1 days;\n', '\n', '\tmapping (address => Withdrawal) public withdrawals;\n', '\n', '\tstruct Withdrawal {\n', '\t\tuint256 timestamp;\n', '\t\taddress to;\n', '\t\tuint256 amount;\n', '\t}\n', '\n', '\tfunction announceWithdrawal(address _token, address _to, uint256 _amount) external onlyOwner nonReentrant\n', '\t{\n', '\t\trequire(withdrawals[_token].timestamp == 0, "existing withdrawal");\n', '\t\trequire(Transfers._getBalance(_token) >= _amount, "insufficient balance");\n', '\t\tuint256 _timestamp = now;\n', '\t\twithdrawals[_token].timestamp = _timestamp;\n', '\t\twithdrawals[_token].to = _to;\n', '\t\twithdrawals[_token].amount = _amount;\n', '\t\temit AnnounceWithdrawal(_token, _to, _amount, _timestamp);\n', '\t}\n', '\n', '\tfunction cancelWithdrawal(address _token) external onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _timestamp = withdrawals[_token].timestamp;\n', '\t\trequire(_timestamp != 0, "unknown withdrawal");\n', '\t\taddress _to = withdrawals[_token].to;\n', '\t\tuint256 _amount = withdrawals[_token].amount;\n', '\t\twithdrawals[_token].timestamp = 0;\n', '\t\twithdrawals[_token].to = address(0);\n', '\t\twithdrawals[_token].amount = 0;\n', '\t\temit CancelWithdrawal(_token, _to, _amount, _timestamp);\n', '\t}\n', '\n', '\tfunction withdraw(address _token, address _to, uint256 _amount) external onlyOwner nonReentrant\n', '\t{\n', '\t\tuint256 _timestamp = withdrawals[_token].timestamp;\n', '\t\trequire(_timestamp != 0, "unknown withdrawal");\n', '\t\trequire(_to == withdrawals[_token].to, "to mismatch");\n', '\t\trequire(_amount == withdrawals[_token].amount, "amount mismatch");\n', '\t\tuint256 _start = _timestamp + WITHDRAWAL_WAIT_INTERVAL;\n', '\t\tuint256 _end = _start + WITHDRAWAL_OPEN_INTERVAL;\n', '\t\trequire(_start <= now && now < _end, "not available");\n', '\t\tTransfers._pushFunds(_token, _to, _amount);\n', '\t\twithdrawals[_token].timestamp = 0;\n', '\t\twithdrawals[_token].to = address(0);\n', '\t\twithdrawals[_token].amount = 0;\n', '\t\temit Withdraw(_token, _to, _amount, _timestamp);\n', '\t}\n', '\n', '\tevent AnnounceWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\n', '\tevent CancelWithdrawal(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\n', '\tevent Withdraw(address indexed _token, address indexed _to, uint256 _amount, uint256 indexed _timestamp);\n', '}\n', '\n', '// File: contracts/network/$.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev This library is provided for convenience. It is the single source for\n', ' *      the current network and all related hardcoded contract addresses.\n', ' */\n', 'library $\n', '{\n', '\tenum Network {\n', '\t\tMainnet, Ropsten, Rinkeby, Kovan, Goerli,\n', '\t\tBscmain, Bsctest,\n', '\t\tFtmmain, Ftmtest\n', '\t}\n', '\n', '\tNetwork constant NETWORK = Network.Mainnet;\n', '\n', '\tfunction chainId() internal pure returns (uint256 _chainid)\n', '\t{\n', '\t\tassembly { _chainid := chainid() }\n', '\t\treturn _chainid;\n', '\t}\n', '\n', '\tfunction network() internal pure returns (Network _network)\n', '\t{\n', '\t\tuint256 _chainid = chainId();\n', '\t\tif (_chainid == 1) return Network.Mainnet;\n', '\t\tif (_chainid == 3) return Network.Ropsten;\n', '\t\tif (_chainid == 4) return Network.Rinkeby;\n', '\t\tif (_chainid == 42) return Network.Kovan;\n', '\t\tif (_chainid == 5) return Network.Goerli;\n', '\t\tif (_chainid == 56) return Network.Bscmain;\n', '\t\tif (_chainid == 97) return Network.Bsctest;\n', '\t\tif (_chainid == 250) return Network.Ftmmain;\n', '\t\tif (_chainid == 4002) return Network.Ftmtest;\n', '\t\trequire(false, "unsupported network");\n', '\t}\n', '\n', '\taddress constant GRO =\n', '\t\tNETWORK == Network.Mainnet ? 0x09e64c2B61a5f1690Ee6fbeD9baf5D6990F8dFd0 :\n', '\t\tNETWORK == Network.Ropsten ? 0x5BaF82B5Eddd5d64E03509F0a7dBa4Cbf88CF455 :\n', '\t\tNETWORK == Network.Rinkeby ? 0x020e317e70B406E23dF059F3656F6fc419411401 :\n', '\t\tNETWORK == Network.Kovan ? 0xFcB74f30d8949650AA524d8bF496218a20ce2db4 :\n', '\t\tNETWORK == Network.Goerli ? 0x464DF14dB50f46290CeDA1A8f7F0C6716c3c999D :\n', '\t\t// NETWORK == Network.Bscmain ? 0x0000000000000000000000000000000000000000 :\n', '\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\n', '\t\t// NETWORK == Network.Ftmmain ? 0x0000000000000000000000000000000000000000 :\n', '\t\t// NETWORK == Network.Ftmtest ? 0x0000000000000000000000000000000000000000 :\n', '\t\t0x0000000000000000000000000000000000000000;\n', '\n', '\taddress constant UniswapV2_Compatible_ROUTER02 =\n', '\t\t// Ethereum / UniswapV2\n', '\t\tNETWORK == Network.Mainnet ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\n', '\t\tNETWORK == Network.Ropsten ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\n', '\t\tNETWORK == Network.Rinkeby ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\n', '\t\tNETWORK == Network.Kovan ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\n', '\t\tNETWORK == Network.Goerli ? 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D :\n', '\t\t// Binance Smart Chain / PancakeSwap\n', '\t\tNETWORK == Network.Bscmain ? 0x05fF2B0DB69458A0750badebc4f9e13aDd608C7F :\n', '\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\n', '\t\t// Fantom Opera / fUNI\n', '\t\t// NETWORK == Network.Bscmain ? 0x0000000000000000000000000000000000000000 :\n', '\t\t// NETWORK == Network.Bsctest ? 0x0000000000000000000000000000000000000000 :\n', '\t\t0x0000000000000000000000000000000000000000;\n', '}\n', '\n', '// File: contracts/Deployer.sol\n', '\n', 'pragma solidity ^0.6.0;\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', '\n', 'contract Deployer is Ownable\n', '{\n', '\taddress constant NATIVE_TREASURY = 0x3E7Ff81efBbAdf5FCA2810086b7f4C17a4F3682f;\n', '\taddress constant PEGGED_TREASURY = 0x2165fa4a32B9c228cD55713f77d2e977297D03e8; // G\n', '\n', '\taddress constant NATIVE_DEFAULT_ADMIN = 0x3E7Ff81efBbAdf5FCA2810086b7f4C17a4F3682f;\n', '\taddress constant PEGGED_DEFAULT_ADMIN = 0xBf70B751BB1FC725bFbC4e68C4Ec4825708766c5; // S\n', '\n', '\tuint256 constant PEGGED_GRO_VAULT_ALLOCATION = 998000e18; // 998,000\n', '\tuint256 constant PEGGED_GRO_TREASURY_ALLOCATION = 1000e18; // 1,000\n', '\tuint256 constant PEGGED_GRO_OPERATOR_ALLOCATION = 1000e18; // 1,000\n', '\n', '\t$.Network constant NATIVE_NETWORK = $.Network.Mainnet;\n', '\tuint256 constant NATIVE_TARGET_CHAIN_ID = 56; // bscmain\n', '\tuint256 constant NATIVE_TARGET_VARIABLE_FEE_RATE = 3e16; // 3%\n', '\tuint256 constant NATIVE_TARGET_FIXED_FEE_AMOUNT = 0e18; // 0 GRO\n', '\n', '\t$.Network constant PEGGED_NETWORK = $.Network.Bscmain;\n', '\tuint256 constant PEGGED_TARGET_CHAIN_ID = 1; // mainnet\n', '\tuint256 constant PEGGED_TARGET_VARIABLE_FEE_RATE = 3e16; // 3%\n', '\tuint256 constant PEGGED_TARGET_FIXED_FEE_AMOUNT = 1e18; // 1 GRO\n', '\n', '\taddress constant DEFAULT_OPERATOR1 = 0xfd692394625c66cE3cfd62802D098902c2e92281;\n', '\taddress constant DEFAULT_OPERATOR2 = 0xfB468077695F7a2bAA0AdF394b5767Dd9eC140dB;\n', '\n', '\taddress public treasury;\n', '\taddress public admin;\n', '\taddress public token;\n', '\taddress public vault;\n', '\taddress public bridge;\n', '\taddress public operator;\n', '\taddress public panel;\n', '\taddress public registry;\n', '\n', '\tbool public deployed = false;\n', '\n', '\tconstructor () public\n', '\t{\n', '\t\trequire($.NETWORK == $.network(), "wrong network");\n', '\t}\n', '\n', '\tfunction deploy() external onlyOwner\n', '\t{\n', '\t\trequire(!deployed, "deploy unavailable");\n', '\n', '\t\tbool _nativeNetwork = true\n', '\t\t\t&& $.NETWORK != $.Network.Bscmain\n', '\t\t\t&& $.NETWORK != $.Network.Bsctest\n', '\t\t\t&& $.NETWORK != $.Network.Ftmmain\n', '\t\t\t&& $.NETWORK != $.Network.Ftmtest;\n', '\n', '\t\t// publish contracts\n', '\t\tif (_nativeNetwork) {\n', '\t\t\ttreasury = NATIVE_TREASURY;\n', '\t\t\tadmin = NATIVE_DEFAULT_ADMIN;\n', '\t\t\ttoken = $.GRO;\n', '\t\t} else {\n', '\t\t\ttreasury = PEGGED_TREASURY;\n', '\t\t\tadmin = PEGGED_DEFAULT_ADMIN;\n', '\t\t\ttoken = LibDeployer1.publishGRO();\n', '\t\t\tregistry = LibDeployer1.publishSignatureRegistry();\n', '\t\t}\n', '\t\tvault = LibDeployer2.publishTimeLockedVault();\n', '\t\toperator = LibDeployer1.publishOperator();\n', '\t\tbridge = LibDeployer2.publishTrustedBridge();\n', '\t\tpanel = LibDeployer2.publishPanel();\n', '\n', '\t\t// setup contracts\n', '\t\tuint256 _chainId = $.chainId();\n', '\t\tassert(_chainId != 0);\n', '\t\tOperator(operator).construct(_chainId, bridge, vault, token);\n', '\t\tTrustedBridge(bridge).construct(_chainId, operator, token);\n', '\t\tPanel(panel).construct(_chainId, bridge);\n', '\n', '\t\t// configure panel\n', '\t\tif ($.NETWORK == NATIVE_NETWORK) {\n', '\t\t\tPanel(panel).setFee(NATIVE_TARGET_CHAIN_ID, NATIVE_TARGET_VARIABLE_FEE_RATE, NATIVE_TARGET_FIXED_FEE_AMOUNT);\n', '\t\t\tPanel(panel).setRemoteBridge(NATIVE_TARGET_CHAIN_ID, bridge);\n', '\t\t\tPanel(panel).setRemoteOperator(NATIVE_TARGET_CHAIN_ID, operator);\n', '\t\t}\n', '\t\telse\n', '\t\tif ($.NETWORK == PEGGED_NETWORK) {\n', '\t\t\tPanel(panel).setFee(PEGGED_TARGET_CHAIN_ID, PEGGED_TARGET_VARIABLE_FEE_RATE, PEGGED_TARGET_FIXED_FEE_AMOUNT);\n', '\t\t\tPanel(panel).setRemoteBridge(PEGGED_TARGET_CHAIN_ID, bridge);\n', '\t\t\tPanel(panel).setRemoteOperator(PEGGED_TARGET_CHAIN_ID, operator);\n', '\t\t}\n', '\n', '\t\t// configure operator\n', '\t\tOperator(operator).addAgent(DEFAULT_OPERATOR1);\n', '\t\tOperator(operator).addAgent(DEFAULT_OPERATOR2);\n', '\n', '\t\t// transfer total supply\n', '\t\tif (!_nativeNetwork) {\n', '\t\t\tTransfers._pushFunds(token, vault, PEGGED_GRO_VAULT_ALLOCATION);\n', '\t\t\tTransfers._pushFunds(token, treasury, PEGGED_GRO_TREASURY_ALLOCATION);\n', '\t\t\tTransfers._pushFunds(token, operator, PEGGED_GRO_OPERATOR_ALLOCATION);\n', '\t\t}\n', '\n', '\t\t// make sure all transfers occurred\n', '\t\trequire(Transfers._getBalance(token) == 0, "GRO left over");\n', '\n', '\t\t// transfer ownerships\n', '\t\tOwnable(operator).transferOwnership(admin);\n', '\t\tOwnable(bridge).transferOwnership(admin);\n', '\t\tOwnable(panel).transferOwnership(admin);\n', '\t\tOwnable(vault).transferOwnership(admin);\n', '\n', '\t\t// wrap up the deployment\n', '\t\trenounceOwnership();\n', '\t\tdeployed = true;\n', '\t\temit DeployPerformed();\n', '\t}\n', '\n', '\tevent DeployPerformed();\n', '}\n', '\n', 'library LibDeployer1\n', '{\n', '\tfunction publishGRO() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(GRO).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '\n', '\tfunction publishSignatureRegistry() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(SignatureRegistry).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '\n', '\tfunction publishOperator() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(Operator).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '}\n', '\n', 'library LibDeployer2\n', '{\n', '\tfunction publishTrustedBridge() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(TrustedBridge).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '\n', '\tfunction publishPanel() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(Panel).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '\n', '\tfunction publishTimeLockedVault() public returns (address _address)\n', '\t{\n', '\t\tbytes memory _bytecode = abi.encodePacked(type(TimeLockedVault).creationCode);\n', '\t\treturn Create2.deploy(0, bytes32(0), _bytecode);\n', '\t}\n', '}']