['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-17\n', '*/\n', '\n', 'pragma solidity 0.6.7;\n', '\n', 'interface IERC20 {\n', '    function transfer(address to, uint256 value) external;\n', '    function approve(address spender, uint256 value) external;\n', '}\n', '\n', 'interface CToken {\n', '    function mint(uint mintAmount) external returns (uint);\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '    function underlying() external returns (IERC20);\n', '}\n', '\n', 'interface CEther {\n', '    function mint() external payable;\n', '    function redeemUnderlying(uint redeemAmount) external returns (uint);\n', '}\n', '\n', 'abstract contract LinenWalletActions {\n', '\n', '    function cEther() internal pure virtual returns (CEther);\n', '\n', '    function approveAndMint(CToken cToken, uint mintAmount) external returns (bool) {\n', '        \n', '        if (address(cToken) == address(cEther())){\n', '            cEther().mint{value: mintAmount}();\n', '        } else {\n', '            cToken.underlying().approve(address(cToken), mintAmount);\n', '            require(cToken.mint(mintAmount) == 0, "Mint was not successful");\n', '        }\n', '        return true;\n', '    }\n', '\n', '    function redeemUnderlyingAndTransfer(CToken cToken, address payable to, uint redeemAmount) external returns (bool) {\n', '        if (address(cToken) == address(cEther())){\n', '            require(cEther().redeemUnderlying(redeemAmount) == 0, "Redeem Underlying was not successful");\n', '            (bool success, ) = to.call{value: redeemAmount}("");\n', '            require(success, "Transfer was not successful");\n', '        } else {\n', '            require(cToken.redeemUnderlying(redeemAmount) == 0, "Redeem Underlying was not successful");\n', '            cToken.underlying().transfer(to, redeemAmount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '\n', '    function redeemUnderlyingAndTransfer(CToken cToken, address payable to, uint redeemAmount, uint feeAmount) external returns (bool) {\n', '        require(redeemAmount >= feeAmount, "subtraction overflow");\n', '        \n', '        if (address(cToken) == address(cEther())){\n', '            require(cEther().redeemUnderlying(redeemAmount) == 0, "Redeem Underlying was not successful");\n', '            (bool success, ) = to.call{value: redeemAmount - feeAmount}("");\n', '            require(success, "Transfer was not successful");\n', '        } else {\n', '            require(cToken.redeemUnderlying(redeemAmount) == 0, "Redeem Underlying was not successful");\n', '            cToken.underlying().transfer(to, redeemAmount - feeAmount);\n', '        }\n', '\n', '        return true;\n', '    }\n', '}\n', '\n', 'contract LinenWalletActionsMainnet is LinenWalletActions {\n', '    function cEther() internal pure override returns (CEther){\n', '        return CEther(0x4Ddc2D193948926D02f9B1fE9e1daa0718270ED5);\n', '    }\n', '}']