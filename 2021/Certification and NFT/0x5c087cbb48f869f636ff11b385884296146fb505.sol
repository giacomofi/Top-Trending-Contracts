['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-18\n', '*/\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\n', '\n', '// SPDX-License-Identifier: MIT\n', '\n', '// pragma solidity >=0.4.24 <0.7.0;\n', '\n', '\n', '/**\n', ' * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n', " * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n", ' * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n', ' * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n', ' * \n', ' * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n', ' * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\n', ' * \n', ' * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n', ' * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n', ' */\n', 'abstract contract Initializable {\n', '\n', '    /**\n', '     * @dev Indicates that the contract has been initialized.\n', '     */\n', '    bool private _initialized;\n', '\n', '    /**\n', '     * @dev Indicates that the contract is in the process of being initialized.\n', '     */\n', '    bool private _initializing;\n', '\n', '    /**\n', '     * @dev Modifier to protect an initializer function from being invoked twice.\n', '     */\n', '    modifier initializer() {\n', '        require(_initializing || _isConstructor() || !_initialized, "Initializable: contract is already initialized");\n', '\n', '        bool isTopLevelCall = !_initializing;\n', '        if (isTopLevelCall) {\n', '            _initializing = true;\n', '            _initialized = true;\n', '        }\n', '\n', '        _;\n', '\n', '        if (isTopLevelCall) {\n', '            _initializing = false;\n', '        }\n', '    }\n', '\n', '    /// @dev Returns true if and only if the function is running in the constructor\n', '    function _isConstructor() private view returns (bool) {\n', '        // extcodesize checks the size of the code stored in an address, and\n', '        // address returns the current address. Since the code is still not\n', '        // deployed when running a constructor, any checks on its code size will\n', '        // yield zero, making it an effective way to detect if a contract is\n', '        // under construction or not.\n', '        address self = address(this);\n', '        uint256 cs;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { cs := extcodesize(self) }\n', '        return cs == 0;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'abstract contract ContextUpgradeable is Initializable {\n', '    function __Context_init() internal initializer {\n', '        __Context_init_unchained();\n', '    }\n', '\n', '    function __Context_init_unchained() internal initializer {\n', '    }\n', '    function _msgSender() internal view virtual returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view virtual returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '    uint256[50] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * By default, the owner account will be the one that deploys the contract. This\n', ' * can later be changed with {transferOwnership}.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    function __Ownable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Ownable_init_unchained();\n', '    }\n', '\n', '    function __Ownable_init_unchained() internal initializer {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(_owner == _msgSender(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public virtual onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public virtual onlyOwner {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/GSN/ContextUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '\n', '/**\n', ' * @dev Contract module which allows children to implement an emergency stop\n', ' * mechanism that can be triggered by an authorized account.\n', ' *\n', ' * This module is used through inheritance. It will make available the\n', ' * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n', ' * the functions of your contract. Note that they will not be pausable by\n', ' * simply including this module, only once the modifiers are put in place.\n', ' */\n', 'contract PausableUpgradeable is Initializable, ContextUpgradeable {\n', '    /**\n', '     * @dev Emitted when the pause is triggered by `account`.\n', '     */\n', '    event Paused(address account);\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted by `account`.\n', '     */\n', '    event Unpaused(address account);\n', '\n', '    bool private _paused;\n', '\n', '    /**\n', '     * @dev Initializes the contract in unpaused state.\n', '     */\n', '    function __Pausable_init() internal initializer {\n', '        __Context_init_unchained();\n', '        __Pausable_init_unchained();\n', '    }\n', '\n', '    function __Pausable_init_unchained() internal initializer {\n', '        _paused = false;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the contract is paused, and false otherwise.\n', '     */\n', '    function paused() public view returns (bool) {\n', '        return _paused;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is not paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    modifier whenNotPaused() {\n', '        require(!_paused, "Pausable: paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Modifier to make a function callable only when the contract is paused.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    modifier whenPaused() {\n', '        require(_paused, "Pausable: not paused");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Triggers stopped state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must not be paused.\n', '     */\n', '    function _pause() internal virtual whenNotPaused {\n', '        _paused = true;\n', '        emit Paused(_msgSender());\n', '    }\n', '\n', '    /**\n', '     * @dev Returns to normal state.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The contract must be paused.\n', '     */\n', '    function _unpause() internal virtual whenPaused {\n', '        _paused = false;\n', '        emit Unpaused(_msgSender());\n', '    }\n', '    uint256[49] private __gap;\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev These functions deal with verification of Merkle trees (hash trees),\n', ' */\n', 'library MerkleProofUpgradeable {\n', '    /**\n', '     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n', '     * defined by `root`. For this, a `proof` must be provided, containing\n', '     * sibling hashes on the branch from the leaf to the root of the tree. Each\n', '     * pair of leaves and each pair of pre-images are assumed to be sorted.\n', '     */\n', '    function verify(bytes32[] memory proof, bytes32 root, bytes32 leaf) internal pure returns (bool) {\n', '        bytes32 computedHash = leaf;\n', '\n', '        for (uint256 i = 0; i < proof.length; i++) {\n', '            bytes32 proofElement = proof[i];\n', '\n', '            if (computedHash <= proofElement) {\n', '                // Hash(current computed hash + current element of the proof)\n', '                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n', '            } else {\n', '                // Hash(current element of the proof + current computed hash)\n', '                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n', '            }\n', '        }\n', '\n', '        // Check if the computed hash (root) is equal to the provided root\n', '        return computedHash == root;\n', '    }\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/interfaces/digg/IDigg.sol\n', '\n', '// pragma solidity >=0.5.0 <0.8.0;\n', '\n', 'interface IDigg {\n', '    // Used for authentication\n', '    function monetaryPolicy() external view returns (address);\n', '\n', '    function rebaseStartTime() external view returns (uint256);\n', '\n', '    /**\n', '     * @param monetaryPolicy_ The address of the monetary policy contract to use for authentication.\n', '     */\n', '    function setMonetaryPolicy(address monetaryPolicy_) external;\n', '\n', '    /**\n', '     * @dev Notifies Fragments contract about a new rebase cycle.\n', '     * @param supplyDelta The number of new fragment tokens to add into circulation via expansion.\n', '     * @return The total number of fragments after the supply adjustment.\n', '     */\n', '    function rebase(uint256 epoch, int256 supplyDelta) external returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of fragments.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @return The total number of underlying shares.\n', '     */\n', '    function totalShares() external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The balance of the specified address.\n', '     */\n', '    function balanceOf(address who) external view returns (uint256);\n', '\n', '    /**\n', '     * @param who The address to query.\n', '     * @return The underlying shares of the specified address.\n', '     */\n', '    function sharesOf(address who) external view returns (uint256);\n', '\n', '    function _sharesPerFragment() external view returns (uint256);\n', '    function _initialSharesPerFragment() external view returns (uint256);\n', '\n', '    /**\n', '     * @param fragments Fragment value to convert.\n', '     * @return The underlying share value of the specified fragment amount.\n', '     */\n', '    function fragmentsToShares(uint256 fragments) external view returns (uint256);\n', '\n', '    /**\n', '     * @param shares Share value to convert.\n', '     * @return The current fragment value of the specified underlying share amount.\n', '     */\n', '    function sharesToFragments(uint256 shares) external view returns (uint256);\n', '\n', '    function scaledSharesToShares(uint256 fragments) external view returns (uint256);\n', '    function sharesToScaledShares(uint256 shares) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens to a specified address.\n', '     * @param to The address to transfer to.\n', '     * @param value The amount to be transferred.\n', '     * @return True on success, false otherwise.\n', '     */\n', '    function transfer(address to, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Function to check the amount of tokens that an owner has allowed to a spender.\n', '     * @param owner_ The address which owns the funds.\n', '     * @param spender The address which will spend the funds.\n', '     * @return The number of tokens still available for the spender.\n', '     */\n', '    function allowance(address owner_, address spender) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Transfer tokens from one address to another.\n', '     * @param from The address you want to send tokens from.\n', '     * @param to The address you want to transfer to.\n', '     * @param value The amount of tokens to be transferred.\n', '     */\n', '    function transferFrom(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Approve the passed address to spend the specified amount of tokens on behalf of\n', '     * msg.sender. This method is included for ERC20 compatibility.\n', '     * increaseAllowance and decreaseAllowance should be used instead.\n', '     * Changing an allowance with this method brings the risk that someone may transfer both\n', '     * the old and the new allowance - if they are both greater than zero - if a transfer\n', '     * transaction is mined before the later approve() call is mined.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param value The amount of tokens to be spent.\n', '     */\n', '    function approve(address spender, uint256 value) external returns (bool);\n', '\n', '    /**\n', '     * @dev Increase the amount of tokens that an owner has allowed to a spender.\n', '     * This method should be used instead of approve() to avoid the double approval vulnerability\n', '     * described above.\n', '     * @param spender The address which will spend the funds.\n', '     * @param addedValue The amount of tokens to increase the allowance by.\n', '     */\n', '    function increaseAllowance(address spender, uint256 addedValue) external returns (bool);\n', '\n', '    /**\n', '     * @dev Decrease the amount of tokens that an owner has allowed to a spender.\n', '     *\n', '     * @param spender The address which will spend the funds.\n', '     * @param subtractedValue The amount of tokens to decrease the allowance by.\n', '     */\n', '    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool);\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\n', '\n', '\n', '// pragma solidity ^0.6.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20Upgradeable {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * // importANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '\n', '// Dependency file: /Users/starfish/code/badger-system/interfaces/badger/IMerkleDistributor.sol\n', '\n', '// pragma solidity >=0.5.0;\n', '\n', '// Allows anyone to claim a token if they exist in a merkle root.\n', 'interface IMerkleDistributor {\n', '    // Returns true if the index has been marked claimed.\n', '    function isClaimed(uint256 index) external view returns (bool);\n', '    // Claim the given amount of the token to the given address. Reverts if the inputs are invalid.\n', '    function claim(uint256 index, address account, uint256 amount, bytes32[] calldata merkleProof) external;\n', '\n', '    // This event is triggered whenever a call to #claim succeeds.\n', '    event Claimed(uint256 index, address account, uint256 amount);\n', '}\n', '\n', '// Dependency file: contracts/badger-hunt/MerkleDistributor.sol\n', '\n', '// pragma solidity ^0.6.11;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/proxy/Initializable.sol";\n', '// import "/Users/starfish/code/badger-system/interfaces/badger/IMerkleDistributor.sol";\n', '\n', 'contract MerkleDistributor is Initializable, IMerkleDistributor {\n', '    address public token;\n', '    bytes32 public merkleRoot;\n', '\n', '    // This is a packed array of booleans.\n', '    mapping(uint256 => uint256) internal claimedBitMap;\n', '\n', '    function __MerkleDistributor_init(address token_, bytes32 merkleRoot_) public initializer {\n', '        token = token_;\n', '        merkleRoot = merkleRoot_;\n', '    }\n', '\n', '    function isClaimed(uint256 index) public override view returns (bool) {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        uint256 claimedWord = claimedBitMap[claimedWordIndex];\n', '        uint256 mask = (1 << claimedBitIndex);\n', '        return claimedWord & mask == mask;\n', '    }\n', '\n', '    function _setClaimed(uint256 index) internal {\n', '        uint256 claimedWordIndex = index / 256;\n', '        uint256 claimedBitIndex = index % 256;\n', '        claimedBitMap[claimedWordIndex] = claimedBitMap[claimedWordIndex] | (1 << claimedBitIndex);\n', '    }\n', '\n', '    function claim(\n', '        uint256 index,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] calldata merkleProof\n', '    ) external virtual override {\n', '        require(!isClaimed(index), "MerkleDistributor: Drop already claimed.");\n', '\n', '        // Verify the merkle proof.\n', '        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n', '        require(MerkleProofUpgradeable.verify(merkleProof, merkleRoot, node), "MerkleDistributor: Invalid proof.");\n', '\n', '        // Mark it claimed and send the token.\n', '        _setClaimed(index);\n', '        require(IERC20Upgradeable(token).transfer(account, amount), "MerkleDistributor: Transfer failed.");\n', '\n', '        emit Claimed(index, account, amount);\n', '    }\n', '}\n', '\n', '\n', '// Root file: contracts/badger-hunt/AirdropDistributor.sol\n', '\n', 'pragma solidity ^0.6.11;\n', '\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/deps/@openzeppelin/contracts-upgradeable/cryptography/MerkleProofUpgradeable.sol";\n', '// import "/Users/starfish/code/badger-system/interfaces/digg/IDigg.sol";\n', '// import "contracts/badger-hunt/MerkleDistributor.sol";\n', '\n', '/* ===== AirdropDistributor =====\n', '    Variant on MerkleDistributor that encodes claimable values in DIGG amount, rather than balances\n', '    This means the value claimable will remain constant through rebases\n', '\n', '    After a preset delay, an owner can recall unclaimed DIGG to the treasury\n', '*/\n', 'contract AirdropDistributor is MerkleDistributor, OwnableUpgradeable, PausableUpgradeable {\n', '    address public rewardsEscrow;\n', '    uint256 public reclaimAllowedTimestamp;\n', '    bool public isOpen;\n', '\n', '    mapping(address => bool) public isClaimTester;\n', '\n', '    function initialize(\n', '        address token_,\n', '        bytes32 merkleRoot_,\n', '        address rewardsEscrow_,\n', '        uint256 reclaimAllowedTimestamp_,\n', '        address[] memory claimTesters_\n', '    ) public initializer whenNotPaused {\n', '        __MerkleDistributor_init(token_, merkleRoot_);\n', '        __Ownable_init();\n', '        __Pausable_init_unchained();\n', '        rewardsEscrow = rewardsEscrow_;\n', '        reclaimAllowedTimestamp = reclaimAllowedTimestamp_;\n', '        isOpen = false;\n', '\n', '        for (uint256 i = 0; i < claimTesters_.length; i++) {\n', '            isClaimTester[claimTesters_[i]] = true;\n', '        }\n', '\n', '        // Paused on launch\n', '        _pause();\n', '    }\n', '\n', '    function claim(\n', '        uint256 index,\n', '        address account,\n', '        uint256 amount,\n', '        bytes32[] calldata merkleProof\n', '    ) external virtual override whenNotPaused {\n', '        require(!isClaimed(index), "AirdropDistributor: Drop already claimed.");\n', '\n', '        // Only test accounts can claim before launch\n', '        if (isOpen == false) {\n', '            _onlyClaimTesters(msg.sender);\n', '        }\n', '\n', '        // Verify the merkle proof.\n', '        bytes32 node = keccak256(abi.encodePacked(index, account, amount));\n', '        require(MerkleProofUpgradeable.verify(merkleProof, merkleRoot, node), "AirdropDistributor: Invalid proof.");\n', '\n', '        // Mark it claimed and send the token.\n', '        _setClaimed(index);\n', '        require(IDigg(token).transfer(account, amount), "AirdropDistributor: Transfer failed.");\n', '\n', '        emit Claimed(index, account, amount);\n', '    }\n', '\n', '    /// ===== Gated Actions: Owner =====\n', '\n', '    /// @notice Transfer unclaimed funds to rewards escrow\n', '    function reclaim() external onlyOwner whenNotPaused {\n', '        require(now >= reclaimAllowedTimestamp, "AirdropDistributor: Before reclaim timestamp");\n', '        uint256 remainingBalance = IDigg(token).balanceOf(address(this));\n', '        require(IERC20Upgradeable(token).transfer(rewardsEscrow, remainingBalance), "AirdropDistributor: Reclaim failed");\n', '    }\n', '\n', '    function pause() external onlyOwner {\n', '        _pause();\n', '    }\n', '\n', '    function unpause() external onlyOwner {\n', '        _unpause();\n', '    }\n', '\n', '    function openAirdrop() external onlyOwner whenNotPaused {\n', '        isOpen = true;\n', '    }\n', '\n', '    /// ===== Internal Helper Functions =====\n', '    function _onlyClaimTesters(address account) internal view {\n', '        require(isClaimTester[account], "onlyClaimTesters");\n', '    }\n', '}']