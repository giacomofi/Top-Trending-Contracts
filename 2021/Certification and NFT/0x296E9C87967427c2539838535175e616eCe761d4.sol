['/**\n', ' *Submitted for verification at Etherscan.io on 2021-02-05\n', '*/\n', '\n', '// SPDX-License-Identifier: AGPL-3.0-or-later\n', '// hevm: flattened sources of src/DssSpell.sol\n', 'pragma solidity =0.6.11 >=0.6.11 <0.7.0;\n', '\n', '////// lib/dss-exec-lib/src/CollateralOpts.sol\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'struct CollateralOpts {\n', '    bytes32 ilk;\n', '    address gem;\n', '    address join;\n', '    address flip;\n', '    address pip;\n', '    bool    isLiquidatable;\n', '    bool    isOSM;\n', '    bool    whitelistOSM;\n', '    uint256 ilkDebtCeiling;\n', '    uint256 minVaultAmount;\n', '    uint256 maxLiquidationAmount;\n', '    uint256 liquidationPenalty;\n', '    uint256 ilkStabilityFee;\n', '    uint256 bidIncrease;\n', '    uint256 bidDuration;\n', '    uint256 auctionDuration;\n', '    uint256 liquidationRatio;\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssAction.sol\n', '//\n', '// DssAction.sol -- DSS Executive Spell Actions\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', '/* import "./CollateralOpts.sol"; */\n', '\n', '// https://github.com/makerdao/dss-chain-log\n', 'interface ChainlogLike {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface RegistryLike {\n', '    function ilkData(bytes32) external view returns (\n', '        uint256       pos,\n', '        address       gem,\n', '        address       pip,\n', '        address       join,\n', '        address       flip,\n', '        uint256       dec,\n', '        string memory name,\n', '        string memory symbol\n', '    );\n', '}\n', '\n', '// Includes Median and OSM functions\n', 'interface OracleLike {\n', '    function src() external view returns (address);\n', '    function lift(address[] calldata) external;\n', '    function drop(address[] calldata) external;\n', '    function setBar(uint256) external;\n', '    function kiss(address) external;\n', '    function diss(address) external;\n', '    function kiss(address[] calldata) external;\n', '    function diss(address[] calldata) external;\n', '}\n', '\n', 'abstract contract DssAction {\n', '\n', '    address public immutable lib;\n', '    bool    public immutable officeHours;\n', '\n', '    // Changelog address applies to MCD deployments on\n', '    //        mainnet, kovan, rinkeby, ropsten, and goerli\n', '    address constant public LOG = 0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F;\n', '\n', '    constructor(address lib_, bool officeHours_) public {\n', '        lib = lib_;\n', '        officeHours = officeHours_;\n', '    }\n', '\n', '    // DssExec calls execute. We limit this function subject to officeHours modifier.\n', '    function execute() external limited {\n', '        actions();\n', '    }\n', '\n', '    // DssAction developer must override `actions()` and place all actions to be called inside.\n', '    //   The DssExec function will call this subject to the officeHours limiter\n', '    //   By keeping this function public we allow simulations of `execute()` on the actions outside of the cast time.\n', '    function actions() public virtual;\n', '\n', '    // Modifier required to\n', '    modifier limited {\n', '        if (officeHours) {\n', '            uint day = (block.timestamp / 1 days + 3) % 7;\n', '            require(day < 5, "Can only be cast on a weekday");\n', '            uint hour = block.timestamp / 1 hours % 24;\n', '            require(hour >= 14 && hour < 21, "Outside office hours");\n', '        }\n', '        _;\n', '    }\n', '\n', '    /****************************/\n', '    /*** Core Address Helpers ***/\n', '    /****************************/\n', '    function vat()        internal view returns (address) { return getChangelogAddress("MCD_VAT"); }\n', '    function cat()        internal view returns (address) { return getChangelogAddress("MCD_CAT"); }\n', '    function jug()        internal view returns (address) { return getChangelogAddress("MCD_JUG"); }\n', '    function pot()        internal view returns (address) { return getChangelogAddress("MCD_POT"); }\n', '    function vow()        internal view returns (address) { return getChangelogAddress("MCD_VOW"); }\n', '    function end()        internal view returns (address) { return getChangelogAddress("MCD_END"); }\n', '    function reg()        internal view returns (address) { return getChangelogAddress("ILK_REGISTRY"); }\n', '    function spot()       internal view returns (address) { return getChangelogAddress("MCD_SPOT"); }\n', '    function flap()       internal view returns (address) { return getChangelogAddress("MCD_FLAP"); }\n', '    function flop()       internal view returns (address) { return getChangelogAddress("MCD_FLOP"); }\n', '    function osmMom()     internal view returns (address) { return getChangelogAddress("OSM_MOM"); }\n', '    function govGuard()   internal view returns (address) { return getChangelogAddress("GOV_GUARD"); }\n', '    function flipperMom() internal view returns (address) { return getChangelogAddress("FLIPPER_MOM"); }\n', '    function autoLine()   internal view returns (address) { return getChangelogAddress("MCD_IAM_AUTO_LINE"); }\n', '\n', '    function flip(bytes32 ilk) internal view returns (address) {\n', '        (,,,, address _flip,,,) = RegistryLike(reg()).ilkData(ilk);\n', '        return _flip;\n', '    }\n', '\n', '    function getChangelogAddress(bytes32 key) internal view returns (address) {\n', '        return ChainlogLike(LOG).getAddress(key);\n', '    }\n', '\n', '    function libcall(bytes memory data) internal {\n', '        (bool ok,) = lib.delegatecall(data);\n', '        require(ok, "DssAction/failed-lib-call");\n', '    }\n', '\n', '\n', '    /****************************/\n', '    /*** Changelog Management ***/\n', '    /****************************/\n', '    function setChangelogAddress(bytes32 key, address value) internal {\n', '        libcall(abi.encodeWithSignature("setChangelogAddress(address,bytes32,address)", LOG, key, value));\n', '    }\n', '\n', '    function setChangelogVersion(string memory version) internal {\n', '        libcall(abi.encodeWithSignature("setChangelogVersion(address,string)", LOG, version));\n', '    }\n', '\n', '    function setChangelogIPFS(string memory ipfs) internal {\n', '        libcall(abi.encodeWithSignature("setChangelogIPFS(address,string)", LOG, ipfs));\n', '    }\n', '\n', '    function setChangelogSHA256(string memory SHA256) internal {\n', '        libcall(abi.encodeWithSignature("setChangelogSHA256(address,string)", LOG, SHA256));\n', '    }\n', '\n', '    /**********************/\n', '    /*** Authorizations ***/\n', '    /**********************/\n', '    function authorize(address base, address ward) internal virtual {\n', '        libcall(abi.encodeWithSignature("authorize(address,address)", base, ward));\n', '    }\n', '\n', '    function deauthorize(address base, address ward) internal {\n', '        libcall(abi.encodeWithSignature("deauthorize(address,address)", base, ward));\n', '    }\n', '\n', '    /**************************/\n', '    /*** Accumulating Rates ***/\n', '    /**************************/\n', '    function accumulateDSR() internal {\n', '        libcall(abi.encodeWithSignature("accumulateDSR(address)", pot()));\n', '    }\n', '\n', '    function accumulateCollateralStabilityFees(bytes32 ilk) internal {\n', '        libcall(abi.encodeWithSignature("accumulateCollateralStabilityFees(address,bytes32)", jug(), ilk));\n', '    }\n', '\n', '    /*********************/\n', '    /*** Price Updates ***/\n', '    /*********************/\n', '    function updateCollateralPrice(bytes32 ilk) internal {\n', '        libcall(abi.encodeWithSignature("updateCollateralPrice(address,bytes32)", spot(), ilk));\n', '    }\n', '\n', '    /****************************/\n', '    /*** System Configuration ***/\n', '    /****************************/\n', '    function setContract(address base, bytes32 what, address addr) internal {\n', '        libcall(abi.encodeWithSignature("setContract(address,bytes32,address)", base, what, addr));\n', '    }\n', '\n', '    function setContract(address base, bytes32 ilk, bytes32 what, address addr) internal {\n', '        libcall(abi.encodeWithSignature("setContract(address,bytes32,bytes32,address)", base, ilk, what, addr));\n', '    }\n', '\n', '    /******************************/\n', '    /*** System Risk Parameters ***/\n', '    /******************************/\n', '    function setGlobalDebtCeiling(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setGlobalDebtCeiling(address,uint256)", vat(), amount));\n', '    }\n', '\n', '    function increaseGlobalDebtCeiling(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("increaseGlobalDebtCeiling(address,uint256)", vat(), amount));\n', '    }\n', '\n', '    function decreaseGlobalDebtCeiling(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("decreaseGlobalDebtCeiling(address,uint256)", vat(), amount));\n', '    }\n', '\n', '    function setDSR(uint256 rate) internal {\n', '        libcall(abi.encodeWithSignature("setDSR(address,uint256)", pot(), rate));\n', '    }\n', '\n', '    function setSurplusAuctionAmount(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setSurplusAuctionAmount(address,uint256)", vow(), amount));\n', '    }\n', '\n', '    function setSurplusBuffer(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setSurplusBuffer(address,uint256)", vow(), amount));\n', '    }\n', '\n', '    function setMinSurplusAuctionBidIncrease(uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setMinSurplusAuctionBidIncrease(address,uint256)", flap(), pct_bps));\n', '    }\n', '\n', '    function setSurplusAuctionBidDuration(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setSurplusAuctionBidDuration(address,uint256)", flap(), duration));\n', '    }\n', '\n', '    function setSurplusAuctionDuration(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setSurplusAuctionDuration(address,uint256)", flap(), duration));\n', '    }\n', '\n', '    function setDebtAuctionDelay(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionDelay(address,uint256)", vow(), duration));\n', '    }\n', '\n', '    function setDebtAuctionDAIAmount(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionDAIAmount(address,uint256)", vow(), amount));\n', '    }\n', '\n', '    function setDebtAuctionMKRAmount(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionMKRAmount(address,uint256)", vow(), amount));\n', '    }\n', '\n', '    function setMinDebtAuctionBidIncrease(uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setMinDebtAuctionBidIncrease(address,uint256)", flop(), pct_bps));\n', '    }\n', '\n', '    function setDebtAuctionBidDuration(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionBidDuration(address,uint256)", flop(), duration));\n', '    }\n', '\n', '    function setDebtAuctionDuration(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionDuration(address,uint256)", flop(), duration));\n', '    }\n', '\n', '    function setDebtAuctionMKRIncreaseRate(uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setDebtAuctionMKRIncreaseRate(address,uint256)", flop(), pct_bps));\n', '    }\n', '\n', '    function setMaxTotalDAILiquidationAmount(uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setMaxTotalDAILiquidationAmount(address,uint256)", cat(), amount));\n', '    }\n', '\n', '    function setEmergencyShutdownProcessingTime(uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setEmergencyShutdownProcessingTime(address,uint256)", end(), duration));\n', '    }\n', '\n', '    function setGlobalStabilityFee(uint256 rate) internal {\n', '        libcall(abi.encodeWithSignature("setGlobalStabilityFee(address,uint256)", jug(), rate));\n', '    }\n', '\n', '    function setDAIReferenceValue(uint256 value) internal {\n', '        libcall(abi.encodeWithSignature("setDAIReferenceValue(address,uint256)", spot(),value));\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Management ***/\n', '    /*****************************/\n', '    function setIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setIlkDebtCeiling(address,bytes32,uint256)", vat(), ilk, amount));\n', '    }\n', '\n', '    function increaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("increaseIlkDebtCeiling(address,bytes32,uint256,bool)", vat(), ilk, amount, true));\n', '    }\n', '\n', '    function decreaseIlkDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("decreaseIlkDebtCeiling(address,bytes32,uint256,bool)", vat(), ilk, amount, true));\n', '    }\n', '\n', '    function setIlkAutoLineParameters(bytes32 ilk, uint256 amount, uint256 gap, uint256 ttl) internal {\n', '        libcall(abi.encodeWithSignature("setIlkAutoLineParameters(address,bytes32,uint256,uint256,uint256)", autoLine(), ilk, amount, gap, ttl));\n', '    }\n', '\n', '    function setIlkAutoLineDebtCeiling(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setIlkAutoLineDebtCeiling(address,bytes32,uint256)", autoLine(), ilk, amount));\n', '    }\n', '\n', '    function removeIlkFromAutoLine(bytes32 ilk) internal {\n', '        libcall(abi.encodeWithSignature("removeIlkFromAutoLine(address,bytes32)", autoLine(), ilk));\n', '    }\n', '\n', '    function setIlkMinVaultAmount(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setIlkMinVaultAmount(address,bytes32,uint256)", vat(), ilk, amount));\n', '    }\n', '\n', '    function setIlkLiquidationPenalty(bytes32 ilk, uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setIlkLiquidationPenalty(address,bytes32,uint256)", cat(), ilk, pct_bps));\n', '    }\n', '\n', '    function setIlkMaxLiquidationAmount(bytes32 ilk, uint256 amount) internal {\n', '        libcall(abi.encodeWithSignature("setIlkMaxLiquidationAmount(address,bytes32,uint256)", cat(), ilk, amount));\n', '    }\n', '\n', '    function setIlkLiquidationRatio(bytes32 ilk, uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setIlkLiquidationRatio(address,bytes32,uint256)", spot(), ilk, pct_bps));\n', '    }\n', '\n', '    function setIlkMinAuctionBidIncrease(bytes32 ilk, uint256 pct_bps) internal {\n', '        libcall(abi.encodeWithSignature("setIlkMinAuctionBidIncrease(address,uint256)", flip(ilk), pct_bps));\n', '    }\n', '\n', '    function setIlkBidDuration(bytes32 ilk, uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setIlkBidDuration(address,uint256)", flip(ilk), duration));\n', '    }\n', '\n', '    function setIlkAuctionDuration(bytes32 ilk, uint256 duration) internal {\n', '        libcall(abi.encodeWithSignature("setIlkAuctionDuration(address,uint256)", flip(ilk), duration));\n', '    }\n', '\n', '    function setIlkStabilityFee(bytes32 ilk, uint256 rate) internal {\n', '        libcall(abi.encodeWithSignature("setIlkStabilityFee(address,bytes32,uint256,bool)", jug(), ilk, rate, true));\n', '    }\n', '\n', '    /***********************/\n', '    /*** Core Management ***/\n', '    /***********************/\n', '    function updateCollateralAuctionContract(bytes32 ilk, address newFlip, address oldFlip) internal {\n', '        libcall(abi.encodeWithSignature("updateCollateralAuctionContract(address,address,address,address,bytes32,address,address)", vat(), cat(), end(), flipperMom(), ilk, newFlip, oldFlip));\n', '    }\n', '\n', '    function updateSurplusAuctionContract(address newFlap, address oldFlap) internal {\n', '        libcall(abi.encodeWithSignature("updateSurplusAuctionContract(address,address,address,address)", vat(), vow(), newFlap, oldFlap));\n', '    }\n', '\n', '    function updateDebtAuctionContract(address newFlop, address oldFlop) internal {\n', '        libcall(abi.encodeWithSignature("updateDebtAuctionContract(address,address,address,address,address)", vat(), vow(), govGuard(), newFlop, oldFlop));\n', '    }\n', '\n', '    /*************************/\n', '    /*** Oracle Management ***/\n', '    /*************************/\n', '    function addWritersToMedianWhitelist(address medianizer, address[] memory feeds) internal {\n', '        libcall(abi.encodeWithSignature("addWritersToMedianWhitelist(address,address[])", medianizer, feeds));\n', '    }\n', '\n', '    function removeWritersFromMedianWhitelist(address medianizer, address[] memory feeds) internal {\n', '        libcall(abi.encodeWithSignature("removeWritersFromMedianWhitelist(address,address[])", medianizer, feeds));\n', '    }\n', '\n', '    function addReadersToMedianWhitelist(address medianizer, address[] memory readers) internal {\n', '        libcall(abi.encodeWithSignature("addReadersToMedianWhitelist(address,address[])", medianizer, readers));\n', '    }\n', '\n', '    function addReaderToMedianWhitelist(address medianizer, address reader) internal {\n', '        libcall(abi.encodeWithSignature("addReaderToMedianWhitelist(address,address)", medianizer, reader));\n', '    }\n', '\n', '    function removeReadersFromMedianWhitelist(address medianizer, address[] memory readers) internal {\n', '        libcall(abi.encodeWithSignature("removeReadersFromMedianWhitelist(address,address[])", medianizer, readers));\n', '    }\n', '\n', '    function removeReaderFromMedianWhitelist(address medianizer, address reader) internal {\n', '        libcall(abi.encodeWithSignature("removeReaderFromMedianWhitelist(address,address)", medianizer, reader));\n', '    }\n', '\n', '    function setMedianWritersQuorum(address medianizer, uint256 minQuorum) internal {\n', '        libcall(abi.encodeWithSignature("setMedianWritersQuorum(address,uint256)", medianizer, minQuorum));\n', '    }\n', '\n', '    function addReaderToOSMWhitelist(address osm, address reader) internal {\n', '        libcall(abi.encodeWithSignature("addReaderToOSMWhitelist(address,address)", osm, reader));\n', '    }\n', '\n', '    function removeReaderFromOSMWhitelist(address osm, address reader) internal {\n', '        libcall(abi.encodeWithSignature("removeReaderFromOSMWhitelist(address,address)", osm, reader));\n', '    }\n', '\n', '    function allowOSMFreeze(address osm, bytes32 ilk) internal {\n', '        libcall(abi.encodeWithSignature("allowOSMFreeze(address,address,bytes32)", osmMom(), osm, ilk));\n', '    }\n', '\n', '    /*****************************/\n', '    /*** Collateral Onboarding ***/\n', '    /*****************************/\n', '\n', '    // Minimum actions to onboard a collateral to the system with 0 line.\n', '    function addCollateralBase(bytes32 ilk, address gem, address join, address flipper, address pip) internal {\n', '        libcall(abi.encodeWithSignature(\n', '            "addCollateralBase(address,address,address,address,address,address,bytes32,address,address,address,address)",\n', '            vat(), cat(), jug(), end(), spot(), reg(), ilk, gem, join, flipper, pip\n', '        ));\n', '    }\n', '\n', '    // Complete collateral onboarding logic.\n', '    function addNewCollateral(CollateralOpts memory co) internal {\n', '        // Add the collateral to the system.\n', '        addCollateralBase(co.ilk, co.gem, co.join, co.flip, co.pip);\n', '\n', '        // Allow FlipperMom to access to the ilk Flipper\n', '        authorize(co.flip, flipperMom());\n', '        // Disallow Cat to kick auctions in ilk Flipper\n', '        if(!co.isLiquidatable) deauthorize(flipperMom(), co.flip);\n', '\n', '        if(co.isOSM) { // If pip == OSM\n', '            // Allow OsmMom to access to the TOKEN OSM\n', '            authorize(co.pip, osmMom());\n', '            if (co.whitelistOSM) { // If median is src in OSM\n', '                // Whitelist OSM to read the Median data (only necessary if it is the first time the token is being added to an ilk)\n', '                addReaderToMedianWhitelist(address(OracleLike(co.pip).src()), co.pip);\n', '            }\n', '            // Whitelist Spotter to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            addReaderToOSMWhitelist(co.pip, spot());\n', '            // Whitelist End to read the OSM data (only necessary if it is the first time the token is being added to an ilk)\n', '            addReaderToOSMWhitelist(co.pip, end());\n', '            // Set TOKEN OSM in the OsmMom for new ilk\n', '            allowOSMFreeze(co.pip, co.ilk);\n', '        }\n', '        // Increase the global debt ceiling by the ilk ceiling\n', '        increaseGlobalDebtCeiling(co.ilkDebtCeiling);\n', '        // Set the ilk debt ceiling\n', '        setIlkDebtCeiling(co.ilk, co.ilkDebtCeiling);\n', '        // Set the ilk dust\n', '        setIlkMinVaultAmount(co.ilk, co.minVaultAmount);\n', '        // Set the dunk size\n', '        setIlkMaxLiquidationAmount(co.ilk, co.maxLiquidationAmount);\n', '        // Set the ilk liquidation penalty\n', '        setIlkLiquidationPenalty(co.ilk, co.liquidationPenalty);\n', '\n', '        // Set the ilk stability fee\n', '        setIlkStabilityFee(co.ilk, co.ilkStabilityFee);\n', '\n', '        // Set the ilk percentage between bids\n', '        setIlkMinAuctionBidIncrease(co.ilk, co.bidIncrease);\n', '        // Set the ilk time max time between bids\n', '        setIlkBidDuration(co.ilk, co.bidDuration);\n', '        // Set the ilk max auction duration\n', '        setIlkAuctionDuration(co.ilk, co.auctionDuration);\n', '        // Set the ilk min collateralization ratio\n', '        setIlkLiquidationRatio(co.ilk, co.liquidationRatio);\n', '\n', '        // Update ilk spot value in Vat\n', '        updateCollateralPrice(co.ilk);\n', '    }\n', '}\n', '\n', '////// lib/dss-exec-lib/src/DssExec.sol\n', '//\n', '// DssExec.sol -- MakerDAO Executive Spell Template\n', '//\n', '// Copyright (C) 2020 Maker Ecosystem Growth Holdings, Inc.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '\n', '/* pragma solidity ^0.6.11; */\n', '\n', 'interface PauseAbstract {\n', '    function delay() external view returns (uint256);\n', '    function plot(address, bytes32, bytes calldata, uint256) external;\n', '    function exec(address, bytes32, bytes calldata, uint256) external returns (bytes memory);\n', '}\n', '\n', 'interface Changelog {\n', '    function getAddress(bytes32) external view returns (address);\n', '}\n', '\n', 'interface SpellAction {\n', '    function officeHours() external view returns (bool);\n', '}\n', '\n', 'contract DssExec {\n', '\n', '    Changelog      constant public log   = Changelog(0xdA0Ab1e0017DEbCd72Be8599041a2aa3bA7e740F);\n', '    uint256                 public eta;\n', '    bytes                   public sig;\n', '    bool                    public done;\n', '    bytes32       immutable public tag;\n', '    address       immutable public action;\n', '    uint256       immutable public expiration;\n', '    PauseAbstract immutable public pause;\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://<executive-vote-canonical-post> -q -O - 2>/dev/null)"\n', '    string                  public description;\n', '\n', '    function officeHours() external view returns (bool) {\n', '        return SpellAction(action).officeHours();\n', '    }\n', '\n', '    function nextCastTime() external view returns (uint256 castTime) {\n', '        require(eta != 0, "DssExec/spell-not-scheduled");\n', '        castTime = block.timestamp > eta ? block.timestamp : eta; // Any day at XX:YY\n', '\n', '        if (SpellAction(action).officeHours()) {\n', '            uint256 day    = (castTime / 1 days + 3) % 7;\n', '            uint256 hour   = castTime / 1 hours % 24;\n', '            uint256 minute = castTime / 1 minutes % 60;\n', '            uint256 second = castTime % 60;\n', '\n', '            if (day >= 5) {\n', '                castTime += (6 - day) * 1 days;                 // Go to Sunday XX:YY\n', '                castTime += (24 - hour + 14) * 1 hours;         // Go to 14:YY UTC Monday\n', '                castTime -= minute * 1 minutes + second;        // Go to 14:00 UTC\n', '            } else {\n', '                if (hour >= 21) {\n', '                    if (day == 4) castTime += 2 days;           // If Friday, fast forward to Sunday XX:YY\n', '                    castTime += (24 - hour + 14) * 1 hours;     // Go to 14:YY UTC next day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                } else if (hour < 14) {\n', '                    castTime += (14 - hour) * 1 hours;          // Go to 14:YY UTC same day\n', '                    castTime -= minute * 1 minutes + second;    // Go to 14:00 UTC\n', '                }\n', '            }\n', '        }\n', '    }\n', '\n', '    // @param _description  A string description of the spell\n', '    // @param _expiration   The timestamp this spell will expire. (Ex. now + 30 days)\n', '    // @param _spellAction  The address of the spell action\n', '    constructor(string memory _description, uint256 _expiration, address _spellAction) public {\n', '        pause       = PauseAbstract(log.getAddress("MCD_PAUSE"));\n', '        description = _description;\n', '        expiration  = _expiration;\n', '        action      = _spellAction;\n', '\n', '        sig = abi.encodeWithSignature("execute()");\n', '        bytes32 _tag;                    // Required for assembly access\n', '        address _action = _spellAction;  // Required for assembly access\n', '        assembly { _tag := extcodehash(_action) }\n', '        tag = _tag;\n', '    }\n', '\n', '    function schedule() public {\n', '        require(now <= expiration, "This contract has expired");\n', '        require(eta == 0, "This spell has already been scheduled");\n', '        eta = now + PauseAbstract(pause).delay();\n', '        pause.plot(action, tag, sig, eta);\n', '    }\n', '\n', '    function cast() public {\n', '        require(!done, "spell-already-cast");\n', '        done = true;\n', '        pause.exec(action, tag, sig, eta);\n', '    }\n', '}\n', '\n', '////// src/DssSpell.sol\n', '// Copyright (C) 2021 Maker Ecosystem Growth Holdings, INC.\n', '//\n', '// This program is free software: you can redistribute it and/or modify\n', '// it under the terms of the GNU Affero General Public License as published by\n', '// the Free Software Foundation, either version 3 of the License, or\n', '// (at your option) any later version.\n', '//\n', '// This program is distributed in the hope that it will be useful,\n', '// but WITHOUT ANY WARRANTY; without even the implied warranty of\n', '// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n', '// GNU Affero General Public License for more details.\n', '//\n', '// You should have received a copy of the GNU Affero General Public License\n', '// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n', '/* pragma solidity 0.6.11; */\n', '\n', '/* import "dss-exec-lib/DssExec.sol"; */\n', '/* import "dss-exec-lib/DssAction.sol"; */\n', '\n', 'interface ChainlogAbstract_2 {\n', '    function removeAddress(bytes32) external;\n', '}\n', '\n', 'interface LPOracle {\n', '    function orb0() external view returns (address);\n', '    function orb1() external view returns (address);\n', '}\n', '\n', 'contract DssSpellAction is DssAction {\n', '\n', '    // Provides a descriptive tag for bot consumption\n', '    // This should be modified weekly to provide a summary of the actions\n', '    // Hash: seth keccak -- "$(wget https://raw.githubusercontent.com/makerdao/community/2d433f95cc980092aeba21dd7ed431809160f021/governance/votes/Executive%20vote%20-%20February%205%2C%202021.md -q -O - 2>/dev/null)"\n', '    string public constant description =\n', '        "2021-02-05 MakerDAO Executive Spell | Hash: 0xcd8106c161924820ee7f4061218e474b4f3eda29564957cf02e9b88bb96534e1";\n', '\n', '\n', '    // Many of the settings that change weekly rely on the rate accumulator\n', '    // described at https://docs.makerdao.com/smart-contract-modules/rates-module\n', '    // To check this yourself, use the following rate calculation (example 8%):\n', '    //\n', "    // $ bc -l <<< 'scale=27; e( l(1.08)/(60 * 60 * 24 * 365) )'\n", '    //\n', '    // A table of rates can be found at\n', '    //    https://ipfs.io/ipfs/QmefQMseb3AiTapiAKKexdKHig8wroKuZbmLtPLv4u2YwW\n', '    //\n', '    uint256 constant THREE_PCT = 1000000000937303470807876289;\n', '    uint256 constant FOUR_PCT  = 1000000001243680656318820312;\n', '\n', '    /**\n', '        @dev constructor (required)\n', '        @param lib         address of the DssExecLib contract\n', '        @param officeHours true if officehours enabled\n', '    */\n', '    constructor(address lib, bool officeHours) public DssAction(lib, officeHours) {}\n', '\n', '    uint256 constant MILLION = 10**6;\n', '\n', '    address constant UNIV2DAIUSDC_GEM   = 0xAE461cA67B15dc8dc81CE7615e0320dA1A9aB8D5;\n', '    address constant UNIV2DAIUSDC_JOIN  = 0xA81598667AC561986b70ae11bBE2dd5348ed4327;\n', '    address constant UNIV2DAIUSDC_FLIP  = 0x4a613f79a250D522DdB53904D87b8f442EA94496;\n', '    address constant UNIV2DAIUSDC_PIP   = 0x25CD858a00146961611b18441353603191f110A0;\n', '\n', '    address constant UNIV2ETHUSDT_GEM   = 0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852;\n', '    address constant UNIV2ETHUSDT_JOIN  = 0x4aAD139a88D2dd5e7410b408593208523a3a891d;\n', '    address constant UNIV2ETHUSDT_FLIP  = 0x118d5051e70F9EaF3B4a6a11F765185A2Ca0802E;\n', '    address constant UNIV2ETHUSDT_PIP   = 0x9b015AA3e4787dd0df8B43bF2FE6d90fa543E13B;\n', '\n', '    function actions() public override {\n', '        // add UNI-V2-DAI-USDC-A collateral type\n', '        CollateralOpts memory UNIV2DAIUSDC_A = CollateralOpts({\n', '            ilk: "UNIV2DAIUSDC-A",\n', '            gem: UNIV2DAIUSDC_GEM,\n', '            join: UNIV2DAIUSDC_JOIN,\n', '            flip: UNIV2DAIUSDC_FLIP,\n', '            pip: UNIV2DAIUSDC_PIP,\n', '            isLiquidatable: false,\n', '            isOSM: true,\n', '            whitelistOSM: false,\n', '            ilkDebtCeiling: 3 * MILLION, // initially 3 million\n', '            minVaultAmount: 2000,\n', '            maxLiquidationAmount: 50000,\n', '            liquidationPenalty: 1300,\n', '            ilkStabilityFee: THREE_PCT, // 3%\n', '            bidIncrease: 300, // 3%\n', '            bidDuration: 6 hours,\n', '            auctionDuration: 6 hours,\n', '            liquidationRatio: 11000 // 110%\n', '        });\n', '        addNewCollateral(UNIV2DAIUSDC_A);\n', '\n', '\n', '        // LP oracle needs to be whitelisted on medianizers\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2ETHUSDT_PIP).orb0(),\n', '            UNIV2ETHUSDT_PIP\n', '        );\n', '        addReaderToMedianWhitelist(\n', '            LPOracle(UNIV2ETHUSDT_PIP).orb1(),\n', '            UNIV2ETHUSDT_PIP\n', '        );\n', '\n', '        // add UNI-V2-ETH-USDT-A collateral type\n', '        CollateralOpts memory UNIV2ETHUSDT_A = CollateralOpts({\n', '            ilk: "UNIV2ETHUSDT-A",\n', '            gem: UNIV2ETHUSDT_GEM,\n', '            join: UNIV2ETHUSDT_JOIN,\n', '            flip: UNIV2ETHUSDT_FLIP,\n', '            pip: UNIV2ETHUSDT_PIP,\n', '            isLiquidatable: true,\n', '            isOSM: true,\n', '            whitelistOSM: false,\n', '            ilkDebtCeiling: 3 * MILLION, // initially 3 million\n', '            minVaultAmount: 2000,\n', '            maxLiquidationAmount: 50000,\n', '            liquidationPenalty: 1300,\n', '            ilkStabilityFee: FOUR_PCT, // 4%\n', '            bidIncrease: 300, // 3%\n', '            bidDuration: 6 hours,\n', '            auctionDuration: 6 hours,\n', '            liquidationRatio: 14000 // 140%\n', '        });\n', '        addNewCollateral(UNIV2ETHUSDT_A);\n', '\n', '        // Faucet is currently set to zero address in Changelog.\n', "        //   We're cleaning it up this week and removing it from the list.\n", '        ChainlogAbstract_2(LOG).removeAddress("FAUCET");\n', '\n', '        // add UNIV2DAIUSDC to Changelog\n', '        setChangelogAddress("UNIV2DAIUSDC",             UNIV2DAIUSDC_GEM);\n', '        setChangelogAddress("MCD_JOIN_UNIV2DAIUSDC_A",  UNIV2DAIUSDC_JOIN);\n', '        setChangelogAddress("MCD_FLIP_UNIV2DAIUSDC_A",  UNIV2DAIUSDC_FLIP);\n', '        setChangelogAddress("PIP_UNIV2DAIUSDC",         UNIV2DAIUSDC_PIP);\n', '\n', '        // add UNIV2ETHUSDT to Changelog\n', '        setChangelogAddress("UNIV2ETHUSDT",             UNIV2ETHUSDT_GEM);\n', '        setChangelogAddress("MCD_JOIN_UNIV2ETHUSDT_A",  UNIV2ETHUSDT_JOIN);\n', '        setChangelogAddress("MCD_FLIP_UNIV2ETHUSDT_A",  UNIV2ETHUSDT_FLIP);\n', '        setChangelogAddress("PIP_UNIV2ETHUSDT",         UNIV2ETHUSDT_PIP);\n', '\n', '        // bump Changelog version\n', '        setChangelogVersion("1.2.5");\n', '    }\n', '}\n', '\n', 'contract DssSpell is DssExec {\n', '    address public constant LIB = 0x5b2867E4537DC4e10B2876E91bF693a6E6A768B3; // v0.0.3\n', '    DssSpellAction public spell = new DssSpellAction(LIB, true);\n', '    constructor() DssExec(spell.description(), now + 30 days, address(spell)) public {}\n', '}']