['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-13\n', '*/\n', '\n', '// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP. Does not include\n', ' * the optional functions; to access them see {ERC20Detailed}.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// File: interfaces/IVAILockup.sol\n', '\n', 'pragma solidity >=0.4.24;\n', '\n', 'interface IVAILockup {\n', '\n', '    function beneficiaryCurrentAmount(address beneficiary) external view returns (uint256);\n', '\n', '    function stake(address beneficiary, uint256 stakeAmount) external;\n', '\n', '    function unstake(address beneficiary, uint256 stakeAmount, uint256 rewardsAmount) external;\n', '}\n', '\n', '// File: @openzeppelin/contracts/utils/Address.sol\n', '\n', 'pragma solidity ^0.5.5;\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following \n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', '     * @dev Converts an `address` into `address payable`. Note that this is\n', '     * simply a type cast: the actual underlying value is not changed.\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function toPayable(address account) internal pure returns (address payable) {\n', '        return address(uint160(account));\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     *\n', '     * _Available since v2.4.0._\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-call-value\n', '        (bool success, ) = recipient.call.value(amount)("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/GSN/Context.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/*\n', ' * @dev Provides information about the current execution context, including the\n', ' * sender of the transaction and its data. While these are generally available\n', ' * via msg.sender and msg.data, they should not be accessed in such a direct\n', ' * manner, since when dealing with GSN meta-transactions the account sending and\n', ' * paying for execution may not be the actual sender (as far as an application\n', ' * is concerned).\n', ' *\n', ' * This contract is only required for intermediate, library-like contracts.\n', ' */\n', 'contract Context {\n', '    // Empty internal constructor, to prevent people from mistakenly deploying\n', '    // an instance of this contract, which should be used via inheritance.\n', '    constructor () internal { }\n', '    // solhint-disable-previous-line no-empty-blocks\n', '\n', '    function _msgSender() internal view returns (address payable) {\n', '        return msg.sender;\n', '    }\n', '\n', '    function _msgData() internal view returns (bytes memory) {\n', '        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n', '        return msg.data;\n', '    }\n', '}\n', '\n', '// File: @openzeppelin/contracts/ownership/Ownable.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '/**\n', ' * @dev Contract module which provides a basic access control mechanism, where\n', ' * there is an account (an owner) that can be granted exclusive access to\n', ' * specific functions.\n', ' *\n', ' * This module is used through inheritance. It will make available the modifier\n', ' * `onlyOwner`, which can be applied to your functions to restrict their use to\n', ' * the owner.\n', ' */\n', 'contract Ownable is Context {\n', '    address private _owner;\n', '\n', '    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n', '\n', '    /**\n', '     * @dev Initializes the contract setting the deployer as the initial owner.\n', '     */\n', '    constructor () internal {\n', '        address msgSender = _msgSender();\n', '        _owner = msgSender;\n', '        emit OwnershipTransferred(address(0), msgSender);\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the address of the current owner.\n', '     */\n', '    function owner() public view returns (address) {\n', '        return _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Throws if called by any account other than the owner.\n', '     */\n', '    modifier onlyOwner() {\n', '        require(isOwner(), "Ownable: caller is not the owner");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns true if the caller is the current owner.\n', '     */\n', '    function isOwner() public view returns (bool) {\n', '        return _msgSender() == _owner;\n', '    }\n', '\n', '    /**\n', '     * @dev Leaves the contract without owner. It will not be possible to call\n', '     * `onlyOwner` functions anymore. Can only be called by the current owner.\n', '     *\n', '     * NOTE: Renouncing ownership will leave the contract without an owner,\n', '     * thereby removing any functionality that is only available to the owner.\n', '     */\n', '    function renounceOwnership() public onlyOwner {\n', '        emit OwnershipTransferred(_owner, address(0));\n', '        _owner = address(0);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     * Can only be called by the current owner.\n', '     */\n', '    function transferOwnership(address newOwner) public onlyOwner {\n', '        _transferOwnership(newOwner);\n', '    }\n', '\n', '    /**\n', '     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n', '     */\n', '    function _transferOwnership(address newOwner) internal {\n', '        require(newOwner != address(0), "Ownable: new owner is the zero address");\n', '        emit OwnershipTransferred(_owner, newOwner);\n', '        _owner = newOwner;\n', '    }\n', '}\n', '\n', '// File: contracts/VAILockup.sol\n', '\n', 'pragma solidity ^0.5.0;\n', '\n', '\n', '\n', '\n', '\n', 'contract VAILockup is IVAILockup, Ownable {\n', '\n', '    // EVENTS\n', '    event TokensLocked(address indexed account, uint256 amount);\n', '    event TokensUnlocked(address indexed account, uint256 amount);\n', '    event TokensStaked(address indexed account, uint256 stakeAmount);\n', '    event TokensUnstaked(address indexed account, uint256 stakeAmount, uint256 rewardsAmount);\n', '    event StakingAddressSet(address indexed account);\n', '    event StartTimeSet(uint256 startTime);\n', '\n', '    using Address for address;\n', '\n', '    IERC20 private _token;\n', '\n', '    struct Lockup {\n', '        address beneficiary;\n', '        uint256 initialAmount;\n', '        uint256 currentAmount;\n', '        uint256 rewardsAmount;\n', '        uint256 partsLeft;\n', '        bool stake;\n', '    }\n', '\n', '    uint256 public interval;\n', '    uint256 public startTime;\n', '    uint256 public numberOfParts; \n', '\n', '    Lockup[] private _lockups;\n', '\n', '    mapping (address => uint) private _beneficiaryToLockup;\n', '\n', '    address private _excessRecipient;\n', '\n', '    address private _stakingAddress;\n', '\n', '    constructor (address token_, uint256 interval_, uint256 numberOfParts_)\n', '    onlyContract(token_)\n', '    Ownable()\n', '    public {\n', '        _token = IERC20(token_);\n', '        interval = interval_;\n', '        numberOfParts = numberOfParts_;\n', '        _lockups.push(Lockup(address(0), 0, 0, 0, 0, false));\n', '    }\n', '\n', '    modifier onlyStaking() {\n', '        require(msg.sender == _stakingAddress, "[Validation] This address is not staking address");\n', '        _;\n', '    }\n', '\n', '     modifier onlyContract(address account)\n', '    {\n', '        require(account.isContract(), "[Validation] The address does not contain a contract");\n', '        _;\n', '    }\n', '\n', '    modifier onlyAfterSettingStakingAddress() {\n', '        require(_stakingAddress != address(0), "[Validation] The staking address is not set");\n', '        _;\n', '    }\n', '\n', '    modifier onlyWhenStartTimeIsNotSet() {\n', '        require(startTime == 0, "[Validation] Start time has been set already");\n', '        _;\n', '    }\n', '\n', '    /**\n', '     * @return the token being held.\n', '     */\n', '    function token() public view returns (IERC20) {\n', '        return _token;\n', '    }\n', '\n', '    /**\n', '     * @return the the lockup amount for the beneficiary.\n', '     */\n', '    function beneficiaryCurrentAmount(address beneficiary) public view returns (uint256) {\n', '        return _lockups[_beneficiaryToLockup[beneficiary]].currentAmount;\n', '    }\n', '\n', '    function lock(address beneficiary, uint256 amount) public {\n', '        require((amount % numberOfParts) == uint256(0), "The amount must be divisible by the number of parts");\n', '       \n', '        uint lockupIndex = _lockups.push(Lockup(beneficiary, amount, amount, 0, numberOfParts, false)) - 1;\n', '        _beneficiaryToLockup[beneficiary] = lockupIndex;\n', '\n', '        require(token().transferFrom(msg.sender, address(this), amount), "Something went wrong during the token transfer");\n', '        emit TokensLocked(beneficiary, amount);\n', '    }\n', '\n', '    function unlock(address beneficiary) public {\n', '        Lockup storage lockup = _lockups[_beneficiaryToLockup[beneficiary]];\n', '\n', '        require(lockup.stake == false, "Lockup amount is staked");\n', '        require(lockup.partsLeft > 0, "Lockup already unlocked");\n', '        require(now >= (startTime + (interval * 1 days * (numberOfParts - lockup.partsLeft + 1))), "Not enough days passed");\n', '        uint256 tokensToUnlock = lockup.initialAmount / numberOfParts + lockup.rewardsAmount;\n', '        require(token().transfer(beneficiary, tokensToUnlock), "Something went wrong during the token transfer");\n', '        \n', '        lockup.partsLeft -= 1;\n', '        lockup.rewardsAmount = 0;\n', '        lockup.currentAmount -= lockup.initialAmount / numberOfParts;\n', '        emit TokensUnlocked(beneficiary, tokensToUnlock);\n', '    }\n', '\n', '    function setStakingAddress(address staking) \n', '    onlyOwner\n', '    public {\n', '        _stakingAddress = staking;\n', '        token().approve(staking, token().totalSupply());\n', '        emit StakingAddressSet(staking);\n', '    }\n', '\n', '    function setStartTime(uint256 startTime_)\n', '    onlyOwner\n', '    onlyWhenStartTimeIsNotSet\n', '    public {\n', '        startTime = startTime_;\n', '        emit StartTimeSet(startTime);\n', '    }\n', '\n', '    function stake(address beneficiary, uint256 stakeAmount)\n', '    public\n', '    onlyAfterSettingStakingAddress\n', '    onlyStaking\n', '    {\n', '        Lockup storage lockup = _lockups[_beneficiaryToLockup[beneficiary]];\n', '        lockup.stake = true;\n', '        lockup.currentAmount -= stakeAmount;\n', '        emit TokensStaked(beneficiary, stakeAmount);\n', '    }\n', '\n', '    function unstake(address beneficiary, uint256 stakeAmount, uint256 rewardsAmount)\n', '    public\n', '    onlyAfterSettingStakingAddress\n', '    onlyStaking\n', '    {\n', '        Lockup storage lockup = _lockups[_beneficiaryToLockup[beneficiary]];\n', '        lockup.stake = false;\n', '        lockup.currentAmount += stakeAmount;\n', '        lockup.rewardsAmount += rewardsAmount;\n', '        emit TokensUnstaked(beneficiary, stakeAmount, rewardsAmount);\n', '    }\n', '}']