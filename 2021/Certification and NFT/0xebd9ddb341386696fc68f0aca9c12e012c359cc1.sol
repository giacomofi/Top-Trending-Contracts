['/**\n', ' *Submitted for verification at Etherscan.io on 2021-03-12\n', '*/\n', '\n', '// SPDX-License-Identifier: GPL-3.0\n', '\n', 'pragma solidity 0.6.12;\n', 'pragma experimental ABIEncoderV2;\n', '\n', '// Global Enums and Structs\n', '\n', '\n', '\n', 'struct StrategyParams {\n', '    uint256 performanceFee;\n', '    uint256 activation;\n', '    uint256 debtRatio;\n', '    uint256 minDebtPerHarvest;\n', '    uint256 maxDebtPerHarvest;\n', '    uint256 lastReport;\n', '    uint256 totalDebt;\n', '    uint256 totalGain;\n', '    uint256 totalLoss;\n', '}\n', '\n', '// Part: IBaseStrategy\n', '\n', 'interface IBaseStrategy {\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function name() external pure returns (string memory);\n', '\n', '    function vault() external view returns (address);\n', '\n', '    function keeper() external view returns (address);\n', '\n', '    function tendTrigger(uint256 callCost) external view returns (bool);\n', '\n', '    function tend() external;\n', '\n', '    function harvestTrigger(uint256 callCost) external view returns (bool);\n', '\n', '    function harvest() external;\n', '\n', '    function strategist() external view returns (address);\n', '}\n', '\n', '// Part: IGenericLender\n', '\n', 'interface IGenericLender {\n', '    function lenderName() external view returns (string memory);\n', '\n', '    function nav() external view returns (uint256);\n', '\n', '    function strategy() external view returns (address);\n', '\n', '    function apr() external view returns (uint256);\n', '\n', '    function weightedApr() external view returns (uint256);\n', '\n', '    function withdraw(uint256 amount) external returns (uint256);\n', '\n', '    function emergencyWithdraw(uint256 amount) external;\n', '\n', '    function deposit() external;\n', '\n', '    function withdrawAll() external returns (bool);\n', '\n', '    function hasAssets() external view returns (bool);\n', '\n', '    function aprAfterDeposit(uint256 amount) external view returns (uint256);\n', '\n', '    function setDust(uint256 _dust) external;\n', '\n', '    function sweep(address _token) external;\n', '}\n', '\n', '// Part: ILendingPoolAddressesProvider\n', '\n', '/**\n', ' * @title LendingPoolAddressesProvider contract\n', ' * @dev Main registry of addresses part of or connected to the protocol, including permissioned roles\n', ' * - Acting also as factory of proxies and admin of those, so with right to change its implementations\n', ' * - Owned by the Aave Governance\n', ' * @author Aave\n', ' **/\n', 'interface ILendingPoolAddressesProvider {\n', '    event MarketIdSet(string newMarketId);\n', '    event LendingPoolUpdated(address indexed newAddress);\n', '    event ConfigurationAdminUpdated(address indexed newAddress);\n', '    event EmergencyAdminUpdated(address indexed newAddress);\n', '    event LendingPoolConfiguratorUpdated(address indexed newAddress);\n', '    event LendingPoolCollateralManagerUpdated(address indexed newAddress);\n', '    event PriceOracleUpdated(address indexed newAddress);\n', '    event LendingRateOracleUpdated(address indexed newAddress);\n', '    event ProxyCreated(bytes32 id, address indexed newAddress);\n', '    event AddressSet(bytes32 id, address indexed newAddress, bool hasProxy);\n', '\n', '    function getMarketId() external view returns (string memory);\n', '\n', '    function setMarketId(string calldata marketId) external;\n', '\n', '    function setAddress(bytes32 id, address newAddress) external;\n', '\n', '    function setAddressAsProxy(bytes32 id, address impl) external;\n', '\n', '    function getAddress(bytes32 id) external view returns (address);\n', '\n', '    function getLendingPool() external view returns (address);\n', '\n', '    function setLendingPoolImpl(address pool) external;\n', '\n', '    function getLendingPoolConfigurator() external view returns (address);\n', '\n', '    function setLendingPoolConfiguratorImpl(address configurator) external;\n', '\n', '    function getLendingPoolCollateralManager() external view returns (address);\n', '\n', '    function setLendingPoolCollateralManager(address manager) external;\n', '\n', '    function getPoolAdmin() external view returns (address);\n', '\n', '    function setPoolAdmin(address admin) external;\n', '\n', '    function getEmergencyAdmin() external view returns (address);\n', '\n', '    function setEmergencyAdmin(address admin) external;\n', '\n', '    function getPriceOracle() external view returns (address);\n', '\n', '    function setPriceOracle(address priceOracle) external;\n', '\n', '    function getLendingRateOracle() external view returns (address);\n', '\n', '    function setLendingRateOracle(address lendingRateOracle) external;\n', '}\n', '\n', '// Part: IReserveInterestRateStrategy\n', '\n', '/**\n', ' * @title IReserveInterestRateStrategyInterface interface\n', ' * @dev Interface for the calculation of the interest rates\n', ' * @author Aave\n', ' */\n', 'interface IReserveInterestRateStrategy {\n', '    function baseVariableBorrowRate() external view returns (uint256);\n', '\n', '    function getMaxVariableBorrowRate() external view returns (uint256);\n', '\n', '    function calculateInterestRates(\n', '        address reserve,\n', '        uint256 utilizationRate,\n', '        uint256 totalStableDebt,\n', '        uint256 totalVariableDebt,\n', '        uint256 averageStableBorrowRate,\n', '        uint256 reserveFactor\n', '    )\n', '        external\n', '        view\n', '        returns (\n', '            uint256 liquidityRate,\n', '            uint256 stableBorrowRate,\n', '            uint256 variableBorrowRate\n', '        );\n', '}\n', '\n', '// Part: IScaledBalanceToken\n', '\n', 'interface IScaledBalanceToken {\n', '    /**\n', '     * @dev Returns the scaled balance of the user. The scaled balance is the sum of all the\n', "     * updated stored balance divided by the reserve's liquidity index at the moment of the update\n", '     * @param user The user whose balance is calculated\n', '     * @return The scaled balance of the user\n', '     **/\n', '    function scaledBalanceOf(address user) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the scaled balance of the user and the scaled total supply.\n', '     * @param user The address of the user\n', '     * @return The scaled balance of the user\n', '     * @return The scaled balance and the scaled total supply\n', '     **/\n', '    function getScaledUserBalanceAndSupply(address user) external view returns (uint256, uint256);\n', '\n', '    /**\n', '     * @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index)\n', '     * @return The scaled total supply\n', '     **/\n', '    function scaledTotalSupply() external view returns (uint256);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/Address\n', '\n', '/**\n', ' * @dev Collection of functions related to the address type\n', ' */\n', 'library Address {\n', '    /**\n', '     * @dev Returns true if `account` is a contract.\n', '     *\n', '     * [IMPORTANT]\n', '     * ====\n', '     * It is unsafe to assume that an address for which this function returns\n', '     * false is an externally-owned account (EOA) and not a contract.\n', '     *\n', '     * Among others, `isContract` will return false for the following\n', '     * types of addresses:\n', '     *\n', '     *  - an externally-owned account\n', '     *  - a contract in construction\n', '     *  - an address where a contract will be created\n', '     *  - an address where a contract lived, but was destroyed\n', '     * ====\n', '     */\n', '    function isContract(address account) internal view returns (bool) {\n', '        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n', '        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n', "        // for accounts without code, i.e. `keccak256('')`\n", '        bytes32 codehash;\n', '        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n', '        // solhint-disable-next-line no-inline-assembly\n', '        assembly { codehash := extcodehash(account) }\n', '        return (codehash != accountHash && codehash != 0x0);\n', '    }\n', '\n', '    /**\n', "     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n", '     * `recipient`, forwarding all available gas and reverting on errors.\n', '     *\n', '     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n', '     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n', '     * imposed by `transfer`, making them unable to receive funds via\n', '     * `transfer`. {sendValue} removes this limitation.\n', '     *\n', '     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n', '     *\n', '     * IMPORTANT: because control is transferred to `recipient`, care must be\n', '     * taken to not create reentrancy vulnerabilities. Consider using\n', '     * {ReentrancyGuard} or the\n', '     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n', '     */\n', '    function sendValue(address payable recipient, uint256 amount) internal {\n', '        require(address(this).balance >= amount, "Address: insufficient balance");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n', '        (bool success, ) = recipient.call{ value: amount }("");\n', '        require(success, "Address: unable to send value, recipient may have reverted");\n', '    }\n', '\n', '    /**\n', '     * @dev Performs a Solidity function call using a low level `call`. A\n', '     * plain`call` is an unsafe replacement for a function call: use this\n', '     * function instead.\n', '     *\n', '     * If `target` reverts with a revert reason, it is bubbled up by this\n', '     * function (like regular Solidity function calls).\n', '     *\n', '     * Returns the raw returned data. To convert to the expected return value,\n', '     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - `target` must be a contract.\n', '     * - calling `target` with `data` must not revert.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n', '      return functionCall(target, data, "Address: low-level call failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n', '     * `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n', '        return _functionCallWithValue(target, data, 0, errorMessage);\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n', '     * but also transferring `value` wei to `target`.\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - the calling contract must have an ETH balance of at least `value`.\n', '     * - the called Solidity function must be `payable`.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n', '        return functionCallWithValue(target, data, value, "Address: low-level call with value failed");\n', '    }\n', '\n', '    /**\n', '     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n', '     * with `errorMessage` as a fallback revert reason when `target` reverts.\n', '     *\n', '     * _Available since v3.1._\n', '     */\n', '    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n', '        require(address(this).balance >= value, "Address: insufficient balance for call");\n', '        return _functionCallWithValue(target, data, value, errorMessage);\n', '    }\n', '\n', '    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n', '        require(isContract(target), "Address: call to non-contract");\n', '\n', '        // solhint-disable-next-line avoid-low-level-calls\n', '        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n', '        if (success) {\n', '            return returndata;\n', '        } else {\n', '            // Look for revert reason and bubble it up if present\n', '            if (returndata.length > 0) {\n', '                // The easiest way to bubble the revert reason is using memory via assembly\n', '\n', '                // solhint-disable-next-line no-inline-assembly\n', '                assembly {\n', '                    let returndata_size := mload(returndata)\n', '                    revert(add(32, returndata), returndata_size)\n', '                }\n', '            } else {\n', '                revert(errorMessage);\n', '            }\n', '        }\n', '    }\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/IERC20\n', '\n', '/**\n', ' * @dev Interface of the ERC20 standard as defined in the EIP.\n', ' */\n', 'interface IERC20 {\n', '    /**\n', '     * @dev Returns the amount of tokens in existence.\n', '     */\n', '    function totalSupply() external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the amount of tokens owned by `account`.\n', '     */\n', '    function balanceOf(address account) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transfer(address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Returns the remaining number of tokens that `spender` will be\n', '     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n', '     * zero by default.\n', '     *\n', '     * This value changes when {approve} or {transferFrom} are called.\n', '     */\n', '    function allowance(address owner, address spender) external view returns (uint256);\n', '\n', '    /**\n', "     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n", '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n', '     * that someone may use both the old and the new allowance by unfortunate\n', '     * transaction ordering. One possible solution to mitigate this race\n', "     * condition is to first reduce the spender's allowance to 0 and set the\n", '     * desired value afterwards:\n', '     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n', '     *\n', '     * Emits an {Approval} event.\n', '     */\n', '    function approve(address spender, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n', "     * allowance mechanism. `amount` is then deducted from the caller's\n", '     * allowance.\n', '     *\n', '     * Returns a boolean value indicating whether the operation succeeded.\n', '     *\n', '     * Emits a {Transfer} event.\n', '     */\n', '    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n', '     * another (`to`).\n', '     *\n', '     * Note that `value` may be zero.\n', '     */\n', '    event Transfer(address indexed from, address indexed to, uint256 value);\n', '\n', '    /**\n', '     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n', '     * a call to {approve}. `value` is the new allowance.\n', '     */\n', '    event Approval(address indexed owner, address indexed spender, uint256 value);\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeMath\n', '\n', '/**\n', " * @dev Wrappers over Solidity's arithmetic operations with added overflow\n", ' * checks.\n', ' *\n', ' * Arithmetic operations in Solidity wrap on overflow. This can easily result\n', ' * in bugs, because programmers usually assume that an overflow raises an\n', ' * error, which is the standard behavior in high level programming languages.\n', ' * `SafeMath` restores this intuition by reverting the transaction when an\n', ' * operation overflows.\n', ' *\n', ' * Using this library instead of the unchecked operations eliminates an entire\n', " * class of bugs, so it's recommended to use it always.\n", ' */\n', 'library SafeMath {\n', '    /**\n', '     * @dev Returns the addition of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `+` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Addition cannot overflow.\n', '     */\n', '    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        uint256 c = a + b;\n', '        require(c >= a, "SafeMath: addition overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return sub(a, b, "SafeMath: subtraction overflow");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n', '     * overflow (when the result is negative).\n', '     *\n', "     * Counterpart to Solidity's `-` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Subtraction cannot overflow.\n', '     */\n', '    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b <= a, errorMessage);\n', '        uint256 c = a - b;\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the multiplication of two unsigned integers, reverting on\n', '     * overflow.\n', '     *\n', "     * Counterpart to Solidity's `*` operator.\n", '     *\n', '     * Requirements:\n', '     *\n', '     * - Multiplication cannot overflow.\n', '     */\n', '    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n', "        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n", "        // benefit is lost if 'b' is also tested.\n", '        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n', '        if (a == 0) {\n', '            return 0;\n', '        }\n', '\n', '        uint256 c = a * b;\n', '        require(c / a == b, "SafeMath: multiplication overflow");\n', '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return div(a, b, "SafeMath: division by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n', '     * division by zero. The result is rounded towards zero.\n', '     *\n', "     * Counterpart to Solidity's `/` operator. Note: this function uses a\n", '     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n', '     * uses an invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b > 0, errorMessage);\n', '        uint256 c = a / b;\n', "        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n", '\n', '        return c;\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n', '        return mod(a, b, "SafeMath: modulo by zero");\n', '    }\n', '\n', '    /**\n', '     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n', '     * Reverts with custom message when dividing by zero.\n', '     *\n', "     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n", '     * opcode (which leaves remaining gas untouched) while Solidity uses an\n', '     * invalid opcode to revert (consuming all remaining gas).\n', '     *\n', '     * Requirements:\n', '     *\n', '     * - The divisor cannot be zero.\n', '     */\n', '    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n', '        require(b != 0, errorMessage);\n', '        return a % b;\n', '    }\n', '}\n', '\n', '// Part: IAToken\n', '\n', 'interface IAToken is IERC20, IScaledBalanceToken {\n', '    /**\n', '     * @dev Emitted after the mint action\n', '     * @param from The address performing the mint\n', '     * @param value The amount being\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event Mint(address indexed from, uint256 value, uint256 index);\n', '\n', '    /**\n', '     * @dev Mints `amount` aTokens to `user`\n', '     * @param user The address receiving the minted tokens\n', '     * @param amount The amount of tokens getting minted\n', '     * @param index The new liquidity index of the reserve\n', '     * @return `true` if the the previous balance of the user was 0\n', '     */\n', '    function mint(\n', '        address user,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external returns (bool);\n', '\n', '    /**\n', '     * @dev Emitted after aTokens are burned\n', '     * @param from The owner of the aTokens, getting them burned\n', '     * @param target The address that will receive the underlying\n', '     * @param value The amount being burned\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event Burn(address indexed from, address indexed target, uint256 value, uint256 index);\n', '\n', '    /**\n', '     * @dev Emitted during the transfer action\n', '     * @param from The user whose tokens are being transferred\n', '     * @param to The recipient\n', '     * @param value The amount being transferred\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    event BalanceTransfer(address indexed from, address indexed to, uint256 value, uint256 index);\n', '\n', '    /**\n', '     * @dev Burns aTokens from `user` and sends the equivalent amount of underlying to `receiverOfUnderlying`\n', '     * @param user The owner of the aTokens, getting them burned\n', '     * @param receiverOfUnderlying The address that will receive the underlying\n', '     * @param amount The amount being burned\n', '     * @param index The new liquidity index of the reserve\n', '     **/\n', '    function burn(\n', '        address user,\n', '        address receiverOfUnderlying,\n', '        uint256 amount,\n', '        uint256 index\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Mints aTokens to the reserve treasury\n', '     * @param amount The amount of tokens getting minted\n', '     * @param index The new liquidity index of the reserve\n', '     */\n', '    function mintToTreasury(uint256 amount, uint256 index) external;\n', '\n', '    /**\n', '     * @dev Transfers aTokens in the event of a borrow being liquidated, in case the liquidators reclaims the aToken\n', '     * @param from The address getting liquidated, current owner of the aTokens\n', '     * @param to The recipient\n', '     * @param value The amount of tokens getting transferred\n', '     **/\n', '    function transferOnLiquidation(\n', '        address from,\n', '        address to,\n', '        uint256 value\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Transfers the underlying asset to `target`. Used by the LendingPool to transfer\n', '     * assets in borrow(), withdraw() and flashLoan()\n', '     * @param user The recipient of the aTokens\n', '     * @param amount The amount getting transferred\n', '     * @return The amount transferred\n', '     **/\n', '    function transferUnderlyingTo(address user, uint256 amount) external returns (uint256);\n', '}\n', '\n', 'library DataTypes {\n', '    // refer to the whitepaper, section 1.1 basic concepts for a formal description of these properties.\n', '    struct ReserveData {\n', '        //stores the reserve configuration\n', '        ReserveConfigurationMap configuration;\n', '        //the liquidity index. Expressed in ray\n', '        uint128 liquidityIndex;\n', '        //variable borrow index. Expressed in ray\n', '        uint128 variableBorrowIndex;\n', '        //the current supply rate. Expressed in ray\n', '        uint128 currentLiquidityRate;\n', '        //the current variable borrow rate. Expressed in ray\n', '        uint128 currentVariableBorrowRate;\n', '        //the current stable borrow rate. Expressed in ray\n', '        uint128 currentStableBorrowRate;\n', '        uint40 lastUpdateTimestamp;\n', '        //tokens addresses\n', '        address aTokenAddress;\n', '        address stableDebtTokenAddress;\n', '        address variableDebtTokenAddress;\n', '        //address of the interest rate strategy\n', '        address interestRateStrategyAddress;\n', '        //the id of the reserve. Represents the position in the list of the active reserves\n', '        uint8 id;\n', '    }\n', '\n', '    struct ReserveConfigurationMap {\n', '        //bit 0-15: LTV\n', '        //bit 16-31: Liq. threshold\n', '        //bit 32-47: Liq. bonus\n', '        //bit 48-55: Decimals\n', '        //bit 56: Reserve is active\n', '        //bit 57: reserve is frozen\n', '        //bit 58: borrowing is enabled\n', '        //bit 59: stable rate borrowing enabled\n', '        //bit 60-63: reserved\n', '        //bit 64-79: reserve factor\n', '        uint256 data;\n', '    }\n', '\n', '    struct UserConfigurationMap {\n', '        uint256 data;\n', '    }\n', '\n', '    enum InterestRateMode {NONE, STABLE, VARIABLE}\n', '}\n', '// Part: ILendingPool\n', '\n', 'interface ILendingPool {\n', '    /**\n', '     * @dev Emitted on deposit()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address initiating the deposit\n', '     * @param onBehalfOf The beneficiary of the deposit, receiving the aTokens\n', '     * @param amount The amount deposited\n', '     * @param referral The referral code used\n', '     **/\n', '    event Deposit(address indexed reserve, address user, address indexed onBehalfOf, uint256 amount, uint16 indexed referral);\n', '\n', '    /**\n', '     * @dev Emitted on withdraw()\n', '     * @param reserve The address of the underlyng asset being withdrawn\n', '     * @param user The address initiating the withdrawal, owner of aTokens\n', '     * @param to Address that will receive the underlying\n', '     * @param amount The amount to be withdrawn\n', '     **/\n', '    event Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n', '     * @param reserve The address of the underlying asset being borrowed\n', '     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n', '     * initiator of the transaction on flashLoan()\n', '     * @param onBehalfOf The address that will be getting the debt\n', '     * @param amount The amount borrowed out\n', '     * @param borrowRateMode The rate mode: 1 for Stable, 2 for Variable\n', '     * @param borrowRate The numeric rate at which the user has borrowed\n', '     * @param referral The referral code used\n', '     **/\n', '    event Borrow(\n', '        address indexed reserve,\n', '        address user,\n', '        address indexed onBehalfOf,\n', '        uint256 amount,\n', '        uint256 borrowRateMode,\n', '        uint256 borrowRate,\n', '        uint16 indexed referral\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted on repay()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The beneficiary of the repayment, getting his debt reduced\n', '     * @param repayer The address of the user initiating the repay(), providing the funds\n', '     * @param amount The amount repaid\n', '     **/\n', '    event Repay(address indexed reserve, address indexed user, address indexed repayer, uint256 amount);\n', '\n', '    /**\n', '     * @dev Emitted on swapBorrowRateMode()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user swapping his rate mode\n', '     * @param rateMode The rate mode that the user wants to swap to\n', '     **/\n', '    event Swap(address indexed reserve, address indexed user, uint256 rateMode);\n', '\n', '    /**\n', '     * @dev Emitted on setUserUseReserveAsCollateral()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user enabling the usage as collateral\n', '     **/\n', '    event ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user);\n', '\n', '    /**\n', '     * @dev Emitted on setUserUseReserveAsCollateral()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user enabling the usage as collateral\n', '     **/\n', '    event ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user);\n', '\n', '    /**\n', '     * @dev Emitted on rebalanceStableBorrowRate()\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param user The address of the user for which the rebalance has been executed\n', '     **/\n', '    event RebalanceStableBorrowRate(address indexed reserve, address indexed user);\n', '\n', '    /**\n', '     * @dev Emitted on flashLoan()\n', '     * @param target The address of the flash loan receiver contract\n', '     * @param initiator The address initiating the flash loan\n', '     * @param asset The address of the asset being flash borrowed\n', '     * @param amount The amount flash borrowed\n', '     * @param premium The fee flash borrowed\n', '     * @param referralCode The referral code used\n', '     **/\n', '    event FlashLoan(\n', '        address indexed target,\n', '        address indexed initiator,\n', '        address indexed asset,\n', '        uint256 amount,\n', '        uint256 premium,\n', '        uint16 referralCode\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when the pause is triggered.\n', '     */\n', '    event Paused();\n', '\n', '    /**\n', '     * @dev Emitted when the pause is lifted.\n', '     */\n', '    event Unpaused();\n', '\n', '    /**\n', '     * @dev Emitted when a borrower is liquidated. This event is emitted by the LendingPool via\n', '     * LendingPoolCollateral manager using a DELEGATECALL\n', '     * This allows to have the events in the generated ABI for LendingPool.\n', '     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '     * @param user The address of the borrower getting liquidated\n', '     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '     * @param liquidatedCollateralAmount The amount of collateral received by the liiquidator\n', '     * @param liquidator The address of the liquidator\n', '     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '     * to receive the underlying collateral asset directly\n', '     **/\n', '    event LiquidationCall(\n', '        address indexed collateralAsset,\n', '        address indexed debtAsset,\n', '        address indexed user,\n', '        uint256 debtToCover,\n', '        uint256 liquidatedCollateralAmount,\n', '        address liquidator,\n', '        bool receiveAToken\n', '    );\n', '\n', '    /**\n', '     * @dev Emitted when the state of a reserve is updated. NOTE: This event is actually declared\n', '     * in the ReserveLogic library and emitted in the updateInterestRates() function. Since the function is internal,\n', '     * the event will actually be fired by the LendingPool contract. The event is therefore replicated here so it\n', '     * gets added to the LendingPool ABI\n', '     * @param reserve The address of the underlying asset of the reserve\n', '     * @param liquidityRate The new liquidity rate\n', '     * @param stableBorrowRate The new stable borrow rate\n', '     * @param variableBorrowRate The new variable borrow rate\n', '     * @param liquidityIndex The new liquidity index\n', '     * @param variableBorrowIndex The new variable borrow index\n', '     **/\n', '    event ReserveDataUpdated(\n', '        address indexed reserve,\n', '        uint256 liquidityRate,\n', '        uint256 stableBorrowRate,\n', '        uint256 variableBorrowRate,\n', '        uint256 liquidityIndex,\n', '        uint256 variableBorrowIndex\n', '    );\n', '\n', '    /**\n', '     * @dev Deposits an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n', '     * - E.g. User deposits 100 USDC and gets in return 100 aUSDC\n', '     * @param asset The address of the underlying asset to deposit\n', '     * @param amount The amount to be deposited\n', '     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n', '     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n', '     *   is a different wallet\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     **/\n', '    function deposit(\n', '        address asset,\n', '        uint256 amount,\n', '        address onBehalfOf,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n', '     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n', '     * @param asset The address of the underlying asset to withdraw\n', '     * @param amount The underlying amount to be withdrawn\n', '     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n', '     * @param to Address that will receive the underlying, same as msg.sender if the user\n', '     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n', '     *   different wallet\n', '     * @return The final amount withdrawn\n', '     **/\n', '    function withdraw(\n', '        address asset,\n', '        uint256 amount,\n', '        address to\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n', '     * already deposited enough collateral, or he was given enough allowance by a credit delegator on the\n', '     * corresponding debt token (StableDebtToken or VariableDebtToken)\n', '     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n', '     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n', '     * @param asset The address of the underlying asset to borrow\n', '     * @param amount The amount to be borrowed\n', '     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     * @param onBehalfOf Address of the user who will receive the debt. Should be the address of the borrower itself\n', '     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n', '     * if he has been given credit delegation allowance\n', '     **/\n', '    function borrow(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 interestRateMode,\n', '        uint16 referralCode,\n', '        address onBehalfOf\n', '    ) external;\n', '\n', '    /**\n', '     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n', '     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n', '     * @param asset The address of the borrowed underlying asset previously borrowed\n', '     * @param amount The amount to repay\n', '     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n', '     * @param rateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n', '     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n', '     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n', '     * other borrower whose debt should be removed\n', '     * @return The final amount repaid\n', '     **/\n', '    function repay(\n', '        address asset,\n', '        uint256 amount,\n', '        uint256 rateMode,\n', '        address onBehalfOf\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * @dev Allows a borrower to swap his debt between stable and variable mode, or viceversa\n', '     * @param asset The address of the underlying asset borrowed\n', '     * @param rateMode The rate mode that the user wants to swap to\n', '     **/\n', '    function swapBorrowRateMode(address asset, uint256 rateMode) external;\n', '\n', '    /**\n', '     * @dev Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n', '     * - Users can be rebalanced if the following conditions are satisfied:\n', '     *     1. Usage ratio is above 95%\n', '     *     2. the current deposit APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too much has been\n', '     *        borrowed at a stable rate and depositors are not earning enough\n', '     * @param asset The address of the underlying asset borrowed\n', '     * @param user The address of the user to be rebalanced\n', '     **/\n', '    function rebalanceStableBorrowRate(address asset, address user) external;\n', '\n', '    /**\n', '     * @dev Allows depositors to enable/disable a specific deposited asset as collateral\n', '     * @param asset The address of the underlying asset deposited\n', '     * @param useAsCollateral `true` if the user wants to use the deposit as collateral, `false` otherwise\n', '     **/\n', '    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external;\n', '\n', '    /**\n', '     * @dev Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n', '     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n', '     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n', '     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n', '     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n', '     * @param user The address of the borrower getting liquidated\n', '     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n', '     * @param receiveAToken `true` if the liquidators wants to receive the collateral aTokens, `false` if he wants\n', '     * to receive the underlying collateral asset directly\n', '     **/\n', '    function liquidationCall(\n', '        address collateralAsset,\n', '        address debtAsset,\n', '        address user,\n', '        uint256 debtToCover,\n', '        bool receiveAToken\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Allows smartcontracts to access the liquidity of the pool within one transaction,\n', '     * as long as the amount taken plus a fee is returned.\n', '     * IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept into consideration.\n', '     * For further details please visit https://developers.aave.com\n', '     * @param receiverAddress The address of the contract receiving the funds, implementing the IFlashLoanReceiver interface\n', '     * @param assets The addresses of the assets being flash-borrowed\n', '     * @param amounts The amounts amounts being flash-borrowed\n', '     * @param modes Types of the debt to open if the flash loan is not returned:\n', "     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n", '     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n', '     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n', '     * @param params Variadic packed params to pass to the receiver as extra information\n', '     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n', '     *   0 if the action is executed directly by the user, without any middle-man\n', '     **/\n', '    function flashLoan(\n', '        address receiverAddress,\n', '        address[] calldata assets,\n', '        uint256[] calldata amounts,\n', '        uint256[] calldata modes,\n', '        address onBehalfOf,\n', '        bytes calldata params,\n', '        uint16 referralCode\n', '    ) external;\n', '\n', '    /**\n', '     * @dev Returns the user account data across all the reserves\n', '     * @param user The address of the user\n', '     * @return totalCollateralETH the total collateral in ETH of the user\n', '     * @return totalDebtETH the total debt in ETH of the user\n', '     * @return availableBorrowsETH the borrowing power left of the user\n', '     * @return currentLiquidationThreshold the liquidation threshold of the user\n', '     * @return ltv the loan to value of the user\n', '     * @return healthFactor the current health factor of the user\n', '     **/\n', '    function getUserAccountData(address user)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 totalCollateralETH,\n', '            uint256 totalDebtETH,\n', '            uint256 availableBorrowsETH,\n', '            uint256 currentLiquidationThreshold,\n', '            uint256 ltv,\n', '            uint256 healthFactor\n', '        );\n', '\n', '    function initReserve(\n', '        address reserve,\n', '        address aTokenAddress,\n', '        address stableDebtAddress,\n', '        address variableDebtAddress,\n', '        address interestRateStrategyAddress\n', '    ) external;\n', '\n', '    function setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) external;\n', '\n', '    function setConfiguration(address reserve, uint256 configuration) external;\n', '\n', '    /**\n', '     * @dev Returns the configuration of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The configuration of the reserve\n', '     **/\n', '    function getConfiguration(address asset) external view returns (DataTypes.ReserveConfigurationMap memory);\n', '\n', '    /**\n', '     * @dev Returns the configuration of the user across all the reserves\n', '     * @param user The user address\n', '     * @return The configuration of the user\n', '     **/\n', '    function getUserConfiguration(address user) external view returns (DataTypes.UserConfigurationMap memory);\n', '\n', '    /**\n', '     * @dev Returns the normalized income normalized income of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', "     * @return The reserve's normalized income\n", '     */\n', '    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the normalized variable debt per unit of asset\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The reserve normalized variable debt\n', '     */\n', '    function getReserveNormalizedVariableDebt(address asset) external view returns (uint256);\n', '\n', '    /**\n', '     * @dev Returns the state and configuration of the reserve\n', '     * @param asset The address of the underlying asset of the reserve\n', '     * @return The state of the reserve\n', '     **/\n', '    function getReserveData(address asset) external view returns (DataTypes.ReserveData memory);\n', '\n', '    function finalizeTransfer(\n', '        address asset,\n', '        address from,\n', '        address to,\n', '        uint256 amount,\n', '        uint256 balanceFromAfter,\n', '        uint256 balanceToBefore\n', '    ) external;\n', '\n', '    function getReservesList() external view returns (address[] memory);\n', '\n', '    function getAddressesProvider() external view returns (ILendingPoolAddressesProvider);\n', '\n', '    function setPause(bool val) external;\n', '\n', '    function paused() external view returns (bool);\n', '}\n', '\n', '// Part: IProtocolDataProvider\n', '\n', 'interface IProtocolDataProvider {\n', '    struct TokenData {\n', '        string symbol;\n', '        address tokenAddress;\n', '    }\n', '\n', '    function ADDRESSES_PROVIDER() external view returns (ILendingPoolAddressesProvider);\n', '\n', '    function getAllReservesTokens() external view returns (TokenData[] memory);\n', '\n', '    function getAllATokens() external view returns (TokenData[] memory);\n', '\n', '    function getReserveConfigurationData(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 decimals,\n', '            uint256 ltv,\n', '            uint256 liquidationThreshold,\n', '            uint256 liquidationBonus,\n', '            uint256 reserveFactor,\n', '            bool usageAsCollateralEnabled,\n', '            bool borrowingEnabled,\n', '            bool stableBorrowRateEnabled,\n', '            bool isActive,\n', '            bool isFrozen\n', '        );\n', '\n', '    function getReserveData(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 availableLiquidity,\n', '            uint256 totalStableDebt,\n', '            uint256 totalVariableDebt,\n', '            uint256 liquidityRate,\n', '            uint256 variableBorrowRate,\n', '            uint256 stableBorrowRate,\n', '            uint256 averageStableBorrowRate,\n', '            uint256 liquidityIndex,\n', '            uint256 variableBorrowIndex,\n', '            uint40 lastUpdateTimestamp\n', '        );\n', '\n', '    function getUserReserveData(address asset, address user)\n', '        external\n', '        view\n', '        returns (\n', '            uint256 currentATokenBalance,\n', '            uint256 currentStableDebt,\n', '            uint256 currentVariableDebt,\n', '            uint256 principalStableDebt,\n', '            uint256 scaledVariableDebt,\n', '            uint256 stableBorrowRate,\n', '            uint256 liquidityRate,\n', '            uint40 stableRateLastUpdated,\n', '            bool usageAsCollateralEnabled\n', '        );\n', '\n', '    function getReserveTokensAddresses(address asset)\n', '        external\n', '        view\n', '        returns (\n', '            address aTokenAddress,\n', '            address stableDebtTokenAddress,\n', '            address variableDebtTokenAddress\n', '        );\n', '}\n', '\n', '// Part: OpenZeppelin/[email\xa0protected]/SafeERC20\n', '\n', '/**\n', ' * @title SafeERC20\n', ' * @dev Wrappers around ERC20 operations that throw on failure (when the token\n', ' * contract returns false). Tokens that return no value (and instead revert or\n', ' * throw on failure) are also supported, non-reverting calls are assumed to be\n', ' * successful.\n', ' * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n', ' * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n', ' */\n', 'library SafeERC20 {\n', '    using SafeMath for uint256;\n', '    using Address for address;\n', '\n', '    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n', '    }\n', '\n', '    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n', '    }\n', '\n', '    /**\n', '     * @dev Deprecated. This function has issues similar to the ones found in\n', '     * {IERC20-approve}, and its usage is discouraged.\n', '     *\n', '     * Whenever possible, use {safeIncreaseAllowance} and\n', '     * {safeDecreaseAllowance} instead.\n', '     */\n', '    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n', '        // safeApprove should only be called when setting an initial allowance,\n', '        // or when resetting it to zero. To increase and decrease it, use\n', "        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n", '        // solhint-disable-next-line max-line-length\n', '        require((value == 0) || (token.allowance(address(this), spender) == 0),\n', '            "SafeERC20: approve from non-zero to non-zero allowance"\n', '        );\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n', '    }\n', '\n', '    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n', '        uint256 newAllowance = token.allowance(address(this), spender).sub(value, "SafeERC20: decreased allowance below zero");\n', '        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n', '    }\n', '\n', '    /**\n', '     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n', '     * on the return value: the return value is optional (but if data is returned, it must not be false).\n', '     * @param token The token targeted by the call.\n', '     * @param data The call data (encoded using abi.encode or one of its variants).\n', '     */\n', '    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n', "        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n", "        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n", '        // the target address contains contract code and also asserts for success in the low-level call.\n', '\n', '        bytes memory returndata = address(token).functionCall(data, "SafeERC20: low-level call failed");\n', '        if (returndata.length > 0) { // Return data is optional\n', '            // solhint-disable-next-line max-line-length\n', '            require(abi.decode(returndata, (bool)), "SafeERC20: ERC20 operation did not succeed");\n', '        }\n', '    }\n', '}\n', '\n', '// Part: iearn-finance/[email\xa0protected]/VaultAPI\n', '\n', 'interface VaultAPI is IERC20 {\n', '    function apiVersion() external pure returns (string memory);\n', '\n', '    function withdraw(uint256 shares, address recipient) external returns (uint256);\n', '\n', '    function token() external view returns (address);\n', '\n', '    function strategies(address _strategy) external view returns (StrategyParams memory);\n', '\n', '    /**\n', "     * View how much the Vault would increase this Strategy's borrow limit,\n", '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function creditAvailable() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault would like to pull back from the Strategy,\n', '     * based on its present performance (since its last report). Can be used to\n', '     * determine expectedReturn in your Strategy.\n', '     */\n', '    function debtOutstanding() external view returns (uint256);\n', '\n', '    /**\n', '     * View how much the Vault expect this Strategy to return at the current\n', '     * block, based on its present performance (since its last report). Can be\n', '     * used to determine expectedReturn in your Strategy.\n', '     */\n', '    function expectedReturn() external view returns (uint256);\n', '\n', '    /**\n', '     * This is the main contact point where the Strategy interacts with the\n', '     * Vault. It is critical that this call is handled as intended by the\n', '     * Strategy. Therefore, this function will be called by BaseStrategy to\n', '     * make sure the integration is correct.\n', '     */\n', '    function report(\n', '        uint256 _gain,\n', '        uint256 _loss,\n', '        uint256 _debtPayment\n', '    ) external returns (uint256);\n', '\n', '    /**\n', '     * This function should only be used in the scenario where the Strategy is\n', '     * being retired but no migration of the positions are possible, or in the\n', '     * extreme scenario that the Strategy needs to be put into "Emergency Exit"\n', '     * mode in order for it to exit as quickly as possible. The latter scenario\n', '     * could be for any reason that is considered "critical" that the Strategy\n', '     * exits its position as fast as possible, such as a sudden change in\n', '     * market conditions leading to losses, or an imminent failure in an\n', '     * external dependency.\n', '     */\n', '    function revokeStrategy() external;\n', '\n', '    /**\n', '     * View the governance address of the Vault to assert privileged functions\n', '     * can only be called by governance. The Strategy serves the Vault, so it\n', '     * is subject to governance defined by the Vault.\n', '     */\n', '    function governance() external view returns (address);\n', '\n', '    /**\n', '     * View the management address of the Vault to assert privileged functions\n', '     * can only be called by management. The Strategy serves the Vault, so it\n', '     * is subject to management defined by the Vault.\n', '     */\n', '    function management() external view returns (address);\n', '\n', '    /**\n', '     * View the guardian address of the Vault to assert privileged functions\n', '     * can only be called by guardian. The Strategy serves the Vault, so it\n', '     * is subject to guardian defined by the Vault.\n', '     */\n', '    function guardian() external view returns (address);\n', '}\n', '\n', '// Part: GenericLenderBase\n', '\n', 'abstract contract GenericLenderBase is IGenericLender {\n', '    using SafeERC20 for IERC20;\n', '    VaultAPI public vault;\n', '    address public override strategy;\n', '    IERC20 public want;\n', '    string public override lenderName;\n', '    uint256 public dust;\n', '\n', '    event Cloned(address indexed clone);\n', '\n', '    constructor(address _strategy, string memory _name) public {\n', '        _initialize(_strategy, _name);\n', '    }\n', '\n', '    function _initialize(address _strategy, string memory _name) internal {\n', '        require(address(strategy) == address(0), "Lender already initialized");\n', '\n', '        strategy = _strategy;\n', '        vault = VaultAPI(IBaseStrategy(strategy).vault());\n', '        want = IERC20(vault.token());\n', '        lenderName = _name;\n', '        dust = 10000;\n', '\n', '        want.safeApprove(_strategy, uint256(-1));\n', '    }\n', '\n', '    function initialize(address _strategy, string memory _name) external virtual {\n', '        _initialize(_strategy, _name);\n', '    }\n', '\n', '    function _clone(address _strategy, string memory _name) internal returns (address newLender) {\n', '        // Copied from https://github.com/optionality/clone-factory/blob/master/contracts/CloneFactory.sol\n', '        bytes20 addressBytes = bytes20(address(this));\n', '\n', '        assembly {\n', '            // EIP-1167 bytecode\n', '            let clone_code := mload(0x40)\n', '            mstore(clone_code, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone_code, 0x14), addressBytes)\n', '            mstore(add(clone_code, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            newLender := create(0, clone_code, 0x37)\n', '        }\n', '\n', '        GenericLenderBase(newLender).initialize(_strategy, _name);\n', '        emit Cloned(newLender);\n', '    }\n', '\n', '    function setDust(uint256 _dust) external virtual override management {\n', '        dust = _dust;\n', '    }\n', '\n', '    function sweep(address _token) external virtual override management {\n', '        address[] memory _protectedTokens = protectedTokens();\n', '        for (uint256 i; i < _protectedTokens.length; i++) require(_token != _protectedTokens[i], "!protected");\n', '\n', '        IERC20(_token).safeTransfer(vault.governance(), IERC20(_token).balanceOf(address(this)));\n', '    }\n', '\n', '    function protectedTokens() internal view virtual returns (address[] memory);\n', '\n', '    //make sure to use\n', '    modifier management() {\n', '        require(\n', '            msg.sender == address(strategy) || msg.sender == vault.governance() || msg.sender == IBaseStrategy(strategy).strategist(),\n', '            "!management"\n', '        );\n', '        _;\n', '    }\n', '}\n', '\n', '// File: GenericAave.sol\n', '\n', '/********************\n', ' *   A lender plugin for LenderYieldOptimiser for any erc20 asset on Aave (not eth)\n', ' *   Made by SamPriestley.com\n', ' *   https://github.com/Grandthrax/yearnv2/blob/master/contracts/GenericLender/GenericCream.sol\n', ' *\n', ' ********************* */\n', '\n', 'contract GenericAave is GenericLenderBase {\n', '    using SafeERC20 for IERC20;\n', '    using Address for address;\n', '    using SafeMath for uint256;\n', '\n', '    IProtocolDataProvider public constant protocolDataProvider = IProtocolDataProvider(address(0x057835Ad21a177dbdd3090bB1CAE03EaCF78Fc6d));\n', '    IAToken public aToken;\n', '\n', '    constructor(\n', '        address _strategy,\n', '        string memory name,\n', '        IAToken _aToken\n', '    ) public GenericLenderBase(_strategy, name) {\n', '        _initialize(_aToken);\n', '    }\n', '\n', '    function initialize(IAToken _aToken) external {\n', '        _initialize(_aToken);\n', '    }\n', '\n', '    function _initialize(IAToken _aToken) internal {\n', '        require(address(aToken) == address(0), "GenericAave already initialized");\n', '\n', '        aToken = _aToken;\n', '        require(_lendingPool().getReserveData(address(want)).aTokenAddress == address(_aToken), "WRONG ATOKEN");\n', '        IERC20(address(want)).safeApprove(address(_lendingPool()), type(uint256).max);\n', '    }\n', '\n', '    function cloneAaveLender(\n', '        address _strategy,\n', '        string memory _name,\n', '        IAToken _aToken\n', '    ) external returns (address newLender) {\n', '        newLender = _clone(_strategy, _name);\n', '        GenericAave(newLender).initialize(_aToken);\n', '    }\n', '\n', '    function nav() external view override returns (uint256) {\n', '        return _nav();\n', '    }\n', '\n', '    function _nav() internal view returns (uint256) {\n', '        return want.balanceOf(address(this)).add(underlyingBalanceStored());\n', '    }\n', '\n', '    function underlyingBalanceStored() public view returns (uint256 balance) {\n', '        balance = aToken.balanceOf(address(this));\n', '    }\n', '\n', '    function apr() external view override returns (uint256) {\n', '        return _apr();\n', '    }\n', '\n', '    function _apr() internal view returns (uint256) {\n', '        return uint256(_lendingPool().getReserveData(address(want)).currentLiquidityRate).div(1e9); // dividing by 1e9 to pass from ray to wad\n', '    }\n', '\n', '    function weightedApr() external view override returns (uint256) {\n', '        uint256 a = _apr();\n', '        return a.mul(_nav());\n', '    }\n', '\n', '    function withdraw(uint256 amount) external override management returns (uint256) {\n', '        return _withdraw(amount);\n', '    }\n', '\n', '    //emergency withdraw. sends balance plus amount to governance\n', '    function emergencyWithdraw(uint256 amount) external override management {\n', '        _lendingPool().withdraw(address(want), amount, address(this));\n', '\n', '        want.safeTransfer(vault.governance(), want.balanceOf(address(this)));\n', '    }\n', '\n', '    //withdraw an amount including any want balance\n', '    function _withdraw(uint256 amount) internal returns (uint256) {\n', '        uint256 balanceUnderlying = aToken.balanceOf(address(this));\n', '        uint256 looseBalance = want.balanceOf(address(this));\n', '        uint256 total = balanceUnderlying.add(looseBalance);\n', '\n', '        if (amount > total) {\n', '            //cant withdraw more than we own\n', '            amount = total;\n', '        }\n', '\n', '        if (looseBalance >= amount) {\n', '            want.safeTransfer(address(strategy), amount);\n', '            return amount;\n', '        }\n', '\n', '        //not state changing but OK because of previous call\n', '        uint256 liquidity = want.balanceOf(address(aToken));\n', '\n', '        if (liquidity > 1) {\n', '            uint256 toWithdraw = amount.sub(looseBalance);\n', '\n', '            if (toWithdraw <= liquidity) {\n', '                //we can take all\n', '                _lendingPool().withdraw(address(want), toWithdraw, address(this));\n', '            } else {\n', '                //take all we can\n', '                _lendingPool().withdraw(address(want), liquidity, address(this));\n', '            }\n', '        }\n', '        looseBalance = want.balanceOf(address(this));\n', '        want.safeTransfer(address(strategy), looseBalance);\n', '        return looseBalance;\n', '    }\n', '\n', '    function deposit() external override management {\n', '        uint256 balance = want.balanceOf(address(this));\n', '        _lendingPool().deposit(address(want), balance, address(this), 7);\n', '    }\n', '\n', '    function withdrawAll() external override management returns (bool) {\n', '        uint256 invested = _nav();\n', '        uint256 returned = _withdraw(invested);\n', '        return returned >= invested;\n', '    }\n', '\n', '    function hasAssets() external view override returns (bool) {\n', '        return aToken.balanceOf(address(this)) > 0;\n', '    }\n', '\n', '    function _lendingPool() internal view returns (ILendingPool lendingPool) {\n', '        lendingPool = ILendingPool(protocolDataProvider.ADDRESSES_PROVIDER().getLendingPool());\n', '    }\n', '\n', '    function aprAfterDeposit(uint256 extraAmount) external view override returns (uint256) {\n', '        // i need to calculate new supplyRate after Deposit (when deposit has not been done yet)\n', '        DataTypes.ReserveData memory reserveData = _lendingPool().getReserveData(address(want));\n', '\n', '        (uint256 availableLiquidity, uint256 totalStableDebt, uint256 totalVariableDebt, , , , uint256 averageStableBorrowRate, , , ) =\n', '            protocolDataProvider.getReserveData(address(want));\n', '\n', '        uint256 newLiquidity = availableLiquidity.add(extraAmount);\n', '\n', '        (, , , , uint256 reserveFactor, , , , , ) = protocolDataProvider.getReserveConfigurationData(address(want));\n', '\n', '        (uint256 newLiquidityRate, , ) =\n', '            IReserveInterestRateStrategy(reserveData.interestRateStrategyAddress).calculateInterestRates(\n', '                address(want),\n', '                newLiquidity,\n', '                totalStableDebt,\n', '                totalVariableDebt,\n', '                averageStableBorrowRate,\n', '                reserveFactor\n', '            );\n', '\n', '        return newLiquidityRate.div(1e9); // divided by 1e9 to go from Ray to Wad\n', '    }\n', '\n', '    function protectedTokens() internal view override returns (address[] memory) {\n', '        address[] memory protected = new address[](2);\n', '        protected[0] = address(want);\n', '        protected[1] = address(aToken);\n', '        return protected;\n', '    }\n', '}']