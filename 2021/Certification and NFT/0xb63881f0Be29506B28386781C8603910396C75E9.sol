['// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.6;\n', '\n', 'import "./libraries/CloneLibrary.sol";\n', '\n', '\n', '/// @author Alchemy Team\n', '/// @title DelegatingVesterFactory\n', 'contract DelegatingVesterFactory {\n', '    using CloneLibrary for address;\n', '\n', '    event NewDelegateVester(address vester);\n', '    address public immutable delegatingVesterImplementation;\n', '\n', '    constructor(\n', '        address _delegatingVesterImplementation\n', '    ) {\n', '        delegatingVesterImplementation = _delegatingVesterImplementation;\n', '    }\n', '\n', '    function DelegatingVesterMint(\n', '        address token_,\n', '        address recipient_,\n', '        uint256 vestingAmount_,\n', '        uint256 vestingBegin_,\n', '        uint256 vestingEnd_\n', '    ) public returns (address vester) {\n', '        vester = delegatingVesterImplementation.createClone();\n', '\n', '        IDelegatingVester(vester).initialize(\n', '            token_,\n', '            recipient_,\n', '            vestingAmount_,\n', '            vestingBegin_,\n', '            vestingEnd_\n', '        );\n', '\n', '        emit NewDelegateVester(vester);\n', '    }\n', '}\n', '\n', '\n', 'interface IDelegatingVester {\n', '    function initialize(\n', '        address token_,\n', '        address recipient_,\n', '        uint256 vestingAmount_,\n', '        uint256 vestingBegin_,\n', '        uint256 vestingEnd_\n', '    ) external;\n', '}\n', '\n', '// SPDX-License-Identifier: MIT\n', 'pragma solidity ^0.7.0;\n', '\n', '/*\n', 'The MIT License (MIT)\n', 'Copyright (c) 2018 Murray Software, LLC.\n', 'Permission is hereby granted, free of charge, to any person obtaining\n', 'a copy of this software and associated documentation files (the\n', '"Software"), to deal in the Software without restriction, including\n', 'without limitation the rights to use, copy, modify, merge, publish,\n', 'distribute, sublicense, and/or sell copies of the Software, and to\n', 'permit persons to whom the Software is furnished to do so, subject to\n', 'the following conditions:\n', 'The above copyright notice and this permission notice shall be included\n', 'in all copies or substantial portions of the Software.\n', 'THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n', 'OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n', 'MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n', 'IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n', 'CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n', 'TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n', 'SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n', '*/\n', '//solhint-disable max-line-length\n', '//solhint-disable no-inline-assembly\n', '\n', '\n', '/**\n', ' * EIP 1167 Proxy Deployment\n', ' * Originally from https://github.com/optionality/clone-factory/\n', ' */\n', 'library CloneLibrary {\n', '\n', '    function createClone(address target) internal returns (address result) {\n', '        // Reserve 55 bytes for the deploy code + 17 bytes as a buffer to prevent overwriting\n', '        // other memory in the final mstore\n', '        bytes memory cloneBuffer = new bytes(72);\n', '        assembly {\n', '            let clone := add(cloneBuffer, 32)\n', '            mstore(clone, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000)\n', '            mstore(add(clone, 0x14), shl(96, target))\n', '            mstore(add(clone, 0x28), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '            result := create(0, clone, 0x37)\n', '        }\n', '    }\n', '\n', '\n', '    function isClone(address target, address query) internal view returns (bool result) {\n', '        assembly {\n', '            let clone := mload(0x40)\n', '            mstore(clone, 0x363d3d373d3d3d363d7300000000000000000000000000000000000000000000)\n', '            mstore(add(clone, 0xa), shl(96, target))\n', '            mstore(add(clone, 0x1e), 0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000)\n', '\n', '            let other := add(clone, 0x40)\n', '            extcodecopy(query, other, 0, 0x2d)\n', '            result := and(\n', '                eq(mload(clone), mload(other)),\n', '                eq(mload(add(clone, 0xd)), mload(add(other, 0xd)))\n', '            )\n', '        }\n', '    }\n', '}\n', '\n', '{\n', '  "optimizer": {\n', '    "enabled": false,\n', '    "runs": 200\n', '  },\n', '  "outputSelection": {\n', '    "*": {\n', '      "*": [\n', '        "evm.bytecode",\n', '        "evm.deployedBytecode",\n', '        "abi"\n', '      ]\n', '    }\n', '  },\n', '  "libraries": {}\n', '}']